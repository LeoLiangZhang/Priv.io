// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}
// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };
  var nodeFS = require('fs');
  var nodePath = require('path');
  Module['read'] = function(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };
  Module['readBinary'] = function(filename) { return Module['read'](filename, true) };
  Module['load'] = function(f) {
    globalEval(read(f));
  };
  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}
if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm
  Module['read'] = read;
  Module['readBinary'] = function(f) {
    return read(f, 'binary');
  };
  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }
  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };
  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}
if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }
  Module['load'] = importScripts;
}
if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}
function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***
// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];
// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];
// === Auto-generated preamble library stuff ===
//========================================
// Runtime code shared with compiler
//========================================
var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (type == 'i64' || type == 'double' || vararg) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2 + 2*i;
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = ((((STACKTOP)+7)>>3)<<3); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = ((((STATICTOP)+7)>>3)<<3); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = ((((DYNAMICTOP)+7)>>3)<<3); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+(((low)>>>(0))))+((+(((high)>>>(0))))*(+(4294967296)))) : ((+(((low)>>>(0))))+((+(((high)|(0))))*(+(4294967296))))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}
//========================================
// Runtime essentials
//========================================
var __THREW__ = 0; // Used in checking for thrown exceptions.
var ABORT = false;
var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;
function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}
var globalScope = this;
// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;
// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = globalScope['Module']['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}
// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;
// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/(+(4294967296))), (+(4294967295)))>>>0],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;
// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;
var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;
// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }
  var singleType = typeof types === 'string' ? types : null;
  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }
  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }
  if (singleType === 'i8') {
    HEAPU8.set(new Uint8Array(slab), ret);
    return ret;
  }
  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];
    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }
    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later
    setValue(ret+i, curr, type);
    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }
  return ret;
}
Module['allocate'] = allocate;
function Pointer_stringify(ptr, /* optional */ length) {
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;
  var ret = '';
  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;
// Memory management
var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}
var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk
function enlargeMemory() {
  abort('Cannot enlarge memory arrays in asm.js. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value, or (2) set Module.TOTAL_MEMORY before the program runs.');
}
var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;
// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'Cannot fallback to non-typed array case: Code is too specialized');
var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);
// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;
function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}
var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown
var runtimeInitialized = false;
function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}
// Tools
// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;
function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;
// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;
function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;
function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}
if (!Math.imul) Math.imul = function(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledInit = false, calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
    if (!calledRun && shouldRunNow) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;
Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data
function addPreRun(func) {
  if (!Module['preRun']) Module['preRun'] = [];
  else if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
  Module['preRun'].push(func);
}
var awaitingMemoryInitializer = false;
function loadMemoryInitializer(filename) {
  function applyData(data) {
    HEAPU8.set(data, STATIC_BASE);
    runPostSets();
  }
  // always do this asynchronously, to keep shell and web as similar as possible
  addPreRun(function() {
    if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
      applyData(Module['readBinary'](filename));
    } else {
      Browser.asyncLoad(filename, function(data) {
        applyData(data);
      }, function(data) {
        throw 'could not load memory initializer ' + filename;
      });
    }
  });
  awaitingMemoryInitializer = false;
}
// === Body ===
STATIC_BASE = 8;
STATICTOP = STATIC_BASE + 15880;
var _stdout;
var _stderr;
var _stdout = _stdout=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
var _stderr = _stderr=allocate([0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);
/* memory initializer */ allocateconcat([171,41,127,173,7,0,0,0,240,152,72,58,68,221,141,140,29,110,90,107,21,61,60,49,7,0,0,0,19,11,104,57,240,169,179,142,128,225,172,148,224,169,204,184,7,0,0,0,183,178,151,56,0,5,193,144,103,131,241,202,233,109,237,66,6,0,0,0,209,174,213,55,71,3,184,146,0,0,100,11,11,14,152,103,6,0,0,0,210,104,32,55,75,120,154,148,81,74,141,14,18,152,121,25,6,0,0,0,126,134,118,54,142,0,106,150,64,174,105,18,150,83,232,188,6,0,0,0,235,222,214,53,213,9,40,152,73,145,23,23,169,3,193,98,6,0,0,0,214,113,64,53,253,217,213,153,0,16,185,28,67,61,53,29,6,0,0,0,197,96,178,52,143,148,116,155,153,72,116,35,234,236,29,206,6,0,0,0,134,233,43,52,109,63,5,157,64,168,115,43,17,197,15,121,6,0,0,0,185,97,172,51,179,198,136,158,65,59,230,52,160,101,184,53,6,0,0,0,51,51,51,51,255,255,255,159,5,0,0,0,0,0,0,0,6,0,0,0,1,217,191,50,55,173,107,161,193,60,250,76,179,209,174,169,6,0,0,0,246,220,81,50,223,126,204,162,64,216,19,92,41,194,223,99,6,0,0,0,159,213,232,49,35,22,35,164,25,181,145,109,48,238,15,43,6,0,0,0,141,100,132,49,142,6,112,165,0,16,191,129,182,209,27,249,6,0,0,0,232,52,36,49,139,215,179,166,201,224,237,152,169,195,137,172,6,0,0,0,52,250,199,48,174,5,239,167,64,62,119,179,254,50,44,109,6,0,0,0,76,111,111,48,213,3,34,169,209,196,187,209,201,7,121,56,6,0,0,0,127,85,26,48,37,60,77,170,0,0,36,244,11,122,111,12,5,0,0,0,209,115,200,47,230,16,113,171,73,211,231,6,84,129,146,40,5,0,0,0,82,150,121,47,68,221,141,172,160,48,202,7,157,98,232,6,5,0,0,0,143,141,45,47,251,245,163,173,187,43,195,8,160,220,115,211,5,0,0,0,22,46,228,46,240,169,179,174,0,108,212,9,149,120,177,160,5,0,0,0,9,80,157,46,180,66,189,175,253,172,255,10,165,17,104,116,5,0,0,0,192,206,88,46,0,5,193,176,224,190,70,12,15,80,166,77,5,0,0,0,116,136,22,46,30,49,191,177,239,134,171,13,130,53,162,43,5,0,0,0,247,93,214,45,71,3,184,178,0,0,48,15,136,10,178,13,5,0,0,0,117,50,152,45,250,179,171,179,241,58,214,16,228,92,141,230,5,0,0,0,56,235,91,45,75,120,154,180,32,95,160,18,157,253,205,183,5,0,0,0,121,111,33,45,38,130,132,181,227,170,144,20,51,57,88,142,5,0,0,0,46,168,232,44,142,0,106,182,0,116,169,22,234,195,124,105,5,0,0,0,234,127,177,44,214,31,75,183,37,40,237,24,108,202,165,72,5,0,0,0,176,226,123,44,213,9,40,184,96,77,94,27,22,219,82,43,5,0,0,0,219,189,71,44,21,230,0,185,151,130,255,29,166,134,21,17,5,0,0,0,252,255,20,44,253,217,213,185,0,128,211,32,54,43,29,243,5,0,0,0,195,152,227,43,245,8,167,186,153,23,221,35,25,109,215,200,5,0,0,0,231,120,179,43,143,148,116,187,160,53,31,39,180,30,203,162,5,0,0,0,16,146,132,43,162,156,62,188,11,225,156,42,195,62,124,128,5,0,0,0,199,214,86,43,109,63,5,189,0,60,89,46,191,200,126,97,5,0,0,0,96,58,42,43,171,153,200,189,77,132,87,50,190,108,116,69,5,0,0,0,241,176,254,42,179,198,136,190,224,19,155,54,115,162,10,44,5,0,0,0,60,47,212,42,139,224,69,191,63,97,39,59,5,8,249,20,5,0,0,0,170,170,170,42,255,255,255,191,6,0,0,0,0,0,0,0,5,0,0,0,58,25,130,42,180,60,183,192,65,161,40,69,41,8,207,217,5,0,0,0,118,113,90,42,55,173,107,193,32,20,165,74,65,72,252,182,5,0,0,0,110,170,51,42,19,103,29,194,51,70,121,80,203,84,48,151,5,0,0,0,170,187,13,42,223,126,204,194,0,68,169,86,75,190,29,122,5,0,0,0,36,157,232,41,72,8,121,195,117,57,57,93,127,205,127,95,5,0,0,0,64,71,196,41,35,22,35,196,96,114,45,100,132,108,25,71,5,0,0,0,199,178,160,41,120,186,202,196,231,90,138,107,53,54,180,48,5,0,0,0,219,216,125,41,142,6,112,197,0,128,84,115,246,165,31,28,5,0,0,0,249,178,91,41,244,10,19,198,233,143,144,123,74,99,48,9,5,0,0,0,235,58,58,41,139,215,179,198,160,90,67,132,60,74,127,239,5,0,0,0,204,106,25,41,147,123,82,199,91,210,113,141,210,82,85,207,5,0,0,0,251,60,249,40,174,5,239,199,0,12,33,151,142,124,164,177,5,0,0,0,27,172,217,40,237,131,137,200,157,63,86,161,62,180,52,150,5,0,0,0,16,179,186,40,213,3,34,201,224,200,22,172,125,129,211,124,5,0,0,0,248,76,156,40,103,146,184,201,143,39,104,183,97,103,83,101,5,0,0,0,41,117,126,40,37,60,77,202,0,0,80,195,142,88,139,79,5,0,0,0,48,39,97,40,28,13,224,202,145,27,212,207,36,60,86,59,5,0,0,0,201,94,68,40,230,16,113,203,32,105,250,220,84,129,146,40,5,0,0,0,225,23,40,40,177,82,0,204,131,253,200,234,176,191,33,23,5,0,0,0,144,78,12,40,68,221,141,204,0,20,70,249,157,98,232,6,4,0,0,0,27,255,240,39,5,187,25,205,177,132,28,3,124,193,28,73,4,0,0,0,236,37,214,39,251,245,163,205,16,171,66,3,59,216,17,58,4,0,0,0,149,191,187,39,214,151,44,206,33,44,106,3,205,116,224,43,4,0,0,0,200,200,161,39,240,169,179,206,0,16,147,3,231,2,122,30,4,0,0,0,94,62,136,39,80,53,57,207,225,94,189,3,221,14,209,17,4,0,0,0,76,29,111,39,180,66,189,207,16,33,233,3,104,44,217,5,4,0,0,0,168,98,86,39,139,218,63,208,241,94,22,4,178,191,13,245,4,0,0,0,163,11,62,39,0,5,193,208,0,33,69,4,22,19,159,223,4,0,0,0,140,21,38,39,250,201,64,209,209,111,117,4,132,166,82,203,4,0,0,0,201,125,14,39,30,49,191,209,16,84,167,4,151,62,22,184,4,0,0,0,221,65,247,38,212,65,60,210,129,214,218,4,105,242,216,165,4,0,0,0,95,95,224,38,71,3,184,210,0,0,16,5,205,15,139,148,4,0,0,0,254,211,201,38,106,124,50,211,129,217,70,5,21,2,30,132,4,0,0,0,127,157,179,38,250,179,171,211,16,108,127,5,30,59,132,116,4,0,0,0,188,185,157,38,126,176,35,212,209,192,185,5,110,30,177,101,4,0,0,0,161,38,136,38,75,120,154,212,0,225,245,5,35,238,152,87,4,0,0,0,45,226,114,38,135,17,16,213,241,213,51,6,155,185,48,74,4,0,0,0,114,234,93,38,38,130,132,213,16,169,115,6,148,77,110,61,4,0,0,0,147,61,73,38,244,207,247,213,225,99,181,6,176,37,72,49,4,0,0,0,194,217,52,38,142,0,106,214,0,16,249,6,46,95,181,37,4,0,0,0,65,189,32,38,106,25,219,214,33,183,62,7,203,172,173,26,4,0,0,0,98,230,12,38,214,31,75,215,16,99,134,7,162,75,41,16,4,0,0,0,133,83,249,37,249,24,186,215,177,29,208,7,246,248,32,6,4,0,0,0,22,3,230,37,213,9,40,216,0,241,27,8,182,209,27,249,4,0,0,0,144,243,210,37,75,247,148,216,17,231,105,8,42,123,211,230,4,0,0,0,121,35,192,37,21,230,0,217,16,10,186,8,110,255,92,213,4,0,0,0,101,145,173,37,210,218,107,217,65,100,12,9,178,45,173,196,4,0,0,0,243,59,155,37,253,217,213,217,0,0,97,9,207,133,185,180,4,0,0,0,203,33,137,37,243,231,62,218,193,231,183,9,239,43,120,165,4,0,0,0,162,65,119,37,245,8,167,218,16,38,17,10,42,221,223,150,4,0,0,0,55,154,101,37,38,65,14,219,145,197,108,10,9,229,231,136,4,0,0,0,80,42,84,37,143,148,116,219,0,209,202,10,211,19,136,123,4,0,0,0,194,240,66,37,28,7,218,219,49,83,43,11,149,181,184,110,4,0,0,0,100,236,49,37,162,156,62,220,16,87,142,11,219,137,114,98,4,0,0,0,28,28,33,37,220,88,162,220,161,231,243,11,7,188,174,86,4,0,0,0,213,126,16,37,109,63,5,221,0,16,92,12,51,220,102,75,4,0,0,0,131,19,0,37,224,83,103,221,97,219,198,12,163,216,148,64,4,0,0,0,33,217,239,36,171,153,200,221,16,85,52,13,165,247,50,54,4,0,0,0,179,206,223,36,46,20,41,222,113,136,164,13,240,209,59,44,4,0,0,0,67,243,207,36,179,198,136,222,0,129,23,14,95,77,170,34,4,0,0,0,225,69,192,36,113,180,231,222,81,74,141,14,18,152,121,25,4,0,0,0,166,197,176,36,139,224,69,223,16,240,5,15,229,35,165,16,4,0,0,0,176,113,161,36,17,78,163,223,1,126,129,15,55,162,40,8,4,0,0,0,36,73,146,36,255,255,255,223,7,0,0,0,0,0,0,0,4,0,0,0,44,75,131,36,66,249,91,224,1,130,129,16,82,196,78,240,4,0,0,0,249,118,116,36,180,60,183,224,16,16,6,17,74,68,54,225,4,0,0,0,192,203,101,36,29,205,17,225,81,182,141,17,137,149,175,210,4,0,0,0,188,72,87,36,55,173,107,225,0,129,24,18,131,42,180,196,4,0,0,0,47,237,72,36,171,223,196,225,113,124,166,18,245,204,61,183,4,0,0,0,93,184,58,36,19,103,29,226,16,181,55,19,197,152,70,170,4,0,0,0,146,169,44,36,251,69,117,226,97,55,204,19,41,247,200,157,4,0,0,0,27,192,30,36,223,126,204,226,0,16,100,20,48,154,191,145,4,0,0,0,77,251,16,36,45,20,35,227,161,75,255,20,135,120,37,134,4,0,0,0,128,90,3,36,72,8,121,227,16,247,157,21,140,201,245,122,4,0,0,0,16,221,245,35,130,93,206,227,49,31,64,22,160,1,44,112,4,0,0,0,93,130,232,35,35,22,35,228,0,209,229,22,177,206,195,101,4,0,0,0,204,73,219,35,101,52,119,228,145,25,143,23,2,21,185,91,4,0,0,0,196,50,206,35,120,186,202,228,16,6,60,24,35,236,7,82,4,0,0,0,179,60,193,35,126,170,29,229,193,163,236,24,25,156,172,72,4,0,0,0,6,103,180,35,142,6,112,229,0,0,161,25,181,154,163,63,4,0,0,0,50,177,167,35,181,208,193,229,65,40,89,26,18,137,233,54,4,0,0,0,172,26,155,35,244,10,19,230,16,42,21,27,64,49,123,46,4,0,0,0,239,162,142,35,65,183,99,230,17,19,213,27,11,132,85,38,4,0,0,0,118,73,130,35,139,215,179,230,0,241,152,28,234,150,117,30,4,0,0,0,195,13,118,35,179,109,3,231,177,209,96,29,13,162,216,22,4,0,0,0,88,239,105,35,147,123,82,231,16,195,44,30,135,254,123,15,4,0,0,0,187,237,93,35,249,2,161,231,33,211,252,30,146,36,93,8,4,0,0,0,116,8,82,35,174,5,239,231,0,16,209,31,244,169,121,1,4,0,0,0,16,63,70,35,109,133,60,232,225,135,169,32,235,128,158,245,4,0,0,0,27,145,58,35,237,131,137,232,16,73,134,33,219,104,183,232,4,0,0,0,38,254,46,35,217,2,214,232,241,97,103,34,213,214,57,220,4,0,0,0,198,133,35,35,213,3,34,233,0,225,76,35,209,197,33,208,4,0,0,0,142,39,24,35,126,136,109,233,209,212,54,36,55,94,107,196,4,0,0,0,24,227,12,35,103,146,184,233,16,76,37,37,156,243,18,185,4,0,0,0,253,183,1,35,29,35,3,234,129,85,24,38,148,2,21,174,4,0,0,0,217,165,246,34,37,60,77,234,0,0,16,39,177,46,110,163,4,0,0,0,76,172,235,34,254,222,150,234,129,90,12,40,148,64,27,153,4,0,0,0,246,202,224,34,28,13,224,234,16,116,13,41,30,36,25,143,4,0,0,0,121,1,214,34,242,199,40,235,209,91,19,42,183,230,100,133,4,0,0,0,122,79,203,34,230,16,113,235,0,33,30,43,180,181,251,123,4,0,0,0,161,180,192,34,93,233,184,235,241,210,45,44,200,220,218,114,4,0,0,0,149,48,182,34,177,82,0,236,16,129,66,45,152,196,255,105,4,0,0,0,0,195,171,34,57,78,71,236,225,58,92,46,84,241,103,97,4,0,0,0,144,107,161,34,68,221,141,236,0,16,123,47,110,1,17,89,4,0,0,0,241,41,151,34,28,1,212,236,33,16,159,48,95,172,248,80,4,0,0,0,212,253,140,34,5,187,25,237,16,75,200,49,124,193,28,73,4,0,0,0,233,230,130,34,60,12,95,237,177,208,246,50,216,38,123,65,4,0,0,0,227,228,120,34,251,245,163,237,0,177,42,52,59,216,17,58,4,0,0,0,119,247,110,34,116,121,232,237,17,252,99,53,34,230,222,50,4,0,0,0,90,30,101,34,214,151,44,238,16,194,162,54,205,116,224,43,4,0,0,0,68,89,91,34,73,82,112,238,65,19,231,55,88,187,20,37,4,0,0,0,238,167,81,34,240,169,179,238,0,0,49,57,231,2,122,30,4,0,0,0,17,10,72,34,234,159,246,238,193,152,128,58,208,165,14,24,4,0,0,0,105,127,62,34,80,53,57,239,16,238,213,59,221,14,209,17,4,0,0,0,180,7,53,34,57,107,123,239,145,16,49,61,142,184,191,11,4,0,0,0,175,162,43,34,180,66,189,239,0,17,146,62,104,44,217,5,4,0,0,0,25,80,34,34,205,188,254,239,49,0,249,63,76,2,28,0,4,0,0,0,180,15,25,34,139,218,63,240,16,239,101,65,178,191,13,245,4,0,0,0,65,225,15,34,242,156,128,240,161,238,216,66,163,239,48,234,4,0,0,0,131,196,6,34,0,5,193,240,0,16,82,68,22,19,159,223,4,0,0,0,63,185,253,33,177,19,1,241,97,100,209,69,201,192,85,213,4,0,0,0,58,191,244,33,250,201,64,241,16,253,86,71,132,166,82,203,4,0,0,0,57,214,235,33,207,40,128,241,113,235,226,72,31,136,147,193,4,0,0,0,6,254,226,33,30,49,191,241,0,65,117,74,151,62,22,184,4,0,0,0,103,54,218,33,211,227,253,241,81,15,14,76,36,183,216,174,4,0,0,0,40,127,209,33,212,65,60,242,16,104,173,77,105,242,216,165,4,0,0,0,17,216,200,33,5,76,122,242,1,93,83,79,157,3,21,157,4,0,0,0,239,64,192,33,71,3,184,242,0,0,0,81,205,15,139,148,4,0,0,0,143,185,183,33,117,104,245,242,1,99,179,82,29,77,57,140,4,0,0,0,188,65,175,33,106,124,50,243,16,152,109,84,21,2,30,132,4,0,0,0,71,217,166,33,251,63,111,243,81,177,46,86,248,132,55,124,4,0,0,0,253,127,158,33,250,179,171,243,0,193,246,87,30,59,132,116,4,0,0,0,175,53,150,33,55,217,231,243,113,217,197,89,93,152,2,109,4,0,0,0,46,250,141,33,126,176,35,244,16,13,156,91,110,30,177,101,4,0,0,0,76,205,133,33,152,58,95,244,97,110,121,93,100,92,142,94,4,0,0,0,218,174,125,33,75,120,154,244,0,16,94,95,35,238,152,87,4,0,0,0,172,158,117,33,91,106,213,244,161,4,74,97,222,123,207,80,4,0,0,0,150,156,109,33,135,17,16,245,16,95,61,99,155,185,48,74,4,0,0,0,110,168,101,33,140,110,74,245,49,50,56,101,189,102,187,67,4,0,0,0,7,194,93,33,38,130,132,245,0,145,58,103,148,77,110,61,4,0,0,0,57,233,85,33,12,77,190,245,145,142,68,105,238,66,72,55,4,0,0,0,219,29,78,33,244,207,247,245,16,62,86,107,176,37,72,49,4,0,0,0,196,95,70,33,143,11,49,246,193,178,111,109,117,222,108,43,4,0,0,0,205,174,62,33,142,0,106,246,0,0,145,111,46,95,181,37,4,0,0,0,206,10,55,33,158,175,162,246,65,57,186,113,197,162,32,32,4,0,0,0,160,115,47,33,106,25,219,246,16,114,235,115,203,172,173,26,4,0,0,0,32,233,39,33,155,62,19,247,17,190,36,118,31,137,91,21,4,0,0,0,38,107,32,33,214,31,75,247,0,49,102,120,162,75,41,16,4,0,0,0,143,249,24,33,191,189,130,247,177,222,175,122,233,15,22,11,4,0,0,0,54,148,17,33,249,24,186,247,16,219,1,125,246,248,32,6,4,0,0,0,248,58,10,33,33,50,241,247,33,58,92,127,239,48,73,1,4,0,0,0,179,237,2,33,213,9,40,248,0,16,191,129,182,209,27,249,4,0,0,0,68,172,251,32,176,160,94,248,225,112,42,132,199,176,220,239,4,0,0,0,138,118,244,32,75,247,148,248,16,113,158,134,42,123,211,230,4,0,0,0,98,76,237,32,59,14,203,248,241,36,27,137,74,185,254,221,4,0,0,0,174,45,230,32,21,230,0,249,0,161,160,139,110,255,92,213,4,0,0,0,75,26,223,32,109,127,54,249,209,249,46,142,80,237,236,204,4,0,0,0,28,18,216,32,210,218,107,249,16,68,198,144,178,45,173,196,4,0,0,0,0,21,209,32,211,248,160,249,129,148,102,147,249,117,156,188,4,0,0,0,217,34,202,32,253,217,213,249,0,0,16,150,207,133,185,180,4,0,0,0,136,59,195,32,218,126,10,250,129,155,194,152,194,38,3,173,4,0,0,0,241,94,188,32,243,231,62,250,16,124,126,155,239,43,120,165,4,0,0,0,245,140,181,32,208,21,115,250,209,182,67,158,169,113,23,158,4,0,0,0,121,197,174,32,245,8,167,250,0,97,18,161,42,221,223,150,4,0,0,0,94,8,168,32,231,193,218,250,241,143,234,163,65,92,208,143,4,0,0,0,139,85,161,32,38,65,14,251,16,89,204,166,9,229,231,136,4,0,0,0,226,172,154,32,52,135,65,251,225,209,183,169,157,117,37,130,4,0,0,0,73,14,148,32,143,148,116,251,0,16,173,172,211,19,136,123,4,0,0,0,165,121,141,32,179,105,167,251,33,41,172,175,249,204,14,117,4,0,0,0,219,238,134,32,28,7,218,251,16,51,181,178,149,181,184,110,4,0,0,0,210,109,128,32,68,109,12,252,177,67,200,181,35,233,132,104,4,0,0,0,113,246,121,32,162,156,62,252,0,113,229,184,219,137,114,98,4,0,0,0,157,136,115,32,174,149,112,252,17,209,12,188,123,192,128,92,4,0,0,0,62,36,109,32,220,88,162,252,16,122,62,191,7,188,174,86,4,0,0,0,60,201,102,32,160,230,211,252,65,130,122,194,155,177,251,80,4,0,0,0,126,119,96,32,109,63,5,253,0,0,193,197,51,220,102,75,4,0,0,0,237,46,90,32,178,99,54,253,193,9,18,201,124,124,239,69,4,0,0,0,113,239,83,32,224,83,103,253,16,182,109,204,163,216,148,64,4,0,0,0,243,184,77,32,100,16,152,253,145,27,212,207,36,60,86,59,4,0,0,0,92,139,71,32,171,153,200,253,0,81,69,211,165,247,50,54,4,0,0,0,150,102,65,32,32,240,248,253,49,109,193,214,195,96,42,49,4,0,0,0,139,74,59,32,46,20,41,254,16,135,72,218,240,209,59,44,4,0,0,0,37,55,53,32,60,6,89,254,161,181,218,221,69,170,102,39,4,0,0,0,78,44,47,32,179,198,136,254,0,16,120,225,95,77,170,34,4,0,0,0,240,41,41,32,248,85,184,254,97,173,32,229,60,35,6,30,4,0,0,0,248,47,35,32,113,180,231,254,16,165,212,232,18,152,121,25,4,0,0,0,80,62,29,32,129,226,22,255,113,14,148,236,51,28,4,21,4,0,0,0,229,84,23,32,139,224,69,255,0,1,95,240,229,35,165,16,4,0,0,0,161,115,17,32,240,174,116,255,81,148,53,244,73,39,92,12,4,0,0,0,113,154,11,32,17,78,163,255,16,224,23,248,55,162,40,8,4,0,0,0,66,201,5,32,76,190,209,255,1,252,5,252,35,20,10,4,4,0,0,0,255,255,255,31,255,255,255,255,8,0,0,0,0,0,0,0,0,0,0,0,106,0,0,0,118,2,0,0,212,2,0,0,76,0,0,0,166,0,0,0,0,0,0,0,0,0,0,0,0,12,8,4,1,1,1,1,1,13,9,5,2,2,2,2,2,6,10,14,3,3,3,3,3,7,11,15,4,16,6,18,4,0,12,8,5,17,7,19,5,1,13,9,6,18,4,16,6,10,14,2,7,19,5,17,7,11,15,3,8,10,9,11,8,4,0,12,9,11,8,10,9,5,1,13,10,9,11,8,10,14,2,6,11,8,10,9,11,15,3,7,12,22,24,20,12,8,4,0,13,23,25,21,13,9,5,1,25,21,13,23,14,2,6,10,24,20,12,22,15,3,7,11,16,6,18,4,16,16,16,16,17,7,19,5,17,17,17,17,18,4,16,6,18,22,19,23,19,5,17,7,19,23,18,22,20,12,22,24,20,20,20,20,21,13,23,25,21,21,21,21,22,24,20,12,22,19,23,18,23,25,21,13,23,18,22,19,24,20,12,22,15,3,7,11,25,21,13,23,14,2,6,10,114,1,0,0,0,0,0,0,20,1,0,0,106,1,0,0,138,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,1,171,205,183,57,163,197,239,241,27,61,167,41,19,53,223,225,139,173,151,25,131,165,207,209,251,29,135,9,243,21,191,193,107,141,119,249,99,133,175,177,219,253,103,233,211,245,159,161,75,109,87,217,67,101,143,145,187,221,71,201,179,213,127,129,43,77,55,185,35,69,111,113,155,189,39,169,147,181,95,97,11,45,23,153,3,37,79,81,123,157,7,137,115,149,63,65,235,13,247,121,227,5,47,49,91,125,231,105,83,117,31,33,203,237,215,89,195,229,15,17,59,93,199,73,51,85,255,92,2,0,0,0,0,0,0,0,0,0,0,140,2,0,0,80,1,0,0,158,2,0,0,130,2,0,0,140,2,0,0,80,1,0,0,158,2,0,0])
, "i8", ALLOC_NONE, Runtime.GLOBAL_BASE)
function runPostSets() {
}
if (!awaitingMemoryInitializer) runPostSets();
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);
assert(tempDoublePtr % 8 == 0);
function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}
  Module["_memset"] = _memset;var _llvm_memset_p0i8_i32=_memset;
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOPNOTSUPP:45,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_NORMAL);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  var __impure_ptr=allocate(1, "i32*", ALLOC_STATIC);var FS={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.init();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
        FS.ensureRoot();
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === 10) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        // TODO: put these low in memory like we used to assert on: assert(Math.max(_stdin, _stdout, _stderr) < 15000); // make sure these are low, we flatten arrays with these
        HEAP32[((_stdin)>>2)]=1;
        HEAP32[((_stdout)>>2)]=2;
        HEAP32[((_stderr)>>2)]=3;
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_DYNAMIC) ], 'void*', ALLOC_NONE, __impure_ptr);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output(10);
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output(10);
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  var ___dirent_struct_layout={__size__:1040,d_ino:0,d_name:4,d_off:1028,d_reclen:1032,d_type:1036};function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather than strictly
      // following the POSIX standard.
      var mode = HEAP32[((varargs)>>2)];
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length; // Keep dense
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[((buf++)|0)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray) { // typed array
          HEAPU8.set(contents.subarray(offset, offset+size), buf);
        } else
        if (contents.slice) { // normal array
          for (var i = 0; i < size; i++) {
            HEAP8[(((buf)+(i))|0)]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[(((buf)+(i))|0)]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[((buf++)|0)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[(((buf)+(i))|0)]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) return 0;
      var bytesRead = _read(stream, ptr, bytesToRead);
      var streamObj = FS.streams[stream];
      if (bytesRead == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }
    }
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        FS.streams[fildes] = null;
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[(((buf)+(i))|0)];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[(((buf)+(i))|0)]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr
      var ret = _write(stream, _fputc.ret, 1);
      if (ret == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return -1;
      } else {
        return chr;
      }
    }
  var _llvm_va_start=undefined;
  Module["_strlen"] = _strlen;
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
          // Handle precision.
          var precisionSet = false;
          if (next == 46) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          } else {
            var precision = 6; // Standard default.
          }
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = flagAlternative ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
              // Add sign if needed
              if (flagAlwaysSigned) {
                if (currArg < 0) {
                  prefix = '-' + prefix;
                } else {
                  prefix = '+' + prefix;
                }
              }
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
                // Add sign.
                if (flagAlwaysSigned && currArg >= 0) {
                  argText = '+' + argText;
                }
              }
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }
  function _llvm_va_end() {}
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      function ExitStatus() {
        this.name = "ExitStatus";
        this.message = "Program terminated with exit(" + status + ")";
        this.status = status;
        Module.print('Exit Status: ' + status);
      };
      ExitStatus.prototype = new Error();
      ExitStatus.prototype.constructor = ExitStatus;
      exitRuntime();
      ABORT = true;
      throw new ExitStatus();
    }function _exit(status) {
      __exit(status);
    }
  Module["_memcpy"] = _memcpy;var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;
  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }
  var ___strtok_state=0;
  function _strtok_r(s, delim, lasts) {
      var skip_leading_delim = 1;
      var spanp;
      var c, sc;
      var tok;
      if (s == 0 && (s = getValue(lasts, 'i8*')) == 0) {
        return 0;
      }
      cont: while (1) {
        c = getValue(s++, 'i8');
        for (spanp = delim; (sc = getValue(spanp++, 'i8')) != 0;) {
          if (c == sc) {
            if (skip_leading_delim) {
              continue cont;
            } else {
              setValue(lasts, s, 'i8*');
              setValue(s - 1, 0, 'i8');
              return s - 1;
            }
          }
        }
        break;
      }
      if (c == 0) {
        setValue(lasts, 0, 'i8*');
        return 0;
      }
      tok = s - 1;
      for (;;) {
        c = getValue(s++, 'i8');
        spanp = delim;
        do {
          if ((sc = getValue(spanp++, 'i8')) == c) {
            if (c == 0) {
              s = 0;
            } else {
              setValue(s - 1, 0, 'i8');
            }
            setValue(lasts, s, 'i8*');
            return tok;
          }
        } while (sc != 0);
      }
      abort('strtok_r error!');
    }function _strtok(s, delim) {
      return _strtok_r(s, delim, ___strtok_state);
    }
  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }
  function _strdup(ptr) {
      var len = _strlen(ptr);
      var newStr = _malloc(len + 1);
      _memcpy(newStr, ptr, len);
      HEAP8[(((newStr)+(len))|0)]=0;
      return newStr;
    }
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }
  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }
  function __isFloat(text) {
      return !!(/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text));
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[' '] = 1;
        __scanString.whiteSpace['\t'] = 1;
        __scanString.whiteSpace['\n'] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
        // TODO: Support strings like "%5c" etc.
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'c') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          fields++;
          next = get();
          HEAP8[(argPtr)]=next
          formatIndex += 2;
          continue;
        }
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if(format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' || type == 'E') {
            var last = 0;
            next = get();
            while (next > 0) {
              buffer.push(String.fromCharCode(next));
              if (__isFloat(buffer.join(''))) {
                last = buffer.length;
              }
              next = get();
            }
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   (type === 'x' && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if(longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,Math.min(Math.floor((parseInt(text, 10))/(+(4294967296))), (+(4294967295)))>>>0],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'f':
            case 'e':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text)
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j]
              }
              break;
          }
          fields++;
        } else if (format[formatIndex] in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      var get = function() { return HEAP8[(((s)+(index++))|0)]; };
      var unget = function() { index--; };
      return __scanString(format, get, unget, varargs);
    }
  function _isalpha(chr) {
      return (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }
  function _isalnum(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 122) ||
             (chr >= 65 && chr <= 90);
    }
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[(((px)+(i))|0)];
        var y = HEAPU8[(((py)+(i))|0)];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }
  function _qsort(base, num, size, cmp) {
      if (num == 0 || size == 0) return;
      // forward calls to the JavaScript sort method
      // first, sort the items logically
      var comparator = function(x, y) {
        return Runtime.dynCall('iii', cmp, [x, y]);
      }
      var keys = [];
      for (var i = 0; i < num; i++) keys.push(i);
      keys.sort(function(a, b) {
        return comparator(base+a*size, base+b*size);
      });
      // apply the sort
      var temp = _malloc(num*size);
      _memcpy(temp, base, num*size);
      for (var i = 0; i < num; i++) {
        if (keys[i] == i) continue; // already in place
        _memcpy(base+i*size, temp+keys[i]*size, size);
      }
      _free(temp);
    }
  Module["_memmove"] = _memmove;var _llvm_memmove_p0i8_p0i8_i32=_memmove;
  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }
  Module["_strcpy"] = _strcpy;
  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }
  function _nl_langinfo(item) {
      // char *nl_langinfo(nl_item item);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/nl_langinfo.html
      var result;
      switch (item) {
        case 0:
          result = 'ANSI_X3.4-1968';
          break;
        case 1:
          result = '%a %b %e %H:%M:%S %Y';
          break;
        case 2:
          result = '%m/%d/%y';
          break;
        case 3:
          result = '%H:%M:%S';
          break;
        case 4:
          result = '%I:%M:%S %p';
          break;
        case 5:
          result = 'AM';
          break;
        case 6:
          result = 'PM';
          break;
        case 7:
          result = 'Sunday';
          break;
        case 8:
          result = 'Monday';
          break;
        case 9:
          result = 'Tuesday';
          break;
        case 10:
          result = 'Wednesday';
          break;
        case 11:
          result = 'Thursday';
          break;
        case 12:
          result = 'Friday';
          break;
        case 13:
          result = 'Saturday';
          break;
        case 14:
          result = 'Sun';
          break;
        case 15:
          result = 'Mon';
          break;
        case 16:
          result = 'Tue';
          break;
        case 17:
          result = 'Wed';
          break;
        case 18:
          result = 'Thu';
          break;
        case 19:
          result = 'Fri';
          break;
        case 20:
          result = 'Sat';
          break;
        case 21:
          result = 'January';
          break;
        case 22:
          result = 'February';
          break;
        case 23:
          result = 'March';
          break;
        case 24:
          result = 'April';
          break;
        case 25:
          result = 'May';
          break;
        case 26:
          result = 'June';
          break;
        case 27:
          result = 'July';
          break;
        case 28:
          result = 'August';
          break;
        case 29:
          result = 'September';
          break;
        case 30:
          result = 'October';
          break;
        case 31:
          result = 'November';
          break;
        case 32:
          result = 'December';
          break;
        case 33:
          result = 'Jan';
          break;
        case 34:
          result = 'Feb';
          break;
        case 35:
          result = 'Mar';
          break;
        case 36:
          result = 'Apr';
          break;
        case 37:
          result = 'May';
          break;
        case 38:
          result = 'Jun';
          break;
        case 39:
          result = 'Jul';
          break;
        case 40:
          result = 'Aug';
          break;
        case 41:
          result = 'Sep';
          break;
        case 42:
          result = 'Oct';
          break;
        case 43:
          result = 'Nov';
          break;
        case 44:
          result = 'Dec';
          break;
        case 49:
          result = '';
          break;
        case 50:
          result = '.';
          break;
        case 51:
          result = '';
          break;
        case 52:
          result = '^[yY]';
          break;
        case 53:
          result = '^[nN]';
          break;
        case 56:
          result = '-';
          break;
        case 45:
        case 46:
        case 47:
        case 48:
        default:
          result = '';
          break;
      }
      var me = _nl_langinfo;
      if (!me.ret) me.ret = _malloc(32);
      for (var i = 0; i < result.length; i++) {
        HEAP8[(((me.ret)+(i))|0)]=result.charCodeAt(i)
      }
      HEAP8[(((me.ret)+(i))|0)]=0
      return me.ret;
    }
  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      return Number(FS.streams[stream] && FS.streams[stream].error);
    }
  function _llvm_va_copy(ppdest, ppsrc) {
      HEAP8[(ppdest)]=HEAP8[(ppsrc)];HEAP8[(((ppdest)+(1))|0)]=HEAP8[(((ppsrc)+(1))|0)];HEAP8[(((ppdest)+(2))|0)]=HEAP8[(((ppsrc)+(2))|0)];HEAP8[(((ppdest)+(3))|0)]=HEAP8[(((ppsrc)+(3))|0)];
      /* Alternate implementation that copies the actual DATA; it assumes the va_list is prefixed by its size
      var psrc = IHEAP[ppsrc]-1;
      var num = IHEAP[psrc]; // right before the data, is the number of (flattened) values
      var pdest = _malloc(num+1);
      _memcpy(pdest, psrc, num+1);
      IHEAP[ppdest] = pdest+1;
      */
    }
  function _islower(chr) {
      return chr >= 97 && chr <= 122;
    }
  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }
  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }
  Module["_memcmp"] = _memcmp;
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }
  function ___errno_location() {
      if (!___setErrNo.ret) {
        ___setErrNo.ret = allocate([0], 'i32', ALLOC_NORMAL);
        HEAP32[((___setErrNo.ret)>>2)]=0
      }
      return ___setErrNo.ret;
    }var ___errno=___errno_location;
  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
        case 10: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }
  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }
  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }
  function _llvm_uadd_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return ((asm.setTempRet0(x+y > 4294967295),(x+y)>>>0)|0);
    }
  function _llvm_bswap_i32(x) {
      return ((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24);
    }
  function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }
  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (Browser.initted) return;
        Browser.initted = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'jpeg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(name.lastIndexOf('.')+1)];
        }
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/.exec(name);
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
        // Canvas event setup
        var canvas = Module['canvas'];
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'];
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'];
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule) {
        var ctx;
        try {
          if (useWebGL) {
            ctx = canvas.getContext('experimental-webgl', {
              alpha: false
            });
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        this.lockPointer = lockPointer;
        this.resizeCanvas = resizeCanvas;
        if (typeof this.lockPointer === 'undefined') this.lockPointer = true;
        if (typeof this.resizeCanvas === 'undefined') this.resizeCanvas = false;
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'];
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else if (Browser.resizeCanvas){
            Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
        }
        if (!this.fullScreenHandlersInstalled) {
          this.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
        }
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        var canvas = Module['canvas'];
        this.windowedWidth = canvas.width;
        this.windowedHeight = canvas.height;
        canvas.width = screen.width;
        canvas.height = screen.height;
        var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        var canvas = Module['canvas'];
        canvas.width = this.windowedWidth;
        canvas.height = this.windowedHeight;
        var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        Browser.updateResizeListeners();
      }};
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
___strtok_state = Runtime.staticAlloc(4);
Module["requestFullScreen"] = function(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);
staticSealed = true; // seal the static portion of memory
STACK_MAX = STACK_BASE + 5242880;
DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);
assert(DYNAMIC_BASE < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY
 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);
var Math_min = Math.min;
function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module.dynCall_iiii(index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm.setThrew(1, 0);
  }
}
function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module.dynCall_viiiii(index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm.setThrew(1, 0);
  }
}
function invoke_vi(index,a1) {
  try {
    Module.dynCall_vi(index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm.setThrew(1, 0);
  }
}
function invoke_vii(index,a1,a2) {
  try {
    Module.dynCall_vii(index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm.setThrew(1, 0);
  }
}
function invoke_ii(index,a1) {
  try {
    return Module.dynCall_ii(index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm.setThrew(1, 0);
  }
}
function invoke_viii(index,a1,a2,a3) {
  try {
    Module.dynCall_viii(index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm.setThrew(1, 0);
  }
}
function invoke_v(index) {
  try {
    Module.dynCall_v(index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm.setThrew(1, 0);
  }
}
function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module.dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm.setThrew(1, 0);
  }
}
function invoke_iii(index,a1,a2) {
  try {
    return Module.dynCall_iii(index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm.setThrew(1, 0);
  }
}
function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module.dynCall_iiiiii(index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm.setThrew(1, 0);
  }
}
function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module.dynCall_viiii(index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm.setThrew(1, 0);
  }
}
function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stdout=env._stdout|0;
  var _stderr=env._stderr|0;
  var NaN=+env.NaN;
  var Infinity=+env.Infinity;
  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var copyTempDouble=env.copyTempDouble;
  var copyTempFloat=env.copyTempFloat;
  var Math_min=env.min;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _llvm_va_end=env._llvm_va_end;
  var _strncmp=env._strncmp;
  var _sscanf=env._sscanf;
  var _llvm_uadd_with_overflow_i32=env._llvm_uadd_with_overflow_i32;
  var _snprintf=env._snprintf;
  var _vsnprintf=env._vsnprintf;
  var __scanString=env.__scanString;
  var _fclose=env._fclose;
  var _strtok_r=env._strtok_r;
  var _abort=env._abort;
  var _fprintf=env._fprintf;
  var _pread=env._pread;
  var __isFloat=env.__isFloat;
  var _close=env._close;
  var _fopen=env._fopen;
  var __reallyNegative=env.__reallyNegative;
  var _nl_langinfo=env._nl_langinfo;
  var _strchr=env._strchr;
  var _fputc=env._fputc;
  var _puts=env._puts;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _open=env._open;
  var _strtok=env._strtok;
  var ___setErrNo=env.___setErrNo;
  var _fwrite=env._fwrite;
  var _llvm_va_copy=env._llvm_va_copy;
  var _qsort=env._qsort;
  var _write=env._write;
  var _fputs=env._fputs;
  var _isalpha=env._isalpha;
  var _exit=env._exit;
  var _sprintf=env._sprintf;
  var _strdup=env._strdup;
  var _isspace=env._isspace;
  var _sysconf=env._sysconf;
  var _fread=env._fread;
  var _read=env._read;
  var _asprintf=env._asprintf;
  var _ferror=env._ferror;
  var __formatString=env.__formatString;
  var _vfprintf=env._vfprintf;
  var _pwrite=env._pwrite;
  var _isalnum=env._isalnum;
  var _fsync=env._fsync;
  var _llvm_stacksave=env._llvm_stacksave;
  var ___errno_location=env.___errno_location;
  var _llvm_bswap_i32=env._llvm_bswap_i32;
  var _sbrk=env._sbrk;
  var _time=env._time;
  var _islower=env._islower;
  var __exit=env.__exit;
  var _strcmp=env._strcmp;
  var _memchr=env._memchr;
// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size | 0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = STACKTOP + size | 0;
  STACKTOP = STACKTOP + 7 >> 3 << 3;
  return ret | 0;
}
function stackSave() {
  return STACKTOP | 0;
}
function stackRestore(top) {
  top = top | 0;
  STACKTOP = top;
}
function setThrew(threw, value) {
  threw = threw | 0;
  value = value | 0;
  if ((__THREW__ | 0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function setTempRet0(value) {
  value = value | 0;
  tempRet0 = value;
}
function setTempRet1(value) {
  value = value | 0;
  tempRet1 = value;
}
function setTempRet2(value) {
  value = value | 0;
  tempRet2 = value;
}
function setTempRet3(value) {
  value = value | 0;
  tempRet3 = value;
}
function setTempRet4(value) {
  value = value | 0;
  tempRet4 = value;
}
function setTempRet5(value) {
  value = value | 0;
  tempRet5 = value;
}
function setTempRet6(value) {
  value = value | 0;
  tempRet6 = value;
}
function setTempRet7(value) {
  value = value | 0;
  tempRet7 = value;
}
function setTempRet8(value) {
  value = value | 0;
  tempRet8 = value;
}
function setTempRet9(value) {
  value = value | 0;
  tempRet9 = value;
}
function _cpabe_setup() {
  var $pub = 0, $msk = 0, $1 = 0, $2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $pub = __stackBase__ | 0;
  $msk = __stackBase__ + 8 | 0;
  _cpabe_random_init(1);
  _bswabe_setup($pub, $msk);
  $1 = _malloc(8) | 0;
  $2 = $1;
  HEAP32[$2 >> 2] = _a_array_base64_encode(_bswabe_pub_serialize(HEAP32[$pub >> 2] | 0) | 0) | 0;
  HEAP32[$1 + 4 >> 2] = _a_array_base64_encode(_bswabe_msk_serialize(HEAP32[$msk >> 2] | 0) | 0) | 0;
  STACKTOP = __stackBase__;
  return $2 | 0;
}
function _cpabe_get_private_key($public, $master, $attributes) {
  $public = $public | 0;
  $master = $master | 0;
  $attributes = $attributes | 0;
  var $alist = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $tmp_013 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $ap_010 = 0, $15 = 0, $ap_012 = 0, $i_011 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $ap_0 = 0, $21 = 0, $i_0_lcssa = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $alist = __stackBase__ | 0;
    _cpabe_random_init(1);
    $1 = _a_array_base64_decode($public) | 0;
    $2 = _bswabe_pub_unserialize($1, 1) | 0;
    $3 = _a_array_base64_decode($master) | 0;
    $4 = _bswabe_msk_unserialize($2, $3, 1) | 0;
    HEAP32[$alist >> 2] = 0;
    $5 = _strtok($attributes | 0, 5696) | 0;
    $6 = ($5 | 0) == 0;
    if ($6) {
      label = 3;
      break;
    } else {
      $tmp_013 = $5;
      label = 2;
      break;
    }
   case 2:
    _parse_attribute($alist, $tmp_013);
    $7 = _strtok(0, 5696) | 0;
    $8 = ($7 | 0) == 0;
    if ($8) {
      label = 3;
      break;
    } else {
      $tmp_013 = $7;
      label = 2;
      break;
    }
   case 3:
    $9 = HEAP32[$alist >> 2] | 0;
    $10 = _a_slist_length($9) | 0;
    $11 = $10 << 2;
    $12 = $11 + 4 | 0;
    $13 = _malloc($12) | 0;
    $14 = $13;
    $ap_010 = HEAP32[$alist >> 2] | 0;
    $15 = ($ap_010 | 0) == 0;
    if ($15) {
      $i_0_lcssa = 0;
      label = 5;
      break;
    } else {
      $i_011 = 0;
      $ap_012 = $ap_010;
      label = 4;
      break;
    }
   case 4:
    $16 = $ap_012 | 0;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = $i_011 + 1 | 0;
    $19 = $14 + ($i_011 << 2) | 0;
    HEAP32[$19 >> 2] = $17;
    $20 = $ap_012 + 4 | 0;
    $ap_0 = HEAP32[$20 >> 2] | 0;
    $21 = ($ap_0 | 0) == 0;
    if ($21) {
      $i_0_lcssa = $18;
      label = 5;
      break;
    } else {
      $i_011 = $18;
      $ap_012 = $ap_0;
      label = 4;
      break;
    }
   case 5:
    $22 = $14 + ($i_0_lcssa << 2) | 0;
    HEAP32[$22 >> 2] = 0;
    $23 = _bswabe_keygen($2, $4, $14) | 0;
    $24 = _bswabe_prv_serialize($23) | 0;
    $25 = _a_array_base64_encode($24) | 0;
    STACKTOP = __stackBase__;
    return $25 | 0;
  }
  return 0;
}
function _cpabe_enc($public, $attributes) {
  $public = $public | 0;
  $attributes = $attributes | 0;
  var $m = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $m = __stackBase__ | 0;
  _cpabe_random_init(1);
  $2 = _bswabe_pub_unserialize(_a_array_base64_decode($public) | 0, 1) | 0;
  $4 = _bswabe_enc($2, $m, _parse_policy_lang($attributes) | 0) | 0;
  $5 = _a_byte_array_new() | 0;
  _serialize_element($5, $m);
  $6 = _a_array_base64_encode($5) | 0;
  $8 = _a_array_base64_encode(_bswabe_cph_serialize($4) | 0) | 0;
  $9 = _malloc(8) | 0;
  $10 = $9;
  HEAP32[$10 >> 2] = $6;
  HEAP32[$9 + 4 >> 2] = $8;
  STACKTOP = __stackBase__;
  return $10 | 0;
}
function _cpabe_dec($public, $private, $enc_key) {
  $public = $public | 0;
  $private = $private | 0;
  $enc_key = $enc_key | 0;
  var $n = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $n = __stackBase__ | 0;
  _cpabe_random_init(1);
  $2 = _bswabe_pub_unserialize(_a_array_base64_decode($public) | 0, 1) | 0;
  $4 = _bswabe_prv_unserialize($2, _a_array_base64_decode($private) | 0, 1) | 0;
  _bswabe_dec($2, $4, _bswabe_cph_unserialize($2, _a_array_base64_decode($enc_key) | 0, 1) | 0, $n);
  $8 = _a_byte_array_new() | 0;
  _serialize_element($8, $n);
  $9 = _a_array_base64_encode($8) | 0;
  STACKTOP = __stackBase__;
  return $9 | 0;
}
function _flexint($value$0, $value$1) {
  $value$0 = $value$0 | 0;
  $value$1 = $value$1 | 0;
  var $1 = 0, $3 = 0;
  $1 = _malloc(12) | 0;
  $3 = $1;
  HEAP32[$3 >> 2] = $value$0;
  HEAP32[$3 + 4 >> 2] = $value$1;
  HEAP32[$1 + 8 >> 2] = 0;
  return $1 | 0;
}
function _leaf_policy($attr) {
  $attr = $attr | 0;
  var $1 = 0;
  $1 = _malloc(12) | 0;
  HEAP32[$1 >> 2] = 1;
  HEAP32[$1 + 4 >> 2] = $attr;
  HEAP32[$1 + 8 >> 2] = _a_ptr_array_new() | 0;
  return $1 | 0;
}
function _kof2_policy($k, $l, $r) {
  $k = $k | 0;
  $l = $l | 0;
  $r = $r | 0;
  var $1 = 0, $6 = 0, $8 = 0;
  $1 = _malloc(12) | 0;
  HEAP32[$1 >> 2] = $k;
  HEAP32[$1 + 4 >> 2] = 0;
  $6 = _a_ptr_array_new() | 0;
  $8 = $1 + 8 | 0;
  HEAP32[$8 >> 2] = $6;
  _a_ptr_array_add($6, $l);
  _a_ptr_array_add(HEAP32[$8 >> 2] | 0, $r);
  return $1 | 0;
}
function _eq_policy($n, $attr) {
  $n = $n | 0;
  $attr = $attr | 0;
  var $s = 0, $s1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ld$0$0 = 0, $5$0 = 0, $ld$1$1 = 0, $5$1 = 0, $$etemp$2 = 0, $7 = 0, $8 = 0, $9 = 0, $$etemp$3 = 0, $11 = 0, $12 = 0, $13 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $s = __stackBase__ | 0;
    $s1 = __stackBase__ + 8 | 0;
    $1 = $n + 8 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) == 0;
    $4 = $n | 0;
    $ld$0$0 = $4 | 0;
    $5$0 = HEAP32[$ld$0$0 >> 2] | 0;
    $ld$1$1 = $4 + 4 | 0;
    $5$1 = HEAP32[$ld$1$1 >> 2] | 0;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $$etemp$2 = 9e3;
    $7 = _asprintf($s | 0, $$etemp$2 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $attr, HEAP32[tempInt + 8 >> 2] = $5$0, HEAP32[tempInt + 16 >> 2] = $5$1, tempInt) | 0) | 0;
    $8 = HEAP32[$s >> 2] | 0;
    $9 = _leaf_policy($8) | 0;
    $_0 = $9;
    label = 4;
    break;
   case 3:
    $$etemp$3 = 8632;
    $11 = _asprintf($s1 | 0, $$etemp$3 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempInt >> 2] = $attr, HEAP32[tempInt + 8 >> 2] = $2, HEAP32[tempInt + 16 >> 2] = $5$0, HEAP32[tempInt + 24 >> 2] = $5$1, tempInt) | 0) | 0;
    $12 = HEAP32[$s1 >> 2] | 0;
    $13 = _leaf_policy($12) | 0;
    $_0 = $13;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _lt_policy($n, $attr) {
  $n = $n | 0;
  $attr = $attr | 0;
  return _cmp_policy($n, 0, $attr) | 0;
}
function _gt_policy($n, $attr) {
  $n = $n | 0;
  $attr = $attr | 0;
  return _cmp_policy($n, 1, $attr) | 0;
}
function _le_policy($n, $attr) {
  $n = $n | 0;
  $attr = $attr | 0;
  var $1 = 0, $3$0 = 0;
  $1 = $n | 0;
  $3$0 = _i64Add(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, 1, 0) | 0;
  HEAP32[$1 >> 2] = $3$0;
  HEAP32[$1 + 4 >> 2] = tempRet0;
  return _cmp_policy($n, 0, $attr) | 0;
}
function _ge_policy($n, $attr) {
  $n = $n | 0;
  $attr = $attr | 0;
  var $1 = 0, $3$0 = 0;
  $1 = $n | 0;
  $3$0 = _i64Add(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, -1, -1) | 0;
  HEAP32[$1 >> 2] = $3$0;
  HEAP32[$1 + 4 >> 2] = tempRet0;
  return _cmp_policy($n, 1, $attr) | 0;
}
function _policy_free($p) {
  $p = $p | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $i_07 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $_lcssa = 0, $18 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) == 0;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _free($2);
    label = 3;
    break;
   case 3:
    $5 = $p + 8 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6 + 4 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($8 | 0) > 0;
    if ($9) {
      $i_07 = 0;
      $10 = $6;
      label = 4;
      break;
    } else {
      $_lcssa = $6;
      label = 5;
      break;
    }
   case 4:
    $11 = _a_ptr_array_index($10, $i_07) | 0;
    $12 = $11;
    _policy_free($12);
    $13 = $i_07 + 1 | 0;
    $14 = HEAP32[$5 >> 2] | 0;
    $15 = $14 + 4 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = ($13 | 0) < ($16 | 0);
    if ($17) {
      $i_07 = $13;
      $10 = $14;
      label = 4;
      break;
    } else {
      $_lcssa = $14;
      label = 5;
      break;
    }
   case 5:
    _a_ptr_array_free($_lcssa, 1);
    $18 = $p;
    _free($18);
    return;
  }
}
function _bit_marker($base, $tplate, $bit, $val) {
  $base = $base | 0;
  $tplate = $tplate | 0;
  $bit = $bit | 0;
  $val = $val | 0;
  var $s = 0, $1 = 0, $2 = 0, $4 = 0, $5 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $s = __stackBase__ | 0;
  $1 = 64 - $bit | 0;
  $2 = _malloc($1) | 0;
  _memset($2 | 0, 0, $1 | 0);
  _memset($2 | 0, 120, $1 - 1 | 0);
  $4 = $bit + 1 | 0;
  $5 = _malloc($4) | 0;
  _memset($5 | 0, 0, $4 | 0);
  _memset($5 | 0, 120, $bit | 0);
  _asprintf($s | 0, $tplate | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempInt >> 2] = $base, HEAP32[tempInt + 8 >> 2] = $2, HEAP32[tempInt + 16 >> 2] = $val << 24 >> 24 != 0 & 1, HEAP32[tempInt + 24 >> 2] = $5, tempInt) | 0);
  _free($2);
  _free($5);
  STACKTOP = __stackBase__;
  return HEAP32[$s >> 2] | 0;
}
function _bit_marker_list($gt, $attr, $tplate, $bits, $value$0, $value$1) {
  $gt = $gt | 0;
  $attr = $attr | 0;
  $tplate = $tplate | 0;
  $bits = $bits | 0;
  $value$0 = $value$0 | 0;
  $value$1 = $value$1 | 0;
  var $1 = 0, $i_0 = 0, $3$0 = 0, $3$1 = 0, $$etemp$0$0 = 0, $$etemp$0$1 = 0, $5$0 = 0, $5$1 = 0, $$etemp$1$0 = 0, $$etemp$1$1 = 0, $7 = 0, $8$0 = 0, $8$1 = 0, $10$0 = 0, $10$1 = 0, $$etemp$2$0 = 0, $$etemp$2$1 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $i_124 = 0, $17 = 0, $i_126 = 0, $p_025 = 0, $18$0 = 0, $18$1 = 0, $$etemp$3$0 = 0, $$etemp$3$1 = 0, $20$0 = 0, $20$1 = 0, $$etemp$4$0 = 0, $$etemp$4$1 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $p_0_be = 0, $i_1 = 0, $exitcond = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $p_0_lcssa = 0, label = 0, $4$0 = 0, $4$1 = 0, $19$0 = 0, $19$1 = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($gt | 0) != 0;
    $i_0 = 0;
    label = 2;
    break;
   case 2:
    $3$0 = $i_0;
    $3$1 = 0;
    $$etemp$0$0 = 1;
    $$etemp$0$1 = 0;
    $4$0 = _bitshift64Shl($$etemp$0$0 | 0, $$etemp$0$1 | 0, $3$0 | 0) | 0;
    $4$1 = tempRet0;
    $5$0 = $4$0 & $value$0;
    $5$1 = $4$1 & $value$1;
    if ($1) {
      $10$1 = $5$1;
      $10$0 = $5$0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $$etemp$1$0 = 0;
    $$etemp$1$1 = 0;
    $7 = ($5$0 | 0) == ($$etemp$1$0 | 0) & ($5$1 | 0) == ($$etemp$1$1 | 0);
    $8$0 = $7 & 1;
    $8$1 = 0;
    $10$1 = $8$1;
    $10$0 = $8$0;
    label = 4;
    break;
   case 4:
    $$etemp$2$0 = 0;
    $$etemp$2$1 = 0;
    $11 = ($10$0 | 0) == ($$etemp$2$0 | 0) & ($10$1 | 0) == ($$etemp$2$1 | 0);
    $12 = $i_0 + 1 | 0;
    if ($11) {
      label = 5;
      break;
    } else {
      $i_0 = $12;
      label = 2;
      break;
    }
   case 5:
    $14 = $gt & 255;
    $15 = _bit_marker($attr, $tplate, $i_0, $14) | 0;
    $16 = _leaf_policy($15) | 0;
    $i_124 = $i_0 + 1 | 0;
    $17 = ($i_124 | 0) < ($bits | 0);
    if ($17) {
      $p_025 = $16;
      $i_126 = $i_124;
      label = 6;
      break;
    } else {
      $p_0_lcssa = $16;
      label = 10;
      break;
    }
   case 6:
    $18$0 = $i_126;
    $18$1 = 0;
    $$etemp$3$0 = 1;
    $$etemp$3$1 = 0;
    $19$0 = _bitshift64Shl($$etemp$3$0 | 0, $$etemp$3$1 | 0, $18$0 | 0) | 0;
    $19$1 = tempRet0;
    $20$0 = $19$0 & $value$0;
    $20$1 = $19$1 & $value$1;
    $$etemp$4$0 = 0;
    $$etemp$4$1 = 0;
    $21 = ($20$0 | 0) != ($$etemp$4$0 | 0) | ($20$1 | 0) != ($$etemp$4$1 | 0);
    if ($1) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    $23 = $21 ? 2 : 1;
    $24 = _bit_marker($attr, $tplate, $i_126, $14) | 0;
    $25 = _leaf_policy($24) | 0;
    $26 = _kof2_policy($23, $p_025, $25) | 0;
    $p_0_be = $26;
    label = 8;
    break;
   case 8:
    $i_1 = $i_126 + 1 | 0;
    $exitcond = ($i_1 | 0) == ($bits | 0);
    if ($exitcond) {
      $p_0_lcssa = $p_0_be;
      label = 10;
      break;
    } else {
      $p_025 = $p_0_be;
      $i_126 = $i_1;
      label = 6;
      break;
    }
   case 9:
    $28 = $21 ? 1 : 2;
    $29 = _bit_marker($attr, $tplate, $i_126, $14) | 0;
    $30 = _leaf_policy($29) | 0;
    $31 = _kof2_policy($28, $p_025, $30) | 0;
    $p_0_be = $31;
    label = 8;
    break;
   case 10:
    return $p_0_lcssa | 0;
  }
  return 0;
}
function _die($fmt, varrp) {
  $fmt = $fmt | 0;
  varrp = varrp | 0;
  var $args = 0, $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $args = __stackBase__ | 0;
  $1 = $args;
  HEAP32[$1 >> 2] = varrp;
  HEAP32[$1 + 4 >> 2] = 0;
  _vfprintf(HEAP32[_stderr >> 2] | 0, $fmt | 0, HEAP32[$args >> 2] | 0);
  _exit(1);
}
function _cpabe_random_init($seed_mode) {
  $seed_mode = $seed_mode | 0;
  var $1 = 0, $2 = 0, $puts = 0, $6 = 0, $puts1 = 0, $puts2 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP32[350] | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 7;
      break;
    }
   case 2:
    if (($seed_mode | 0) == 0) {
      label = 3;
      break;
    } else if (($seed_mode | 0) == 1) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    _pbc_random_set_deterministic(0);
    $puts = _puts(784) | 0;
    label = 6;
    break;
   case 4:
    $6 = _time(0) | 0;
    _pbc_random_set_deterministic($6);
    $puts1 = _puts(752) | 0;
    label = 6;
    break;
   case 5:
    $puts2 = _puts(712) | 0;
    _exit(1);
   case 6:
    HEAP32[350] = 1;
    label = 7;
    break;
   case 7:
    return;
  }
}
function _yyparse() {
  var $yyssa = 0, $yyvsa = 0, $1 = 0, $2 = 0, $yyssp_0 = 0, $yyvsp_0 = 0, $yystate_0 = 0, $4 = 0, $yyss_0 = 0, $yyssp_1 = 0, $yyvs_0 = 0, $yyvsp_1 = 0, $yystacksize_0 = 0, $yystate_1 = 0, $6 = 0, $_sum = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $_ = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $_sum149 = 0, $40 = 0, $yyss_1 = 0, $yyssp_2 = 0, $yyvs_1 = 0, $yyvsp_2 = 0, $yystacksize_2 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $58 = 0, $59 = 0, $60 = 0, $yytoken_2 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $79 = 0, $82 = 0, $$etemp$0 = 0, $ld$1$0 = 0, $83$0 = 0, $ld$2$1 = 0, $83$1 = 0, $84 = 0, $st$3$0 = 0, $st$4$1 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $yyval_sroa_0_0__cast25 = 0, $yyval_sroa_0_0_copyload26 = 0, $yyval_sroa_1_4__idx27 = 0, $yyval_sroa_1_4__cast28 = 0, $yyval_sroa_1_4_copyload29 = 0, $98 = 0, $99 = 0, $101 = 0, $ld$5$0 = 0, $102$0 = 0, $ld$6$1 = 0, $102$1 = 0, $103 = 0, $ld$7$0 = 0, $104$0 = 0, $ld$8$1 = 0, $104$1 = 0, $105 = 0, $106 = 0, $108 = 0, $ld$9$0 = 0, $109$0 = 0, $ld$10$1 = 0, $109$1 = 0, $110 = 0, $111 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $134 = 0, $ld$11$0 = 0, $135$0 = 0, $ld$12$1 = 0, $135$1 = 0, $136$0 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $yyval_sroa_0_0 = 0, $242 = 0, $243 = 0, $_sum146 = 0, $244 = 0, $245 = 0, $yyval_sroa_0_0__cast = 0, $yyval_sroa_1_4__idx = 0, $yyval_sroa_1_4__cast = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $267 = 0, $268 = 0, $269 = 0, $271 = 0, $272 = 0, $yyss_3_ph = 0, $yyresult_0_ph = 0, $274 = 0, $276 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 2e3 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $yyssa = __stackBase__ | 0;
    $yyvsa = __stackBase__ + 400 | 0;
    $1 = $yyssa | 0;
    $2 = $yyvsa | 0;
    HEAP32[108] = 0;
    HEAP32[138] = -2;
    $yystate_1 = 0;
    $yystacksize_0 = 200;
    $yyvsp_1 = $2;
    $yyvs_0 = $2;
    $yyssp_1 = $1;
    $yyss_0 = $1;
    label = 3;
    break;
   case 2:
    $4 = $yyssp_0 + 2 | 0;
    $yystate_1 = $yystate_0;
    $yystacksize_0 = $yystacksize_2;
    $yyvsp_1 = $yyvsp_0;
    $yyvs_0 = $yyvs_1;
    $yyssp_1 = $4;
    $yyss_0 = $yyss_1;
    label = 3;
    break;
   case 3:
    $6 = $yystate_1 & 65535;
    HEAP16[$yyssp_1 >> 1] = $6;
    $_sum = $yystacksize_0 - 1 | 0;
    $7 = $yyss_0 + ($_sum << 1) | 0;
    $8 = $7 >>> 0 > $yyssp_1 >>> 0;
    if ($8) {
      $yystacksize_2 = $yystacksize_0;
      $yyvsp_2 = $yyvsp_1;
      $yyvs_1 = $yyvs_0;
      $yyssp_2 = $yyssp_1;
      $yyss_1 = $yyss_0;
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $10 = $yyssp_1;
    $11 = $yyss_0;
    $12 = $10 - $11 | 0;
    $13 = $12 >> 1;
    $14 = $13 + 1 | 0;
    $15 = $yystacksize_0 >>> 0 > 9999;
    if ($15) {
      label = 50;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $17 = $yystacksize_0 << 1;
    $18 = $17 >>> 0 > 1e4;
    $_ = $18 ? 1e4 : $17;
    $19 = $_ * 10 & -1;
    $20 = $19 + 7 | 0;
    $21 = _malloc($20) | 0;
    $22 = ($21 | 0) == 0;
    if ($22) {
      label = 50;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $24 = $21;
    $25 = $21;
    $26 = $yyss_0;
    $27 = $14 << 1;
    _memcpy($21 | 0, $26 | 0, $27);
    $28 = $_ << 1;
    $29 = $28 + 7 | 0;
    $30 = $29 >>> 3;
    $31 = $24 + ($30 << 3) | 0;
    $32 = $31;
    $33 = $yyvs_0;
    $34 = $14 << 3;
    _memcpy($32 | 0, $33 | 0, $34);
    $35 = ($yyss_0 | 0) == ($1 | 0);
    if ($35) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _free($26);
    label = 8;
    break;
   case 8:
    $38 = $25 + ($13 << 1) | 0;
    $39 = $31 + ($13 << 3) | 0;
    $_sum149 = $_ - 1 | 0;
    $40 = ($_sum149 | 0) > ($13 | 0);
    if ($40) {
      $yystacksize_2 = $_;
      $yyvsp_2 = $39;
      $yyvs_1 = $31;
      $yyssp_2 = $38;
      $yyss_1 = $25;
      label = 9;
      break;
    } else {
      $yyresult_0_ph = 1;
      $yyss_3_ph = $25;
      label = 51;
      break;
    }
   case 9:
    $42 = $yystate_1 + 384 | 0;
    $43 = HEAP8[$42] | 0;
    $44 = $43 << 24 >> 24;
    $45 = $43 << 24 >> 24 == -5;
    if ($45) {
      label = 23;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $47 = HEAP32[138] | 0;
    $48 = ($47 | 0) == -2;
    if ($48) {
      label = 11;
      break;
    } else {
      $52 = $47;
      label = 12;
      break;
    }
   case 11:
    $50 = _yylex() | 0;
    HEAP32[138] = $50;
    $52 = $50;
    label = 12;
    break;
   case 12:
    $53 = ($52 | 0) < 1;
    if ($53) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    HEAP32[138] = 0;
    $yytoken_2 = 0;
    label = 16;
    break;
   case 14:
    $56 = $52 >>> 0 < 265;
    if ($56) {
      label = 15;
      break;
    } else {
      $yytoken_2 = 2;
      label = 16;
      break;
    }
   case 15:
    $58 = $52 + 8 | 0;
    $59 = HEAP8[$58] | 0;
    $60 = $59 & 255;
    $yytoken_2 = $60;
    label = 16;
    break;
   case 16:
    $62 = $yytoken_2 + $44 | 0;
    $63 = $62 >>> 0 > 45;
    if ($63) {
      label = 23;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $65 = $62 + 504 | 0;
    $66 = HEAP8[$65] | 0;
    $67 = $66 << 24 >> 24;
    $68 = ($67 | 0) == ($yytoken_2 | 0);
    if ($68) {
      label = 18;
      break;
    } else {
      label = 23;
      break;
    }
   case 18:
    $70 = $62 + 280 | 0;
    $71 = HEAP8[$70] | 0;
    $72 = $71 & 255;
    $73 = $62 - 42 | 0;
    $74 = $73 >>> 0 < 3;
    if ($74) {
      label = 49;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $76 = ($62 | 0) == 4;
    if ($76) {
      $yyresult_0_ph = 0;
      $yyss_3_ph = $yyss_1;
      label = 51;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $78 = HEAP32[138] | 0;
    $79 = ($78 | 0) == 0;
    if ($79) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    HEAP32[138] = -2;
    label = 22;
    break;
   case 22:
    $82 = $yyvsp_2 + 8 | 0;
    $$etemp$0 = 440;
    $ld$1$0 = $$etemp$0 | 0;
    $83$0 = HEAP32[$ld$1$0 >> 2] | 0;
    $ld$2$1 = $$etemp$0 + 4 | 0;
    $83$1 = HEAP32[$ld$2$1 >> 2] | 0;
    $84 = $82 | 0;
    $st$3$0 = $84 | 0;
    HEAP32[$st$3$0 >> 2] = $83$0;
    $st$4$1 = $84 + 4 | 0;
    HEAP32[$st$4$1 >> 2] = $83$1;
    $yystate_0 = $72;
    $yyvsp_0 = $82;
    $yyssp_0 = $yyssp_2;
    label = 2;
    break;
   case 23:
    $86 = $yystate_1 + 456 | 0;
    $87 = HEAP8[$86] | 0;
    $88 = $87 & 255;
    $89 = $87 << 24 >> 24 == 0;
    if ($89) {
      label = 49;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $91 = $88 + 328 | 0;
    $92 = HEAP8[$91] | 0;
    $93 = $92 & 255;
    $94 = 1 - $93 | 0;
    $95 = $yyvsp_2 + ($94 << 3) | 0;
    $96 = $95;
    $yyval_sroa_0_0__cast25 = $95;
    $yyval_sroa_0_0_copyload26 = HEAP32[$yyval_sroa_0_0__cast25 >> 2] | 0;
    $yyval_sroa_1_4__idx27 = $96 + 4 | 0;
    $yyval_sroa_1_4__cast28 = $yyval_sroa_1_4__idx27;
    $yyval_sroa_1_4_copyload29 = HEAP32[$yyval_sroa_1_4__cast28 >> 2] | 0;
    if (($88 | 0) == 2) {
      label = 25;
      break;
    } else if (($88 | 0) == 3) {
      label = 26;
      break;
    } else if (($88 | 0) == 4) {
      label = 27;
      break;
    } else if (($88 | 0) == 5) {
      label = 28;
      break;
    } else if (($88 | 0) == 6) {
      label = 29;
      break;
    } else if (($88 | 0) == 7) {
      label = 30;
      break;
    } else if (($88 | 0) == 8) {
      label = 31;
      break;
    } else if (($88 | 0) == 9) {
      label = 32;
      break;
    } else if (($88 | 0) == 10) {
      label = 33;
      break;
    } else if (($88 | 0) == 11) {
      label = 34;
      break;
    } else if (($88 | 0) == 12) {
      label = 35;
      break;
    } else if (($88 | 0) == 13) {
      label = 36;
      break;
    } else if (($88 | 0) == 14) {
      label = 37;
      break;
    } else if (($88 | 0) == 15) {
      label = 38;
      break;
    } else if (($88 | 0) == 16) {
      label = 39;
      break;
    } else if (($88 | 0) == 17) {
      label = 40;
      break;
    } else if (($88 | 0) == 18) {
      label = 41;
      break;
    } else if (($88 | 0) == 19) {
      label = 42;
      break;
    } else if (($88 | 0) == 20) {
      label = 43;
      break;
    } else if (($88 | 0) == 21) {
      label = 44;
      break;
    } else {
      $yyval_sroa_0_0 = $yyval_sroa_0_0_copyload26;
      label = 45;
      break;
    }
   case 25:
    $98 = $yyvsp_2;
    $99 = HEAP32[$98 >> 2] | 0;
    HEAP32[364] = $99;
    $yyval_sroa_0_0 = $yyval_sroa_0_0_copyload26;
    label = 45;
    break;
   case 26:
    $101 = $yyvsp_2 - 16 | 0;
    $ld$5$0 = $101 | 0;
    $102$0 = HEAP32[$ld$5$0 >> 2] | 0;
    $ld$6$1 = $101 + 4 | 0;
    $102$1 = HEAP32[$ld$6$1 >> 2] | 0;
    $103 = $yyvsp_2 | 0;
    $ld$7$0 = $103 | 0;
    $104$0 = HEAP32[$ld$7$0 >> 2] | 0;
    $ld$8$1 = $103 + 4 | 0;
    $104$1 = HEAP32[$ld$8$1 >> 2] | 0;
    $105 = _expint($102$0, $102$1, $104$0, $104$1) | 0;
    $106 = $105;
    $yyval_sroa_0_0 = $106;
    label = 45;
    break;
   case 27:
    $108 = $yyvsp_2 | 0;
    $ld$9$0 = $108 | 0;
    $109$0 = HEAP32[$ld$9$0 >> 2] | 0;
    $ld$10$1 = $108 + 4 | 0;
    $109$1 = HEAP32[$ld$10$1 >> 2] | 0;
    $110 = _flexint($109$0, $109$1) | 0;
    $111 = $110;
    $yyval_sroa_0_0 = $111;
    label = 45;
    break;
   case 28:
    $113 = $yyvsp_2;
    $114 = HEAP32[$113 >> 2] | 0;
    $115 = _leaf_policy($114) | 0;
    $116 = $115;
    $yyval_sroa_0_0 = $116;
    label = 45;
    break;
   case 29:
    $118 = $yyvsp_2 - 16 | 0;
    $119 = $118;
    $120 = HEAP32[$119 >> 2] | 0;
    $121 = $yyvsp_2;
    $122 = HEAP32[$121 >> 2] | 0;
    $123 = _kof2_policy(1, $120, $122) | 0;
    $124 = $123;
    $yyval_sroa_0_0 = $124;
    label = 45;
    break;
   case 30:
    $126 = $yyvsp_2 - 16 | 0;
    $127 = $126;
    $128 = HEAP32[$127 >> 2] | 0;
    $129 = $yyvsp_2;
    $130 = HEAP32[$129 >> 2] | 0;
    $131 = _kof2_policy(2, $128, $130) | 0;
    $132 = $131;
    $yyval_sroa_0_0 = $132;
    label = 45;
    break;
   case 31:
    $134 = $yyvsp_2 - 32 | 0;
    $ld$11$0 = $134 | 0;
    $135$0 = HEAP32[$ld$11$0 >> 2] | 0;
    $ld$12$1 = $134 + 4 | 0;
    $135$1 = HEAP32[$ld$12$1 >> 2] | 0;
    $136$0 = $135$0;
    $136 = $136$0;
    $137 = $yyvsp_2 - 8 | 0;
    $138 = $137;
    $139 = HEAP32[$138 >> 2] | 0;
    $140 = _kof_policy($136, $139) | 0;
    $141 = $140;
    $yyval_sroa_0_0 = $141;
    label = 45;
    break;
   case 32:
    $143 = $yyvsp_2;
    $144 = HEAP32[$143 >> 2] | 0;
    $145 = $yyvsp_2 - 16 | 0;
    $146 = $145;
    $147 = HEAP32[$146 >> 2] | 0;
    $148 = _eq_policy($144, $147) | 0;
    $149 = $148;
    $yyval_sroa_0_0 = $149;
    label = 45;
    break;
   case 33:
    $151 = $yyvsp_2;
    $152 = HEAP32[$151 >> 2] | 0;
    $153 = $yyvsp_2 - 16 | 0;
    $154 = $153;
    $155 = HEAP32[$154 >> 2] | 0;
    $156 = _lt_policy($152, $155) | 0;
    $157 = $156;
    $yyval_sroa_0_0 = $157;
    label = 45;
    break;
   case 34:
    $159 = $yyvsp_2;
    $160 = HEAP32[$159 >> 2] | 0;
    $161 = $yyvsp_2 - 16 | 0;
    $162 = $161;
    $163 = HEAP32[$162 >> 2] | 0;
    $164 = _gt_policy($160, $163) | 0;
    $165 = $164;
    $yyval_sroa_0_0 = $165;
    label = 45;
    break;
   case 35:
    $167 = $yyvsp_2;
    $168 = HEAP32[$167 >> 2] | 0;
    $169 = $yyvsp_2 - 16 | 0;
    $170 = $169;
    $171 = HEAP32[$170 >> 2] | 0;
    $172 = _le_policy($168, $171) | 0;
    $173 = $172;
    $yyval_sroa_0_0 = $173;
    label = 45;
    break;
   case 36:
    $175 = $yyvsp_2;
    $176 = HEAP32[$175 >> 2] | 0;
    $177 = $yyvsp_2 - 16 | 0;
    $178 = $177;
    $179 = HEAP32[$178 >> 2] | 0;
    $180 = _ge_policy($176, $179) | 0;
    $181 = $180;
    $yyval_sroa_0_0 = $181;
    label = 45;
    break;
   case 37:
    $183 = $yyvsp_2 - 16 | 0;
    $184 = $183;
    $185 = HEAP32[$184 >> 2] | 0;
    $186 = $yyvsp_2;
    $187 = HEAP32[$186 >> 2] | 0;
    $188 = _eq_policy($185, $187) | 0;
    $189 = $188;
    $yyval_sroa_0_0 = $189;
    label = 45;
    break;
   case 38:
    $191 = $yyvsp_2 - 16 | 0;
    $192 = $191;
    $193 = HEAP32[$192 >> 2] | 0;
    $194 = $yyvsp_2;
    $195 = HEAP32[$194 >> 2] | 0;
    $196 = _gt_policy($193, $195) | 0;
    $197 = $196;
    $yyval_sroa_0_0 = $197;
    label = 45;
    break;
   case 39:
    $199 = $yyvsp_2 - 16 | 0;
    $200 = $199;
    $201 = HEAP32[$200 >> 2] | 0;
    $202 = $yyvsp_2;
    $203 = HEAP32[$202 >> 2] | 0;
    $204 = _lt_policy($201, $203) | 0;
    $205 = $204;
    $yyval_sroa_0_0 = $205;
    label = 45;
    break;
   case 40:
    $207 = $yyvsp_2 - 16 | 0;
    $208 = $207;
    $209 = HEAP32[$208 >> 2] | 0;
    $210 = $yyvsp_2;
    $211 = HEAP32[$210 >> 2] | 0;
    $212 = _ge_policy($209, $211) | 0;
    $213 = $212;
    $yyval_sroa_0_0 = $213;
    label = 45;
    break;
   case 41:
    $215 = $yyvsp_2 - 16 | 0;
    $216 = $215;
    $217 = HEAP32[$216 >> 2] | 0;
    $218 = $yyvsp_2;
    $219 = HEAP32[$218 >> 2] | 0;
    $220 = _le_policy($217, $219) | 0;
    $221 = $220;
    $yyval_sroa_0_0 = $221;
    label = 45;
    break;
   case 42:
    $223 = $yyvsp_2 - 8 | 0;
    $224 = $223;
    $225 = HEAP32[$224 >> 2] | 0;
    $226 = $225;
    $yyval_sroa_0_0 = $226;
    label = 45;
    break;
   case 43:
    $228 = _a_ptr_array_new() | 0;
    $229 = $228;
    $230 = $yyvsp_2;
    $231 = HEAP32[$230 >> 2] | 0;
    $232 = $231;
    _a_ptr_array_add($228, $232);
    $yyval_sroa_0_0 = $229;
    label = 45;
    break;
   case 44:
    $234 = $yyvsp_2 - 16 | 0;
    $235 = $234;
    $236 = HEAP32[$235 >> 2] | 0;
    $237 = $236;
    $238 = $yyvsp_2;
    $239 = HEAP32[$238 >> 2] | 0;
    $240 = $239;
    _a_ptr_array_add($236, $240);
    $yyval_sroa_0_0 = $237;
    label = 45;
    break;
   case 45:
    $242 = -$93 | 0;
    $243 = $yyssp_2 + ($242 << 1) | 0;
    $_sum146 = 1 - $93 | 0;
    $244 = $yyvsp_2 + ($_sum146 << 3) | 0;
    $245 = $244;
    $yyval_sroa_0_0__cast = $244;
    HEAP32[$yyval_sroa_0_0__cast >> 2] = $yyval_sroa_0_0;
    $yyval_sroa_1_4__idx = $245 + 4 | 0;
    $yyval_sroa_1_4__cast = $yyval_sroa_1_4__idx;
    HEAP32[$yyval_sroa_1_4__cast >> 2] = $yyval_sroa_1_4_copyload29;
    $246 = $88 + 352 | 0;
    $247 = HEAP8[$246] | 0;
    $248 = $247 & 255;
    $249 = $248 - 17 | 0;
    $250 = $249 + 376 | 0;
    $251 = HEAP8[$250] | 0;
    $252 = $251 << 24 >> 24;
    $253 = HEAP16[$243 >> 1] | 0;
    $254 = $253 << 16 >> 16;
    $255 = $254 + $252 | 0;
    $256 = $255 >>> 0 < 46;
    if ($256) {
      label = 46;
      break;
    } else {
      label = 48;
      break;
    }
   case 46:
    $258 = $255 + 504 | 0;
    $259 = HEAP8[$258] | 0;
    $260 = $259 << 24 >> 24;
    $261 = ($260 | 0) == ($254 | 0);
    if ($261) {
      label = 47;
      break;
    } else {
      label = 48;
      break;
    }
   case 47:
    $263 = $255 + 280 | 0;
    $264 = HEAP8[$263] | 0;
    $265 = $264 & 255;
    $yystate_0 = $265;
    $yyvsp_0 = $244;
    $yyssp_0 = $243;
    label = 2;
    break;
   case 48:
    $267 = $249 + 448 | 0;
    $268 = HEAP8[$267] | 0;
    $269 = $268 << 24 >> 24;
    $yystate_0 = $269;
    $yyvsp_0 = $244;
    $yyssp_0 = $243;
    label = 2;
    break;
   case 49:
    $271 = HEAP32[108] | 0;
    $272 = $271 + 1 | 0;
    HEAP32[108] = $272;
    _yyerror(9200);
    return 0;
   case 50:
    _yyerror(6592);
    return 0;
   case 51:
    $274 = ($yyss_3_ph | 0) == ($1 | 0);
    if ($274) {
      label = 53;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    $276 = $yyss_3_ph;
    _free($276);
    label = 53;
    break;
   case 53:
    STACKTOP = __stackBase__;
    return $yyresult_0_ph | 0;
  }
  return 0;
}
function _expint($value$0, $value$1, $bits$0, $bits$1) {
  $value$0 = $value$0 | 0;
  $value$1 = $value$1 | 0;
  $bits$0 = $bits$0 | 0;
  $bits$1 = $bits$1 | 0;
  var $$etemp$0$0 = 0, $$etemp$0$1 = 0, $1 = 0, $$etemp$1 = 0, $$etemp$2$0 = 0, $$etemp$2$1 = 0, $4 = 0, $$etemp$3 = 0, $7 = 0, $8 = 0, $9 = 0, $st$4$0 = 0, $st$5$1 = 0, $10$0 = 0, $10 = 0, $11 = 0, $12 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $$etemp$0$0 = 0;
    $$etemp$0$1 = 0;
    $1 = ($bits$0 | 0) == ($$etemp$0$0 | 0) & ($bits$1 | 0) == ($$etemp$0$1 | 0);
    if ($1) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $$etemp$1 = 5432;
    _die($$etemp$1, (tempInt = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempInt >> 2] = $value$0, HEAP32[tempInt + 8 >> 2] = $value$1, HEAP32[tempInt + 16 >> 2] = $bits$0, HEAP32[tempInt + 24 >> 2] = $bits$1, tempInt) | 0);
    return 0;
   case 3:
    $$etemp$2$0 = 64;
    $$etemp$2$1 = 0;
    $4 = $bits$1 >>> 0 > $$etemp$2$1 >>> 0 | $bits$1 >>> 0 == $$etemp$2$1 >>> 0 & $bits$0 >>> 0 > $$etemp$2$0 >>> 0;
    if ($4) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $$etemp$3 = 5224;
    _die($$etemp$3, (tempInt = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempInt >> 2] = $value$0, HEAP32[tempInt + 8 >> 2] = $value$1, HEAP32[tempInt + 16 >> 2] = $bits$0, HEAP32[tempInt + 24 >> 2] = $bits$1, tempInt) | 0);
    return 0;
   case 5:
    $7 = _malloc(12) | 0;
    $8 = $7;
    $9 = $7;
    $st$4$0 = $9 | 0;
    HEAP32[$st$4$0 >> 2] = $value$0;
    $st$5$1 = $9 + 4 | 0;
    HEAP32[$st$5$1 >> 2] = $value$1;
    $10$0 = $bits$0;
    $10 = $10$0;
    $11 = $7 + 8 | 0;
    $12 = $11;
    HEAP32[$12 >> 2] = $10;
    STACKTOP = __stackBase__;
    return $8 | 0;
  }
  return 0;
}
function _kof_policy($k, $list) {
  $k = $k | 0;
  $list = $list | 0;
  var $1 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($k | 0) < 1;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _die(4616, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $k, tempInt) | 0);
    return 0;
   case 3:
    $4 = $list + 4 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($5 | 0) < ($k | 0);
    if ($6) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _die(4392, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $k, HEAP32[tempInt + 8 >> 2] = $5, tempInt) | 0);
    return 0;
   case 5:
    $9 = ($5 | 0) == 1;
    if ($9) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _die(9048, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $k, tempInt) | 0);
    return 0;
   case 7:
    $12 = _malloc(12) | 0;
    $13 = $12;
    $14 = $12;
    HEAP32[$14 >> 2] = $k;
    $15 = $12 + 4 | 0;
    $16 = $15;
    HEAP32[$16 >> 2] = 0;
    $17 = $12 + 8 | 0;
    $18 = $17;
    HEAP32[$18 >> 2] = $list;
    STACKTOP = __stackBase__;
    return $13 | 0;
  }
  return 0;
}
function _yyerror($s) {
  $s = $s | 0;
  _die(6752, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $s, tempInt) | 0);
}
function _flexint_leader($gt, $attr, $value$0, $value$1) {
  $gt = $gt | 0;
  $attr = $attr | 0;
  $value$0 = $value$0 | 0;
  $value$1 = $value$1 | 0;
  var $s = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $$etemp$0$0 = 0, $$etemp$0$1 = 0, $10 = 0, $$etemp$1$0 = 0, $$etemp$1$1 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $p_0 = 0, $$etemp$2$0 = 0, $$etemp$2$1 = 0, $34 = 0, $$etemp$3$0 = 0, $$etemp$3$1 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $$etemp$4$0 = 0, $$etemp$4$1 = 0, $42 = 0, $$etemp$5$0 = 0, $$etemp$5$1 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $$etemp$6$0 = 0, $$etemp$6$1 = 0, $50 = 0, $$etemp$7$0 = 0, $$etemp$7$1 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $$etemp$8$0 = 0, $$etemp$8$1 = 0, $58 = 0, $59 = 0, $$etemp$9$0 = 0, $$etemp$9$1 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $s = __stackBase__ | 0;
    $1 = _malloc(12) | 0;
    $2 = $1 + 4 | 0;
    $3 = $2;
    HEAP32[$3 >> 2] = 0;
    $4 = _a_ptr_array_new() | 0;
    $5 = $1 + 8 | 0;
    $6 = $5;
    HEAP32[$6 >> 2] = $4;
    $7 = ($gt | 0) != 0;
    $8 = $7 ? 8336 : 8208;
    if ($7) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $$etemp$0$0 = 4;
    $$etemp$0$1 = 0;
    $10 = $value$1 >>> 0 < $$etemp$0$1 >>> 0 | $value$1 >>> 0 == $$etemp$0$1 >>> 0 & $value$0 >>> 0 < $$etemp$0$0 >>> 0;
    if ($10) {
      label = 4;
      break;
    } else {
      label = 11;
      break;
    }
   case 3:
    $$etemp$1$0 = 4;
    $$etemp$1$1 = 0;
    $11 = $value$1 >>> 0 > $$etemp$1$1 >>> 0 | $value$1 >>> 0 == $$etemp$1$1 >>> 0 & $value$0 >>> 0 > $$etemp$1$0 >>> 0;
    if ($11) {
      label = 10;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $12 = _asprintf($s | 0, $8 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $attr, HEAP32[tempInt + 8 >> 2] = 2, tempInt) | 0) | 0;
    $13 = HEAP32[$6 >> 2] | 0;
    $14 = HEAP32[$s >> 2] | 0;
    $15 = _leaf_policy($14) | 0;
    $16 = $15;
    _a_ptr_array_add($13, $16);
    if ($7) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 5:
    $19 = HEAP32[$6 >> 2] | 0;
    $20 = $19 + 4 | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    $24 = $21;
    $23 = $18;
    label = 6;
    break;
   case 6:
    $25 = $1;
    HEAP32[$25 >> 2] = $24;
    $26 = HEAP32[$6 >> 2] | 0;
    $27 = $26 + 4 | 0;
    $28 = HEAP32[$27 >> 2] | 0;
    if (($28 | 0) == 0) {
      label = 7;
      break;
    } else if (($28 | 0) == 1) {
      label = 8;
      break;
    } else {
      $p_0 = $23;
      label = 9;
      break;
    }
   case 7:
    _policy_free($23);
    $p_0 = 0;
    label = 9;
    break;
   case 8:
    $31 = _a_ptr_array_remove_index($26, 0) | 0;
    $32 = $31;
    _policy_free($23);
    $p_0 = $32;
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return $p_0 | 0;
   case 10:
    $$etemp$2$0 = 16;
    $$etemp$2$1 = 0;
    $34 = $value$1 >>> 0 > $$etemp$2$1 >>> 0 | $value$1 >>> 0 == $$etemp$2$1 >>> 0 & $value$0 >>> 0 > $$etemp$2$0 >>> 0;
    if ($34) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $$etemp$3$0 = 16;
    $$etemp$3$1 = 0;
    $35 = $value$1 >>> 0 < $$etemp$3$1 >>> 0 | $value$1 >>> 0 == $$etemp$3$1 >>> 0 & $value$0 >>> 0 < $$etemp$3$0 >>> 0;
    if ($35) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $37 = _asprintf($s | 0, $8 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $attr, HEAP32[tempInt + 8 >> 2] = 4, tempInt) | 0) | 0;
    $38 = HEAP32[$6 >> 2] | 0;
    $39 = HEAP32[$s >> 2] | 0;
    $40 = _leaf_policy($39) | 0;
    $41 = $40;
    _a_ptr_array_add($38, $41);
    label = 13;
    break;
   case 13:
    if ($7) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $$etemp$4$0 = 256;
    $$etemp$4$1 = 0;
    $42 = $value$1 >>> 0 > $$etemp$4$1 >>> 0 | $value$1 >>> 0 == $$etemp$4$1 >>> 0 & $value$0 >>> 0 > $$etemp$4$0 >>> 0;
    if ($42) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $$etemp$5$0 = 256;
    $$etemp$5$1 = 0;
    $44 = $value$1 >>> 0 < $$etemp$5$1 >>> 0 | $value$1 >>> 0 == $$etemp$5$1 >>> 0 & $value$0 >>> 0 < $$etemp$5$0 >>> 0;
    if ($44) {
      label = 16;
      break;
    } else {
      label = 18;
      break;
    }
   case 16:
    $45 = _asprintf($s | 0, $8 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $attr, HEAP32[tempInt + 8 >> 2] = 8, tempInt) | 0) | 0;
    $46 = HEAP32[$6 >> 2] | 0;
    $47 = HEAP32[$s >> 2] | 0;
    $48 = _leaf_policy($47) | 0;
    $49 = $48;
    _a_ptr_array_add($46, $49);
    if ($7) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $$etemp$6$0 = 65536;
    $$etemp$6$1 = 0;
    $50 = $value$1 >>> 0 > $$etemp$6$1 >>> 0 | $value$1 >>> 0 == $$etemp$6$1 >>> 0 & $value$0 >>> 0 > $$etemp$6$0 >>> 0;
    if ($50) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    $$etemp$7$0 = 65536;
    $$etemp$7$1 = 0;
    $51 = $value$1 >>> 0 < $$etemp$7$1 >>> 0 | $value$1 >>> 0 == $$etemp$7$1 >>> 0 & $value$0 >>> 0 < $$etemp$7$0 >>> 0;
    if ($51) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    $53 = _asprintf($s | 0, $8 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $attr, HEAP32[tempInt + 8 >> 2] = 16, tempInt) | 0) | 0;
    $54 = HEAP32[$6 >> 2] | 0;
    $55 = HEAP32[$s >> 2] | 0;
    $56 = _leaf_policy($55) | 0;
    $57 = $56;
    _a_ptr_array_add($54, $57);
    label = 20;
    break;
   case 20:
    if ($7) {
      label = 23;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $$etemp$8$0 = 0;
    $$etemp$8$1 = 1;
    $58 = $value$1 >>> 0 > $$etemp$8$1 >>> 0 | $value$1 >>> 0 == $$etemp$8$1 >>> 0 & $value$0 >>> 0 > $$etemp$8$0 >>> 0;
    if ($58) {
      label = 22;
      break;
    } else {
      label = 25;
      break;
    }
   case 22:
    $59 = $1;
    $18 = $59;
    label = 5;
    break;
   case 23:
    $$etemp$9$0 = 0;
    $$etemp$9$1 = 1;
    $61 = $value$1 >>> 0 < $$etemp$9$1 >>> 0 | $value$1 >>> 0 == $$etemp$9$1 >>> 0 & $value$0 >>> 0 < $$etemp$9$0 >>> 0;
    if ($61) {
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $62 = $1;
    $24 = 1;
    $23 = $62;
    label = 6;
    break;
   case 25:
    $63 = _asprintf($s | 0, $8 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $attr, HEAP32[tempInt + 8 >> 2] = 32, tempInt) | 0) | 0;
    $64 = HEAP32[$6 >> 2] | 0;
    $65 = HEAP32[$s >> 2] | 0;
    $66 = _leaf_policy($65) | 0;
    $67 = $66;
    _a_ptr_array_add($64, $67);
    $68 = $1;
    if ($7) {
      $24 = 1;
      $23 = $68;
      label = 6;
      break;
    } else {
      $18 = $68;
      label = 5;
      break;
    }
  }
  return 0;
}
function _merge_child($p, $i) {
  $p = $p | 0;
  $i = $i | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $j_015 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $_lcssa = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p + 8 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = _a_ptr_array_index($2, $i) | 0;
    $4 = $p | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $2 + 4 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($5 | 0) == ($7 | 0);
    if ($8) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $10 = $3;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $5 - 1 | 0;
    $13 = $12 + $11 | 0;
    HEAP32[$4 >> 2] = $13;
    label = 3;
    break;
   case 3:
    $15 = HEAP32[$1 >> 2] | 0;
    $16 = _a_ptr_array_remove_index($15, $i) | 0;
    $17 = $3 + 8 | 0;
    $18 = $17;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $19 + 4 | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = ($21 | 0) > 0;
    if ($22) {
      $j_015 = 0;
      $23 = $19;
      label = 4;
      break;
    } else {
      $_lcssa = $19;
      label = 5;
      break;
    }
   case 4:
    $24 = HEAP32[$1 >> 2] | 0;
    $25 = _a_ptr_array_index($23, $j_015) | 0;
    _a_ptr_array_add($24, $25);
    $26 = $j_015 + 1 | 0;
    $27 = HEAP32[$18 >> 2] | 0;
    $28 = $27 + 4 | 0;
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = ($26 | 0) < ($29 | 0);
    if ($30) {
      $j_015 = $26;
      $23 = $27;
      label = 4;
      break;
    } else {
      $_lcssa = $27;
      label = 5;
      break;
    }
   case 5:
    _a_ptr_array_free($_lcssa, 0);
    _free($3);
    return;
  }
}
function _simplify($p) {
  $p = $p | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i_031 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $_lcssa30 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $or_cond = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $i_128 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $i_225 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p + 8 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) > 0;
    if ($5) {
      $i_031 = 0;
      $6 = $2;
      label = 2;
      break;
    } else {
      $_lcssa30 = $4;
      label = 3;
      break;
    }
   case 2:
    $7 = _a_ptr_array_index($6, $i_031) | 0;
    $8 = $7;
    _simplify($8);
    $9 = $i_031 + 1 | 0;
    $10 = HEAP32[$1 >> 2] | 0;
    $11 = $10 + 4 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($9 | 0) < ($12 | 0);
    if ($13) {
      $i_031 = $9;
      $6 = $10;
      label = 2;
      break;
    } else {
      $_lcssa30 = $12;
      label = 3;
      break;
    }
   case 3:
    $14 = $p | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = ($15 | 0) != 1;
    $17 = ($_lcssa30 | 0) == 0;
    $or_cond = $16 | $17;
    if ($or_cond) {
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $18 = HEAP32[$1 >> 2] | 0;
    $19 = $18 + 4 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = ($20 | 0) > 0;
    if ($21) {
      $i_128 = 0;
      $22 = $18;
      label = 5;
      break;
    } else {
      label = 9;
      break;
    }
   case 5:
    $23 = _a_ptr_array_index($22, $i_128) | 0;
    $24 = $23;
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = ($25 | 0) == 1;
    if ($26) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    $28 = $23 + 8 | 0;
    $29 = $28;
    $30 = HEAP32[$29 >> 2] | 0;
    $31 = $30 + 4 | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    $33 = ($32 | 0) == 0;
    if ($33) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _merge_child($p, $i_128);
    label = 8;
    break;
   case 8:
    $36 = $i_128 + 1 | 0;
    $37 = HEAP32[$1 >> 2] | 0;
    $38 = $37 + 4 | 0;
    $39 = HEAP32[$38 >> 2] | 0;
    $40 = ($36 | 0) < ($39 | 0);
    if ($40) {
      $i_128 = $36;
      $22 = $37;
      label = 5;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $41 = HEAP32[$14 >> 2] | 0;
    $42 = HEAP32[$1 >> 2] | 0;
    $43 = $42 + 4 | 0;
    $44 = HEAP32[$43 >> 2] | 0;
    $45 = ($41 | 0) == ($44 | 0);
    if ($45) {
      label = 10;
      break;
    } else {
      label = 14;
      break;
    }
   case 10:
    $46 = HEAP32[$1 >> 2] | 0;
    $47 = $46 + 4 | 0;
    $48 = HEAP32[$47 >> 2] | 0;
    $49 = ($48 | 0) > 0;
    if ($49) {
      $i_225 = 0;
      $50 = $46;
      label = 11;
      break;
    } else {
      label = 14;
      break;
    }
   case 11:
    $51 = _a_ptr_array_index($50, $i_225) | 0;
    $52 = $51;
    $53 = HEAP32[$52 >> 2] | 0;
    $54 = $51 + 8 | 0;
    $55 = $54;
    $56 = HEAP32[$55 >> 2] | 0;
    $57 = $56 + 4 | 0;
    $58 = HEAP32[$57 >> 2] | 0;
    $59 = ($53 | 0) == ($58 | 0);
    if ($59) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    _merge_child($p, $i_225);
    label = 13;
    break;
   case 13:
    $62 = $i_225 + 1 | 0;
    $63 = HEAP32[$1 >> 2] | 0;
    $64 = $63 + 4 | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    $66 = ($62 | 0) < ($65 | 0);
    if ($66) {
      $i_225 = $62;
      $50 = $63;
      label = 11;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    return;
  }
}
function _cmp_tidy($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $b;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $2 + 8 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6 + 4 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($8 | 0) > 0;
    if ($9) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $11 = $4 + 8 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 + 4 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = ($14 | 0) == 0;
    if ($15) {
      $_0 = -1;
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $17 = HEAP32[$5 >> 2] | 0;
    $18 = $17 + 4 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = ($19 | 0) == 0;
    if ($20) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $22 = $4 + 8 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $23 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = ($25 | 0) > 0;
    if ($26) {
      $_0 = 1;
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $28 = HEAP32[$5 >> 2] | 0;
    $29 = $28 + 4 | 0;
    $30 = HEAP32[$29 >> 2] | 0;
    $31 = ($30 | 0) == 0;
    if ($31) {
      label = 6;
      break;
    } else {
      $_0 = 0;
      label = 8;
      break;
    }
   case 6:
    $33 = $4 + 8 | 0;
    $34 = HEAP32[$33 >> 2] | 0;
    $35 = $34 + 4 | 0;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = ($36 | 0) == 0;
    if ($37) {
      label = 7;
      break;
    } else {
      $_0 = 0;
      label = 8;
      break;
    }
   case 7:
    $39 = $2 + 4 | 0;
    $40 = HEAP32[$39 >> 2] | 0;
    $41 = $4 + 4 | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    $43 = _strcmp($40 | 0, $42 | 0) | 0;
    $_0 = $43;
    label = 8;
    break;
   case 8:
    return $_0 | 0;
  }
  return 0;
}
function _tidy($p) {
  $p = $p | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i_07 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p + 8 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) > 0;
    if ($5) {
      $i_07 = 0;
      $6 = $2;
      label = 2;
      break;
    } else {
      label = 5;
      break;
    }
   case 2:
    $7 = _a_ptr_array_index($6, $i_07) | 0;
    $8 = $7;
    _tidy($8);
    $9 = $i_07 + 1 | 0;
    $10 = HEAP32[$1 >> 2] | 0;
    $11 = $10 + 4 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($9 | 0) < ($12 | 0);
    if ($13) {
      $i_07 = $9;
      $6 = $10;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $14 = ($12 | 0) > 0;
    if ($14) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $16 = $10 | 0;
    $17 = HEAP32[$16 >> 2] | 0;
    _qsort($17 | 0, $12 | 0, 4, 48);
    label = 5;
    break;
   case 5:
    return;
  }
}
function _format_policy_postfix($p) {
  $p = $p | 0;
  var $t = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $r_014 = 0, $i_013 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $_lcssa = 0, $r_0_lcssa = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $t = __stackBase__ | 0;
    $1 = $p + 8 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $7 = $p + 4 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = _strdup($8 | 0) | 0;
    $_0 = $9;
    label = 6;
    break;
   case 3:
    $11 = _a_ptr_array_index($2, 0) | 0;
    $12 = $11;
    $13 = _format_policy_postfix($12) | 0;
    $14 = HEAP32[$1 >> 2] | 0;
    $15 = $14 + 4 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = ($16 | 0) > 1;
    if ($17) {
      $i_013 = 1;
      $r_014 = $13;
      $18 = $14;
      label = 4;
      break;
    } else {
      $r_0_lcssa = $13;
      $_lcssa = $16;
      label = 5;
      break;
    }
   case 4:
    $19 = _a_ptr_array_index($18, $i_013) | 0;
    $20 = $19;
    $21 = _format_policy_postfix($20) | 0;
    $22 = _asprintf($t | 0, 6736, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $r_014, HEAP32[tempInt + 8 >> 2] = $21, tempInt) | 0) | 0;
    _free($r_014);
    _free($21);
    $23 = HEAP32[$t >> 2] | 0;
    $24 = $i_013 + 1 | 0;
    $25 = HEAP32[$1 >> 2] | 0;
    $26 = $25 + 4 | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = ($24 | 0) < ($27 | 0);
    if ($28) {
      $i_013 = $24;
      $r_014 = $23;
      $18 = $25;
      label = 4;
      break;
    } else {
      $r_0_lcssa = $23;
      $_lcssa = $27;
      label = 5;
      break;
    }
   case 5:
    $29 = $p | 0;
    $30 = HEAP32[$29 >> 2] | 0;
    $31 = _asprintf($t | 0, 6720, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $r_0_lcssa, HEAP32[tempInt + 8 >> 2] = $30, HEAP32[tempInt + 16 >> 2] = $_lcssa, tempInt) | 0) | 0;
    _free($r_0_lcssa);
    $32 = HEAP32[$t >> 2] | 0;
    $_0 = $32;
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _cmp_policy($n, $gt, $attr) {
  $n = $n | 0;
  $gt = $gt | 0;
  $attr = $attr | 0;
  var $tplate = 0, $1 = 0, $2 = 0, $ld$0$0 = 0, $3$0 = 0, $ld$1$1 = 0, $3$1 = 0, $5 = 0, $6 = 0, $phitmp37$0 = 0, $phitmp37$1 = 0, $$etemp$2$0 = 0, $$etemp$2$1 = 0, $$etemp$3$0 = 0, $$etemp$3$1 = 0, $7$0 = 0, $7$1 = 0, $8 = 0, $10 = 0, $_ = 0, $$etemp$4 = 0, $$etemp$5$0 = 0, $$etemp$5$1 = 0, $11 = 0, $14 = 0, $15 = 0, $phitmp$0 = 0, $phitmp$1 = 0, $$etemp$6$0 = 0, $$etemp$6$1 = 0, $$etemp$7$0 = 0, $$etemp$7$1 = 0, $16$0 = 0, $16$1 = 0, $17 = 0, $19 = 0, $_39 = 0, $$etemp$8 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $ld$9$0 = 0, $33$0 = 0, $ld$10$1 = 0, $33$1 = 0, $$etemp$11$0 = 0, $$etemp$11$1 = 0, $34 = 0, $$etemp$12$0 = 0, $$etemp$12$1 = 0, $36 = 0, $$etemp$13$0 = 0, $$etemp$13$1 = 0, $38 = 0, $$etemp$14$0 = 0, $$etemp$14$1 = 0, $40 = 0, $$etemp$15$0 = 0, $$etemp$15$1 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $ld$16$0 = 0, $47$0 = 0, $ld$17$1 = 0, $47$1 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $ld$18$0 = 0, $53$0 = 0, $ld$19$1 = 0, $53$1 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $p_0 = 0, label = 0, __stackBase__ = 0, $phitmp37_op$0 = 0, $phitmp37_op$1 = 0, $phitmp_op$0 = 0, $phitmp_op$1 = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $tplate = __stackBase__ | 0;
    $1 = ($gt | 0) != 0;
    $2 = $n | 0;
    $ld$0$0 = $2 | 0;
    $3$0 = HEAP32[$ld$0$0 >> 2] | 0;
    $ld$1$1 = $2 + 4 | 0;
    $3$1 = HEAP32[$ld$1$1 >> 2] | 0;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $5 = $n + 8 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $phitmp37$0 = $6;
    $phitmp37$1 = 0;
    $$etemp$2$0 = 1;
    $$etemp$2$1 = 0;
    $phitmp37_op$0 = _bitshift64Shl($$etemp$2$0 | 0, $$etemp$2$1 | 0, $phitmp37$0 | 0) | 0;
    $phitmp37_op$1 = tempRet0;
    $$etemp$3$0 = -1;
    $$etemp$3$1 = -1;
    $7$0 = _i64Add($phitmp37_op$0, $phitmp37_op$1, $$etemp$3$0, $$etemp$3$1) | 0;
    $7$1 = tempRet0;
    $8 = $3$1 >>> 0 < $7$1 >>> 0 | $3$1 >>> 0 == $7$1 >>> 0 & $3$0 >>> 0 < $7$0 >>> 0;
    if ($8) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $10 = ($6 | 0) == 0;
    $_ = $10 ? 64 : $6;
    $$etemp$4 = 7888;
    _die($$etemp$4, (tempInt = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempInt >> 2] = $attr, HEAP32[tempInt + 8 >> 2] = $3$0, HEAP32[tempInt + 16 >> 2] = $3$1, HEAP32[tempInt + 24 >> 2] = $_, tempInt) | 0);
    return 0;
   case 4:
    $$etemp$5$0 = 0;
    $$etemp$5$1 = 0;
    $11 = ($3$0 | 0) == ($$etemp$5$0 | 0) & ($3$1 | 0) == ($$etemp$5$1 | 0);
    if ($11) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _die(7688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $attr, tempInt) | 0);
    return 0;
   case 6:
    $14 = $n + 8 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $phitmp$0 = $15;
    $phitmp$1 = 0;
    $$etemp$6$0 = 1;
    $$etemp$6$1 = 0;
    $phitmp_op$0 = _bitshift64Shl($$etemp$6$0 | 0, $$etemp$6$1 | 0, $phitmp$0 | 0) | 0;
    $phitmp_op$1 = tempRet0;
    $$etemp$7$0 = -1;
    $$etemp$7$1 = -1;
    $16$0 = _i64Add($phitmp_op$0, $phitmp_op$1, $$etemp$7$0, $$etemp$7$1) | 0;
    $16$1 = tempRet0;
    $17 = $3$1 >>> 0 > $16$1 >>> 0 | $3$1 >>> 0 == $16$1 >>> 0 & $3$0 >>> 0 > $16$0 >>> 0;
    if ($17) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $19 = ($15 | 0) == 0;
    $_39 = $19 ? 64 : $15;
    $$etemp$8 = 7552;
    _die($$etemp$8, (tempInt = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempInt >> 2] = $attr, HEAP32[tempInt + 8 >> 2] = $3$0, HEAP32[tempInt + 16 >> 2] = $3$1, HEAP32[tempInt + 24 >> 2] = $_39, tempInt) | 0);
    return 0;
   case 8:
    $20 = $n + 8 | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = ($21 | 0) == 0;
    if ($22) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $24 = _asprintf($tplate | 0, 7432, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $21, tempInt) | 0) | 0;
    label = 11;
    break;
   case 10:
    $26 = _strdup(7408) | 0;
    HEAP32[$tplate >> 2] = $26;
    label = 11;
    break;
   case 11:
    $28 = HEAP32[$tplate >> 2] | 0;
    $29 = HEAP32[$20 >> 2] | 0;
    $30 = ($29 | 0) == 0;
    if ($30) {
      label = 12;
      break;
    } else {
      $45 = $29;
      label = 17;
      break;
    }
   case 12:
    $32 = $n | 0;
    $ld$9$0 = $32 | 0;
    $33$0 = HEAP32[$ld$9$0 >> 2] | 0;
    $ld$10$1 = $32 + 4 | 0;
    $33$1 = HEAP32[$ld$10$1 >> 2] | 0;
    $$etemp$11$0 = -1;
    $$etemp$11$1 = 0;
    $34 = $33$1 >>> 0 > $$etemp$11$1 >>> 0 | $33$1 >>> 0 == $$etemp$11$1 >>> 0 & $33$0 >>> 0 > $$etemp$11$0 >>> 0;
    if ($34) {
      $45 = 64;
      label = 17;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $$etemp$12$0 = 65535;
    $$etemp$12$1 = 0;
    $36 = $33$1 >>> 0 > $$etemp$12$1 >>> 0 | $33$1 >>> 0 == $$etemp$12$1 >>> 0 & $33$0 >>> 0 > $$etemp$12$0 >>> 0;
    if ($36) {
      $45 = 32;
      label = 17;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $$etemp$13$0 = 255;
    $$etemp$13$1 = 0;
    $38 = $33$1 >>> 0 > $$etemp$13$1 >>> 0 | $33$1 >>> 0 == $$etemp$13$1 >>> 0 & $33$0 >>> 0 > $$etemp$13$0 >>> 0;
    if ($38) {
      $45 = 16;
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $$etemp$14$0 = 15;
    $$etemp$14$1 = 0;
    $40 = $33$1 >>> 0 > $$etemp$14$1 >>> 0 | $33$1 >>> 0 == $$etemp$14$1 >>> 0 & $33$0 >>> 0 > $$etemp$14$0 >>> 0;
    if ($40) {
      $45 = 8;
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $$etemp$15$0 = 3;
    $$etemp$15$1 = 0;
    $42 = $33$1 >>> 0 > $$etemp$15$1 >>> 0 | $33$1 >>> 0 == $$etemp$15$1 >>> 0 & $33$0 >>> 0 > $$etemp$15$0 >>> 0;
    $43 = $42 ? 4 : 2;
    $45 = $43;
    label = 17;
    break;
   case 17:
    $46 = $n | 0;
    $ld$16$0 = $46 | 0;
    $47$0 = HEAP32[$ld$16$0 >> 2] | 0;
    $ld$17$1 = $46 + 4 | 0;
    $47$1 = HEAP32[$ld$17$1 >> 2] | 0;
    $48 = _bit_marker_list($gt, $attr, $28, $45, $47$0, $47$1) | 0;
    $49 = HEAP32[$tplate >> 2] | 0;
    _free($49);
    $50 = HEAP32[$20 >> 2] | 0;
    $51 = ($50 | 0) == 0;
    if ($51) {
      label = 18;
      break;
    } else {
      $p_0 = $48;
      label = 20;
      break;
    }
   case 18:
    $ld$18$0 = $46 | 0;
    $53$0 = HEAP32[$ld$18$0 >> 2] | 0;
    $ld$19$1 = $46 + 4 | 0;
    $53$1 = HEAP32[$ld$19$1 >> 2] | 0;
    $54 = _flexint_leader($gt, $attr, $53$0, $53$1) | 0;
    $55 = ($54 | 0) == 0;
    if ($55) {
      $p_0 = $48;
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $57 = $1 ? 1 : 2;
    $58 = _kof2_policy($57, $54, $48) | 0;
    $p_0 = $58;
    label = 20;
    break;
   case 20:
    STACKTOP = __stackBase__;
    return $p_0 | 0;
  }
  return 0;
}
function _yylex() {
  var $c = 0, $d = 0, $d1 = 0, $d3 = 0, $d4 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $memchr = 0, $17 = 0, $memchr12 = 0, $19 = 0, $21 = 0, $22 = 0, $phitmp17 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $phitmp16 = 0, $not_24 = 0, $_phitmp16 = 0, $34 = 0, $_pr = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $phitmp15 = 0, $not_23 = 0, $_phitmp15 = 0, $44 = 0, $46 = 0, $isdigittmp = 0, $isdigit = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $_op25 = 0, $isdigit202126 = 0, $not_27 = 0, $_demorgan28 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $_op = 0, $isdigit2021 = 0, $not_ = 0, $_demorgan = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $_18 = 0, $79 = 0, $80 = 0, $82 = 0, $83 = 0, $phitmp = 0, $84 = 0, $85 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $99 = 0, $100 = 0, $103 = 0, $104 = 0, $108 = 0, $109 = 0, $r_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $c = __stackBase__ | 0;
    $d = __stackBase__ + 8 | 0;
    $d1 = __stackBase__ + 16 | 0;
    $d3 = __stackBase__ + 24 | 0;
    $d4 = __stackBase__ + 32 | 0;
    label = 2;
    break;
   case 2:
    $2 = HEAP32[1008] | 0;
    $3 = HEAP8[$2] | 0;
    $4 = $3 << 24 >> 24 == 0;
    if ($4) {
      $10 = -1;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $6 = $2 + 1 | 0;
    HEAP32[1008] = $6;
    $7 = HEAP8[$2] | 0;
    $8 = $7 << 24 >> 24;
    $10 = $8;
    label = 4;
    break;
   case 4:
    $11 = _isspace($10 | 0) | 0;
    $12 = ($11 | 0) == 0;
    if ($12) {
      label = 5;
      break;
    } else {
      label = 2;
      break;
    }
   case 5:
    HEAP32[$c >> 2] = $10;
    if (($10 | 0) == 38) {
      label = 6;
      break;
    } else if (($10 | 0) == 124) {
      label = 7;
      break;
    } else if (($10 | 0) == (-1 | 0)) {
      $r_0 = 0;
      label = 42;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    $r_0 = 261;
    label = 42;
    break;
   case 7:
    $r_0 = 260;
    label = 42;
    break;
   case 8:
    $memchr = _memchr(7384, $10 | 0, 6) | 0;
    $17 = ($memchr | 0) == 0;
    if ($17) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    $memchr12 = _memchr(7360, $10 | 0, 3) | 0;
    $19 = ($memchr12 | 0) == 0;
    if ($19) {
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $21 = HEAP32[1008] | 0;
    $22 = HEAP8[$21] | 0;
    $phitmp17 = $22 << 24 >> 24 == 61;
    if ($phitmp17) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $24 = HEAP32[$c >> 2] | 0;
    $r_0 = $24;
    label = 42;
    break;
   case 12:
    $26 = HEAP32[$c >> 2] | 0;
    $27 = ($26 | 0) == 60;
    if ($27) {
      label = 13;
      break;
    } else {
      $36 = $26;
      label = 17;
      break;
    }
   case 13:
    $29 = HEAP32[1008] | 0;
    $30 = HEAP8[$29] | 0;
    $31 = $30 << 24 >> 24 == 0;
    $phitmp16 = $30 << 24 >> 24 == 61;
    $not_24 = $31 ^ 1;
    $_phitmp16 = $phitmp16 & $not_24;
    if ($_phitmp16) {
      label = 14;
      break;
    } else {
      label = 16;
      break;
    }
   case 14:
    if ($31) {
      $r_0 = 263;
      label = 42;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $34 = $29 + 1 | 0;
    HEAP32[1008] = $34;
    $r_0 = 263;
    label = 42;
    break;
   case 16:
    $_pr = HEAP32[$c >> 2] | 0;
    $36 = $_pr;
    label = 17;
    break;
   case 17:
    $37 = ($36 | 0) == 62;
    if ($37) {
      label = 18;
      break;
    } else {
      label = 21;
      break;
    }
   case 18:
    $39 = HEAP32[1008] | 0;
    $40 = HEAP8[$39] | 0;
    $41 = $40 << 24 >> 24 == 0;
    $phitmp15 = $40 << 24 >> 24 == 61;
    $not_23 = $41 ^ 1;
    $_phitmp15 = $phitmp15 & $not_23;
    if ($_phitmp15) {
      label = 19;
      break;
    } else {
      label = 21;
      break;
    }
   case 19:
    if ($41) {
      $r_0 = 264;
      label = 42;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $44 = $39 + 1 | 0;
    HEAP32[1008] = $44;
    $r_0 = 264;
    label = 42;
    break;
   case 21:
    $46 = HEAP32[$c >> 2] | 0;
    $isdigittmp = $46 - 48 | 0;
    $isdigit = $isdigittmp >>> 0 < 10;
    if ($isdigit) {
      label = 22;
      break;
    } else {
      label = 27;
      break;
    }
   case 22:
    $48 = _a_byte_array_new() | 0;
    $49 = $c;
    _a_byte_array_append($48, $49, 1);
    $50 = HEAP32[1008] | 0;
    $51 = HEAP8[$50] | 0;
    $52 = $51 << 24 >> 24;
    $_op25 = $52 - 48 | 0;
    $isdigit202126 = $_op25 >>> 0 < 10;
    $not_27 = $51 << 24 >> 24 != 0;
    $_demorgan28 = $isdigit202126 & $not_27;
    if ($_demorgan28) {
      label = 23;
      break;
    } else {
      label = 26;
      break;
    }
   case 23:
    $53 = HEAP32[1008] | 0;
    $54 = HEAP8[$53] | 0;
    $55 = $54 << 24 >> 24 == 0;
    if ($55) {
      $60 = -1;
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $57 = $53 + 1 | 0;
    HEAP32[1008] = $57;
    $58 = HEAP8[$53] | 0;
    $60 = $58;
    label = 25;
    break;
   case 25:
    HEAP8[$d] = $60;
    _a_byte_array_append($48, $d, 1);
    $61 = HEAP32[1008] | 0;
    $62 = HEAP8[$61] | 0;
    $63 = $62 << 24 >> 24;
    $_op = $63 - 48 | 0;
    $isdigit2021 = $_op >>> 0 < 10;
    $not_ = $62 << 24 >> 24 != 0;
    $_demorgan = $isdigit2021 & $not_;
    if ($_demorgan) {
      label = 23;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    HEAP8[$d1] = 0;
    _a_byte_array_append($48, $d1, 1);
    $64 = $48 | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    $66 = _sscanf($65 | 0, 7136, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = 440, tempInt) | 0) | 0;
    _a_byte_array_free($48, 1);
    $r_0 = 259;
    label = 42;
    break;
   case 27:
    $68 = HEAP32[$c >> 2] | 0;
    $69 = _isalpha($68 | 0) | 0;
    $70 = ($69 | 0) == 0;
    if ($70) {
      label = 41;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $72 = _a_byte_array_new() | 0;
    $73 = $c;
    _a_byte_array_append($72, $73, 1);
    label = 29;
    break;
   case 29:
    $75 = HEAP32[1008] | 0;
    $76 = HEAP8[$75] | 0;
    $77 = $76 << 24 >> 24 == 0;
    $78 = $76 << 24 >> 24;
    $_18 = $77 ? -1 : $78;
    $79 = _isalnum($_18 | 0) | 0;
    $80 = ($79 | 0) == 0;
    if ($80) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    $82 = HEAP32[1008] | 0;
    $83 = HEAP8[$82] | 0;
    $phitmp = $83 << 24 >> 24 == 95;
    if ($phitmp) {
      label = 31;
      break;
    } else {
      label = 34;
      break;
    }
   case 31:
    $84 = HEAP32[1008] | 0;
    $85 = HEAP8[$84] | 0;
    $86 = $85 << 24 >> 24 == 0;
    if ($86) {
      $91 = -1;
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $88 = $84 + 1 | 0;
    HEAP32[1008] = $88;
    $89 = HEAP8[$84] | 0;
    $91 = $89;
    label = 33;
    break;
   case 33:
    HEAP8[$d3] = $91;
    _a_byte_array_append($72, $d3, 1);
    label = 29;
    break;
   case 34:
    HEAP8[$d4] = 0;
    _a_byte_array_append($72, $d4, 1);
    $93 = $72 | 0;
    $94 = HEAP32[$93 >> 2] | 0;
    $95 = _strcmp($94 | 0, 6984) | 0;
    $96 = ($95 | 0) == 0;
    if ($96) {
      label = 35;
      break;
    } else {
      label = 36;
      break;
    }
   case 35:
    _a_byte_array_free($72, 1);
    $r_0 = 261;
    label = 42;
    break;
   case 36:
    $99 = _strcmp($94 | 0, 6928) | 0;
    $100 = ($99 | 0) == 0;
    if ($100) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    _a_byte_array_free($72, 1);
    $r_0 = 260;
    label = 42;
    break;
   case 38:
    $103 = _strcmp($94 | 0, 6880) | 0;
    $104 = ($103 | 0) == 0;
    if ($104) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    _a_byte_array_free($72, 1);
    $r_0 = 262;
    label = 42;
    break;
   case 40:
    HEAP32[110] = $94;
    _a_byte_array_free($72, 0);
    $r_0 = 258;
    label = 42;
    break;
   case 41:
    $108 = HEAP32[$c >> 2] | 0;
    $109 = HEAP32[1008] | 0;
    _die(6856, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $108, HEAP32[tempInt + 8 >> 2] = $109, tempInt) | 0);
    return 0;
   case 42:
    STACKTOP = __stackBase__;
    return $r_0 | 0;
  }
  return 0;
}
function _parse_attribute($l, $a) {
  $l = $l | 0;
  $a = $a | 0;
  var $tplate = 0, $value = 0, $bits = 0, $t = 0, $t1 = 0, $u = 0, $1 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $ld$0$0 = 0, $14$0 = 0, $ld$1$1 = 0, $14$1 = 0, $$etemp$2 = 0, $17$0 = 0, $17$1 = 0, $$etemp$3$0 = 0, $$etemp$3$1 = 0, $19 = 0, $$etemp$4 = 0, $22 = 0, $23 = 0, $24 = 0, $i_038 = 0, $25 = 0, $26 = 0, $27$0 = 0, $27$1 = 0, $$etemp$5$0 = 0, $$etemp$5$1 = 0, $ld$6$0 = 0, $29$0 = 0, $ld$7$1 = 0, $29$1 = 0, $30$0 = 0, $30$1 = 0, $$etemp$8$0 = 0, $$etemp$8$1 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $ld$9$0 = 0, $40$0 = 0, $ld$10$1 = 0, $40$1 = 0, $$etemp$11 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $ld$12$0 = 0, $48$0 = 0, $ld$13$1 = 0, $48$1 = 0, $$etemp$14$0 = 0, $$etemp$14$1 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $ld$15$0 = 0, $55$0 = 0, $ld$16$1 = 0, $55$1 = 0, $$etemp$17$0 = 0, $$etemp$17$1 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $ld$18$0 = 0, $62$0 = 0, $ld$19$1 = 0, $62$1 = 0, $$etemp$20$0 = 0, $$etemp$20$1 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $ld$21$0 = 0, $69$0 = 0, $ld$22$1 = 0, $69$1 = 0, $$etemp$23$0 = 0, $$etemp$23$1 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $ld$24$0 = 0, $76$0 = 0, $ld$25$1 = 0, $76$1 = 0, $$etemp$26$0 = 0, $$etemp$26$1 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $i_239 = 0, $84 = 0, $85$0 = 0, $85$1 = 0, $$etemp$27$0 = 0, $$etemp$27$1 = 0, $ld$28$0 = 0, $87$0 = 0, $ld$29$1 = 0, $87$1 = 0, $88$0 = 0, $88$1 = 0, $$etemp$30$0 = 0, $$etemp$30$1 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $exitcond = 0, $ld$31$0 = 0, $95$0 = 0, $ld$32$1 = 0, $95$1 = 0, $$etemp$33 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, __stackBase__ = 0, $18$0 = 0, $18$1 = 0, $28$0 = 0, $28$1 = 0, $86$0 = 0, $86$1 = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $tplate = __stackBase__ | 0;
    $value = __stackBase__ + 8 | 0;
    $bits = __stackBase__ + 16 | 0;
    $t = __stackBase__ + 24 | 0;
    $t1 = __stackBase__ + 32 | 0;
    $u = __stackBase__ + 40 | 0;
    $1 = _strchr($a | 0, 61) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $4 = HEAP32[$l >> 2] | 0;
    $5 = _a_slist_append($4, $a) | 0;
    HEAP32[$l >> 2] = $5;
    label = 17;
    break;
   case 3:
    $7 = _strlen($a | 0) | 0;
    $8 = _malloc($7) | 0;
    $9 = _sscanf($a | 0, 6696, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 8 >> 2] = $value, HEAP32[tempInt + 16 >> 2] = $bits, tempInt) | 0) | 0;
    $10 = ($9 | 0) == 3;
    if ($10) {
      label = 4;
      break;
    } else {
      label = 11;
      break;
    }
   case 4:
    $12 = HEAP32[$bits >> 2] | 0;
    $13 = ($12 | 0) > 64;
    $ld$0$0 = $value | 0;
    $14$0 = HEAP32[$ld$0$0 >> 2] | 0;
    $ld$1$1 = $value + 4 | 0;
    $14$1 = HEAP32[$ld$1$1 >> 2] | 0;
    if ($13) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $$etemp$2 = 6504;
    _die($$etemp$2, (tempInt = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempInt >> 2] = $a, HEAP32[tempInt + 8 >> 2] = $14$0, HEAP32[tempInt + 16 >> 2] = $14$1, HEAP32[tempInt + 24 >> 2] = $12, tempInt) | 0);
   case 6:
    $17$0 = $12;
    $17$1 = 0;
    $$etemp$3$0 = 1;
    $$etemp$3$1 = 0;
    $18$0 = _bitshift64Shl($$etemp$3$0 | 0, $$etemp$3$1 | 0, $17$0 | 0) | 0;
    $18$1 = tempRet0;
    $19 = $14$1 >>> 0 < $18$1 >>> 0 | $14$1 >>> 0 == $18$1 >>> 0 & $14$0 >>> 0 < $18$0 >>> 0;
    if ($19) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $$etemp$4 = 6392;
    _die($$etemp$4, (tempInt = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempInt >> 2] = $a, HEAP32[tempInt + 8 >> 2] = $14$0, HEAP32[tempInt + 16 >> 2] = $14$1, HEAP32[tempInt + 24 >> 2] = $12, tempInt) | 0);
   case 8:
    $22 = _asprintf($tplate | 0, 7432, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $12, tempInt) | 0) | 0;
    $23 = HEAP32[$bits >> 2] | 0;
    $24 = ($23 | 0) > 0;
    if ($24) {
      $i_038 = 0;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $25 = HEAP32[$l >> 2] | 0;
    $26 = HEAP32[$tplate >> 2] | 0;
    $27$0 = $i_038;
    $27$1 = 0;
    $$etemp$5$0 = 1;
    $$etemp$5$1 = 0;
    $28$0 = _bitshift64Shl($$etemp$5$0 | 0, $$etemp$5$1 | 0, $27$0 | 0) | 0;
    $28$1 = tempRet0;
    $ld$6$0 = $value | 0;
    $29$0 = HEAP32[$ld$6$0 >> 2] | 0;
    $ld$7$1 = $value + 4 | 0;
    $29$1 = HEAP32[$ld$7$1 >> 2] | 0;
    $30$0 = $29$0 & $28$0;
    $30$1 = $29$1 & $28$1;
    $$etemp$8$0 = 0;
    $$etemp$8$1 = 0;
    $31 = ($30$0 | 0) != ($$etemp$8$0 | 0) | ($30$1 | 0) != ($$etemp$8$1 | 0);
    $32 = $31 & 1;
    $33 = _bit_marker($8, $26, $i_038, $32) | 0;
    $34 = _a_slist_append($25, $33) | 0;
    HEAP32[$l >> 2] = $34;
    $35 = $i_038 + 1 | 0;
    $36 = HEAP32[$bits >> 2] | 0;
    $37 = ($35 | 0) < ($36 | 0);
    if ($37) {
      $i_038 = $35;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $38 = HEAP32[$tplate >> 2] | 0;
    _free($38);
    $39 = HEAP32[$bits >> 2] | 0;
    $ld$9$0 = $value | 0;
    $40$0 = HEAP32[$ld$9$0 >> 2] | 0;
    $ld$10$1 = $value + 4 | 0;
    $40$1 = HEAP32[$ld$10$1 >> 2] | 0;
    $$etemp$11 = 8632;
    $41 = _asprintf($t | 0, $$etemp$11 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 32 | 0, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 8 >> 2] = $39, HEAP32[tempInt + 16 >> 2] = $40$0, HEAP32[tempInt + 24 >> 2] = $40$1, tempInt) | 0) | 0;
    $42 = HEAP32[$l >> 2] | 0;
    $43 = HEAP32[$t >> 2] | 0;
    $44 = _a_slist_append($42, $43) | 0;
    $storemerge = $44;
    label = 16;
    break;
   case 11:
    $46 = _sscanf($a | 0, 6328, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 8 >> 2] = $value, tempInt) | 0) | 0;
    $47 = ($46 | 0) == 2;
    if ($47) {
      label = 12;
      break;
    } else {
      label = 15;
      break;
    }
   case 12:
    $ld$12$0 = $value | 0;
    $48$0 = HEAP32[$ld$12$0 >> 2] | 0;
    $ld$13$1 = $value + 4 | 0;
    $48$1 = HEAP32[$ld$13$1 >> 2] | 0;
    $$etemp$14$0 = 4;
    $$etemp$14$1 = 0;
    $49 = $48$1 >>> 0 < $$etemp$14$1 >>> 0 | $48$1 >>> 0 == $$etemp$14$1 >>> 0 & $48$0 >>> 0 < $$etemp$14$0 >>> 0;
    $50 = $49 ? 8208 : 8336;
    $51 = _asprintf($t1 | 0, $50 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 8 >> 2] = 2, tempInt) | 0) | 0;
    $52 = HEAP32[$l >> 2] | 0;
    $53 = HEAP32[$t1 >> 2] | 0;
    $54 = _a_slist_append($52, $53) | 0;
    HEAP32[$l >> 2] = $54;
    $ld$15$0 = $value | 0;
    $55$0 = HEAP32[$ld$15$0 >> 2] | 0;
    $ld$16$1 = $value + 4 | 0;
    $55$1 = HEAP32[$ld$16$1 >> 2] | 0;
    $$etemp$17$0 = 16;
    $$etemp$17$1 = 0;
    $56 = $55$1 >>> 0 < $$etemp$17$1 >>> 0 | $55$1 >>> 0 == $$etemp$17$1 >>> 0 & $55$0 >>> 0 < $$etemp$17$0 >>> 0;
    $57 = $56 ? 8208 : 8336;
    $58 = _asprintf($t1 | 0, $57 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 8 >> 2] = 4, tempInt) | 0) | 0;
    $59 = HEAP32[$l >> 2] | 0;
    $60 = HEAP32[$t1 >> 2] | 0;
    $61 = _a_slist_append($59, $60) | 0;
    HEAP32[$l >> 2] = $61;
    $ld$18$0 = $value | 0;
    $62$0 = HEAP32[$ld$18$0 >> 2] | 0;
    $ld$19$1 = $value + 4 | 0;
    $62$1 = HEAP32[$ld$19$1 >> 2] | 0;
    $$etemp$20$0 = 256;
    $$etemp$20$1 = 0;
    $63 = $62$1 >>> 0 < $$etemp$20$1 >>> 0 | $62$1 >>> 0 == $$etemp$20$1 >>> 0 & $62$0 >>> 0 < $$etemp$20$0 >>> 0;
    $64 = $63 ? 8208 : 8336;
    $65 = _asprintf($t1 | 0, $64 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 8 >> 2] = 8, tempInt) | 0) | 0;
    $66 = HEAP32[$l >> 2] | 0;
    $67 = HEAP32[$t1 >> 2] | 0;
    $68 = _a_slist_append($66, $67) | 0;
    HEAP32[$l >> 2] = $68;
    $ld$21$0 = $value | 0;
    $69$0 = HEAP32[$ld$21$0 >> 2] | 0;
    $ld$22$1 = $value + 4 | 0;
    $69$1 = HEAP32[$ld$22$1 >> 2] | 0;
    $$etemp$23$0 = 65536;
    $$etemp$23$1 = 0;
    $70 = $69$1 >>> 0 < $$etemp$23$1 >>> 0 | $69$1 >>> 0 == $$etemp$23$1 >>> 0 & $69$0 >>> 0 < $$etemp$23$0 >>> 0;
    $71 = $70 ? 8208 : 8336;
    $72 = _asprintf($t1 | 0, $71 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 8 >> 2] = 16, tempInt) | 0) | 0;
    $73 = HEAP32[$l >> 2] | 0;
    $74 = HEAP32[$t1 >> 2] | 0;
    $75 = _a_slist_append($73, $74) | 0;
    HEAP32[$l >> 2] = $75;
    $ld$24$0 = $value | 0;
    $76$0 = HEAP32[$ld$24$0 >> 2] | 0;
    $ld$25$1 = $value + 4 | 0;
    $76$1 = HEAP32[$ld$25$1 >> 2] | 0;
    $$etemp$26$0 = 0;
    $$etemp$26$1 = 1;
    $77 = $76$1 >>> 0 < $$etemp$26$1 >>> 0 | $76$1 >>> 0 == $$etemp$26$1 >>> 0 & $76$0 >>> 0 < $$etemp$26$0 >>> 0;
    $78 = $77 ? 8208 : 8336;
    $79 = _asprintf($t1 | 0, $78 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 8 >> 2] = 32, tempInt) | 0) | 0;
    $80 = HEAP32[$l >> 2] | 0;
    $81 = HEAP32[$t1 >> 2] | 0;
    $82 = _a_slist_append($80, $81) | 0;
    HEAP32[$l >> 2] = $82;
    $i_239 = 0;
    label = 13;
    break;
   case 13:
    $84 = HEAP32[$l >> 2] | 0;
    $85$0 = $i_239;
    $85$1 = 0;
    $$etemp$27$0 = 1;
    $$etemp$27$1 = 0;
    $86$0 = _bitshift64Shl($$etemp$27$0 | 0, $$etemp$27$1 | 0, $85$0 | 0) | 0;
    $86$1 = tempRet0;
    $ld$28$0 = $value | 0;
    $87$0 = HEAP32[$ld$28$0 >> 2] | 0;
    $ld$29$1 = $value + 4 | 0;
    $87$1 = HEAP32[$ld$29$1 >> 2] | 0;
    $88$0 = $87$0 & $86$0;
    $88$1 = $87$1 & $86$1;
    $$etemp$30$0 = 0;
    $$etemp$30$1 = 0;
    $89 = ($88$0 | 0) != ($$etemp$30$0 | 0) | ($88$1 | 0) != ($$etemp$30$1 | 0);
    $90 = $89 & 1;
    $91 = _bit_marker($8, 7408, $i_239, $90) | 0;
    $92 = _a_slist_append($84, $91) | 0;
    HEAP32[$l >> 2] = $92;
    $93 = $i_239 + 1 | 0;
    $exitcond = ($93 | 0) == 64;
    if ($exitcond) {
      label = 14;
      break;
    } else {
      $i_239 = $93;
      label = 13;
      break;
    }
   case 14:
    $ld$31$0 = $value | 0;
    $95$0 = HEAP32[$ld$31$0 >> 2] | 0;
    $ld$32$1 = $value + 4 | 0;
    $95$1 = HEAP32[$ld$32$1 >> 2] | 0;
    $$etemp$33 = 9e3;
    $96 = _asprintf($u | 0, $$etemp$33 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 24 | 0, HEAP32[tempInt >> 2] = $8, HEAP32[tempInt + 8 >> 2] = $95$0, HEAP32[tempInt + 16 >> 2] = $95$1, tempInt) | 0) | 0;
    $97 = HEAP32[$l >> 2] | 0;
    $98 = HEAP32[$u >> 2] | 0;
    $99 = _a_slist_append($97, $98) | 0;
    $storemerge = $99;
    label = 16;
    break;
   case 15:
    _die(6192, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $a, tempInt) | 0);
   case 16:
    HEAP32[$l >> 2] = $storemerge;
    _free($8);
    label = 17;
    break;
   case 17:
    STACKTOP = __stackBase__;
    return;
  }
}
function _a_array_index($array, $i) {
  $array = $array | 0;
  $i = $i | 0;
  var $2 = 0;
  $2 = HEAP32[$array >> 2] | 0;
  return $2 + Math_imul(HEAP32[$array + 12 >> 2] | 0, $i) | 0;
}
function _a_slist_length($list) {
  $list = $list | 0;
  var $1 = 0, $_0 = 0, $i_0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_05 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($list | 0) == 0;
    if ($1) {
      $_05 = 0;
      label = 3;
      break;
    } else {
      $i_0 = 1;
      $_0 = $list;
      label = 2;
      break;
    }
   case 2:
    $2 = $_0 + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($3 | 0) == 0;
    $5 = $i_0 + 1 | 0;
    if ($4) {
      $_05 = $i_0;
      label = 3;
      break;
    } else {
      $i_0 = $5;
      $_0 = $3;
      label = 2;
      break;
    }
   case 3:
    return $_05 | 0;
  }
  return 0;
}
function _parse_policy_lang($s) {
  $s = $s | 0;
  var $5 = 0;
  HEAP32[1008] = $s;
  _yyparse();
  _simplify(HEAP32[364] | 0);
  _tidy(HEAP32[364] | 0);
  $5 = _format_policy_postfix(HEAP32[364] | 0) | 0;
  _policy_free(HEAP32[364] | 0);
  return $5 | 0;
}
function _a_array_new($esize) {
  $esize = $esize | 0;
  return _a_array_new_sized($esize, 16) | 0;
}
function _a_array_new_sized($esize, $size) {
  $esize = $esize | 0;
  $size = $size | 0;
  var $1 = 0, $9 = 0, $10 = 0;
  $1 = _malloc(16) | 0;
  HEAP32[$1 + 12 >> 2] = $esize;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = $size;
  $9 = Math_imul($size, $esize);
  $10 = _malloc($9) | 0;
  HEAP32[$1 >> 2] = $10;
  _memset($10 | 0, 0, $9 | 0);
  return $1 | 0;
}
function _a_array_expand($array, $newlen) {
  $array = $array | 0;
  $newlen = $newlen | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $array + 8 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) < ($newlen | 0);
    if ($3) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $4 = $array | 0;
    $5 = $array + 12 | 0;
    $6 = $array + 4 | 0;
    $8 = $2;
    label = 3;
    break;
   case 3:
    $9 = HEAP32[$4 >> 2] | 0;
    $10 = $8 << 1;
    $11 = HEAP32[$5 >> 2] | 0;
    $12 = Math_imul($10, $11);
    $13 = _malloc($12) | 0;
    $14 = HEAP32[$1 >> 2] | 0;
    $15 = $14 << 1;
    $16 = HEAP32[$5 >> 2] | 0;
    $17 = Math_imul($15, $16);
    _memset($13 | 0, 0, $17 | 0);
    $18 = HEAP32[$6 >> 2] | 0;
    $19 = HEAP32[$5 >> 2] | 0;
    $20 = Math_imul($19, $18);
    _memcpy($13 | 0, $9 | 0, $20);
    _free($9);
    HEAP32[$4 >> 2] = $13;
    $21 = HEAP32[$1 >> 2] | 0;
    $22 = $21 << 1;
    HEAP32[$1 >> 2] = $22;
    $23 = ($22 | 0) < ($newlen | 0);
    if ($23) {
      $8 = $22;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    return;
  }
}
function _a_array_append_val($array, $data) {
  $array = $array | 0;
  $data = $data | 0;
  var $1 = 0, $5 = 0, $7 = 0;
  $1 = $array + 4 | 0;
  _a_array_expand($array, (HEAP32[$1 >> 2] | 0) + 1 | 0);
  $5 = HEAP32[$array >> 2] | 0;
  $7 = HEAP32[$array + 12 >> 2] | 0;
  _memcpy($5 + Math_imul(HEAP32[$1 >> 2] | 0, $7) | 0, $data | 0, $7);
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
  return;
}
function _a_array_append($array, $data, $num) {
  $array = $array | 0;
  $data = $data | 0;
  $num = $num | 0;
  var $1 = 0, $5 = 0, $7 = 0, $10 = 0;
  $1 = $array + 4 | 0;
  _a_array_expand($array, (HEAP32[$1 >> 2] | 0) + $num | 0);
  $5 = HEAP32[$array >> 2] | 0;
  $7 = HEAP32[$array + 12 >> 2] | 0;
  $10 = $5 + Math_imul(HEAP32[$1 >> 2] | 0, $7) | 0;
  _memcpy($10 | 0, $data | 0, Math_imul($7, $num));
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + $num | 0;
  return;
}
function _a_array_set_val($array, $i, $data) {
  $array = $array | 0;
  $i = $i | 0;
  $data = $data | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    _a_array_expand($array, $i);
    $1 = $array | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $array + 12 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = Math_imul($4, $i);
    $6 = $2 + $5 | 0;
    _memcpy($6 | 0, $data | 0, $4);
    $7 = $i + 1 | 0;
    $8 = $array + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ($7 | 0) > ($9 | 0);
    if ($10) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    HEAP32[$8 >> 2] = $7;
    label = 3;
    break;
   case 3:
    return;
  }
}
function _a_array_free($array, $free_segment) {
  $array = $array | 0;
  $free_segment = $free_segment | 0;
  var $1 = 0, $3 = 0, $4 = 0, $6 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($free_segment | 0) == 0;
    if ($1) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = $array | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    _free($4);
    label = 3;
    break;
   case 3:
    $6 = $array;
    _free($6);
    return;
  }
}
function _a_array_remove_index($array, $i) {
  $array = $array | 0;
  $i = $i | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $array + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > ($i | 0);
    if ($3) {
      label = 2;
      break;
    } else {
      $_0 = 0;
      label = 3;
      break;
    }
   case 2:
    $5 = $array | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $array + 12 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = Math_imul($8, $i);
    $10 = $6 + $9 | 0;
    $11 = $10;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $i + 1 | 0;
    $14 = Math_imul($8, $13);
    $15 = $6 + $14 | 0;
    $16 = $i ^ -1;
    $17 = $2 + $16 | 0;
    $18 = Math_imul($8, $17);
    _memmove($10 | 0, $15 | 0, $18 | 0);
    $19 = HEAP32[$1 >> 2] | 0;
    $20 = $19 - 1 | 0;
    HEAP32[$1 >> 2] = $20;
    $21 = HEAP32[$5 >> 2] | 0;
    $22 = HEAP32[$7 >> 2] | 0;
    $23 = Math_imul($22, $20);
    $24 = $21 + $23 | 0;
    _memset($24 | 0, 0, $22 | 0);
    $_0 = $12;
    label = 3;
    break;
   case 3:
    return $_0 | 0;
  }
  return 0;
}
function _a_array_set_size($array, $len) {
  $array = $array | 0;
  $len = $len | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $array + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > ($len | 0);
    if ($3) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $5 = $array | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $array + 12 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = Math_imul($8, $len);
    $10 = $6 + $9 | 0;
    $11 = $2 - $len | 0;
    $12 = Math_imul($8, $11);
    _memset($10 | 0, 0, $12 | 0);
    label = 4;
    break;
   case 3:
    _a_array_expand($array, $len);
    $14 = $array | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $array + 12 | 0;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = HEAP32[$1 >> 2] | 0;
    $19 = Math_imul($18, $17);
    $20 = $15 + $19 | 0;
    $21 = $len - $18 | 0;
    $22 = Math_imul($21, $17);
    _memset($20 | 0, 0, $22 | 0);
    label = 4;
    break;
   case 4:
    HEAP32[$1 >> 2] = $len;
    return;
  }
}
function _a_array_base64_encode($array) {
  $array = $array | 0;
  var $len = 0, $1 = 0, $2 = 0, $3 = 0, $5 = 0, $10 = 0, $11 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $len = __stackBase__ | 0;
  HEAP32[$len >> 2] = 0;
  $1 = $array | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  $3 = $array + 4 | 0;
  $5 = $array + 12 | 0;
  _base64_encode(0, $len, $2, Math_imul(HEAP32[$5 >> 2] | 0, HEAP32[$3 >> 2] | 0));
  $10 = _malloc(HEAP32[$len >> 2] | 0) | 0;
  $11 = HEAP32[$1 >> 2] | 0;
  _base64_encode($10, $len, $11, Math_imul(HEAP32[$5 >> 2] | 0, HEAP32[$3 >> 2] | 0));
  STACKTOP = __stackBase__;
  return $10 | 0;
}
function _a_array_base64_decode($array) {
  $array = $array | 0;
  var $len = 0, $4 = 0, $6 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $len = __stackBase__ | 0;
  HEAP32[$len >> 2] = 0;
  _base64_decode(0, $len, $array, _strlen($array | 0) | 0);
  $4 = _a_array_new_sized(1, HEAP32[$len >> 2] | 0) | 0;
  $6 = HEAP32[$4 >> 2] | 0;
  _base64_decode($6, $len, $array, _strlen($array | 0) | 0);
  HEAP32[$4 + 4 >> 2] = HEAP32[$len >> 2] | 0;
  STACKTOP = __stackBase__;
  return $4 | 0;
}
function _a_byte_array_new() {
  return _a_array_new(1) | 0;
}
function _a_byte_array_free($array, $free_segment) {
  $array = $array | 0;
  $free_segment = $free_segment | 0;
  _a_array_free($array, $free_segment);
  return;
}
function _a_byte_array_append($array, $c, $len) {
  $array = $array | 0;
  $c = $c | 0;
  $len = $len | 0;
  _a_array_append($array, $c, $len);
  return;
}
function _a_ptr_array_new() {
  return _a_array_new(4) | 0;
}
function _a_ptr_array_add($array, $data) {
  $array = $array | 0;
  $data = $data | 0;
  var $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $1 = __stackBase__ | 0;
  HEAP32[$1 >> 2] = $data;
  _a_array_append_val($array, $1);
  STACKTOP = __stackBase__;
  return;
}
function _a_ptr_set($array, $i, $data) {
  $array = $array | 0;
  $i = $i | 0;
  $data = $data | 0;
  var $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $1 = __stackBase__ | 0;
  HEAP32[$1 >> 2] = $data;
  _a_array_set_val($array, $i, $1);
  STACKTOP = __stackBase__;
  return;
}
function _a_ptr_array_free($array, $free_segment) {
  $array = $array | 0;
  $free_segment = $free_segment | 0;
  _a_array_free($array, $free_segment);
  return;
}
function _a_ptr_array_index($array, $i) {
  $array = $array | 0;
  $i = $i | 0;
  return HEAP32[_a_array_index($array, $i) >> 2] | 0;
}
function _a_ptr_array_remove_index($array, $i) {
  $array = $array | 0;
  $i = $i | 0;
  return _a_array_remove_index($array, $i) | 0;
}
function _a_ptr_array_set_size($array, $len) {
  $array = $array | 0;
  $len = $len | 0;
  _a_array_set_size($array, $len);
  return;
}
function _a_slist_append($list, $obj) {
  $list = $list | 0;
  $obj = $obj | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_010 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _malloc(8) | 0;
    $2 = $1;
    $3 = $1 + 4 | 0;
    $4 = $3;
    HEAP32[$4 >> 2] = 0;
    $5 = $1;
    HEAP32[$5 >> 2] = $obj;
    $6 = ($list | 0) == 0;
    if ($6) {
      $_0 = $2;
      label = 4;
      break;
    } else {
      $_010 = $list;
      label = 2;
      break;
    }
   case 2:
    $7 = $_010 + 4 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($8 | 0) == 0;
    if ($9) {
      label = 3;
      break;
    } else {
      $_010 = $8;
      label = 2;
      break;
    }
   case 3:
    HEAP32[$7 >> 2] = $2;
    $_0 = $list;
    label = 4;
    break;
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function _raise_error($fmt, varrp) {
  $fmt = $fmt | 0;
  varrp = varrp | 0;
  var $args = 0, $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $args = __stackBase__ | 0;
  $1 = $args;
  HEAP32[$1 >> 2] = varrp;
  HEAP32[$1 + 4 >> 2] = 0;
  _vsnprintf(1144, 256, $fmt | 0, HEAP32[$args >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _element_from_string($h, $s) {
  $h = $h | 0;
  $s = $s | 0;
  var $2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $2 = __stackBase__ | 0;
  _sha1($s, _strlen($s | 0) | 0, $2);
  _element_from_hash($h, $2);
  STACKTOP = __stackBase__;
  return;
}
function _element_from_hash($e, $data) {
  $e = $e | 0;
  $data = $data | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$e >> 2] | 0) + 132 >> 2] & 1023]($e, $data, 20);
  return;
}
function _bswabe_setup($pub, $msk) {
  $pub = $pub | 0;
  $msk = $msk | 0;
  var $5 = 0, $8 = 0, $11 = 0, $15 = 0, $18 = 0, $21 = 0, $24 = 0, $27 = 0, $48 = 0, $53 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  HEAP32[$pub >> 2] = _malloc(544) | 0;
  HEAP32[$msk >> 2] = _malloc(16) | 0;
  $5 = _strdup(4728) | 0;
  HEAP32[HEAP32[$pub >> 2] >> 2] = $5;
  $8 = HEAP32[$pub >> 2] | 0;
  $11 = HEAP32[$8 >> 2] | 0;
  _pairing_init_set_buf($8 + 4 | 0, $11, _strlen($11 | 0) | 0);
  $15 = HEAP32[$pub >> 2] | 0;
  _element_init_G1($15 + 512 | 0, $15 + 4 | 0);
  $18 = HEAP32[$pub >> 2] | 0;
  _element_init_G1($18 + 520 | 0, $18 + 4 | 0);
  $21 = HEAP32[$pub >> 2] | 0;
  _element_init_G2($21 + 528 | 0, $21 + 4 | 0);
  $24 = HEAP32[$pub >> 2] | 0;
  _element_init_GT($24 + 536 | 0, $24 + 4 | 0);
  $27 = __stackBase__ | 0;
  _element_init_Zr($27, (HEAP32[$pub >> 2] | 0) + 4 | 0);
  _element_init_Zr(HEAP32[$msk >> 2] | 0, (HEAP32[$pub >> 2] | 0) + 4 | 0);
  _element_init_G2((HEAP32[$msk >> 2] | 0) + 8 | 0, (HEAP32[$pub >> 2] | 0) + 4 | 0);
  _element_random($27);
  _element_random(HEAP32[$msk >> 2] | 0);
  _element_random((HEAP32[$pub >> 2] | 0) + 512 | 0);
  _element_random((HEAP32[$pub >> 2] | 0) + 528 | 0);
  _element_pow_zn((HEAP32[$msk >> 2] | 0) + 8 | 0, (HEAP32[$pub >> 2] | 0) + 528 | 0, $27);
  $48 = HEAP32[$pub >> 2] | 0;
  _element_pow_zn($48 + 520 | 0, $48 + 512 | 0, HEAP32[$msk >> 2] | 0);
  $53 = HEAP32[$pub >> 2] | 0;
  _pairing_apply($53 + 536 | 0, $53 + 512 | 0, (HEAP32[$msk >> 2] | 0) + 8 | 0, $53 + 4 | 0);
  STACKTOP = __stackBase__;
  return;
}
function _element_init_G1($e, $pairing) {
  $e = $e | 0;
  $pairing = $pairing | 0;
  _element_init($e, HEAP32[$pairing + 228 >> 2] | 0);
  return;
}
function _element_init_G2($e, $pairing) {
  $e = $e | 0;
  $pairing = $pairing | 0;
  _element_init($e, HEAP32[$pairing + 232 >> 2] | 0);
  return;
}
function _element_init_GT($e, $pairing) {
  $e = $e | 0;
  $pairing = $pairing | 0;
  _element_init($e, $pairing + 236 | 0);
  return;
}
function _element_init_Zr($e, $pairing) {
  $e = $e | 0;
  $pairing = $pairing | 0;
  _element_init($e, $pairing + 12 | 0);
  return;
}
function _element_random($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 128 >> 2] & 1023]($e);
  return;
}
function _element_pow_zn($x, $a, $n) {
  $x = $x | 0;
  $a = $a | 0;
  $n = $n | 0;
  var $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $1 = __stackBase__ | 0;
  ___gmpz_init($1);
  _element_to_mpz($1, $n);
  _element_pow_mpz($x, $a, $1);
  ___gmpz_clear($1);
  STACKTOP = __stackBase__;
  return;
}
function _pairing_apply($out, $in1, $in2, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $pairing = $pairing | 0;
  var $1 = 0, $2 = 0, $5 = 0, $6 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _element_is0($in1) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _element_set0($out);
    label = 6;
    break;
   case 3:
    $5 = _element_is0($in2) | 0;
    $6 = ($5 | 0) == 0;
    if ($6) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _element_set0($out);
    label = 6;
    break;
   case 5:
    $9 = $pairing + 468 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $out + 4 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12;
    FUNCTION_TABLE_viiii[$10 & 1023]($13, $in1, $in2, $pairing);
    label = 6;
    break;
   case 6:
    return;
  }
}
function _bswabe_keygen($pub, $msk, $attributes) {
  $pub = $pub | 0;
  $msk = $msk | 0;
  $attributes = $attributes | 0;
  var $g_r = 0, $r = 0, $beta_inv = 0, $c = 0, $h_rp = 0, $rp = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $_020 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $g_r = __stackBase__ | 0;
    $r = __stackBase__ + 8 | 0;
    $beta_inv = __stackBase__ + 16 | 0;
    $c = __stackBase__ + 24 | 0;
    $h_rp = __stackBase__ + 64 | 0;
    $rp = __stackBase__ + 72 | 0;
    $1 = _malloc(12) | 0;
    $2 = $1;
    $3 = $1;
    $4 = $pub + 4 | 0;
    _element_init_G2($3, $4);
    $5 = $g_r | 0;
    _element_init_G2($5, $4);
    $6 = $r | 0;
    _element_init_Zr($6, $4);
    $7 = $beta_inv | 0;
    _element_init_Zr($7, $4);
    $8 = _a_array_new(40) | 0;
    $9 = $1 + 8 | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $8;
    _element_random($6);
    $11 = $pub + 528 | 0;
    _element_pow_zn($5, $11, $6);
    $12 = $msk + 8 | 0;
    _element_mul($3, $12, $5);
    $13 = $msk | 0;
    _element_invert($7, $13);
    _element_pow_zn($3, $3, $7);
    $14 = HEAP32[$attributes >> 2] | 0;
    $15 = ($14 | 0) == 0;
    if ($15) {
      label = 4;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $16 = $c | 0;
    $17 = $c + 4 | 0;
    $18 = $c + 12 | 0;
    $19 = $h_rp | 0;
    $20 = $rp | 0;
    $21 = $pub + 512 | 0;
    $22 = $c;
    $_020 = $attributes;
    $24 = $14;
    label = 3;
    break;
   case 3:
    $25 = $_020 + 4 | 0;
    HEAP32[$16 >> 2] = $24;
    _element_init_G2($17, $4);
    _element_init_G1($18, $4);
    _element_init_G2($19, $4);
    _element_init_Zr($20, $4);
    $26 = HEAP32[$16 >> 2] | 0;
    _element_from_string($19, $26);
    _element_random($20);
    _element_pow_zn($19, $19, $20);
    _element_mul($17, $5, $19);
    _element_pow_zn($18, $21, $20);
    _element_clear($19);
    _element_clear($20);
    $27 = HEAP32[$10 >> 2] | 0;
    _a_array_append_val($27, $22);
    $28 = HEAP32[$25 >> 2] | 0;
    $29 = ($28 | 0) == 0;
    if ($29) {
      label = 4;
      break;
    } else {
      $_020 = $25;
      $24 = $28;
      label = 3;
      break;
    }
   case 4:
    STACKTOP = __stackBase__;
    return $2 | 0;
  }
  return 0;
}
function _element_mul($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 48 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_invert($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 120 >> 2] & 1023]($n, $a);
  return;
}
function _element_clear($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 8 >> 2] & 1023]($e);
  return;
}
function _base_node($k, $s) {
  $k = $k | 0;
  $s = $s | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _malloc(48) | 0;
    $2 = $1;
    $3 = $1;
    HEAP32[$3 >> 2] = $k;
    $4 = ($s | 0) == 0;
    if ($4) {
      $8 = 0;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $6 = _strdup($s | 0) | 0;
    $8 = $6;
    label = 3;
    break;
   case 3:
    $9 = $1 + 4 | 0;
    $10 = $9;
    HEAP32[$10 >> 2] = $8;
    $11 = _a_ptr_array_new() | 0;
    $12 = $1 + 24 | 0;
    $13 = $12;
    HEAP32[$13 >> 2] = $11;
    $14 = $1 + 28 | 0;
    $15 = $14;
    HEAP32[$15 >> 2] = 0;
    return $2 | 0;
  }
  return 0;
}
function _parse_policy_postfix($s) {
  $s = $s | 0;
  var $k = 0, $n = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $tok_038 = 0, $10 = 0, $11 = 0, $13 = 0, $tok_0_be = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $i_033_in = 0, $i_033 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $62 = 0, $63 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $k = __stackBase__ | 0;
    $n = __stackBase__ + 8 | 0;
    $1 = _strlen($s | 0) | 0;
    $2 = $1 + 1 | 0;
    $3 = _malloc($2) | 0;
    $4 = _strcpy($3 | 0, $s | 0) | 0;
    $5 = _strtok($3 | 0, 7464) | 0;
    $6 = _a_ptr_array_new() | 0;
    $7 = ($5 | 0) == 0;
    if ($7) {
      label = 20;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $8 = $6 + 4 | 0;
    $tok_038 = $5;
    label = 3;
    break;
   case 3:
    $10 = HEAP8[$tok_038] | 0;
    $11 = $10 << 24 >> 24 == 0;
    if ($11) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $13 = _strtok(0, 7464) | 0;
    $tok_0_be = $13;
    label = 5;
    break;
   case 5:
    $14 = ($tok_0_be | 0) == 0;
    if ($14) {
      label = 20;
      break;
    } else {
      $tok_038 = $tok_0_be;
      label = 3;
      break;
    }
   case 6:
    $16 = _sscanf($tok_038 | 0, 6744, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $k, HEAP32[tempInt + 8 >> 2] = $n, tempInt) | 0) | 0;
    $17 = ($16 | 0) == 2;
    if ($17) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $19 = _base_node(1, $tok_038) | 0;
    $20 = $19;
    _a_ptr_array_add($6, $20);
    label = 19;
    break;
   case 8:
    $22 = HEAP32[$k >> 2] | 0;
    $23 = ($22 | 0) < 1;
    if ($23) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _raise_error(6104, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $s, HEAP32[tempInt + 8 >> 2] = $tok_038, tempInt) | 0);
    $_0 = 0;
    label = 25;
    break;
   case 10:
    $26 = HEAP32[$n >> 2] | 0;
    $27 = ($22 | 0) > ($26 | 0);
    if ($27) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    _raise_error(5720, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $s, HEAP32[tempInt + 8 >> 2] = $tok_038, tempInt) | 0);
    $_0 = 0;
    label = 25;
    break;
   case 12:
    $30 = ($26 | 0) == 1;
    if ($30) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    _raise_error(5488, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $s, HEAP32[tempInt + 8 >> 2] = $tok_038, tempInt) | 0);
    $_0 = 0;
    label = 25;
    break;
   case 14:
    $33 = HEAP32[$8 >> 2] | 0;
    $34 = ($26 | 0) > ($33 | 0);
    if ($34) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    _raise_error(5288, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $s, HEAP32[tempInt + 8 >> 2] = $tok_038, tempInt) | 0);
    $_0 = 0;
    label = 25;
    break;
   case 16:
    $37 = _base_node($22, 0) | 0;
    $38 = $37 + 24 | 0;
    $39 = HEAP32[$38 >> 2] | 0;
    $40 = HEAP32[$n >> 2] | 0;
    _a_ptr_array_set_size($39, $40);
    $41 = HEAP32[$n >> 2] | 0;
    $42 = ($41 | 0) > 0;
    if ($42) {
      $i_033_in = $41;
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $i_033 = $i_033_in - 1 | 0;
    $43 = HEAP32[$38 >> 2] | 0;
    $44 = HEAP32[$8 >> 2] | 0;
    $45 = $44 - 1 | 0;
    $46 = _a_ptr_array_index($6, $45) | 0;
    _a_ptr_set($43, $i_033, $46);
    $47 = HEAP32[$8 >> 2] | 0;
    $48 = $47 - 1 | 0;
    $49 = _a_ptr_array_remove_index($6, $48) | 0;
    $50 = ($i_033 | 0) > 0;
    if ($50) {
      $i_033_in = $i_033;
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $51 = $37;
    _a_ptr_array_add($6, $51);
    label = 19;
    break;
   case 19:
    $53 = _strtok(0, 7464) | 0;
    $tok_0_be = $53;
    label = 5;
    break;
   case 20:
    $54 = $6 + 4 | 0;
    $55 = HEAP32[$54 >> 2] | 0;
    $56 = ($55 | 0) > 1;
    if ($56) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    _raise_error(4680, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $s, tempInt) | 0);
    $_0 = 0;
    label = 25;
    break;
   case 22:
    $59 = ($55 | 0) < 1;
    if ($59) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    _raise_error(4464, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $s, tempInt) | 0);
    $_0 = 0;
    label = 25;
    break;
   case 24:
    _free($3);
    $62 = _a_ptr_array_index($6, 0) | 0;
    $63 = $62;
    _a_ptr_array_free($6, 0);
    $_0 = $63;
    label = 25;
    break;
   case 25:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _rand_poly($deg, $zero_val) {
  $deg = $deg | 0;
  $zero_val = $zero_val | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $i_017 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $_lcssa = 0, $20 = 0, $21 = 0, $22 = 0, $i_116 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _malloc(8) | 0;
    $2 = $1;
    $3 = $1;
    HEAP32[$3 >> 2] = $deg;
    $4 = $deg << 3;
    $5 = $4 + 8 | 0;
    $6 = _malloc($5) | 0;
    $7 = $6;
    $8 = $1 + 4 | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $7;
    $10 = HEAP32[$3 >> 2] | 0;
    $11 = $10 + 1 | 0;
    $12 = ($11 | 0) > 0;
    if ($12) {
      $i_017 = 0;
      $13 = $7;
      label = 2;
      break;
    } else {
      $_lcssa = $7;
      label = 3;
      break;
    }
   case 2:
    $14 = $13 + ($i_017 << 3) | 0;
    _element_init_same_as($14, $zero_val);
    $15 = $i_017 + 1 | 0;
    $16 = HEAP32[$3 >> 2] | 0;
    $17 = $16 + 1 | 0;
    $18 = ($15 | 0) < ($17 | 0);
    $19 = HEAP32[$9 >> 2] | 0;
    if ($18) {
      $i_017 = $15;
      $13 = $19;
      label = 2;
      break;
    } else {
      $_lcssa = $19;
      label = 3;
      break;
    }
   case 3:
    $20 = $_lcssa | 0;
    _element_set($20, $zero_val);
    $21 = HEAP32[$3 >> 2] | 0;
    $22 = ($21 | 0) > 0;
    if ($22) {
      $i_116 = 1;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $23 = HEAP32[$9 >> 2] | 0;
    $24 = $23 + ($i_116 << 3) | 0;
    _element_random($24);
    $25 = $i_116 + 1 | 0;
    $26 = HEAP32[$3 >> 2] | 0;
    $27 = $26 + 1 | 0;
    $28 = ($25 | 0) < ($27 | 0);
    if ($28) {
      $i_116 = $25;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    return $2 | 0;
  }
  return 0;
}
function _element_init_same_as($e, $e2) {
  $e = $e | 0;
  $e2 = $e2 | 0;
  _element_init($e, HEAP32[$e2 >> 2] | 0);
  return;
}
function _element_set($e, $a) {
  $e = $e | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 20 >> 2] & 1023]($e, $a);
  return;
}
function _eval_poly($r, $q, $x) {
  $r = $r | 0;
  $q = $q | 0;
  $x = $x | 0;
  var $s = 0, $t = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i_010 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $s = __stackBase__ | 0;
    $t = __stackBase__ + 8 | 0;
    $1 = $s | 0;
    _element_init_same_as($1, $r);
    $2 = $t | 0;
    _element_init_same_as($2, $r);
    _element_set0($r);
    _element_set1($2);
    $3 = $q | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 + 1 | 0;
    $6 = ($5 | 0) > 0;
    if ($6) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $7 = $q + 4 | 0;
    $i_010 = 0;
    label = 3;
    break;
   case 3:
    $9 = HEAP32[$7 >> 2] | 0;
    $10 = $9 + ($i_010 << 3) | 0;
    _element_mul($1, $10, $2);
    _element_add($r, $r, $1);
    _element_mul($2, $2, $x);
    $11 = $i_010 + 1 | 0;
    $12 = HEAP32[$3 >> 2] | 0;
    $13 = $12 + 1 | 0;
    $14 = ($11 | 0) < ($13 | 0);
    if ($14) {
      $i_010 = $11;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _element_clear($1);
    _element_clear($2);
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_set0($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 24 >> 2] & 1023]($e);
  return;
}
function _element_set1($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 28 >> 2] & 1023]($e);
  return;
}
function _element_add($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 40 >> 2] & 1023]($n, $a, $b);
  return;
}
function _fill_policy($p, $pub, $e) {
  $p = $p | 0;
  $pub = $pub | 0;
  $e = $e | 0;
  var $r = 0, $t = 0, $h = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $i_024 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $r = __stackBase__ | 0;
    $t = __stackBase__ + 8 | 0;
    $h = __stackBase__ + 16 | 0;
    $1 = $r | 0;
    $2 = $pub + 4 | 0;
    _element_init_Zr($1, $2);
    $3 = $t | 0;
    _element_init_Zr($3, $2);
    $4 = $h | 0;
    _element_init_G2($4, $2);
    $5 = $p | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6 - 1 | 0;
    $8 = _rand_poly($7, $e) | 0;
    $9 = $p + 28 | 0;
    HEAP32[$9 >> 2] = $8;
    $10 = $p + 24 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $11 + 4 | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ($13 | 0) == 0;
    if ($14) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $15 = HEAP32[$10 >> 2] | 0;
    $16 = $15 + 4 | 0;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = ($17 | 0) > 0;
    if ($18) {
      $i_024 = 0;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $20 = $p + 8 | 0;
    _element_init_G1($20, $2);
    $21 = $p + 16 | 0;
    _element_init_G2($21, $2);
    $22 = $p + 4 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    _element_from_string($4, $23);
    $24 = $pub + 512 | 0;
    $25 = HEAP32[$9 >> 2] | 0;
    $26 = $25 + 4 | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = $27 | 0;
    _element_pow_zn($20, $24, $28);
    $29 = HEAP32[$9 >> 2] | 0;
    $30 = $29 + 4 | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = $31 | 0;
    _element_pow_zn($21, $4, $32);
    label = 5;
    break;
   case 4:
    $33 = $i_024 + 1 | 0;
    _element_set_si($1, $33);
    $34 = HEAP32[$9 >> 2] | 0;
    _eval_poly($3, $34, $1);
    $35 = HEAP32[$10 >> 2] | 0;
    $36 = _a_ptr_array_index($35, $i_024) | 0;
    $37 = $36;
    _fill_policy($37, $pub, $3);
    $38 = HEAP32[$10 >> 2] | 0;
    $39 = $38 + 4 | 0;
    $40 = HEAP32[$39 >> 2] | 0;
    $41 = ($33 | 0) < ($40 | 0);
    if ($41) {
      $i_024 = $33;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _element_clear($1);
    _element_clear($3);
    _element_clear($4);
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_set_si($e, $i) {
  $e = $e | 0;
  $i = $i | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 76 >> 2] & 1023]($e, $i);
  return;
}
function _unserialize_uint32($b, $offset) {
  $b = $b | 0;
  $offset = $offset | 0;
  var $1 = 0, $2 = 0, $3 = 0, $8 = 0, $15 = 0, $16 = 0, $23 = 0, $24 = 0;
  $1 = $b | 0;
  $2 = HEAP32[$offset >> 2] | 0;
  $3 = $2 + 1 | 0;
  HEAP32[$offset >> 2] = $3;
  $8 = (HEAPU8[(HEAP32[$1 >> 2] | 0) + $2 | 0] | 0) << 24;
  HEAP32[$offset >> 2] = $2 + 2 | 0;
  $15 = (HEAPU8[(HEAP32[$1 >> 2] | 0) + $3 | 0] | 0) << 16 | $8;
  $16 = HEAP32[$offset >> 2] | 0;
  HEAP32[$offset >> 2] = $16 + 1 | 0;
  $23 = (HEAPU8[(HEAP32[$1 >> 2] | 0) + $16 | 0] | 0) << 8 | $15;
  $24 = HEAP32[$offset >> 2] | 0;
  HEAP32[$offset >> 2] = $24 + 1 | 0;
  return HEAPU8[(HEAP32[$1 >> 2] | 0) + $24 | 0] | 0 | $23 | 0;
}
function _bswabe_enc($pub, $m, $policy) {
  $pub = $pub | 0;
  $m = $m | 0;
  $policy = $policy | 0;
  var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $10 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $1 = _malloc(20) | 0;
  $3 = __stackBase__ | 0;
  $4 = $pub + 4 | 0;
  _element_init_Zr($3, $4);
  _element_init_GT($m, $4);
  $5 = $1;
  _element_init_GT($5, $4);
  $7 = $1 + 8 | 0;
  _element_init_G1($7, $4);
  $10 = $1 + 16 | 0;
  HEAP32[$10 >> 2] = _parse_policy_postfix($policy) | 0;
  _element_random($m);
  _element_random($3);
  _element_pow_zn($5, $pub + 536 | 0, $3);
  _element_mul($5, $5, $m);
  _element_pow_zn($7, $pub + 520 | 0, $3);
  _fill_policy(HEAP32[$10 >> 2] | 0, $pub, $3);
  STACKTOP = __stackBase__;
  return $1 | 0;
}
function _check_sat($p, $prv) {
  $p = $p | 0;
  $prv = $prv | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $i_0 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $i_129 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $l_027 = 0, $i_226 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $not_ = 0, $49 = 0, $l_0_ = 0, $50 = 0, $51 = 0, $l_0_lcssa = 0, $52 = 0, $53 = 0, $54 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p + 32 | 0;
    HEAP32[$1 >> 2] = 0;
    $2 = $p + 24 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $3 + 4 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($5 | 0) == 0;
    if ($6) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $7 = HEAP32[$2 >> 2] | 0;
    $8 = $7 + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ($9 | 0) > 0;
    if ($10) {
      $i_129 = 0;
      $35 = $7;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    $11 = $prv + 8 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 + 4 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $p + 4 | 0;
    $i_0 = 0;
    label = 4;
    break;
   case 4:
    $17 = ($i_0 | 0) < ($14 | 0);
    if ($17) {
      label = 5;
      break;
    } else {
      label = 13;
      break;
    }
   case 5:
    $19 = _a_array_index($12, $i_0) | 0;
    $20 = $19;
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = HEAP32[$15 >> 2] | 0;
    $23 = _strcmp($21 | 0, $22 | 0) | 0;
    $24 = ($23 | 0) == 0;
    $25 = $i_0 + 1 | 0;
    if ($24) {
      label = 6;
      break;
    } else {
      $i_0 = $25;
      label = 4;
      break;
    }
   case 6:
    HEAP32[$1 >> 2] = 1;
    $27 = $p + 40 | 0;
    HEAP32[$27 >> 2] = $i_0;
    label = 13;
    break;
   case 7:
    $28 = HEAP32[$2 >> 2] | 0;
    $29 = $28 + 4 | 0;
    $30 = HEAP32[$29 >> 2] | 0;
    $31 = ($30 | 0) > 0;
    if ($31) {
      label = 8;
      break;
    } else {
      $l_0_lcssa = 0;
      label = 11;
      break;
    }
   case 8:
    $32 = HEAP32[$2 >> 2] | 0;
    $33 = $32 + 4 | 0;
    $34 = HEAP32[$33 >> 2] | 0;
    $i_226 = 0;
    $l_027 = 0;
    $44 = $28;
    label = 10;
    break;
   case 9:
    $36 = _a_ptr_array_index($35, $i_129) | 0;
    $37 = $36;
    _check_sat($37, $prv);
    $38 = $i_129 + 1 | 0;
    $39 = HEAP32[$2 >> 2] | 0;
    $40 = $39 + 4 | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    $42 = ($38 | 0) < ($41 | 0);
    if ($42) {
      $i_129 = $38;
      $35 = $39;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 10:
    $45 = _a_ptr_array_index($44, $i_226) | 0;
    $46 = $45 + 32 | 0;
    $47 = $46;
    $48 = HEAP32[$47 >> 2] | 0;
    $not_ = ($48 | 0) != 0;
    $49 = $not_ & 1;
    $l_0_ = $49 + $l_027 | 0;
    $50 = $i_226 + 1 | 0;
    $51 = ($50 | 0) < ($34 | 0);
    if ($51) {
      $i_226 = $50;
      $l_027 = $l_0_;
      $44 = $32;
      label = 10;
      break;
    } else {
      $l_0_lcssa = $l_0_;
      label = 11;
      break;
    }
   case 11:
    $52 = $p | 0;
    $53 = HEAP32[$52 >> 2] | 0;
    $54 = ($l_0_lcssa | 0) < ($53 | 0);
    if ($54) {
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    HEAP32[$1 >> 2] = 1;
    label = 13;
    break;
   case 13:
    return;
  }
}
function _cmp_int($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $not_ = 0, $18 = 0, $20 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP32[1010] | 0;
    $2 = $1 + 24 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $a;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = _a_ptr_array_index($3, $5) | 0;
    $7 = $6 + 36 | 0;
    $8 = $7;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $b;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = _a_ptr_array_index($3, $11) | 0;
    $13 = $12 + 36 | 0;
    $14 = $13;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = ($9 | 0) < ($15 | 0);
    if ($16) {
      $20 = -1;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $not_ = ($9 | 0) != ($15 | 0);
    $18 = $not_ & 1;
    $20 = $18;
    label = 3;
    break;
   case 3:
    return $20 | 0;
  }
  return 0;
}
function _pick_sat_min_leaves($p, $prv) {
  $p = $p | 0;
  $prv = $prv | 0;
  var $k = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $i_038 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $_lcssa = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $i_136 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $i_235 = 0, $l_034 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $l_1 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $k = __stackBase__ | 0;
    $1 = $p + 24 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $6 = HEAP32[$1 >> 2] | 0;
    $7 = $6 + 4 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($8 | 0) > 0;
    if ($9) {
      $i_038 = 0;
      $12 = $6;
      label = 4;
      break;
    } else {
      $_lcssa = $8;
      label = 7;
      break;
    }
   case 3:
    $11 = $p + 36 | 0;
    HEAP32[$11 >> 2] = 1;
    label = 15;
    break;
   case 4:
    $13 = _a_ptr_array_index($12, $i_038) | 0;
    $14 = $13 + 32 | 0;
    $15 = $14;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = ($16 | 0) == 0;
    if ($17) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $19 = $13;
    _pick_sat_min_leaves($19, $prv);
    label = 6;
    break;
   case 6:
    $21 = $i_038 + 1 | 0;
    $22 = HEAP32[$1 >> 2] | 0;
    $23 = $22 + 4 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = ($21 | 0) < ($24 | 0);
    if ($25) {
      $i_038 = $21;
      $12 = $22;
      label = 4;
      break;
    } else {
      $_lcssa = $24;
      label = 7;
      break;
    }
   case 7:
    $26 = $_lcssa << 2;
    $27 = STACKTOP;
    STACKTOP = STACKTOP + $26 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $28 = $27;
    $29 = HEAP32[$1 >> 2] | 0;
    $30 = $29 + 4 | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = ($31 | 0) > 0;
    if ($32) {
      $i_136 = 0;
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $33 = $28 + ($i_136 << 2) | 0;
    HEAP32[$33 >> 2] = $i_136;
    $34 = $i_136 + 1 | 0;
    $35 = HEAP32[$1 >> 2] | 0;
    $36 = $35 + 4 | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    $38 = ($34 | 0) < ($37 | 0);
    if ($38) {
      $i_136 = $34;
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    HEAP32[1010] = $p;
    $39 = HEAP32[$1 >> 2] | 0;
    $40 = $39 + 4 | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    _qsort($27 | 0, $41 | 0, 4, 324);
    $42 = _a_array_new(4) | 0;
    $43 = $p + 44 | 0;
    HEAP32[$43 >> 2] = $42;
    $44 = $p + 36 | 0;
    HEAP32[$44 >> 2] = 0;
    $45 = $p | 0;
    $46 = HEAP32[$1 >> 2] | 0;
    $47 = $46 + 4 | 0;
    $48 = HEAP32[$47 >> 2] | 0;
    $49 = ($48 | 0) > 0;
    if ($49) {
      label = 10;
      break;
    } else {
      label = 15;
      break;
    }
   case 10:
    $50 = $k;
    $l_034 = 0;
    $i_235 = 0;
    $52 = $46;
    label = 11;
    break;
   case 11:
    $53 = HEAP32[$45 >> 2] | 0;
    $54 = ($l_034 | 0) < ($53 | 0);
    if ($54) {
      label = 12;
      break;
    } else {
      label = 15;
      break;
    }
   case 12:
    $56 = $28 + ($i_235 << 2) | 0;
    $57 = HEAP32[$56 >> 2] | 0;
    $58 = _a_ptr_array_index($52, $57) | 0;
    $59 = $58 + 32 | 0;
    $60 = $59;
    $61 = HEAP32[$60 >> 2] | 0;
    $62 = ($61 | 0) == 0;
    if ($62) {
      $l_1 = $l_034;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $64 = $l_034 + 1 | 0;
    $65 = $58 + 36 | 0;
    $66 = $65;
    $67 = HEAP32[$66 >> 2] | 0;
    $68 = HEAP32[$44 >> 2] | 0;
    $69 = $68 + $67 | 0;
    HEAP32[$44 >> 2] = $69;
    $70 = HEAP32[$56 >> 2] | 0;
    $71 = $70 + 1 | 0;
    HEAP32[$k >> 2] = $71;
    $72 = HEAP32[$43 >> 2] | 0;
    _a_array_append_val($72, $50);
    $l_1 = $64;
    label = 14;
    break;
   case 14:
    $74 = $i_235 + 1 | 0;
    $75 = HEAP32[$1 >> 2] | 0;
    $76 = $75 + 4 | 0;
    $77 = HEAP32[$76 >> 2] | 0;
    $78 = ($74 | 0) < ($77 | 0);
    if ($78) {
      $l_034 = $l_1;
      $i_235 = $74;
      $52 = $75;
      label = 11;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    STACKTOP = __stackBase__;
    return;
  }
}
function _lagrange_coef($r, $s, $i) {
  $r = $r | 0;
  $s = $s | 0;
  $i = $i | 0;
  var $t = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $k_014 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $t = __stackBase__ | 0;
    $1 = $t | 0;
    _element_init_same_as($1, $r);
    _element_set1($r);
    $2 = $s + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($3 | 0) > 0;
    if ($4) {
      $k_014 = 0;
      label = 2;
      break;
    } else {
      label = 5;
      break;
    }
   case 2:
    $5 = _a_array_index($s, $k_014) | 0;
    $6 = $5;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($7 | 0) == ($i | 0);
    if ($8) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $10 = -$7 | 0;
    _element_set_si($1, $10);
    _element_mul($r, $r, $1);
    $11 = $i - $7 | 0;
    _element_set_si($1, $11);
    _element_invert($1, $1);
    _element_mul($r, $r, $1);
    label = 4;
    break;
   case 4:
    $13 = $k_014 + 1 | 0;
    $14 = HEAP32[$2 >> 2] | 0;
    $15 = ($13 | 0) < ($14 | 0);
    if ($15) {
      $k_014 = $13;
      label = 2;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _element_clear($1);
    STACKTOP = __stackBase__;
    return;
  }
}
function _dec_leaf_flatten($r, $exp, $p, $prv, $pub) {
  $r = $r | 0;
  $exp = $exp | 0;
  $p = $p | 0;
  $prv = $prv | 0;
  $pub = $pub | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $5 = _a_array_index(HEAP32[$prv + 8 >> 2] | 0, HEAP32[$p + 40 >> 2] | 0) | 0;
  $6 = __stackBase__ | 0;
  $7 = $pub + 4 | 0;
  _element_init_GT($6, $7);
  $8 = __stackBase__ + 8 | 0;
  _element_init_GT($8, $7);
  _pairing_apply($6, $p + 8 | 0, $5 + 4 | 0, $7);
  _pairing_apply($8, $p + 16 | 0, $5 + 12 | 0, $7);
  _element_invert($8, $8);
  _element_mul($6, $6, $8);
  _element_pow_zn($6, $6, $exp);
  _element_mul($r, $r, $6);
  _element_clear($6);
  _element_clear($8);
  STACKTOP = __stackBase__;
  return;
}
function _dec_internal_flatten($r, $exp, $p, $prv, $pub) {
  $r = $r | 0;
  $exp = $exp | 0;
  $p = $p | 0;
  $prv = $prv | 0;
  $pub = $pub | 0;
  var $t = 0, $expnew = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $i_014 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $t = __stackBase__ | 0;
    $expnew = __stackBase__ + 8 | 0;
    $1 = $t | 0;
    $2 = $pub + 4 | 0;
    _element_init_Zr($1, $2);
    $3 = $expnew | 0;
    _element_init_Zr($3, $2);
    $4 = $p + 44 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $5 + 4 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($7 | 0) > 0;
    if ($8) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $9 = $p + 24 | 0;
    $i_014 = 0;
    $11 = $5;
    label = 3;
    break;
   case 3:
    $12 = _a_array_index($11, $i_014) | 0;
    $13 = $12;
    $14 = HEAP32[$13 >> 2] | 0;
    _lagrange_coef($1, $11, $14);
    _element_mul($3, $exp, $1);
    $15 = HEAP32[$9 >> 2] | 0;
    $16 = HEAP32[$4 >> 2] | 0;
    $17 = _a_array_index($16, $i_014) | 0;
    $18 = $17;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $19 - 1 | 0;
    $21 = _a_ptr_array_index($15, $20) | 0;
    $22 = $21;
    _dec_node_flatten($r, $3, $22, $prv, $pub);
    $23 = $i_014 + 1 | 0;
    $24 = HEAP32[$4 >> 2] | 0;
    $25 = $24 + 4 | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = ($23 | 0) < ($26 | 0);
    if ($27) {
      $i_014 = $23;
      $11 = $24;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _element_clear($1);
    _element_clear($3);
    STACKTOP = __stackBase__;
    return;
  }
}
function _dec_node_flatten($r, $exp, $p, $prv, $pub) {
  $r = $r | 0;
  $exp = $exp | 0;
  $p = $p | 0;
  $prv = $prv | 0;
  $pub = $pub | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p + 24 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _dec_leaf_flatten($r, $exp, $p, $prv, $pub);
    label = 4;
    break;
   case 3:
    _dec_internal_flatten($r, $exp, $p, $prv, $pub);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _dec_flatten($r, $p, $prv, $pub) {
  $r = $r | 0;
  $p = $p | 0;
  $prv = $prv | 0;
  $pub = $pub | 0;
  var $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $1 = __stackBase__ | 0;
  _element_init_Zr($1, $pub + 4 | 0);
  _element_set1($1);
  _element_set1($r);
  _dec_node_flatten($r, $1, $p, $prv, $pub);
  _element_clear($1);
  STACKTOP = __stackBase__;
  return;
}
function _bswabe_dec($pub, $prv, $cph, $m) {
  $pub = $pub | 0;
  $prv = $prv | 0;
  $cph = $cph | 0;
  $m = $m | 0;
  var $t = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $t = __stackBase__ | 0;
    $1 = $pub + 4 | 0;
    _element_init_GT($m, $1);
    $2 = $t | 0;
    _element_init_GT($2, $1);
    $3 = $cph + 16 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    _check_sat($4, $prv);
    $5 = HEAP32[$3 >> 2] | 0;
    $6 = $5 + 32 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($7 | 0) == 0;
    if ($8) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _raise_error(4288, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    $_0 = 0;
    label = 4;
    break;
   case 3:
    _pick_sat_min_leaves($5, $prv);
    $11 = HEAP32[$3 >> 2] | 0;
    _dec_flatten($2, $11, $prv, $pub);
    $12 = $cph | 0;
    _element_mul($m, $12, $2);
    $13 = $cph + 8 | 0;
    $14 = $prv | 0;
    _pairing_apply($2, $13, $14, $1);
    _element_invert($2, $2);
    _element_mul($m, $m, $2);
    $_0 = 1;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _element_init($e, $f) {
  $e = $e | 0;
  $f = $f | 0;
  HEAP32[$e >> 2] = $f;
  FUNCTION_TABLE_vi[HEAP32[$f + 4 >> 2] & 1023]($e);
  return;
}
function _element_is0($n) {
  $n = $n | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$n >> 2] | 0) + 140 >> 2] & 1023]($n) | 0;
}
function _element_to_mpz($z, $e) {
  $z = $z | 0;
  $e = $e | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 172 >> 2] & 1023]($z, $e);
  return;
}
function _element_pow_mpz($x, $a, $n) {
  $x = $x | 0;
  $a = $a | 0;
  $n = $n | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$x >> 2] | 0) + 116 >> 2] & 1023]($x, $a, $n);
  return;
}
function _serialize_uint32($b, $k) {
  $b = $b | 0;
  $k = $k | 0;
  var $byte = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $byte = __stackBase__ | 0;
  HEAP8[$byte] = $k >>> 24 & 255;
  _a_byte_array_append($b, $byte, 1);
  HEAP8[$byte] = $k >>> 16 & 255;
  _a_byte_array_append($b, $byte, 1);
  HEAP8[$byte] = $k >>> 8 & 255;
  _a_byte_array_append($b, $byte, 1);
  HEAP8[$byte] = $k & 255;
  _a_byte_array_append($b, $byte, 1);
  STACKTOP = __stackBase__;
  return;
}
function _serialize_element($b, $e) {
  $b = $b | 0;
  $e = $e | 0;
  var $1 = 0, $2 = 0;
  $1 = _element_length_in_bytes98($e) | 0;
  _serialize_uint32($b, $1);
  $2 = _malloc($1) | 0;
  _element_to_bytes99($2, $e);
  _a_byte_array_append($b, $2, $1);
  _free($2);
  return;
}
function _element_length_in_bytes98($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 164 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) < 0;
    if ($5) {
      label = 2;
      break;
    } else {
      $_0 = $4;
      label = 3;
      break;
    }
   case 2:
    $7 = $2 + 160 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = FUNCTION_TABLE_ii[$8 & 1023]($e) | 0;
    $_0 = $9;
    label = 3;
    break;
   case 3:
    return $_0 | 0;
  }
  return 0;
}
function _element_to_bytes99($data, $e) {
  $data = $data | 0;
  $e = $e | 0;
  FUNCTION_TABLE_iii[HEAP32[(HEAP32[$e >> 2] | 0) + 152 >> 2] & 1023]($data, $e);
  return;
}
function _unserialize_element($b, $offset, $e) {
  $b = $b | 0;
  $offset = $offset | 0;
  $e = $e | 0;
  var $1 = 0, $2 = 0;
  $1 = _unserialize_uint32($b, $offset) | 0;
  $2 = _malloc($1) | 0;
  _memcpy($2 | 0, (HEAP32[$b >> 2] | 0) + (HEAP32[$offset >> 2] | 0) | 0, $1);
  HEAP32[$offset >> 2] = (HEAP32[$offset >> 2] | 0) + $1 | 0;
  _element_from_bytes($e, $2);
  _free($2);
  return;
}
function _element_from_bytes($e, $data) {
  $e = $e | 0;
  $data = $data | 0;
  FUNCTION_TABLE_iii[HEAP32[(HEAP32[$e >> 2] | 0) + 156 >> 2] & 1023]($e, $data);
  return;
}
function _serialize_string($b, $s) {
  $b = $b | 0;
  $s = $s | 0;
  _a_byte_array_append($b, $s, (_strlen($s | 0) | 0) + 1 | 0);
  return;
}
function _unserialize_string($b, $offset) {
  $b = $b | 0;
  $offset = $offset | 0;
  var $c = 0, $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $c = __stackBase__ | 0;
    $1 = _a_byte_array_new() | 0;
    $2 = $b | 0;
    label = 2;
    break;
   case 2:
    $4 = HEAP32[$offset >> 2] | 0;
    $5 = $4 + 1 | 0;
    HEAP32[$offset >> 2] = $5;
    $6 = HEAP32[$2 >> 2] | 0;
    $7 = $6 + $4 | 0;
    $8 = HEAP8[$7] | 0;
    HEAP8[$c] = $8;
    if (($8 << 24 >> 24 | 0) == 0 | ($8 << 24 >> 24 | 0) == (-1 | 0)) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _a_byte_array_append($1, $c, 1);
    label = 2;
    break;
   case 4:
    HEAP8[$c] = 0;
    _a_byte_array_append($1, $c, 1);
    $11 = $1 + 4 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = _malloc($12) | 0;
    $14 = $1 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = HEAP32[$11 >> 2] | 0;
    _memcpy($13 | 0, $15 | 0, $16);
    _a_byte_array_free($1, 0);
    STACKTOP = __stackBase__;
    return $13 | 0;
  }
  return 0;
}
function _bswabe_pub_serialize($pub) {
  $pub = $pub | 0;
  var $1 = 0;
  $1 = _a_byte_array_new() | 0;
  _serialize_string($1, HEAP32[$pub >> 2] | 0);
  _serialize_element($1, $pub + 512 | 0);
  _serialize_element($1, $pub + 520 | 0);
  _serialize_element($1, $pub + 528 | 0);
  _serialize_element($1, $pub + 536 | 0);
  return $1 | 0;
}
function _bswabe_pub_unserialize($b, $free) {
  $b = $b | 0;
  $free = $free | 0;
  var $offset = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $offset = __stackBase__ | 0;
    $1 = _malloc(544) | 0;
    $2 = $1;
    HEAP32[$offset >> 2] = 0;
    $3 = _unserialize_string($b, $offset) | 0;
    $4 = $1;
    HEAP32[$4 >> 2] = $3;
    $5 = $1 + 4 | 0;
    $6 = $5;
    $7 = _strlen($3 | 0) | 0;
    $8 = $5;
    $9 = _pairing_init_set_buf($8, $3, $7) | 0;
    $10 = $1 + 512 | 0;
    $11 = $10;
    _element_init_G11($11, $6);
    $12 = $1 + 520 | 0;
    $13 = $12;
    _element_init_G11($13, $6);
    $14 = $1 + 528 | 0;
    $15 = $14;
    _element_init_G22($15, $6);
    $16 = $1 + 536 | 0;
    $17 = $16;
    _element_init_GT3($17, $6);
    _unserialize_element($b, $offset, $11);
    _unserialize_element($b, $offset, $13);
    _unserialize_element($b, $offset, $15);
    _unserialize_element($b, $offset, $17);
    $18 = ($free | 0) == 0;
    if ($18) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _a_byte_array_free($b, 1);
    label = 3;
    break;
   case 3:
    STACKTOP = __stackBase__;
    return $2 | 0;
  }
  return 0;
}
function _element_init_G11($e, $pairing) {
  $e = $e | 0;
  $pairing = $pairing | 0;
  _element_init6($e, HEAP32[$pairing + 228 >> 2] | 0);
  return;
}
function _element_init_G22($e, $pairing) {
  $e = $e | 0;
  $pairing = $pairing | 0;
  _element_init6($e, HEAP32[$pairing + 232 >> 2] | 0);
  return;
}
function _element_init_GT3($e, $pairing) {
  $e = $e | 0;
  $pairing = $pairing | 0;
  _element_init6($e, $pairing + 236 | 0);
  return;
}
function _bswabe_msk_serialize($msk) {
  $msk = $msk | 0;
  var $1 = 0;
  $1 = _a_byte_array_new() | 0;
  _serialize_element($1, $msk | 0);
  _serialize_element($1, $msk + 8 | 0);
  return $1 | 0;
}
function _bswabe_msk_unserialize($pub, $b, $free) {
  $pub = $pub | 0;
  $b = $b | 0;
  $free = $free | 0;
  var $offset = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $offset = __stackBase__ | 0;
    $1 = _malloc(16) | 0;
    $2 = $1;
    HEAP32[$offset >> 2] = 0;
    $3 = $1;
    $4 = $pub + 4 | 0;
    _element_init_Zr4($3, $4);
    $5 = $1 + 8 | 0;
    $6 = $5;
    _element_init_G22($6, $4);
    _unserialize_element($b, $offset, $3);
    _unserialize_element($b, $offset, $6);
    $7 = ($free | 0) == 0;
    if ($7) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _a_byte_array_free($b, 1);
    label = 3;
    break;
   case 3:
    STACKTOP = __stackBase__;
    return $2 | 0;
  }
  return 0;
}
function _element_init_Zr4($e, $pairing) {
  $e = $e | 0;
  $pairing = $pairing | 0;
  _element_init6($e, $pairing + 12 | 0);
  return;
}
function _bswabe_prv_serialize($prv) {
  $prv = $prv | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $i_014 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _a_byte_array_new() | 0;
    $2 = $prv | 0;
    _serialize_element($1, $2);
    $3 = $prv + 8 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    _serialize_uint32($1, $6);
    $7 = HEAP32[$3 >> 2] | 0;
    $8 = $7 + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ($9 | 0) > 0;
    if ($10) {
      $i_014 = 0;
      $11 = $7;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $12 = _a_array_index($11, $i_014) | 0;
    $13 = $12;
    $14 = HEAP32[$13 >> 2] | 0;
    _serialize_string($1, $14);
    $15 = HEAP32[$3 >> 2] | 0;
    $16 = _a_array_index($15, $i_014) | 0;
    $17 = $16 + 4 | 0;
    $18 = $17;
    _serialize_element($1, $18);
    $19 = HEAP32[$3 >> 2] | 0;
    $20 = _a_array_index($19, $i_014) | 0;
    $21 = $20 + 12 | 0;
    $22 = $21;
    _serialize_element($1, $22);
    $23 = $i_014 + 1 | 0;
    $24 = HEAP32[$3 >> 2] | 0;
    $25 = $24 + 4 | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = ($23 | 0) < ($26 | 0);
    if ($27) {
      $i_014 = $23;
      $11 = $24;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    return $1 | 0;
  }
  return 0;
}
function _bswabe_prv_unserialize($pub, $b, $free) {
  $pub = $pub | 0;
  $b = $b | 0;
  $free = $free | 0;
  var $offset = 0, $c = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $i_015 = 0, $15 = 0, $16 = 0, $17 = 0, $exitcond = 0, $18 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $offset = __stackBase__ | 0;
    $c = __stackBase__ + 8 | 0;
    $1 = _malloc(12) | 0;
    $2 = $1;
    HEAP32[$offset >> 2] = 0;
    $3 = $1;
    $4 = $pub + 4 | 0;
    _element_init_G22($3, $4);
    _unserialize_element($b, $offset, $3);
    $5 = _a_array_new(40) | 0;
    $6 = $1 + 8 | 0;
    $7 = $6;
    HEAP32[$7 >> 2] = $5;
    $8 = _unserialize_uint32($b, $offset) | 0;
    $9 = ($8 | 0) > 0;
    if ($9) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $10 = $c | 0;
    $11 = $c + 4 | 0;
    $12 = $c + 12 | 0;
    $13 = $c;
    $i_015 = 0;
    label = 3;
    break;
   case 3:
    $15 = _unserialize_string($b, $offset) | 0;
    HEAP32[$10 >> 2] = $15;
    _element_init_G22($11, $4);
    _element_init_G22($12, $4);
    _unserialize_element($b, $offset, $11);
    _unserialize_element($b, $offset, $12);
    $16 = HEAP32[$7 >> 2] | 0;
    _a_array_append_val($16, $13);
    $17 = $i_015 + 1 | 0;
    $exitcond = ($17 | 0) == ($8 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_015 = $17;
      label = 3;
      break;
    }
   case 4:
    $18 = ($free | 0) == 0;
    if ($18) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _a_byte_array_free($b, 1);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return $2 | 0;
  }
  return 0;
}
function _serialize_policy($b, $p) {
  $b = $b | 0;
  $p = $p | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $i_016 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    _serialize_uint32($b, $2);
    $3 = $p + 24 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    _serialize_uint32($b, $6);
    $7 = HEAP32[$3 >> 2] | 0;
    $8 = $7 + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ($9 | 0) == 0;
    if ($10) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $11 = HEAP32[$3 >> 2] | 0;
    $12 = $11 + 4 | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ($13 | 0) > 0;
    if ($14) {
      $i_016 = 0;
      $20 = $11;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $16 = $p + 4 | 0;
    $17 = HEAP32[$16 >> 2] | 0;
    _serialize_string($b, $17);
    $18 = $p + 8 | 0;
    _serialize_element($b, $18);
    $19 = $p + 16 | 0;
    _serialize_element($b, $19);
    label = 5;
    break;
   case 4:
    $21 = _a_ptr_array_index($20, $i_016) | 0;
    $22 = $21;
    _serialize_policy($b, $22);
    $23 = $i_016 + 1 | 0;
    $24 = HEAP32[$3 >> 2] | 0;
    $25 = $24 + 4 | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = ($23 | 0) < ($26 | 0);
    if ($27) {
      $i_016 = $23;
      $20 = $24;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    return;
  }
}
function _unserialize_policy($pub, $b, $offset) {
  $pub = $pub | 0;
  $b = $b | 0;
  $offset = $offset | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $i_026 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _malloc(48) | 0;
    $2 = $1;
    $3 = _unserialize_uint32($b, $offset) | 0;
    $4 = $1;
    HEAP32[$4 >> 2] = $3;
    $5 = $1 + 4 | 0;
    $6 = $5;
    HEAP32[$6 >> 2] = 0;
    $7 = _a_ptr_array_new() | 0;
    $8 = $1 + 24 | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $7;
    $10 = _unserialize_uint32($b, $offset) | 0;
    $11 = ($10 | 0) == 0;
    if ($11) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $12 = ($10 | 0) > 0;
    if ($12) {
      $i_026 = 0;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $14 = _unserialize_string($b, $offset) | 0;
    HEAP32[$6 >> 2] = $14;
    $15 = $1 + 8 | 0;
    $16 = $15;
    $17 = $pub + 4 | 0;
    _element_init_G11($16, $17);
    $18 = $1 + 16 | 0;
    $19 = $18;
    _element_init_G11($19, $17);
    _unserialize_element($b, $offset, $16);
    _unserialize_element($b, $offset, $19);
    label = 5;
    break;
   case 4:
    $20 = HEAP32[$9 >> 2] | 0;
    $21 = _unserialize_policy($pub, $b, $offset) | 0;
    $22 = $21;
    _a_ptr_array_add($20, $22);
    $23 = $i_026 + 1 | 0;
    $exitcond = ($23 | 0) == ($10 | 0);
    if ($exitcond) {
      label = 5;
      break;
    } else {
      $i_026 = $23;
      label = 4;
      break;
    }
   case 5:
    return $2 | 0;
  }
  return 0;
}
function _bswabe_cph_serialize($cph) {
  $cph = $cph | 0;
  var $1 = 0;
  $1 = _a_byte_array_new() | 0;
  _serialize_element($1, $cph | 0);
  _serialize_element($1, $cph + 8 | 0);
  _serialize_policy($1, HEAP32[$cph + 16 >> 2] | 0);
  return $1 | 0;
}
function _bswabe_cph_unserialize($pub, $b, $free) {
  $pub = $pub | 0;
  $b = $b | 0;
  $free = $free | 0;
  var $offset = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $offset = __stackBase__ | 0;
    $1 = _malloc(20) | 0;
    $2 = $1;
    HEAP32[$offset >> 2] = 0;
    $3 = $1;
    $4 = $pub + 4 | 0;
    _element_init_GT3($3, $4);
    $5 = $1 + 8 | 0;
    $6 = $5;
    _element_init_G11($6, $4);
    _unserialize_element($b, $offset, $3);
    _unserialize_element($b, $offset, $6);
    $7 = _unserialize_policy($pub, $b, $offset) | 0;
    $8 = $1 + 16 | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $7;
    $10 = ($free | 0) == 0;
    if ($10) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _a_byte_array_free($b, 1);
    label = 3;
    break;
   case 3:
    STACKTOP = __stackBase__;
    return $2 | 0;
  }
  return 0;
}
function _element_init6($e, $f) {
  $e = $e | 0;
  $f = $f | 0;
  HEAP32[$e >> 2] = $f;
  FUNCTION_TABLE_vi[HEAP32[$f + 4 >> 2] & 1023]($e);
  return;
}
function ___gmpf_set_si($dest, $val) {
  $dest = $dest | 0;
  $val = $val | 0;
  var $1 = 0, $6 = 0;
  $1 = ($val | 0) > -1;
  HEAP32[HEAP32[$dest + 12 >> 2] >> 2] = $1 ? $val : -$val | 0;
  $6 = ($val | 0) != 0 & 1;
  HEAP32[$dest + 8 >> 2] = $6;
  HEAP32[$dest + 4 >> 2] = $1 ? $6 : -$6 | 0;
  return;
}
function ___gmp_assert_header($filename, $linenum) {
  $filename = $filename | 0;
  $linenum = $linenum | 0;
  var $1 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($filename | 0) == 0;
    if ($1) {
      label = 5;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = HEAP8[$filename] | 0;
    $4 = $3 << 24 >> 24 == 0;
    if ($4) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $6 = HEAP32[_stderr >> 2] | 0;
    $7 = _fprintf($6 | 0, 8792, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $filename, tempInt) | 0) | 0;
    $8 = ($linenum | 0) == -1;
    if ($8) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $10 = HEAP32[_stderr >> 2] | 0;
    $11 = _fprintf($10 | 0, 8864, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $linenum, tempInt) | 0) | 0;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmp_default_free($blk_ptr, $blk_size) {
  $blk_ptr = $blk_ptr | 0;
  $blk_size = $blk_size | 0;
  _free($blk_ptr);
  return;
}
function ___gmp_tmp_reentrant_alloc($markp, $size) {
  $markp = $markp | 0;
  $size = $size | 0;
  var $1 = 0, $3 = 0;
  $1 = $size + 8 | 0;
  $3 = FUNCTION_TABLE_ii[HEAP32[3962] & 1023]($1) | 0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 >> 2] = HEAP32[$markp >> 2] | 0;
  HEAP32[$markp >> 2] = $3;
  return $3 + 8 | 0;
}
function ___gmp_tmp_reentrant_free($mark) {
  $mark = $mark | 0;
  var $1 = 0, $_04 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($mark | 0) == 0;
    if ($1) {
      label = 3;
      break;
    } else {
      $_04 = $mark;
      label = 2;
      break;
    }
   case 2:
    $2 = $_04 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = HEAP32[3802] | 0;
    $5 = $_04;
    $6 = $_04 + 4 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    FUNCTION_TABLE_vii[$4 & 1023]($5, $7);
    $8 = ($3 | 0) == 0;
    if ($8) {
      label = 3;
      break;
    } else {
      $_04 = $3;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function ___gmpf_get_str($dbuf, $exp, $base, $n_digits, $u) {
  $dbuf = $dbuf | 0;
  $exp = $exp | 0;
  $base = $base | 0;
  $n_digits = $n_digits | 0;
  $u = $u | 0;
  var $__tmp_marker = 0, $ign = 0, $ign26 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $num_to_text_0 = 0, $_1222 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $uadd$0 = 0, $uadd$1 = 0, $39 = 0, $40 = 0, $41 = 0, $__x3_0 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $or_cond = 0, $_0223 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $alloc_size_0 = 0, $_0220 = 0, $53 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $uadd225$0 = 0, $uadd225$1 = 0, $76 = 0, $77 = 0, $78 = 0, $__x35_0 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $uadd228$0 = 0, $uadd228$1 = 0, $100 = 0, $101 = 0, $102 = 0, $__x317_0 = 0, $103 = 0, $104 = 0, $105 = 0, $107 = 0, $108 = 0, $un_0 = 0, $up_0 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $118 = 0, $_in = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $142 = 0, $144 = 0, $_sum229 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $_sum230 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $scevgep248 = 0, $__n_0 = 0, $__dst_0 = 0, $__src_0 = 0, $__x_0 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $scevgep248249 = 0, $__dst_1 = 0, $__x_1 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $167 = 0, $off_0 = 0, $tn_0 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $uadd226$0 = 0, $uadd226$1 = 0, $188 = 0, $189 = 0, $190 = 0, $__x334_0 = 0, $191 = 0, $192 = 0, $193 = 0, $195 = 0, $196 = 0, $un_1 = 0, $up_1 = 0, $198 = 0, $199 = 0, $200 = 0, $202 = 0, $203 = 0, $205 = 0, $206 = 0, $_in231 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $218 = 0, $220 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $230 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $scevgep = 0, $__n43_0 = 0, $__dst44_0 = 0, $up_1_pn = 0, $__x46_0 = 0, $__src45_0 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $scevgep246 = 0, $__dst44_1 = 0, $__x46_1 = 0, $247 = 0, $248 = 0, $250 = 0, $252 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $n_digits_computed_0 = 0, $exp_in_base_0 = 0, $266 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $n_digits_computed_1 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $280 = 0, $282 = 0, $n_digits_computed_2 = 0, $exp_in_base_1 = 0, $283 = 0, $284 = 0, $285 = 0, $umax = 0, $286 = 0, $indvars_iv = 0, $288 = 0, $289 = 0, $_lobit250 = 0, $indvars_iv_next = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $_lobit = 0, $295 = 0, $i_0232 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $300 = 0, $_sum227 = 0, $301 = 0, $302 = 0, $exitcond = 0, $_lobit251 = 0, $_sum = 0, $303 = 0, $304 = 0, $305 = 0, $307 = 0, $_2 = 0, $309 = 0, $310 = 0, $_3 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $319 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    $ign = __stackBase__ + 8 | 0;
    $ign26 = __stackBase__ + 16 | 0;
    $1 = $u + 12 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $u + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) > -1;
    $6 = -$4 | 0;
    $7 = $5 ? $4 : $6;
    $8 = $u + 8 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ($base | 0) > -1;
    if ($10) {
      label = 2;
      break;
    } else {
      label = 5;
      break;
    }
   case 2:
    $12 = ($base | 0) < 2;
    if ($12) {
      $_1222 = 10;
      $num_to_text_0 = 9128;
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $14 = ($base | 0) > 36;
    if ($14) {
      label = 4;
      break;
    } else {
      $_1222 = $base;
      $num_to_text_0 = 9128;
      label = 7;
      break;
    }
   case 4:
    $16 = ($base | 0) > 62;
    if ($16) {
      $_0 = 0;
      label = 72;
      break;
    } else {
      $_1222 = $base;
      $num_to_text_0 = 8896;
      label = 7;
      break;
    }
   case 5:
    $18 = -$base | 0;
    $19 = ($18 | 0) < 2;
    if ($19) {
      $_1222 = 10;
      $num_to_text_0 = 7280;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $21 = ($18 | 0) > 36;
    if ($21) {
      $_0 = 0;
      label = 72;
      break;
    } else {
      $_1222 = $18;
      $num_to_text_0 = 7280;
      label = 7;
      break;
    }
   case 7:
    $23 = 9836 + ($_1222 * 20 & -1) | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $u | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = $26 << 5;
    $28 = $27 - 32 | 0;
    $29 = $24 & 65535;
    $30 = $24 >>> 16;
    $31 = $28 & 65504;
    $32 = $28 >>> 16;
    $33 = Math_imul($31, $29);
    $34 = Math_imul($32, $29);
    $35 = Math_imul($31, $30);
    $36 = Math_imul($32, $30);
    $37 = $33 >>> 16;
    $38 = $37 + $34 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($38 | 0, $35 | 0) | 0;
    $uadd$1 = tempRet0;
    $39 = $uadd$0;
    $40 = $uadd$1;
    $41 = $36 + 65536 | 0;
    $__x3_0 = $40 ? $41 : $36;
    $42 = $39 >>> 16;
    $43 = $42 + 2 | 0;
    $44 = $43 + $__x3_0 | 0;
    $45 = ($n_digits | 0) == 0;
    $46 = $44 >>> 0 < $n_digits >>> 0;
    $or_cond = $45 | $46;
    $_0223 = $or_cond ? $44 : $n_digits;
    $47 = ($dbuf | 0) == 0;
    if ($47) {
      label = 8;
      break;
    } else {
      $_0220 = $dbuf;
      $alloc_size_0 = 0;
      label = 9;
      break;
    }
   case 8:
    $49 = $_0223 + 2 | 0;
    $50 = HEAP32[3962] | 0;
    $51 = FUNCTION_TABLE_ii[$50 & 1023]($49) | 0;
    $_0220 = $51;
    $alloc_size_0 = $49;
    label = 9;
    break;
   case 9:
    $53 = ($7 | 0) == 0;
    if ($53) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    HEAP32[$exp >> 2] = 0;
    HEAP8[$_0220] = 0;
    $_3 = 0;
    label = 69;
    break;
   case 11:
    HEAP32[$__tmp_marker >> 2] = 0;
    $56 = $_0223 + 67 | 0;
    $57 = $56 >>> 0 < 65536;
    if ($57) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $59 = STACKTOP;
    STACKTOP = STACKTOP + $56 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $63 = $59;
    label = 14;
    break;
   case 13:
    $61 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $56) | 0;
    $63 = $61;
    label = 14;
    break;
   case 14:
    $64 = 9840 + ($_1222 * 20 & -1) | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    $66 = $65 & 65535;
    $67 = $65 >>> 16;
    $68 = $_0223 & 65535;
    $69 = $_0223 >>> 16;
    $70 = Math_imul($66, $68);
    $71 = Math_imul($66, $69);
    $72 = Math_imul($67, $68);
    $73 = Math_imul($67, $69);
    $74 = $70 >>> 16;
    $75 = $74 + $71 | 0;
    $uadd225$0 = _llvm_uadd_with_overflow_i32($75 | 0, $72 | 0) | 0;
    $uadd225$1 = tempRet0;
    $76 = $uadd225$0;
    $77 = $uadd225$1;
    $78 = $73 + 65536 | 0;
    $__x35_0 = $77 ? $78 : $73;
    $79 = $76 >>> 16;
    $80 = $__x35_0 + $79 | 0;
    $81 = $80 >>> 2;
    $82 = $81 & 134217727;
    $83 = $82 + 2 | 0;
    $84 = ($9 | 0) > ($83 | 0);
    if ($84) {
      label = 34;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $86 = $83 - $9 | 0;
    $87 = HEAP32[$23 >> 2] | 0;
    $88 = $86 << 5;
    $89 = $87 & 65535;
    $90 = $87 >>> 16;
    $91 = $88 & 65504;
    $92 = $86 >>> 11;
    $93 = $92 & 65535;
    $94 = Math_imul($89, $91);
    $95 = Math_imul($89, $93);
    $96 = Math_imul($90, $91);
    $97 = Math_imul($90, $93);
    $98 = $94 >>> 16;
    $99 = $98 + $95 | 0;
    $uadd228$0 = _llvm_uadd_with_overflow_i32($99 | 0, $96 | 0) | 0;
    $uadd228$1 = tempRet0;
    $100 = $uadd228$0;
    $101 = $uadd228$1;
    $102 = $97 + 65536 | 0;
    $__x317_0 = $101 ? $102 : $97;
    $103 = $100 >>> 16;
    $104 = $__x317_0 + $103 | 0;
    $105 = ($7 | 0) > ($83 | 0);
    if ($105) {
      label = 16;
      break;
    } else {
      $up_0 = $2;
      $un_0 = $7;
      label = 17;
      break;
    }
   case 16:
    $107 = $7 - $83 | 0;
    $108 = $2 + ($107 << 2) | 0;
    $up_0 = $108;
    $un_0 = $83;
    label = 17;
    break;
   case 17:
    $110 = $83 << 3;
    $111 = $110 + 8 | 0;
    $112 = $111 >>> 0 < 65536;
    if ($112) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    $114 = STACKTOP;
    STACKTOP = STACKTOP + $111 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $115 = STACKTOP;
    STACKTOP = STACKTOP + $111 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $120 = $115;
    $_in = $114;
    label = 20;
    break;
   case 19:
    $117 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $111) | 0;
    $118 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $111) | 0;
    $120 = $118;
    $_in = $117;
    label = 20;
    break;
   case 20:
    $121 = $_in;
    $122 = $120;
    $123 = _mpn_pow_1_highpart13($121, $ign, $_1222, $104, $83, $122) | 0;
    $124 = ($un_0 | 0) > ($123 | 0);
    if ($124) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    $126 = ___gmpn_mul($122, $up_0, $un_0, $121, $123) | 0;
    label = 23;
    break;
   case 22:
    $128 = ___gmpn_mul($122, $121, $123, $up_0, $un_0) | 0;
    label = 23;
    break;
   case 23:
    $130 = $123 + $un_0 | 0;
    $131 = $130 - 1 | 0;
    $132 = $122 + ($131 << 2) | 0;
    $133 = HEAP32[$132 >> 2] | 0;
    $134 = ($133 | 0) == 0;
    $135 = $134 & 1;
    $136 = $130 - $135 | 0;
    $137 = $un_0 - $9 | 0;
    $138 = HEAP32[$ign >> 2] | 0;
    $139 = $137 - $138 | 0;
    $140 = ($139 | 0) < 0;
    if ($140) {
      label = 24;
      break;
    } else {
      $tn_0 = $136;
      $off_0 = $139;
      label = 33;
      break;
    }
   case 24:
    $142 = ($130 | 0) == ($135 | 0);
    if ($142) {
      label = 30;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $144 = $136 - 1 | 0;
    $_sum229 = $144 - $139 | 0;
    $145 = $122 + ($_sum229 << 2) | 0;
    $146 = $122 + ($144 << 2) | 0;
    $147 = HEAP32[$146 >> 2] | 0;
    $148 = ($144 | 0) == 0;
    if ($148) {
      $__x_1 = $147;
      $__dst_1 = $145;
      label = 29;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    $_sum230 = $136 - 2 | 0;
    $149 = $122 + ($_sum230 << 2) | 0;
    $150 = $9 + $138 | 0;
    $151 = $150 << 2;
    $152 = $un_0 << 2;
    $153 = $151 - $152 | 0;
    $scevgep248 = $120 + $153 | 0;
    $__x_0 = $147;
    $__src_0 = $149;
    $__dst_0 = $145;
    $__n_0 = $144;
    label = 27;
    break;
   case 27:
    $155 = $__dst_0 - 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $156 = $__src_0 - 4 | 0;
    $157 = HEAP32[$__src_0 >> 2] | 0;
    $158 = $__n_0 - 1 | 0;
    $159 = ($158 | 0) == 0;
    if ($159) {
      label = 28;
      break;
    } else {
      $__x_0 = $157;
      $__src_0 = $156;
      $__dst_0 = $155;
      $__n_0 = $158;
      label = 27;
      break;
    }
   case 28:
    $scevgep248249 = $scevgep248;
    $__x_1 = $157;
    $__dst_1 = $scevgep248249;
    label = 29;
    break;
   case 29:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 30;
    break;
   case 30:
    $162 = ($137 | 0) == ($138 | 0);
    if ($162) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    $163 = $9 + $138 | 0;
    $164 = $163 - $un_0 | 0;
    $165 = $164 << 2;
    _memset($120 | 0, 0, $165 | 0);
    label = 32;
    break;
   case 32:
    $167 = $136 - $139 | 0;
    $tn_0 = $167;
    $off_0 = 0;
    label = 33;
    break;
   case 33:
    $169 = $122 + ($off_0 << 2) | 0;
    $170 = $tn_0 - $off_0 | 0;
    $171 = ___gmpn_get_str($63, $_1222, $169, $170) | 0;
    $172 = $171 - $104 | 0;
    $exp_in_base_0 = $172;
    $n_digits_computed_0 = $171;
    label = 54;
    break;
   case 34:
    $174 = $9 - $83 | 0;
    $175 = HEAP32[$23 >> 2] | 0;
    $176 = $174 << 5;
    $177 = $175 & 65535;
    $178 = $175 >>> 16;
    $179 = $176 & 65504;
    $180 = $174 >>> 11;
    $181 = $180 & 65535;
    $182 = Math_imul($177, $179);
    $183 = Math_imul($177, $181);
    $184 = Math_imul($178, $179);
    $185 = Math_imul($178, $181);
    $186 = $182 >>> 16;
    $187 = $186 + $183 | 0;
    $uadd226$0 = _llvm_uadd_with_overflow_i32($187 | 0, $184 | 0) | 0;
    $uadd226$1 = tempRet0;
    $188 = $uadd226$0;
    $189 = $uadd226$1;
    $190 = $185 + 65536 | 0;
    $__x334_0 = $189 ? $190 : $185;
    $191 = $188 >>> 16;
    $192 = $__x334_0 + $191 | 0;
    $193 = ($7 | 0) > ($83 | 0);
    if ($193) {
      label = 35;
      break;
    } else {
      $up_1 = $2;
      $un_1 = $7;
      label = 36;
      break;
    }
   case 35:
    $195 = $7 - $83 | 0;
    $196 = $2 + ($195 << 2) | 0;
    $up_1 = $196;
    $un_1 = $83;
    label = 36;
    break;
   case 36:
    $198 = $83 << 3;
    $199 = $198 + 8 | 0;
    $200 = $199 >>> 0 < 65536;
    if ($200) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    $202 = STACKTOP;
    STACKTOP = STACKTOP + $199 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $203 = STACKTOP;
    STACKTOP = STACKTOP + $199 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $208 = $203;
    $_in231 = $202;
    label = 39;
    break;
   case 38:
    $205 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $199) | 0;
    $206 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $199) | 0;
    $208 = $206;
    $_in231 = $205;
    label = 39;
    break;
   case 39:
    $209 = $_in231;
    $210 = $208;
    $211 = _mpn_pow_1_highpart13($209, $ign26, $_1222, $192, $83, $210) | 0;
    $212 = HEAP32[$ign26 >> 2] | 0;
    $213 = $174 - $212 | 0;
    $214 = $213 + $83 | 0;
    $215 = $214 << 2;
    $216 = $215 >>> 0 < 65536;
    if ($216) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    $218 = STACKTOP;
    STACKTOP = STACKTOP + $215 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $222 = $218;
    label = 42;
    break;
   case 41:
    $220 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $215) | 0;
    $222 = $220;
    label = 42;
    break;
   case 42:
    $223 = $222;
    $224 = $214 - $un_1 | 0;
    $225 = ($214 | 0) == ($un_1 | 0);
    if ($225) {
      label = 44;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    $226 = $9 - $un_1 | 0;
    $227 = $226 - $212 | 0;
    $228 = $227 << 2;
    _memset($222 | 0, 0, $228 | 0);
    label = 44;
    break;
   case 44:
    $230 = ($un_1 | 0) == 0;
    if ($230) {
      label = 50;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    $232 = $un_1 - 1 | 0;
    $233 = $223 + ($224 << 2) | 0;
    $234 = HEAP32[$up_1 >> 2] | 0;
    $235 = ($232 | 0) == 0;
    if ($235) {
      $__x46_1 = $234;
      $__dst44_1 = $233;
      label = 49;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    $236 = $9 << 2;
    $237 = $236 - 4 | 0;
    $238 = $212 << 2;
    $239 = $237 - $238 | 0;
    $scevgep = $222 + $239 | 0;
    $__x46_0 = $234;
    $up_1_pn = $up_1;
    $__dst44_0 = $233;
    $__n43_0 = $232;
    label = 47;
    break;
   case 47:
    $__src45_0 = $up_1_pn + 4 | 0;
    $241 = $__dst44_0 + 4 | 0;
    HEAP32[$__dst44_0 >> 2] = $__x46_0;
    $242 = HEAP32[$__src45_0 >> 2] | 0;
    $243 = $__n43_0 - 1 | 0;
    $244 = ($243 | 0) == 0;
    if ($244) {
      label = 48;
      break;
    } else {
      $__x46_0 = $242;
      $up_1_pn = $__src45_0;
      $__dst44_0 = $241;
      $__n43_0 = $243;
      label = 47;
      break;
    }
   case 48:
    $scevgep246 = $scevgep;
    $__x46_1 = $242;
    $__dst44_1 = $scevgep246;
    label = 49;
    break;
   case 49:
    HEAP32[$__dst44_1 >> 2] = $__x46_1;
    label = 50;
    break;
   case 50:
    $247 = $211 << 2;
    $248 = $247 >>> 0 < 65536;
    if ($248) {
      label = 51;
      break;
    } else {
      label = 52;
      break;
    }
   case 51:
    $250 = STACKTOP;
    STACKTOP = STACKTOP + $247 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $254 = $250;
    label = 53;
    break;
   case 52:
    $252 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $247) | 0;
    $254 = $252;
    label = 53;
    break;
   case 53:
    $255 = $254;
    ___gmpn_tdiv_qr($210, $255, 0, $223, $214, $209, $211);
    $256 = $214 - $211 | 0;
    $257 = $256 + 1 | 0;
    $258 = $210 + ($256 << 2) | 0;
    $259 = HEAP32[$258 >> 2] | 0;
    $260 = ($259 | 0) == 0;
    $261 = $260 & 1;
    $262 = $257 - $261 | 0;
    $263 = ___gmpn_get_str($63, $_1222, $210, $262) | 0;
    $264 = $263 + $192 | 0;
    $exp_in_base_0 = $264;
    $n_digits_computed_0 = $263;
    label = 54;
    break;
   case 54:
    $266 = $n_digits_computed_0 >>> 0 > $_0223 >>> 0;
    if ($266) {
      label = 55;
      break;
    } else {
      $exp_in_base_1 = $exp_in_base_0;
      $n_digits_computed_2 = $n_digits_computed_0;
      label = 59;
      break;
    }
   case 55:
    $268 = $63 + $_0223 | 0;
    $269 = HEAP8[$268] | 0;
    $270 = $269 & 255;
    $271 = $270 << 1;
    $272 = ($271 | 0) < ($_1222 | 0);
    if ($272) {
      $exp_in_base_1 = $exp_in_base_0;
      $n_digits_computed_2 = $n_digits_computed_0;
      label = 59;
      break;
    } else {
      $n_digits_computed_1 = $_0223;
      label = 56;
      break;
    }
   case 56:
    $273 = $n_digits_computed_1 - 1 | 0;
    $274 = $63 + $273 | 0;
    $275 = HEAP8[$274] | 0;
    $276 = $275 + 1 & 255;
    HEAP8[$274] = $276;
    $277 = $276 & 255;
    $278 = ($277 | 0) == ($_1222 | 0);
    if ($278) {
      label = 57;
      break;
    } else {
      $exp_in_base_1 = $exp_in_base_0;
      $n_digits_computed_2 = $n_digits_computed_1;
      label = 59;
      break;
    }
   case 57:
    $280 = ($273 | 0) == 0;
    if ($280) {
      label = 58;
      break;
    } else {
      $n_digits_computed_1 = $273;
      label = 56;
      break;
    }
   case 58:
    HEAP8[$63] = 1;
    $282 = $exp_in_base_0 + 1 | 0;
    $exp_in_base_1 = $282;
    $n_digits_computed_2 = 1;
    label = 59;
    break;
   case 59:
    $283 = $_0223 ^ -1;
    $284 = $n_digits_computed_2 ^ -1;
    $285 = $283 >>> 0 > $284 >>> 0;
    $umax = $285 ? $283 : $284;
    $286 = $umax ^ -1;
    $indvars_iv = $286;
    label = 60;
    break;
   case 60:
    $288 = ($indvars_iv | 0) == 0;
    if ($288) {
      label = 61;
      break;
    } else {
      label = 62;
      break;
    }
   case 61:
    $289 = HEAP32[$3 >> 2] | 0;
    $_lobit250 = $289 >>> 31;
    $_lobit251 = $_lobit250;
    label = 65;
    break;
   case 62:
    $indvars_iv_next = $indvars_iv - 1 | 0;
    $291 = $63 + $indvars_iv_next | 0;
    $292 = HEAP8[$291] | 0;
    $293 = $292 << 24 >> 24 == 0;
    if ($293) {
      $indvars_iv = $indvars_iv_next;
      label = 60;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    $294 = HEAP32[$3 >> 2] | 0;
    $_lobit = $294 >>> 31;
    $295 = ($indvars_iv | 0) == 0;
    if ($295) {
      $_lobit251 = $_lobit;
      label = 65;
      break;
    } else {
      $i_0232 = 0;
      label = 64;
      break;
    }
   case 64:
    $296 = $63 + $i_0232 | 0;
    $297 = HEAP8[$296] | 0;
    $298 = $297 & 255;
    $299 = $num_to_text_0 + $298 | 0;
    $300 = HEAP8[$299] | 0;
    $_sum227 = $i_0232 + $_lobit | 0;
    $301 = $_0220 + $_sum227 | 0;
    HEAP8[$301] = $300;
    $302 = $i_0232 + 1 | 0;
    $exitcond = ($302 | 0) == ($indvars_iv | 0);
    if ($exitcond) {
      $_lobit251 = $_lobit;
      label = 65;
      break;
    } else {
      $i_0232 = $302;
      label = 64;
      break;
    }
   case 65:
    $_sum = $_lobit251 + $indvars_iv | 0;
    $303 = $_0220 + $_sum | 0;
    HEAP8[$303] = 0;
    HEAP32[$exp >> 2] = $exp_in_base_1;
    $304 = HEAP32[$3 >> 2] | 0;
    $305 = ($304 | 0) < 0;
    if ($305) {
      label = 66;
      break;
    } else {
      $_2 = $indvars_iv;
      label = 67;
      break;
    }
   case 66:
    HEAP8[$_0220] = 45;
    $307 = $indvars_iv + 1 | 0;
    $_2 = $307;
    label = 67;
    break;
   case 67:
    $309 = HEAP32[$__tmp_marker >> 2] | 0;
    $310 = ($309 | 0) == 0;
    if ($310) {
      $_3 = $_2;
      label = 69;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    ___gmp_tmp_reentrant_free($309);
    $_3 = $_2;
    label = 69;
    break;
   case 69:
    $313 = ($alloc_size_0 | 0) == 0;
    if ($313) {
      $_0 = $_0220;
      label = 72;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    $315 = $_3 + 1 | 0;
    $316 = ($alloc_size_0 | 0) == ($315 | 0);
    if ($316) {
      $_0 = $_0220;
      label = 72;
      break;
    } else {
      label = 71;
      break;
    }
   case 71:
    $318 = HEAP32[3748] | 0;
    $319 = FUNCTION_TABLE_iiii[$318 & 1023]($_0220, $alloc_size_0, $315) | 0;
    $_0 = $319;
    label = 72;
    break;
   case 72:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _mpn_pow_1_highpart13($rp, $ignp, $base, $exp, $prec, $tp) {
  $rp = $rp | 0;
  $ignp = $ignp | 0;
  $base = $base | 0;
  $exp = $exp | 0;
  $prec = $prec | 0;
  $tp = $tp | 0;
  var $1 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $_06270 = 0, $_06369 = 0, $ign_068 = 0, $i_067 = 0, $off_066 = 0, $rn_065 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $rn_1 = 0, $off_1 = 0, $ign_1 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $rn_2 = 0, $off_2 = 0, $45 = 0, $46 = 0, $_062_lcssa = 0, $ign_0_lcssa = 0, $off_0_lcssa = 0, $rn_0_lcssa = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $rn_3 = 0, $ign_2 = 0, $_1 = 0, $53 = 0, $54 = 0, $55 = 0, $or_cond = 0, $57 = 0, $58 = 0, $59 = 0, $_sum = 0, $60 = 0, $61 = 0, $__n_0 = 0, $__dst_0 = 0, $__src_0 = 0, $__x_0 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $storemerge = 0, $_0 = 0, label = 0, $_06270$phi = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($exp | 0) == 0;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    HEAP32[$rp >> 2] = 1;
    $_0 = 1;
    $storemerge = 0;
    label = 20;
    break;
   case 3:
    HEAP32[$rp >> 2] = $base;
    $4 = $exp >>> 0 < 65536;
    if ($4) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $6 = $exp >>> 0 < 256;
    $7 = $6 ? 1 : 9;
    $12 = $7;
    label = 6;
    break;
   case 5:
    $9 = $exp >>> 0 < 16777216;
    $10 = $9 ? 17 : 25;
    $12 = $10;
    label = 6;
    break;
   case 6:
    $13 = $exp >>> ($12 >>> 0);
    $14 = $13 + 9696 | 0;
    $15 = HEAP8[$14] | 0;
    $16 = $15 & 255;
    $17 = $12 - 3 | 0;
    $18 = $17 + $16 | 0;
    $19 = ($18 | 0) > -1;
    if ($19) {
      $rn_065 = 1;
      $off_066 = 0;
      $i_067 = $18;
      $ign_068 = 0;
      $_06369 = $tp;
      $_06270 = $rp;
      label = 7;
      break;
    } else {
      $rn_0_lcssa = 1;
      $off_0_lcssa = 0;
      $ign_0_lcssa = 0;
      $_062_lcssa = $rp;
      label = 12;
      break;
    }
   case 7:
    $20 = $_06270 + ($off_066 << 2) | 0;
    ___gmpn_sqr($_06369, $20, $rn_065);
    $21 = $rn_065 << 1;
    $22 = $21 - 1 | 0;
    $23 = $_06369 + ($22 << 2) | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = ($24 | 0) == 0;
    $26 = $25 & 1;
    $27 = $21 - $26 | 0;
    $28 = $ign_068 << 1;
    $29 = ($27 | 0) > ($prec | 0);
    if ($29) {
      label = 8;
      break;
    } else {
      $ign_1 = $28;
      $off_1 = 0;
      $rn_1 = $27;
      label = 9;
      break;
    }
   case 8:
    $31 = $27 - $prec | 0;
    $32 = $31 + $28 | 0;
    $ign_1 = $32;
    $off_1 = $31;
    $rn_1 = $prec;
    label = 9;
    break;
   case 9:
    $34 = 1 << $i_067;
    $35 = $34 & $exp;
    $36 = ($35 | 0) == 0;
    if ($36) {
      $off_2 = $off_1;
      $rn_2 = $rn_1;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $38 = $_06369 + ($off_1 << 2) | 0;
    $39 = ___gmpn_mul_1($_06369, $38, $rn_1, $base) | 0;
    $40 = $_06369 + ($rn_1 << 2) | 0;
    HEAP32[$40 >> 2] = $39;
    $41 = ($39 | 0) != 0;
    $42 = $41 & 1;
    $43 = $42 + $rn_1 | 0;
    $off_2 = 0;
    $rn_2 = $43;
    label = 11;
    break;
   case 11:
    $45 = $i_067 - 1 | 0;
    $46 = ($i_067 | 0) > 0;
    if ($46) {
      $_06369 = $_06270;
      $_06270$phi = $_06369;
      $rn_065 = $rn_2;
      $off_066 = $off_2;
      $i_067 = $45;
      $ign_068 = $ign_1;
      $_06270 = $_06270$phi;
      label = 7;
      break;
    } else {
      $rn_0_lcssa = $rn_2;
      $off_0_lcssa = $off_2;
      $ign_0_lcssa = $ign_1;
      $_062_lcssa = $_06369;
      label = 12;
      break;
    }
   case 12:
    $47 = ($rn_0_lcssa | 0) > ($prec | 0);
    if ($47) {
      label = 13;
      break;
    } else {
      $_1 = $_062_lcssa;
      $ign_2 = $ign_0_lcssa;
      $rn_3 = $rn_0_lcssa;
      label = 14;
      break;
    }
   case 13:
    $49 = $rn_0_lcssa - $prec | 0;
    $50 = $ign_0_lcssa + $49 | 0;
    $51 = $_062_lcssa + ($49 << 2) | 0;
    $_1 = $51;
    $ign_2 = $50;
    $rn_3 = $prec;
    label = 14;
    break;
   case 14:
    $53 = $_1 + ($off_0_lcssa << 2) | 0;
    $54 = ($53 | 0) == ($rp | 0);
    $55 = ($rn_3 | 0) == 0;
    $or_cond = $54 | $55;
    if ($or_cond) {
      $_0 = $rn_3;
      $storemerge = $ign_2;
      label = 20;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $57 = $rn_3 - 1 | 0;
    $58 = HEAP32[$53 >> 2] | 0;
    $59 = ($57 | 0) == 0;
    if ($59) {
      $__x_1 = $58;
      $__dst_1 = $rp;
      label = 19;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $_sum = $off_0_lcssa + 1 | 0;
    $60 = $_1 + ($_sum << 2) | 0;
    $61 = $rn_3 - 1 | 0;
    $__x_0 = $58;
    $__src_0 = $60;
    $__dst_0 = $rp;
    $__n_0 = $57;
    label = 17;
    break;
   case 17:
    $63 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $64 = $__src_0 + 4 | 0;
    $65 = HEAP32[$__src_0 >> 2] | 0;
    $66 = $__n_0 - 1 | 0;
    $67 = ($66 | 0) == 0;
    if ($67) {
      label = 18;
      break;
    } else {
      $__x_0 = $65;
      $__src_0 = $64;
      $__dst_0 = $63;
      $__n_0 = $66;
      label = 17;
      break;
    }
   case 18:
    $scevgep = $rp + ($61 << 2) | 0;
    $__x_1 = $65;
    $__dst_1 = $scevgep;
    label = 19;
    break;
   case 19:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    $_0 = $rn_3;
    $storemerge = $ign_2;
    label = 20;
    break;
   case 20:
    HEAP32[$ignp >> 2] = $storemerge;
    return $_0 | 0;
  }
  return 0;
}
function ___gmpz_add($w, $u, $v) {
  $w = $w | 0;
  $u = $u | 0;
  $v = $v | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $_ = 0, $_67 = 0, $_68 = 0, $_69 = 0, $u_v = 0, $v_u = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $wsize_0 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $_wsize_0 = 0, $45 = 0, $46 = 0, $48 = 0, $wsize_1 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $_wsize_1 = 0, $60 = 0, $wsize_2 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $_wsize_2 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $wsize_3 = 0, $79 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $u + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $v + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($2 | 0) > -1;
    $6 = -$2 | 0;
    $7 = $5 ? $2 : $6;
    $8 = ($4 | 0) > -1;
    $9 = -$4 | 0;
    $10 = $8 ? $4 : $9;
    $11 = ($7 | 0) < ($10 | 0);
    $_ = $11 ? $10 : $7;
    $_67 = $11 ? $7 : $10;
    $_68 = $11 ? $2 : $4;
    $_69 = $11 ? $4 : $2;
    $u_v = $11 ? $u : $v;
    $v_u = $11 ? $v : $u;
    $12 = $_ + 1 | 0;
    $13 = $w | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = ($12 | 0) > ($14 | 0);
    if ($15) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $17 = ___gmpz_realloc($w, $12) | 0;
    $18 = $17;
    $23 = $18;
    label = 4;
    break;
   case 3:
    $20 = $w + 8 | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    $23 = $21;
    label = 4;
    break;
   case 4:
    $24 = $v_u + 8 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = $u_v + 8 | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = $_69 ^ $_68;
    $29 = ($28 | 0) < 0;
    if ($29) {
      label = 5;
      break;
    } else {
      label = 19;
      break;
    }
   case 5:
    $31 = ($_ | 0) == ($_67 | 0);
    if ($31) {
      label = 10;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $33 = ___gmpn_sub($23, $25, $_, $27, $_67) | 0;
    $wsize_0 = $_;
    label = 7;
    break;
   case 7:
    $35 = ($wsize_0 | 0) > 0;
    if ($35) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $37 = $wsize_0 - 1 | 0;
    $38 = $23 + ($37 << 2) | 0;
    $39 = HEAP32[$38 >> 2] | 0;
    $40 = ($39 | 0) == 0;
    if ($40) {
      $wsize_0 = $37;
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $42 = ($_69 | 0) < 0;
    $43 = -$wsize_0 | 0;
    $_wsize_0 = $42 ? $43 : $wsize_0;
    $wsize_3 = $_wsize_0;
    label = 21;
    break;
   case 10:
    $45 = ___gmpn_cmp($25, $27, $_) | 0;
    $46 = ($45 | 0) < 0;
    if ($46) {
      label = 11;
      break;
    } else {
      label = 15;
      break;
    }
   case 11:
    $48 = ___gmpn_sub_n($23, $27, $25, $_) | 0;
    $wsize_1 = $_;
    label = 12;
    break;
   case 12:
    $50 = ($wsize_1 | 0) > 0;
    if ($50) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $52 = $wsize_1 - 1 | 0;
    $53 = $23 + ($52 << 2) | 0;
    $54 = HEAP32[$53 >> 2] | 0;
    $55 = ($54 | 0) == 0;
    if ($55) {
      $wsize_1 = $52;
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $57 = ($_69 | 0) > -1;
    $58 = -$wsize_1 | 0;
    $_wsize_1 = $57 ? $58 : $wsize_1;
    $wsize_3 = $_wsize_1;
    label = 21;
    break;
   case 15:
    $60 = ___gmpn_sub_n($23, $25, $27, $_) | 0;
    $wsize_2 = $_;
    label = 16;
    break;
   case 16:
    $62 = ($wsize_2 | 0) > 0;
    if ($62) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $64 = $wsize_2 - 1 | 0;
    $65 = $23 + ($64 << 2) | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    $67 = ($66 | 0) == 0;
    if ($67) {
      $wsize_2 = $64;
      label = 16;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $69 = ($_69 | 0) < 0;
    $70 = -$wsize_2 | 0;
    $_wsize_2 = $69 ? $70 : $wsize_2;
    $wsize_3 = $_wsize_2;
    label = 21;
    break;
   case 19:
    $72 = ___gmpn_add($23, $25, $_, $27, $_67) | 0;
    $73 = $23 + ($_ << 2) | 0;
    HEAP32[$73 >> 2] = $72;
    $74 = $72 + $_ | 0;
    $75 = ($_69 | 0) < 0;
    if ($75) {
      label = 20;
      break;
    } else {
      $wsize_3 = $74;
      label = 21;
      break;
    }
   case 20:
    $77 = -$74 | 0;
    $wsize_3 = $77;
    label = 21;
    break;
   case 21:
    $79 = $w + 4 | 0;
    HEAP32[$79 >> 2] = $wsize_3;
    return;
  }
}
function ___gmp_assert_fail($filename, $linenum, $expr) {
  $filename = $filename | 0;
  $linenum = $linenum | 0;
  $expr = $expr | 0;
  ___gmp_assert_header($filename, $linenum);
  _fprintf(HEAP32[_stderr >> 2] | 0, 7320, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $expr, tempInt) | 0);
  _abort();
}
function ___gmp_exception($error_bit) {
  $error_bit = $error_bit | 0;
  HEAP32[3808] = HEAP32[3808] | $error_bit;
  _abort();
}
function ___gmp_divide_by_zero() {
  ___gmp_exception(2);
}
function ___gmp_default_allocate($size) {
  $size = $size | 0;
  var $1 = 0, $2 = 0, $4 = 0, $5 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _malloc($size) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $4 = HEAP32[_stderr >> 2] | 0;
    $5 = _fprintf($4 | 0, 6640, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $size, tempInt) | 0) | 0;
    _abort();
    return 0;
    return 0;
   case 3:
    STACKTOP = __stackBase__;
    return $1 | 0;
  }
  return 0;
}
function ___gmp_default_reallocate($oldptr, $old_size, $new_size) {
  $oldptr = $oldptr | 0;
  $old_size = $old_size | 0;
  $new_size = $new_size | 0;
  var $1 = 0, $2 = 0, $4 = 0, $5 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _realloc($oldptr, $new_size) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $4 = HEAP32[_stderr >> 2] | 0;
    $5 = _fprintf($4 | 0, 8144, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $old_size, HEAP32[tempInt + 8 >> 2] = $new_size, tempInt) | 0) | 0;
    _abort();
    return 0;
    return 0;
   case 3:
    STACKTOP = __stackBase__;
    return $1 | 0;
  }
  return 0;
}
function ___gmpz_cmp($u, $v) {
  $u = $u | 0;
  $v = $v | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $__gmp_i_0 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $cmp_0 = 0, $28 = 0, $29 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $u + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $v + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($2 | 0) == ($4 | 0);
    if ($5) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $7 = $2 - $4 | 0;
    $_0 = $7;
    label = 8;
    break;
   case 3:
    $9 = ($2 | 0) > -1;
    $10 = -$2 | 0;
    $11 = $9 ? $2 : $10;
    $12 = $u + 8 | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $v + 8 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $__gmp_i_0 = $11;
    label = 4;
    break;
   case 4:
    $17 = $__gmp_i_0 - 1 | 0;
    $18 = ($__gmp_i_0 | 0) > 0;
    if ($18) {
      label = 5;
      break;
    } else {
      $cmp_0 = 0;
      label = 7;
      break;
    }
   case 5:
    $20 = $13 + ($17 << 2) | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = $15 + ($17 << 2) | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = ($21 | 0) == ($23 | 0);
    if ($24) {
      $__gmp_i_0 = $17;
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $26 = $21 >>> 0 > $23 >>> 0;
    $27 = $26 ? 1 : -1;
    $cmp_0 = $27;
    label = 7;
    break;
   case 7:
    $28 = -$cmp_0 | 0;
    $29 = $9 ? $cmp_0 : $28;
    $_0 = $29;
    label = 8;
    break;
   case 8:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpz_cmp_ui($u, $v_digit) {
  $u = $u | 0;
  $v_digit = $v_digit | 0;
  var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, $_ = 0, $15 = 0, $16 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $u + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    if (($2 | 0) == 0) {
      label = 2;
      break;
    } else if (($2 | 0) == 1) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 2:
    $4 = ($v_digit | 0) != 0;
    $5 = $4 & 1;
    $6 = -$5 | 0;
    $_0 = $6;
    label = 6;
    break;
   case 3:
    $8 = $u + 8 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $10 >>> 0 > $v_digit >>> 0;
    if ($11) {
      $_0 = 1;
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $13 = $10 >>> 0 < $v_digit >>> 0;
    $_ = $13 << 31 >> 31;
    $_0 = $_;
    label = 6;
    break;
   case 5:
    $15 = ($2 | 0) > 0;
    $16 = $15 ? 1 : -1;
    $_0 = $16;
    label = 6;
    break;
   case 6:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpz_add_ui($w, $u, $vval) {
  $w = $w | 0;
  $u = $u | 0;
  $vval = $vval | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $wsize_0 = 0, $46 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $u + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > -1;
    $4 = -$2 | 0;
    $5 = $3 ? $2 : $4;
    $6 = $5 + 1 | 0;
    $7 = $w | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($6 | 0) > ($8 | 0);
    if ($9) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $11 = ___gmpz_realloc($w, $6) | 0;
    $12 = $11;
    $17 = $12;
    label = 4;
    break;
   case 3:
    $14 = $w + 8 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $17 = $15;
    label = 4;
    break;
   case 4:
    $18 = $u + 8 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = ($5 | 0) == 0;
    if ($20) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[$17 >> 2] = $vval;
    $22 = ($vval | 0) != 0;
    $23 = $22 & 1;
    $24 = $w + 4 | 0;
    HEAP32[$24 >> 2] = $23;
    label = 13;
    break;
   case 6:
    if ($3) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $27 = ___gmpn_add_1($17, $19, $5, $vval) | 0;
    $28 = $17 + ($5 << 2) | 0;
    HEAP32[$28 >> 2] = $27;
    $29 = $27 + $5 | 0;
    $wsize_0 = $29;
    label = 12;
    break;
   case 8:
    $31 = ($5 | 0) == 1;
    if ($31) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    $33 = HEAP32[$19 >> 2] | 0;
    $34 = $33 >>> 0 < $vval >>> 0;
    if ($34) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $36 = $vval - $33 | 0;
    HEAP32[$17 >> 2] = $36;
    $wsize_0 = 1;
    label = 12;
    break;
   case 11:
    $38 = ___gmpn_sub_1($17, $19, $5, $vval) | 0;
    $39 = $5 - 1 | 0;
    $40 = $17 + ($39 << 2) | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    $42 = ($41 | 0) == 0;
    $43 = $42 & 1;
    $44 = $43 - $5 | 0;
    $wsize_0 = $44;
    label = 12;
    break;
   case 12:
    $46 = $w + 4 | 0;
    HEAP32[$46 >> 2] = $wsize_0;
    label = 13;
    break;
   case 13:
    return;
  }
}
function ___gmpz_aorsmul_1($w, $x, $y, $sub) {
  $w = $w | 0;
  $x = $x | 0;
  $y = $y | 0;
  $sub = $sub | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $or_cond = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $69 = 0, $71 = 0, $dsize_0 = 0, $cy2_0 = 0, $73 = 0, $74 = 0, $dsize_1 = 0, $cy_0 = 0, $_sum = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $81 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $cy_1 = 0, $89 = 0, $91 = 0, $92 = 0, $__d_0 = 0, $__n_0 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $__p_0 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $__d2_0 = 0, $__n4_0 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $__p6_0 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $new_wsize_0_ph = 0, $wsize_signed_0_ph = 0, $new_wsize_0 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $new_wsize_1 = 0, $wsize_signed_1 = 0, $136 = 0, $137 = 0, $138 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $x + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) == 0;
    $4 = ($y | 0) == 0;
    $or_cond = $3 | $4;
    if ($or_cond) {
      label = 31;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $6 = $2 ^ $sub;
    $7 = ($2 | 0) > -1;
    $8 = -$2 | 0;
    $9 = $7 ? $2 : $8;
    $10 = $w + 4 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = ($11 | 0) == 0;
    if ($12) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    $14 = $9 + 1 | 0;
    $15 = $w | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = ($14 | 0) > ($16 | 0);
    if ($17) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $19 = ___gmpz_realloc($w, $14) | 0;
    $20 = $19;
    $25 = $20;
    label = 6;
    break;
   case 5:
    $22 = $w + 8 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $25 = $23;
    label = 6;
    break;
   case 6:
    $26 = $x + 8 | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = ___gmpn_mul_1($25, $27, $9, $y) | 0;
    $29 = $25 + ($9 << 2) | 0;
    HEAP32[$29 >> 2] = $28;
    $30 = ($28 | 0) != 0;
    $31 = $30 & 1;
    $32 = $31 + $9 | 0;
    $33 = ($6 | 0) > -1;
    $34 = -$32 | 0;
    $35 = $33 ? $32 : $34;
    HEAP32[$10 >> 2] = $35;
    label = 31;
    break;
   case 7:
    $37 = $11 ^ $6;
    $38 = ($11 | 0) > -1;
    $39 = -$11 | 0;
    $40 = $38 ? $11 : $39;
    $41 = ($40 | 0) > ($9 | 0);
    $42 = $41 ? $40 : $9;
    $43 = $42 + 1 | 0;
    $44 = $w | 0;
    $45 = HEAP32[$44 >> 2] | 0;
    $46 = ($43 | 0) > ($45 | 0);
    if ($46) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $48 = ___gmpz_realloc($w, $43) | 0;
    $49 = $48;
    $54 = $49;
    label = 10;
    break;
   case 9:
    $51 = $w + 8 | 0;
    $52 = HEAP32[$51 >> 2] | 0;
    $54 = $52;
    label = 10;
    break;
   case 10:
    $55 = $x + 8 | 0;
    $56 = HEAP32[$55 >> 2] | 0;
    $57 = ($40 | 0) < ($9 | 0);
    $58 = $57 ? $40 : $9;
    $59 = ($37 | 0) > -1;
    if ($59) {
      label = 11;
      break;
    } else {
      label = 17;
      break;
    }
   case 11:
    $61 = ___gmpn_addmul_1($54, $56, $58, $y) | 0;
    $62 = $54 + ($58 << 2) | 0;
    $63 = $56 + ($58 << 2) | 0;
    $64 = $9 - $40 | 0;
    $65 = ($9 | 0) == ($40 | 0);
    if ($65) {
      $cy_0 = $61;
      $dsize_1 = $64;
      label = 16;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $67 = ($64 | 0) > 0;
    if ($67) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $69 = ___gmpn_mul_1($62, $63, $64, $y) | 0;
    $cy2_0 = $69;
    $dsize_0 = $64;
    label = 15;
    break;
   case 14:
    $71 = -$64 | 0;
    $cy2_0 = 0;
    $dsize_0 = $71;
    label = 15;
    break;
   case 15:
    $73 = ___gmpn_add_1($62, $62, $dsize_0, $61) | 0;
    $74 = $73 + $cy2_0 | 0;
    $cy_0 = $74;
    $dsize_1 = $dsize_0;
    label = 16;
    break;
   case 16:
    $_sum = $dsize_1 + $58 | 0;
    $76 = $54 + ($_sum << 2) | 0;
    HEAP32[$76 >> 2] = $cy_0;
    $77 = ($cy_0 | 0) != 0;
    $78 = $77 & 1;
    $79 = $78 + $42 | 0;
    $wsize_signed_1 = $11;
    $new_wsize_1 = $79;
    label = 30;
    break;
   case 17:
    $81 = ___gmpn_submul_1($54, $56, $58, $y) | 0;
    if ($57) {
      $__n4_0 = $40;
      $__d2_0 = $54;
      label = 24;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $83 = ($40 | 0) == ($9 | 0);
    if ($83) {
      $cy_1 = $81;
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $85 = $54 + ($9 << 2) | 0;
    $86 = $40 - $9 | 0;
    $87 = ___gmpn_sub_1($85, $85, $86, $81) | 0;
    $cy_1 = $87;
    label = 20;
    break;
   case 20:
    $89 = ($cy_1 | 0) == 0;
    if ($89) {
      $wsize_signed_0_ph = $11;
      $new_wsize_0_ph = $42;
      label = 27;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $91 = $cy_1 - 1 | 0;
    $92 = $54 + ($42 << 2) | 0;
    HEAP32[$92 >> 2] = $91;
    $__n_0 = $42;
    $__d_0 = $54;
    label = 22;
    break;
   case 22:
    $94 = $__d_0 + 4 | 0;
    $95 = HEAP32[$__d_0 >> 2] | 0;
    $96 = $95 ^ -1;
    HEAP32[$__d_0 >> 2] = $96;
    $97 = $__n_0 - 1 | 0;
    $98 = ($97 | 0) == 0;
    if ($98) {
      $__p_0 = $54;
      label = 23;
      break;
    } else {
      $__n_0 = $97;
      $__d_0 = $94;
      label = 22;
      break;
    }
   case 23:
    $99 = $__p_0 + 4 | 0;
    $100 = HEAP32[$__p_0 >> 2] | 0;
    $101 = $100 + 1 | 0;
    HEAP32[$__p_0 >> 2] = $101;
    $102 = ($101 | 0) == 0;
    if ($102) {
      $__p_0 = $99;
      label = 23;
      break;
    } else {
      $wsize_signed_0_ph = $39;
      $new_wsize_0_ph = $43;
      label = 27;
      break;
    }
   case 24:
    $103 = $__d2_0 + 4 | 0;
    $104 = HEAP32[$__d2_0 >> 2] | 0;
    $105 = $104 ^ -1;
    HEAP32[$__d2_0 >> 2] = $105;
    $106 = $__n4_0 - 1 | 0;
    $107 = ($106 | 0) == 0;
    if ($107) {
      label = 25;
      break;
    } else {
      $__n4_0 = $106;
      $__d2_0 = $103;
      label = 24;
      break;
    }
   case 25:
    $109 = ___gmpn_add_1($54, $54, $40, 1) | 0;
    $110 = $109 + $81 | 0;
    $111 = $110 - 1 | 0;
    $112 = ($110 | 0) == 0;
    $113 = $112 & 1;
    $114 = $111 + $113 | 0;
    $115 = $54 + ($40 << 2) | 0;
    $116 = $56 + ($40 << 2) | 0;
    $117 = $9 - $40 | 0;
    $118 = ___gmpn_mul_1($115, $116, $117, $y) | 0;
    $119 = ___gmpn_add_1($115, $115, $117, $114) | 0;
    $120 = $119 + $118 | 0;
    $121 = $54 + ($42 << 2) | 0;
    HEAP32[$121 >> 2] = $120;
    $122 = ($120 | 0) != 0;
    $123 = $122 & 1;
    $124 = $123 + $42 | 0;
    if ($112) {
      $__p6_0 = $115;
      label = 26;
      break;
    } else {
      $wsize_signed_0_ph = $39;
      $new_wsize_0_ph = $124;
      label = 27;
      break;
    }
   case 26:
    $125 = $__p6_0 + 4 | 0;
    $126 = HEAP32[$__p6_0 >> 2] | 0;
    $127 = $126 - 1 | 0;
    HEAP32[$__p6_0 >> 2] = $127;
    $128 = ($126 | 0) == 0;
    if ($128) {
      $__p6_0 = $125;
      label = 26;
      break;
    } else {
      $wsize_signed_0_ph = $39;
      $new_wsize_0_ph = $124;
      label = 27;
      break;
    }
   case 27:
    $new_wsize_0 = $new_wsize_0_ph;
    label = 28;
    break;
   case 28:
    $130 = ($new_wsize_0 | 0) > 0;
    if ($130) {
      label = 29;
      break;
    } else {
      $wsize_signed_1 = $wsize_signed_0_ph;
      $new_wsize_1 = $new_wsize_0;
      label = 30;
      break;
    }
   case 29:
    $132 = $new_wsize_0 - 1 | 0;
    $133 = $54 + ($132 << 2) | 0;
    $134 = HEAP32[$133 >> 2] | 0;
    $135 = ($134 | 0) == 0;
    if ($135) {
      $new_wsize_0 = $132;
      label = 28;
      break;
    } else {
      $wsize_signed_1 = $wsize_signed_0_ph;
      $new_wsize_1 = $new_wsize_0;
      label = 30;
      break;
    }
   case 30:
    $136 = ($wsize_signed_1 | 0) > -1;
    $137 = -$new_wsize_1 | 0;
    $138 = $136 ? $new_wsize_1 : $137;
    HEAP32[$10 >> 2] = $138;
    label = 31;
    break;
   case 31:
    return;
  }
}
function ___gmpz_addmul_ui($w, $x, $y) {
  $w = $w | 0;
  $x = $x | 0;
  $y = $y | 0;
  ___gmpz_aorsmul_1($w, $x, $y, 0);
  return;
}
function ___gmpz_cfdiv_q_2exp($w, $u, $cnt, $dir) {
  $w = $w | 0;
  $u = $u | 0;
  $cnt = $cnt | 0;
  $dir = $dir | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $_ = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $_lobit = 0, $_lobit_not = 0, $31 = 0, $or_cond56 = 0, $i_054 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $or_cond = 0, $round_1 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $_sum = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $__n_0 = 0, $__dst_0 = 0, $__src_0 = 0, $__x_0 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $round_2 = 0, $wsize_0 = 0, $71 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $wsize_1 = 0, $80 = 0, $81 = 0, $82 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $u + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > -1;
    $4 = -$2 | 0;
    $5 = $3 ? $2 : $4;
    $6 = $cnt >>> 5;
    $7 = $5 - $6 | 0;
    $8 = ($7 | 0) < 1;
    if ($8) {
      label = 2;
      break;
    } else {
      label = 5;
      break;
    }
   case 2:
    $10 = $w + 8 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    HEAP32[$11 >> 2] = 1;
    $12 = ($2 | 0) == 0;
    if ($12) {
      $17 = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $14 = $2 ^ $dir;
    $15 = ($14 | 0) < 0;
    $_ = $15 ? 0 : $dir;
    $17 = $_;
    label = 4;
    break;
   case 4:
    $18 = $w + 4 | 0;
    HEAP32[$18 >> 2] = $17;
    label = 22;
    break;
   case 5:
    $20 = $7 + 1 | 0;
    $21 = $w | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = ($20 | 0) > ($22 | 0);
    if ($23) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $25 = ___gmpz_realloc($w, $20) | 0;
    label = 7;
    break;
   case 7:
    $27 = $u + 8 | 0;
    $28 = HEAP32[$27 >> 2] | 0;
    $29 = $2 ^ $dir;
    $30 = ($29 | 0) < 0;
    $_lobit = $29 >> 31;
    $_lobit_not = $_lobit ^ -1;
    $31 = ($6 | 0) == 0;
    $or_cond56 = $30 | $31;
    if ($or_cond56) {
      $round_1 = 0;
      label = 9;
      break;
    } else {
      $i_054 = 0;
      label = 8;
      break;
    }
   case 8:
    $32 = $28 + ($i_054 << 2) | 0;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = $i_054 + 1 | 0;
    $35 = ($34 | 0) < ($6 | 0);
    $36 = ($33 | 0) == 0;
    $or_cond = $35 & $36;
    if ($or_cond) {
      $i_054 = $34;
      label = 8;
      break;
    } else {
      $round_1 = $33;
      label = 9;
      break;
    }
   case 9:
    $37 = $w + 8 | 0;
    $38 = HEAP32[$37 >> 2] | 0;
    $39 = $cnt & 31;
    $40 = ($39 | 0) == 0;
    if ($40) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $42 = $28 + ($6 << 2) | 0;
    $43 = ___gmpn_rshift($38, $42, $7, $39) | 0;
    $44 = $43 & $_lobit_not;
    $45 = $44 | $round_1;
    $46 = $7 - 1 | 0;
    $47 = $38 + ($46 << 2) | 0;
    $48 = HEAP32[$47 >> 2] | 0;
    $49 = ($48 | 0) == 0;
    $50 = $49 & 1;
    $51 = $7 - $50 | 0;
    $wsize_0 = $51;
    $round_2 = $45;
    label = 17;
    break;
   case 11:
    $53 = ($5 | 0) == ($6 | 0);
    if ($53) {
      $wsize_0 = $7;
      $round_2 = $round_1;
      label = 17;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $55 = $7 - 1 | 0;
    $56 = $28 + ($6 << 2) | 0;
    $57 = HEAP32[$56 >> 2] | 0;
    $58 = ($55 | 0) == 0;
    if ($58) {
      $__x_1 = $57;
      $__dst_1 = $38;
      label = 16;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $_sum = $6 + 1 | 0;
    $59 = $28 + ($_sum << 2) | 0;
    $60 = $5 - 1 | 0;
    $61 = $cnt >>> 5;
    $62 = $60 - $61 | 0;
    $__x_0 = $57;
    $__src_0 = $59;
    $__dst_0 = $38;
    $__n_0 = $55;
    label = 14;
    break;
   case 14:
    $64 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $65 = $__src_0 + 4 | 0;
    $66 = HEAP32[$__src_0 >> 2] | 0;
    $67 = $__n_0 - 1 | 0;
    $68 = ($67 | 0) == 0;
    if ($68) {
      label = 15;
      break;
    } else {
      $__x_0 = $66;
      $__src_0 = $65;
      $__dst_0 = $64;
      $__n_0 = $67;
      label = 14;
      break;
    }
   case 15:
    $scevgep = $38 + ($62 << 2) | 0;
    $__x_1 = $66;
    $__dst_1 = $scevgep;
    label = 16;
    break;
   case 16:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    $wsize_0 = $7;
    $round_2 = $round_1;
    label = 17;
    break;
   case 17:
    $71 = ($round_2 | 0) == 0;
    if ($71) {
      $wsize_1 = $wsize_0;
      label = 21;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $73 = ($wsize_0 | 0) == 0;
    if ($73) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $75 = ___gmpn_add_1($38, $38, $wsize_0, 1) | 0;
    $76 = $38 + ($wsize_0 << 2) | 0;
    HEAP32[$76 >> 2] = $75;
    $77 = $75 + $wsize_0 | 0;
    $wsize_1 = $77;
    label = 21;
    break;
   case 20:
    HEAP32[$38 >> 2] = 1;
    $wsize_1 = 1;
    label = 21;
    break;
   case 21:
    $80 = -$wsize_1 | 0;
    $81 = $3 ? $wsize_1 : $80;
    $82 = $w + 4 | 0;
    HEAP32[$82 >> 2] = $81;
    label = 22;
    break;
   case 22:
    return;
  }
}
function ___gmpz_fdiv_q_2exp($w, $u, $cnt) {
  $w = $w | 0;
  $u = $u | 0;
  $cnt = $cnt | 0;
  ___gmpz_cfdiv_q_2exp($w, $u, $cnt, -1);
  return;
}
function ___gmpz_clear($m) {
  $m = $m | 0;
  FUNCTION_TABLE_vii[HEAP32[3802] & 1023](HEAP32[$m + 8 >> 2] | 0, HEAP32[$m >> 2] << 2);
  return;
}
function ___gmpz_clrbit($d, $bit_idx) {
  $d = $d | 0;
  $bit_idx = $bit_idx | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $limb_idx_0 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $zero_bound_0 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $scevgep = 0, $scevgep64 = 0, $57 = 0, $58 = 0, $59 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $80 = 0, $82 = 0, $83 = 0, $_sum = 0, $84 = 0, $__p_0 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $d + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $d + 8 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $bit_idx >>> 5;
    $6 = $bit_idx & 31;
    $7 = 1 << $6;
    $8 = ($2 | 0) > -1;
    if ($8) {
      label = 2;
      break;
    } else {
      $zero_bound_0 = 0;
      label = 8;
      break;
    }
   case 2:
    $10 = ($5 | 0) < ($2 | 0);
    if ($10) {
      label = 3;
      break;
    } else {
      label = 26;
      break;
    }
   case 3:
    $12 = $4 + ($5 << 2) | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $7 ^ -1;
    $15 = $13 & $14;
    HEAP32[$12 >> 2] = $15;
    $16 = ($15 | 0) == 0;
    if ($16) {
      label = 4;
      break;
    } else {
      label = 26;
      break;
    }
   case 4:
    $18 = $2 - 1 | 0;
    $19 = ($5 | 0) == ($18 | 0);
    if ($19) {
      $limb_idx_0 = $5;
      label = 5;
      break;
    } else {
      label = 26;
      break;
    }
   case 5:
    $20 = ($limb_idx_0 | 0) > 0;
    if ($20) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $22 = $limb_idx_0 - 1 | 0;
    $23 = $4 + ($22 << 2) | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = ($24 | 0) == 0;
    if ($25) {
      $limb_idx_0 = $22;
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    HEAP32[$1 >> 2] = $limb_idx_0;
    label = 26;
    break;
   case 8:
    $28 = $4 + ($zero_bound_0 << 2) | 0;
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = ($29 | 0) == 0;
    $31 = $zero_bound_0 + 1 | 0;
    if ($30) {
      $zero_bound_0 = $31;
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $33 = -$2 | 0;
    $34 = ($5 | 0) > ($zero_bound_0 | 0);
    if ($34) {
      label = 10;
      break;
    } else {
      label = 18;
      break;
    }
   case 10:
    $36 = ($5 | 0) < ($33 | 0);
    if ($36) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $38 = $4 + ($5 << 2) | 0;
    $39 = HEAP32[$38 >> 2] | 0;
    $40 = $39 | $7;
    HEAP32[$38 >> 2] = $40;
    label = 26;
    break;
   case 12:
    $42 = $5 + 1 | 0;
    $43 = $d | 0;
    $44 = HEAP32[$43 >> 2] | 0;
    $45 = ($42 | 0) > ($44 | 0);
    if ($45) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $47 = ___gmpz_realloc($d, $42) | 0;
    $48 = $47;
    $52 = $48;
    label = 15;
    break;
   case 14:
    $50 = HEAP32[$3 >> 2] | 0;
    $52 = $50;
    label = 15;
    break;
   case 15:
    $53 = $5 ^ -1;
    HEAP32[$1 >> 2] = $53;
    $54 = -$5 | 0;
    $55 = ($2 | 0) == ($54 | 0);
    if ($55) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $56 = -$2 | 0;
    $scevgep = $52 + ($56 << 2) | 0;
    $scevgep64 = $scevgep;
    $57 = $bit_idx >>> 5;
    $58 = $2 + $57 | 0;
    $59 = $58 << 2;
    _memset($scevgep64 | 0, 0, $59 | 0);
    label = 17;
    break;
   case 17:
    $61 = $52 + ($5 << 2) | 0;
    HEAP32[$61 >> 2] = $7;
    label = 26;
    break;
   case 18:
    $63 = ($5 | 0) == ($zero_bound_0 | 0);
    if ($63) {
      label = 19;
      break;
    } else {
      label = 26;
      break;
    }
   case 19:
    $65 = $4 + ($5 << 2) | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    $67 = $66 - 1 | 0;
    $68 = $67 | $7;
    $69 = $68 + 1 | 0;
    HEAP32[$65 >> 2] = $69;
    $70 = ($69 | 0) == 0;
    if ($70) {
      label = 20;
      break;
    } else {
      label = 26;
      break;
    }
   case 20:
    $72 = 1 - $2 | 0;
    $73 = $d | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    $75 = ($72 | 0) > ($74 | 0);
    if ($75) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    $77 = ___gmpz_realloc($d, $72) | 0;
    $78 = $77;
    $82 = $78;
    label = 23;
    break;
   case 22:
    $80 = HEAP32[$3 >> 2] | 0;
    $82 = $80;
    label = 23;
    break;
   case 23:
    $83 = $82 + ($33 << 2) | 0;
    HEAP32[$83 >> 2] = 0;
    $_sum = $5 + 1 | 0;
    $84 = $82 + ($_sum << 2) | 0;
    $__p_0 = $84;
    label = 24;
    break;
   case 24:
    $86 = $__p_0 + 4 | 0;
    $87 = HEAP32[$__p_0 >> 2] | 0;
    $88 = $87 + 1 | 0;
    HEAP32[$__p_0 >> 2] = $88;
    $89 = ($88 | 0) == 0;
    if ($89) {
      $__p_0 = $86;
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $91 = HEAP32[$83 >> 2] | 0;
    $92 = $2 - $91 | 0;
    HEAP32[$1 >> 2] = $92;
    label = 26;
    break;
   case 26:
    return;
  }
}
function ___gmpz_divexact($quot, $num, $den) {
  $quot = $quot | 0;
  $num = $num | 0;
  $den = $den | 0;
  var $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $or_cond = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $qp_0 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $qn_0 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $or_cond41 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $__n_0 = 0, $__dst_0 = 0, $qp_0_pn = 0, $__x_0 = 0, $__src_0 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $__dst_1 = 0, $__x_1 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    $1 = $num + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > -1;
    $4 = -$2 | 0;
    $5 = $3 ? $2 : $4;
    $6 = $den + 4 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($7 | 0) > -1;
    $9 = -$7 | 0;
    $10 = $8 ? $7 : $9;
    $11 = ($5 | 0) < ($10 | 0);
    if ($11) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $13 = $quot + 4 | 0;
    HEAP32[$13 >> 2] = 0;
    label = 22;
    break;
   case 3:
    $15 = $5 - $10 | 0;
    $16 = $15 + 1 | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    $17 = ($quot | 0) == ($num | 0);
    $18 = ($quot | 0) == ($den | 0);
    $or_cond = $17 | $18;
    if ($or_cond) {
      label = 4;
      break;
    } else {
      label = 8;
      break;
    }
   case 4:
    $20 = $16 << 2;
    $21 = $20 >>> 0 < 65536;
    if ($21) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $23 = STACKTOP;
    STACKTOP = STACKTOP + $20 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $27 = $23;
    label = 7;
    break;
   case 6:
    $25 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $20) | 0;
    $27 = $25;
    label = 7;
    break;
   case 7:
    $28 = $27;
    $qp_0 = $28;
    label = 11;
    break;
   case 8:
    $30 = $quot | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = ($16 | 0) > ($31 | 0);
    if ($32) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $34 = ___gmpz_realloc($quot, $16) | 0;
    $35 = $34;
    $qp_0 = $35;
    label = 11;
    break;
   case 10:
    $37 = $quot + 8 | 0;
    $38 = HEAP32[$37 >> 2] | 0;
    $qp_0 = $38;
    label = 11;
    break;
   case 11:
    $40 = $num + 8 | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    $42 = $den + 8 | 0;
    $43 = HEAP32[$42 >> 2] | 0;
    ___gmpn_divexact($qp_0, $41, $5, $43, $10);
    $qn_0 = $16;
    label = 12;
    break;
   case 12:
    $45 = ($qn_0 | 0) > 0;
    if ($45) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $47 = $qn_0 - 1 | 0;
    $48 = $qp_0 + ($47 << 2) | 0;
    $49 = HEAP32[$48 >> 2] | 0;
    $50 = ($49 | 0) == 0;
    if ($50) {
      $qn_0 = $47;
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $52 = $quot + 8 | 0;
    $53 = HEAP32[$52 >> 2] | 0;
    $54 = ($qp_0 | 0) == ($53 | 0);
    $55 = ($qn_0 | 0) == 0;
    $or_cond41 = $54 | $55;
    if ($or_cond41) {
      label = 20;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $57 = $qn_0 - 1 | 0;
    $58 = $quot | 0;
    $59 = HEAP32[$58 >> 2] | 0;
    $60 = ($qn_0 | 0) > ($59 | 0);
    if ($60) {
      label = 16;
      break;
    } else {
      $65 = $53;
      label = 17;
      break;
    }
   case 16:
    $62 = ___gmpz_realloc($quot, $qn_0) | 0;
    $63 = $62;
    $65 = $63;
    label = 17;
    break;
   case 17:
    $66 = HEAP32[$qp_0 >> 2] | 0;
    $67 = ($57 | 0) == 0;
    if ($67) {
      $__x_1 = $66;
      $__dst_1 = $65;
      label = 19;
      break;
    } else {
      $__x_0 = $66;
      $qp_0_pn = $qp_0;
      $__dst_0 = $65;
      $__n_0 = $57;
      label = 18;
      break;
    }
   case 18:
    $__src_0 = $qp_0_pn + 4 | 0;
    $68 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $69 = HEAP32[$__src_0 >> 2] | 0;
    $70 = $__n_0 - 1 | 0;
    $71 = ($70 | 0) == 0;
    if ($71) {
      $__x_1 = $69;
      $__dst_1 = $68;
      label = 19;
      break;
    } else {
      $__x_0 = $69;
      $qp_0_pn = $__src_0;
      $__dst_0 = $68;
      $__n_0 = $70;
      label = 18;
      break;
    }
   case 19:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 20;
    break;
   case 20:
    $73 = HEAP32[$1 >> 2] | 0;
    $74 = HEAP32[$6 >> 2] | 0;
    $75 = $74 ^ $73;
    $76 = ($75 | 0) > -1;
    $77 = -$qn_0 | 0;
    $78 = $76 ? $qn_0 : $77;
    $79 = $quot + 4 | 0;
    HEAP32[$79 >> 2] = $78;
    $80 = HEAP32[$__tmp_marker >> 2] | 0;
    $81 = ($80 | 0) == 0;
    if ($81) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    ___gmp_tmp_reentrant_free($80);
    label = 22;
    break;
   case 22:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpz_divexact_ui($dst, $src, $divisor) {
  $dst = $dst | 0;
  $src = $src | 0;
  $divisor = $divisor | 0;
  var $1 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($divisor | 0) == 0;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    ___gmp_divide_by_zero();
   case 3:
    $4 = $src + 4 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($5 | 0) == 0;
    if ($6) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $8 = $dst + 4 | 0;
    HEAP32[$8 >> 2] = 0;
    label = 9;
    break;
   case 5:
    $10 = ($5 | 0) > -1;
    $11 = -$5 | 0;
    $12 = $10 ? $5 : $11;
    $13 = $dst | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = ($12 | 0) > ($14 | 0);
    if ($15) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $17 = ___gmpz_realloc($dst, $12) | 0;
    $18 = $17;
    $23 = $18;
    label = 8;
    break;
   case 7:
    $20 = $dst + 8 | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    $23 = $21;
    label = 8;
    break;
   case 8:
    $24 = $src + 8 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    ___gmpn_divexact_1($23, $25, $12, $divisor);
    $26 = $12 - 1 | 0;
    $27 = $23 + ($26 << 2) | 0;
    $28 = HEAP32[$27 >> 2] | 0;
    $29 = ($28 | 0) == 0;
    $30 = $29 & 1;
    $31 = $12 - $30 | 0;
    $32 = -$31 | 0;
    $33 = $10 ? $31 : $32;
    $34 = $dst + 4 | 0;
    HEAP32[$34 >> 2] = $33;
    label = 9;
    break;
   case 9:
    return;
  }
}
function ___gmpz_fits_ulong_p($__gmp_z) {
  $__gmp_z = $__gmp_z | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $_ = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $__gmp_z + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) == 0;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = ($2 | 0) == 1;
    $_ = $5 & 1;
    return $_ | 0;
   case 3:
    return 1;
  }
  return 0;
}
function ___gmpz_get_si($z) {
  $z = $z | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $10 = 0, $12 = 0, $_not = 0, $13 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $z + 8 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $z + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = HEAP32[$2 >> 2] | 0;
    $6 = ($4 | 0) > 0;
    if ($6) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $8 = $5 & 2147483647;
    $_0 = $8;
    label = 5;
    break;
   case 3:
    $10 = ($4 | 0) < 0;
    if ($10) {
      label = 4;
      break;
    } else {
      $_0 = 0;
      label = 5;
      break;
    }
   case 4:
    $12 = $5 + 2147483647 | 0;
    $_not = $12 | -2147483648;
    $13 = $_not ^ 2147483647;
    $_0 = $13;
    label = 5;
    break;
   case 5:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpz_export($data, $countp, $order, $size, $endian, $nail, $z) {
  $data = $data | 0;
  $countp = $countp | 0;
  $order = $order | 0;
  $size = $size | 0;
  $endian = $endian | 0;
  $nail = $nail | 0;
  $z = $z | 0;
  var $dummy = 0, $1 = 0, $dummy_countp = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $_0132 = 0, $42 = 0, $_endian = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $or_cond = 0, $47 = 0, $or_cond137 = 0, $49 = 0, $50 = 0, $or_cond138 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $scevgep = 0, $__x_0 = 0, $_pn = 0, $__dst_0 = 0, $__n_0 = 0, $__src_0 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $scevgep183 = 0, $__x_1 = 0, $__dst_1 = 0, $77 = 0, $or_cond139 = 0, $79 = 0, $_sum136 = 0, $80 = 0, $81 = 0, $__i_0146 = 0, $__src2_0145 = 0, $__dst1_0144 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $or_cond140 = 0, $91 = 0, $92 = 0, $__i6_0150 = 0, $__src4_0149 = 0, $__dst3_0148 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or_cond141 = 0, $102 = 0, $_sum135 = 0, $103 = 0, $104 = 0, $__i10_0155 = 0, $__src9_0154 = 0, $__dst7_0153 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $_ = 0, $_sum = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $smax = 0, $143 = 0, $144 = 0, $lbits_0181 = 0, $dp_0180 = 0, $zp_0179 = 0, $i_0178 = 0, $limb_0177 = 0, $lbits_1164 = 0, $dp_1162 = 0, $zp_1161 = 0, $j_0160 = 0, $limb_1159 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $153 = 0, $154 = 0, $zp_2 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $limb_2 = 0, $zp_3 = 0, $lbits_2 = 0, $164 = 0, $165 = 0, $166 = 0, $scevgep185 = 0, $lbits_1_lcssa = 0, $dp_1_lcssa = 0, $zp_1_lcssa = 0, $j_0_lcssa = 0, $limb_1_lcssa = 0, $169 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $176 = 0, $178 = 0, $179 = 0, $zp_4 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $limb_3 = 0, $zp_5 = 0, $lbits_3 = 0, $190 = 0, $191 = 0, $limb_4_ph = 0, $j_1_ph = 0, $zp_6_ph = 0, $dp_2_ph = 0, $lbits_4_ph = 0, $192 = 0, $193 = 0, $194 = 0, $dp_2172 = 0, $j_1171 = 0, $196 = 0, $197 = 0, $exitcond = 0, $scevgep186 = 0, $dp_2_lcssa = 0, $199 = 0, $200 = 0, $201 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $dummy = __stackBase__ | 0;
    $1 = ($countp | 0) == 0;
    $dummy_countp = $1 ? $dummy : $countp;
    $2 = $z + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($3 | 0) == 0;
    if ($4) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    HEAP32[$dummy_countp >> 2] = 0;
    $_0 = $data;
    label = 52;
    break;
   case 3:
    $7 = ($3 | 0) > -1;
    $8 = -$3 | 0;
    $9 = $7 ? $3 : $8;
    $10 = $z + 8 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $size << 3;
    $13 = $12 - $nail | 0;
    $14 = $9 - 1 | 0;
    $15 = $11 + ($14 << 2) | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $16 >>> 0 < 65536;
    if ($17) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $19 = $16 >>> 0 < 256;
    $20 = $19 ? 1 : 9;
    $25 = $20;
    label = 6;
    break;
   case 5:
    $22 = $16 >>> 0 < 16777216;
    $23 = $22 ? 17 : 25;
    $25 = $23;
    label = 6;
    break;
   case 6:
    $26 = $16 >>> ($25 >>> 0);
    $27 = $26 + 9696 | 0;
    $28 = HEAP8[$27] | 0;
    $29 = $28 & 255;
    $30 = $9 << 5;
    $31 = $13 - 34 | 0;
    $32 = $31 + $30 | 0;
    $33 = $32 + $25 | 0;
    $34 = $33 + $29 | 0;
    $35 = ($34 >>> 0) / ($13 >>> 0) >>> 0;
    HEAP32[$dummy_countp >> 2] = $35;
    $36 = ($data | 0) == 0;
    if ($36) {
      label = 7;
      break;
    } else {
      $_0132 = $data;
      label = 8;
      break;
    }
   case 7:
    $38 = HEAP32[3962] | 0;
    $39 = Math_imul($35, $size);
    $40 = FUNCTION_TABLE_ii[$38 & 1023]($39) | 0;
    $_0132 = $40;
    label = 8;
    break;
   case 8:
    $42 = ($endian | 0) == 0;
    $_endian = $42 ? -1 : $endian;
    $43 = $_0132;
    $44 = $43 & 3;
    $45 = ($nail | 0) == 0;
    $46 = ($size | 0) == 4;
    $or_cond = $45 & $46;
    $47 = ($44 | 0) == 0;
    $or_cond137 = $or_cond & $47;
    if ($or_cond137) {
      label = 9;
      break;
    } else {
      label = 28;
      break;
    }
   case 9:
    $49 = ($order | 0) == -1;
    $50 = ($_endian | 0) == -1;
    $or_cond138 = $49 & $50;
    if ($or_cond138) {
      label = 10;
      break;
    } else {
      label = 16;
      break;
    }
   case 10:
    $52 = ($35 | 0) == 0;
    if ($52) {
      $_0 = $_0132;
      label = 52;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $54 = $35 - 1 | 0;
    $55 = $_0132;
    $56 = HEAP32[$11 >> 2] | 0;
    $57 = ($54 | 0) == 0;
    if ($57) {
      $__dst_1 = $55;
      $__x_1 = $56;
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $58 = $9 << 5;
    $59 = $25 | $58;
    $60 = $size << 3;
    $61 = $59 + $60 | 0;
    $62 = $28 & 255;
    $63 = $61 + $62 | 0;
    $64 = $63 - 34 | 0;
    $65 = $64 - $nail | 0;
    $66 = $60 - $nail | 0;
    $67 = ($65 >>> 0) / ($66 >>> 0) >>> 0;
    $68 = $67 << 2;
    $69 = $68 - 4 | 0;
    $scevgep = $_0132 + $69 | 0;
    $__n_0 = $54;
    $__dst_0 = $55;
    $_pn = $11;
    $__x_0 = $56;
    label = 13;
    break;
   case 13:
    $__src_0 = $_pn + 4 | 0;
    $71 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $72 = HEAP32[$__src_0 >> 2] | 0;
    $73 = $__n_0 - 1 | 0;
    $74 = ($73 | 0) == 0;
    if ($74) {
      label = 14;
      break;
    } else {
      $__n_0 = $73;
      $__dst_0 = $71;
      $_pn = $__src_0;
      $__x_0 = $72;
      label = 13;
      break;
    }
   case 14:
    $scevgep183 = $scevgep;
    $__dst_1 = $scevgep183;
    $__x_1 = $72;
    label = 15;
    break;
   case 15:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    $_0 = $_0132;
    label = 52;
    break;
   case 16:
    $77 = ($order | 0) == 1;
    $or_cond139 = $77 & $50;
    if ($or_cond139) {
      label = 17;
      break;
    } else {
      label = 20;
      break;
    }
   case 17:
    $79 = ($35 | 0) > 0;
    if ($79) {
      label = 18;
      break;
    } else {
      $_0 = $_0132;
      label = 52;
      break;
    }
   case 18:
    $_sum136 = $35 - 1 | 0;
    $80 = $11 + ($_sum136 << 2) | 0;
    $81 = $_0132;
    $__dst1_0144 = $81;
    $__src2_0145 = $80;
    $__i_0146 = 0;
    label = 19;
    break;
   case 19:
    $83 = HEAP32[$__src2_0145 >> 2] | 0;
    HEAP32[$__dst1_0144 >> 2] = $83;
    $84 = $__dst1_0144 + 4 | 0;
    $85 = $__src2_0145 - 4 | 0;
    $86 = $__i_0146 + 1 | 0;
    $87 = ($86 | 0) < ($35 | 0);
    if ($87) {
      $__dst1_0144 = $84;
      $__src2_0145 = $85;
      $__i_0146 = $86;
      label = 19;
      break;
    } else {
      $_0 = $_0132;
      label = 52;
      break;
    }
   case 20:
    $89 = ($_endian | 0) == 1;
    $or_cond140 = $49 & $89;
    if ($or_cond140) {
      label = 21;
      break;
    } else {
      label = 24;
      break;
    }
   case 21:
    $91 = ($35 | 0) > 0;
    if ($91) {
      label = 22;
      break;
    } else {
      $_0 = $_0132;
      label = 52;
      break;
    }
   case 22:
    $92 = $_0132;
    $__dst3_0148 = $92;
    $__src4_0149 = $11;
    $__i6_0150 = 0;
    label = 23;
    break;
   case 23:
    $94 = HEAP32[$__src4_0149 >> 2] | 0;
    $95 = _llvm_bswap_i32($94 | 0) | 0;
    HEAP32[$__dst3_0148 >> 2] = $95;
    $96 = $__dst3_0148 + 4 | 0;
    $97 = $__src4_0149 + 4 | 0;
    $98 = $__i6_0150 + 1 | 0;
    $99 = ($98 | 0) < ($35 | 0);
    if ($99) {
      $__dst3_0148 = $96;
      $__src4_0149 = $97;
      $__i6_0150 = $98;
      label = 23;
      break;
    } else {
      $_0 = $_0132;
      label = 52;
      break;
    }
   case 24:
    $or_cond141 = $77 & $89;
    if ($or_cond141) {
      label = 25;
      break;
    } else {
      label = 28;
      break;
    }
   case 25:
    $102 = ($35 | 0) > 0;
    if ($102) {
      label = 26;
      break;
    } else {
      $_0 = $_0132;
      label = 52;
      break;
    }
   case 26:
    $_sum135 = $35 - 1 | 0;
    $103 = $11 + ($_sum135 << 2) | 0;
    $104 = $_0132;
    $__dst7_0153 = $104;
    $__src9_0154 = $103;
    $__i10_0155 = 0;
    label = 27;
    break;
   case 27:
    $106 = HEAP32[$__src9_0154 >> 2] | 0;
    $107 = _llvm_bswap_i32($106 | 0) | 0;
    HEAP32[$__dst7_0153 >> 2] = $107;
    $108 = $__dst7_0153 + 4 | 0;
    $109 = $__src9_0154 - 4 | 0;
    $110 = $__i10_0155 + 1 | 0;
    $111 = ($110 | 0) < ($35 | 0);
    if ($111) {
      $__dst7_0153 = $108;
      $__src9_0154 = $109;
      $__i10_0155 = $110;
      label = 27;
      break;
    } else {
      $_0 = $_0132;
      label = 52;
      break;
    }
   case 28:
    $113 = $13 >>> 3;
    $114 = $13 & 7;
    $115 = 1 << $114;
    $116 = $115 - 1 | 0;
    $117 = ($_endian | 0) > -1;
    $118 = -$size | 0;
    $119 = $117 ? $size : $118;
    $120 = ($order | 0) < 0;
    $121 = $120 ? $size : $118;
    $122 = $119 + $121 | 0;
    $123 = ($order | 0) > -1;
    if ($123) {
      label = 29;
      break;
    } else {
      $128 = 0;
      label = 30;
      break;
    }
   case 29:
    $125 = $35 - 1 | 0;
    $126 = Math_imul($125, $size);
    $128 = $126;
    label = 30;
    break;
   case 30:
    $129 = $11 + ($9 << 2) | 0;
    $130 = ($35 | 0) == 0;
    if ($130) {
      $_0 = $_0132;
      label = 52;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    $131 = $size - 1 | 0;
    $_ = $117 ? $131 : 0;
    $_sum = $128 + $_ | 0;
    $132 = $_0132 + $_sum | 0;
    $133 = ($113 | 0) == 0;
    $134 = ($114 | 0) == 0;
    $135 = 32 - $114 | 0;
    $136 = -$_endian | 0;
    $137 = -$_endian | 0;
    $138 = -$_endian | 0;
    $139 = $size << 3;
    $140 = $139 - $nail | 0;
    $141 = $140 >>> 3;
    $142 = $141 >>> 0 > 1;
    $smax = $142 ? $141 : 1;
    $143 = Math_imul($_endian, $smax);
    $144 = -$143 | 0;
    $limb_0177 = 0;
    $i_0178 = 0;
    $zp_0179 = $11;
    $dp_0180 = $132;
    $lbits_0181 = 0;
    label = 32;
    break;
   case 32:
    if ($133) {
      $limb_1_lcssa = $limb_0177;
      $j_0_lcssa = 0;
      $zp_1_lcssa = $zp_0179;
      $dp_1_lcssa = $dp_0180;
      $lbits_1_lcssa = $lbits_0181;
      label = 40;
      break;
    } else {
      $limb_1159 = $limb_0177;
      $j_0160 = 0;
      $zp_1161 = $zp_0179;
      $dp_1162 = $dp_0180;
      $lbits_1164 = $lbits_0181;
      label = 33;
      break;
    }
   case 33:
    $145 = ($lbits_1164 | 0) > 7;
    if ($145) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    $147 = $limb_1159 & 255;
    HEAP8[$dp_1162] = $147;
    $148 = $limb_1159 >>> 8;
    $149 = $lbits_1164 - 8 | 0;
    $lbits_2 = $149;
    $zp_3 = $zp_1161;
    $limb_2 = $148;
    label = 38;
    break;
   case 35:
    $151 = ($zp_1161 | 0) == ($129 | 0);
    if ($151) {
      $156 = 0;
      $zp_2 = $zp_1161;
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    $153 = $zp_1161 + 4 | 0;
    $154 = HEAP32[$zp_1161 >> 2] | 0;
    $156 = $154;
    $zp_2 = $153;
    label = 37;
    break;
   case 37:
    $157 = $156 << $lbits_1164;
    $158 = $157 | $limb_1159;
    $159 = $158 & 255;
    HEAP8[$dp_1162] = $159;
    $160 = 8 - $lbits_1164 | 0;
    $161 = $156 >>> ($160 >>> 0);
    $162 = $lbits_1164 + 24 | 0;
    $lbits_2 = $162;
    $zp_3 = $zp_2;
    $limb_2 = $161;
    label = 38;
    break;
   case 38:
    $164 = $dp_1162 + $138 | 0;
    $165 = $j_0160 + 1 | 0;
    $166 = ($165 | 0) < ($113 | 0);
    if ($166) {
      $limb_1159 = $limb_2;
      $j_0160 = $165;
      $zp_1161 = $zp_3;
      $dp_1162 = $164;
      $lbits_1164 = $lbits_2;
      label = 33;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    $scevgep185 = $dp_0180 + $144 | 0;
    $limb_1_lcssa = $limb_2;
    $j_0_lcssa = $smax;
    $zp_1_lcssa = $zp_3;
    $dp_1_lcssa = $scevgep185;
    $lbits_1_lcssa = $lbits_2;
    label = 40;
    break;
   case 40:
    if ($134) {
      $lbits_4_ph = $lbits_1_lcssa;
      $dp_2_ph = $dp_1_lcssa;
      $zp_6_ph = $zp_1_lcssa;
      $j_1_ph = $j_0_lcssa;
      $limb_4_ph = $limb_1_lcssa;
      label = 47;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $169 = ($lbits_1_lcssa | 0) < ($114 | 0);
    if ($169) {
      label = 43;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    $171 = $limb_1_lcssa & $116;
    $172 = $171 & 255;
    HEAP8[$dp_1_lcssa] = $172;
    $173 = $limb_1_lcssa >>> ($114 >>> 0);
    $174 = $lbits_1_lcssa - $114 | 0;
    $lbits_3 = $174;
    $zp_5 = $zp_1_lcssa;
    $limb_3 = $173;
    label = 46;
    break;
   case 43:
    $176 = ($zp_1_lcssa | 0) == ($129 | 0);
    if ($176) {
      $181 = 0;
      $zp_4 = $zp_1_lcssa;
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    $178 = $zp_1_lcssa + 4 | 0;
    $179 = HEAP32[$zp_1_lcssa >> 2] | 0;
    $181 = $179;
    $zp_4 = $178;
    label = 45;
    break;
   case 45:
    $182 = $181 << $lbits_1_lcssa;
    $183 = $182 | $limb_1_lcssa;
    $184 = $183 & $116;
    $185 = $184 & 255;
    HEAP8[$dp_1_lcssa] = $185;
    $186 = $114 - $lbits_1_lcssa | 0;
    $187 = $181 >>> ($186 >>> 0);
    $188 = $135 + $lbits_1_lcssa | 0;
    $lbits_3 = $188;
    $zp_5 = $zp_4;
    $limb_3 = $187;
    label = 46;
    break;
   case 46:
    $190 = $dp_1_lcssa + $136 | 0;
    $191 = $j_0_lcssa + 1 | 0;
    $lbits_4_ph = $lbits_3;
    $dp_2_ph = $190;
    $zp_6_ph = $zp_5;
    $j_1_ph = $191;
    $limb_4_ph = $limb_3;
    label = 47;
    break;
   case 47:
    $192 = $j_1_ph >>> 0 < $size >>> 0;
    if ($192) {
      label = 48;
      break;
    } else {
      $dp_2_lcssa = $dp_2_ph;
      label = 51;
      break;
    }
   case 48:
    $193 = $j_1_ph - $size | 0;
    $194 = Math_imul($_endian, $193);
    $j_1171 = $j_1_ph;
    $dp_2172 = $dp_2_ph;
    label = 49;
    break;
   case 49:
    HEAP8[$dp_2172] = 0;
    $196 = $dp_2172 + $137 | 0;
    $197 = $j_1171 + 1 | 0;
    $exitcond = ($197 | 0) == ($size | 0);
    if ($exitcond) {
      label = 50;
      break;
    } else {
      $j_1171 = $197;
      $dp_2172 = $196;
      label = 49;
      break;
    }
   case 50:
    $scevgep186 = $dp_2_ph + $194 | 0;
    $dp_2_lcssa = $scevgep186;
    label = 51;
    break;
   case 51:
    $199 = $dp_2_lcssa + $122 | 0;
    $200 = $i_0178 + 1 | 0;
    $201 = $200 >>> 0 < $35 >>> 0;
    if ($201) {
      $limb_0177 = $limb_4_ph;
      $i_0178 = $200;
      $zp_0179 = $zp_6_ph;
      $dp_0180 = $199;
      $lbits_0181 = $lbits_4_ph;
      label = 32;
      break;
    } else {
      $_0 = $_0132;
      label = 52;
      break;
    }
   case 52:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function ___gmpz_gcdext($g, $s, $t, $a, $b) {
  $g = $g | 0;
  $s = $s | 0;
  $t = $t | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $tmp_ssize = 0, $__tmp_marker = 0, $x = 0, $gtmp = 0, $stmp = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $_ = 0, $_107 = 0, $a_b = 0, $b_a = 0, $s_t = 0, $t_s = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $smax = 0, $41 = 0, $__n_0 = 0, $__dst_0 = 0, $_pn106 = 0, $__x_0 = 0, $__src_0 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $49 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $smax136 = 0, $79 = 0, $80 = 0, $scevgep137 = 0, $__n1_0 = 0, $__dst2_0 = 0, $_pn105 = 0, $__x4_0 = 0, $__src3_0 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $scevgep137138 = 0, $__dst2_1 = 0, $__x4_1 = 0, $factor139 = 0, $88 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $smax131 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $smax132 = 0, $101 = 0, $102 = 0, $scevgep133 = 0, $__n5_0 = 0, $__dst6_0 = 0, $_pn = 0, $__x8_0 = 0, $__src7_0 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $scevgep133134 = 0, $__dst6_1 = 0, $__x8_1 = 0, $factor = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $143 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $153 = 0, $154 = 0, $155 = 0, $157 = 0, $158 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $_sum = 0, $169 = 0, $170 = 0, $__n10_0 = 0, $__dst11_0 = 0, $__src12_0 = 0, $__x13_0 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $scevgep129 = 0, $__dst11_1 = 0, $__x13_1 = 0, $179 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $189 = 0, $190 = 0, $192 = 0, $193 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $200 = 0, $__n14_0 = 0, $__dst15_0 = 0, $__src16_0 = 0, $__x17_0 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $scevgep127 = 0, $__dst15_1 = 0, $__x17_1 = 0, $209 = 0, $210 = 0, $211 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $tmp_ssize = __stackBase__ | 0;
    $__tmp_marker = __stackBase__ + 8 | 0;
    $x = __stackBase__ + 16 | 0;
    $gtmp = __stackBase__ + 32 | 0;
    $stmp = __stackBase__ + 48 | 0;
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > -1;
    $4 = -$2 | 0;
    $5 = $3 ? $2 : $4;
    $6 = $b + 4 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($7 | 0) > -1;
    $9 = -$7 | 0;
    $10 = $8 ? $7 : $9;
    $11 = ($5 | 0) < ($10 | 0);
    $_ = $11 ? $5 : $10;
    $_107 = $11 ? $10 : $5;
    $a_b = $11 ? $a : $b;
    $b_a = $11 ? $b : $a;
    $s_t = $11 ? $s : $t;
    $t_s = $11 ? $t : $s;
    $12 = ($_ | 0) == 0;
    if ($12) {
      label = 2;
      break;
    } else {
      label = 17;
      break;
    }
   case 2:
    $14 = $b_a + 4 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = ($15 | 0) > -1;
    if ($16) {
      label = 3;
      break;
    } else {
      $21 = -1;
      label = 4;
      break;
    }
   case 3:
    $18 = ($_107 | 0) != 0;
    $19 = $18 & 1;
    $21 = $19;
    label = 4;
    break;
   case 4:
    $22 = $g | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = ($_107 | 0) > ($23 | 0);
    if ($24) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $26 = ___gmpz_realloc($g, $_107) | 0;
    $27 = $26;
    $32 = $27;
    label = 7;
    break;
   case 6:
    $29 = $g + 8 | 0;
    $30 = HEAP32[$29 >> 2] | 0;
    $32 = $30;
    label = 7;
    break;
   case 7:
    $33 = ($_107 | 0) == 0;
    if ($33) {
      label = 13;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $35 = $_107 - 1 | 0;
    $36 = $b_a + 8 | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    $38 = HEAP32[$37 >> 2] | 0;
    $39 = ($35 | 0) == 0;
    if ($39) {
      $__x_1 = $38;
      $__dst_1 = $32;
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $40 = ($5 | 0) > ($10 | 0);
    $smax = $40 ? $5 : $10;
    $41 = $smax - 1 | 0;
    $__x_0 = $38;
    $_pn106 = $37;
    $__dst_0 = $32;
    $__n_0 = $35;
    label = 10;
    break;
   case 10:
    $__src_0 = $_pn106 + 4 | 0;
    $43 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $44 = HEAP32[$__src_0 >> 2] | 0;
    $45 = $__n_0 - 1 | 0;
    $46 = ($45 | 0) == 0;
    if ($46) {
      label = 11;
      break;
    } else {
      $__x_0 = $44;
      $_pn106 = $__src_0;
      $__dst_0 = $43;
      $__n_0 = $45;
      label = 10;
      break;
    }
   case 11:
    $scevgep = $32 + ($41 << 2) | 0;
    $__x_1 = $44;
    $__dst_1 = $scevgep;
    label = 12;
    break;
   case 12:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 13;
    break;
   case 13:
    $49 = $g + 4 | 0;
    HEAP32[$49 >> 2] = $_107;
    $50 = ($s_t | 0) == 0;
    if ($50) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $52 = $s_t + 4 | 0;
    HEAP32[$52 >> 2] = 0;
    label = 15;
    break;
   case 15:
    $54 = ($t_s | 0) == 0;
    if ($54) {
      label = 62;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $56 = $t_s + 4 | 0;
    HEAP32[$56 >> 2] = $21;
    $57 = $t_s + 8 | 0;
    $58 = HEAP32[$57 >> 2] | 0;
    HEAP32[$58 >> 2] = 1;
    label = 62;
    break;
   case 17:
    HEAP32[$__tmp_marker >> 2] = 0;
    $60 = $_107 + $_ | 0;
    $61 = $60 << 2;
    $62 = $61 >>> 0 < 65536;
    if ($62) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    $64 = STACKTOP;
    STACKTOP = STACKTOP + $61 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $68 = $64;
    label = 20;
    break;
   case 19:
    $66 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $61) | 0;
    $68 = $66;
    label = 20;
    break;
   case 20:
    $69 = $68;
    $70 = $69 + ($_107 << 2) | 0;
    $71 = ($_107 | 0) == 0;
    if ($71) {
      label = 26;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $73 = $_107 - 1 | 0;
    $74 = $b_a + 8 | 0;
    $75 = HEAP32[$74 >> 2] | 0;
    $76 = HEAP32[$75 >> 2] | 0;
    $77 = ($73 | 0) == 0;
    if ($77) {
      $__x4_1 = $76;
      $__dst2_1 = $69;
      label = 25;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $78 = ($5 | 0) > ($10 | 0);
    $smax136 = $78 ? $5 : $10;
    $79 = $smax136 << 2;
    $80 = $79 - 4 | 0;
    $scevgep137 = $68 + $80 | 0;
    $__x4_0 = $76;
    $_pn105 = $75;
    $__dst2_0 = $69;
    $__n1_0 = $73;
    label = 23;
    break;
   case 23:
    $__src3_0 = $_pn105 + 4 | 0;
    $82 = $__dst2_0 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    $83 = HEAP32[$__src3_0 >> 2] | 0;
    $84 = $__n1_0 - 1 | 0;
    $85 = ($84 | 0) == 0;
    if ($85) {
      label = 24;
      break;
    } else {
      $__x4_0 = $83;
      $_pn105 = $__src3_0;
      $__dst2_0 = $82;
      $__n1_0 = $84;
      label = 23;
      break;
    }
   case 24:
    $scevgep137138 = $scevgep137;
    $__x4_1 = $83;
    $__dst2_1 = $scevgep137138;
    label = 25;
    break;
   case 25:
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    label = 26;
    break;
   case 26:
    if ($12) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    $factor139 = $_ << 3;
    $88 = $factor139 | 4;
    $112 = $88;
    label = 33;
    break;
   case 28:
    $90 = $_ - 1 | 0;
    $91 = $a_b + 8 | 0;
    $92 = HEAP32[$91 >> 2] | 0;
    $93 = HEAP32[$92 >> 2] | 0;
    $94 = ($90 | 0) == 0;
    if ($94) {
      $__x8_1 = $93;
      $__dst6_1 = $70;
      label = 32;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $95 = ($5 | 0) > ($10 | 0);
    $smax131 = $95 ? $5 : $10;
    $96 = $smax131 << 2;
    $97 = $96 - 8 | 0;
    $98 = $5 ^ -1;
    $99 = $10 ^ -1;
    $100 = ($98 | 0) > ($99 | 0);
    $smax132 = $100 ? $98 : $99;
    $101 = $smax132 << 2;
    $102 = $97 - $101 | 0;
    $scevgep133 = $68 + $102 | 0;
    $__x8_0 = $93;
    $_pn = $92;
    $__dst6_0 = $70;
    $__n5_0 = $90;
    label = 30;
    break;
   case 30:
    $__src7_0 = $_pn + 4 | 0;
    $104 = $__dst6_0 + 4 | 0;
    HEAP32[$__dst6_0 >> 2] = $__x8_0;
    $105 = HEAP32[$__src7_0 >> 2] | 0;
    $106 = $__n5_0 - 1 | 0;
    $107 = ($106 | 0) == 0;
    if ($107) {
      label = 31;
      break;
    } else {
      $__x8_0 = $105;
      $_pn = $__src7_0;
      $__dst6_0 = $104;
      $__n5_0 = $106;
      label = 30;
      break;
    }
   case 31:
    $scevgep133134 = $scevgep133;
    $__x8_1 = $105;
    $__dst6_1 = $scevgep133134;
    label = 32;
    break;
   case 32:
    HEAP32[$__dst6_1 >> 2] = $__x8_1;
    $factor = $_ << 3;
    $109 = $factor | 4;
    $110 = $109 >>> 0 < 65536;
    if ($110) {
      $112 = $109;
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    $113 = STACKTOP;
    STACKTOP = STACKTOP + $112 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $117 = $113;
    label = 35;
    break;
   case 34:
    $115 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $109) | 0;
    $117 = $115;
    label = 35;
    break;
   case 35:
    $118 = $117;
    $119 = $118 + ($_ << 2) | 0;
    $120 = ___gmpn_gcdext($118, $119, $tmp_ssize, $69, $_107, $70, $_) | 0;
    $121 = HEAP32[$tmp_ssize >> 2] | 0;
    $122 = ($121 | 0) > -1;
    $123 = -$121 | 0;
    $124 = $122 ? $121 : $123;
    $125 = $b_a + 4 | 0;
    $126 = HEAP32[$125 >> 2] | 0;
    $127 = ($126 | 0) > -1;
    $128 = $127 ? $121 : $123;
    HEAP32[$tmp_ssize >> 2] = $128;
    $129 = ($s_t | 0) == 0;
    if ($129) {
      label = 40;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    $131 = $gtmp + 8 | 0;
    HEAP32[$131 >> 2] = $118;
    $132 = $gtmp + 4 | 0;
    HEAP32[$132 >> 2] = $120;
    $133 = $stmp + 8 | 0;
    HEAP32[$133 >> 2] = $119;
    $134 = HEAP32[$tmp_ssize >> 2] | 0;
    $135 = $stmp + 4 | 0;
    HEAP32[$135 >> 2] = $134;
    $136 = $x | 0;
    $137 = $_107 + 1 | 0;
    $138 = $137 + $124 | 0;
    $139 = $x | 0;
    HEAP32[$139 >> 2] = $138;
    $140 = $138 << 2;
    $141 = $140 >>> 0 < 65536;
    if ($141) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    $143 = STACKTOP;
    STACKTOP = STACKTOP + $140 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $147 = $143;
    label = 39;
    break;
   case 38:
    $145 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $140) | 0;
    $147 = $145;
    label = 39;
    break;
   case 39:
    $148 = $147;
    $149 = $x + 8 | 0;
    HEAP32[$149 >> 2] = $148;
    ___gmpz_mul($136, $stmp, $b_a);
    ___gmpz_sub($136, $gtmp, $136);
    ___gmpz_divexact($s_t, $136, $a_b);
    label = 40;
    break;
   case 40:
    $151 = ($t_s | 0) == 0;
    if ($151) {
      label = 51;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $153 = $t_s | 0;
    $154 = HEAP32[$153 >> 2] | 0;
    $155 = ($124 | 0) > ($154 | 0);
    if ($155) {
      label = 42;
      break;
    } else {
      label = 43;
      break;
    }
   case 42:
    $157 = ___gmpz_realloc($t_s, $124) | 0;
    $158 = $157;
    $163 = $158;
    label = 44;
    break;
   case 43:
    $160 = $t_s + 8 | 0;
    $161 = HEAP32[$160 >> 2] | 0;
    $163 = $161;
    label = 44;
    break;
   case 44:
    $164 = ($121 | 0) == 0;
    if ($164) {
      label = 50;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    $166 = $124 - 1 | 0;
    $167 = HEAP32[$119 >> 2] | 0;
    $168 = ($166 | 0) == 0;
    if ($168) {
      $__x13_1 = $167;
      $__dst11_1 = $163;
      label = 49;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    $_sum = $_ + 1 | 0;
    $169 = $118 + ($_sum << 2) | 0;
    $170 = $124 - 1 | 0;
    $__x13_0 = $167;
    $__src12_0 = $169;
    $__dst11_0 = $163;
    $__n10_0 = $166;
    label = 47;
    break;
   case 47:
    $172 = $__dst11_0 + 4 | 0;
    HEAP32[$__dst11_0 >> 2] = $__x13_0;
    $173 = $__src12_0 + 4 | 0;
    $174 = HEAP32[$__src12_0 >> 2] | 0;
    $175 = $__n10_0 - 1 | 0;
    $176 = ($175 | 0) == 0;
    if ($176) {
      label = 48;
      break;
    } else {
      $__x13_0 = $174;
      $__src12_0 = $173;
      $__dst11_0 = $172;
      $__n10_0 = $175;
      label = 47;
      break;
    }
   case 48:
    $scevgep129 = $163 + ($170 << 2) | 0;
    $__x13_1 = $174;
    $__dst11_1 = $scevgep129;
    label = 49;
    break;
   case 49:
    HEAP32[$__dst11_1 >> 2] = $__x13_1;
    label = 50;
    break;
   case 50:
    $179 = HEAP32[$tmp_ssize >> 2] | 0;
    $180 = $t_s + 4 | 0;
    HEAP32[$180 >> 2] = $179;
    label = 51;
    break;
   case 51:
    $182 = $g | 0;
    $183 = HEAP32[$182 >> 2] | 0;
    $184 = ($120 | 0) > ($183 | 0);
    if ($184) {
      label = 52;
      break;
    } else {
      label = 53;
      break;
    }
   case 52:
    $186 = ___gmpz_realloc($g, $120) | 0;
    $187 = $186;
    $192 = $187;
    label = 54;
    break;
   case 53:
    $189 = $g + 8 | 0;
    $190 = HEAP32[$189 >> 2] | 0;
    $192 = $190;
    label = 54;
    break;
   case 54:
    $193 = ($120 | 0) == 0;
    if ($193) {
      label = 60;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    $195 = $120 - 1 | 0;
    $196 = HEAP32[$118 >> 2] | 0;
    $197 = ($195 | 0) == 0;
    if ($197) {
      $__x17_1 = $196;
      $__dst15_1 = $192;
      label = 59;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    $198 = $117 + 4 | 0;
    $199 = $198;
    $200 = $120 - 1 | 0;
    $__x17_0 = $196;
    $__src16_0 = $199;
    $__dst15_0 = $192;
    $__n14_0 = $195;
    label = 57;
    break;
   case 57:
    $202 = $__dst15_0 + 4 | 0;
    HEAP32[$__dst15_0 >> 2] = $__x17_0;
    $203 = $__src16_0 + 4 | 0;
    $204 = HEAP32[$__src16_0 >> 2] | 0;
    $205 = $__n14_0 - 1 | 0;
    $206 = ($205 | 0) == 0;
    if ($206) {
      label = 58;
      break;
    } else {
      $__x17_0 = $204;
      $__src16_0 = $203;
      $__dst15_0 = $202;
      $__n14_0 = $205;
      label = 57;
      break;
    }
   case 58:
    $scevgep127 = $192 + ($200 << 2) | 0;
    $__x17_1 = $204;
    $__dst15_1 = $scevgep127;
    label = 59;
    break;
   case 59:
    HEAP32[$__dst15_1 >> 2] = $__x17_1;
    label = 60;
    break;
   case 60:
    $209 = $g + 4 | 0;
    HEAP32[$209 >> 2] = $120;
    $210 = HEAP32[$__tmp_marker >> 2] | 0;
    $211 = ($210 | 0) == 0;
    if ($211) {
      label = 62;
      break;
    } else {
      label = 61;
      break;
    }
   case 61:
    ___gmp_tmp_reentrant_free($210);
    label = 62;
    break;
   case 62:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpz_get_ui($__gmp_z) {
  $__gmp_z = $__gmp_z | 0;
  return ((HEAP32[$__gmp_z + 4 >> 2] | 0) != 0 ? HEAP32[HEAP32[$__gmp_z + 8 >> 2] >> 2] | 0 : 0) | 0;
}
function ___gmpz_get_str($res_str, $base, $x) {
  $res_str = $res_str | 0;
  $base = $base | 0;
  $x = $x | 0;
  var $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0, $11 = 0, $12 = 0, $14 = 0, $num_to_text_0 = 0, $_177 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $uadd$0 = 0, $uadd$1 = 0, $68 = 0, $69 = 0, $70 = 0, $__x3_0 = 0, $71 = 0, $72 = 0, $73 = 0, $alloc_size_0 = 0, $_lobit = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $alloc_size_1 = 0, $_075 = 0, $80 = 0, $82 = 0, $83 = 0, $x_size_0 = 0, $_1 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $97 = 0, $99 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $scevgep = 0, $__n_0 = 0, $__dst_0 = 0, $_pn = 0, $__x_0 = 0, $__src_0 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $scevgep81 = 0, $__dst_1 = 0, $__x_1 = 0, $xp_0 = 0, $116 = 0, $117 = 0, $i_078 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $exitcond = 0, $124 = 0, $125 = 0, $126 = 0, $129 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $138 = 0, $139 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    $1 = $x + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($base | 0) > -1;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 5;
      break;
    }
   case 2:
    $5 = ($base | 0) < 2;
    if ($5) {
      $_177 = 10;
      $num_to_text_0 = 5656;
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $7 = ($base | 0) > 36;
    if ($7) {
      label = 4;
      break;
    } else {
      $_177 = $base;
      $num_to_text_0 = 5656;
      label = 7;
      break;
    }
   case 4:
    $9 = ($base | 0) > 62;
    if ($9) {
      $_0 = 0;
      label = 35;
      break;
    } else {
      $_177 = $base;
      $num_to_text_0 = 7816;
      label = 7;
      break;
    }
   case 5:
    $11 = -$base | 0;
    $12 = ($11 | 0) < 2;
    if ($12) {
      $_177 = 10;
      $num_to_text_0 = 6888;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $14 = ($11 | 0) > 36;
    if ($14) {
      $_0 = 0;
      label = 35;
      break;
    } else {
      $_177 = $11;
      $num_to_text_0 = 6888;
      label = 7;
      break;
    }
   case 7:
    $16 = ($res_str | 0) == 0;
    if ($16) {
      label = 8;
      break;
    } else {
      $_075 = $res_str;
      $alloc_size_1 = 0;
      label = 16;
      break;
    }
   case 8:
    $18 = ($2 | 0) > -1;
    $19 = -$2 | 0;
    $20 = $18 ? $2 : $19;
    $21 = ($20 | 0) == 0;
    if ($21) {
      $alloc_size_0 = 1;
      label = 15;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $23 = $20 - 1 | 0;
    $24 = $x + 8 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = $25 + ($23 << 2) | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = $27 >>> 0 < 65536;
    if ($28) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $30 = $27 >>> 0 < 256;
    $31 = $30 ? 1 : 9;
    $36 = $31;
    label = 12;
    break;
   case 11:
    $33 = $27 >>> 0 < 16777216;
    $34 = $33 ? 17 : 25;
    $36 = $34;
    label = 12;
    break;
   case 12:
    $37 = $27 >>> ($36 >>> 0);
    $38 = $37 + 9696 | 0;
    $39 = HEAP8[$38] | 0;
    $40 = $39 & 255;
    $41 = $20 << 5;
    $42 = $41 - 33 | 0;
    $43 = $42 + $36 | 0;
    $44 = $43 + $40 | 0;
    $45 = $_177 - 1 | 0;
    $46 = $45 & $_177;
    $47 = ($46 | 0) == 0;
    if ($47) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $49 = 9844 + ($_177 * 20 & -1) | 0;
    $50 = HEAP32[$49 >> 2] | 0;
    $51 = $44 - 1 | 0;
    $52 = $51 + $50 | 0;
    $53 = ($52 >>> 0) / ($50 >>> 0) >>> 0;
    $alloc_size_0 = $53;
    label = 15;
    break;
   case 14:
    $55 = 9836 + ($_177 * 20 & -1) | 0;
    $56 = HEAP32[$55 >> 2] | 0;
    $57 = $56 + 1 | 0;
    $58 = $57 & 65535;
    $59 = $57 >>> 16;
    $60 = $44 & 65535;
    $61 = $44 >>> 16;
    $62 = Math_imul($58, $60);
    $63 = Math_imul($58, $61);
    $64 = Math_imul($59, $60);
    $65 = Math_imul($59, $61);
    $66 = $62 >>> 16;
    $67 = $66 + $63 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($67 | 0, $64 | 0) | 0;
    $uadd$1 = tempRet0;
    $68 = $uadd$0;
    $69 = $uadd$1;
    $70 = $65 + 65536 | 0;
    $__x3_0 = $69 ? $70 : $65;
    $71 = $68 >>> 16;
    $72 = $71 + 1 | 0;
    $73 = $72 + $__x3_0 | 0;
    $alloc_size_0 = $73;
    label = 15;
    break;
   case 15:
    $_lobit = $2 >>> 31;
    $75 = $_lobit + 1 | 0;
    $76 = $75 + $alloc_size_0 | 0;
    $77 = HEAP32[3962] | 0;
    $78 = FUNCTION_TABLE_ii[$77 & 1023]($76) | 0;
    $_075 = $78;
    $alloc_size_1 = $76;
    label = 16;
    break;
   case 16:
    $80 = ($2 | 0) < 0;
    if ($80) {
      label = 17;
      break;
    } else {
      $_1 = $_075;
      $x_size_0 = $2;
      label = 18;
      break;
    }
   case 17:
    $82 = $_075 + 1 | 0;
    HEAP8[$_075] = 45;
    $83 = -$2 | 0;
    $_1 = $82;
    $x_size_0 = $83;
    label = 18;
    break;
   case 18:
    HEAP32[$__tmp_marker >> 2] = 0;
    $85 = $x + 8 | 0;
    $86 = HEAP32[$85 >> 2] | 0;
    $87 = $_177 - 1 | 0;
    $88 = $87 & $_177;
    $89 = ($88 | 0) == 0;
    if ($89) {
      $xp_0 = $86;
      label = 28;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $91 = $x_size_0 << 2;
    $92 = $91 | 4;
    $93 = $92 >>> 0 < 65536;
    if ($93) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    $95 = STACKTOP;
    STACKTOP = STACKTOP + $92 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $99 = $95;
    label = 22;
    break;
   case 21:
    $97 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $92) | 0;
    $99 = $97;
    label = 22;
    break;
   case 22:
    $100 = $99;
    $101 = ($x_size_0 | 0) == 0;
    if ($101) {
      $xp_0 = $100;
      label = 28;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $103 = $x_size_0 - 1 | 0;
    $104 = HEAP32[$85 >> 2] | 0;
    $105 = HEAP32[$104 >> 2] | 0;
    $106 = ($103 | 0) == 0;
    if ($106) {
      $__x_1 = $105;
      $__dst_1 = $100;
      label = 27;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $107 = $x_size_0 << 2;
    $108 = $107 - 4 | 0;
    $scevgep = $99 + $108 | 0;
    $__x_0 = $105;
    $_pn = $104;
    $__dst_0 = $100;
    $__n_0 = $103;
    label = 25;
    break;
   case 25:
    $__src_0 = $_pn + 4 | 0;
    $110 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $111 = HEAP32[$__src_0 >> 2] | 0;
    $112 = $__n_0 - 1 | 0;
    $113 = ($112 | 0) == 0;
    if ($113) {
      label = 26;
      break;
    } else {
      $__x_0 = $111;
      $_pn = $__src_0;
      $__dst_0 = $110;
      $__n_0 = $112;
      label = 25;
      break;
    }
   case 26:
    $scevgep81 = $scevgep;
    $__x_1 = $111;
    $__dst_1 = $scevgep81;
    label = 27;
    break;
   case 27:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    $xp_0 = $100;
    label = 28;
    break;
   case 28:
    $116 = ___gmpn_get_str($_1, $_177, $xp_0, $x_size_0) | 0;
    $117 = ($116 | 0) == 0;
    if ($117) {
      label = 30;
      break;
    } else {
      $i_078 = 0;
      label = 29;
      break;
    }
   case 29:
    $118 = $_1 + $i_078 | 0;
    $119 = HEAP8[$118] | 0;
    $120 = $119 << 24 >> 24;
    $121 = $num_to_text_0 + $120 | 0;
    $122 = HEAP8[$121] | 0;
    HEAP8[$118] = $122;
    $123 = $i_078 + 1 | 0;
    $exitcond = ($123 | 0) == ($116 | 0);
    if ($exitcond) {
      label = 30;
      break;
    } else {
      $i_078 = $123;
      label = 29;
      break;
    }
   case 30:
    $124 = $_1 + $116 | 0;
    HEAP8[$124] = 0;
    $125 = HEAP32[$__tmp_marker >> 2] | 0;
    $126 = ($125 | 0) == 0;
    if ($126) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    ___gmp_tmp_reentrant_free($125);
    label = 32;
    break;
   case 32:
    $129 = ($alloc_size_1 | 0) == 0;
    if ($129) {
      $_0 = $_075;
      label = 35;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $131 = $_1;
    $132 = $_075;
    $133 = $131 - $132 | 0;
    $134 = $133 + 1 | 0;
    $135 = $134 + $116 | 0;
    $136 = ($alloc_size_1 | 0) == ($135 | 0);
    if ($136) {
      $_0 = $_075;
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    $138 = HEAP32[3748] | 0;
    $139 = FUNCTION_TABLE_iiii[$138 & 1023]($_075, $alloc_size_1, $135) | 0;
    $_0 = $139;
    label = 35;
    break;
   case 35:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function ___gmpz_import($z, $count, $order, $size, $endian, $nail, $data) {
  $z = $z | 0;
  $count = $count | 0;
  $order = $order | 0;
  $size = $size | 0;
  $endian = $endian | 0;
  $nail = $nail | 0;
  $data = $data | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $_endian = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $or_cond = 0, $24 = 0, $or_cond97 = 0, $25 = 0, $or_cond98 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $__x_0 = 0, $__src_0 = 0, $__dst_0 = 0, $__n_0 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $scevgep = 0, $__x_1 = 0, $__dst_1 = 0, $44 = 0, $or_cond100 = 0, $or_cond101 = 0, $46 = 0, $47 = 0, $__i_0109 = 0, $__src2_0108 = 0, $__dst1_0107 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $exitcond = 0, $55 = 0, $or_cond102 = 0, $or_cond103 = 0, $or_cond104 = 0, $57 = 0, $_sum96 = 0, $58 = 0, $59 = 0, $__i6_0113 = 0, $__src5_0112 = 0, $__dst3_0111 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $exitcond135 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $81 = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $_ = 0, $_sum = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $lbits_0129 = 0, $dp_0128 = 0, $zp_0127 = 0, $i_0126 = 0, $limb_0125 = 0, $lbits_1120 = 0, $dp_1119 = 0, $zp_1118 = 0, $j_0117 = 0, $limb_1116 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $limb_2 = 0, $zp_2 = 0, $lbits_2 = 0, $110 = 0, $111 = 0, $scevgep136 = 0, $lbits_1_lcssa = 0, $dp_1_lcssa = 0, $zp_1_lcssa = 0, $limb_1_lcssa = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $limb_3 = 0, $zp_3 = 0, $dp_2 = 0, $lbits_3 = 0, $128 = 0, $129 = 0, $exitcond137 = 0, $130 = 0, $132 = 0, $133 = 0, $zsize_0 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $142 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $size << 3;
    $2 = $1 - $nail | 0;
    $3 = Math_imul($2, $count);
    $4 = $3 + 31 | 0;
    $5 = $4 >>> 5;
    $6 = $z | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($5 | 0) > ($7 | 0);
    if ($8) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $10 = ___gmpz_realloc($z, $5) | 0;
    $11 = $10;
    $16 = $11;
    label = 4;
    break;
   case 3:
    $13 = $z + 8 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $16 = $14;
    label = 4;
    break;
   case 4:
    $17 = ($endian | 0) == 0;
    $_endian = $17 ? -1 : $endian;
    $18 = ($nail | 0) == 0;
    if ($18) {
      label = 5;
      break;
    } else {
      label = 20;
      break;
    }
   case 5:
    $20 = $data;
    $21 = $20 & 3;
    $22 = ($order | 0) == -1;
    $23 = ($size | 0) == 4;
    $or_cond = $22 & $23;
    $24 = ($_endian | 0) == -1;
    $or_cond97 = $or_cond & $24;
    $25 = ($21 | 0) == 0;
    $or_cond98 = $or_cond97 & $25;
    if ($or_cond98) {
      label = 6;
      break;
    } else {
      label = 12;
      break;
    }
   case 6:
    $27 = ($count | 0) == 0;
    if ($27) {
      label = 35;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $29 = $count - 1 | 0;
    $30 = $data;
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = ($29 | 0) == 0;
    if ($32) {
      $__dst_1 = $16;
      $__x_1 = $31;
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $33 = $data + 4 | 0;
    $34 = $33;
    $35 = $count - 1 | 0;
    $__n_0 = $29;
    $__dst_0 = $16;
    $__src_0 = $34;
    $__x_0 = $31;
    label = 9;
    break;
   case 9:
    $37 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $38 = $__src_0 + 4 | 0;
    $39 = HEAP32[$__src_0 >> 2] | 0;
    $40 = $__n_0 - 1 | 0;
    $41 = ($40 | 0) == 0;
    if ($41) {
      label = 10;
      break;
    } else {
      $__n_0 = $40;
      $__dst_0 = $37;
      $__src_0 = $38;
      $__x_0 = $39;
      label = 9;
      break;
    }
   case 10:
    $scevgep = $16 + ($35 << 2) | 0;
    $__dst_1 = $scevgep;
    $__x_1 = $39;
    label = 11;
    break;
   case 11:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 35;
    break;
   case 12:
    $44 = ($_endian | 0) == 1;
    $or_cond100 = $or_cond & $44;
    $or_cond101 = $or_cond100 & $25;
    if ($or_cond101) {
      label = 13;
      break;
    } else {
      label = 16;
      break;
    }
   case 13:
    $46 = ($count | 0) > 0;
    if ($46) {
      label = 14;
      break;
    } else {
      label = 35;
      break;
    }
   case 14:
    $47 = $data;
    $__dst1_0107 = $16;
    $__src2_0108 = $47;
    $__i_0109 = 0;
    label = 15;
    break;
   case 15:
    $49 = HEAP32[$__src2_0108 >> 2] | 0;
    $50 = _llvm_bswap_i32($49 | 0) | 0;
    HEAP32[$__dst1_0107 >> 2] = $50;
    $51 = $__dst1_0107 + 4 | 0;
    $52 = $__src2_0108 + 4 | 0;
    $53 = $__i_0109 + 1 | 0;
    $exitcond = ($53 | 0) == ($count | 0);
    if ($exitcond) {
      label = 35;
      break;
    } else {
      $__dst1_0107 = $51;
      $__src2_0108 = $52;
      $__i_0109 = $53;
      label = 15;
      break;
    }
   case 16:
    $55 = ($order | 0) == 1;
    $or_cond102 = $55 & $23;
    $or_cond103 = $or_cond102 & $24;
    $or_cond104 = $or_cond103 & $25;
    if ($or_cond104) {
      label = 17;
      break;
    } else {
      label = 20;
      break;
    }
   case 17:
    $57 = ($count | 0) > 0;
    if ($57) {
      label = 18;
      break;
    } else {
      label = 35;
      break;
    }
   case 18:
    $_sum96 = $count - 1 | 0;
    $58 = $data;
    $59 = $58 + ($_sum96 << 2) | 0;
    $__dst3_0111 = $16;
    $__src5_0112 = $59;
    $__i6_0113 = 0;
    label = 19;
    break;
   case 19:
    $61 = HEAP32[$__src5_0112 >> 2] | 0;
    HEAP32[$__dst3_0111 >> 2] = $61;
    $62 = $__dst3_0111 + 4 | 0;
    $63 = $__src5_0112 - 4 | 0;
    $64 = $__i6_0113 + 1 | 0;
    $exitcond135 = ($64 | 0) == ($count | 0);
    if ($exitcond135) {
      label = 35;
      break;
    } else {
      $__dst3_0111 = $62;
      $__src5_0112 = $63;
      $__i6_0113 = $64;
      label = 19;
      break;
    }
   case 20:
    $66 = $2 >>> 3;
    $67 = $2 & 7;
    $68 = 1 << $67;
    $69 = $68 - 1 | 0;
    $70 = $2 + 7 | 0;
    $71 = $70 >>> 3;
    $72 = ($_endian | 0) > -1;
    $73 = -$71 | 0;
    $74 = $72 ? $71 : $73;
    $75 = ($order | 0) < 0;
    $76 = -$size | 0;
    $77 = $75 ? $size : $76;
    $78 = $74 + $77 | 0;
    $79 = ($order | 0) > -1;
    if ($79) {
      label = 21;
      break;
    } else {
      $84 = 0;
      label = 22;
      break;
    }
   case 21:
    $81 = $count - 1 | 0;
    $82 = Math_imul($81, $size);
    $84 = $82;
    label = 22;
    break;
   case 22:
    $85 = ($count | 0) == 0;
    if ($85) {
      label = 35;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $86 = $size - 1 | 0;
    $_ = $72 ? $86 : 0;
    $_sum = $84 + $_ | 0;
    $87 = $data + $_sum | 0;
    $88 = ($66 | 0) == 0;
    $89 = ($67 | 0) == 0;
    $90 = -$_endian | 0;
    $91 = -$_endian | 0;
    $92 = $size << 3;
    $93 = $92 - $nail | 0;
    $94 = $93 >>> 3;
    $95 = Math_imul($_endian, $94);
    $96 = -$95 | 0;
    $limb_0125 = 0;
    $i_0126 = 0;
    $zp_0127 = $16;
    $dp_0128 = $87;
    $lbits_0129 = 0;
    label = 24;
    break;
   case 24:
    if ($88) {
      $limb_1_lcssa = $limb_0125;
      $zp_1_lcssa = $zp_0127;
      $dp_1_lcssa = $dp_0128;
      $lbits_1_lcssa = $lbits_0129;
      label = 29;
      break;
    } else {
      $limb_1116 = $limb_0125;
      $j_0117 = 0;
      $zp_1118 = $zp_0127;
      $dp_1119 = $dp_0128;
      $lbits_1120 = $lbits_0129;
      label = 25;
      break;
    }
   case 25:
    $97 = HEAP8[$dp_1119] | 0;
    $98 = $97 & 255;
    $99 = $dp_1119 + $91 | 0;
    $100 = $98 << $lbits_1120;
    $101 = $100 | $limb_1116;
    $102 = $lbits_1120 + 8 | 0;
    $103 = ($102 | 0) > 31;
    if ($103) {
      label = 26;
      break;
    } else {
      $lbits_2 = $102;
      $zp_2 = $zp_1118;
      $limb_2 = $101;
      label = 27;
      break;
    }
   case 26:
    $105 = $zp_1118 + 4 | 0;
    HEAP32[$zp_1118 >> 2] = $101;
    $106 = $lbits_1120 - 24 | 0;
    $107 = 32 - $lbits_1120 | 0;
    $108 = $98 >>> ($107 >>> 0);
    $lbits_2 = $106;
    $zp_2 = $105;
    $limb_2 = $108;
    label = 27;
    break;
   case 27:
    $110 = $j_0117 + 1 | 0;
    $111 = $110 >>> 0 < $66 >>> 0;
    if ($111) {
      $limb_1116 = $limb_2;
      $j_0117 = $110;
      $zp_1118 = $zp_2;
      $dp_1119 = $99;
      $lbits_1120 = $lbits_2;
      label = 25;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $scevgep136 = $dp_0128 + $96 | 0;
    $limb_1_lcssa = $limb_2;
    $zp_1_lcssa = $zp_2;
    $dp_1_lcssa = $scevgep136;
    $lbits_1_lcssa = $lbits_2;
    label = 29;
    break;
   case 29:
    if ($89) {
      $lbits_3 = $lbits_1_lcssa;
      $dp_2 = $dp_1_lcssa;
      $zp_3 = $zp_1_lcssa;
      $limb_3 = $limb_1_lcssa;
      label = 32;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    $114 = HEAP8[$dp_1_lcssa] | 0;
    $115 = $114 & 255;
    $116 = $115 & $69;
    $117 = $dp_1_lcssa + $90 | 0;
    $118 = $116 << $lbits_1_lcssa;
    $119 = $118 | $limb_1_lcssa;
    $120 = $lbits_1_lcssa + $67 | 0;
    $121 = ($120 | 0) > 31;
    if ($121) {
      label = 31;
      break;
    } else {
      $lbits_3 = $120;
      $dp_2 = $117;
      $zp_3 = $zp_1_lcssa;
      $limb_3 = $119;
      label = 32;
      break;
    }
   case 31:
    $123 = $zp_1_lcssa + 4 | 0;
    HEAP32[$zp_1_lcssa >> 2] = $119;
    $124 = $120 - 32 | 0;
    $125 = $67 - $124 | 0;
    $126 = $116 >>> ($125 >>> 0);
    $lbits_3 = $124;
    $dp_2 = $117;
    $zp_3 = $123;
    $limb_3 = $126;
    label = 32;
    break;
   case 32:
    $128 = $dp_2 + $78 | 0;
    $129 = $i_0126 + 1 | 0;
    $exitcond137 = ($129 | 0) == ($count | 0);
    if ($exitcond137) {
      label = 33;
      break;
    } else {
      $limb_0125 = $limb_3;
      $i_0126 = $129;
      $zp_0127 = $zp_3;
      $dp_0128 = $128;
      $lbits_0129 = $lbits_3;
      label = 24;
      break;
    }
   case 33:
    $130 = ($lbits_3 | 0) == 0;
    if ($130) {
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    HEAP32[$zp_3 >> 2] = $limb_3;
    label = 35;
    break;
   case 35:
    $132 = $z + 8 | 0;
    $133 = HEAP32[$132 >> 2] | 0;
    $zsize_0 = $5;
    label = 36;
    break;
   case 36:
    $135 = ($zsize_0 | 0) > 0;
    if ($135) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    $137 = $zsize_0 - 1 | 0;
    $138 = $133 + ($137 << 2) | 0;
    $139 = HEAP32[$138 >> 2] | 0;
    $140 = ($139 | 0) == 0;
    if ($140) {
      $zsize_0 = $137;
      label = 36;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    $142 = $z + 4 | 0;
    HEAP32[$142 >> 2] = $zsize_0;
    return;
  }
}
function ___gmpz_init($x) {
  $x = $x | 0;
  HEAP32[$x >> 2] = 1;
  HEAP32[$x + 8 >> 2] = FUNCTION_TABLE_ii[HEAP32[3962] & 1023](4) | 0;
  HEAP32[$x + 4 >> 2] = 0;
  return;
}
function ___gmpz_invert($inverse, $x, $n) {
  $inverse = $inverse | 0;
  $x = $x | 0;
  $n = $n | 0;
  var $gcd = 0, $tmp = 0, $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $69 = 0, $70 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $gcd = __stackBase__ | 0;
    $tmp = __stackBase__ + 16 | 0;
    $__tmp_marker = __stackBase__ + 32 | 0;
    $1 = $x + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > -1;
    $4 = -$2 | 0;
    $5 = $3 ? $2 : $4;
    $6 = $n + 4 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($7 | 0) > -1;
    $9 = -$7 | 0;
    $10 = $8 ? $7 : $9;
    $11 = ($5 | 0) == 0;
    if ($11) {
      $_0 = 0;
      label = 18;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $13 = ($10 | 0) == 1;
    if ($13) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $15 = $n + 8 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = ($17 | 0) == 1;
    if ($18) {
      $_0 = 0;
      label = 18;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $20 = ($5 | 0) > ($10 | 0);
    $21 = $20 ? $5 : $10;
    $22 = $21 + 1 | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    $23 = $gcd | 0;
    $24 = $gcd | 0;
    HEAP32[$24 >> 2] = $22;
    $25 = $22 << 2;
    $26 = $25 >>> 0 < 65536;
    if ($26) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $28 = STACKTOP;
    STACKTOP = STACKTOP + $25 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $29 = $28;
    $30 = $gcd + 8 | 0;
    HEAP32[$30 >> 2] = $29;
    $31 = $tmp | 0;
    $32 = $tmp | 0;
    HEAP32[$32 >> 2] = $22;
    $33 = STACKTOP;
    STACKTOP = STACKTOP + $25 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $44 = $33;
    $43 = $30;
    $42 = $31;
    label = 7;
    break;
   case 6:
    $35 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $25) | 0;
    $36 = $35;
    $37 = $gcd + 8 | 0;
    HEAP32[$37 >> 2] = $36;
    $38 = $tmp | 0;
    $39 = $tmp | 0;
    HEAP32[$39 >> 2] = $22;
    $40 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $25) | 0;
    $44 = $40;
    $43 = $37;
    $42 = $38;
    label = 7;
    break;
   case 7:
    $45 = $44;
    $46 = $tmp + 8 | 0;
    HEAP32[$46 >> 2] = $45;
    ___gmpz_gcdext($23, $42, 0, $x, $n);
    $47 = $gcd + 4 | 0;
    $48 = HEAP32[$47 >> 2] | 0;
    $49 = ($48 | 0) == 1;
    if ($49) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $51 = HEAP32[$43 >> 2] | 0;
    $52 = HEAP32[$51 >> 2] | 0;
    $53 = ($52 | 0) == 1;
    if ($53) {
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $55 = HEAP32[$__tmp_marker >> 2] | 0;
    $56 = ($55 | 0) == 0;
    if ($56) {
      $_0 = 0;
      label = 18;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    ___gmp_tmp_reentrant_free($55);
    $_0 = 0;
    label = 18;
    break;
   case 11:
    $59 = $tmp + 4 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    $61 = ($60 | 0) < 0;
    if ($61) {
      label = 12;
      break;
    } else {
      label = 15;
      break;
    }
   case 12:
    $63 = HEAP32[$6 >> 2] | 0;
    $64 = ($63 | 0) < 0;
    if ($64) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    ___gmpz_sub($inverse, $42, $n);
    label = 16;
    break;
   case 14:
    ___gmpz_add($inverse, $42, $n);
    label = 16;
    break;
   case 15:
    ___gmpz_set($inverse, $42);
    label = 16;
    break;
   case 16:
    $69 = HEAP32[$__tmp_marker >> 2] | 0;
    $70 = ($69 | 0) == 0;
    if ($70) {
      $_0 = 1;
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    ___gmp_tmp_reentrant_free($69);
    $_0 = 1;
    label = 18;
    break;
   case 18:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function ___gmpz_init_set($w, $u) {
  $w = $w | 0;
  $u = $u | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $scevgep = 0, $__n_0 = 0, $__dst_0 = 0, $_pn = 0, $__x_0 = 0, $__src_0 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $scevgep18 = 0, $__dst_1 = 0, $__x_1 = 0, $30 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $u + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > -1;
    $4 = -$2 | 0;
    $5 = $3 ? $2 : $4;
    $6 = ($5 | 0) > 1;
    $7 = $6 ? $5 : 1;
    $8 = $w | 0;
    HEAP32[$8 >> 2] = $7;
    $9 = HEAP32[3962] | 0;
    $10 = $7 << 2;
    $11 = FUNCTION_TABLE_ii[$9 & 1023]($10) | 0;
    $12 = $11;
    $13 = $w + 8 | 0;
    HEAP32[$13 >> 2] = $12;
    $14 = $u + 8 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = ($2 | 0) == 0;
    if ($16) {
      label = 7;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $18 = $5 - 1 | 0;
    $19 = HEAP32[$15 >> 2] | 0;
    $20 = ($18 | 0) == 0;
    if ($20) {
      $__x_1 = $19;
      $__dst_1 = $12;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $21 = $5 << 2;
    $22 = $21 - 4 | 0;
    $scevgep = $11 + $22 | 0;
    $__x_0 = $19;
    $_pn = $15;
    $__dst_0 = $12;
    $__n_0 = $18;
    label = 4;
    break;
   case 4:
    $__src_0 = $_pn + 4 | 0;
    $24 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $25 = HEAP32[$__src_0 >> 2] | 0;
    $26 = $__n_0 - 1 | 0;
    $27 = ($26 | 0) == 0;
    if ($27) {
      label = 5;
      break;
    } else {
      $__x_0 = $25;
      $_pn = $__src_0;
      $__dst_0 = $24;
      $__n_0 = $26;
      label = 4;
      break;
    }
   case 5:
    $scevgep18 = $scevgep;
    $__x_1 = $25;
    $__dst_1 = $scevgep18;
    label = 6;
    break;
   case 6:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 7;
    break;
   case 7:
    $30 = $w + 4 | 0;
    HEAP32[$30 >> 2] = $2;
    return;
  }
}
function _mpn_jacobi_init($a, $b, $s) {
  $a = $a | 0;
  $b = $b | 0;
  $s = $s | 0;
  return ($a << 2 & 12 | $b & 2) + $s | 0;
}
function ___gmpz_jacobi($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $_lobit = 0, $33 = 0, $34 = 0, $result_bit1_0_ph = 0, $bsize_0_ph = 0, $35 = 0, $bsrcp_0166 = 0, $bsize_0165 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $bsrcp_0_lcssa = 0, $bsize_0_lcssa = 0, $blow_0_lcssa = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $__ctz_x_0 = 0, $__ctz_c_0 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $__ctz_x_1 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $btwos_0 = 0, $63 = 0, $64 = 0, $65 = 0, $or_cond = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $_bsize_0 = 0, $blow_1 = 0, $bsize_1 = 0, $77 = 0, $79 = 0, $80 = 0, $result_bit1_1_ph = 0, $asize_0_ph = 0, $81 = 0, $asrcp_0160 = 0, $asize_0159 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $asrcp_0_lcssa = 0, $asize_0_lcssa = 0, $alow_0_lcssa = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $__ctz_x1_0 = 0, $__ctz_c2_0 = 0, $97 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $__ctz_x1_1 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $btwos_1 = 0, $111 = 0, $112 = 0, $113 = 0, $or_cond151 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $122 = 0, $123 = 0, $_asize_0 = 0, $blow_2 = 0, $bsize_2 = 0, $125 = 0, $126 = 0, $btwos_2 = 0, $result_bit1_2 = 0, $blow_3 = 0, $alow_1 = 0, $bsize_3 = 0, $asize_1 = 0, $bsrcp_1 = 0, $asrcp_1 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $140 = 0, $142 = 0, $144 = 0, $146 = 0, $147 = 0, $result_bit1_3 = 0, $alow_2 = 0, $149 = 0, $151 = 0, $152 = 0, $154 = 0, $155 = 0, $156 = 0, $158 = 0, $160 = 0, $162 = 0, $163 = 0, $165 = 0, $167 = 0, $_sink = 0, $169 = 0, $bp_0 = 0, $170 = 0, $173 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $scevgep175 = 0, $__n_0 = 0, $__dst_0 = 0, $asrcp_1_pn = 0, $__x_0 = 0, $__src_0 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $scevgep175176 = 0, $__dst_1 = 0, $__x_1 = 0, $187 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $bp_0_sum = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $205 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $scevgep = 0, $__n4_0 = 0, $__dst5_0 = 0, $bsrcp_1_pn = 0, $__x7_0 = 0, $__src6_0 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $scevgep173 = 0, $__dst5_1 = 0, $__x7_1 = 0, $result_bit1_4 = 0, $bsize_4 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $a + 8 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $b + 4 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $b + 8 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = ($7 | 0) == 0;
    if ($11) {
      label = 2;
      break;
    } else {
      label = 5;
      break;
    }
   case 2:
    if (($2 | 0) == (-1 | 0) | ($2 | 0) == 1) {
      label = 3;
      break;
    } else {
      $16 = 0;
      label = 4;
      break;
    }
   case 3:
    $14 = ($5 | 0) == 1;
    $16 = $14;
    label = 4;
    break;
   case 4:
    $17 = $16 & 1;
    $_0 = $17;
    label = 69;
    break;
   case 5:
    $19 = ($2 | 0) == 0;
    if ($19) {
      label = 6;
      break;
    } else {
      label = 9;
      break;
    }
   case 6:
    if (($7 | 0) == (-1 | 0) | ($7 | 0) == 1) {
      label = 7;
      break;
    } else {
      $24 = 0;
      label = 8;
      break;
    }
   case 7:
    $22 = ($10 | 0) == 1;
    $24 = $22;
    label = 8;
    break;
   case 8:
    $25 = $24 & 1;
    $_0 = $25;
    label = 69;
    break;
   case 9:
    $27 = $10 | $5;
    $28 = $27 & 1;
    $29 = ($28 | 0) == 0;
    if ($29) {
      $_0 = 0;
      label = 69;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $31 = ($7 | 0) < 0;
    if ($31) {
      label = 11;
      break;
    } else {
      $bsize_0_ph = $7;
      $result_bit1_0_ph = 0;
      label = 12;
      break;
    }
   case 11:
    $_lobit = $2 >>> 31;
    $33 = $_lobit << 1;
    $34 = -$7 | 0;
    $bsize_0_ph = $34;
    $result_bit1_0_ph = $33;
    label = 12;
    break;
   case 12:
    $35 = ($10 | 0) == 0;
    if ($35) {
      $bsize_0165 = $bsize_0_ph;
      $bsrcp_0166 = $9;
      label = 13;
      break;
    } else {
      $blow_0_lcssa = $10;
      $bsize_0_lcssa = $bsize_0_ph;
      $bsrcp_0_lcssa = $9;
      label = 14;
      break;
    }
   case 13:
    $36 = $bsize_0165 - 1 | 0;
    $37 = $bsrcp_0166 + 4 | 0;
    $38 = HEAP32[$37 >> 2] | 0;
    $39 = ($38 | 0) == 0;
    if ($39) {
      $bsize_0165 = $36;
      $bsrcp_0166 = $37;
      label = 13;
      break;
    } else {
      $blow_0_lcssa = $38;
      $bsize_0_lcssa = $36;
      $bsrcp_0_lcssa = $37;
      label = 14;
      break;
    }
   case 14:
    $40 = $blow_0_lcssa & 255;
    $41 = ($40 | 0) == 0;
    if ($41) {
      $__ctz_c_0 = 6;
      $__ctz_x_0 = $blow_0_lcssa;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $43 = -$blow_0_lcssa | 0;
    $44 = $blow_0_lcssa & $43;
    $45 = $44 + 9696 | 0;
    $46 = HEAP8[$45] | 0;
    $47 = $46 & 255;
    $48 = $47 - 2 | 0;
    $btwos_0 = $48;
    label = 19;
    break;
   case 16:
    $49 = ($__ctz_c_0 | 0) < 30;
    if ($49) {
      label = 17;
      break;
    } else {
      $__ctz_x_1 = $__ctz_x_0;
      label = 18;
      break;
    }
   case 17:
    $51 = $__ctz_x_0 >>> 8;
    $52 = $51 & 255;
    $53 = ($52 | 0) == 0;
    $54 = $__ctz_c_0 + 8 | 0;
    if ($53) {
      $__ctz_c_0 = $54;
      $__ctz_x_0 = $51;
      label = 16;
      break;
    } else {
      $__ctz_x_1 = $51;
      label = 18;
      break;
    }
   case 18:
    $56 = -$__ctz_x_1 | 0;
    $57 = $__ctz_x_1 & $56;
    $58 = $57 + 9696 | 0;
    $59 = HEAP8[$58] | 0;
    $60 = $59 & 255;
    $61 = $60 + $__ctz_c_0 | 0;
    $btwos_0 = $61;
    label = 19;
    break;
   case 19:
    $63 = $blow_0_lcssa >>> ($btwos_0 >>> 0);
    $64 = ($bsize_0_lcssa | 0) < 2;
    $65 = ($btwos_0 | 0) == 0;
    $or_cond = $64 | $65;
    if ($or_cond) {
      $bsize_1 = $bsize_0_lcssa;
      $blow_1 = $63;
      label = 22;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $67 = $bsrcp_0_lcssa + 4 | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    $69 = 32 - $btwos_0 | 0;
    $70 = $68 << $69;
    $71 = $70 | $63;
    $72 = ($bsize_0_lcssa | 0) == 2;
    if ($72) {
      label = 21;
      break;
    } else {
      $bsize_1 = $bsize_0_lcssa;
      $blow_1 = $71;
      label = 22;
      break;
    }
   case 21:
    $74 = $68 >>> ($btwos_0 >>> 0);
    $75 = ($74 | 0) == 0;
    $_bsize_0 = $75 ? 1 : $bsize_0_lcssa;
    $bsize_1 = $_bsize_0;
    $blow_1 = $71;
    label = 22;
    break;
   case 22:
    $77 = ($2 | 0) < 0;
    if ($77) {
      label = 23;
      break;
    } else {
      $asize_0_ph = $2;
      $result_bit1_1_ph = $result_bit1_0_ph;
      label = 24;
      break;
    }
   case 23:
    $79 = $blow_1 ^ $result_bit1_0_ph;
    $80 = -$2 | 0;
    $asize_0_ph = $80;
    $result_bit1_1_ph = $79;
    label = 24;
    break;
   case 24:
    $81 = ($5 | 0) == 0;
    if ($81) {
      $asize_0159 = $asize_0_ph;
      $asrcp_0160 = $4;
      label = 25;
      break;
    } else {
      $alow_0_lcssa = $5;
      $asize_0_lcssa = $asize_0_ph;
      $asrcp_0_lcssa = $4;
      label = 26;
      break;
    }
   case 25:
    $82 = $asize_0159 - 1 | 0;
    $83 = $asrcp_0160 + 4 | 0;
    $84 = HEAP32[$83 >> 2] | 0;
    $85 = ($84 | 0) == 0;
    if ($85) {
      $asize_0159 = $82;
      $asrcp_0160 = $83;
      label = 25;
      break;
    } else {
      $alow_0_lcssa = $84;
      $asize_0_lcssa = $82;
      $asrcp_0_lcssa = $83;
      label = 26;
      break;
    }
   case 26:
    $86 = ($asize_0_lcssa | 0) < ($bsize_1 | 0);
    if ($86) {
      label = 27;
      break;
    } else {
      $asrcp_1 = $asrcp_0_lcssa;
      $bsrcp_1 = $bsrcp_0_lcssa;
      $asize_1 = $asize_0_lcssa;
      $bsize_3 = $bsize_1;
      $alow_1 = $alow_0_lcssa;
      $blow_3 = $blow_1;
      $result_bit1_2 = $result_bit1_1_ph;
      $btwos_2 = $btwos_0;
      label = 36;
      break;
    }
   case 27:
    $88 = $alow_0_lcssa & 255;
    $89 = ($88 | 0) == 0;
    if ($89) {
      $__ctz_c2_0 = 6;
      $__ctz_x1_0 = $alow_0_lcssa;
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $91 = -$alow_0_lcssa | 0;
    $92 = $alow_0_lcssa & $91;
    $93 = $92 + 9696 | 0;
    $94 = HEAP8[$93] | 0;
    $95 = $94 & 255;
    $96 = $95 - 2 | 0;
    $btwos_1 = $96;
    label = 32;
    break;
   case 29:
    $97 = ($__ctz_c2_0 | 0) < 30;
    if ($97) {
      label = 30;
      break;
    } else {
      $__ctz_x1_1 = $__ctz_x1_0;
      label = 31;
      break;
    }
   case 30:
    $99 = $__ctz_x1_0 >>> 8;
    $100 = $99 & 255;
    $101 = ($100 | 0) == 0;
    $102 = $__ctz_c2_0 + 8 | 0;
    if ($101) {
      $__ctz_c2_0 = $102;
      $__ctz_x1_0 = $99;
      label = 29;
      break;
    } else {
      $__ctz_x1_1 = $99;
      label = 31;
      break;
    }
   case 31:
    $104 = -$__ctz_x1_1 | 0;
    $105 = $__ctz_x1_1 & $104;
    $106 = $105 + 9696 | 0;
    $107 = HEAP8[$106] | 0;
    $108 = $107 & 255;
    $109 = $108 + $__ctz_c2_0 | 0;
    $btwos_1 = $109;
    label = 32;
    break;
   case 32:
    $111 = $alow_0_lcssa >>> ($btwos_1 >>> 0);
    $112 = ($asize_0_lcssa | 0) < 2;
    $113 = ($btwos_1 | 0) == 0;
    $or_cond151 = $112 | $113;
    if ($or_cond151) {
      $bsize_2 = $asize_0_lcssa;
      $blow_2 = $111;
      label = 35;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $115 = $asrcp_0_lcssa + 4 | 0;
    $116 = HEAP32[$115 >> 2] | 0;
    $117 = 32 - $btwos_1 | 0;
    $118 = $116 << $117;
    $119 = $118 | $111;
    $120 = ($asize_0_lcssa | 0) == 2;
    if ($120) {
      label = 34;
      break;
    } else {
      $bsize_2 = $asize_0_lcssa;
      $blow_2 = $119;
      label = 35;
      break;
    }
   case 34:
    $122 = $116 >>> ($btwos_1 >>> 0);
    $123 = ($122 | 0) == 0;
    $_asize_0 = $123 ? 1 : $asize_0_lcssa;
    $bsize_2 = $_asize_0;
    $blow_2 = $119;
    label = 35;
    break;
   case 35:
    $125 = $blow_2 & $blow_1;
    $126 = $125 ^ $result_bit1_1_ph;
    $asrcp_1 = $bsrcp_0_lcssa;
    $bsrcp_1 = $asrcp_0_lcssa;
    $asize_1 = $bsize_1;
    $bsize_3 = $bsize_2;
    $alow_1 = $blow_1;
    $blow_3 = $blow_2;
    $result_bit1_2 = $126;
    $btwos_2 = $btwos_1;
    label = 36;
    break;
   case 36:
    $128 = ($bsize_3 | 0) == 1;
    if ($128) {
      label = 37;
      break;
    } else {
      label = 44;
      break;
    }
   case 37:
    $130 = $btwos_2 << 1;
    $131 = $alow_1 >>> 1;
    $132 = $131 ^ $alow_1;
    $133 = $132 & $130;
    $134 = $133 ^ $result_bit1_2;
    $135 = ($blow_3 | 0) == 1;
    if ($135) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    $137 = $134 & 2;
    $138 = 1 - $137 | 0;
    $_0 = $138;
    label = 69;
    break;
   case 39:
    $140 = ($asize_1 | 0) > 1;
    if ($140) {
      label = 40;
      break;
    } else {
      $alow_2 = $alow_1;
      $result_bit1_3 = $134;
      label = 43;
      break;
    }
   case 40:
    $142 = ($asize_1 | 0) > 9;
    if ($142) {
      label = 41;
      break;
    } else {
      label = 42;
      break;
    }
   case 41:
    $144 = ___gmpn_mod_1($asrcp_1, $asize_1, $blow_3) | 0;
    $alow_2 = $144;
    $result_bit1_3 = $134;
    label = 43;
    break;
   case 42:
    $146 = $134 ^ $blow_3;
    $147 = ___gmpn_modexact_1c_odd($asrcp_1, $asize_1, $blow_3, 0) | 0;
    $alow_2 = $147;
    $result_bit1_3 = $146;
    label = 43;
    break;
   case 43:
    $149 = ___gmpn_jacobi_base($alow_2, $blow_3, $result_bit1_3) | 0;
    $_0 = $149;
    label = 69;
    break;
   case 44:
    HEAP32[$__tmp_marker >> 2] = 0;
    $151 = $bsize_3 << 1;
    $152 = ($asize_1 | 0) < ($151 | 0);
    if ($152) {
      label = 48;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    $154 = $asize_1 << 2;
    $155 = $154 + 4 | 0;
    $156 = $155 >>> 0 < 65536;
    if ($156) {
      label = 46;
      break;
    } else {
      label = 47;
      break;
    }
   case 46:
    $158 = STACKTOP;
    STACKTOP = STACKTOP + $155 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $_sink = $158;
    label = 51;
    break;
   case 47:
    $160 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $155) | 0;
    $_sink = $160;
    label = 51;
    break;
   case 48:
    $162 = $bsize_3 << 3;
    $163 = $162 >>> 0 < 65536;
    if ($163) {
      label = 49;
      break;
    } else {
      label = 50;
      break;
    }
   case 49:
    $165 = STACKTOP;
    STACKTOP = STACKTOP + $162 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $_sink = $165;
    label = 51;
    break;
   case 50:
    $167 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $162) | 0;
    $_sink = $167;
    label = 51;
    break;
   case 51:
    $169 = $_sink;
    $bp_0 = $169 + ($bsize_3 << 2) | 0;
    $170 = ($asize_1 | 0) > ($bsize_3 | 0);
    if ($170) {
      label = 52;
      break;
    } else {
      label = 53;
      break;
    }
   case 52:
    ___gmpn_tdiv_qr($bp_0, $169, 0, $asrcp_1, $asize_1, $bsrcp_1, $bsize_3);
    label = 59;
    break;
   case 53:
    $173 = ($bsize_3 | 0) == 0;
    if ($173) {
      label = 59;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    $175 = $bsize_3 - 1 | 0;
    $176 = HEAP32[$asrcp_1 >> 2] | 0;
    $177 = ($175 | 0) == 0;
    if ($177) {
      $__x_1 = $176;
      $__dst_1 = $169;
      label = 58;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    $178 = $bsize_3 << 2;
    $179 = $178 - 4 | 0;
    $scevgep175 = $_sink + $179 | 0;
    $__x_0 = $176;
    $asrcp_1_pn = $asrcp_1;
    $__dst_0 = $169;
    $__n_0 = $175;
    label = 56;
    break;
   case 56:
    $__src_0 = $asrcp_1_pn + 4 | 0;
    $181 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $182 = HEAP32[$__src_0 >> 2] | 0;
    $183 = $__n_0 - 1 | 0;
    $184 = ($183 | 0) == 0;
    if ($184) {
      label = 57;
      break;
    } else {
      $__x_0 = $182;
      $asrcp_1_pn = $__src_0;
      $__dst_0 = $181;
      $__n_0 = $183;
      label = 56;
      break;
    }
   case 57:
    $scevgep175176 = $scevgep175;
    $__x_1 = $182;
    $__dst_1 = $scevgep175176;
    label = 58;
    break;
   case 58:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 59;
    break;
   case 59:
    $187 = ($btwos_2 | 0) == 0;
    if ($187) {
      label = 61;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    $189 = $btwos_2 << 1;
    $190 = $alow_1 >>> 1;
    $191 = $190 ^ $alow_1;
    $192 = $191 & $189;
    $193 = $192 ^ $result_bit1_2;
    $194 = ___gmpn_rshift($bp_0, $bsrcp_1, $bsize_3, $btwos_2) | 0;
    $195 = $bsize_3 - 1 | 0;
    $196 = $169 + ($195 << 2) | 0;
    $197 = HEAP32[$196 >> 2] | 0;
    $bp_0_sum = $195 + $bsize_3 | 0;
    $198 = $169 + ($bp_0_sum << 2) | 0;
    $199 = HEAP32[$198 >> 2] | 0;
    $200 = $199 | $197;
    $201 = ($200 | 0) == 0;
    $202 = $201 & 1;
    $203 = $bsize_3 - $202 | 0;
    $bsize_4 = $203;
    $result_bit1_4 = $193;
    label = 67;
    break;
   case 61:
    $205 = ($bsize_3 | 0) == 0;
    if ($205) {
      $bsize_4 = 0;
      $result_bit1_4 = $result_bit1_2;
      label = 67;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    $207 = $bsize_3 - 1 | 0;
    $208 = HEAP32[$bsrcp_1 >> 2] | 0;
    $209 = ($207 | 0) == 0;
    if ($209) {
      $__x7_1 = $208;
      $__dst5_1 = $bp_0;
      label = 66;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    $210 = $bsize_3 << 3;
    $211 = $210 - 4 | 0;
    $scevgep = $_sink + $211 | 0;
    $__x7_0 = $208;
    $bsrcp_1_pn = $bsrcp_1;
    $__dst5_0 = $bp_0;
    $__n4_0 = $207;
    label = 64;
    break;
   case 64:
    $__src6_0 = $bsrcp_1_pn + 4 | 0;
    $213 = $__dst5_0 + 4 | 0;
    HEAP32[$__dst5_0 >> 2] = $__x7_0;
    $214 = HEAP32[$__src6_0 >> 2] | 0;
    $215 = $__n4_0 - 1 | 0;
    $216 = ($215 | 0) == 0;
    if ($216) {
      label = 65;
      break;
    } else {
      $__x7_0 = $214;
      $bsrcp_1_pn = $__src6_0;
      $__dst5_0 = $213;
      $__n4_0 = $215;
      label = 64;
      break;
    }
   case 65:
    $scevgep173 = $scevgep;
    $__x7_1 = $214;
    $__dst5_1 = $scevgep173;
    label = 66;
    break;
   case 66:
    HEAP32[$__dst5_1 >> 2] = $__x7_1;
    $bsize_4 = $bsize_3;
    $result_bit1_4 = $result_bit1_2;
    label = 67;
    break;
   case 67:
    $219 = HEAP32[$169 >> 2] | 0;
    $220 = $result_bit1_4 >>> 1;
    $221 = $220 & 1;
    $222 = _mpn_jacobi_init($219, $blow_3, $221) | 0;
    $223 = ___gmpn_jacobi_n($169, $bp_0, $bsize_4, $222) | 0;
    $224 = HEAP32[$__tmp_marker >> 2] | 0;
    $225 = ($224 | 0) == 0;
    if ($225) {
      $_0 = $223;
      label = 69;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    ___gmp_tmp_reentrant_free($224);
    $_0 = $223;
    label = 69;
    break;
   case 69:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function ___gmpz_mod($rem, $dividend, $divisor) {
  $rem = $rem | 0;
  $dividend = $dividend | 0;
  $divisor = $divisor | 0;
  var $temp_divisor = 0, $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $scevgep = 0, $__n_0 = 0, $__dst_0 = 0, $_pn = 0, $__x_0 = 0, $__src_0 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $scevgep23 = 0, $__dst_1 = 0, $__x_1 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $temp_divisor = __stackBase__ | 0;
    $__tmp_marker = __stackBase__ + 16 | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    $1 = $divisor + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > -1;
    $4 = -$2 | 0;
    $5 = $3 ? $2 : $4;
    $6 = ($rem | 0) == ($divisor | 0);
    if ($6) {
      label = 2;
      break;
    } else {
      label = 11;
      break;
    }
   case 2:
    $8 = $5 << 2;
    $9 = $8 >>> 0 < 65536;
    if ($9) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $11 = STACKTOP;
    STACKTOP = STACKTOP + $8 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $15 = $11;
    label = 5;
    break;
   case 4:
    $13 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $8) | 0;
    $15 = $13;
    label = 5;
    break;
   case 5:
    $16 = $15;
    $17 = $temp_divisor + 8 | 0;
    HEAP32[$17 >> 2] = $16;
    $18 = ($2 | 0) == 0;
    if ($18) {
      label = 12;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $20 = $5 - 1 | 0;
    $21 = $divisor + 8 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = ($20 | 0) == 0;
    if ($24) {
      $__x_1 = $23;
      $__dst_1 = $16;
      label = 10;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $25 = $5 << 2;
    $26 = $25 - 4 | 0;
    $scevgep = $15 + $26 | 0;
    $__x_0 = $23;
    $_pn = $22;
    $__dst_0 = $16;
    $__n_0 = $20;
    label = 8;
    break;
   case 8:
    $__src_0 = $_pn + 4 | 0;
    $28 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $29 = HEAP32[$__src_0 >> 2] | 0;
    $30 = $__n_0 - 1 | 0;
    $31 = ($30 | 0) == 0;
    if ($31) {
      label = 9;
      break;
    } else {
      $__x_0 = $29;
      $_pn = $__src_0;
      $__dst_0 = $28;
      $__n_0 = $30;
      label = 8;
      break;
    }
   case 9:
    $scevgep23 = $scevgep;
    $__x_1 = $29;
    $__dst_1 = $scevgep23;
    label = 10;
    break;
   case 10:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 12;
    break;
   case 11:
    $34 = $divisor + 8 | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    $36 = $temp_divisor + 8 | 0;
    HEAP32[$36 >> 2] = $35;
    label = 12;
    break;
   case 12:
    $38 = $temp_divisor | 0;
    $39 = $temp_divisor + 4 | 0;
    HEAP32[$39 >> 2] = $5;
    ___gmpz_tdiv_r($rem, $dividend, $38);
    $40 = $rem + 4 | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    $42 = ($41 | 0) < 0;
    if ($42) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    ___gmpz_add($rem, $rem, $38);
    label = 14;
    break;
   case 14:
    $45 = HEAP32[$__tmp_marker >> 2] | 0;
    $46 = ($45 | 0) == 0;
    if ($46) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    ___gmp_tmp_reentrant_free($45);
    label = 16;
    break;
   case 16:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpz_mul($w, $u, $v) {
  $w = $w | 0;
  $u = $u | 0;
  $v = $v | 0;
  var $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $_ = 0, $_87 = 0, $u_v = 0, $v_u = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $or_cond = 0, $57 = 0, $58 = 0, $59 = 0, $free_me_0 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $_88 = 0, $77 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $smax = 0, $83 = 0, $84 = 0, $scevgep = 0, $__n_0 = 0, $__dst_0 = 0, $_pn86 = 0, $__x_0 = 0, $__src_0 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $scevgep95 = 0, $__dst_1 = 0, $__x_1 = 0, $92 = 0, $94 = 0, $95 = 0, $97 = 0, $99 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $smax97 = 0, $111 = 0, $112 = 0, $scevgep98 = 0, $__n1_0 = 0, $__dst2_0 = 0, $_pn = 0, $__x4_0 = 0, $__src3_0 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $scevgep9899 = 0, $__dst2_1 = 0, $__x4_1 = 0, $up_0 = 0, $vp_1 = 0, $wp_0 = 0, $free_me_1 = 0, $120 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $cy_limb_0 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $142 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    $1 = $u + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $v + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 ^ $2;
    $6 = ($2 | 0) > -1;
    $7 = -$2 | 0;
    $8 = $6 ? $2 : $7;
    $9 = ($4 | 0) > -1;
    $10 = -$4 | 0;
    $11 = $9 ? $4 : $10;
    $12 = ($8 | 0) < ($11 | 0);
    $_ = $12 ? $8 : $11;
    $_87 = $12 ? $11 : $8;
    $u_v = $12 ? $u : $v;
    $v_u = $12 ? $v : $u;
    if (($_ | 0) == 0) {
      label = 2;
      break;
    } else if (($_ | 0) == 1) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 2:
    $14 = $w + 4 | 0;
    HEAP32[$14 >> 2] = 0;
    label = 38;
    break;
   case 3:
    $16 = $_87 + 1 | 0;
    $17 = $w | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = ($16 | 0) > ($18 | 0);
    if ($19) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $21 = ___gmpz_realloc($w, $16) | 0;
    $22 = $21;
    $27 = $22;
    label = 6;
    break;
   case 5:
    $24 = $w + 8 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    $27 = $25;
    label = 6;
    break;
   case 6:
    $28 = $v_u + 8 | 0;
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = $u_v + 8 | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    $33 = ___gmpn_mul_1($27, $29, $_87, $32) | 0;
    $34 = $27 + ($_87 << 2) | 0;
    HEAP32[$34 >> 2] = $33;
    $35 = ($33 | 0) != 0;
    $36 = $35 & 1;
    $37 = $36 + $_87 | 0;
    $38 = ($5 | 0) > -1;
    $39 = -$37 | 0;
    $40 = $38 ? $37 : $39;
    $41 = $w + 4 | 0;
    HEAP32[$41 >> 2] = $40;
    label = 38;
    break;
   case 7:
    HEAP32[$__tmp_marker >> 2] = 0;
    $43 = $v_u + 8 | 0;
    $44 = HEAP32[$43 >> 2] | 0;
    $45 = $u_v + 8 | 0;
    $46 = HEAP32[$45 >> 2] | 0;
    $47 = $w + 8 | 0;
    $48 = HEAP32[$47 >> 2] | 0;
    $49 = $_87 + $_ | 0;
    $50 = $w | 0;
    $51 = HEAP32[$50 >> 2] | 0;
    $52 = ($51 | 0) < ($49 | 0);
    $53 = ($48 | 0) == ($44 | 0);
    if ($52) {
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 8:
    $55 = ($48 | 0) == ($46 | 0);
    $or_cond = $53 | $55;
    if ($or_cond) {
      $free_me_0 = $48;
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $57 = HEAP32[3802] | 0;
    $58 = $48;
    $59 = $51 << 2;
    FUNCTION_TABLE_vii[$57 & 1023]($58, $59);
    $free_me_0 = 0;
    label = 10;
    break;
   case 10:
    HEAP32[$50 >> 2] = $49;
    $61 = HEAP32[3962] | 0;
    $62 = $49 << 2;
    $63 = FUNCTION_TABLE_ii[$61 & 1023]($62) | 0;
    $64 = $63;
    HEAP32[$47 >> 2] = $64;
    $free_me_1 = $free_me_0;
    $wp_0 = $64;
    $vp_1 = $46;
    $up_0 = $44;
    label = 31;
    break;
   case 11:
    if ($53) {
      label = 12;
      break;
    } else {
      label = 21;
      break;
    }
   case 12:
    $67 = $_87 << 2;
    $68 = $67 >>> 0 < 65536;
    if ($68) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $70 = STACKTOP;
    STACKTOP = STACKTOP + $67 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $74 = $70;
    label = 15;
    break;
   case 14:
    $72 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $67) | 0;
    $74 = $72;
    label = 15;
    break;
   case 15:
    $75 = $74;
    $76 = ($48 | 0) == ($46 | 0);
    $_88 = $76 ? $75 : $46;
    $77 = ($_87 | 0) == 0;
    if ($77) {
      $free_me_1 = 0;
      $wp_0 = $48;
      $vp_1 = $_88;
      $up_0 = $75;
      label = 31;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $79 = $_87 - 1 | 0;
    $80 = HEAP32[$48 >> 2] | 0;
    $81 = ($79 | 0) == 0;
    if ($81) {
      $__x_1 = $80;
      $__dst_1 = $75;
      label = 20;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $82 = ($8 | 0) > ($11 | 0);
    $smax = $82 ? $8 : $11;
    $83 = $smax << 2;
    $84 = $83 - 4 | 0;
    $scevgep = $74 + $84 | 0;
    $__x_0 = $80;
    $_pn86 = $48;
    $__dst_0 = $75;
    $__n_0 = $79;
    label = 18;
    break;
   case 18:
    $__src_0 = $_pn86 + 4 | 0;
    $86 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $87 = HEAP32[$__src_0 >> 2] | 0;
    $88 = $__n_0 - 1 | 0;
    $89 = ($88 | 0) == 0;
    if ($89) {
      label = 19;
      break;
    } else {
      $__x_0 = $87;
      $_pn86 = $__src_0;
      $__dst_0 = $86;
      $__n_0 = $88;
      label = 18;
      break;
    }
   case 19:
    $scevgep95 = $scevgep;
    $__x_1 = $87;
    $__dst_1 = $scevgep95;
    label = 20;
    break;
   case 20:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    $free_me_1 = 0;
    $wp_0 = $48;
    $vp_1 = $_88;
    $up_0 = $75;
    label = 31;
    break;
   case 21:
    $92 = ($48 | 0) == ($46 | 0);
    if ($92) {
      label = 22;
      break;
    } else {
      $free_me_1 = 0;
      $wp_0 = $48;
      $vp_1 = $46;
      $up_0 = $44;
      label = 31;
      break;
    }
   case 22:
    $94 = $_ << 2;
    $95 = $94 >>> 0 < 65536;
    if ($95) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    $97 = STACKTOP;
    STACKTOP = STACKTOP + $94 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $101 = $97;
    label = 25;
    break;
   case 24:
    $99 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $94) | 0;
    $101 = $99;
    label = 25;
    break;
   case 25:
    $102 = $101;
    $103 = ($_ | 0) == 0;
    if ($103) {
      $free_me_1 = 0;
      $wp_0 = $48;
      $vp_1 = $102;
      $up_0 = $44;
      label = 31;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    $105 = $_ - 1 | 0;
    $106 = HEAP32[$48 >> 2] | 0;
    $107 = ($105 | 0) == 0;
    if ($107) {
      $__x4_1 = $106;
      $__dst2_1 = $102;
      label = 30;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $108 = $8 ^ -1;
    $109 = $11 ^ -1;
    $110 = ($108 | 0) > ($109 | 0);
    $smax97 = $110 ? $108 : $109;
    $111 = $smax97 << 2;
    $112 = -8 - $111 | 0;
    $scevgep98 = $101 + $112 | 0;
    $__x4_0 = $106;
    $_pn = $48;
    $__dst2_0 = $102;
    $__n1_0 = $105;
    label = 28;
    break;
   case 28:
    $__src3_0 = $_pn + 4 | 0;
    $114 = $__dst2_0 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    $115 = HEAP32[$__src3_0 >> 2] | 0;
    $116 = $__n1_0 - 1 | 0;
    $117 = ($116 | 0) == 0;
    if ($117) {
      label = 29;
      break;
    } else {
      $__x4_0 = $115;
      $_pn = $__src3_0;
      $__dst2_0 = $114;
      $__n1_0 = $116;
      label = 28;
      break;
    }
   case 29:
    $scevgep9899 = $scevgep98;
    $__x4_1 = $115;
    $__dst2_1 = $scevgep9899;
    label = 30;
    break;
   case 30:
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    $free_me_1 = 0;
    $wp_0 = $48;
    $vp_1 = $102;
    $up_0 = $44;
    label = 31;
    break;
   case 31:
    $120 = ($up_0 | 0) == ($vp_1 | 0);
    if ($120) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    ___gmpn_sqr($wp_0, $up_0, $_87);
    $122 = $49 - 1 | 0;
    $123 = $wp_0 + ($122 << 2) | 0;
    $124 = HEAP32[$123 >> 2] | 0;
    $cy_limb_0 = $124;
    label = 34;
    break;
   case 33:
    $126 = ___gmpn_mul($wp_0, $up_0, $_87, $vp_1, $_) | 0;
    $cy_limb_0 = $126;
    label = 34;
    break;
   case 34:
    $128 = ($cy_limb_0 | 0) == 0;
    $129 = $128 & 1;
    $130 = $49 - $129 | 0;
    $131 = ($5 | 0) < 0;
    $132 = -$130 | 0;
    $133 = $131 ? $132 : $130;
    $134 = $w + 4 | 0;
    HEAP32[$134 >> 2] = $133;
    $135 = ($free_me_1 | 0) == 0;
    if ($135) {
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $137 = HEAP32[3802] | 0;
    $138 = $free_me_1;
    $139 = $51 << 2;
    FUNCTION_TABLE_vii[$137 & 1023]($138, $139);
    label = 36;
    break;
   case 36:
    $141 = HEAP32[$__tmp_marker >> 2] | 0;
    $142 = ($141 | 0) == 0;
    if ($142) {
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    ___gmp_tmp_reentrant_free($141);
    label = 38;
    break;
   case 38:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpz_mul_2exp($r, $u, $cnt) {
  $r = $r | 0;
  $u = $u | 0;
  $cnt = $cnt | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $_sum = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $_sum34 = 0, $42 = 0, $43 = 0, $__n_0 = 0, $__dst_0 = 0, $__src_0 = 0, $__x_0 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $rn_0 = 0, $52 = 0, $53 = 0, $54 = 0, $rn_1 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $u + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > -1;
    $4 = -$2 | 0;
    $5 = $3 ? $2 : $4;
    $6 = $cnt >>> 5;
    $7 = $5 + $6 | 0;
    $8 = ($5 | 0) == 0;
    if ($8) {
      $rn_1 = 0;
      label = 15;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $10 = $7 + 1 | 0;
    $11 = $r | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($10 | 0) > ($12 | 0);
    if ($13) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $15 = ___gmpz_realloc($r, $10) | 0;
    $16 = $15;
    $21 = $16;
    label = 5;
    break;
   case 4:
    $18 = $r + 8 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $21 = $19;
    label = 5;
    break;
   case 5:
    $22 = $21;
    $23 = $u + 8 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $cnt & 31;
    $26 = ($25 | 0) == 0;
    if ($26) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $28 = $21 + ($6 << 2) | 0;
    $29 = ___gmpn_lshift($28, $24, $5, $25) | 0;
    $30 = $21 + ($7 << 2) | 0;
    HEAP32[$30 >> 2] = $29;
    $31 = ($29 | 0) != 0;
    $32 = $31 & 1;
    $33 = $32 + $7 | 0;
    $rn_0 = $33;
    label = 13;
    break;
   case 7:
    $35 = ($2 | 0) == 0;
    if ($35) {
      $rn_0 = $7;
      label = 13;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $37 = $5 - 1 | 0;
    $_sum = $37 + $6 | 0;
    $38 = $21 + ($_sum << 2) | 0;
    $39 = $24 + ($37 << 2) | 0;
    $40 = HEAP32[$39 >> 2] | 0;
    $41 = ($37 | 0) == 0;
    if ($41) {
      $__x_1 = $40;
      $__dst_1 = $38;
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $_sum34 = $5 - 2 | 0;
    $42 = $24 + ($_sum34 << 2) | 0;
    $43 = $cnt >>> 5;
    $__x_0 = $40;
    $__src_0 = $42;
    $__dst_0 = $38;
    $__n_0 = $37;
    label = 10;
    break;
   case 10:
    $45 = $__dst_0 - 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $46 = $__src_0 - 4 | 0;
    $47 = HEAP32[$__src_0 >> 2] | 0;
    $48 = $__n_0 - 1 | 0;
    $49 = ($48 | 0) == 0;
    if ($49) {
      label = 11;
      break;
    } else {
      $__x_0 = $47;
      $__src_0 = $46;
      $__dst_0 = $45;
      $__n_0 = $48;
      label = 10;
      break;
    }
   case 11:
    $scevgep = $21 + ($43 << 2) | 0;
    $__x_1 = $47;
    $__dst_1 = $scevgep;
    label = 12;
    break;
   case 12:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    $rn_0 = $7;
    label = 13;
    break;
   case 13:
    $52 = ($6 | 0) == 0;
    if ($52) {
      $rn_1 = $rn_0;
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $53 = $cnt >>> 5;
    $54 = $53 << 2;
    _memset($22 | 0, 0, $54 | 0);
    $rn_1 = $rn_0;
    label = 15;
    break;
   case 15:
    $56 = HEAP32[$1 >> 2] | 0;
    $57 = ($56 | 0) > -1;
    $58 = -$rn_1 | 0;
    $59 = $57 ? $rn_1 : $58;
    $60 = $r + 4 | 0;
    HEAP32[$60 >> 2] = $59;
    return;
  }
}
function ___gmpz_mul_si($prod, $mult, $small_mult) {
  $prod = $prod | 0;
  $mult = $mult | 0;
  $small_mult = $small_mult | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $or_cond = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $small_mult_ = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $_lobit21 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $mult + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) == 0;
    $4 = ($small_mult | 0) == 0;
    $or_cond = $3 | $4;
    if ($or_cond) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $6 = $prod + 4 | 0;
    HEAP32[$6 >> 2] = 0;
    label = 7;
    break;
   case 3:
    $8 = ($2 | 0) > -1;
    $9 = -$2 | 0;
    $10 = $8 ? $2 : $9;
    $11 = ($small_mult | 0) > -1;
    $12 = -$small_mult | 0;
    $small_mult_ = $11 ? $small_mult : $12;
    $13 = $10 + 1 | 0;
    $14 = $prod | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = ($13 | 0) > ($15 | 0);
    if ($16) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $18 = ___gmpz_realloc($prod, $13) | 0;
    $19 = $18;
    $24 = $19;
    label = 6;
    break;
   case 5:
    $21 = $prod + 8 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $24 = $22;
    label = 6;
    break;
   case 6:
    $25 = $mult + 8 | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = ___gmpn_mul_1($24, $26, $10, $small_mult_) | 0;
    $28 = $24 + ($10 << 2) | 0;
    HEAP32[$28 >> 2] = $27;
    $29 = ($27 | 0) != 0;
    $30 = $29 & 1;
    $31 = $30 + $10 | 0;
    $_lobit21 = $2 ^ $small_mult;
    $32 = ($_lobit21 | 0) < 0;
    $33 = -$31 | 0;
    $34 = $32 ? $33 : $31;
    $35 = $prod + 4 | 0;
    HEAP32[$35 >> 2] = $34;
    label = 7;
    break;
   case 7:
    return;
  }
}
function ___gmpz_mul_ui($prod, $mult, $small_mult) {
  $prod = $prod | 0;
  $mult = $mult | 0;
  $small_mult = $small_mult | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $or_cond = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $mult + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) == 0;
    $4 = ($small_mult | 0) == 0;
    $or_cond = $3 | $4;
    if ($or_cond) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $6 = $prod + 4 | 0;
    HEAP32[$6 >> 2] = 0;
    label = 7;
    break;
   case 3:
    $8 = ($2 | 0) > -1;
    $9 = -$2 | 0;
    $10 = $8 ? $2 : $9;
    $11 = $10 + 1 | 0;
    $12 = $prod | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ($11 | 0) > ($13 | 0);
    if ($14) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $16 = ___gmpz_realloc($prod, $11) | 0;
    $17 = $16;
    $22 = $17;
    label = 6;
    break;
   case 5:
    $19 = $prod + 8 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $22 = $20;
    label = 6;
    break;
   case 6:
    $23 = $mult + 8 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = ___gmpn_mul_1($22, $24, $10, $small_mult) | 0;
    $26 = $22 + ($10 << 2) | 0;
    HEAP32[$26 >> 2] = $25;
    $27 = ($25 | 0) != 0;
    $28 = $27 & 1;
    $29 = $28 + $10 | 0;
    $30 = ($2 | 0) < 0;
    $31 = -$29 | 0;
    $32 = $30 ? $31 : $29;
    $33 = $prod + 4 | 0;
    HEAP32[$33 >> 2] = $32;
    label = 7;
    break;
   case 7:
    return;
  }
}
function ___gmpz_n_pow_ui($r, $bp, $bsize, $e) {
  $r = $r | 0;
  $bp = $bp | 0;
  $bsize = $bsize | 0;
  $e = $e | 0;
  var $b_twolimbs = 0, $__tmp_marker = 0, $1 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $blimb_0232 = 0, $23 = 0, $_0187235 = 0, $rtwos_limbs_0234 = 0, $blimb_0_in233 = 0, $24 = 0, $25 = 0, $26 = 0, $blimb_0 = 0, $27 = 0, $blimb_0_lcssa = 0, $_0187_lcssa = 0, $rtwos_limbs_0_lcssa = 0, $blimb_0_in_lcssa = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $__ctz_c_0 = 0, $__ctz_x_0 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $__ctz_x_1 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $btwos_0 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $blimb_1_ph = 0, $56 = 0, $_0190224 = 0, $blimb_1223 = 0, $rl_0222 = 0, $57 = 0, $58 = 0, $60 = 0, $rl_1 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $blimb_1_lcssa = 0, $_1191 = 0, $67 = 0, $68 = 0, $or_cond = 0, $70 = 0, $71 = 0, $72 = 0, $_ = 0, $73 = 0, $_rl_2 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $80 = 0, $81 = 0, $blimb_2 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $89 = 0, $or_cond193 = 0, $91 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $99 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $scevgep246 = 0, $__n_0 = 0, $__dst_0 = 0, $_0_pn = 0, $__x_0 = 0, $__src_0 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $scevgep246247 = 0, $__dst_1 = 0, $__x_1 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $_3 = 0, $_1 = 0, $123 = 0, $124 = 0, $125 = 0, $rtwos_bits_0 = 0, $rl_3 = 0, $blimb_3 = 0, $_2192 = 0, $_4 = 0, $_2 = 0, $127 = 0, $129 = 0, $130 = 0, $_2269 = 0, $_4267 = 0, $_2192265 = 0, $blimb_3263 = 0, $rl_3261 = 0, $rtwos_bits_0259 = 0, $131 = 0, $132 = 0, $_2268 = 0, $_4266 = 0, $_2192264 = 0, $blimb_3262 = 0, $rl_3260 = 0, $rtwos_bits_0258 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $165 = 0, $168 = 0, $170 = 0, $171 = 0, $173 = 0, $talloc_0 = 0, $175 = 0, $176 = 0, $178 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $189 = 0, $190 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $201 = 0, $202 = 0, $_195 = 0, $203 = 0, $_194 = 0, $rp_1201 = 0, $rsize_0200 = 0, $i_0199 = 0, $tp3_1198 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $rsize_1 = 0, $222 = 0, $223 = 0, $rp_1_lcssa = 0, $rsize_0_lcssa = 0, $224 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $__n8_0 = 0, $__p_0 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $239 = 0, $_196 = 0, $_197 = 0, $240 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $__n10_0 = 0, $__dst11_0 = 0, $_2_pn = 0, $__x13_0 = 0, $__src12_0 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $scevgep = 0, $__dst11_1 = 0, $__x13_1 = 0, $rsize_2_ph = 0, $252 = 0, $rp_3206 = 0, $rsize_2205 = 0, $i_1204 = 0, $tp3_3203 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $tp3_4 = 0, $rsize_3 = 0, $rp_4 = 0, $270 = 0, $271 = 0, $rsize_4 = 0, $rp_5 = 0, $272 = 0, $273 = 0, $276 = 0, $278 = 0, $279 = 0, $280 = 0, $281 = 0, $282 = 0, $rsize_5 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, label = 0, __stackBase__ = 0, $rp_1201$phi = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $b_twolimbs = __stackBase__ | 0;
    $__tmp_marker = __stackBase__ + 8 | 0;
    $1 = ($e | 0) == 0;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $3 = $r + 8 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    HEAP32[$4 >> 2] = 1;
    $5 = $r + 4 | 0;
    HEAP32[$5 >> 2] = 1;
    label = 82;
    break;
   case 3:
    $7 = ($bsize | 0) == 0;
    if ($7) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $9 = $r + 4 | 0;
    HEAP32[$9 >> 2] = 0;
    label = 82;
    break;
   case 5:
    $11 = ($bsize | 0) < 0;
    if ($11) {
      label = 6;
      break;
    } else {
      $16 = 0;
      label = 7;
      break;
    }
   case 6:
    $13 = $e & 1;
    $14 = ($13 | 0) != 0;
    $16 = $14;
    label = 7;
    break;
   case 7:
    $17 = ($bsize | 0) > -1;
    $18 = -$bsize | 0;
    $19 = $17 ? $bsize : $18;
    $20 = $r + 8 | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = ($21 | 0) != ($bp | 0);
    $blimb_0232 = HEAP32[$bp >> 2] | 0;
    $23 = ($blimb_0232 | 0) == 0;
    if ($23) {
      $blimb_0_in233 = $bp;
      $rtwos_limbs_0234 = 0;
      $_0187235 = $19;
      label = 8;
      break;
    } else {
      $blimb_0_in_lcssa = $bp;
      $rtwos_limbs_0_lcssa = 0;
      $_0187_lcssa = $19;
      $blimb_0_lcssa = $blimb_0232;
      label = 9;
      break;
    }
   case 8:
    $24 = $rtwos_limbs_0234 + $e | 0;
    $25 = $_0187235 - 1 | 0;
    $26 = $blimb_0_in233 + 4 | 0;
    $blimb_0 = HEAP32[$26 >> 2] | 0;
    $27 = ($blimb_0 | 0) == 0;
    if ($27) {
      $blimb_0_in233 = $26;
      $rtwos_limbs_0234 = $24;
      $_0187235 = $25;
      label = 8;
      break;
    } else {
      $blimb_0_in_lcssa = $26;
      $rtwos_limbs_0_lcssa = $24;
      $_0187_lcssa = $25;
      $blimb_0_lcssa = $blimb_0;
      label = 9;
      break;
    }
   case 9:
    $28 = $blimb_0_lcssa & 255;
    $29 = ($28 | 0) == 0;
    if ($29) {
      $__ctz_x_0 = $blimb_0_lcssa;
      $__ctz_c_0 = 6;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $31 = -$blimb_0_lcssa | 0;
    $32 = $blimb_0_lcssa & $31;
    $33 = $32 + 9696 | 0;
    $34 = HEAP8[$33] | 0;
    $35 = $34 & 255;
    $36 = $35 - 2 | 0;
    $btwos_0 = $36;
    label = 14;
    break;
   case 11:
    $37 = ($__ctz_c_0 | 0) < 30;
    if ($37) {
      label = 12;
      break;
    } else {
      $__ctz_x_1 = $__ctz_x_0;
      label = 13;
      break;
    }
   case 12:
    $39 = $__ctz_x_0 >>> 8;
    $40 = $39 & 255;
    $41 = ($40 | 0) == 0;
    $42 = $__ctz_c_0 + 8 | 0;
    if ($41) {
      $__ctz_x_0 = $39;
      $__ctz_c_0 = $42;
      label = 11;
      break;
    } else {
      $__ctz_x_1 = $39;
      label = 13;
      break;
    }
   case 13:
    $44 = -$__ctz_x_1 | 0;
    $45 = $__ctz_x_1 & $44;
    $46 = $45 + 9696 | 0;
    $47 = HEAP8[$46] | 0;
    $48 = $47 & 255;
    $49 = $48 + $__ctz_c_0 | 0;
    $btwos_0 = $49;
    label = 14;
    break;
   case 14:
    $51 = $blimb_0_lcssa >>> ($btwos_0 >>> 0);
    $52 = Math_imul($btwos_0, $e);
    $53 = $52 >>> 5;
    $54 = $53 + $rtwos_limbs_0_lcssa | 0;
    $55 = $52 & 31;
    HEAP32[$__tmp_marker >> 2] = 0;
    if (($_0187_lcssa | 0) == 1) {
      $blimb_1_ph = $51;
      label = 15;
      break;
    } else if (($_0187_lcssa | 0) == 2) {
      label = 22;
      break;
    } else {
      label = 26;
      break;
    }
   case 15:
    $56 = $blimb_1_ph >>> 0 < 65536;
    if ($56) {
      $rl_0222 = 1;
      $blimb_1223 = $blimb_1_ph;
      $_0190224 = $e;
      label = 16;
      break;
    } else {
      $rtwos_bits_0259 = $55;
      $rl_3261 = 1;
      $blimb_3263 = $blimb_1_ph;
      $_2192265 = $e;
      $_4267 = 1;
      $_2269 = $blimb_0_in_lcssa;
      label = 41;
      break;
    }
   case 16:
    $57 = $_0190224 & 1;
    $58 = ($57 | 0) == 0;
    if ($58) {
      $rl_1 = $rl_0222;
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $60 = Math_imul($blimb_1223, $rl_0222);
    $rl_1 = $60;
    label = 18;
    break;
   case 18:
    $62 = $_0190224 >>> 1;
    $63 = ($62 | 0) == 0;
    if ($63) {
      $_1191 = 0;
      $blimb_1_lcssa = $blimb_1223;
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $65 = Math_imul($blimb_1223, $blimb_1223);
    $66 = $65 >>> 0 < 65536;
    if ($66) {
      $rl_0222 = $rl_1;
      $blimb_1223 = $65;
      $_0190224 = $62;
      label = 16;
      break;
    } else {
      $_1191 = $62;
      $blimb_1_lcssa = $65;
      label = 20;
      break;
    }
   case 20:
    $67 = ($55 | 0) == 0;
    $68 = ($rl_1 | 0) == 1;
    $or_cond = $67 | $68;
    if ($or_cond) {
      $_2 = $blimb_0_in_lcssa;
      $_4 = 1;
      $_2192 = $_1191;
      $blimb_3 = $blimb_1_lcssa;
      $rl_3 = $rl_1;
      $rtwos_bits_0 = $55;
      label = 39;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $70 = 32 - $55 | 0;
    $71 = $rl_1 >>> ($70 >>> 0);
    $72 = ($71 | 0) == 0;
    $_ = $72 ? 0 : $55;
    $73 = $72 ? $55 : 0;
    $_rl_2 = $rl_1 << $73;
    $_2 = $blimb_0_in_lcssa;
    $_4 = 1;
    $_2192 = $_1191;
    $blimb_3 = $blimb_1_lcssa;
    $rl_3 = $_rl_2;
    $rtwos_bits_0 = $_;
    label = 39;
    break;
   case 22:
    $75 = $blimb_0_in_lcssa + 4 | 0;
    $76 = HEAP32[$75 >> 2] | 0;
    $77 = ($btwos_0 | 0) == 0;
    if ($77) {
      $blimb_2 = $51;
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $79 = 32 - $btwos_0 | 0;
    $80 = $76 << $79;
    $81 = $80 | $51;
    $blimb_2 = $81;
    label = 24;
    break;
   case 24:
    $83 = $76 >>> ($btwos_0 >>> 0);
    $84 = ($83 | 0) == 0;
    if ($84) {
      $blimb_1_ph = $blimb_2;
      label = 15;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $86 = $b_twolimbs | 0;
    HEAP32[$86 >> 2] = $blimb_2;
    $87 = $b_twolimbs + 4 | 0;
    HEAP32[$87 >> 2] = $83;
    $_2 = $86;
    $_4 = $_0187_lcssa;
    $_2192 = $e;
    $blimb_3 = $83;
    $rl_3 = 1;
    $rtwos_bits_0 = $55;
    label = 39;
    break;
   case 26:
    $89 = ($btwos_0 | 0) == 0;
    $or_cond193 = $22 & $89;
    if ($or_cond193) {
      $_1 = $blimb_0_in_lcssa;
      $_3 = $_0187_lcssa;
      label = 38;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $91 = $_0187_lcssa << 2;
    $92 = $91 >>> 0 < 65536;
    if ($92) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    $94 = STACKTOP;
    STACKTOP = STACKTOP + $91 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $98 = $94;
    label = 30;
    break;
   case 29:
    $96 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $91) | 0;
    $98 = $96;
    label = 30;
    break;
   case 30:
    $99 = $98;
    if ($89) {
      label = 31;
      break;
    } else {
      label = 37;
      break;
    }
   case 31:
    $101 = ($_0187_lcssa | 0) == 0;
    if ($101) {
      $_1 = $99;
      $_3 = 0;
      label = 38;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $103 = $_0187_lcssa - 1 | 0;
    $104 = HEAP32[$blimb_0_in_lcssa >> 2] | 0;
    $105 = ($103 | 0) == 0;
    if ($105) {
      $__x_1 = $104;
      $__dst_1 = $99;
      label = 36;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $106 = $_0187_lcssa << 2;
    $107 = $106 - 4 | 0;
    $scevgep246 = $98 + $107 | 0;
    $__x_0 = $104;
    $_0_pn = $blimb_0_in_lcssa;
    $__dst_0 = $99;
    $__n_0 = $103;
    label = 34;
    break;
   case 34:
    $__src_0 = $_0_pn + 4 | 0;
    $109 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $110 = HEAP32[$__src_0 >> 2] | 0;
    $111 = $__n_0 - 1 | 0;
    $112 = ($111 | 0) == 0;
    if ($112) {
      label = 35;
      break;
    } else {
      $__x_0 = $110;
      $_0_pn = $__src_0;
      $__dst_0 = $109;
      $__n_0 = $111;
      label = 34;
      break;
    }
   case 35:
    $scevgep246247 = $scevgep246;
    $__x_1 = $110;
    $__dst_1 = $scevgep246247;
    label = 36;
    break;
   case 36:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    $_1 = $99;
    $_3 = $_0187_lcssa;
    label = 38;
    break;
   case 37:
    $115 = ___gmpn_rshift($99, $blimb_0_in_lcssa, $_0187_lcssa, $btwos_0) | 0;
    $116 = $_0187_lcssa - 1 | 0;
    $117 = $99 + ($116 << 2) | 0;
    $118 = HEAP32[$117 >> 2] | 0;
    $119 = ($118 | 0) == 0;
    $120 = $119 & 1;
    $121 = $_0187_lcssa - $120 | 0;
    $_1 = $99;
    $_3 = $121;
    label = 38;
    break;
   case 38:
    $123 = $_3 - 1 | 0;
    $124 = $_1 + ($123 << 2) | 0;
    $125 = HEAP32[$124 >> 2] | 0;
    $_2 = $_1;
    $_4 = $_3;
    $_2192 = $e;
    $blimb_3 = $125;
    $rl_3 = 1;
    $rtwos_bits_0 = $55;
    label = 39;
    break;
   case 39:
    $127 = $blimb_3 >>> 0 < 65536;
    if ($127) {
      label = 40;
      break;
    } else {
      $rtwos_bits_0259 = $rtwos_bits_0;
      $rl_3261 = $rl_3;
      $blimb_3263 = $blimb_3;
      $_2192265 = $_2192;
      $_4267 = $_4;
      $_2269 = $_2;
      label = 41;
      break;
    }
   case 40:
    $129 = $blimb_3 >>> 0 < 256;
    $130 = $129 ? 1 : 9;
    $134 = $130;
    $rtwos_bits_0258 = $rtwos_bits_0;
    $rl_3260 = $rl_3;
    $blimb_3262 = $blimb_3;
    $_2192264 = $_2192;
    $_4266 = $_4;
    $_2268 = $_2;
    label = 42;
    break;
   case 41:
    $131 = $blimb_3263 >>> 0 < 16777216;
    $132 = $131 ? 17 : 25;
    $134 = $132;
    $rtwos_bits_0258 = $rtwos_bits_0259;
    $rl_3260 = $rl_3261;
    $blimb_3262 = $blimb_3263;
    $_2192264 = $_2192265;
    $_4266 = $_4267;
    $_2268 = $_2269;
    label = 42;
    break;
   case 42:
    $135 = $blimb_3262 >>> ($134 >>> 0);
    $136 = $135 + 9696 | 0;
    $137 = HEAP8[$136] | 0;
    $138 = $137 & 255;
    $139 = $_4266 << 5;
    $140 = $139 - 33 | 0;
    $141 = $140 + $134 | 0;
    $142 = $141 + $138 | 0;
    $143 = Math_imul($142, $_2192264);
    $144 = $143 >>> 5;
    $145 = $144 + 5 | 0;
    $146 = $145 + $54 | 0;
    $147 = $r | 0;
    $148 = HEAP32[$147 >> 2] | 0;
    $149 = ($146 | 0) > ($148 | 0);
    if ($149) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    $151 = ___gmpz_realloc($r, $146) | 0;
    $152 = $151;
    $156 = $152;
    label = 45;
    break;
   case 44:
    $154 = HEAP32[$20 >> 2] | 0;
    $156 = $154;
    label = 45;
    break;
   case 45:
    $157 = ($54 | 0) == 0;
    if ($157) {
      label = 47;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    $158 = $156;
    $159 = Math_imul($btwos_0, $e);
    $160 = $159 >>> 5;
    $161 = $rtwos_limbs_0_lcssa + $160 | 0;
    $162 = $161 << 2;
    _memset($158 | 0, 0, $162 | 0);
    label = 47;
    break;
   case 47:
    $164 = $156 + ($54 << 2) | 0;
    $165 = ($_2192264 | 0) == 0;
    if ($165) {
      label = 48;
      break;
    } else {
      label = 49;
      break;
    }
   case 48:
    HEAP32[$164 >> 2] = $rl_3260;
    $rp_5 = $164;
    $rsize_4 = 1;
    label = 77;
    break;
   case 49:
    $168 = ($_4266 | 0) < 2;
    if ($168) {
      label = 51;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    $170 = $_2192264 & 1;
    $171 = ($170 | 0) == 0;
    if ($171) {
      label = 51;
      break;
    } else {
      $talloc_0 = $145;
      label = 52;
      break;
    }
   case 51:
    $173 = ($145 | 0) / 2 & -1;
    $talloc_0 = $173;
    label = 52;
    break;
   case 52:
    $175 = $talloc_0 << 2;
    $176 = $175 >>> 0 < 65536;
    if ($176) {
      label = 53;
      break;
    } else {
      label = 54;
      break;
    }
   case 53:
    $178 = STACKTOP;
    STACKTOP = STACKTOP + $175 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $182 = $178;
    label = 55;
    break;
   case 54:
    $180 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $175) | 0;
    $182 = $180;
    label = 55;
    break;
   case 55:
    $183 = $182;
    $184 = $_2192264 >>> 0 < 65536;
    if ($184) {
      label = 56;
      break;
    } else {
      label = 57;
      break;
    }
   case 56:
    $186 = $_2192264 >>> 0 < 256;
    $187 = $186 ? 1 : 9;
    $192 = $187;
    label = 58;
    break;
   case 57:
    $189 = $_2192264 >>> 0 < 16777216;
    $190 = $189 ? 17 : 25;
    $192 = $190;
    label = 58;
    break;
   case 58:
    $193 = $_2192264 >>> ($192 >>> 0);
    $194 = $193 + 9696 | 0;
    $195 = HEAP8[$194] | 0;
    $196 = $195 & 255;
    $197 = $192 - 3 | 0;
    $198 = $197 + $196 | 0;
    $199 = ($_4266 | 0) == 1;
    if ($199) {
      label = 59;
      break;
    } else {
      $__p_0 = 0;
      $__n8_0 = $_2192264;
      label = 66;
      break;
    }
   case 59:
    $201 = $198 & 1;
    $202 = ($201 | 0) == 0;
    $_195 = $202 ? $183 : $164;
    HEAP32[$_195 >> 2] = $blimb_3262;
    $203 = ($198 | 0) > -1;
    if ($203) {
      label = 60;
      break;
    } else {
      $rsize_0_lcssa = 1;
      $rp_1_lcssa = $_195;
      label = 64;
      break;
    }
   case 60:
    $_194 = $202 ? $164 : $183;
    $tp3_1198 = $_194;
    $i_0199 = $198;
    $rsize_0200 = 1;
    $rp_1201 = $_195;
    label = 61;
    break;
   case 61:
    ___gmpn_sqr($tp3_1198, $rp_1201, $rsize_0200);
    $205 = $rsize_0200 << 1;
    $206 = $205 - 1 | 0;
    $207 = $tp3_1198 + ($206 << 2) | 0;
    $208 = HEAP32[$207 >> 2] | 0;
    $209 = ($208 | 0) == 0;
    $210 = $209 & 1;
    $211 = $205 - $210 | 0;
    $212 = 1 << $i_0199;
    $213 = $212 & $_2192264;
    $214 = ($213 | 0) == 0;
    if ($214) {
      $rsize_1 = $211;
      label = 63;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    $216 = ___gmpn_mul_1($tp3_1198, $tp3_1198, $211, $blimb_3262) | 0;
    $217 = $tp3_1198 + ($211 << 2) | 0;
    HEAP32[$217 >> 2] = $216;
    $218 = ($216 | 0) != 0;
    $219 = $218 & 1;
    $220 = $219 + $211 | 0;
    $rsize_1 = $220;
    label = 63;
    break;
   case 63:
    $222 = $i_0199 - 1 | 0;
    $223 = ($i_0199 | 0) > 0;
    if ($223) {
      $tp3_1198 = $rp_1201;
      $rp_1201$phi = $tp3_1198;
      $i_0199 = $222;
      $rsize_0200 = $rsize_1;
      $rp_1201 = $rp_1201$phi;
      label = 61;
      break;
    } else {
      $rsize_0_lcssa = $rsize_1;
      $rp_1_lcssa = $tp3_1198;
      label = 64;
      break;
    }
   case 64:
    $224 = ($rl_3260 | 0) == 1;
    if ($224) {
      $rp_5 = $rp_1_lcssa;
      $rsize_4 = $rsize_0_lcssa;
      label = 77;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    $226 = ___gmpn_mul_1($rp_1_lcssa, $rp_1_lcssa, $rsize_0_lcssa, $rl_3260) | 0;
    $227 = $rp_1_lcssa + ($rsize_0_lcssa << 2) | 0;
    HEAP32[$227 >> 2] = $226;
    $228 = ($226 | 0) != 0;
    $229 = $228 & 1;
    $230 = $229 + $rsize_0_lcssa | 0;
    $rp_5 = $rp_1_lcssa;
    $rsize_4 = $230;
    label = 77;
    break;
   case 66:
    $231 = $__n8_0 & 31;
    $232 = -1771476586 >>> ($231 >>> 0);
    $233 = $232 ^ $__p_0;
    $234 = $__n8_0 >>> 5;
    $235 = ($234 | 0) == 0;
    if ($235) {
      label = 67;
      break;
    } else {
      $__p_0 = $233;
      $__n8_0 = $234;
      label = 66;
      break;
    }
   case 67:
    $237 = $233 ^ $198;
    $238 = $237 & 1;
    $239 = ($238 | 0) == 0;
    $_196 = $239 ? $183 : $164;
    $_197 = $239 ? $164 : $183;
    $240 = ($_4266 | 0) == 0;
    if ($240) {
      $rsize_2_ph = 0;
      label = 73;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    $242 = $_4266 - 1 | 0;
    $243 = HEAP32[$_2268 >> 2] | 0;
    $244 = ($242 | 0) == 0;
    if ($244) {
      $__x13_1 = $243;
      $__dst11_1 = $_197;
      label = 72;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    $245 = $_4266 - 1 | 0;
    $__x13_0 = $243;
    $_2_pn = $_2268;
    $__dst11_0 = $_197;
    $__n10_0 = $242;
    label = 70;
    break;
   case 70:
    $__src12_0 = $_2_pn + 4 | 0;
    $247 = $__dst11_0 + 4 | 0;
    HEAP32[$__dst11_0 >> 2] = $__x13_0;
    $248 = HEAP32[$__src12_0 >> 2] | 0;
    $249 = $__n10_0 - 1 | 0;
    $250 = ($249 | 0) == 0;
    if ($250) {
      label = 71;
      break;
    } else {
      $__x13_0 = $248;
      $_2_pn = $__src12_0;
      $__dst11_0 = $247;
      $__n10_0 = $249;
      label = 70;
      break;
    }
   case 71:
    $scevgep = $_197 + ($245 << 2) | 0;
    $__x13_1 = $248;
    $__dst11_1 = $scevgep;
    label = 72;
    break;
   case 72:
    HEAP32[$__dst11_1 >> 2] = $__x13_1;
    $rsize_2_ph = $_4266;
    label = 73;
    break;
   case 73:
    $252 = ($198 | 0) > -1;
    if ($252) {
      $tp3_3203 = $_196;
      $i_1204 = $198;
      $rsize_2205 = $rsize_2_ph;
      $rp_3206 = $_197;
      label = 74;
      break;
    } else {
      $rp_5 = $_197;
      $rsize_4 = $rsize_2_ph;
      label = 77;
      break;
    }
   case 74:
    ___gmpn_sqr($tp3_3203, $rp_3206, $rsize_2205);
    $253 = $rsize_2205 << 1;
    $254 = $253 - 1 | 0;
    $255 = $tp3_3203 + ($254 << 2) | 0;
    $256 = HEAP32[$255 >> 2] | 0;
    $257 = ($256 | 0) == 0;
    $258 = $257 & 1;
    $259 = $253 - $258 | 0;
    $260 = 1 << $i_1204;
    $261 = $260 & $_2192264;
    $262 = ($261 | 0) == 0;
    if ($262) {
      $rp_4 = $tp3_3203;
      $rsize_3 = $259;
      $tp3_4 = $rp_3206;
      label = 76;
      break;
    } else {
      label = 75;
      break;
    }
   case 75:
    $264 = ___gmpn_mul($rp_3206, $tp3_3203, $259, $_2268, $_4266) | 0;
    $265 = ($264 | 0) == 0;
    $266 = $265 & 1;
    $267 = $259 + $_4266 | 0;
    $268 = $267 - $266 | 0;
    $rp_4 = $rp_3206;
    $rsize_3 = $268;
    $tp3_4 = $tp3_3203;
    label = 76;
    break;
   case 76:
    $270 = $i_1204 - 1 | 0;
    $271 = ($i_1204 | 0) > 0;
    if ($271) {
      $tp3_3203 = $tp3_4;
      $i_1204 = $270;
      $rsize_2205 = $rsize_3;
      $rp_3206 = $rp_4;
      label = 74;
      break;
    } else {
      $rp_5 = $rp_4;
      $rsize_4 = $rsize_3;
      label = 77;
      break;
    }
   case 77:
    $272 = HEAP32[$__tmp_marker >> 2] | 0;
    $273 = ($272 | 0) == 0;
    if ($273) {
      label = 79;
      break;
    } else {
      label = 78;
      break;
    }
   case 78:
    ___gmp_tmp_reentrant_free($272);
    label = 79;
    break;
   case 79:
    $276 = ($rtwos_bits_0258 | 0) == 0;
    if ($276) {
      $rsize_5 = $rsize_4;
      label = 81;
      break;
    } else {
      label = 80;
      break;
    }
   case 80:
    $278 = ___gmpn_lshift($rp_5, $rp_5, $rsize_4, $rtwos_bits_0258) | 0;
    $279 = $rp_5 + ($rsize_4 << 2) | 0;
    HEAP32[$279 >> 2] = $278;
    $280 = ($278 | 0) != 0;
    $281 = $280 & 1;
    $282 = $281 + $rsize_4 | 0;
    $rsize_5 = $282;
    label = 81;
    break;
   case 81:
    $284 = $rsize_5 + $54 | 0;
    $285 = -$284 | 0;
    $286 = $16 ? $285 : $284;
    $287 = $r + 4 | 0;
    HEAP32[$287 >> 2] = $286;
    label = 82;
    break;
   case 82:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpz_neg($w, $u) {
  $w = $w | 0;
  $u = $u | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $__n_0 = 0, $__dst_0 = 0, $_pn = 0, $__x_0 = 0, $__src_0 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $34 = 0, $35 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $u + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($u | 0) == ($w | 0);
    if ($3) {
      label = 11;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = ($2 | 0) > -1;
    $6 = -$2 | 0;
    $7 = $5 ? $2 : $6;
    $8 = $w | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ($7 | 0) > ($9 | 0);
    if ($10) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $12 = ___gmpz_realloc($w, $7) | 0;
    $13 = $12;
    $18 = $13;
    label = 5;
    break;
   case 4:
    $15 = $w + 8 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $18 = $16;
    label = 5;
    break;
   case 5:
    $19 = $u + 8 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = ($2 | 0) == 0;
    if ($21) {
      label = 11;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $23 = $7 - 1 | 0;
    $24 = HEAP32[$20 >> 2] | 0;
    $25 = ($23 | 0) == 0;
    if ($25) {
      $__x_1 = $24;
      $__dst_1 = $18;
      label = 10;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $26 = $7 - 1 | 0;
    $__x_0 = $24;
    $_pn = $20;
    $__dst_0 = $18;
    $__n_0 = $23;
    label = 8;
    break;
   case 8:
    $__src_0 = $_pn + 4 | 0;
    $28 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $29 = HEAP32[$__src_0 >> 2] | 0;
    $30 = $__n_0 - 1 | 0;
    $31 = ($30 | 0) == 0;
    if ($31) {
      label = 9;
      break;
    } else {
      $__x_0 = $29;
      $_pn = $__src_0;
      $__dst_0 = $28;
      $__n_0 = $30;
      label = 8;
      break;
    }
   case 9:
    $scevgep = $18 + ($26 << 2) | 0;
    $__x_1 = $29;
    $__dst_1 = $scevgep;
    label = 10;
    break;
   case 10:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 11;
    break;
   case 11:
    $34 = -$2 | 0;
    $35 = $w + 4 | 0;
    HEAP32[$35 >> 2] = $34;
    return;
  }
}
function ___gmpz_out_str($stream, $base, $x) {
  $stream = $stream | 0;
  $base = $base | 0;
  $x = $x | 0;
  var $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_stream = 0, $5 = 0, $7 = 0, $9 = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $num_to_text_0 = 0, $_1 = 0, $18 = 0, $20 = 0, $21 = 0, $written_0 = 0, $x_size_0 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $uadd$0 = 0, $uadd$1 = 0, $37 = 0, $38 = 0, $39 = 0, $__x3_0 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $60 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $scevgep = 0, $__n_0 = 0, $__dst_0 = 0, $_pn = 0, $__x_0 = 0, $__src_0 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $scevgep62 = 0, $__dst_1 = 0, $__x_1 = 0, $xp_0 = 0, $81 = 0, $82 = 0, $i_059 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $exitcond = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $96 = 0, $97 = 0, $98 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    $1 = $x + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($stream | 0) == 0;
    $4 = HEAP32[_stdout >> 2] | 0;
    $_stream = $3 ? $4 : $stream;
    $5 = ($base | 0) > -1;
    if ($5) {
      label = 2;
      break;
    } else {
      label = 5;
      break;
    }
   case 2:
    $7 = ($base | 0) < 2;
    if ($7) {
      $_1 = 10;
      $num_to_text_0 = 5184;
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $9 = ($base | 0) > 36;
    if ($9) {
      label = 4;
      break;
    } else {
      $_1 = $base;
      $num_to_text_0 = 5184;
      label = 7;
      break;
    }
   case 4:
    $11 = ($base | 0) > 62;
    if ($11) {
      $_0 = 0;
      label = 27;
      break;
    } else {
      $_1 = $base;
      $num_to_text_0 = 7488;
      label = 7;
      break;
    }
   case 5:
    $13 = -$base | 0;
    $14 = ($13 | 0) < 2;
    if ($14) {
      $_1 = 10;
      $num_to_text_0 = 6816;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $16 = ($13 | 0) > 36;
    if ($16) {
      $_0 = 0;
      label = 27;
      break;
    } else {
      $_1 = $13;
      $num_to_text_0 = 6816;
      label = 7;
      break;
    }
   case 7:
    $18 = ($2 | 0) < 0;
    if ($18) {
      label = 8;
      break;
    } else {
      $x_size_0 = $2;
      $written_0 = 0;
      label = 9;
      break;
    }
   case 8:
    $20 = _fputc(45, $_stream | 0) | 0;
    $21 = -$2 | 0;
    $x_size_0 = $21;
    $written_0 = 1;
    label = 9;
    break;
   case 9:
    HEAP32[$__tmp_marker >> 2] = 0;
    $23 = 9836 + ($_1 * 20 & -1) | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $x_size_0 << 5;
    $26 = $24 & 65535;
    $27 = $24 >>> 16;
    $28 = $25 & 65504;
    $29 = $x_size_0 >>> 11;
    $30 = $29 & 65535;
    $31 = Math_imul($26, $28);
    $32 = Math_imul($26, $30);
    $33 = Math_imul($27, $28);
    $34 = Math_imul($27, $30);
    $35 = $31 >>> 16;
    $36 = $35 + $32 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($36 | 0, $33 | 0) | 0;
    $uadd$1 = tempRet0;
    $37 = $uadd$0;
    $38 = $uadd$1;
    $39 = $34 + 65536 | 0;
    $__x3_0 = $38 ? $39 : $34;
    $40 = $37 >>> 16;
    $41 = $40 + 3 | 0;
    $42 = $41 + $__x3_0 | 0;
    $43 = $42 >>> 0 < 65536;
    if ($43) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $45 = STACKTOP;
    STACKTOP = STACKTOP + $42 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $49 = $45;
    label = 12;
    break;
   case 11:
    $47 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $42) | 0;
    $49 = $47;
    label = 12;
    break;
   case 12:
    $50 = $x + 8 | 0;
    $51 = HEAP32[$50 >> 2] | 0;
    $52 = $_1 - 1 | 0;
    $53 = $52 & $_1;
    $54 = ($53 | 0) == 0;
    if ($54) {
      $xp_0 = $51;
      label = 22;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $56 = $x_size_0 << 2;
    $57 = $56 | 4;
    $58 = $57 >>> 0 < 65536;
    if ($58) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $60 = STACKTOP;
    STACKTOP = STACKTOP + $57 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $64 = $60;
    label = 16;
    break;
   case 15:
    $62 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $57) | 0;
    $64 = $62;
    label = 16;
    break;
   case 16:
    $65 = $64;
    $66 = ($x_size_0 | 0) == 0;
    if ($66) {
      $xp_0 = $65;
      label = 22;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $68 = $x_size_0 - 1 | 0;
    $69 = HEAP32[$50 >> 2] | 0;
    $70 = HEAP32[$69 >> 2] | 0;
    $71 = ($68 | 0) == 0;
    if ($71) {
      $__x_1 = $70;
      $__dst_1 = $65;
      label = 21;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $72 = $x_size_0 << 2;
    $73 = $72 - 4 | 0;
    $scevgep = $64 + $73 | 0;
    $__x_0 = $70;
    $_pn = $69;
    $__dst_0 = $65;
    $__n_0 = $68;
    label = 19;
    break;
   case 19:
    $__src_0 = $_pn + 4 | 0;
    $75 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $76 = HEAP32[$__src_0 >> 2] | 0;
    $77 = $__n_0 - 1 | 0;
    $78 = ($77 | 0) == 0;
    if ($78) {
      label = 20;
      break;
    } else {
      $__x_0 = $76;
      $_pn = $__src_0;
      $__dst_0 = $75;
      $__n_0 = $77;
      label = 19;
      break;
    }
   case 20:
    $scevgep62 = $scevgep;
    $__x_1 = $76;
    $__dst_1 = $scevgep62;
    label = 21;
    break;
   case 21:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    $xp_0 = $65;
    label = 22;
    break;
   case 22:
    $81 = ___gmpn_get_str($49, $_1, $xp_0, $x_size_0) | 0;
    $82 = ($81 | 0) == 0;
    if ($82) {
      label = 24;
      break;
    } else {
      $i_059 = 0;
      label = 23;
      break;
    }
   case 23:
    $83 = $49 + $i_059 | 0;
    $84 = HEAP8[$83] | 0;
    $85 = $84 & 255;
    $86 = $num_to_text_0 + $85 | 0;
    $87 = HEAP8[$86] | 0;
    HEAP8[$83] = $87;
    $88 = $i_059 + 1 | 0;
    $exitcond = ($88 | 0) == ($81 | 0);
    if ($exitcond) {
      label = 24;
      break;
    } else {
      $i_059 = $88;
      label = 23;
      break;
    }
   case 24:
    $89 = $49 + $81 | 0;
    HEAP8[$89] = 0;
    $90 = _fwrite($49 | 0, 1, $81 | 0, $_stream | 0) | 0;
    $91 = $90 + $written_0 | 0;
    $92 = HEAP32[$__tmp_marker >> 2] | 0;
    $93 = ($92 | 0) == 0;
    if ($93) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    ___gmp_tmp_reentrant_free($92);
    label = 26;
    break;
   case 26:
    $96 = _ferror($_stream | 0) | 0;
    $97 = ($96 | 0) != 0;
    $98 = $97 ? 0 : $91;
    $_0 = $98;
    label = 27;
    break;
   case 27:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function ___gmpz_popcount($__gmp_u) {
  $__gmp_u = $__gmp_u | 0;
  var $1 = 0, $2 = 0, $_lobit = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $__gmp_result_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $__gmp_u + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $_lobit = $2 >> 31;
    $3 = ($2 | 0) > 0;
    if ($3) {
      label = 2;
      break;
    } else {
      $__gmp_result_0 = $_lobit;
      label = 3;
      break;
    }
   case 2:
    $5 = $__gmp_u + 8 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ___gmpn_popcount($6, $2) | 0;
    $__gmp_result_0 = $7;
    label = 3;
    break;
   case 3:
    return $__gmp_result_0 | 0;
  }
  return 0;
}
function ___gmpz_pow_ui($r, $b, $e) {
  $r = $r | 0;
  $b = $b | 0;
  $e = $e | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    if (($e | 0) == 0) {
      label = 2;
      break;
    } else if (($e | 0) == 1) {
      label = 3;
      break;
    } else if (($e | 0) == 2) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 2:
    ___gmpz_set_ui($r, 1);
    label = 6;
    break;
   case 3:
    ___gmpz_set($r, $b);
    label = 6;
    break;
   case 4:
    ___gmpz_mul($r, $b, $b);
    label = 6;
    break;
   case 5:
    $5 = $b + 8 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $b + 4 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    ___gmpz_n_pow_ui($r, $6, $8, $e);
    label = 6;
    break;
   case 6:
    return;
  }
}
function ___gmpz_powm($r, $b, $e, $m) {
  $r = $r | 0;
  $b = $b | 0;
  $e = $e | 0;
  $m = $m | 0;
  var $new_b = 0, $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $es_0 = 0, $_0 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $93 = 0, $94 = 0, $rn_0 = 0, $96 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $or_cond = 0, $107 = 0, $rn_1 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $117 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $scevgep278 = 0, $__dst_0 = 0, $_pn245 = 0, $__x1_0 = 0, $__n_0 = 0, $__src_0 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $scevgep278279 = 0, $__dst_1 = 0, $__x1_1 = 0, $ncnt_0273 = 0, $mp_0272 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $_lcssa271 = 0, $ncnt_0_lcssa = 0, $mp_0_lcssa = 0, $144 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $151 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $__ctz_x_0 = 0, $__ctz_c_0 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $__ctz_x_1 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $cnt_0 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $mp_1 = 0, $cnt_1 = 0, $ncnt_1 = 0, $nodd_0 = 0, $190 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $_ = 0, $198 = 0, $200 = 0, $201 = 0, $202 = 0, $_246 = 0, $203 = 0, $itch_0 = 0, $205 = 0, $206 = 0, $208 = 0, $210 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $218 = 0, $220 = 0, $221 = 0, $223 = 0, $225 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $scevgep288 = 0, $__n3_0 = 0, $__dst4_0 = 0, $_pn = 0, $__x6_0 = 0, $__src5_0 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $scevgep288289 = 0, $__dst4_1 = 0, $__x6_1 = 0, $243 = 0, $244 = 0, $245 = 0, $scevgep286 = 0, $246 = 0, $bp_0 = 0, $248 = 0, $249 = 0, $250 = 0, $252 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $_sum = 0, $269 = 0, $270 = 0, $scevgep284 = 0, $271 = 0, $272 = 0, $scevgep285 = 0, $273 = 0, $275 = 0, $277 = 0, $278 = 0, $280 = 0, $282 = 0, $284 = 0, $285 = 0, $286 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $scevgep282 = 0, $__n14_0 = 0, $__dst15_0 = 0, $mp_1_pn = 0, $__x17_0 = 0, $__src16_0 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $scevgep282283 = 0, $__dst15_1 = 0, $__x17_1 = 0, $300 = 0, $301 = 0, $302 = 0, $scevgep280 = 0, $303 = 0, $mp_2 = 0, $_sum242 = 0, $305 = 0, $_sum243 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $312 = 0, $313 = 0, $314 = 0, $_sum244 = 0, $315 = 0, $316 = 0, $317 = 0, $320 = 0, $322 = 0, $324 = 0, $rn_2 = 0, $325 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $332 = 0, $333 = 0, $334 = 0, $336 = 0, $337 = 0, $338 = 0, $or_cond247 = 0, $340 = 0, $341 = 0, $rn_3 = 0, $343 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $rn_4 = 0, $rp_0 = 0, $349 = 0, $350 = 0, $351 = 0, $353 = 0, $355 = 0, $356 = 0, $358 = 0, $359 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $__n20_0 = 0, $__dst21_0 = 0, $rp_0_pn = 0, $__x23_0 = 0, $__src22_0 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $scevgep = 0, $__dst21_1 = 0, $__x23_1 = 0, $371 = 0, $372 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $new_b = __stackBase__ | 0;
    $__tmp_marker = __stackBase__ + 16 | 0;
    $1 = $m + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > -1;
    $4 = -$2 | 0;
    $5 = $3 ? $2 : $4;
    $6 = ($5 | 0) == 0;
    if ($6) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    ___gmp_divide_by_zero();
   case 3:
    $9 = $m + 8 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    $11 = $e + 4 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($12 | 0) < 1;
    if ($13) {
      label = 4;
      break;
    } else {
      $_0 = $b;
      $es_0 = $12;
      label = 15;
      break;
    }
   case 4:
    $15 = ($12 | 0) == 0;
    if ($15) {
      label = 5;
      break;
    } else {
      label = 9;
      break;
    }
   case 5:
    $17 = ($5 | 0) == 1;
    if ($17) {
      label = 6;
      break;
    } else {
      $22 = 1;
      label = 7;
      break;
    }
   case 6:
    $19 = HEAP32[$10 >> 2] | 0;
    $20 = ($19 | 0) != 1;
    $22 = $20;
    label = 7;
    break;
   case 7:
    $23 = $22 & 1;
    $24 = $r + 4 | 0;
    HEAP32[$24 >> 2] = $23;
    $25 = $r + 8 | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    HEAP32[$26 >> 2] = 1;
    $27 = HEAP32[$__tmp_marker >> 2] | 0;
    $28 = ($27 | 0) == 0;
    if ($28) {
      label = 116;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    ___gmp_tmp_reentrant_free($27);
    label = 116;
    break;
   case 9:
    $31 = $new_b | 0;
    $32 = $5 + 1 | 0;
    $33 = $new_b | 0;
    HEAP32[$33 >> 2] = $32;
    $34 = $32 << 2;
    $35 = $34 >>> 0 < 65536;
    if ($35) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $37 = STACKTOP;
    STACKTOP = STACKTOP + $34 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $41 = $37;
    label = 12;
    break;
   case 11:
    $39 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $34) | 0;
    $41 = $39;
    label = 12;
    break;
   case 12:
    $42 = $41;
    $43 = $new_b + 8 | 0;
    HEAP32[$43 >> 2] = $42;
    $44 = ___gmpz_invert($31, $b, $m) | 0;
    $45 = ($44 | 0) == 0;
    if ($45) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    ___gmp_divide_by_zero();
   case 14:
    $48 = -$12 | 0;
    $_0 = $31;
    $es_0 = $48;
    label = 15;
    break;
   case 15:
    $50 = $_0 + 4 | 0;
    $51 = HEAP32[$50 >> 2] | 0;
    $52 = ($51 | 0) > -1;
    $53 = -$51 | 0;
    $54 = $52 ? $51 : $53;
    $55 = ($54 | 0) == 0;
    if ($55) {
      label = 16;
      break;
    } else {
      label = 18;
      break;
    }
   case 16:
    $57 = $r + 4 | 0;
    HEAP32[$57 >> 2] = 0;
    $58 = HEAP32[$__tmp_marker >> 2] | 0;
    $59 = ($58 | 0) == 0;
    if ($59) {
      label = 116;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    ___gmp_tmp_reentrant_free($58);
    label = 116;
    break;
   case 18:
    $62 = $e + 8 | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    $64 = ($es_0 | 0) == 1;
    if ($64) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    $66 = HEAP32[$63 >> 2] | 0;
    $67 = ($66 | 0) == 1;
    if ($67) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $68 = HEAP32[$10 >> 2] | 0;
    $69 = ($68 | 0) == 0;
    if ($69) {
      $mp_0272 = $10;
      $ncnt_0273 = 0;
      label = 43;
      break;
    } else {
      $mp_0_lcssa = $10;
      $ncnt_0_lcssa = 0;
      $_lcssa271 = $68;
      label = 44;
      break;
    }
   case 21:
    $71 = $5 << 2;
    $72 = $71 >>> 0 < 65536;
    if ($72) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    $74 = STACKTOP;
    STACKTOP = STACKTOP + $71 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $78 = $74;
    label = 24;
    break;
   case 23:
    $76 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $71) | 0;
    $78 = $76;
    label = 24;
    break;
   case 24:
    $79 = $78;
    $80 = $_0 + 8 | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    $82 = ($54 | 0) < ($5 | 0);
    if ($82) {
      label = 35;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $84 = $54 - $5 | 0;
    $85 = $84 << 2;
    $86 = $85 + 4 | 0;
    $87 = $86 >>> 0 < 65536;
    if ($87) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    $89 = STACKTOP;
    STACKTOP = STACKTOP + $86 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $93 = $89;
    label = 28;
    break;
   case 27:
    $91 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $86) | 0;
    $93 = $91;
    label = 28;
    break;
   case 28:
    $94 = $93;
    ___gmpn_tdiv_qr($94, $79, 0, $81, $54, $10, $5);
    $rn_0 = $5;
    label = 29;
    break;
   case 29:
    $96 = ($rn_0 | 0) > 0;
    if ($96) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    $98 = $rn_0 - 1 | 0;
    $99 = $79 + ($98 << 2) | 0;
    $100 = HEAP32[$99 >> 2] | 0;
    $101 = ($100 | 0) == 0;
    if ($101) {
      $rn_0 = $98;
      label = 29;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    $103 = HEAP32[$50 >> 2] | 0;
    $104 = ($103 | 0) > -1;
    $105 = ($rn_0 | 0) == 0;
    $or_cond = $104 | $105;
    if ($or_cond) {
      $rp_0 = $79;
      $rn_4 = $rn_0;
      label = 106;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $107 = ___gmpn_sub($79, $10, $5, $79, $rn_0) | 0;
    $rn_1 = $5;
    label = 33;
    break;
   case 33:
    $109 = ($rn_1 | 0) > 0;
    if ($109) {
      label = 34;
      break;
    } else {
      $rp_0 = $79;
      $rn_4 = $rn_1;
      label = 106;
      break;
    }
   case 34:
    $111 = $rn_1 - 1 | 0;
    $112 = $79 + ($111 << 2) | 0;
    $113 = HEAP32[$112 >> 2] | 0;
    $114 = ($113 | 0) == 0;
    if ($114) {
      $rn_1 = $111;
      label = 33;
      break;
    } else {
      $rp_0 = $79;
      $rn_4 = $rn_1;
      label = 106;
      break;
    }
   case 35:
    $116 = HEAP32[$50 >> 2] | 0;
    $117 = ($116 | 0) < 0;
    if ($117) {
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 36:
    $119 = ___gmpn_sub($79, $10, $5, $81, $54) | 0;
    $120 = $5 - 1 | 0;
    $121 = $79 + ($120 << 2) | 0;
    $122 = HEAP32[$121 >> 2] | 0;
    $123 = ($122 | 0) == 0;
    $124 = $123 & 1;
    $125 = $5 - $124 | 0;
    $rp_0 = $79;
    $rn_4 = $125;
    label = 106;
    break;
   case 37:
    $127 = ($51 | 0) == 0;
    if ($127) {
      $rp_0 = $79;
      $rn_4 = $54;
      label = 106;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    $129 = $54 - 1 | 0;
    $130 = HEAP32[$81 >> 2] | 0;
    $131 = ($129 | 0) == 0;
    if ($131) {
      $__x1_1 = $130;
      $__dst_1 = $79;
      label = 42;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    $132 = $54 << 2;
    $133 = $132 - 4 | 0;
    $scevgep278 = $78 + $133 | 0;
    $__n_0 = $129;
    $__x1_0 = $130;
    $_pn245 = $81;
    $__dst_0 = $79;
    label = 40;
    break;
   case 40:
    $__src_0 = $_pn245 + 4 | 0;
    $135 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x1_0;
    $136 = HEAP32[$__src_0 >> 2] | 0;
    $137 = $__n_0 - 1 | 0;
    $138 = ($137 | 0) == 0;
    if ($138) {
      label = 41;
      break;
    } else {
      $__n_0 = $137;
      $__x1_0 = $136;
      $_pn245 = $__src_0;
      $__dst_0 = $135;
      label = 40;
      break;
    }
   case 41:
    $scevgep278279 = $scevgep278;
    $__x1_1 = $136;
    $__dst_1 = $scevgep278279;
    label = 42;
    break;
   case 42:
    HEAP32[$__dst_1 >> 2] = $__x1_1;
    $rp_0 = $79;
    $rn_4 = $54;
    label = 106;
    break;
   case 43:
    $140 = $mp_0272 + 4 | 0;
    $141 = $ncnt_0273 + 1 | 0;
    $142 = HEAP32[$140 >> 2] | 0;
    $143 = ($142 | 0) == 0;
    if ($143) {
      $mp_0272 = $140;
      $ncnt_0273 = $141;
      label = 43;
      break;
    } else {
      $mp_0_lcssa = $140;
      $ncnt_0_lcssa = $141;
      $_lcssa271 = $142;
      label = 44;
      break;
    }
   case 44:
    $144 = $5 - $ncnt_0_lcssa | 0;
    $145 = $_lcssa271 & 1;
    $146 = ($145 | 0) == 0;
    if ($146) {
      label = 45;
      break;
    } else {
      $nodd_0 = $144;
      $ncnt_1 = $ncnt_0_lcssa;
      $cnt_1 = 0;
      $mp_1 = $mp_0_lcssa;
      label = 54;
      break;
    }
   case 45:
    $148 = $144 << 2;
    $149 = $148 >>> 0 < 65536;
    if ($149) {
      label = 46;
      break;
    } else {
      label = 47;
      break;
    }
   case 46:
    $151 = STACKTOP;
    STACKTOP = STACKTOP + $148 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $155 = $151;
    label = 48;
    break;
   case 47:
    $153 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $148) | 0;
    $155 = $153;
    label = 48;
    break;
   case 48:
    $156 = $155;
    $157 = HEAP32[$mp_0_lcssa >> 2] | 0;
    $158 = $157 & 255;
    $159 = ($158 | 0) == 0;
    if ($159) {
      $__ctz_c_0 = 6;
      $__ctz_x_0 = $157;
      label = 50;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    $161 = -$157 | 0;
    $162 = $157 & $161;
    $163 = $162 + 9696 | 0;
    $164 = HEAP8[$163] | 0;
    $165 = $164 & 255;
    $166 = $165 - 2 | 0;
    $cnt_0 = $166;
    label = 53;
    break;
   case 50:
    $167 = ($__ctz_c_0 | 0) < 30;
    if ($167) {
      label = 51;
      break;
    } else {
      $__ctz_x_1 = $__ctz_x_0;
      label = 52;
      break;
    }
   case 51:
    $169 = $__ctz_x_0 >>> 8;
    $170 = $169 & 255;
    $171 = ($170 | 0) == 0;
    $172 = $__ctz_c_0 + 8 | 0;
    if ($171) {
      $__ctz_c_0 = $172;
      $__ctz_x_0 = $169;
      label = 50;
      break;
    } else {
      $__ctz_x_1 = $169;
      label = 52;
      break;
    }
   case 52:
    $174 = -$__ctz_x_1 | 0;
    $175 = $__ctz_x_1 & $174;
    $176 = $175 + 9696 | 0;
    $177 = HEAP8[$176] | 0;
    $178 = $177 & 255;
    $179 = $178 + $__ctz_c_0 | 0;
    $cnt_0 = $179;
    label = 53;
    break;
   case 53:
    $181 = ___gmpn_rshift($156, $mp_0_lcssa, $144, $cnt_0) | 0;
    $182 = $144 - 1 | 0;
    $183 = $156 + ($182 << 2) | 0;
    $184 = HEAP32[$183 >> 2] | 0;
    $185 = ($184 | 0) == 0;
    $186 = $185 & 1;
    $187 = $144 - $186 | 0;
    $188 = $ncnt_0_lcssa + 1 | 0;
    $nodd_0 = $187;
    $ncnt_1 = $188;
    $cnt_1 = $cnt_0;
    $mp_1 = $156;
    label = 54;
    break;
   case 54:
    $190 = ($ncnt_1 | 0) != 0;
    if ($190) {
      label = 55;
      break;
    } else {
      label = 56;
      break;
    }
   case 55:
    $192 = ($ncnt_1 | 0) > ($nodd_0 | 0);
    $193 = $192 ? $ncnt_1 : $nodd_0;
    $194 = ___gmpn_binvert_itch($193) | 0;
    $195 = $5 * 3 & -1;
    $196 = $5 << 1;
    $197 = ($194 | 0) > ($196 | 0);
    $_ = $197 ? $194 : $196;
    $198 = $_ + $195 | 0;
    $itch_0 = $198;
    label = 57;
    break;
   case 56:
    $200 = ___gmpn_binvert_itch($nodd_0) | 0;
    $201 = $5 << 1;
    $202 = ($200 | 0) > ($201 | 0);
    $_246 = $202 ? $200 : $201;
    $203 = $_246 + $5 | 0;
    $itch_0 = $203;
    label = 57;
    break;
   case 57:
    $205 = $itch_0 << 2;
    $206 = $205 >>> 0 < 65536;
    if ($206) {
      label = 58;
      break;
    } else {
      label = 59;
      break;
    }
   case 58:
    $208 = STACKTOP;
    STACKTOP = STACKTOP + $205 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $212 = $208;
    label = 60;
    break;
   case 59:
    $210 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $205) | 0;
    $212 = $210;
    label = 60;
    break;
   case 60:
    $213 = $212;
    $214 = $213 + ($5 << 2) | 0;
    $215 = $_0 + 8 | 0;
    $216 = HEAP32[$215 >> 2] | 0;
    ___gmpn_powm($213, $216, $54, $63, $es_0, $mp_1, $nodd_0, $214);
    if ($190) {
      label = 61;
      break;
    } else {
      $rn_2 = $5;
      label = 99;
      break;
    }
   case 61:
    $218 = ($54 | 0) < ($ncnt_1 | 0);
    if ($218) {
      label = 62;
      break;
    } else {
      $bp_0 = $216;
      label = 73;
      break;
    }
   case 62:
    $220 = $ncnt_1 << 2;
    $221 = $220 >>> 0 < 65536;
    if ($221) {
      label = 63;
      break;
    } else {
      label = 64;
      break;
    }
   case 63:
    $223 = STACKTOP;
    STACKTOP = STACKTOP + $220 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $227 = $223;
    label = 65;
    break;
   case 64:
    $225 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $220) | 0;
    $227 = $225;
    label = 65;
    break;
   case 65:
    $228 = $227;
    $229 = ($51 | 0) == 0;
    if ($229) {
      label = 71;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    $231 = $54 - 1 | 0;
    $232 = HEAP32[$216 >> 2] | 0;
    $233 = ($231 | 0) == 0;
    if ($233) {
      $__x6_1 = $232;
      $__dst4_1 = $228;
      label = 70;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    $234 = $54 << 2;
    $235 = $234 - 4 | 0;
    $scevgep288 = $227 + $235 | 0;
    $__x6_0 = $232;
    $_pn = $216;
    $__dst4_0 = $228;
    $__n3_0 = $231;
    label = 68;
    break;
   case 68:
    $__src5_0 = $_pn + 4 | 0;
    $237 = $__dst4_0 + 4 | 0;
    HEAP32[$__dst4_0 >> 2] = $__x6_0;
    $238 = HEAP32[$__src5_0 >> 2] | 0;
    $239 = $__n3_0 - 1 | 0;
    $240 = ($239 | 0) == 0;
    if ($240) {
      label = 69;
      break;
    } else {
      $__x6_0 = $238;
      $_pn = $__src5_0;
      $__dst4_0 = $237;
      $__n3_0 = $239;
      label = 68;
      break;
    }
   case 69:
    $scevgep288289 = $scevgep288;
    $__x6_1 = $238;
    $__dst4_1 = $scevgep288289;
    label = 70;
    break;
   case 70:
    HEAP32[$__dst4_1 >> 2] = $__x6_1;
    label = 71;
    break;
   case 71:
    $243 = ($ncnt_1 | 0) == ($54 | 0);
    if ($243) {
      $bp_0 = $228;
      label = 73;
      break;
    } else {
      label = 72;
      break;
    }
   case 72:
    $244 = $ncnt_1 - $54 | 0;
    $245 = $54 << 2;
    $scevgep286 = $227 + $245 | 0;
    $246 = $244 << 2;
    _memset($scevgep286 | 0, 0, $246 | 0);
    $bp_0 = $228;
    label = 73;
    break;
   case 73:
    $248 = HEAP32[$bp_0 >> 2] | 0;
    $249 = $248 & 1;
    $250 = ($249 | 0) == 0;
    if ($250) {
      label = 74;
      break;
    } else {
      label = 78;
      break;
    }
   case 74:
    $252 = ($es_0 | 0) > 1;
    if ($252) {
      label = 75;
      break;
    } else {
      label = 76;
      break;
    }
   case 75:
    if ($190) {
      label = 79;
      break;
    } else {
      label = 81;
      break;
    }
   case 76:
    $255 = ($cnt_1 | 0) != 0;
    $256 = $255 & 1;
    $257 = $ncnt_1 - $256 | 0;
    $258 = $257 << 5;
    $259 = $258 + $cnt_1 | 0;
    $260 = $248 << 1;
    $261 = $260 & 14;
    $262 = 4627 >>> ($261 >>> 0);
    $263 = $262 & 3;
    $264 = HEAP32[$63 >> 2] | 0;
    $265 = Math_imul($264, $263);
    $266 = $265 >>> 0 < $259 >>> 0;
    if ($266) {
      label = 78;
      break;
    } else {
      label = 77;
      break;
    }
   case 77:
    if ($190) {
      label = 80;
      break;
    } else {
      label = 81;
      break;
    }
   case 78:
    $_sum = $ncnt_1 + $5 | 0;
    $269 = $213 + ($_sum << 2) | 0;
    ___gmpn_powlo($214, $bp_0, $63, $es_0, $ncnt_1, $269);
    label = 81;
    break;
   case 79:
    $270 = $5 << 2;
    $scevgep284 = $212 + $270 | 0;
    $271 = $ncnt_1 << 2;
    _memset($scevgep284 | 0, 0, $271 | 0);
    label = 81;
    break;
   case 80:
    $272 = $5 << 2;
    $scevgep285 = $212 + $272 | 0;
    $273 = $ncnt_1 << 2;
    _memset($scevgep285 | 0, 0, $273 | 0);
    label = 81;
    break;
   case 81:
    $275 = ($nodd_0 | 0) < ($ncnt_1 | 0);
    if ($275) {
      label = 82;
      break;
    } else {
      $mp_2 = $mp_1;
      label = 93;
      break;
    }
   case 82:
    $277 = $ncnt_1 << 2;
    $278 = $277 >>> 0 < 65536;
    if ($278) {
      label = 83;
      break;
    } else {
      label = 84;
      break;
    }
   case 83:
    $280 = STACKTOP;
    STACKTOP = STACKTOP + $277 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $284 = $280;
    label = 85;
    break;
   case 84:
    $282 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $277) | 0;
    $284 = $282;
    label = 85;
    break;
   case 85:
    $285 = $284;
    $286 = ($nodd_0 | 0) == 0;
    if ($286) {
      label = 91;
      break;
    } else {
      label = 86;
      break;
    }
   case 86:
    $288 = $nodd_0 - 1 | 0;
    $289 = HEAP32[$mp_1 >> 2] | 0;
    $290 = ($288 | 0) == 0;
    if ($290) {
      $__x17_1 = $289;
      $__dst15_1 = $285;
      label = 90;
      break;
    } else {
      label = 87;
      break;
    }
   case 87:
    $291 = $nodd_0 << 2;
    $292 = $291 - 4 | 0;
    $scevgep282 = $284 + $292 | 0;
    $__x17_0 = $289;
    $mp_1_pn = $mp_1;
    $__dst15_0 = $285;
    $__n14_0 = $288;
    label = 88;
    break;
   case 88:
    $__src16_0 = $mp_1_pn + 4 | 0;
    $294 = $__dst15_0 + 4 | 0;
    HEAP32[$__dst15_0 >> 2] = $__x17_0;
    $295 = HEAP32[$__src16_0 >> 2] | 0;
    $296 = $__n14_0 - 1 | 0;
    $297 = ($296 | 0) == 0;
    if ($297) {
      label = 89;
      break;
    } else {
      $__x17_0 = $295;
      $mp_1_pn = $__src16_0;
      $__dst15_0 = $294;
      $__n14_0 = $296;
      label = 88;
      break;
    }
   case 89:
    $scevgep282283 = $scevgep282;
    $__x17_1 = $295;
    $__dst15_1 = $scevgep282283;
    label = 90;
    break;
   case 90:
    HEAP32[$__dst15_1 >> 2] = $__x17_1;
    label = 91;
    break;
   case 91:
    $300 = ($ncnt_1 | 0) == ($nodd_0 | 0);
    if ($300) {
      $mp_2 = $285;
      label = 93;
      break;
    } else {
      label = 92;
      break;
    }
   case 92:
    $301 = $ncnt_1 - $nodd_0 | 0;
    $302 = $nodd_0 << 2;
    $scevgep280 = $284 + $302 | 0;
    $303 = $301 << 2;
    _memset($scevgep280 | 0, 0, $303 | 0);
    $mp_2 = $285;
    label = 93;
    break;
   case 93:
    $_sum242 = $5 << 1;
    $305 = $213 + ($_sum242 << 2) | 0;
    $_sum243 = $5 * 3 & -1;
    $306 = $213 + ($_sum243 << 2) | 0;
    ___gmpn_binvert($305, $mp_2, $ncnt_1, $306);
    $307 = ($nodd_0 | 0) > ($ncnt_1 | 0);
    $308 = $307 ? $ncnt_1 : $nodd_0;
    $309 = ___gmpn_sub($214, $214, $ncnt_1, $213, $308) | 0;
    ___gmpn_mullo_n($306, $305, $214, $ncnt_1);
    $310 = ($cnt_1 | 0) == 0;
    if ($310) {
      label = 95;
      break;
    } else {
      label = 94;
      break;
    }
   case 94:
    $312 = 1 << $cnt_1;
    $313 = $312 - 1 | 0;
    $314 = $_sum243 - 1 | 0;
    $_sum244 = $314 + $ncnt_1 | 0;
    $315 = $213 + ($_sum244 << 2) | 0;
    $316 = HEAP32[$315 >> 2] | 0;
    $317 = $316 & $313;
    HEAP32[$315 >> 2] = $317;
    label = 95;
    break;
   case 95:
    if ($275) {
      label = 96;
      break;
    } else {
      label = 97;
      break;
    }
   case 96:
    $320 = ___gmpn_mul($214, $306, $ncnt_1, $mp_2, $nodd_0) | 0;
    label = 98;
    break;
   case 97:
    $322 = ___gmpn_mul($214, $mp_2, $nodd_0, $306, $ncnt_1) | 0;
    label = 98;
    break;
   case 98:
    $324 = ___gmpn_add($213, $214, $5, $213, $nodd_0) | 0;
    $rn_2 = $5;
    label = 99;
    break;
   case 99:
    $325 = ($rn_2 | 0) > 0;
    if ($325) {
      label = 100;
      break;
    } else {
      label = 101;
      break;
    }
   case 100:
    $327 = $rn_2 - 1 | 0;
    $328 = $213 + ($327 << 2) | 0;
    $329 = HEAP32[$328 >> 2] | 0;
    $330 = ($329 | 0) == 0;
    if ($330) {
      $rn_2 = $327;
      label = 99;
      break;
    } else {
      label = 101;
      break;
    }
   case 101:
    $332 = HEAP32[$63 >> 2] | 0;
    $333 = $332 & 1;
    $334 = ($333 | 0) == 0;
    if ($334) {
      $rp_0 = $213;
      $rn_4 = $rn_2;
      label = 106;
      break;
    } else {
      label = 102;
      break;
    }
   case 102:
    $336 = HEAP32[$50 >> 2] | 0;
    $337 = ($336 | 0) > -1;
    $338 = ($rn_2 | 0) == 0;
    $or_cond247 = $337 | $338;
    if ($or_cond247) {
      $rp_0 = $213;
      $rn_4 = $rn_2;
      label = 106;
      break;
    } else {
      label = 103;
      break;
    }
   case 103:
    $340 = HEAP32[$9 >> 2] | 0;
    $341 = ___gmpn_sub($213, $340, $5, $213, $rn_2) | 0;
    $rn_3 = $5;
    label = 104;
    break;
   case 104:
    $343 = ($rn_3 | 0) > 0;
    if ($343) {
      label = 105;
      break;
    } else {
      $rp_0 = $213;
      $rn_4 = $rn_3;
      label = 106;
      break;
    }
   case 105:
    $345 = $rn_3 - 1 | 0;
    $346 = $213 + ($345 << 2) | 0;
    $347 = HEAP32[$346 >> 2] | 0;
    $348 = ($347 | 0) == 0;
    if ($348) {
      $rn_3 = $345;
      label = 104;
      break;
    } else {
      $rp_0 = $213;
      $rn_4 = $rn_3;
      label = 106;
      break;
    }
   case 106:
    $349 = $r | 0;
    $350 = HEAP32[$349 >> 2] | 0;
    $351 = ($rn_4 | 0) > ($350 | 0);
    if ($351) {
      label = 107;
      break;
    } else {
      label = 108;
      break;
    }
   case 107:
    $353 = ___gmpz_realloc($r, $rn_4) | 0;
    label = 108;
    break;
   case 108:
    $355 = $r + 4 | 0;
    HEAP32[$355 >> 2] = $rn_4;
    $356 = ($rn_4 | 0) == 0;
    if ($356) {
      label = 114;
      break;
    } else {
      label = 109;
      break;
    }
   case 109:
    $358 = $rn_4 - 1 | 0;
    $359 = $r + 8 | 0;
    $360 = HEAP32[$359 >> 2] | 0;
    $361 = HEAP32[$rp_0 >> 2] | 0;
    $362 = ($358 | 0) == 0;
    if ($362) {
      $__x23_1 = $361;
      $__dst21_1 = $360;
      label = 113;
      break;
    } else {
      label = 110;
      break;
    }
   case 110:
    $363 = $rn_4 - 1 | 0;
    $__x23_0 = $361;
    $rp_0_pn = $rp_0;
    $__dst21_0 = $360;
    $__n20_0 = $358;
    label = 111;
    break;
   case 111:
    $__src22_0 = $rp_0_pn + 4 | 0;
    $365 = $__dst21_0 + 4 | 0;
    HEAP32[$__dst21_0 >> 2] = $__x23_0;
    $366 = HEAP32[$__src22_0 >> 2] | 0;
    $367 = $__n20_0 - 1 | 0;
    $368 = ($367 | 0) == 0;
    if ($368) {
      label = 112;
      break;
    } else {
      $__x23_0 = $366;
      $rp_0_pn = $__src22_0;
      $__dst21_0 = $365;
      $__n20_0 = $367;
      label = 111;
      break;
    }
   case 112:
    $scevgep = $360 + ($363 << 2) | 0;
    $__x23_1 = $366;
    $__dst21_1 = $scevgep;
    label = 113;
    break;
   case 113:
    HEAP32[$__dst21_1 >> 2] = $__x23_1;
    label = 114;
    break;
   case 114:
    $371 = HEAP32[$__tmp_marker >> 2] | 0;
    $372 = ($371 | 0) == 0;
    if ($372) {
      label = 116;
      break;
    } else {
      label = 115;
      break;
    }
   case 115:
    ___gmp_tmp_reentrant_free($371);
    label = 116;
    break;
   case 116:
    STACKTOP = __stackBase__;
    return;
  }
}
function _reduce($tp, $ap, $an, $mp, $mn, $dinv) {
  $tp = $tp | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $mp = $mp | 0;
  $mn = $mn | 0;
  $dinv = $dinv | 0;
  var $__tmp_marker = 0, $1 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $scevgep33 = 0, $__n_0 = 0, $__dst_0 = 0, $ap_pn = 0, $__x_0 = 0, $__src_0 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $scevgep3334 = 0, $__dst_1 = 0, $__x_1 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $__n1_0 = 0, $__dst2_0 = 0, $__src3_0 = 0, $__x4_0 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $scevgep = 0, $__dst2_1 = 0, $__x4_1 = 0, $51 = 0, $52 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    $1 = $an << 2;
    $2 = $1 >>> 0 < 65536;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $4 = STACKTOP;
    STACKTOP = STACKTOP + $1 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $8 = $4;
    label = 4;
    break;
   case 3:
    $6 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $1) | 0;
    $8 = $6;
    label = 4;
    break;
   case 4:
    $9 = $8;
    $10 = $an - $mn | 0;
    $11 = $10 << 2;
    $12 = $11 + 4 | 0;
    $13 = $12 >>> 0 < 65536;
    if ($13) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $15 = STACKTOP;
    STACKTOP = STACKTOP + $12 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $19 = $15;
    label = 7;
    break;
   case 6:
    $17 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $12) | 0;
    $19 = $17;
    label = 7;
    break;
   case 7:
    $20 = $19;
    $21 = ($an | 0) == 0;
    if ($21) {
      label = 13;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $23 = $an - 1 | 0;
    $24 = HEAP32[$ap >> 2] | 0;
    $25 = ($23 | 0) == 0;
    if ($25) {
      $__x_1 = $24;
      $__dst_1 = $9;
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $26 = $an << 2;
    $27 = $26 - 4 | 0;
    $scevgep33 = $8 + $27 | 0;
    $__x_0 = $24;
    $ap_pn = $ap;
    $__dst_0 = $9;
    $__n_0 = $23;
    label = 10;
    break;
   case 10:
    $__src_0 = $ap_pn + 4 | 0;
    $29 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $30 = HEAP32[$__src_0 >> 2] | 0;
    $31 = $__n_0 - 1 | 0;
    $32 = ($31 | 0) == 0;
    if ($32) {
      label = 11;
      break;
    } else {
      $__x_0 = $30;
      $ap_pn = $__src_0;
      $__dst_0 = $29;
      $__n_0 = $31;
      label = 10;
      break;
    }
   case 11:
    $scevgep3334 = $scevgep33;
    $__x_1 = $30;
    $__dst_1 = $scevgep3334;
    label = 12;
    break;
   case 12:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 13;
    break;
   case 13:
    _mod($9, $an, $mp, $mn, $dinv, $20);
    $35 = ($mn | 0) == 0;
    if ($35) {
      label = 19;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $37 = $mn - 1 | 0;
    $38 = HEAP32[$9 >> 2] | 0;
    $39 = ($37 | 0) == 0;
    if ($39) {
      $__x4_1 = $38;
      $__dst2_1 = $tp;
      label = 18;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $40 = $8 + 4 | 0;
    $41 = $40;
    $42 = $mn - 1 | 0;
    $__x4_0 = $38;
    $__src3_0 = $41;
    $__dst2_0 = $tp;
    $__n1_0 = $37;
    label = 16;
    break;
   case 16:
    $44 = $__dst2_0 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    $45 = $__src3_0 + 4 | 0;
    $46 = HEAP32[$__src3_0 >> 2] | 0;
    $47 = $__n1_0 - 1 | 0;
    $48 = ($47 | 0) == 0;
    if ($48) {
      label = 17;
      break;
    } else {
      $__x4_0 = $46;
      $__src3_0 = $45;
      $__dst2_0 = $44;
      $__n1_0 = $47;
      label = 16;
      break;
    }
   case 17:
    $scevgep = $tp + ($42 << 2) | 0;
    $__x4_1 = $46;
    $__dst2_1 = $scevgep;
    label = 18;
    break;
   case 18:
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    label = 19;
    break;
   case 19:
    $51 = HEAP32[$__tmp_marker >> 2] | 0;
    $52 = ($51 | 0) == 0;
    if ($52) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    ___gmp_tmp_reentrant_free($51);
    label = 21;
    break;
   case 21:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpz_powm_ui($r, $b, $el, $m) {
  $r = $r | 0;
  $b = $b | 0;
  $el = $el | 0;
  $m = $m | 0;
  var $dinv = 0, $__tmp_marker = 0, $e31 = 0, $ep = 0, $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $mp_0 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $uadd309$0 = 0, $uadd309$1 = 0, $79 = 0, $80 = 0, $_not = 0, $81 = 0, $or_cond = 0, $83 = 0, $84 = 0, $__r1_0 = 0, $__q1_0 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $uadd308$0 = 0, $uadd308$1 = 0, $96 = 0, $_not310 = 0, $97 = 0, $98 = 0, $or_cond312 = 0, $__v = 0, $_ = 0, $__q0_0 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $uadd$0 = 0, $uadd$1 = 0, $104 = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $_p_0 = 0, $_v_0 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $uadd306$0 = 0, $uadd306$1 = 0, $126 = 0, $127 = 0, $128 = 0, $__x3_0 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $uadd307$0 = 0, $uadd307$1 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $142 = 0, $or_cond313 = 0, $143 = 0, $_315 = 0, $_v_1 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $158 = 0, $160 = 0, $162 = 0, $163 = 0, $bn_0 = 0, $165 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $bn_1 = 0, $bp_0 = 0, $171 = 0, $173 = 0, $174 = 0, $175 = 0, $bp_0377 = 0, $bn_1376 = 0, $177 = 0, $178 = 0, $179 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $192 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $199 = 0, $201 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $scevgep374 = 0, $__n_0 = 0, $__dst_0 = 0, $bp_0_pn = 0, $__x_0 = 0, $__src_0 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $scevgep374375 = 0, $__dst_1 = 0, $__x_1 = 0, $216 = 0, $218 = 0, $219 = 0, $221 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $scevgep360 = 0, $scevgep360361 = 0, $scevgep367 = 0, $scevgep367368 = 0, $249 = 0, $251 = 0, $252 = 0, $254 = 0, $e_0_in = 0, $c_0 = 0, $xn_0 = 0, $e_0 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $265 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $scevgep363_sum = 0, $scevgep364 = 0, $__n3_0 = 0, $__dst4_0 = 0, $__src5_0 = 0, $__x6_0 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $scevgep364365 = 0, $__dst4_1 = 0, $__x6_1 = 0, $283 = 0, $__n7_0 = 0, $__dst8_0 = 0, $__src9_0 = 0, $__x10_0 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $__dst8_1 = 0, $__x10_1 = 0, $xn_1 = 0, $290 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $300 = 0, $302 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $scevgep370_sum = 0, $scevgep371 = 0, $__n11_0 = 0, $__dst12_0 = 0, $__src13_0 = 0, $__x14_0 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $scevgep371372 = 0, $__dst12_1 = 0, $__x14_1 = 0, $321 = 0, $__n15_0 = 0, $__dst16_0 = 0, $__src17_0 = 0, $__x18_0 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $__dst16_1 = 0, $__x18_1 = 0, $xn_2 = 0, $328 = 0, $329 = 0, $xn_3 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $338 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $scevgep354 = 0, $__n19_0 = 0, $__dst20_0 = 0, $__src21_0 = 0, $__x22_0 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $scevgep354355 = 0, $__dst20_1 = 0, $__x22_1 = 0, $357 = 0, $359 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $scevgep357 = 0, $__n23_0 = 0, $__dst24_0 = 0, $__src25_0 = 0, $__x26_0 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $scevgep357358 = 0, $__dst24_1 = 0, $__x26_1 = 0, $xn_4 = 0, $373 = 0, $xn_5 = 0, $374 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $381 = 0, $382 = 0, $384 = 0, $385 = 0, $386 = 0, $or_cond314 = 0, $388 = 0, $389 = 0, $xn_6 = 0, $391 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $xn_7 = 0, $397 = 0, $398 = 0, $399 = 0, $401 = 0, $403 = 0, $404 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $__n27_0 = 0, $__dst28_0 = 0, $__src29_0 = 0, $__x30_0 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $scevgep = 0, $__dst28_1 = 0, $__x30_1 = 0, $422 = 0, $423 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $dinv = __stackBase__ | 0;
    $__tmp_marker = __stackBase__ + 8 | 0;
    $e31 = __stackBase__ + 16 | 0;
    $ep = __stackBase__ + 32 | 0;
    $1 = $el >>> 0 < 20;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 115;
      break;
    }
   case 2:
    $3 = $m + 8 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $m + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) > -1;
    $8 = -$6 | 0;
    $9 = $7 ? $6 : $8;
    $10 = ($9 | 0) == 0;
    if ($10) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    ___gmp_divide_by_zero();
   case 4:
    $13 = ($el | 0) == 0;
    if ($13) {
      label = 5;
      break;
    } else {
      label = 8;
      break;
    }
   case 5:
    $15 = ($9 | 0) == 1;
    if ($15) {
      label = 6;
      break;
    } else {
      $20 = 0;
      label = 7;
      break;
    }
   case 6:
    $17 = HEAP32[$4 >> 2] | 0;
    $18 = ($17 | 0) == 1;
    $20 = $18;
    label = 7;
    break;
   case 7:
    $21 = $20 & 1;
    $22 = $21 ^ 1;
    $23 = $r + 4 | 0;
    HEAP32[$23 >> 2] = $22;
    $24 = $r + 8 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    HEAP32[$25 >> 2] = 1;
    label = 116;
    break;
   case 8:
    HEAP32[$__tmp_marker >> 2] = 0;
    $27 = $9 - 1 | 0;
    $28 = $4 + ($27 << 2) | 0;
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = $29 >>> 0 < 65536;
    if ($30) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $32 = $29 >>> 0 < 256;
    $33 = $32 ? 1 : 9;
    $38 = $33;
    label = 11;
    break;
   case 10:
    $35 = $29 >>> 0 < 16777216;
    $36 = $35 ? 17 : 25;
    $38 = $36;
    label = 11;
    break;
   case 11:
    $39 = 33 - $38 | 0;
    $40 = $29 >>> ($38 >>> 0);
    $41 = $40 + 9696 | 0;
    $42 = HEAP8[$41] | 0;
    $43 = $42 & 255;
    $44 = $39 - $43 | 0;
    $45 = ($39 | 0) != ($43 | 0);
    if ($45) {
      label = 12;
      break;
    } else {
      $mp_0 = $4;
      label = 16;
      break;
    }
   case 12:
    $47 = $9 << 2;
    $48 = $47 >>> 0 < 65536;
    if ($48) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $50 = STACKTOP;
    STACKTOP = STACKTOP + $47 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $54 = $50;
    label = 15;
    break;
   case 14:
    $52 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $47) | 0;
    $54 = $52;
    label = 15;
    break;
   case 15:
    $55 = $54;
    $56 = ___gmpn_lshift($55, $4, $9, $44) | 0;
    $mp_0 = $55;
    label = 16;
    break;
   case 16:
    $58 = ($9 | 0) == 1;
    if ($58) {
      $64 = 0;
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $60 = $9 - 2 | 0;
    $61 = $mp_0 + ($60 << 2) | 0;
    $62 = HEAP32[$61 >> 2] | 0;
    $64 = $62;
    label = 18;
    break;
   case 18:
    $65 = $mp_0 + ($27 << 2) | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    $67 = $66 >>> 16;
    $68 = $66 & 65535;
    $69 = $66 ^ -1;
    $70 = ($69 >>> 0) / ($67 >>> 0) >>> 0;
    $71 = Math_imul($70, $67);
    $72 = $69 - $71 | 0;
    $73 = Math_imul($70, $68);
    $74 = $72 << 16;
    $75 = $74 | 65535;
    $76 = $75 >>> 0 < $73 >>> 0;
    if ($76) {
      label = 19;
      break;
    } else {
      $__q1_0 = $70;
      $__r1_0 = $75;
      label = 21;
      break;
    }
   case 19:
    $78 = $70 - 1 | 0;
    $uadd309$0 = _llvm_uadd_with_overflow_i32($75 | 0, $66 | 0) | 0;
    $uadd309$1 = tempRet0;
    $79 = $uadd309$0;
    $80 = $uadd309$1;
    $_not = $80 ^ 1;
    $81 = $79 >>> 0 < $73 >>> 0;
    $or_cond = $81 & $_not;
    if ($or_cond) {
      label = 20;
      break;
    } else {
      $__q1_0 = $78;
      $__r1_0 = $79;
      label = 21;
      break;
    }
   case 20:
    $83 = $70 - 2 | 0;
    $84 = $79 + $66 | 0;
    $__q1_0 = $83;
    $__r1_0 = $84;
    label = 21;
    break;
   case 21:
    $86 = $__r1_0 - $73 | 0;
    $87 = ($86 >>> 0) / ($67 >>> 0) >>> 0;
    $88 = Math_imul($87, $67);
    $89 = $86 - $88 | 0;
    $90 = Math_imul($87, $68);
    $91 = $89 << 16;
    $92 = $91 | 65535;
    $93 = $92 >>> 0 < $90 >>> 0;
    if ($93) {
      label = 22;
      break;
    } else {
      $__q0_0 = $87;
      label = 23;
      break;
    }
   case 22:
    $95 = HEAP32[$65 >> 2] | 0;
    $uadd308$0 = _llvm_uadd_with_overflow_i32($92 | 0, $95 | 0) | 0;
    $uadd308$1 = tempRet0;
    $96 = $uadd308$1;
    $_not310 = $96 ^ 1;
    $97 = $uadd308$0;
    $98 = $97 >>> 0 < $90 >>> 0;
    $or_cond312 = $98 & $_not310;
    $__v = $or_cond312 ? -2 : -1;
    $_ = $__v + $87 | 0;
    $__q0_0 = $_;
    label = 23;
    break;
   case 23:
    $100 = $__q1_0 << 16;
    $101 = $__q0_0 | $100;
    $102 = HEAP32[$65 >> 2] | 0;
    $103 = Math_imul($102, $101);
    $uadd$0 = _llvm_uadd_with_overflow_i32($103 | 0, $64 | 0) | 0;
    $uadd$1 = tempRet0;
    $104 = $uadd$0;
    $105 = $uadd$1;
    if ($105) {
      label = 24;
      break;
    } else {
      $_v_0 = $101;
      $_p_0 = $104;
      label = 25;
      break;
    }
   case 24:
    $107 = $101 - 1 | 0;
    $108 = $104 >>> 0 >= $102 >>> 0;
    $109 = $108 & 1;
    $110 = -$109 | 0;
    $111 = $104 - $102 | 0;
    $112 = $107 - $109 | 0;
    $113 = $102 & $110;
    $114 = $111 - $113 | 0;
    $_v_0 = $112;
    $_p_0 = $114;
    label = 25;
    break;
   case 25:
    $116 = $64 & 65535;
    $117 = $64 >>> 16;
    $118 = $_v_0 & 65535;
    $119 = $_v_0 >>> 16;
    $120 = Math_imul($118, $116);
    $121 = Math_imul($119, $116);
    $122 = Math_imul($118, $117);
    $123 = Math_imul($119, $117);
    $124 = $120 >>> 16;
    $125 = $124 + $121 | 0;
    $uadd306$0 = _llvm_uadd_with_overflow_i32($125 | 0, $122 | 0) | 0;
    $uadd306$1 = tempRet0;
    $126 = $uadd306$0;
    $127 = $uadd306$1;
    $128 = $123 + 65536 | 0;
    $__x3_0 = $127 ? $128 : $123;
    $129 = $126 >>> 16;
    $130 = $__x3_0 + $129 | 0;
    $131 = $126 << 16;
    $132 = $120 & 65535;
    $133 = $131 | $132;
    $uadd307$0 = _llvm_uadd_with_overflow_i32($_p_0 | 0, $130 | 0) | 0;
    $uadd307$1 = tempRet0;
    $134 = $uadd307$0;
    $135 = $uadd307$1;
    if ($135) {
      label = 26;
      break;
    } else {
      $_v_1 = $_v_0;
      label = 28;
      break;
    }
   case 26:
    $137 = $_v_0 - 1 | 0;
    $138 = HEAP32[$65 >> 2] | 0;
    $139 = $134 >>> 0 < $138 >>> 0;
    if ($139) {
      $_v_1 = $137;
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $141 = $134 >>> 0 <= $138 >>> 0;
    $142 = $133 >>> 0 < $64 >>> 0;
    $or_cond313 = $141 & $142;
    $143 = $_v_0 - 2 | 0;
    $_315 = $or_cond313 ? $137 : $143;
    $_v_1 = $_315;
    label = 28;
    break;
   case 28:
    $145 = $dinv | 0;
    HEAP32[$145 >> 2] = $_v_1;
    $146 = $b + 4 | 0;
    $147 = HEAP32[$146 >> 2] | 0;
    $148 = ($147 | 0) > -1;
    $149 = -$147 | 0;
    $150 = $148 ? $147 : $149;
    $151 = $b + 8 | 0;
    $152 = HEAP32[$151 >> 2] | 0;
    $153 = ($150 | 0) > ($9 | 0);
    if ($153) {
      label = 29;
      break;
    } else {
      $bp_0 = $152;
      $bn_1 = $150;
      label = 35;
      break;
    }
   case 29:
    $155 = $9 << 2;
    $156 = $155 >>> 0 < 65536;
    if ($156) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    $158 = STACKTOP;
    STACKTOP = STACKTOP + $155 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $162 = $158;
    label = 32;
    break;
   case 31:
    $160 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $155) | 0;
    $162 = $160;
    label = 32;
    break;
   case 32:
    $163 = $162;
    _reduce($163, $152, $150, $mp_0, $9, $dinv);
    $bn_0 = $9;
    label = 33;
    break;
   case 33:
    $165 = ($bn_0 | 0) > 0;
    if ($165) {
      label = 34;
      break;
    } else {
      $bp_0 = $163;
      $bn_1 = $bn_0;
      label = 35;
      break;
    }
   case 34:
    $167 = $bn_0 - 1 | 0;
    $168 = $163 + ($167 << 2) | 0;
    $169 = HEAP32[$168 >> 2] | 0;
    $170 = ($169 | 0) == 0;
    if ($170) {
      $bn_0 = $167;
      label = 33;
      break;
    } else {
      $bn_1376 = $bn_0;
      $bp_0377 = $163;
      label = 38;
      break;
    }
   case 35:
    $171 = ($bn_1 | 0) == 0;
    if ($171) {
      label = 36;
      break;
    } else {
      $bn_1376 = $bn_1;
      $bp_0377 = $bp_0;
      label = 38;
      break;
    }
   case 36:
    $173 = $r + 4 | 0;
    HEAP32[$173 >> 2] = 0;
    $174 = HEAP32[$__tmp_marker >> 2] | 0;
    $175 = ($174 | 0) == 0;
    if ($175) {
      label = 116;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    ___gmp_tmp_reentrant_free($174);
    label = 116;
    break;
   case 38:
    $177 = $9 << 3;
    $178 = $177 | 4;
    $179 = $178 >>> 0 < 65536;
    if ($179) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    $181 = STACKTOP;
    STACKTOP = STACKTOP + $178 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $185 = $181;
    label = 41;
    break;
   case 40:
    $183 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $178) | 0;
    $185 = $183;
    label = 41;
    break;
   case 41:
    $186 = $185;
    $187 = $9 << 2;
    $188 = $187 >>> 0 < 65536;
    if ($188) {
      label = 42;
      break;
    } else {
      label = 43;
      break;
    }
   case 42:
    $190 = STACKTOP;
    STACKTOP = STACKTOP + $187 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $194 = $190;
    label = 44;
    break;
   case 43:
    $192 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $187) | 0;
    $194 = $192;
    label = 44;
    break;
   case 44:
    $195 = $194;
    $196 = $187 + 4 | 0;
    $197 = $196 >>> 0 < 65536;
    if ($197) {
      label = 45;
      break;
    } else {
      label = 46;
      break;
    }
   case 45:
    $199 = STACKTOP;
    STACKTOP = STACKTOP + $196 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $203 = $199;
    label = 47;
    break;
   case 46:
    $201 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $196) | 0;
    $203 = $201;
    label = 47;
    break;
   case 47:
    $204 = $203;
    $205 = $bn_1376 - 1 | 0;
    $206 = HEAP32[$bp_0377 >> 2] | 0;
    $207 = ($205 | 0) == 0;
    if ($207) {
      $__x_1 = $206;
      $__dst_1 = $195;
      label = 51;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    $208 = $bn_1376 << 2;
    $209 = $208 - 4 | 0;
    $scevgep374 = $194 + $209 | 0;
    $__x_0 = $206;
    $bp_0_pn = $bp_0377;
    $__dst_0 = $195;
    $__n_0 = $205;
    label = 49;
    break;
   case 49:
    $__src_0 = $bp_0_pn + 4 | 0;
    $211 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $212 = HEAP32[$__src_0 >> 2] | 0;
    $213 = $__n_0 - 1 | 0;
    $214 = ($213 | 0) == 0;
    if ($214) {
      label = 50;
      break;
    } else {
      $__x_0 = $212;
      $bp_0_pn = $__src_0;
      $__dst_0 = $211;
      $__n_0 = $213;
      label = 49;
      break;
    }
   case 50:
    $scevgep374375 = $scevgep374;
    $__x_1 = $212;
    $__dst_1 = $scevgep374375;
    label = 51;
    break;
   case 51:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    $216 = $el >>> 0 < 65536;
    if ($216) {
      label = 52;
      break;
    } else {
      label = 53;
      break;
    }
   case 52:
    $218 = $el >>> 0 < 256;
    $219 = $218 ? 1 : 9;
    $224 = $219;
    label = 54;
    break;
   case 53:
    $221 = $el >>> 0 < 16777216;
    $222 = $221 ? 17 : 25;
    $224 = $222;
    label = 54;
    break;
   case 54:
    $225 = 33 - $224 | 0;
    $226 = $el >>> ($224 >>> 0);
    $227 = $226 + 9696 | 0;
    $228 = HEAP8[$227] | 0;
    $229 = $228 & 255;
    $230 = $225 - $229 | 0;
    $231 = ($230 | 0) == 31;
    if ($231) {
      label = 56;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    $232 = 31 - $230 | 0;
    $233 = $el << $230;
    $234 = $185 + 4 | 0;
    $235 = $234;
    $236 = $185 + 4 | 0;
    $237 = $236;
    $238 = ($6 | 0) == 0;
    $239 = $185 + 4 | 0;
    $240 = $239;
    $241 = ($27 | 0) == 0;
    $242 = ($6 | 0) == 0;
    $243 = $185 + 4 | 0;
    $244 = $243;
    $245 = ($27 | 0) == 0;
    $246 = $9 << 2;
    $247 = $246 - 4 | 0;
    $scevgep360 = $194 + $247 | 0;
    $scevgep360361 = $scevgep360;
    $scevgep367 = $194 + $247 | 0;
    $scevgep367368 = $scevgep367;
    $xn_0 = $bn_1376;
    $c_0 = $232;
    $e_0_in = $233;
    label = 59;
    break;
   case 56:
    $249 = ($bn_1376 | 0) == ($9 | 0);
    if ($249) {
      label = 57;
      break;
    } else {
      $xn_3 = $bn_1376;
      label = 83;
      break;
    }
   case 57:
    $251 = ___gmpn_cmp($195, $mp_0, $9) | 0;
    $252 = ($251 | 0) > -1;
    if ($252) {
      label = 58;
      break;
    } else {
      $xn_3 = $bn_1376;
      label = 83;
      break;
    }
   case 58:
    $254 = ___gmpn_sub_n($195, $195, $mp_0, $9) | 0;
    $xn_3 = $bn_1376;
    label = 83;
    break;
   case 59:
    $e_0 = $e_0_in << 1;
    ___gmpn_sqr($186, $195, $xn_0);
    $256 = $xn_0 << 1;
    $257 = $256 - 1 | 0;
    $258 = $186 + ($257 << 2) | 0;
    $259 = HEAP32[$258 >> 2] | 0;
    $260 = ($259 | 0) == 0;
    $261 = $260 & 1;
    $262 = $256 - $261 | 0;
    $263 = ($262 | 0) < ($9 | 0);
    if ($263) {
      label = 60;
      break;
    } else {
      label = 66;
      break;
    }
   case 60:
    $265 = ($256 | 0) == ($261 | 0);
    if ($265) {
      $xn_1 = $262;
      label = 70;
      break;
    } else {
      label = 61;
      break;
    }
   case 61:
    $267 = $262 - 1 | 0;
    $268 = HEAP32[$186 >> 2] | 0;
    $269 = ($267 | 0) == 0;
    if ($269) {
      $__x6_1 = $268;
      $__dst4_1 = $195;
      label = 65;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    $270 = $xn_0 << 3;
    $271 = $260 & 1;
    $272 = $271 << 2;
    $273 = $270 - $272 | 0;
    $scevgep363_sum = $273 - 4 | 0;
    $scevgep364 = $194 + $scevgep363_sum | 0;
    $__x6_0 = $268;
    $__src5_0 = $235;
    $__dst4_0 = $195;
    $__n3_0 = $267;
    label = 63;
    break;
   case 63:
    $275 = $__dst4_0 + 4 | 0;
    HEAP32[$__dst4_0 >> 2] = $__x6_0;
    $276 = $__src5_0 + 4 | 0;
    $277 = HEAP32[$__src5_0 >> 2] | 0;
    $278 = $__n3_0 - 1 | 0;
    $279 = ($278 | 0) == 0;
    if ($279) {
      label = 64;
      break;
    } else {
      $__x6_0 = $277;
      $__src5_0 = $276;
      $__dst4_0 = $275;
      $__n3_0 = $278;
      label = 63;
      break;
    }
   case 64:
    $scevgep364365 = $scevgep364;
    $__x6_1 = $277;
    $__dst4_1 = $scevgep364365;
    label = 65;
    break;
   case 65:
    HEAP32[$__dst4_1 >> 2] = $__x6_1;
    $xn_1 = $262;
    label = 70;
    break;
   case 66:
    _mod($186, $262, $mp_0, $9, $dinv, $204);
    if ($242) {
      $xn_1 = $9;
      label = 70;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    $283 = HEAP32[$186 >> 2] | 0;
    if ($245) {
      $__x10_1 = $283;
      $__dst8_1 = $195;
      label = 69;
      break;
    } else {
      $__x10_0 = $283;
      $__src9_0 = $244;
      $__dst8_0 = $195;
      $__n7_0 = $27;
      label = 68;
      break;
    }
   case 68:
    $284 = $__dst8_0 + 4 | 0;
    HEAP32[$__dst8_0 >> 2] = $__x10_0;
    $285 = $__src9_0 + 4 | 0;
    $286 = HEAP32[$__src9_0 >> 2] | 0;
    $287 = $__n7_0 - 1 | 0;
    $288 = ($287 | 0) == 0;
    if ($288) {
      $__x10_1 = $286;
      $__dst8_1 = $scevgep360361;
      label = 69;
      break;
    } else {
      $__x10_0 = $286;
      $__src9_0 = $285;
      $__dst8_0 = $284;
      $__n7_0 = $287;
      label = 68;
      break;
    }
   case 69:
    HEAP32[$__dst8_1 >> 2] = $__x10_1;
    $xn_1 = $9;
    label = 70;
    break;
   case 70:
    $290 = ($e_0 | 0) < 0;
    if ($290) {
      label = 71;
      break;
    } else {
      $xn_2 = $xn_1;
      label = 82;
      break;
    }
   case 71:
    $292 = ___gmpn_mul($186, $195, $xn_1, $bp_0377, $bn_1376) | 0;
    $293 = $xn_1 + $bn_1376 | 0;
    $294 = $293 - 1 | 0;
    $295 = $186 + ($294 << 2) | 0;
    $296 = HEAP32[$295 >> 2] | 0;
    $297 = ($296 | 0) == 0;
    $298 = $297 & 1;
    $299 = $293 - $298 | 0;
    $300 = ($299 | 0) < ($9 | 0);
    if ($300) {
      label = 72;
      break;
    } else {
      label = 78;
      break;
    }
   case 72:
    $302 = ($293 | 0) == ($298 | 0);
    if ($302) {
      $xn_2 = $299;
      label = 82;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    $304 = $299 - 1 | 0;
    $305 = HEAP32[$186 >> 2] | 0;
    $306 = ($304 | 0) == 0;
    if ($306) {
      $__x14_1 = $305;
      $__dst12_1 = $195;
      label = 77;
      break;
    } else {
      label = 74;
      break;
    }
   case 74:
    $307 = $bn_1376 + $xn_1 | 0;
    $308 = $307 << 2;
    $309 = $297 & 1;
    $310 = $309 << 2;
    $311 = $308 - $310 | 0;
    $scevgep370_sum = $311 - 4 | 0;
    $scevgep371 = $194 + $scevgep370_sum | 0;
    $__x14_0 = $305;
    $__src13_0 = $237;
    $__dst12_0 = $195;
    $__n11_0 = $304;
    label = 75;
    break;
   case 75:
    $313 = $__dst12_0 + 4 | 0;
    HEAP32[$__dst12_0 >> 2] = $__x14_0;
    $314 = $__src13_0 + 4 | 0;
    $315 = HEAP32[$__src13_0 >> 2] | 0;
    $316 = $__n11_0 - 1 | 0;
    $317 = ($316 | 0) == 0;
    if ($317) {
      label = 76;
      break;
    } else {
      $__x14_0 = $315;
      $__src13_0 = $314;
      $__dst12_0 = $313;
      $__n11_0 = $316;
      label = 75;
      break;
    }
   case 76:
    $scevgep371372 = $scevgep371;
    $__x14_1 = $315;
    $__dst12_1 = $scevgep371372;
    label = 77;
    break;
   case 77:
    HEAP32[$__dst12_1 >> 2] = $__x14_1;
    $xn_2 = $299;
    label = 82;
    break;
   case 78:
    _mod($186, $299, $mp_0, $9, $dinv, $204);
    if ($238) {
      $xn_2 = $9;
      label = 82;
      break;
    } else {
      label = 79;
      break;
    }
   case 79:
    $321 = HEAP32[$186 >> 2] | 0;
    if ($241) {
      $__x18_1 = $321;
      $__dst16_1 = $195;
      label = 81;
      break;
    } else {
      $__x18_0 = $321;
      $__src17_0 = $240;
      $__dst16_0 = $195;
      $__n15_0 = $27;
      label = 80;
      break;
    }
   case 80:
    $322 = $__dst16_0 + 4 | 0;
    HEAP32[$__dst16_0 >> 2] = $__x18_0;
    $323 = $__src17_0 + 4 | 0;
    $324 = HEAP32[$__src17_0 >> 2] | 0;
    $325 = $__n15_0 - 1 | 0;
    $326 = ($325 | 0) == 0;
    if ($326) {
      $__x18_1 = $324;
      $__dst16_1 = $scevgep367368;
      label = 81;
      break;
    } else {
      $__x18_0 = $324;
      $__src17_0 = $323;
      $__dst16_0 = $322;
      $__n15_0 = $325;
      label = 80;
      break;
    }
   case 81:
    HEAP32[$__dst16_1 >> 2] = $__x18_1;
    $xn_2 = $9;
    label = 82;
    break;
   case 82:
    $328 = $c_0 - 1 | 0;
    $329 = ($328 | 0) == 0;
    if ($329) {
      $xn_3 = $xn_2;
      label = 83;
      break;
    } else {
      $xn_0 = $xn_2;
      $c_0 = $328;
      $e_0_in = $e_0;
      label = 59;
      break;
    }
   case 83:
    if ($45) {
      label = 84;
      break;
    } else {
      $xn_5 = $xn_3;
      label = 98;
      break;
    }
   case 84:
    $331 = ___gmpn_lshift($186, $195, $xn_3, $44) | 0;
    $332 = $186 + ($xn_3 << 2) | 0;
    HEAP32[$332 >> 2] = $331;
    $333 = ($331 | 0) != 0;
    $334 = $333 & 1;
    $335 = $334 + $xn_3 | 0;
    $336 = ($335 | 0) < ($9 | 0);
    if ($336) {
      label = 85;
      break;
    } else {
      label = 91;
      break;
    }
   case 85:
    $338 = ($335 | 0) == 0;
    if ($338) {
      $xn_4 = 0;
      label = 97;
      break;
    } else {
      label = 86;
      break;
    }
   case 86:
    $340 = $335 - 1 | 0;
    $341 = HEAP32[$186 >> 2] | 0;
    $342 = ($340 | 0) == 0;
    if ($342) {
      $__x22_1 = $341;
      $__dst20_1 = $195;
      label = 90;
      break;
    } else {
      label = 87;
      break;
    }
   case 87:
    $343 = $185 + 4 | 0;
    $344 = $343;
    $345 = $333 & 1;
    $346 = $xn_3 + $345 | 0;
    $347 = $346 << 2;
    $348 = $347 - 4 | 0;
    $scevgep354 = $194 + $348 | 0;
    $__x22_0 = $341;
    $__src21_0 = $344;
    $__dst20_0 = $195;
    $__n19_0 = $340;
    label = 88;
    break;
   case 88:
    $350 = $__dst20_0 + 4 | 0;
    HEAP32[$__dst20_0 >> 2] = $__x22_0;
    $351 = $__src21_0 + 4 | 0;
    $352 = HEAP32[$__src21_0 >> 2] | 0;
    $353 = $__n19_0 - 1 | 0;
    $354 = ($353 | 0) == 0;
    if ($354) {
      label = 89;
      break;
    } else {
      $__x22_0 = $352;
      $__src21_0 = $351;
      $__dst20_0 = $350;
      $__n19_0 = $353;
      label = 88;
      break;
    }
   case 89:
    $scevgep354355 = $scevgep354;
    $__x22_1 = $352;
    $__dst20_1 = $scevgep354355;
    label = 90;
    break;
   case 90:
    HEAP32[$__dst20_1 >> 2] = $__x22_1;
    $xn_4 = $335;
    label = 97;
    break;
   case 91:
    _mod($186, $335, $mp_0, $9, $dinv, $204);
    $357 = ($6 | 0) == 0;
    if ($357) {
      $xn_4 = $9;
      label = 97;
      break;
    } else {
      label = 92;
      break;
    }
   case 92:
    $359 = HEAP32[$186 >> 2] | 0;
    $360 = ($27 | 0) == 0;
    if ($360) {
      $__x26_1 = $359;
      $__dst24_1 = $195;
      label = 96;
      break;
    } else {
      label = 93;
      break;
    }
   case 93:
    $361 = $185 + 4 | 0;
    $362 = $361;
    $363 = $9 << 2;
    $364 = $363 - 4 | 0;
    $scevgep357 = $194 + $364 | 0;
    $__x26_0 = $359;
    $__src25_0 = $362;
    $__dst24_0 = $195;
    $__n23_0 = $27;
    label = 94;
    break;
   case 94:
    $366 = $__dst24_0 + 4 | 0;
    HEAP32[$__dst24_0 >> 2] = $__x26_0;
    $367 = $__src25_0 + 4 | 0;
    $368 = HEAP32[$__src25_0 >> 2] | 0;
    $369 = $__n23_0 - 1 | 0;
    $370 = ($369 | 0) == 0;
    if ($370) {
      label = 95;
      break;
    } else {
      $__x26_0 = $368;
      $__src25_0 = $367;
      $__dst24_0 = $366;
      $__n23_0 = $369;
      label = 94;
      break;
    }
   case 95:
    $scevgep357358 = $scevgep357;
    $__x26_1 = $368;
    $__dst24_1 = $scevgep357358;
    label = 96;
    break;
   case 96:
    HEAP32[$__dst24_1 >> 2] = $__x26_1;
    $xn_4 = $9;
    label = 97;
    break;
   case 97:
    $373 = ___gmpn_rshift($195, $195, $xn_4, $44) | 0;
    $xn_5 = $xn_4;
    label = 98;
    break;
   case 98:
    $374 = ($xn_5 | 0) > 0;
    if ($374) {
      label = 99;
      break;
    } else {
      label = 100;
      break;
    }
   case 99:
    $376 = $xn_5 - 1 | 0;
    $377 = $195 + ($376 << 2) | 0;
    $378 = HEAP32[$377 >> 2] | 0;
    $379 = ($378 | 0) == 0;
    if ($379) {
      $xn_5 = $376;
      label = 98;
      break;
    } else {
      label = 100;
      break;
    }
   case 100:
    $381 = $el & 1;
    $382 = ($381 | 0) == 0;
    if ($382) {
      $xn_7 = $xn_5;
      label = 105;
      break;
    } else {
      label = 101;
      break;
    }
   case 101:
    $384 = HEAP32[$146 >> 2] | 0;
    $385 = ($384 | 0) > -1;
    $386 = ($xn_5 | 0) == 0;
    $or_cond314 = $385 | $386;
    if ($or_cond314) {
      $xn_7 = $xn_5;
      label = 105;
      break;
    } else {
      label = 102;
      break;
    }
   case 102:
    $388 = HEAP32[$3 >> 2] | 0;
    $389 = ___gmpn_sub($195, $388, $9, $195, $xn_5) | 0;
    $xn_6 = $9;
    label = 103;
    break;
   case 103:
    $391 = ($xn_6 | 0) > 0;
    if ($391) {
      label = 104;
      break;
    } else {
      $xn_7 = $xn_6;
      label = 105;
      break;
    }
   case 104:
    $393 = $xn_6 - 1 | 0;
    $394 = $195 + ($393 << 2) | 0;
    $395 = HEAP32[$394 >> 2] | 0;
    $396 = ($395 | 0) == 0;
    if ($396) {
      $xn_6 = $393;
      label = 103;
      break;
    } else {
      $xn_7 = $xn_6;
      label = 105;
      break;
    }
   case 105:
    $397 = $r | 0;
    $398 = HEAP32[$397 >> 2] | 0;
    $399 = ($xn_7 | 0) > ($398 | 0);
    if ($399) {
      label = 106;
      break;
    } else {
      label = 107;
      break;
    }
   case 106:
    $401 = ___gmpz_realloc($r, $xn_7) | 0;
    label = 107;
    break;
   case 107:
    $403 = $r + 4 | 0;
    HEAP32[$403 >> 2] = $xn_7;
    $404 = ($xn_7 | 0) == 0;
    if ($404) {
      label = 113;
      break;
    } else {
      label = 108;
      break;
    }
   case 108:
    $406 = $xn_7 - 1 | 0;
    $407 = $r + 8 | 0;
    $408 = HEAP32[$407 >> 2] | 0;
    $409 = HEAP32[$195 >> 2] | 0;
    $410 = ($406 | 0) == 0;
    if ($410) {
      $__x30_1 = $409;
      $__dst28_1 = $408;
      label = 112;
      break;
    } else {
      label = 109;
      break;
    }
   case 109:
    $411 = $194 + 4 | 0;
    $412 = $411;
    $413 = $xn_7 - 1 | 0;
    $__x30_0 = $409;
    $__src29_0 = $412;
    $__dst28_0 = $408;
    $__n27_0 = $406;
    label = 110;
    break;
   case 110:
    $415 = $__dst28_0 + 4 | 0;
    HEAP32[$__dst28_0 >> 2] = $__x30_0;
    $416 = $__src29_0 + 4 | 0;
    $417 = HEAP32[$__src29_0 >> 2] | 0;
    $418 = $__n27_0 - 1 | 0;
    $419 = ($418 | 0) == 0;
    if ($419) {
      label = 111;
      break;
    } else {
      $__x30_0 = $417;
      $__src29_0 = $416;
      $__dst28_0 = $415;
      $__n27_0 = $418;
      label = 110;
      break;
    }
   case 111:
    $scevgep = $408 + ($413 << 2) | 0;
    $__x30_1 = $417;
    $__dst28_1 = $scevgep;
    label = 112;
    break;
   case 112:
    HEAP32[$__dst28_1 >> 2] = $__x30_1;
    label = 113;
    break;
   case 113:
    $422 = HEAP32[$__tmp_marker >> 2] | 0;
    $423 = ($422 | 0) == 0;
    if ($423) {
      label = 116;
      break;
    } else {
      label = 114;
      break;
    }
   case 114:
    ___gmp_tmp_reentrant_free($422);
    label = 116;
    break;
   case 115:
    $426 = $ep | 0;
    HEAP32[$426 >> 2] = $el;
    $427 = $e31 | 0;
    $428 = $e31 + 8 | 0;
    HEAP32[$428 >> 2] = $426;
    $429 = HEAP32[$426 >> 2] | 0;
    $430 = ($429 | 0) != 0;
    $431 = $430 & 1;
    $432 = $e31 + 4 | 0;
    HEAP32[$432 >> 2] = $431;
    ___gmpz_powm($r, $b, $427, $m);
    label = 116;
    break;
   case 116:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mpn_zero_p87($ap, $n) {
  $ap = $ap | 0;
  $n = $n | 0;
  var $i_0_in = 0, $i_0 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $i_0_in = $n;
    label = 2;
    break;
   case 2:
    $i_0 = $i_0_in - 1 | 0;
    $2 = ($i_0_in | 0) > 0;
    if ($2) {
      label = 3;
      break;
    } else {
      $_0 = 1;
      label = 4;
      break;
    }
   case 3:
    $4 = $ap + ($i_0 << 2) | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($5 | 0) == 0;
    if ($6) {
      $i_0_in = $i_0;
      label = 2;
      break;
    } else {
      $_0 = 0;
      label = 4;
      break;
    }
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpz_set_si($dest, $val) {
  $dest = $dest | 0;
  $val = $val | 0;
  var $1 = 0, $6 = 0;
  $1 = ($val | 0) > -1;
  HEAP32[HEAP32[$dest + 8 >> 2] >> 2] = $1 ? $val : -$val | 0;
  $6 = ($val | 0) != 0 & 1;
  HEAP32[$dest + 4 >> 2] = $1 ? $6 : -$6 | 0;
  return;
}
function ___gmpz_set_ui($dest, $val) {
  $dest = $dest | 0;
  $val = $val | 0;
  HEAP32[HEAP32[$dest + 8 >> 2] >> 2] = $val;
  HEAP32[$dest + 4 >> 2] = ($val | 0) != 0 & 1;
  return;
}
function ___gmpz_size($__gmp_z) {
  $__gmp_z = $__gmp_z | 0;
  var $2 = 0;
  $2 = HEAP32[$__gmp_z + 4 >> 2] | 0;
  return (($2 | 0) > -1 ? $2 : -$2 | 0) | 0;
}
function _mod($np, $nn, $dp, $dn, $dinv, $tp) {
  $np = $np | 0;
  $nn = $nn | 0;
  $dp = $dp | 0;
  $dn = $dn | 0;
  $dinv = $dinv | 0;
  $tp = $tp | 0;
  var $__tmp_marker = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $or_cond = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    if (($dn | 0) == 1) {
      label = 2;
      break;
    } else if (($dn | 0) == 2) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $2 = HEAP32[$dp >> 2] | 0;
    $3 = ___gmpn_divrem_1($tp, 0, $np, $nn, $2) | 0;
    HEAP32[$np >> 2] = $3;
    label = 14;
    break;
   case 3:
    $5 = $dp + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = HEAP32[$dp >> 2] | 0;
    $8 = $dinv | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ___gmpn_div_qr_2n_pi1($tp, $np, $np, $nn, $6, $7, $9) | 0;
    label = 14;
    break;
   case 4:
    $12 = ($dn | 0) > 49;
    if ($12) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $14 = $nn - $dn | 0;
    $15 = ($14 | 0) > 49;
    if ($15) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $17 = $dinv | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = ___gmpn_sbpi1_div_qr($tp, $np, $nn, $dp, $dn, $18) | 0;
    label = 14;
    break;
   case 7:
    $21 = ($dn | 0) > 199;
    $22 = ($nn | 0) > 3999;
    $or_cond = $21 & $22;
    if ($or_cond) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $24 = +($dn | 0);
    $25 = $24 * 3600.0;
    $26 = +($nn | 0);
    $27 = $26 * 200.0;
    $28 = $27 + $25;
    $29 = $26 * $24;
    $30 = $28 > $29;
    if ($30) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $32 = ___gmpn_dcpi1_div_qr($tp, $np, $nn, $dp, $dn, $dinv) | 0;
    label = 14;
    break;
   case 10:
    $34 = ___gmpn_mu_div_qr_itch($nn, $dn, 0) | 0;
    $35 = $34 << 2;
    $36 = $35 >>> 0 < 65536;
    if ($36) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $38 = STACKTOP;
    STACKTOP = STACKTOP + $35 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $42 = $38;
    label = 13;
    break;
   case 12:
    $40 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $35) | 0;
    $42 = $40;
    label = 13;
    break;
   case 13:
    $43 = $42;
    $44 = ___gmpn_mu_div_qr($tp, $np, $np, $nn, $dp, $dn, $43) | 0;
    label = 14;
    break;
   case 14:
    $46 = HEAP32[$__tmp_marker >> 2] | 0;
    $47 = ($46 | 0) == 0;
    if ($47) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    ___gmp_tmp_reentrant_free($46);
    label = 16;
    break;
   case 16:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpz_scan1($u, $starting_bit) {
  $u = $u | 0;
  $starting_bit = $starting_bit | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_sum = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $p_0 = 0, $26 = 0, $p_1 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $limb_0 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $p_244 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $limb_1_lcssa = 0, $p_2_lcssa = 0, $50 = 0, $p_3 = 0, $limb_2 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $__ctz_x_0 = 0, $__ctz_c_0 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $__ctz_x_1 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $cnt_0 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $u + 8 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $u + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) > -1;
    $6 = -$4 | 0;
    $7 = $5 ? $4 : $6;
    $_sum = $7 - 1 | 0;
    $8 = $2 + ($_sum << 2) | 0;
    $9 = $starting_bit >>> 5;
    $10 = $2 + ($9 << 2) | 0;
    $11 = ($9 | 0) < ($7 | 0);
    if ($11) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $13 = $5 ? -1 : $starting_bit;
    $_0 = $13;
    label = 23;
    break;
   case 3:
    $15 = ($starting_bit | 0) == 0;
    if ($15) {
      $p_1 = $10;
      label = 8;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $17 = HEAP32[$10 >> 2] | 0;
    if ($5) {
      label = 5;
      break;
    } else {
      label = 9;
      break;
    }
   case 5:
    $19 = $starting_bit & 31;
    $20 = -1 << $19;
    $21 = $17 & $20;
    $22 = ($21 | 0) == 0;
    if ($22) {
      label = 6;
      break;
    } else {
      $limb_2 = $21;
      $p_3 = $10;
      label = 17;
      break;
    }
   case 6:
    $24 = ($9 | 0) == ($_sum | 0);
    if ($24) {
      $_0 = -1;
      label = 23;
      break;
    } else {
      $p_0 = $10;
      label = 7;
      break;
    }
   case 7:
    $26 = $p_0 + 4 | 0;
    $p_1 = $26;
    label = 8;
    break;
   case 8:
    $28 = HEAP32[$p_1 >> 2] | 0;
    $29 = ($28 | 0) == 0;
    if ($29) {
      $p_0 = $p_1;
      label = 7;
      break;
    } else {
      $limb_2 = $28;
      $p_3 = $p_1;
      label = 17;
      break;
    }
   case 9:
    $31 = _mpn_zero_p87($2, $9) | 0;
    $32 = ($31 | 0) == 0;
    if ($32) {
      $limb_0 = $17;
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $34 = ($17 | 0) == 0;
    if ($34) {
      $p_0 = $10;
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $36 = $17 - 1 | 0;
    $limb_0 = $36;
    label = 12;
    break;
   case 12:
    $38 = $starting_bit & 31;
    $39 = 1 << $38;
    $40 = $39 - 1 | 0;
    $41 = $limb_0 | $40;
    $42 = ($41 | 0) == -1;
    if ($42) {
      $p_244 = $10;
      label = 13;
      break;
    } else {
      $p_2_lcssa = $10;
      $limb_1_lcssa = $41;
      label = 16;
      break;
    }
   case 13:
    $43 = ($p_244 | 0) == ($8 | 0);
    if ($43) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $45 = $7 << 5;
    $_0 = $45;
    label = 23;
    break;
   case 15:
    $47 = $p_244 + 4 | 0;
    $48 = HEAP32[$47 >> 2] | 0;
    $49 = ($48 | 0) == -1;
    if ($49) {
      $p_244 = $47;
      label = 13;
      break;
    } else {
      $p_2_lcssa = $47;
      $limb_1_lcssa = $48;
      label = 16;
      break;
    }
   case 16:
    $50 = $limb_1_lcssa ^ -1;
    $limb_2 = $50;
    $p_3 = $p_2_lcssa;
    label = 17;
    break;
   case 17:
    $52 = $limb_2 & 255;
    $53 = ($52 | 0) == 0;
    if ($53) {
      $__ctz_c_0 = 6;
      $__ctz_x_0 = $limb_2;
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $55 = -$limb_2 | 0;
    $56 = $limb_2 & $55;
    $57 = $56 + 9696 | 0;
    $58 = HEAP8[$57] | 0;
    $59 = $58 & 255;
    $60 = $59 - 2 | 0;
    $cnt_0 = $60;
    label = 22;
    break;
   case 19:
    $61 = ($__ctz_c_0 | 0) < 30;
    if ($61) {
      label = 20;
      break;
    } else {
      $__ctz_x_1 = $__ctz_x_0;
      label = 21;
      break;
    }
   case 20:
    $63 = $__ctz_x_0 >>> 8;
    $64 = $63 & 255;
    $65 = ($64 | 0) == 0;
    $66 = $__ctz_c_0 + 8 | 0;
    if ($65) {
      $__ctz_c_0 = $66;
      $__ctz_x_0 = $63;
      label = 19;
      break;
    } else {
      $__ctz_x_1 = $63;
      label = 21;
      break;
    }
   case 21:
    $68 = -$__ctz_x_1 | 0;
    $69 = $__ctz_x_1 & $68;
    $70 = $69 + 9696 | 0;
    $71 = HEAP8[$70] | 0;
    $72 = $71 & 255;
    $73 = $72 + $__ctz_c_0 | 0;
    $cnt_0 = $73;
    label = 22;
    break;
   case 22:
    $75 = $p_3;
    $76 = $2;
    $77 = $75 - $76 | 0;
    $78 = $77 << 3;
    $79 = $cnt_0 + $78 | 0;
    $_0 = $79;
    label = 23;
    break;
   case 23:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpz_set($w, $u) {
  $w = $w | 0;
  $u = $u | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $__n_0 = 0, $__dst_0 = 0, $_pn = 0, $__x_0 = 0, $__src_0 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $32 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $u + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > -1;
    $4 = -$2 | 0;
    $5 = $3 ? $2 : $4;
    $6 = $w | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($5 | 0) > ($7 | 0);
    if ($8) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $10 = ___gmpz_realloc($w, $5) | 0;
    $11 = $10;
    $16 = $11;
    label = 4;
    break;
   case 3:
    $13 = $w + 8 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $16 = $14;
    label = 4;
    break;
   case 4:
    $17 = $u + 8 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = ($2 | 0) == 0;
    if ($19) {
      label = 10;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $21 = $5 - 1 | 0;
    $22 = HEAP32[$18 >> 2] | 0;
    $23 = ($21 | 0) == 0;
    if ($23) {
      $__x_1 = $22;
      $__dst_1 = $16;
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $24 = $5 - 1 | 0;
    $__x_0 = $22;
    $_pn = $18;
    $__dst_0 = $16;
    $__n_0 = $21;
    label = 7;
    break;
   case 7:
    $__src_0 = $_pn + 4 | 0;
    $26 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $27 = HEAP32[$__src_0 >> 2] | 0;
    $28 = $__n_0 - 1 | 0;
    $29 = ($28 | 0) == 0;
    if ($29) {
      label = 8;
      break;
    } else {
      $__x_0 = $27;
      $_pn = $__src_0;
      $__dst_0 = $26;
      $__n_0 = $28;
      label = 7;
      break;
    }
   case 8:
    $scevgep = $16 + ($24 << 2) | 0;
    $__x_1 = $27;
    $__dst_1 = $scevgep;
    label = 9;
    break;
   case 9:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 10;
    break;
   case 10:
    $32 = $w + 4 | 0;
    HEAP32[$32 >> 2] = $2;
    return;
  }
}
function ___gmpz_set_str($x, $str, $base) {
  $x = $x | 0;
  $str = $str | 0;
  $base = $base | 0;
  var $__tmp_marker = 0, $1 = 0, $3 = 0, $digit_value_0_ph = 0, $_062 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $negative_0 = 0, $c_0 = 0, $_1 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $c_1_ph = 0, $_063_ph = 0, $_2_ph = 0, $c_1 = 0, $_2 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $60 = 0, $_368 = 0, $s_067 = 0, $i_066 = 0, $c_265 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $74 = 0, $s_1 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $s_0_lcssa = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $uadd$0 = 0, $uadd$1 = 0, $97 = 0, $98 = 0, $99 = 0, $__x3_0 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    $1 = ($base | 0) > 36;
    if ($1) {
      label = 2;
      break;
    } else {
      $digit_value_0_ph = 15240;
      label = 3;
      break;
    }
   case 2:
    $3 = ($base | 0) > 62;
    if ($3) {
      $_0 = -1;
      label = 34;
      break;
    } else {
      $digit_value_0_ph = 15464;
      label = 3;
      break;
    }
   case 3:
    $_062 = $str;
    label = 4;
    break;
   case 4:
    $5 = $_062 + 1 | 0;
    $6 = HEAP8[$_062] | 0;
    $7 = $6 & 255;
    $8 = _isspace($7 | 0) | 0;
    $9 = ($8 | 0) == 0;
    if ($9) {
      label = 5;
      break;
    } else {
      $_062 = $5;
      label = 4;
      break;
    }
   case 5:
    $11 = $6 << 24 >> 24 == 45;
    if ($11) {
      label = 6;
      break;
    } else {
      $_1 = $5;
      $c_0 = $7;
      $negative_0 = 0;
      label = 7;
      break;
    }
   case 6:
    $13 = $_062 + 2 | 0;
    $14 = HEAP8[$5] | 0;
    $15 = $14 & 255;
    $_1 = $13;
    $c_0 = $15;
    $negative_0 = 1;
    label = 7;
    break;
   case 7:
    $17 = $digit_value_0_ph + $c_0 | 0;
    $18 = HEAP8[$17] | 0;
    $19 = $18 & 255;
    $20 = ($base | 0) == 0;
    $21 = $20 ? 10 : $base;
    $22 = ($19 | 0) < ($21 | 0);
    if ($22) {
      label = 8;
      break;
    } else {
      $_0 = -1;
      label = 34;
      break;
    }
   case 8:
    if ($20) {
      label = 9;
      break;
    } else {
      $_2_ph = $_1;
      $_063_ph = $base;
      $c_1_ph = $c_0;
      label = 14;
      break;
    }
   case 9:
    $25 = ($c_0 | 0) == 48;
    if ($25) {
      label = 10;
      break;
    } else {
      $_2_ph = $_1;
      $_063_ph = 10;
      $c_1_ph = $c_0;
      label = 14;
      break;
    }
   case 10:
    $27 = $_1 + 1 | 0;
    $28 = HEAP8[$_1] | 0;
    if (($28 << 24 >> 24 | 0) == 120 | ($28 << 24 >> 24 | 0) == 88) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $30 = $_1 + 2 | 0;
    $31 = HEAP8[$27] | 0;
    $32 = $31 & 255;
    $_2_ph = $30;
    $_063_ph = 16;
    $c_1_ph = $32;
    label = 14;
    break;
   case 12:
    $34 = $28 & 255;
    if (($28 << 24 >> 24 | 0) == 98 | ($28 << 24 >> 24 | 0) == 66) {
      label = 13;
      break;
    } else {
      $_2_ph = $27;
      $_063_ph = 8;
      $c_1_ph = $34;
      label = 14;
      break;
    }
   case 13:
    $36 = $_1 + 2 | 0;
    $37 = HEAP8[$27] | 0;
    $38 = $37 & 255;
    $_2_ph = $36;
    $_063_ph = 2;
    $c_1_ph = $38;
    label = 14;
    break;
   case 14:
    $_2 = $_2_ph;
    $c_1 = $c_1_ph;
    label = 15;
    break;
   case 15:
    $40 = ($c_1 | 0) == 48;
    if ($40) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $42 = _isspace($c_1 | 0) | 0;
    $43 = ($42 | 0) == 0;
    if ($43) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $44 = $_2 + 1 | 0;
    $45 = HEAP8[$_2] | 0;
    $46 = $45 & 255;
    $_2 = $44;
    $c_1 = $46;
    label = 15;
    break;
   case 18:
    $48 = ($c_1 | 0) == 0;
    if ($48) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    $50 = $x + 4 | 0;
    HEAP32[$50 >> 2] = 0;
    $_0 = 0;
    label = 34;
    break;
   case 20:
    HEAP32[$__tmp_marker >> 2] = 0;
    $52 = $_2 - 1 | 0;
    $53 = _strlen($52 | 0) | 0;
    $54 = $53 + 1 | 0;
    $55 = $54 >>> 0 < 65536;
    if ($55) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $56 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $54) | 0;
    $60 = $56;
    label = 23;
    break;
   case 22:
    $58 = STACKTOP;
    STACKTOP = STACKTOP + $54 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $59 = ($53 | 0) == 0;
    if ($59) {
      $s_0_lcssa = $58;
      $81 = $58;
      label = 30;
      break;
    } else {
      $60 = $58;
      label = 23;
      break;
    }
   case 23:
    $c_265 = $c_1;
    $i_066 = 0;
    $s_067 = $60;
    $_368 = $_2;
    label = 24;
    break;
   case 24:
    $62 = _isspace($c_265 | 0) | 0;
    $63 = ($62 | 0) == 0;
    if ($63) {
      label = 25;
      break;
    } else {
      $s_1 = $s_067;
      label = 29;
      break;
    }
   case 25:
    $65 = $digit_value_0_ph + $c_265 | 0;
    $66 = HEAP8[$65] | 0;
    $67 = $66 & 255;
    $68 = ($67 | 0) < ($_063_ph | 0);
    if ($68) {
      label = 28;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    $70 = HEAP32[$__tmp_marker >> 2] | 0;
    $71 = ($70 | 0) == 0;
    if ($71) {
      $_0 = -1;
      label = 34;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    ___gmp_tmp_reentrant_free($70);
    $_0 = -1;
    label = 34;
    break;
   case 28:
    $74 = $s_067 + 1 | 0;
    HEAP8[$s_067] = $66;
    $s_1 = $74;
    label = 29;
    break;
   case 29:
    $76 = $_368 + 1 | 0;
    $77 = HEAP8[$_368] | 0;
    $78 = $77 & 255;
    $79 = $i_066 + 1 | 0;
    $80 = $79 >>> 0 < $53 >>> 0;
    if ($80) {
      $c_265 = $78;
      $i_066 = $79;
      $s_067 = $s_1;
      $_368 = $76;
      label = 24;
      break;
    } else {
      $s_0_lcssa = $s_1;
      $81 = $60;
      label = 30;
      break;
    }
   case 30:
    $82 = $s_0_lcssa;
    $83 = $81;
    $84 = $82 - $83 | 0;
    $85 = 9840 + ($_063_ph * 20 & -1) | 0;
    $86 = HEAP32[$85 >> 2] | 0;
    $87 = $86 & 65535;
    $88 = $86 >>> 16;
    $89 = $84 & 65535;
    $90 = $84 >>> 16;
    $91 = Math_imul($87, $89);
    $92 = Math_imul($87, $90);
    $93 = Math_imul($88, $89);
    $94 = Math_imul($88, $90);
    $95 = $91 >>> 16;
    $96 = $95 + $92 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($96 | 0, $93 | 0) | 0;
    $uadd$1 = tempRet0;
    $97 = $uadd$0;
    $98 = $uadd$1;
    $99 = $94 + 65536 | 0;
    $__x3_0 = $98 ? $99 : $94;
    $100 = $97 >>> 16;
    $101 = $__x3_0 + $100 | 0;
    $102 = $101 >>> 2;
    $103 = $102 & 134217727;
    $104 = $103 + 2 | 0;
    $105 = $x | 0;
    $106 = HEAP32[$105 >> 2] | 0;
    $107 = ($104 | 0) > ($106 | 0);
    if ($107) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    $109 = ___gmpz_realloc($x, $104) | 0;
    label = 32;
    break;
   case 32:
    $111 = $x + 8 | 0;
    $112 = HEAP32[$111 >> 2] | 0;
    $113 = ___gmpn_set_str($112, $81, $84, $_063_ph) | 0;
    $114 = ($negative_0 | 0) != 0;
    $115 = -$113 | 0;
    $116 = $114 ? $115 : $113;
    $117 = $x + 4 | 0;
    HEAP32[$117 >> 2] = $116;
    $118 = HEAP32[$__tmp_marker >> 2] | 0;
    $119 = ($118 | 0) == 0;
    if ($119) {
      $_0 = 0;
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    ___gmp_tmp_reentrant_free($118);
    $_0 = 0;
    label = 34;
    break;
   case 34:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function ___gmpz_setbit($d, $bit_idx) {
  $d = $d | 0;
  $bit_idx = $bit_idx | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $scevgep = 0, $scevgep63 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $zero_bound_0 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $dsize_0 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $__p_0 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $d + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $d + 8 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $bit_idx >>> 5;
    $6 = $bit_idx & 31;
    $7 = 1 << $6;
    $8 = ($2 | 0) > -1;
    if ($8) {
      label = 2;
      break;
    } else {
      $zero_bound_0 = 0;
      label = 9;
      break;
    }
   case 2:
    $10 = ($5 | 0) < ($2 | 0);
    if ($10) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $12 = $4 + ($5 << 2) | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13 | $7;
    HEAP32[$12 >> 2] = $14;
    label = 22;
    break;
   case 4:
    $16 = $5 + 1 | 0;
    $17 = $d | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = ($16 | 0) > ($18 | 0);
    if ($19) {
      label = 5;
      break;
    } else {
      $24 = $4;
      label = 6;
      break;
    }
   case 5:
    $21 = ___gmpz_realloc($d, $16) | 0;
    $22 = $21;
    $24 = $22;
    label = 6;
    break;
   case 6:
    HEAP32[$1 >> 2] = $16;
    $25 = ($5 | 0) == ($2 | 0);
    if ($25) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $scevgep = $24 + ($2 << 2) | 0;
    $scevgep63 = $scevgep;
    $26 = $bit_idx >>> 5;
    $27 = $26 - $2 | 0;
    $28 = $27 << 2;
    _memset($scevgep63 | 0, 0, $28 | 0);
    label = 8;
    break;
   case 8:
    $30 = $24 + ($5 << 2) | 0;
    HEAP32[$30 >> 2] = $7;
    label = 22;
    break;
   case 9:
    $32 = $4 + ($zero_bound_0 << 2) | 0;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = ($33 | 0) == 0;
    $35 = $zero_bound_0 + 1 | 0;
    if ($34) {
      $zero_bound_0 = $35;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $37 = -$2 | 0;
    $38 = ($5 | 0) > ($zero_bound_0 | 0);
    if ($38) {
      label = 11;
      break;
    } else {
      label = 17;
      break;
    }
   case 11:
    $40 = ($5 | 0) < ($37 | 0);
    if ($40) {
      label = 12;
      break;
    } else {
      label = 22;
      break;
    }
   case 12:
    $42 = $4 + ($5 << 2) | 0;
    $43 = HEAP32[$42 >> 2] | 0;
    $44 = $7 ^ -1;
    $45 = $43 & $44;
    HEAP32[$42 >> 2] = $45;
    $46 = ($45 | 0) == 0;
    if ($46) {
      label = 13;
      break;
    } else {
      label = 22;
      break;
    }
   case 13:
    $48 = $2 ^ -1;
    $49 = ($5 | 0) == ($48 | 0);
    if ($49) {
      $dsize_0 = $37;
      label = 14;
      break;
    } else {
      label = 22;
      break;
    }
   case 14:
    $50 = $dsize_0 - 1 | 0;
    $51 = ($50 | 0) > 0;
    if ($51) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $53 = $dsize_0 - 2 | 0;
    $54 = $4 + ($53 << 2) | 0;
    $55 = HEAP32[$54 >> 2] | 0;
    $56 = ($55 | 0) == 0;
    if ($56) {
      $dsize_0 = $50;
      label = 14;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $57 = 1 - $dsize_0 | 0;
    HEAP32[$1 >> 2] = $57;
    label = 22;
    break;
   case 17:
    $59 = ($5 | 0) == ($zero_bound_0 | 0);
    $60 = $4 + ($5 << 2) | 0;
    $61 = HEAP32[$60 >> 2] | 0;
    if ($59) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    $63 = $61 - 1 | 0;
    $64 = $7 ^ -1;
    $65 = $63 & $64;
    $66 = $65 + 1 | 0;
    HEAP32[$60 >> 2] = $66;
    label = 22;
    break;
   case 19:
    $68 = $61 - $7 | 0;
    HEAP32[$60 >> 2] = $68;
    $69 = $61 >>> 0 < $7 >>> 0;
    if ($69) {
      $__p_0 = $60;
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    $70 = $__p_0 + 4 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    $72 = $71 - 1 | 0;
    HEAP32[$70 >> 2] = $72;
    $73 = ($71 | 0) == 0;
    if ($73) {
      $__p_0 = $70;
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $74 = $2 ^ -1;
    $75 = $4 + ($74 << 2) | 0;
    $76 = HEAP32[$75 >> 2] | 0;
    $77 = ($76 | 0) == 0;
    $78 = $77 & 1;
    $79 = $78 + $2 | 0;
    HEAP32[$1 >> 2] = $79;
    label = 22;
    break;
   case 22:
    return;
  }
}
function ___gmpz_sizeinbase($x, $base) {
  $x = $x | 0;
  $base = $base | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $uadd$0 = 0, $uadd$1 = 0, $57 = 0, $58 = 0, $59 = 0, $__x3_0 = 0, $60 = 0, $61 = 0, $62 = 0, $result_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $x + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > -1;
    $4 = -$2 | 0;
    $5 = $3 ? $2 : $4;
    $6 = ($5 | 0) == 0;
    if ($6) {
      $result_0 = 1;
      label = 8;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $8 = $5 - 1 | 0;
    $9 = $x + 8 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $10 + ($8 << 2) | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 >>> 0 < 65536;
    if ($13) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $15 = $12 >>> 0 < 256;
    $16 = $15 ? 1 : 9;
    $21 = $16;
    label = 5;
    break;
   case 4:
    $18 = $12 >>> 0 < 16777216;
    $19 = $18 ? 17 : 25;
    $21 = $19;
    label = 5;
    break;
   case 5:
    $22 = $12 >>> ($21 >>> 0);
    $23 = $22 + 9696 | 0;
    $24 = HEAP8[$23] | 0;
    $25 = $24 & 255;
    $26 = HEAP32[$1 >> 2] | 0;
    $27 = ($26 | 0) > -1;
    $28 = -$26 | 0;
    $29 = $27 ? $26 : $28;
    $30 = $29 << 5;
    $31 = $21 - 33 | 0;
    $32 = $31 + $25 | 0;
    $33 = $32 + $30 | 0;
    $34 = $base - 1 | 0;
    $35 = $34 & $base;
    $36 = ($35 | 0) == 0;
    if ($36) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $38 = 9844 + ($base * 20 & -1) | 0;
    $39 = HEAP32[$38 >> 2] | 0;
    $40 = $33 - 1 | 0;
    $41 = $40 + $39 | 0;
    $42 = ($41 >>> 0) / ($39 >>> 0) >>> 0;
    $result_0 = $42;
    label = 8;
    break;
   case 7:
    $44 = 9836 + ($base * 20 & -1) | 0;
    $45 = HEAP32[$44 >> 2] | 0;
    $46 = $45 + 1 | 0;
    $47 = $46 & 65535;
    $48 = $46 >>> 16;
    $49 = $33 & 65535;
    $50 = $33 >>> 16;
    $51 = Math_imul($47, $49);
    $52 = Math_imul($47, $50);
    $53 = Math_imul($48, $49);
    $54 = Math_imul($48, $50);
    $55 = $51 >>> 16;
    $56 = $55 + $52 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($56 | 0, $53 | 0) | 0;
    $uadd$1 = tempRet0;
    $57 = $uadd$0;
    $58 = $uadd$1;
    $59 = $54 + 65536 | 0;
    $__x3_0 = $58 ? $59 : $54;
    $60 = $57 >>> 16;
    $61 = $60 + 1 | 0;
    $62 = $61 + $__x3_0 | 0;
    $result_0 = $62;
    label = 8;
    break;
   case 8:
    return $result_0 | 0;
  }
  return 0;
}
function ___gmpz_sub($w, $u, $v) {
  $w = $w | 0;
  $u = $u | 0;
  $v = $v | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $_ = 0, $_67 = 0, $_68 = 0, $_69 = 0, $u_v = 0, $v_u = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $wsize_0 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $_wsize_0 = 0, $45 = 0, $46 = 0, $48 = 0, $wsize_1 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $_wsize_1 = 0, $60 = 0, $wsize_2 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $_wsize_2 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $wsize_3 = 0, $79 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $u + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $v + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = -$4 | 0;
    $6 = ($2 | 0) > -1;
    $7 = -$2 | 0;
    $8 = $6 ? $2 : $7;
    $9 = ($5 | 0) > -1;
    $10 = $9 ? $5 : $4;
    $11 = ($8 | 0) < ($10 | 0);
    $_ = $11 ? $10 : $8;
    $_67 = $11 ? $8 : $10;
    $_68 = $11 ? $2 : $5;
    $_69 = $11 ? $5 : $2;
    $u_v = $11 ? $u : $v;
    $v_u = $11 ? $v : $u;
    $12 = $_ + 1 | 0;
    $13 = $w | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = ($12 | 0) > ($14 | 0);
    if ($15) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $17 = ___gmpz_realloc($w, $12) | 0;
    $18 = $17;
    $23 = $18;
    label = 4;
    break;
   case 3:
    $20 = $w + 8 | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    $23 = $21;
    label = 4;
    break;
   case 4:
    $24 = $v_u + 8 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = $u_v + 8 | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = $_69 ^ $_68;
    $29 = ($28 | 0) < 0;
    if ($29) {
      label = 5;
      break;
    } else {
      label = 19;
      break;
    }
   case 5:
    $31 = ($_ | 0) == ($_67 | 0);
    if ($31) {
      label = 10;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $33 = ___gmpn_sub($23, $25, $_, $27, $_67) | 0;
    $wsize_0 = $_;
    label = 7;
    break;
   case 7:
    $35 = ($wsize_0 | 0) > 0;
    if ($35) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $37 = $wsize_0 - 1 | 0;
    $38 = $23 + ($37 << 2) | 0;
    $39 = HEAP32[$38 >> 2] | 0;
    $40 = ($39 | 0) == 0;
    if ($40) {
      $wsize_0 = $37;
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $42 = ($_69 | 0) < 0;
    $43 = -$wsize_0 | 0;
    $_wsize_0 = $42 ? $43 : $wsize_0;
    $wsize_3 = $_wsize_0;
    label = 21;
    break;
   case 10:
    $45 = ___gmpn_cmp($25, $27, $_) | 0;
    $46 = ($45 | 0) < 0;
    if ($46) {
      label = 11;
      break;
    } else {
      label = 15;
      break;
    }
   case 11:
    $48 = ___gmpn_sub_n($23, $27, $25, $_) | 0;
    $wsize_1 = $_;
    label = 12;
    break;
   case 12:
    $50 = ($wsize_1 | 0) > 0;
    if ($50) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $52 = $wsize_1 - 1 | 0;
    $53 = $23 + ($52 << 2) | 0;
    $54 = HEAP32[$53 >> 2] | 0;
    $55 = ($54 | 0) == 0;
    if ($55) {
      $wsize_1 = $52;
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $57 = ($_69 | 0) > -1;
    $58 = -$wsize_1 | 0;
    $_wsize_1 = $57 ? $58 : $wsize_1;
    $wsize_3 = $_wsize_1;
    label = 21;
    break;
   case 15:
    $60 = ___gmpn_sub_n($23, $25, $27, $_) | 0;
    $wsize_2 = $_;
    label = 16;
    break;
   case 16:
    $62 = ($wsize_2 | 0) > 0;
    if ($62) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $64 = $wsize_2 - 1 | 0;
    $65 = $23 + ($64 << 2) | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    $67 = ($66 | 0) == 0;
    if ($67) {
      $wsize_2 = $64;
      label = 16;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $69 = ($_69 | 0) < 0;
    $70 = -$wsize_2 | 0;
    $_wsize_2 = $69 ? $70 : $wsize_2;
    $wsize_3 = $_wsize_2;
    label = 21;
    break;
   case 19:
    $72 = ___gmpn_add($23, $25, $_, $27, $_67) | 0;
    $73 = $23 + ($_ << 2) | 0;
    HEAP32[$73 >> 2] = $72;
    $74 = $72 + $_ | 0;
    $75 = ($_69 | 0) < 0;
    if ($75) {
      label = 20;
      break;
    } else {
      $wsize_3 = $74;
      label = 21;
      break;
    }
   case 20:
    $77 = -$74 | 0;
    $wsize_3 = $77;
    label = 21;
    break;
   case 21:
    $79 = $w + 4 | 0;
    HEAP32[$79 >> 2] = $wsize_3;
    return;
  }
}
function ___gmpz_realloc($m, $new_alloc) {
  $m = $m | 0;
  $new_alloc = $new_alloc | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($new_alloc | 0) > 1;
    $2 = $1 ? $new_alloc : 1;
    $3 = $2 >>> 0 > 134217727;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $5 = HEAP32[_stderr >> 2] | 0;
    $6 = _fwrite(4552, 26, 1, $5 | 0) | 0;
    _abort();
    return 0;
    return 0;
   case 3:
    $8 = HEAP32[3748] | 0;
    $9 = $m + 8 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $10;
    $12 = $m | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13 << 2;
    $15 = $2 << 2;
    $16 = FUNCTION_TABLE_iiii[$8 & 1023]($11, $14, $15) | 0;
    $17 = $16;
    HEAP32[$9 >> 2] = $17;
    HEAP32[$12 >> 2] = $2;
    $18 = $m + 4 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = ($19 | 0) > -1;
    $21 = -$19 | 0;
    $22 = $20 ? $19 : $21;
    $23 = ($22 | 0) > ($2 | 0);
    if ($23) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    HEAP32[$18 >> 2] = 0;
    label = 5;
    break;
   case 5:
    return $16 | 0;
  }
  return 0;
}
function ___gmpz_tstbit($u, $bit_index) {
  $u = $u | 0;
  $bit_index = $bit_index | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $_lobit = 0, $13 = 0, $14 = 0, $16 = 0, $p_0 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $limb_0 = 0, $25 = 0, $26 = 0, $27 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $u + 8 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $u + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) > -1;
    $6 = -$4 | 0;
    $7 = $5 ? $4 : $6;
    $8 = $bit_index >>> 5;
    $9 = $2 + ($8 << 2) | 0;
    $10 = $8 >>> 0 < $7 >>> 0;
    if ($10) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $_lobit = $4 >>> 31;
    $_0 = $_lobit;
    label = 9;
    break;
   case 3:
    $13 = HEAP32[$9 >> 2] | 0;
    $14 = ($4 | 0) < 0;
    if ($14) {
      label = 4;
      break;
    } else {
      $limb_0 = $13;
      label = 8;
      break;
    }
   case 4:
    $16 = -$13 | 0;
    $p_0 = $9;
    label = 5;
    break;
   case 5:
    $18 = ($p_0 | 0) == ($2 | 0);
    if ($18) {
      $limb_0 = $16;
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $20 = $p_0 - 4 | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = ($21 | 0) == 0;
    if ($22) {
      $p_0 = $20;
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $24 = $13 ^ -1;
    $limb_0 = $24;
    label = 8;
    break;
   case 8:
    $25 = $bit_index & 31;
    $26 = $limb_0 >>> ($25 >>> 0);
    $27 = $26 & 1;
    $_0 = $27;
    label = 9;
    break;
   case 9:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpq_set_si($dest, $num, $den) {
  $dest = $dest | 0;
  $num = $num | 0;
  $den = $den | 0;
  var $1 = 0, $3 = 0, $5 = 0, $6 = 0, $num_ = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $_0 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($num | 0) == 0;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $3 = $dest + 4 | 0;
    HEAP32[$3 >> 2] = 0;
    $_0 = 1;
    label = 4;
    break;
   case 3:
    $5 = -$num | 0;
    $6 = ($num | 0) > -1;
    $num_ = $6 ? $num : $5;
    $7 = $dest + 8 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    HEAP32[$8 >> 2] = $num_;
    $9 = ($num | 0) > 0;
    $10 = $9 ? 1 : -1;
    $11 = $dest + 4 | 0;
    HEAP32[$11 >> 2] = $10;
    $_0 = $den;
    label = 4;
    break;
   case 4:
    $13 = $dest + 20 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    HEAP32[$14 >> 2] = $_0;
    $15 = ($_0 | 0) != 0;
    $16 = $15 & 1;
    $17 = $dest + 16 | 0;
    HEAP32[$17 >> 2] = $16;
    return;
  }
}
function ___gmpz_sub_ui($w, $u, $vval) {
  $w = $w | 0;
  $u = $u | 0;
  $vval = $vval | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $wsize_0 = 0, $49 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $u + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > -1;
    $4 = -$2 | 0;
    $5 = $3 ? $2 : $4;
    $6 = $5 + 1 | 0;
    $7 = $w | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($6 | 0) > ($8 | 0);
    if ($9) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $11 = ___gmpz_realloc($w, $6) | 0;
    $12 = $11;
    $17 = $12;
    label = 4;
    break;
   case 3:
    $14 = $w + 8 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $17 = $15;
    label = 4;
    break;
   case 4:
    $18 = $u + 8 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = ($5 | 0) == 0;
    if ($20) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[$17 >> 2] = $vval;
    $22 = ($vval | 0) != 0;
    $23 = $22 & 1;
    $24 = -$23 | 0;
    $25 = $w + 4 | 0;
    HEAP32[$25 >> 2] = $24;
    label = 13;
    break;
   case 6:
    $27 = ($2 | 0) < 0;
    if ($27) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $29 = ___gmpn_add_1($17, $19, $5, $vval) | 0;
    $30 = $17 + ($5 << 2) | 0;
    HEAP32[$30 >> 2] = $29;
    $31 = $5 + $29 | 0;
    $32 = -$31 | 0;
    $wsize_0 = $32;
    label = 12;
    break;
   case 8:
    $34 = ($5 | 0) == 1;
    if ($34) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    $36 = HEAP32[$19 >> 2] | 0;
    $37 = $36 >>> 0 < $vval >>> 0;
    if ($37) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $39 = $vval - $36 | 0;
    HEAP32[$17 >> 2] = $39;
    $wsize_0 = -1;
    label = 12;
    break;
   case 11:
    $41 = ___gmpn_sub_1($17, $19, $5, $vval) | 0;
    $42 = $5 - 1 | 0;
    $43 = $17 + ($42 << 2) | 0;
    $44 = HEAP32[$43 >> 2] | 0;
    $45 = ($44 | 0) == 0;
    $46 = $45 & 1;
    $47 = $5 - $46 | 0;
    $wsize_0 = $47;
    label = 12;
    break;
   case 12:
    $49 = $w + 4 | 0;
    HEAP32[$49 >> 2] = $wsize_0;
    label = 13;
    break;
   case 13:
    return;
  }
}
function ___gmpz_tdiv_q_2exp($r, $u, $cnt) {
  $r = $r | 0;
  $u = $u | 0;
  $cnt = $cnt | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $_sum = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $__n_0 = 0, $__dst_0 = 0, $__src_0 = 0, $__x_0 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $rn_0 = 0, $52 = 0, $53 = 0, $54 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $u + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $cnt >>> 5;
    $4 = ($2 | 0) > -1;
    $5 = -$2 | 0;
    $6 = $4 ? $2 : $5;
    $7 = $6 - $3 | 0;
    $8 = ($7 | 0) < 1;
    if ($8) {
      $rn_0 = 0;
      label = 13;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $10 = $r | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = ($7 | 0) > ($11 | 0);
    if ($12) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $14 = ___gmpz_realloc($r, $7) | 0;
    $15 = $14;
    $20 = $15;
    label = 5;
    break;
   case 4:
    $17 = $r + 8 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $20 = $18;
    label = 5;
    break;
   case 5:
    $21 = $u + 8 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = $22 + ($3 << 2) | 0;
    $24 = $cnt & 31;
    $25 = ($24 | 0) == 0;
    if ($25) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $27 = ___gmpn_rshift($20, $23, $7, $24) | 0;
    $28 = $7 - 1 | 0;
    $29 = $20 + ($28 << 2) | 0;
    $30 = HEAP32[$29 >> 2] | 0;
    $31 = ($30 | 0) == 0;
    $32 = $31 & 1;
    $33 = $7 - $32 | 0;
    $rn_0 = $33;
    label = 13;
    break;
   case 7:
    $35 = ($6 | 0) == ($3 | 0);
    if ($35) {
      $rn_0 = $7;
      label = 13;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $37 = $7 - 1 | 0;
    $38 = HEAP32[$23 >> 2] | 0;
    $39 = ($37 | 0) == 0;
    if ($39) {
      $__x_1 = $38;
      $__dst_1 = $20;
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $_sum = $3 + 1 | 0;
    $40 = $22 + ($_sum << 2) | 0;
    $41 = $6 - 1 | 0;
    $42 = $cnt >>> 5;
    $43 = $41 - $42 | 0;
    $__x_0 = $38;
    $__src_0 = $40;
    $__dst_0 = $20;
    $__n_0 = $37;
    label = 10;
    break;
   case 10:
    $45 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $46 = $__src_0 + 4 | 0;
    $47 = HEAP32[$__src_0 >> 2] | 0;
    $48 = $__n_0 - 1 | 0;
    $49 = ($48 | 0) == 0;
    if ($49) {
      label = 11;
      break;
    } else {
      $__x_0 = $47;
      $__src_0 = $46;
      $__dst_0 = $45;
      $__n_0 = $48;
      label = 10;
      break;
    }
   case 11:
    $scevgep = $20 + ($43 << 2) | 0;
    $__x_1 = $47;
    $__dst_1 = $scevgep;
    label = 12;
    break;
   case 12:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    $rn_0 = $7;
    label = 13;
    break;
   case 13:
    $52 = -$rn_0 | 0;
    $53 = $4 ? $rn_0 : $52;
    $54 = $r + 4 | 0;
    HEAP32[$54 >> 2] = $53;
    return;
  }
}
function ___gmpz_tdiv_r_2exp($res, $in, $cnt) {
  $res = $res | 0;
  $in = $in | 0;
  $cnt = $cnt | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $res_size_0 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $limb_cnt_0 = 0, $res_size_1 = 0, $48 = 0, $49 = 0, $or_cond = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $__n_0 = 0, $__dst_0 = 0, $_pn = 0, $__x_0 = 0, $__src_0 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $in + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > -1;
    $4 = -$2 | 0;
    $5 = $3 ? $2 : $4;
    $6 = $cnt >>> 5;
    $7 = $in + 8 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($5 | 0) > ($6 | 0);
    if ($9) {
      label = 2;
      break;
    } else {
      label = 10;
      break;
    }
   case 2:
    $11 = $8 + ($6 << 2) | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $cnt & 31;
    $14 = 1 << $13;
    $15 = $14 - 1 | 0;
    $16 = $12 & $15;
    $17 = ($16 | 0) == 0;
    if ($17) {
      $res_size_0 = $6;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $19 = $6 + 1 | 0;
    $20 = $res | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = ($19 | 0) > ($21 | 0);
    if ($22) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $24 = ___gmpz_realloc($res, $19) | 0;
    label = 5;
    break;
   case 5:
    $26 = $res + 8 | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = $27 + ($6 << 2) | 0;
    HEAP32[$28 >> 2] = $16;
    $res_size_1 = $19;
    $limb_cnt_0 = $6;
    label = 12;
    break;
   case 6:
    $29 = ($res_size_0 | 0) > 0;
    if ($29) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $31 = $res_size_0 - 1 | 0;
    $32 = $8 + ($31 << 2) | 0;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = ($33 | 0) == 0;
    if ($34) {
      $res_size_0 = $31;
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $36 = $res | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    $38 = ($res_size_0 | 0) > ($37 | 0);
    if ($38) {
      label = 9;
      break;
    } else {
      $res_size_1 = $res_size_0;
      $limb_cnt_0 = $res_size_0;
      label = 12;
      break;
    }
   case 9:
    $40 = ___gmpz_realloc($res, $res_size_0) | 0;
    $res_size_1 = $res_size_0;
    $limb_cnt_0 = $res_size_0;
    label = 12;
    break;
   case 10:
    $42 = $res | 0;
    $43 = HEAP32[$42 >> 2] | 0;
    $44 = ($5 | 0) > ($43 | 0);
    if ($44) {
      label = 11;
      break;
    } else {
      $res_size_1 = $5;
      $limb_cnt_0 = $5;
      label = 12;
      break;
    }
   case 11:
    $46 = ___gmpz_realloc($res, $5) | 0;
    $res_size_1 = $5;
    $limb_cnt_0 = $5;
    label = 12;
    break;
   case 12:
    $48 = ($res | 0) == ($in | 0);
    $49 = ($limb_cnt_0 | 0) == 0;
    $or_cond = $48 | $49;
    if ($or_cond) {
      label = 18;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $51 = $limb_cnt_0 - 1 | 0;
    $52 = $res + 8 | 0;
    $53 = HEAP32[$52 >> 2] | 0;
    $54 = HEAP32[$7 >> 2] | 0;
    $55 = HEAP32[$54 >> 2] | 0;
    $56 = ($51 | 0) == 0;
    if ($56) {
      $__x_1 = $55;
      $__dst_1 = $53;
      label = 17;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $57 = $limb_cnt_0 - 1 | 0;
    $__x_0 = $55;
    $_pn = $54;
    $__dst_0 = $53;
    $__n_0 = $51;
    label = 15;
    break;
   case 15:
    $__src_0 = $_pn + 4 | 0;
    $59 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $60 = HEAP32[$__src_0 >> 2] | 0;
    $61 = $__n_0 - 1 | 0;
    $62 = ($61 | 0) == 0;
    if ($62) {
      label = 16;
      break;
    } else {
      $__x_0 = $60;
      $_pn = $__src_0;
      $__dst_0 = $59;
      $__n_0 = $61;
      label = 15;
      break;
    }
   case 16:
    $scevgep = $53 + ($57 << 2) | 0;
    $__x_1 = $60;
    $__dst_1 = $scevgep;
    label = 17;
    break;
   case 17:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 18;
    break;
   case 18:
    $65 = HEAP32[$1 >> 2] | 0;
    $66 = ($65 | 0) > -1;
    $67 = -$res_size_1 | 0;
    $68 = $66 ? $res_size_1 : $67;
    $69 = $res + 4 | 0;
    HEAP32[$69 >> 2] = $68;
    return;
  }
}
function ___gmpq_get_str($str, $base, $q) {
  $str = $str | 0;
  $base = $base | 0;
  $q = $q | 0;
  var $base_off = 0, $1 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $uadd$0 = 0, $uadd$1 = 0, $30 = 0, $31 = 0, $32 = 0, $__x3_0 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $str_alloc_0 = 0, $_045 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $len_0 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $base_off = $base + 36 | 0;
    $1 = $base_off >>> 0 > 98;
    if ($1) {
      $_0 = 0;
      label = 10;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = ($str | 0) == 0;
    if ($3) {
      label = 3;
      break;
    } else {
      $_045 = $str;
      $str_alloc_0 = 0;
      label = 4;
      break;
    }
   case 3:
    $5 = ($base | 0) > -1;
    $6 = -$base | 0;
    $7 = $5 ? $base : $6;
    $8 = 9836 + ($7 * 20 & -1) | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $q + 4 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = ($11 | 0) > -1;
    $13 = -$11 | 0;
    $14 = $12 ? $11 : $13;
    $15 = $q + 16 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $14 + $16 | 0;
    $18 = $17 << 5;
    $19 = $9 & 65535;
    $20 = $9 >>> 16;
    $21 = $18 & 65504;
    $22 = $17 >>> 11;
    $23 = $22 & 65535;
    $24 = Math_imul($21, $19);
    $25 = Math_imul($23, $19);
    $26 = Math_imul($21, $20);
    $27 = Math_imul($23, $20);
    $28 = $24 >>> 16;
    $29 = $28 + $25 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($29 | 0, $26 | 0) | 0;
    $uadd$1 = tempRet0;
    $30 = $uadd$0;
    $31 = $uadd$1;
    $32 = $27 + 65536 | 0;
    $__x3_0 = $31 ? $32 : $27;
    $33 = $30 >>> 16;
    $34 = $33 + 6 | 0;
    $35 = $34 + $__x3_0 | 0;
    $36 = HEAP32[3962] | 0;
    $37 = FUNCTION_TABLE_ii[$36 & 1023]($35) | 0;
    $_045 = $37;
    $str_alloc_0 = $35;
    label = 4;
    break;
   case 4:
    $39 = $q | 0;
    $40 = ___gmpz_get_str($_045, $base, $39) | 0;
    $41 = _strlen($_045 | 0) | 0;
    $42 = $q + 12 | 0;
    $43 = $q + 16 | 0;
    $44 = HEAP32[$43 >> 2] | 0;
    $45 = ($44 | 0) == 1;
    if ($45) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $47 = $q + 20 | 0;
    $48 = HEAP32[$47 >> 2] | 0;
    $49 = HEAP32[$48 >> 2] | 0;
    $50 = ($49 | 0) == 1;
    if ($50) {
      $len_0 = $41;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $52 = $41 + 1 | 0;
    $53 = $_045 + $41 | 0;
    HEAP8[$53] = 47;
    $54 = $_045 + $52 | 0;
    $55 = ___gmpz_get_str($54, $base, $42) | 0;
    $56 = _strlen($54 | 0) | 0;
    $57 = $56 + $52 | 0;
    $len_0 = $57;
    label = 7;
    break;
   case 7:
    $59 = ($str_alloc_0 | 0) == 0;
    if ($59) {
      $_0 = $_045;
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $61 = $len_0 + 1 | 0;
    $62 = ($str_alloc_0 | 0) == ($61 | 0);
    if ($62) {
      $_0 = $_045;
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $64 = HEAP32[3748] | 0;
    $65 = FUNCTION_TABLE_iiii[$64 & 1023]($_045, $str_alloc_0, $61) | 0;
    $_0 = $65;
    label = 10;
    break;
   case 10:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpz_tdiv_r($rem, $num, $den) {
  $rem = $rem | 0;
  $num = $num | 0;
  $den = $den | 0;
  var $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $__n_0 = 0, $__dst_0 = 0, $_pn60 = 0, $__x_0 = 0, $__src_0 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $scevgep75 = 0, $__n1_0 = 0, $__dst2_0 = 0, $_pn59 = 0, $__x4_0 = 0, $__src3_0 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $scevgep7576 = 0, $__dst2_1 = 0, $__x4_1 = 0, $dp_0 = 0, $87 = 0, $89 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $scevgep72 = 0, $__n6_0 = 0, $__dst7_0 = 0, $_pn = 0, $__x9_0 = 0, $__src8_0 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $scevgep7273 = 0, $__dst7_1 = 0, $__x9_1 = 0, $np_0 = 0, $dl_0 = 0, $113 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    $1 = $num + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $den + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($2 | 0) > -1;
    $6 = -$2 | 0;
    $7 = $5 ? $2 : $6;
    $8 = ($4 | 0) > -1;
    $9 = -$4 | 0;
    $10 = $8 ? $4 : $9;
    $11 = $7 - $10 | 0;
    $12 = ($10 | 0) == 0;
    if ($12) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    ___gmp_divide_by_zero();
   case 3:
    $15 = $rem | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = ($10 | 0) > ($16 | 0);
    if ($17) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $19 = ___gmpz_realloc($rem, $10) | 0;
    $20 = $19;
    $25 = $20;
    label = 6;
    break;
   case 5:
    $22 = $rem + 8 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $25 = $23;
    label = 6;
    break;
   case 6:
    $26 = ($11 | 0) < 0;
    if ($26) {
      label = 7;
      break;
    } else {
      label = 15;
      break;
    }
   case 7:
    $28 = ($num | 0) == ($rem | 0);
    if ($28) {
      label = 43;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $30 = $num + 8 | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = ($2 | 0) == 0;
    if ($32) {
      label = 14;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $34 = $7 - 1 | 0;
    $35 = HEAP32[$31 >> 2] | 0;
    $36 = ($34 | 0) == 0;
    if ($36) {
      $__x_1 = $35;
      $__dst_1 = $25;
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $37 = $7 - 1 | 0;
    $__x_0 = $35;
    $_pn60 = $31;
    $__dst_0 = $25;
    $__n_0 = $34;
    label = 11;
    break;
   case 11:
    $__src_0 = $_pn60 + 4 | 0;
    $39 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $40 = HEAP32[$__src_0 >> 2] | 0;
    $41 = $__n_0 - 1 | 0;
    $42 = ($41 | 0) == 0;
    if ($42) {
      label = 12;
      break;
    } else {
      $__x_0 = $40;
      $_pn60 = $__src_0;
      $__dst_0 = $39;
      $__n_0 = $41;
      label = 11;
      break;
    }
   case 12:
    $scevgep = $25 + ($37 << 2) | 0;
    $__x_1 = $40;
    $__dst_1 = $scevgep;
    label = 13;
    break;
   case 13:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 14;
    break;
   case 14:
    $45 = HEAP32[$1 >> 2] | 0;
    $46 = $rem + 4 | 0;
    HEAP32[$46 >> 2] = $45;
    label = 43;
    break;
   case 15:
    HEAP32[$__tmp_marker >> 2] = 0;
    $48 = $11 << 2;
    $49 = $48 + 4 | 0;
    $50 = $49 >>> 0 < 65536;
    if ($50) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    $52 = STACKTOP;
    STACKTOP = STACKTOP + $49 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $56 = $52;
    label = 18;
    break;
   case 17:
    $54 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $49) | 0;
    $56 = $54;
    label = 18;
    break;
   case 18:
    $57 = $56;
    $58 = $num + 8 | 0;
    $59 = HEAP32[$58 >> 2] | 0;
    $60 = $den + 8 | 0;
    $61 = HEAP32[$60 >> 2] | 0;
    $62 = ($61 | 0) == ($25 | 0);
    if ($62) {
      label = 19;
      break;
    } else {
      $dp_0 = $61;
      label = 28;
      break;
    }
   case 19:
    $64 = $10 << 2;
    $65 = $64 >>> 0 < 65536;
    if ($65) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    $67 = STACKTOP;
    STACKTOP = STACKTOP + $64 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $71 = $67;
    label = 22;
    break;
   case 21:
    $69 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $64) | 0;
    $71 = $69;
    label = 22;
    break;
   case 22:
    $72 = $71;
    $73 = ($4 | 0) == 0;
    if ($73) {
      $dp_0 = $72;
      label = 28;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $75 = $10 - 1 | 0;
    $76 = HEAP32[$61 >> 2] | 0;
    $77 = ($75 | 0) == 0;
    if ($77) {
      $__x4_1 = $76;
      $__dst2_1 = $72;
      label = 27;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $78 = $10 << 2;
    $79 = $78 - 4 | 0;
    $scevgep75 = $71 + $79 | 0;
    $__x4_0 = $76;
    $_pn59 = $61;
    $__dst2_0 = $72;
    $__n1_0 = $75;
    label = 25;
    break;
   case 25:
    $__src3_0 = $_pn59 + 4 | 0;
    $81 = $__dst2_0 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    $82 = HEAP32[$__src3_0 >> 2] | 0;
    $83 = $__n1_0 - 1 | 0;
    $84 = ($83 | 0) == 0;
    if ($84) {
      label = 26;
      break;
    } else {
      $__x4_0 = $82;
      $_pn59 = $__src3_0;
      $__dst2_0 = $81;
      $__n1_0 = $83;
      label = 25;
      break;
    }
   case 26:
    $scevgep7576 = $scevgep75;
    $__x4_1 = $82;
    $__dst2_1 = $scevgep7576;
    label = 27;
    break;
   case 27:
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    $dp_0 = $72;
    label = 28;
    break;
   case 28:
    $87 = ($59 | 0) == ($25 | 0);
    if ($87) {
      label = 29;
      break;
    } else {
      $np_0 = $59;
      label = 38;
      break;
    }
   case 29:
    $89 = $7 << 2;
    $90 = $89 >>> 0 < 65536;
    if ($90) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    $92 = STACKTOP;
    STACKTOP = STACKTOP + $89 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $96 = $92;
    label = 32;
    break;
   case 31:
    $94 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $89) | 0;
    $96 = $94;
    label = 32;
    break;
   case 32:
    $97 = $96;
    $98 = ($2 | 0) == 0;
    if ($98) {
      $np_0 = $97;
      label = 38;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $100 = $7 - 1 | 0;
    $101 = HEAP32[$59 >> 2] | 0;
    $102 = ($100 | 0) == 0;
    if ($102) {
      $__x9_1 = $101;
      $__dst7_1 = $97;
      label = 37;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    $103 = $7 << 2;
    $104 = $103 - 4 | 0;
    $scevgep72 = $96 + $104 | 0;
    $__x9_0 = $101;
    $_pn = $59;
    $__dst7_0 = $97;
    $__n6_0 = $100;
    label = 35;
    break;
   case 35:
    $__src8_0 = $_pn + 4 | 0;
    $106 = $__dst7_0 + 4 | 0;
    HEAP32[$__dst7_0 >> 2] = $__x9_0;
    $107 = HEAP32[$__src8_0 >> 2] | 0;
    $108 = $__n6_0 - 1 | 0;
    $109 = ($108 | 0) == 0;
    if ($109) {
      label = 36;
      break;
    } else {
      $__x9_0 = $107;
      $_pn = $__src8_0;
      $__dst7_0 = $106;
      $__n6_0 = $108;
      label = 35;
      break;
    }
   case 36:
    $scevgep7273 = $scevgep72;
    $__x9_1 = $107;
    $__dst7_1 = $scevgep7273;
    label = 37;
    break;
   case 37:
    HEAP32[$__dst7_1 >> 2] = $__x9_1;
    $np_0 = $97;
    label = 38;
    break;
   case 38:
    ___gmpn_tdiv_qr($57, $25, 0, $np_0, $7, $dp_0, $10);
    $dl_0 = $10;
    label = 39;
    break;
   case 39:
    $113 = ($dl_0 | 0) > 0;
    if ($113) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    $115 = $dl_0 - 1 | 0;
    $116 = $25 + ($115 << 2) | 0;
    $117 = HEAP32[$116 >> 2] | 0;
    $118 = ($117 | 0) == 0;
    if ($118) {
      $dl_0 = $115;
      label = 39;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $120 = -$dl_0 | 0;
    $121 = $5 ? $dl_0 : $120;
    $122 = $rem + 4 | 0;
    HEAP32[$122 >> 2] = $121;
    $123 = HEAP32[$__tmp_marker >> 2] | 0;
    $124 = ($123 | 0) == 0;
    if ($124) {
      label = 43;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    ___gmp_tmp_reentrant_free($123);
    label = 43;
    break;
   case 43:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpz_urandomm($rop, $rstate, $n) {
  $rop = $rop | 0;
  $rstate = $rstate | 0;
  $n = $n | 0;
  var $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $np_0 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $pow2_0_ph = 0, $_pr = 0, $24 = 0, $pow2_0 = 0, $25 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $53 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $scevgep = 0, $__n_0 = 0, $__dst_0 = 0, $_pn = 0, $__x_0 = 0, $__src_0 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $scevgep68 = 0, $__dst_1 = 0, $__x_1 = 0, $np_1 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $79 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $count_0 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $__gmp_i_0 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $size_0 = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    $1 = $n + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > -1;
    $4 = -$2 | 0;
    $5 = $3 ? $2 : $4;
    $6 = ($5 | 0) == 0;
    if ($6) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    ___gmp_divide_by_zero();
   case 3:
    $9 = $5 - 1 | 0;
    $10 = $n + 8 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $11 + ($9 << 2) | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13 - 1 | 0;
    $15 = $14 & $13;
    $16 = ($15 | 0) == 0;
    $17 = $16 & 1;
    if ($16) {
      $np_0 = $11;
      label = 4;
      break;
    } else {
      $pow2_0 = $17;
      $24 = $13;
      label = 7;
      break;
    }
   case 4:
    $18 = $np_0 >>> 0 < $12 >>> 0;
    if ($18) {
      label = 5;
      break;
    } else {
      $pow2_0_ph = $17;
      label = 6;
      break;
    }
   case 5:
    $20 = HEAP32[$np_0 >> 2] | 0;
    $21 = ($20 | 0) == 0;
    $22 = $np_0 + 4 | 0;
    if ($21) {
      $np_0 = $22;
      label = 4;
      break;
    } else {
      $pow2_0_ph = 0;
      label = 6;
      break;
    }
   case 6:
    $_pr = HEAP32[$12 >> 2] | 0;
    $pow2_0 = $pow2_0_ph;
    $24 = $_pr;
    label = 7;
    break;
   case 7:
    $25 = $24 >>> 0 < 65536;
    if ($25) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $27 = $24 >>> 0 < 256;
    $28 = $27 ? 1 : 9;
    $33 = $28;
    label = 10;
    break;
   case 9:
    $30 = $24 >>> 0 < 16777216;
    $31 = $30 ? 17 : 25;
    $33 = $31;
    label = 10;
    break;
   case 10:
    $34 = $24 >>> ($33 >>> 0);
    $35 = $34 + 9696 | 0;
    $36 = HEAP8[$35] | 0;
    $37 = $36 & 255;
    $38 = $5 << 5;
    $39 = $38 - 33 | 0;
    $40 = $39 + $33 | 0;
    $41 = $40 + $37 | 0;
    $42 = $41 - $pow2_0 | 0;
    $43 = ($41 | 0) == ($pow2_0 | 0);
    if ($43) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $45 = $rop + 4 | 0;
    HEAP32[$45 >> 2] = 0;
    label = 37;
    break;
   case 12:
    HEAP32[$__tmp_marker >> 2] = 0;
    $47 = HEAP32[$10 >> 2] | 0;
    $48 = ($rop | 0) == ($n | 0);
    if ($48) {
      label = 13;
      break;
    } else {
      $np_1 = $47;
      label = 22;
      break;
    }
   case 13:
    $50 = $5 << 2;
    $51 = $50 >>> 0 < 65536;
    if ($51) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $53 = STACKTOP;
    STACKTOP = STACKTOP + $50 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $57 = $53;
    label = 16;
    break;
   case 15:
    $55 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $50) | 0;
    $57 = $55;
    label = 16;
    break;
   case 16:
    $58 = $57;
    $59 = ($2 | 0) == 0;
    if ($59) {
      $np_1 = $58;
      label = 22;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $61 = HEAP32[$47 >> 2] | 0;
    $62 = ($9 | 0) == 0;
    if ($62) {
      $__x_1 = $61;
      $__dst_1 = $58;
      label = 21;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $63 = $5 << 2;
    $64 = $63 - 4 | 0;
    $scevgep = $57 + $64 | 0;
    $__x_0 = $61;
    $_pn = $47;
    $__dst_0 = $58;
    $__n_0 = $9;
    label = 19;
    break;
   case 19:
    $__src_0 = $_pn + 4 | 0;
    $66 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $67 = HEAP32[$__src_0 >> 2] | 0;
    $68 = $__n_0 - 1 | 0;
    $69 = ($68 | 0) == 0;
    if ($69) {
      label = 20;
      break;
    } else {
      $__x_0 = $67;
      $_pn = $__src_0;
      $__dst_0 = $66;
      $__n_0 = $68;
      label = 19;
      break;
    }
   case 20:
    $scevgep68 = $scevgep;
    $__x_1 = $67;
    $__dst_1 = $scevgep68;
    label = 21;
    break;
   case 21:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    $np_1 = $58;
    label = 22;
    break;
   case 22:
    $72 = $rop | 0;
    $73 = HEAP32[$72 >> 2] | 0;
    $74 = ($5 | 0) > ($73 | 0);
    if ($74) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    $76 = ___gmpz_realloc($rop, $5) | 0;
    $77 = $76;
    $82 = $77;
    label = 25;
    break;
   case 24:
    $79 = $rop + 8 | 0;
    $80 = HEAP32[$79 >> 2] | 0;
    $82 = $80;
    label = 25;
    break;
   case 25:
    $83 = $82 + ($9 << 2) | 0;
    HEAP32[$83 >> 2] = 0;
    $84 = $rstate + 16 | 0;
    $count_0 = 80;
    label = 26;
    break;
   case 26:
    $86 = HEAP32[$84 >> 2] | 0;
    $87 = $86 + 4 | 0;
    $88 = $87;
    $89 = HEAP32[$88 >> 2] | 0;
    FUNCTION_TABLE_viii[$89 & 1023]($rstate, $82, $42);
    $__gmp_i_0 = $5;
    label = 27;
    break;
   case 27:
    $91 = $__gmp_i_0 - 1 | 0;
    $92 = ($__gmp_i_0 | 0) > 0;
    if ($92) {
      label = 28;
      break;
    } else {
      label = 30;
      break;
    }
   case 28:
    $94 = $82 + ($91 << 2) | 0;
    $95 = HEAP32[$94 >> 2] | 0;
    $96 = $np_1 + ($91 << 2) | 0;
    $97 = HEAP32[$96 >> 2] | 0;
    $98 = ($95 | 0) == ($97 | 0);
    if ($98) {
      $__gmp_i_0 = $91;
      label = 27;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $100 = $95 >>> 0 > $97 >>> 0;
    if ($100) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    $101 = $count_0 - 1 | 0;
    $102 = ($101 | 0) == 0;
    if ($102) {
      label = 32;
      break;
    } else {
      $count_0 = $101;
      label = 26;
      break;
    }
   case 31:
    $103 = ($count_0 | 0) == 0;
    if ($103) {
      label = 32;
      break;
    } else {
      $size_0 = $5;
      label = 33;
      break;
    }
   case 32:
    $104 = ___gmpn_sub_n($82, $82, $np_1, $5) | 0;
    $size_0 = $5;
    label = 33;
    break;
   case 33:
    $105 = ($size_0 | 0) > 0;
    if ($105) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    $107 = $size_0 - 1 | 0;
    $108 = $82 + ($107 << 2) | 0;
    $109 = HEAP32[$108 >> 2] | 0;
    $110 = ($109 | 0) == 0;
    if ($110) {
      $size_0 = $107;
      label = 33;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $112 = $rop + 4 | 0;
    HEAP32[$112 >> 2] = $size_0;
    $113 = HEAP32[$__tmp_marker >> 2] | 0;
    $114 = ($113 | 0) == 0;
    if ($114) {
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    ___gmp_tmp_reentrant_free($113);
    label = 37;
    break;
   case 37:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpn_sub_1($__gmp_dst, $__gmp_src, $__gmp_size, $__gmp_n) {
  $__gmp_dst = $__gmp_dst | 0;
  $__gmp_src = $__gmp_src | 0;
  $__gmp_size = $__gmp_size | 0;
  $__gmp_n = $__gmp_n | 0;
  var $1 = 0, $2 = 0, $3 = 0, $__gmp_i_0 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $or_cond = 0, $__gmp_j_031 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $exitcond = 0, $20 = 0, $21 = 0, $or_cond41 = 0, $__gmp_j1_036 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $exitcond39 = 0, $__gmp_c_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP32[$__gmp_src >> 2] | 0;
    $2 = $1 - $__gmp_n | 0;
    HEAP32[$__gmp_dst >> 2] = $2;
    $3 = $1 >>> 0 < $__gmp_n >>> 0;
    if ($3) {
      $__gmp_i_0 = 1;
      label = 2;
      break;
    } else {
      label = 6;
      break;
    }
   case 2:
    $4 = ($__gmp_i_0 | 0) < ($__gmp_size | 0);
    if ($4) {
      label = 3;
      break;
    } else {
      $__gmp_c_0 = 1;
      label = 8;
      break;
    }
   case 3:
    $6 = $__gmp_src + ($__gmp_i_0 << 2) | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $7 - 1 | 0;
    $9 = $__gmp_dst + ($__gmp_i_0 << 2) | 0;
    HEAP32[$9 >> 2] = $8;
    $10 = $__gmp_i_0 + 1 | 0;
    $11 = ($7 | 0) == 0;
    if ($11) {
      $__gmp_i_0 = $10;
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $13 = ($__gmp_src | 0) != ($__gmp_dst | 0);
    $14 = ($10 | 0) < ($__gmp_size | 0);
    $or_cond = $13 & $14;
    if ($or_cond) {
      $__gmp_j_031 = $10;
      label = 5;
      break;
    } else {
      $__gmp_c_0 = 0;
      label = 8;
      break;
    }
   case 5:
    $15 = $__gmp_src + ($__gmp_j_031 << 2) | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $__gmp_dst + ($__gmp_j_031 << 2) | 0;
    HEAP32[$17 >> 2] = $16;
    $18 = $__gmp_j_031 + 1 | 0;
    $exitcond = ($18 | 0) == ($__gmp_size | 0);
    if ($exitcond) {
      $__gmp_c_0 = 0;
      label = 8;
      break;
    } else {
      $__gmp_j_031 = $18;
      label = 5;
      break;
    }
   case 6:
    $20 = ($__gmp_src | 0) != ($__gmp_dst | 0);
    $21 = ($__gmp_size | 0) > 1;
    $or_cond41 = $20 & $21;
    if ($or_cond41) {
      $__gmp_j1_036 = 1;
      label = 7;
      break;
    } else {
      $__gmp_c_0 = 0;
      label = 8;
      break;
    }
   case 7:
    $22 = $__gmp_src + ($__gmp_j1_036 << 2) | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $__gmp_dst + ($__gmp_j1_036 << 2) | 0;
    HEAP32[$24 >> 2] = $23;
    $25 = $__gmp_j1_036 + 1 | 0;
    $exitcond39 = ($25 | 0) == ($__gmp_size | 0);
    if ($exitcond39) {
      $__gmp_c_0 = 0;
      label = 8;
      break;
    } else {
      $__gmp_j1_036 = $25;
      label = 7;
      break;
    }
   case 8:
    return $__gmp_c_0 | 0;
  }
  return 0;
}
function ___gmpn_sub_n($rp, $up, $vp, $n) {
  $rp = $rp | 0;
  $up = $up | 0;
  $vp = $vp | 0;
  $n = $n | 0;
  var $_011 = 0, $_010 = 0, $cy_0 = 0, $_09 = 0, $_0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $_0 = $rp;
    $_09 = $up;
    $cy_0 = 0;
    $_010 = $vp;
    $_011 = $n;
    label = 2;
    break;
   case 2:
    $2 = $_09 + 4 | 0;
    $3 = HEAP32[$_09 >> 2] | 0;
    $4 = $_010 + 4 | 0;
    $5 = HEAP32[$_010 >> 2] | 0;
    $6 = $3 - $5 | 0;
    $7 = $6 >>> 0 > $3 >>> 0;
    $8 = $7 & 1;
    $9 = $6 - $cy_0 | 0;
    $10 = $9 >>> 0 > $6 >>> 0;
    $11 = $10 & 1;
    $12 = $11 | $8;
    $13 = $_0 + 4 | 0;
    HEAP32[$_0 >> 2] = $9;
    $14 = $_011 - 1 | 0;
    $15 = ($14 | 0) == 0;
    if ($15) {
      label = 3;
      break;
    } else {
      $_0 = $13;
      $_09 = $2;
      $cy_0 = $12;
      $_010 = $4;
      $_011 = $14;
      label = 2;
      break;
    }
   case 3:
    return $12 | 0;
  }
  return 0;
}
function ___gmpn_neg($__gmp_rp, $__gmp_up, $__gmp_n) {
  $__gmp_rp = $__gmp_rp | 0;
  $__gmp_up = $__gmp_up | 0;
  $__gmp_n = $__gmp_n | 0;
  var $_07 = 0, $_06 = 0, $_0 = 0, $__gmp_cy_0 = 0, $2 = 0, $3 = 0, $sum = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__gmp_cy_0 = 0;
    $_0 = $__gmp_rp;
    $_06 = $__gmp_n;
    $_07 = $__gmp_up;
    label = 2;
    break;
   case 2:
    $2 = $_07 + 4 | 0;
    $3 = HEAP32[$_07 >> 2] | 0;
    $sum = $3 + $__gmp_cy_0 | 0;
    $4 = -$sum | 0;
    $5 = $_0 + 4 | 0;
    HEAP32[$_0 >> 2] = $4;
    $6 = ($3 | 0) != 0;
    $7 = $6 & 1;
    $8 = $7 | $__gmp_cy_0;
    $9 = $_06 - 1 | 0;
    $10 = ($9 | 0) == 0;
    if ($10) {
      label = 3;
      break;
    } else {
      $__gmp_cy_0 = $8;
      $_0 = $5;
      $_06 = $9;
      $_07 = $2;
      label = 2;
      break;
    }
   case 3:
    return $8 | 0;
  }
  return 0;
}
function ___gmpn_lshift($rp, $up, $n, $cnt) {
  $rp = $rp | 0;
  $up = $up | 0;
  $n = $n | 0;
  $cnt = $cnt | 0;
  var $1 = 0, $2 = 0, $_sum = 0, $3 = 0, $4 = 0, $5 = 0, $i_019 = 0, $high_limb_020 = 0, $6 = 0, $high_limb_024 = 0, $i_023 = 0, $_022 = 0, $_01821 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $i_0 = 0, $high_limb_0 = 0, $12 = 0, $scevgep = 0, $high_limb_0_lcssa = 0, $_0_lcssa = 0, $14 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $rp + ($n << 2) | 0;
    $2 = 32 - $cnt | 0;
    $_sum = $n - 1 | 0;
    $3 = $up + ($_sum << 2) | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 >>> ($2 >>> 0);
    $i_019 = $n - 1 | 0;
    $high_limb_020 = $4 << $cnt;
    $6 = ($i_019 | 0) == 0;
    if ($6) {
      $_0_lcssa = $1;
      $high_limb_0_lcssa = $high_limb_020;
      label = 4;
      break;
    } else {
      $_01821 = $3;
      $_022 = $1;
      $i_023 = $i_019;
      $high_limb_024 = $high_limb_020;
      label = 2;
      break;
    }
   case 2:
    $7 = $_01821 - 4 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $8 >>> ($2 >>> 0);
    $10 = $9 | $high_limb_024;
    $11 = $_022 - 4 | 0;
    HEAP32[$11 >> 2] = $10;
    $i_0 = $i_023 - 1 | 0;
    $high_limb_0 = $8 << $cnt;
    $12 = ($i_0 | 0) == 0;
    if ($12) {
      label = 3;
      break;
    } else {
      $_01821 = $7;
      $_022 = $11;
      $i_023 = $i_0;
      $high_limb_024 = $high_limb_0;
      label = 2;
      break;
    }
   case 3:
    $scevgep = $rp + 4 | 0;
    $_0_lcssa = $scevgep;
    $high_limb_0_lcssa = $high_limb_0;
    label = 4;
    break;
   case 4:
    $14 = $_0_lcssa - 4 | 0;
    HEAP32[$14 >> 2] = $high_limb_0_lcssa;
    return $5 | 0;
  }
  return 0;
}
function ___gmpn_rshift($rp, $up, $n, $cnt) {
  $rp = $rp | 0;
  $up = $up | 0;
  $n = $n | 0;
  $cnt = $cnt | 0;
  var $1 = 0, $2 = 0, $3 = 0, $i_015 = 0, $low_limb_017 = 0, $4 = 0, $5 = 0, $low_limb_021 = 0, $up_pn = 0, $i_019 = 0, $_018 = 0, $_01420 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $i_0 = 0, $low_limb_0 = 0, $11 = 0, $scevgep = 0, $low_limb_0_lcssa = 0, $_0_lcssa = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = 32 - $cnt | 0;
    $2 = HEAP32[$up >> 2] | 0;
    $3 = $2 << $1;
    $i_015 = $n - 1 | 0;
    $low_limb_017 = $2 >>> ($cnt >>> 0);
    $4 = ($i_015 | 0) == 0;
    if ($4) {
      $_0_lcssa = $rp;
      $low_limb_0_lcssa = $low_limb_017;
      label = 5;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = $n - 1 | 0;
    $_018 = $rp;
    $i_019 = $i_015;
    $up_pn = $up;
    $low_limb_021 = $low_limb_017;
    label = 3;
    break;
   case 3:
    $_01420 = $up_pn + 4 | 0;
    $7 = HEAP32[$_01420 >> 2] | 0;
    $8 = $7 << $1;
    $9 = $8 | $low_limb_021;
    $10 = $_018 + 4 | 0;
    HEAP32[$_018 >> 2] = $9;
    $i_0 = $i_019 - 1 | 0;
    $low_limb_0 = $7 >>> ($cnt >>> 0);
    $11 = ($i_0 | 0) == 0;
    if ($11) {
      label = 4;
      break;
    } else {
      $_018 = $10;
      $i_019 = $i_0;
      $up_pn = $_01420;
      $low_limb_021 = $low_limb_0;
      label = 3;
      break;
    }
   case 4:
    $scevgep = $rp + ($5 << 2) | 0;
    $_0_lcssa = $scevgep;
    $low_limb_0_lcssa = $low_limb_0;
    label = 5;
    break;
   case 5:
    HEAP32[$_0_lcssa >> 2] = $low_limb_0_lcssa;
    return $3 | 0;
  }
  return 0;
}
function ___gmpn_add($__gmp_wp, $__gmp_xp, $__gmp_xsize, $__gmp_yp, $__gmp_ysize) {
  $__gmp_wp = $__gmp_wp | 0;
  $__gmp_xp = $__gmp_xp | 0;
  $__gmp_xsize = $__gmp_xsize | 0;
  $__gmp_yp = $__gmp_yp | 0;
  $__gmp_ysize = $__gmp_ysize | 0;
  var $1 = 0, $3 = 0, $4 = 0, $__gmp_i_0 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $__gmp_i_1 = 0, $13 = 0, $14 = 0, $or_cond = 0, $__gmp_j_020 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $exitcond = 0, $__gmp_c_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($__gmp_ysize | 0) == 0;
    if ($1) {
      $__gmp_i_1 = 0;
      label = 5;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = ___gmpn_add_n($__gmp_wp, $__gmp_xp, $__gmp_yp, $__gmp_ysize) | 0;
    $4 = ($3 | 0) == 0;
    if ($4) {
      $__gmp_i_1 = $__gmp_ysize;
      label = 5;
      break;
    } else {
      $__gmp_i_0 = $__gmp_ysize;
      label = 3;
      break;
    }
   case 3:
    $5 = ($__gmp_i_0 | 0) < ($__gmp_xsize | 0);
    if ($5) {
      label = 4;
      break;
    } else {
      $__gmp_c_0 = 1;
      label = 7;
      break;
    }
   case 4:
    $7 = $__gmp_xp + ($__gmp_i_0 << 2) | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $8 + 1 | 0;
    $10 = $__gmp_i_0 + 1 | 0;
    $11 = $__gmp_wp + ($__gmp_i_0 << 2) | 0;
    HEAP32[$11 >> 2] = $9;
    $12 = ($9 | 0) == 0;
    if ($12) {
      $__gmp_i_0 = $10;
      label = 3;
      break;
    } else {
      $__gmp_i_1 = $10;
      label = 5;
      break;
    }
   case 5:
    $13 = ($__gmp_wp | 0) != ($__gmp_xp | 0);
    $14 = ($__gmp_i_1 | 0) < ($__gmp_xsize | 0);
    $or_cond = $13 & $14;
    if ($or_cond) {
      $__gmp_j_020 = $__gmp_i_1;
      label = 6;
      break;
    } else {
      $__gmp_c_0 = 0;
      label = 7;
      break;
    }
   case 6:
    $15 = $__gmp_xp + ($__gmp_j_020 << 2) | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $__gmp_wp + ($__gmp_j_020 << 2) | 0;
    HEAP32[$17 >> 2] = $16;
    $18 = $__gmp_j_020 + 1 | 0;
    $exitcond = ($18 | 0) == ($__gmp_xsize | 0);
    if ($exitcond) {
      $__gmp_c_0 = 0;
      label = 7;
      break;
    } else {
      $__gmp_j_020 = $18;
      label = 6;
      break;
    }
   case 7:
    return $__gmp_c_0 | 0;
  }
  return 0;
}
function ___gmpn_add_1($__gmp_dst, $__gmp_src, $__gmp_size, $__gmp_n) {
  $__gmp_dst = $__gmp_dst | 0;
  $__gmp_src = $__gmp_src | 0;
  $__gmp_size = $__gmp_size | 0;
  $__gmp_n = $__gmp_n | 0;
  var $1 = 0, $uadd$0 = 0, $uadd$1 = 0, $2 = 0, $3 = 0, $__gmp_i_0 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $or_cond = 0, $__gmp_j_031 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $exitcond = 0, $20 = 0, $21 = 0, $or_cond41 = 0, $__gmp_j1_036 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $exitcond39 = 0, $__gmp_c_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP32[$__gmp_src >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($1 | 0, $__gmp_n | 0) | 0;
    $uadd$1 = tempRet0;
    $2 = $uadd$0;
    HEAP32[$__gmp_dst >> 2] = $2;
    $3 = $uadd$1;
    if ($3) {
      $__gmp_i_0 = 1;
      label = 2;
      break;
    } else {
      label = 6;
      break;
    }
   case 2:
    $4 = ($__gmp_i_0 | 0) < ($__gmp_size | 0);
    if ($4) {
      label = 3;
      break;
    } else {
      $__gmp_c_0 = 1;
      label = 8;
      break;
    }
   case 3:
    $6 = $__gmp_src + ($__gmp_i_0 << 2) | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $7 + 1 | 0;
    $9 = $__gmp_dst + ($__gmp_i_0 << 2) | 0;
    HEAP32[$9 >> 2] = $8;
    $10 = $__gmp_i_0 + 1 | 0;
    $11 = ($8 | 0) == 0;
    if ($11) {
      $__gmp_i_0 = $10;
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $13 = ($__gmp_src | 0) != ($__gmp_dst | 0);
    $14 = ($10 | 0) < ($__gmp_size | 0);
    $or_cond = $13 & $14;
    if ($or_cond) {
      $__gmp_j_031 = $10;
      label = 5;
      break;
    } else {
      $__gmp_c_0 = 0;
      label = 8;
      break;
    }
   case 5:
    $15 = $__gmp_src + ($__gmp_j_031 << 2) | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $__gmp_dst + ($__gmp_j_031 << 2) | 0;
    HEAP32[$17 >> 2] = $16;
    $18 = $__gmp_j_031 + 1 | 0;
    $exitcond = ($18 | 0) == ($__gmp_size | 0);
    if ($exitcond) {
      $__gmp_c_0 = 0;
      label = 8;
      break;
    } else {
      $__gmp_j_031 = $18;
      label = 5;
      break;
    }
   case 6:
    $20 = ($__gmp_src | 0) != ($__gmp_dst | 0);
    $21 = ($__gmp_size | 0) > 1;
    $or_cond41 = $20 & $21;
    if ($or_cond41) {
      $__gmp_j1_036 = 1;
      label = 7;
      break;
    } else {
      $__gmp_c_0 = 0;
      label = 8;
      break;
    }
   case 7:
    $22 = $__gmp_src + ($__gmp_j1_036 << 2) | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $__gmp_dst + ($__gmp_j1_036 << 2) | 0;
    HEAP32[$24 >> 2] = $23;
    $25 = $__gmp_j1_036 + 1 | 0;
    $exitcond39 = ($25 | 0) == ($__gmp_size | 0);
    if ($exitcond39) {
      $__gmp_c_0 = 0;
      label = 8;
      break;
    } else {
      $__gmp_j1_036 = $25;
      label = 7;
      break;
    }
   case 8:
    return $__gmp_c_0 | 0;
  }
  return 0;
}
function ___gmpn_add_n($rp, $up, $vp, $n) {
  $rp = $rp | 0;
  $up = $up | 0;
  $vp = $vp | 0;
  $n = $n | 0;
  var $_011 = 0, $_010 = 0, $cy_0 = 0, $_09 = 0, $_0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $uadd$0 = 0, $uadd$1 = 0, $6 = 0, $7 = 0, $uadd12$0 = 0, $uadd12$1 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $_0 = $rp;
    $_09 = $up;
    $cy_0 = 0;
    $_010 = $vp;
    $_011 = $n;
    label = 2;
    break;
   case 2:
    $2 = $_09 + 4 | 0;
    $3 = HEAP32[$_09 >> 2] | 0;
    $4 = $_010 + 4 | 0;
    $5 = HEAP32[$_010 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($3 | 0, $5 | 0) | 0;
    $uadd$1 = tempRet0;
    $6 = $uadd$0;
    $7 = $uadd$1;
    $uadd12$0 = _llvm_uadd_with_overflow_i32($6 | 0, $cy_0 | 0) | 0;
    $uadd12$1 = tempRet0;
    $8 = $uadd12$0;
    $9 = $uadd12$1;
    $10 = $7 | $9;
    $11 = $10 & 1;
    $12 = $_0 + 4 | 0;
    HEAP32[$_0 >> 2] = $8;
    $13 = $_011 - 1 | 0;
    $14 = ($13 | 0) == 0;
    if ($14) {
      label = 3;
      break;
    } else {
      $_0 = $12;
      $_09 = $2;
      $cy_0 = $11;
      $_010 = $4;
      $_011 = $13;
      label = 2;
      break;
    }
   case 3:
    return $11 | 0;
  }
  return 0;
}
function ___gmpn_sub($__gmp_wp, $__gmp_xp, $__gmp_xsize, $__gmp_yp, $__gmp_ysize) {
  $__gmp_wp = $__gmp_wp | 0;
  $__gmp_xp = $__gmp_xp | 0;
  $__gmp_xsize = $__gmp_xsize | 0;
  $__gmp_yp = $__gmp_yp | 0;
  $__gmp_ysize = $__gmp_ysize | 0;
  var $1 = 0, $3 = 0, $4 = 0, $__gmp_i_0 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $__gmp_i_1 = 0, $13 = 0, $14 = 0, $or_cond = 0, $__gmp_j_021 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $exitcond = 0, $__gmp_c_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($__gmp_ysize | 0) == 0;
    if ($1) {
      $__gmp_i_1 = 0;
      label = 5;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = ___gmpn_sub_n($__gmp_wp, $__gmp_xp, $__gmp_yp, $__gmp_ysize) | 0;
    $4 = ($3 | 0) == 0;
    if ($4) {
      $__gmp_i_1 = $__gmp_ysize;
      label = 5;
      break;
    } else {
      $__gmp_i_0 = $__gmp_ysize;
      label = 3;
      break;
    }
   case 3:
    $5 = ($__gmp_i_0 | 0) < ($__gmp_xsize | 0);
    if ($5) {
      label = 4;
      break;
    } else {
      $__gmp_c_0 = 1;
      label = 7;
      break;
    }
   case 4:
    $7 = $__gmp_xp + ($__gmp_i_0 << 2) | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $8 - 1 | 0;
    $10 = $__gmp_i_0 + 1 | 0;
    $11 = $__gmp_wp + ($__gmp_i_0 << 2) | 0;
    HEAP32[$11 >> 2] = $9;
    $12 = ($8 | 0) == 0;
    if ($12) {
      $__gmp_i_0 = $10;
      label = 3;
      break;
    } else {
      $__gmp_i_1 = $10;
      label = 5;
      break;
    }
   case 5:
    $13 = ($__gmp_wp | 0) != ($__gmp_xp | 0);
    $14 = ($__gmp_i_1 | 0) < ($__gmp_xsize | 0);
    $or_cond = $13 & $14;
    if ($or_cond) {
      $__gmp_j_021 = $__gmp_i_1;
      label = 6;
      break;
    } else {
      $__gmp_c_0 = 0;
      label = 7;
      break;
    }
   case 6:
    $15 = $__gmp_xp + ($__gmp_j_021 << 2) | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $__gmp_wp + ($__gmp_j_021 << 2) | 0;
    HEAP32[$17 >> 2] = $16;
    $18 = $__gmp_j_021 + 1 | 0;
    $exitcond = ($18 | 0) == ($__gmp_xsize | 0);
    if ($exitcond) {
      $__gmp_c_0 = 0;
      label = 7;
      break;
    } else {
      $__gmp_j_021 = $18;
      label = 6;
      break;
    }
   case 7:
    return $__gmp_c_0 | 0;
  }
  return 0;
}
function ___gmpn_mul_1($rp, $up, $n, $vl) {
  $rp = $rp | 0;
  $up = $up | 0;
  $n = $n | 0;
  $vl = $vl | 0;
  var $1 = 0, $2 = 0, $cl_0 = 0, $_022 = 0, $_021 = 0, $_0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $uadd$0 = 0, $uadd$1 = 0, $14 = 0, $15 = 0, $16 = 0, $__x3_0 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $uadd23$0 = 0, $uadd23$1 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $vl & 65535;
    $2 = $vl >>> 16;
    $_0 = $rp;
    $_021 = $up;
    $_022 = $n;
    $cl_0 = 0;
    label = 2;
    break;
   case 2:
    $4 = $_021 + 4 | 0;
    $5 = HEAP32[$_021 >> 2] | 0;
    $6 = $5 & 65535;
    $7 = $5 >>> 16;
    $8 = Math_imul($6, $1);
    $9 = Math_imul($6, $2);
    $10 = Math_imul($7, $1);
    $11 = Math_imul($7, $2);
    $12 = $8 >>> 16;
    $13 = $12 + $9 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($13 | 0, $10 | 0) | 0;
    $uadd$1 = tempRet0;
    $14 = $uadd$0;
    $15 = $uadd$1;
    $16 = $11 + 65536 | 0;
    $__x3_0 = $15 ? $16 : $11;
    $17 = $14 >>> 16;
    $18 = $__x3_0 + $17 | 0;
    $19 = $14 << 16;
    $20 = $8 & 65535;
    $21 = $19 | $20;
    $uadd23$0 = _llvm_uadd_with_overflow_i32($21 | 0, $cl_0 | 0) | 0;
    $uadd23$1 = tempRet0;
    $22 = $uadd23$0;
    $23 = $uadd23$1;
    $24 = $23 & 1;
    $25 = $18 + $24 | 0;
    $26 = $_0 + 4 | 0;
    HEAP32[$_0 >> 2] = $22;
    $27 = $_022 - 1 | 0;
    $28 = ($27 | 0) == 0;
    if ($28) {
      label = 3;
      break;
    } else {
      $_0 = $26;
      $_021 = $4;
      $_022 = $27;
      $cl_0 = $25;
      label = 2;
      break;
    }
   case 3:
    return $25 | 0;
  }
  return 0;
}
function ___gmpn_addmul_1($rp, $up, $n, $vl) {
  $rp = $rp | 0;
  $up = $up | 0;
  $n = $n | 0;
  $vl = $vl | 0;
  var $1 = 0, $2 = 0, $cl_0 = 0, $_027 = 0, $_026 = 0, $_0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $uadd$0 = 0, $uadd$1 = 0, $14 = 0, $15 = 0, $16 = 0, $__x3_0 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $uadd28$0 = 0, $uadd28$1 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $uadd29$0 = 0, $uadd29$1 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $vl & 65535;
    $2 = $vl >>> 16;
    $_0 = $rp;
    $_026 = $up;
    $_027 = $n;
    $cl_0 = 0;
    label = 2;
    break;
   case 2:
    $4 = $_026 + 4 | 0;
    $5 = HEAP32[$_026 >> 2] | 0;
    $6 = $5 & 65535;
    $7 = $5 >>> 16;
    $8 = Math_imul($6, $1);
    $9 = Math_imul($6, $2);
    $10 = Math_imul($7, $1);
    $11 = Math_imul($7, $2);
    $12 = $8 >>> 16;
    $13 = $12 + $9 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($13 | 0, $10 | 0) | 0;
    $uadd$1 = tempRet0;
    $14 = $uadd$0;
    $15 = $uadd$1;
    $16 = $11 + 65536 | 0;
    $__x3_0 = $15 ? $16 : $11;
    $17 = $14 >>> 16;
    $18 = $__x3_0 + $17 | 0;
    $19 = $14 << 16;
    $20 = $8 & 65535;
    $21 = $19 | $20;
    $uadd28$0 = _llvm_uadd_with_overflow_i32($21 | 0, $cl_0 | 0) | 0;
    $uadd28$1 = tempRet0;
    $22 = $uadd28$0;
    $23 = $uadd28$1;
    $24 = $23 & 1;
    $25 = $18 + $24 | 0;
    $26 = HEAP32[$_0 >> 2] | 0;
    $uadd29$0 = _llvm_uadd_with_overflow_i32($26 | 0, $22 | 0) | 0;
    $uadd29$1 = tempRet0;
    $27 = $uadd29$0;
    $28 = $uadd29$1;
    $29 = $28 & 1;
    $30 = $25 + $29 | 0;
    $31 = $_0 + 4 | 0;
    HEAP32[$_0 >> 2] = $27;
    $32 = $_027 - 1 | 0;
    $33 = ($32 | 0) == 0;
    if ($33) {
      label = 3;
      break;
    } else {
      $_0 = $31;
      $_026 = $4;
      $_027 = $32;
      $cl_0 = $30;
      label = 2;
      break;
    }
   case 3:
    return $30 | 0;
  }
  return 0;
}
function ___gmpn_submul_1($rp, $up, $n, $vl) {
  $rp = $rp | 0;
  $up = $up | 0;
  $n = $n | 0;
  $vl = $vl | 0;
  var $1 = 0, $2 = 0, $cl_0 = 0, $_027 = 0, $_026 = 0, $_0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $uadd$0 = 0, $uadd$1 = 0, $14 = 0, $15 = 0, $16 = 0, $__x3_0 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $uadd28$0 = 0, $uadd28$1 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $vl & 65535;
    $2 = $vl >>> 16;
    $_0 = $rp;
    $_026 = $up;
    $_027 = $n;
    $cl_0 = 0;
    label = 2;
    break;
   case 2:
    $4 = $_026 + 4 | 0;
    $5 = HEAP32[$_026 >> 2] | 0;
    $6 = $5 & 65535;
    $7 = $5 >>> 16;
    $8 = Math_imul($6, $1);
    $9 = Math_imul($6, $2);
    $10 = Math_imul($7, $1);
    $11 = Math_imul($7, $2);
    $12 = $8 >>> 16;
    $13 = $12 + $9 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($13 | 0, $10 | 0) | 0;
    $uadd$1 = tempRet0;
    $14 = $uadd$0;
    $15 = $uadd$1;
    $16 = $11 + 65536 | 0;
    $__x3_0 = $15 ? $16 : $11;
    $17 = $14 >>> 16;
    $18 = $__x3_0 + $17 | 0;
    $19 = $14 << 16;
    $20 = $8 & 65535;
    $21 = $19 | $20;
    $uadd28$0 = _llvm_uadd_with_overflow_i32($21 | 0, $cl_0 | 0) | 0;
    $uadd28$1 = tempRet0;
    $22 = $uadd28$0;
    $23 = $uadd28$1;
    $24 = $23 & 1;
    $25 = $18 + $24 | 0;
    $26 = HEAP32[$_0 >> 2] | 0;
    $27 = $26 - $22 | 0;
    $28 = $27 >>> 0 > $26 >>> 0;
    $29 = $28 & 1;
    $30 = $25 + $29 | 0;
    $31 = $_0 + 4 | 0;
    HEAP32[$_0 >> 2] = $27;
    $32 = $_027 - 1 | 0;
    $33 = ($32 | 0) == 0;
    if ($33) {
      label = 3;
      break;
    } else {
      $_0 = $31;
      $_026 = $4;
      $_027 = $32;
      $cl_0 = $30;
      label = 2;
      break;
    }
   case 3:
    return $30 | 0;
  }
  return 0;
}
function ___gmpn_divexact_1($dst, $src, $size, $divisor) {
  $dst = $dst | 0;
  $src = $src | 0;
  $size = $size | 0;
  $divisor = $divisor | 0;
  var $1 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $__ctz_c_0 = 0, $__ctz_x_0 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $__ctz_x_1 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $shift_0 = 0, $32 = 0, $shift_1 = 0, $_0 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $s_0 = 0, $c_0 = 0, $i_0 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $uadd100$0 = 0, $uadd100$1 = 0, $74 = 0, $75 = 0, $76 = 0, $__x3_0 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $smax = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $89 = 0, $l_0 = 0, $c_1 = 0, $i_1 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $uadd$0 = 0, $uadd$1 = 0, $99 = 0, $100 = 0, $101 = 0, $__x34_0 = 0, $102 = 0, $103 = 0, $104 = 0, $_neg101 = 0, $_neg102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP32[$src >> 2] | 0;
    $2 = ($size | 0) == 1;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $4 = ($1 >>> 0) / ($divisor >>> 0) >>> 0;
    HEAP32[$dst >> 2] = $4;
    label = 16;
    break;
   case 3:
    $6 = $divisor & 1;
    $7 = ($6 | 0) == 0;
    if ($7) {
      label = 4;
      break;
    } else {
      $_0 = $divisor;
      $shift_1 = 0;
      label = 10;
      break;
    }
   case 4:
    $9 = $divisor & 255;
    $10 = ($9 | 0) == 0;
    if ($10) {
      $__ctz_x_0 = $divisor;
      $__ctz_c_0 = 6;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $12 = -$divisor | 0;
    $13 = $divisor & $12;
    $14 = $13 + 9696 | 0;
    $15 = HEAP8[$14] | 0;
    $16 = $15 & 255;
    $17 = $16 - 2 | 0;
    $shift_0 = $17;
    label = 9;
    break;
   case 6:
    $18 = ($__ctz_c_0 | 0) < 30;
    if ($18) {
      label = 7;
      break;
    } else {
      $__ctz_x_1 = $__ctz_x_0;
      label = 8;
      break;
    }
   case 7:
    $20 = $__ctz_x_0 >>> 8;
    $21 = $20 & 255;
    $22 = ($21 | 0) == 0;
    $23 = $__ctz_c_0 + 8 | 0;
    if ($22) {
      $__ctz_x_0 = $20;
      $__ctz_c_0 = $23;
      label = 6;
      break;
    } else {
      $__ctz_x_1 = $20;
      label = 8;
      break;
    }
   case 8:
    $25 = -$__ctz_x_1 | 0;
    $26 = $__ctz_x_1 & $25;
    $27 = $26 + 9696 | 0;
    $28 = HEAP8[$27] | 0;
    $29 = $28 & 255;
    $30 = $29 + $__ctz_c_0 | 0;
    $shift_0 = $30;
    label = 9;
    break;
   case 9:
    $32 = $divisor >>> ($shift_0 >>> 0);
    $_0 = $32;
    $shift_1 = $shift_0;
    label = 10;
    break;
   case 10:
    $34 = $_0 >>> 1;
    $35 = $34 & 127;
    $36 = $35 + 15720 | 0;
    $37 = HEAP8[$36] | 0;
    $38 = $37 & 255;
    $39 = $38 << 1;
    $40 = Math_imul($38, $_0);
    $41 = Math_imul($40, $38);
    $42 = $39 - $41 | 0;
    $43 = $42 << 1;
    $44 = Math_imul($42, $_0);
    $45 = Math_imul($44, $42);
    $46 = $43 - $45 | 0;
    $47 = ($shift_1 | 0) == 0;
    if ($47) {
      label = 14;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $49 = $size - 1 | 0;
    $50 = 32 - $shift_1 | 0;
    $51 = $_0 & 65535;
    $52 = $_0 >>> 16;
    $53 = ($49 | 0) > 1;
    $i_0 = 0;
    $c_0 = 0;
    $s_0 = $1;
    label = 12;
    break;
   case 12:
    $55 = $i_0 + 1 | 0;
    $56 = $src + ($55 << 2) | 0;
    $57 = HEAP32[$56 >> 2] | 0;
    $58 = $s_0 >>> ($shift_1 >>> 0);
    $59 = $57 << $50;
    $60 = $59 | $58;
    $61 = $60 - $c_0 | 0;
    $62 = $61 >>> 0 > $60 >>> 0;
    $63 = $62 & 1;
    $64 = Math_imul($61, $46);
    $65 = $dst + ($i_0 << 2) | 0;
    HEAP32[$65 >> 2] = $64;
    $66 = $64 & 65535;
    $67 = $64 >>> 16;
    $68 = Math_imul($66, $51);
    $69 = Math_imul($66, $52);
    $70 = Math_imul($67, $51);
    $71 = Math_imul($67, $52);
    $72 = $68 >>> 16;
    $73 = $72 + $69 | 0;
    $uadd100$0 = _llvm_uadd_with_overflow_i32($73 | 0, $70 | 0) | 0;
    $uadd100$1 = tempRet0;
    $74 = $uadd100$0;
    $75 = $uadd100$1;
    $76 = $71 + 65536 | 0;
    $__x3_0 = $75 ? $76 : $71;
    $77 = $74 >>> 16;
    $78 = $63 + $77 | 0;
    $79 = $78 + $__x3_0 | 0;
    $80 = ($55 | 0) < ($49 | 0);
    if ($80) {
      $i_0 = $55;
      $c_0 = $79;
      $s_0 = $57;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $smax = $53 ? $49 : 1;
    $82 = $57 >>> ($shift_1 >>> 0);
    $83 = $82 - $79 | 0;
    $84 = Math_imul($83, $46);
    $85 = $dst + ($smax << 2) | 0;
    HEAP32[$85 >> 2] = $84;
    label = 16;
    break;
   case 14:
    $87 = Math_imul($46, $1);
    HEAP32[$dst >> 2] = $87;
    $88 = $_0 & 65535;
    $89 = $_0 >>> 16;
    $i_1 = 1;
    $c_1 = 0;
    $l_0 = $87;
    label = 15;
    break;
   case 15:
    $91 = $l_0 & 65535;
    $92 = $l_0 >>> 16;
    $93 = Math_imul($91, $88);
    $94 = Math_imul($91, $89);
    $95 = Math_imul($92, $88);
    $96 = Math_imul($92, $89);
    $97 = $93 >>> 16;
    $98 = $97 + $94 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($98 | 0, $95 | 0) | 0;
    $uadd$1 = tempRet0;
    $99 = $uadd$0;
    $100 = $uadd$1;
    $101 = $96 + 65536 | 0;
    $__x34_0 = $100 ? $101 : $96;
    $102 = $99 >>> 16;
    $103 = $src + ($i_1 << 2) | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    $_neg101 = $104 - $c_1 | 0;
    $_neg102 = $_neg101 - $102 | 0;
    $105 = $_neg102 - $__x34_0 | 0;
    $106 = $105 >>> 0 > $104 >>> 0;
    $107 = $106 & 1;
    $108 = Math_imul($105, $46);
    $109 = $dst + ($i_1 << 2) | 0;
    HEAP32[$109 >> 2] = $108;
    $110 = $i_1 + 1 | 0;
    $111 = ($110 | 0) < ($size | 0);
    if ($111) {
      $i_1 = $110;
      $c_1 = $107;
      $l_0 = $108;
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    return;
  }
}
function ___gmpn_divrem_1($qp, $qxn, $up, $un, $d) {
  $qp = $qp | 0;
  $qxn = $qxn | 0;
  $up = $up | 0;
  $un = $un | 0;
  $d = $d | 0;
  var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $_sum322 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $r_0 = 0, $_0309 = 0, $_0308 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $uadd321$0 = 0, $uadd321$1 = 0, $32 = 0, $33 = 0, $_not = 0, $34 = 0, $or_cond = 0, $36 = 0, $37 = 0, $__r112_0 = 0, $__q110_0 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $uadd320$0 = 0, $uadd320$1 = 0, $48 = 0, $_not323 = 0, $49 = 0, $50 = 0, $or_cond325 = 0, $__v = 0, $_ = 0, $__q011_0 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $scevgep = 0, $_1_lcssa = 0, $r_1_lcssa = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $i_0338_in = 0, $_1337 = 0, $r_1336 = 0, $i_0338 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $uadd318$0 = 0, $uadd318$1 = 0, $73 = 0, $74 = 0, $75 = 0, $__x3_0 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $uadd319$0 = 0, $uadd319$1 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $98 = 0, $_r_0 = 0, $_qh_0 = 0, $100 = 0, $101 = 0, $_2334 = 0, $i_1_in333 = 0, $r_2332 = 0, $i_1 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $uadd317$0 = 0, $uadd317$1 = 0, $111 = 0, $112 = 0, $113 = 0, $__x322_0 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $_sum = 0, $139 = 0, $r_3 = 0, $_1310 = 0, $_3 = 0, $141 = 0, $143 = 0, $144 = 0, $146 = 0, $147 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $uadd316$0 = 0, $uadd316$1 = 0, $170 = 0, $171 = 0, $_not326 = 0, $172 = 0, $or_cond327 = 0, $174 = 0, $175 = 0, $__r135_0 = 0, $__q133_0 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $uadd315$0 = 0, $uadd315$1 = 0, $186 = 0, $_not328 = 0, $187 = 0, $188 = 0, $or_cond330 = 0, $_331_v = 0, $_331 = 0, $__q034_0 = 0, $190 = 0, $191 = 0, $192 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $smax = 0, $206 = 0, $207 = 0, $_4351 = 0, $i_2350 = 0, $n1_0349 = 0, $r_4348 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $uadd313$0 = 0, $uadd313$1 = 0, $222 = 0, $223 = 0, $224 = 0, $__x345_0 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $uadd314$0 = 0, $uadd314$1 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $246 = 0, $247 = 0, $_r40_0 = 0, $_qh38_0 = 0, $249 = 0, $250 = 0, $251 = 0, $scevgep362 = 0, $_4_lcssa = 0, $n1_0_lcssa = 0, $r_4_lcssa = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $uadd311$0 = 0, $uadd311$1 = 0, $263 = 0, $264 = 0, $265 = 0, $__x360_0 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $uadd312$0 = 0, $uadd312$1 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $288 = 0, $289 = 0, $_qh53_0 = 0, $_r55_0 = 0, $291 = 0, $r_6_ph = 0, $_6_ph = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $_6345 = 0, $i_3_in344 = 0, $r_6343 = 0, $i_3 = 0, $297 = 0, $298 = 0, $299 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $uadd$0 = 0, $uadd$1 = 0, $305 = 0, $306 = 0, $307 = 0, $__x375_0 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $r_6_lcssa = 0, $324 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $un + $qxn | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      $_0 = 0;
      label = 45;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $4 = $1 - 1 | 0;
    $5 = $qp + ($4 << 2) | 0;
    $6 = ($d | 0) < 0;
    $7 = ($un | 0) != 0;
    if ($6) {
      label = 3;
      break;
    } else {
      label = 19;
      break;
    }
   case 3:
    if ($7) {
      label = 4;
      break;
    } else {
      $_0308 = $5;
      $_0309 = 0;
      $r_0 = 0;
      label = 5;
      break;
    }
   case 4:
    $10 = $un - 1 | 0;
    $11 = $up + ($10 << 2) | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 >>> 0 >= $d >>> 0;
    $14 = $13 & 1;
    $_sum322 = $1 - 2 | 0;
    $15 = $qp + ($_sum322 << 2) | 0;
    HEAP32[$5 >> 2] = $14;
    $16 = -$14 | 0;
    $17 = $16 & $d;
    $18 = $12 - $17 | 0;
    $_0308 = $15;
    $_0309 = $10;
    $r_0 = $18;
    label = 5;
    break;
   case 5:
    $20 = $d >>> 16;
    $21 = $d & 65535;
    $22 = $d ^ -1;
    $23 = ($22 >>> 0) / ($20 >>> 0) >>> 0;
    $24 = Math_imul($23, $20);
    $25 = $22 - $24 | 0;
    $26 = Math_imul($23, $21);
    $27 = $25 << 16;
    $28 = $27 | 65535;
    $29 = $28 >>> 0 < $26 >>> 0;
    if ($29) {
      label = 6;
      break;
    } else {
      $__q110_0 = $23;
      $__r112_0 = $28;
      label = 8;
      break;
    }
   case 6:
    $31 = $23 - 1 | 0;
    $uadd321$0 = _llvm_uadd_with_overflow_i32($28 | 0, $d | 0) | 0;
    $uadd321$1 = tempRet0;
    $32 = $uadd321$0;
    $33 = $uadd321$1;
    $_not = $33 ^ 1;
    $34 = $32 >>> 0 < $26 >>> 0;
    $or_cond = $34 & $_not;
    if ($or_cond) {
      label = 7;
      break;
    } else {
      $__q110_0 = $31;
      $__r112_0 = $32;
      label = 8;
      break;
    }
   case 7:
    $36 = $23 - 2 | 0;
    $37 = $32 + $d | 0;
    $__q110_0 = $36;
    $__r112_0 = $37;
    label = 8;
    break;
   case 8:
    $39 = $__r112_0 - $26 | 0;
    $40 = ($39 >>> 0) / ($20 >>> 0) >>> 0;
    $41 = Math_imul($40, $20);
    $42 = $39 - $41 | 0;
    $43 = Math_imul($40, $21);
    $44 = $42 << 16;
    $45 = $44 | 65535;
    $46 = $45 >>> 0 < $43 >>> 0;
    if ($46) {
      label = 9;
      break;
    } else {
      $__q011_0 = $40;
      label = 10;
      break;
    }
   case 9:
    $uadd320$0 = _llvm_uadd_with_overflow_i32($45 | 0, $d | 0) | 0;
    $uadd320$1 = tempRet0;
    $48 = $uadd320$1;
    $_not323 = $48 ^ 1;
    $49 = $uadd320$0;
    $50 = $49 >>> 0 < $43 >>> 0;
    $or_cond325 = $50 & $_not323;
    $__v = $or_cond325 ? -2 : -1;
    $_ = $__v + $40 | 0;
    $__q011_0 = $_;
    label = 10;
    break;
   case 10:
    $52 = $__q110_0 << 16;
    $53 = $__q011_0 | $52;
    $54 = ($_0309 | 0) > 0;
    if ($54) {
      label = 11;
      break;
    } else {
      $r_1_lcssa = $r_0;
      $_1_lcssa = $_0308;
      label = 13;
      break;
    }
   case 11:
    $55 = $__q011_0 & 65535;
    $56 = $53 >>> 16;
    $57 = -$_0309 | 0;
    $r_1336 = $r_0;
    $_1337 = $_0308;
    $i_0338_in = $_0309;
    label = 15;
    break;
   case 12:
    $scevgep = $_0308 + ($57 << 2) | 0;
    $r_1_lcssa = $_r_0;
    $_1_lcssa = $scevgep;
    label = 13;
    break;
   case 13:
    $58 = ($qxn | 0) > 0;
    if ($58) {
      label = 14;
      break;
    } else {
      $_0 = $r_1_lcssa;
      label = 45;
      break;
    }
   case 14:
    $59 = $__q011_0 & 65535;
    $60 = $53 >>> 16;
    $61 = -$d | 0;
    $r_2332 = $r_1_lcssa;
    $i_1_in333 = $qxn;
    $_2334 = $_1_lcssa;
    label = 18;
    break;
   case 15:
    $i_0338 = $i_0338_in - 1 | 0;
    $63 = $up + ($i_0338 << 2) | 0;
    $64 = HEAP32[$63 >> 2] | 0;
    $65 = $r_1336 & 65535;
    $66 = $r_1336 >>> 16;
    $67 = Math_imul($65, $55);
    $68 = Math_imul($65, $56);
    $69 = Math_imul($66, $55);
    $70 = Math_imul($66, $56);
    $71 = $67 >>> 16;
    $72 = $71 + $68 | 0;
    $uadd318$0 = _llvm_uadd_with_overflow_i32($72 | 0, $69 | 0) | 0;
    $uadd318$1 = tempRet0;
    $73 = $uadd318$0;
    $74 = $uadd318$1;
    $75 = $70 + 65536 | 0;
    $__x3_0 = $74 ? $75 : $70;
    $76 = $73 >>> 16;
    $77 = $73 << 16;
    $78 = $67 & 65535;
    $79 = $77 | $78;
    $uadd319$0 = _llvm_uadd_with_overflow_i32($79 | 0, $64 | 0) | 0;
    $uadd319$1 = tempRet0;
    $80 = $uadd319$0;
    $81 = $r_1336 + 1 | 0;
    $82 = $uadd319$1;
    $83 = $82 & 1;
    $84 = $81 + $76 | 0;
    $85 = $84 + $__x3_0 | 0;
    $86 = $85 + $83 | 0;
    $87 = Math_imul($86, $d);
    $88 = $64 - $87 | 0;
    $89 = $88 >>> 0 > $80 >>> 0;
    $90 = $89 & 1;
    $91 = -$90 | 0;
    $92 = $86 - $90 | 0;
    $93 = $91 & $d;
    $94 = $93 + $88 | 0;
    $95 = $94 >>> 0 < $d >>> 0;
    if ($95) {
      $_qh_0 = $92;
      $_r_0 = $94;
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $97 = $94 - $d | 0;
    $98 = $92 + 1 | 0;
    $_qh_0 = $98;
    $_r_0 = $97;
    label = 17;
    break;
   case 17:
    HEAP32[$_1337 >> 2] = $_qh_0;
    $100 = $_1337 - 4 | 0;
    $101 = ($i_0338 | 0) > 0;
    if ($101) {
      $r_1336 = $_r_0;
      $_1337 = $100;
      $i_0338_in = $i_0338;
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 18:
    $i_1 = $i_1_in333 - 1 | 0;
    $103 = $r_2332 & 65535;
    $104 = $r_2332 >>> 16;
    $105 = Math_imul($103, $59);
    $106 = Math_imul($103, $60);
    $107 = Math_imul($104, $59);
    $108 = Math_imul($104, $60);
    $109 = $105 >>> 16;
    $110 = $109 + $106 | 0;
    $uadd317$0 = _llvm_uadd_with_overflow_i32($110 | 0, $107 | 0) | 0;
    $uadd317$1 = tempRet0;
    $111 = $uadd317$0;
    $112 = $uadd317$1;
    $113 = $108 + 65536 | 0;
    $__x322_0 = $112 ? $113 : $108;
    $114 = $111 >>> 16;
    $115 = $111 << 16;
    $116 = $105 & 65535;
    $117 = $115 | $116;
    $118 = $r_2332 + 1 | 0;
    $119 = $118 + $114 | 0;
    $120 = $119 + $__x322_0 | 0;
    $121 = Math_imul($120, $61);
    $122 = $121 >>> 0 > $117 >>> 0;
    $123 = $122 & 1;
    $124 = -$123 | 0;
    $125 = $120 - $123 | 0;
    $126 = $124 & $d;
    $127 = $126 + $121 | 0;
    HEAP32[$_2334 >> 2] = $125;
    $128 = $_2334 - 4 | 0;
    $129 = ($i_1 | 0) > 0;
    if ($129) {
      $r_2332 = $127;
      $i_1_in333 = $i_1;
      $_2334 = $128;
      label = 18;
      break;
    } else {
      $_0 = $127;
      label = 45;
      break;
    }
   case 19:
    if ($7) {
      label = 20;
      break;
    } else {
      $_3 = $5;
      $_1310 = 0;
      $r_3 = 0;
      label = 23;
      break;
    }
   case 20:
    $132 = $un - 1 | 0;
    $133 = $up + ($132 << 2) | 0;
    $134 = HEAP32[$133 >> 2] | 0;
    $135 = $134 >>> 0 < $d >>> 0;
    if ($135) {
      label = 21;
      break;
    } else {
      $_3 = $5;
      $_1310 = $un;
      $r_3 = 0;
      label = 23;
      break;
    }
   case 21:
    HEAP32[$5 >> 2] = 0;
    $137 = ($1 | 0) == 1;
    if ($137) {
      $_0 = $134;
      label = 45;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $_sum = $1 - 2 | 0;
    $139 = $qp + ($_sum << 2) | 0;
    $_3 = $139;
    $_1310 = $132;
    $r_3 = $134;
    label = 23;
    break;
   case 23:
    $141 = $d >>> 0 < 65536;
    if ($141) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    $143 = $d >>> 0 < 256;
    $144 = $143 ? 1 : 9;
    $149 = $144;
    label = 26;
    break;
   case 25:
    $146 = $d >>> 0 < 16777216;
    $147 = $146 ? 17 : 25;
    $149 = $147;
    label = 26;
    break;
   case 26:
    $150 = 33 - $149 | 0;
    $151 = $d >>> ($149 >>> 0);
    $152 = $151 + 9696 | 0;
    $153 = HEAP8[$152] | 0;
    $154 = $153 & 255;
    $155 = $150 - $154 | 0;
    $156 = $d << $155;
    $157 = $r_3 << $155;
    $158 = $156 >>> 16;
    $159 = $156 & 65535;
    $160 = $156 ^ -1;
    $161 = ($160 >>> 0) / ($158 >>> 0) >>> 0;
    $162 = Math_imul($158, $161);
    $163 = $160 - $162 | 0;
    $164 = Math_imul($159, $161);
    $165 = $163 << 16;
    $166 = $165 | 65535;
    $167 = $166 >>> 0 < $164 >>> 0;
    if ($167) {
      label = 27;
      break;
    } else {
      $__q133_0 = $161;
      $__r135_0 = $166;
      label = 29;
      break;
    }
   case 27:
    $169 = $161 - 1 | 0;
    $uadd316$0 = _llvm_uadd_with_overflow_i32($166 | 0, $156 | 0) | 0;
    $uadd316$1 = tempRet0;
    $170 = $uadd316$0;
    $171 = $uadd316$1;
    $_not326 = $171 ^ 1;
    $172 = $170 >>> 0 < $164 >>> 0;
    $or_cond327 = $172 & $_not326;
    if ($or_cond327) {
      label = 28;
      break;
    } else {
      $__q133_0 = $169;
      $__r135_0 = $170;
      label = 29;
      break;
    }
   case 28:
    $174 = $161 - 2 | 0;
    $175 = $170 + $156 | 0;
    $__q133_0 = $174;
    $__r135_0 = $175;
    label = 29;
    break;
   case 29:
    $177 = $__r135_0 - $164 | 0;
    $178 = ($177 >>> 0) / ($158 >>> 0) >>> 0;
    $179 = Math_imul($178, $158);
    $180 = $177 - $179 | 0;
    $181 = Math_imul($178, $159);
    $182 = $180 << 16;
    $183 = $182 | 65535;
    $184 = $183 >>> 0 < $181 >>> 0;
    if ($184) {
      label = 30;
      break;
    } else {
      $__q034_0 = $178;
      label = 31;
      break;
    }
   case 30:
    $uadd315$0 = _llvm_uadd_with_overflow_i32($183 | 0, $156 | 0) | 0;
    $uadd315$1 = tempRet0;
    $186 = $uadd315$1;
    $_not328 = $186 ^ 1;
    $187 = $uadd315$0;
    $188 = $187 >>> 0 < $181 >>> 0;
    $or_cond330 = $188 & $_not328;
    $_331_v = $or_cond330 ? -2 : -1;
    $_331 = $_331_v + $178 | 0;
    $__q034_0 = $_331;
    label = 31;
    break;
   case 31:
    $190 = $__q133_0 << 16;
    $191 = $__q034_0 | $190;
    $192 = ($_1310 | 0) == 0;
    if ($192) {
      $_6_ph = $_3;
      $r_6_ph = $157;
      label = 41;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $194 = $_1310 - 1 | 0;
    $195 = $up + ($194 << 2) | 0;
    $196 = HEAP32[$195 >> 2] | 0;
    $197 = 32 - $155 | 0;
    $198 = $196 >>> ($197 >>> 0);
    $199 = $198 | $157;
    $200 = $_1310 - 2 | 0;
    $201 = ($200 | 0) > -1;
    if ($201) {
      label = 33;
      break;
    } else {
      $r_4_lcssa = $199;
      $n1_0_lcssa = $196;
      $_4_lcssa = $_3;
      label = 38;
      break;
    }
   case 33:
    $202 = $__q034_0 & 65535;
    $203 = $191 >>> 16;
    $204 = 1 - $_1310 | 0;
    $205 = ($204 | 0) > -1;
    $smax = $205 ? $204 : -1;
    $206 = $_1310 + $smax | 0;
    $207 = -$206 | 0;
    $r_4348 = $199;
    $n1_0349 = $196;
    $i_2350 = $200;
    $_4351 = $_3;
    label = 34;
    break;
   case 34:
    $209 = $up + ($i_2350 << 2) | 0;
    $210 = HEAP32[$209 >> 2] | 0;
    $211 = $n1_0349 << $155;
    $212 = $210 >>> ($197 >>> 0);
    $213 = $212 | $211;
    $214 = $r_4348 & 65535;
    $215 = $r_4348 >>> 16;
    $216 = Math_imul($214, $202);
    $217 = Math_imul($214, $203);
    $218 = Math_imul($215, $202);
    $219 = Math_imul($215, $203);
    $220 = $216 >>> 16;
    $221 = $220 + $217 | 0;
    $uadd313$0 = _llvm_uadd_with_overflow_i32($221 | 0, $218 | 0) | 0;
    $uadd313$1 = tempRet0;
    $222 = $uadd313$0;
    $223 = $uadd313$1;
    $224 = $219 + 65536 | 0;
    $__x345_0 = $223 ? $224 : $219;
    $225 = $222 >>> 16;
    $226 = $222 << 16;
    $227 = $216 & 65535;
    $228 = $226 | $227;
    $uadd314$0 = _llvm_uadd_with_overflow_i32($228 | 0, $213 | 0) | 0;
    $uadd314$1 = tempRet0;
    $229 = $uadd314$0;
    $230 = $r_4348 + 1 | 0;
    $231 = $uadd314$1;
    $232 = $231 & 1;
    $233 = $230 + $225 | 0;
    $234 = $233 + $__x345_0 | 0;
    $235 = $234 + $232 | 0;
    $236 = Math_imul($235, $156);
    $237 = $213 - $236 | 0;
    $238 = $237 >>> 0 > $229 >>> 0;
    $239 = $238 & 1;
    $240 = -$239 | 0;
    $241 = $235 - $239 | 0;
    $242 = $156 & $240;
    $243 = $242 + $237 | 0;
    $244 = $243 >>> 0 < $156 >>> 0;
    if ($244) {
      $_qh38_0 = $241;
      $_r40_0 = $243;
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $246 = $243 - $156 | 0;
    $247 = $241 + 1 | 0;
    $_qh38_0 = $247;
    $_r40_0 = $246;
    label = 36;
    break;
   case 36:
    HEAP32[$_4351 >> 2] = $_qh38_0;
    $249 = $_4351 - 4 | 0;
    $250 = $i_2350 - 1 | 0;
    $251 = ($i_2350 | 0) > 0;
    if ($251) {
      $r_4348 = $_r40_0;
      $n1_0349 = $210;
      $i_2350 = $250;
      $_4351 = $249;
      label = 34;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    $scevgep362 = $_3 + ($207 << 2) | 0;
    $r_4_lcssa = $_r40_0;
    $n1_0_lcssa = $210;
    $_4_lcssa = $scevgep362;
    label = 38;
    break;
   case 38:
    $253 = $r_4_lcssa & 65535;
    $254 = $r_4_lcssa >>> 16;
    $255 = $__q034_0 & 65535;
    $256 = $191 >>> 16;
    $257 = Math_imul($253, $255);
    $258 = Math_imul($253, $256);
    $259 = Math_imul($254, $255);
    $260 = Math_imul($254, $256);
    $261 = $257 >>> 16;
    $262 = $261 + $258 | 0;
    $uadd311$0 = _llvm_uadd_with_overflow_i32($262 | 0, $259 | 0) | 0;
    $uadd311$1 = tempRet0;
    $263 = $uadd311$0;
    $264 = $uadd311$1;
    $265 = $260 + 65536 | 0;
    $__x360_0 = $264 ? $265 : $260;
    $266 = $263 >>> 16;
    $267 = $263 << 16;
    $268 = $257 & 65535;
    $269 = $267 | $268;
    $270 = $n1_0_lcssa << $155;
    $uadd312$0 = _llvm_uadd_with_overflow_i32($269 | 0, $270 | 0) | 0;
    $uadd312$1 = tempRet0;
    $271 = $uadd312$0;
    $272 = $r_4_lcssa + 1 | 0;
    $273 = $uadd312$1;
    $274 = $273 & 1;
    $275 = $272 + $266 | 0;
    $276 = $275 + $__x360_0 | 0;
    $277 = $276 + $274 | 0;
    $278 = Math_imul($277, $156);
    $279 = $270 - $278 | 0;
    $280 = $279 >>> 0 > $271 >>> 0;
    $281 = $280 & 1;
    $282 = -$281 | 0;
    $283 = $277 - $281 | 0;
    $284 = $156 & $282;
    $285 = $284 + $279 | 0;
    $286 = $285 >>> 0 < $156 >>> 0;
    if ($286) {
      $_r55_0 = $285;
      $_qh53_0 = $283;
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    $288 = $285 - $156 | 0;
    $289 = $283 + 1 | 0;
    $_r55_0 = $288;
    $_qh53_0 = $289;
    label = 40;
    break;
   case 40:
    HEAP32[$_4_lcssa >> 2] = $_qh53_0;
    $291 = $_4_lcssa - 4 | 0;
    $_6_ph = $291;
    $r_6_ph = $_r55_0;
    label = 41;
    break;
   case 41:
    $292 = ($qxn | 0) > 0;
    if ($292) {
      label = 42;
      break;
    } else {
      $r_6_lcssa = $r_6_ph;
      label = 44;
      break;
    }
   case 42:
    $293 = $__q034_0 & 65535;
    $294 = $191 >>> 16;
    $295 = -$156 | 0;
    $r_6343 = $r_6_ph;
    $i_3_in344 = $qxn;
    $_6345 = $_6_ph;
    label = 43;
    break;
   case 43:
    $i_3 = $i_3_in344 - 1 | 0;
    $297 = $r_6343 & 65535;
    $298 = $r_6343 >>> 16;
    $299 = Math_imul($297, $293);
    $300 = Math_imul($297, $294);
    $301 = Math_imul($298, $293);
    $302 = Math_imul($298, $294);
    $303 = $299 >>> 16;
    $304 = $303 + $300 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($304 | 0, $301 | 0) | 0;
    $uadd$1 = tempRet0;
    $305 = $uadd$0;
    $306 = $uadd$1;
    $307 = $302 + 65536 | 0;
    $__x375_0 = $306 ? $307 : $302;
    $308 = $305 >>> 16;
    $309 = $305 << 16;
    $310 = $299 & 65535;
    $311 = $309 | $310;
    $312 = $r_6343 + 1 | 0;
    $313 = $312 + $308 | 0;
    $314 = $313 + $__x375_0 | 0;
    $315 = Math_imul($314, $295);
    $316 = $315 >>> 0 > $311 >>> 0;
    $317 = $316 & 1;
    $318 = -$317 | 0;
    $319 = $314 - $317 | 0;
    $320 = $156 & $318;
    $321 = $320 + $315 | 0;
    HEAP32[$_6345 >> 2] = $319;
    $322 = $_6345 - 4 | 0;
    $323 = ($i_3 | 0) > 0;
    if ($323) {
      $r_6343 = $321;
      $i_3_in344 = $i_3;
      $_6345 = $322;
      label = 43;
      break;
    } else {
      $r_6_lcssa = $321;
      label = 44;
      break;
    }
   case 44:
    $324 = $r_6_lcssa >>> ($155 >>> 0);
    $_0 = $324;
    label = 45;
    break;
   case 45:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_divrem_2($qp, $qxn, $np, $nn, $dp) {
  $qp = $qp | 0;
  $qxn = $qxn | 0;
  $np = $np | 0;
  $nn = $nn | 0;
  $dp = $dp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_sum = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $or_cond = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $r0_0 = 0, $r1_0 = 0, $most_significant_q_limb_0 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $uadd270$0 = 0, $uadd270$1 = 0, $31 = 0, $32 = 0, $_not = 0, $33 = 0, $or_cond271 = 0, $35 = 0, $36 = 0, $__r1_0 = 0, $__q1_0 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $uadd269$0 = 0, $uadd269$1 = 0, $47 = 0, $_not272 = 0, $48 = 0, $49 = 0, $or_cond274 = 0, $__v = 0, $_ = 0, $__q0_0 = 0, $51 = 0, $52 = 0, $53 = 0, $uadd$0 = 0, $uadd$1 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $_p_0 = 0, $_v_0 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $uadd257$0 = 0, $uadd257$1 = 0, $76 = 0, $77 = 0, $78 = 0, $__x3_0 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $uadd258$0 = 0, $uadd258$1 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $90 = 0, $91 = 0, $or_cond275 = 0, $92 = 0, $_278 = 0, $_v_1 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_op = 0, $100 = 0, $_0301 = 0, $i_0300 = 0, $r1_1299 = 0, $r0_1298 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $uadd264$0 = 0, $uadd264$1 = 0, $112 = 0, $113 = 0, $114 = 0, $__x37_0 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $uadd265$0 = 0, $uadd265$1 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $uadd266$0 = 0, $uadd266$1 = 0, $137 = 0, $138 = 0, $139 = 0, $__x320_0 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $_neg284 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $uadd267$0 = 0, $uadd267$1 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $or_cond276 = 0, $169 = 0, $170 = 0, $171 = 0, $sum307 = 0, $172 = 0, $q_0 = 0, $r0_2 = 0, $r1_2 = 0, $_sum268 = 0, $174 = 0, $175 = 0, $176 = 0, $scevgep = 0, $_0_lcssa = 0, $r1_1_lcssa = 0, $r0_1_lcssa = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $sum = 0, $i_1296_in = 0, $r1_3295 = 0, $r0_3294 = 0, $i_1296 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $uadd260$0 = 0, $uadd260$1 = 0, $193 = 0, $194 = 0, $195 = 0, $__x338_0 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $uadd261$0 = 0, $uadd261$1 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $uadd262$0 = 0, $uadd262$1 = 0, $215 = 0, $216 = 0, $217 = 0, $__x350_0 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $uadd263$0 = 0, $uadd263$1 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $244 = 0, $245 = 0, $or_cond277 = 0, $247 = 0, $248 = 0, $249 = 0, $sum306 = 0, $250 = 0, $q30_0 = 0, $r0_4 = 0, $r1_4 = 0, $252 = 0, $253 = 0, $r0_5 = 0, $r1_5 = 0, $254 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $nn - 2 | 0;
    $2 = $np + ($1 << 2) | 0;
    $3 = $dp + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = HEAP32[$dp >> 2] | 0;
    $_sum = $nn - 1 | 0;
    $6 = $np + ($_sum << 2) | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = HEAP32[$2 >> 2] | 0;
    $9 = $7 >>> 0 < $4 >>> 0;
    if ($9) {
      $most_significant_q_limb_0 = 0;
      $r1_0 = $7;
      $r0_0 = $8;
      label = 4;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $11 = $7 >>> 0 <= $4 >>> 0;
    $12 = $8 >>> 0 < $5 >>> 0;
    $or_cond = $11 & $12;
    if ($or_cond) {
      $most_significant_q_limb_0 = 0;
      $r1_0 = $7;
      $r0_0 = $8;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $14 = $8 - $5 | 0;
    $15 = $7 - $4 | 0;
    $16 = $12 & 1;
    $17 = $15 - $16 | 0;
    $most_significant_q_limb_0 = 1;
    $r1_0 = $17;
    $r0_0 = $14;
    label = 4;
    break;
   case 4:
    $19 = $4 >>> 16;
    $20 = $4 & 65535;
    $21 = $4 ^ -1;
    $22 = ($21 >>> 0) / ($19 >>> 0) >>> 0;
    $23 = Math_imul($22, $19);
    $24 = $21 - $23 | 0;
    $25 = Math_imul($22, $20);
    $26 = $24 << 16;
    $27 = $26 | 65535;
    $28 = $27 >>> 0 < $25 >>> 0;
    if ($28) {
      label = 5;
      break;
    } else {
      $__q1_0 = $22;
      $__r1_0 = $27;
      label = 7;
      break;
    }
   case 5:
    $30 = $22 - 1 | 0;
    $uadd270$0 = _llvm_uadd_with_overflow_i32($27 | 0, $4 | 0) | 0;
    $uadd270$1 = tempRet0;
    $31 = $uadd270$0;
    $32 = $uadd270$1;
    $_not = $32 ^ 1;
    $33 = $31 >>> 0 < $25 >>> 0;
    $or_cond271 = $33 & $_not;
    if ($or_cond271) {
      label = 6;
      break;
    } else {
      $__q1_0 = $30;
      $__r1_0 = $31;
      label = 7;
      break;
    }
   case 6:
    $35 = $22 - 2 | 0;
    $36 = $31 + $4 | 0;
    $__q1_0 = $35;
    $__r1_0 = $36;
    label = 7;
    break;
   case 7:
    $38 = $__r1_0 - $25 | 0;
    $39 = ($38 >>> 0) / ($19 >>> 0) >>> 0;
    $40 = Math_imul($39, $19);
    $41 = $38 - $40 | 0;
    $42 = Math_imul($39, $20);
    $43 = $41 << 16;
    $44 = $43 | 65535;
    $45 = $44 >>> 0 < $42 >>> 0;
    if ($45) {
      label = 8;
      break;
    } else {
      $__q0_0 = $39;
      label = 9;
      break;
    }
   case 8:
    $uadd269$0 = _llvm_uadd_with_overflow_i32($44 | 0, $4 | 0) | 0;
    $uadd269$1 = tempRet0;
    $47 = $uadd269$1;
    $_not272 = $47 ^ 1;
    $48 = $uadd269$0;
    $49 = $48 >>> 0 < $42 >>> 0;
    $or_cond274 = $49 & $_not272;
    $__v = $or_cond274 ? -2 : -1;
    $_ = $__v + $39 | 0;
    $__q0_0 = $_;
    label = 9;
    break;
   case 9:
    $51 = $__q1_0 << 16;
    $52 = $__q0_0 | $51;
    $53 = Math_imul($52, $4);
    $uadd$0 = _llvm_uadd_with_overflow_i32($53 | 0, $5 | 0) | 0;
    $uadd$1 = tempRet0;
    $54 = $uadd$0;
    $55 = $uadd$1;
    if ($55) {
      label = 10;
      break;
    } else {
      $_v_0 = $52;
      $_p_0 = $54;
      label = 11;
      break;
    }
   case 10:
    $57 = $52 - 1 | 0;
    $58 = $54 >>> 0 >= $4 >>> 0;
    $59 = $58 & 1;
    $60 = -$59 | 0;
    $61 = $54 - $4 | 0;
    $62 = $57 - $59 | 0;
    $63 = $4 & $60;
    $64 = $61 - $63 | 0;
    $_v_0 = $62;
    $_p_0 = $64;
    label = 11;
    break;
   case 11:
    $66 = $5 & 65535;
    $67 = $5 >>> 16;
    $68 = $_v_0 & 65535;
    $69 = $_v_0 >>> 16;
    $70 = Math_imul($68, $66);
    $71 = Math_imul($69, $66);
    $72 = Math_imul($68, $67);
    $73 = Math_imul($69, $67);
    $74 = $70 >>> 16;
    $75 = $74 + $71 | 0;
    $uadd257$0 = _llvm_uadd_with_overflow_i32($75 | 0, $72 | 0) | 0;
    $uadd257$1 = tempRet0;
    $76 = $uadd257$0;
    $77 = $uadd257$1;
    $78 = $73 + 65536 | 0;
    $__x3_0 = $77 ? $78 : $73;
    $79 = $76 >>> 16;
    $80 = $__x3_0 + $79 | 0;
    $81 = $76 << 16;
    $82 = $70 & 65535;
    $83 = $81 | $82;
    $uadd258$0 = _llvm_uadd_with_overflow_i32($_p_0 | 0, $80 | 0) | 0;
    $uadd258$1 = tempRet0;
    $84 = $uadd258$0;
    $85 = $uadd258$1;
    if ($85) {
      label = 12;
      break;
    } else {
      $_v_1 = $_v_0;
      label = 14;
      break;
    }
   case 12:
    $87 = $_v_0 - 1 | 0;
    $88 = $84 >>> 0 < $4 >>> 0;
    if ($88) {
      $_v_1 = $87;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $90 = $84 >>> 0 <= $4 >>> 0;
    $91 = $83 >>> 0 < $5 >>> 0;
    $or_cond275 = $90 & $91;
    $92 = $_v_0 - 2 | 0;
    $_278 = $or_cond275 ? $87 : $92;
    $_v_1 = $_278;
    label = 14;
    break;
   case 14:
    $94 = $nn - 3 | 0;
    $95 = ($94 | 0) > -1;
    if ($95) {
      label = 15;
      break;
    } else {
      $r0_1_lcssa = $r0_0;
      $r1_1_lcssa = $r1_0;
      $_0_lcssa = $2;
      label = 21;
      break;
    }
   case 15:
    $96 = $_v_1 & 65535;
    $97 = $_v_1 >>> 16;
    $98 = 2 - $nn | 0;
    $99 = ($98 | 0) > -1;
    $_op = $nn - 3 | 0;
    $100 = $99 ? $_op : 0;
    $r0_1298 = $r0_0;
    $r1_1299 = $r1_0;
    $i_0300 = $94;
    $_0301 = $2;
    label = 16;
    break;
   case 16:
    $102 = $_0301 - 4 | 0;
    $103 = HEAP32[$102 >> 2] | 0;
    $104 = $r1_1299 & 65535;
    $105 = $r1_1299 >>> 16;
    $106 = Math_imul($104, $96);
    $107 = Math_imul($104, $97);
    $108 = Math_imul($105, $96);
    $109 = Math_imul($105, $97);
    $110 = $106 >>> 16;
    $111 = $110 + $107 | 0;
    $uadd264$0 = _llvm_uadd_with_overflow_i32($111 | 0, $108 | 0) | 0;
    $uadd264$1 = tempRet0;
    $112 = $uadd264$0;
    $113 = $uadd264$1;
    $114 = $109 + 65536 | 0;
    $__x37_0 = $113 ? $114 : $109;
    $115 = $112 >>> 16;
    $116 = $112 << 16;
    $117 = $106 & 65535;
    $118 = $116 | $117;
    $uadd265$0 = _llvm_uadd_with_overflow_i32($118 | 0, $r0_1298 | 0) | 0;
    $uadd265$1 = tempRet0;
    $119 = $uadd265$0;
    $120 = $uadd265$1;
    $121 = $120 & 1;
    $122 = $115 + $r1_1299 | 0;
    $123 = $122 + $__x37_0 | 0;
    $124 = $123 + $121 | 0;
    $125 = Math_imul($124, $4);
    $126 = $103 - $5 | 0;
    $127 = $103 >>> 0 < $5 >>> 0;
    $128 = $127 & 1;
    $129 = $124 & 65535;
    $130 = $124 >>> 16;
    $131 = Math_imul($129, $66);
    $132 = Math_imul($130, $66);
    $133 = Math_imul($129, $67);
    $134 = Math_imul($130, $67);
    $135 = $131 >>> 16;
    $136 = $135 + $132 | 0;
    $uadd266$0 = _llvm_uadd_with_overflow_i32($136 | 0, $133 | 0) | 0;
    $uadd266$1 = tempRet0;
    $137 = $uadd266$0;
    $138 = $uadd266$1;
    $139 = $134 + 65536 | 0;
    $__x320_0 = $138 ? $139 : $134;
    $140 = $137 >>> 16;
    $141 = $137 << 16;
    $142 = $131 & 65535;
    $143 = $142 | $141;
    $144 = $126 - $143 | 0;
    $145 = $126 >>> 0 < $143 >>> 0;
    $146 = $145 & 1;
    $_neg284 = $r0_1298 - $4 | 0;
    $147 = $_neg284 - $128 | 0;
    $148 = $147 - $140 | 0;
    $149 = $148 - $125 | 0;
    $150 = $149 - $__x320_0 | 0;
    $151 = $150 - $146 | 0;
    $152 = $124 + 1 | 0;
    $153 = $151 >>> 0 >= $119 >>> 0;
    $154 = $153 & 1;
    $155 = -$154 | 0;
    $156 = $152 - $154 | 0;
    $157 = $5 & $155;
    $uadd267$0 = _llvm_uadd_with_overflow_i32($144 | 0, $157 | 0) | 0;
    $uadd267$1 = tempRet0;
    $158 = $uadd267$0;
    $159 = $4 & $155;
    $160 = $uadd267$1;
    $161 = $160 & 1;
    $162 = $151 + $161 | 0;
    $163 = $162 + $159 | 0;
    $164 = $163 >>> 0 < $4 >>> 0;
    if ($164) {
      $r1_2 = $163;
      $r0_2 = $158;
      $q_0 = $156;
      label = 19;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $166 = $163 >>> 0 <= $4 >>> 0;
    $167 = $158 >>> 0 < $5 >>> 0;
    $or_cond276 = $166 & $167;
    if ($or_cond276) {
      $r1_2 = $163;
      $r0_2 = $158;
      $q_0 = $156;
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $169 = $156 + 1 | 0;
    $170 = $158 - $5 | 0;
    $171 = $167 & 1;
    $sum307 = $171 + $4 | 0;
    $172 = $163 - $sum307 | 0;
    $r1_2 = $172;
    $r0_2 = $170;
    $q_0 = $169;
    label = 19;
    break;
   case 19:
    $_sum268 = $i_0300 + $qxn | 0;
    $174 = $qp + ($_sum268 << 2) | 0;
    HEAP32[$174 >> 2] = $q_0;
    $175 = $i_0300 - 1 | 0;
    $176 = ($i_0300 | 0) > 0;
    if ($176) {
      $r0_1298 = $r0_2;
      $r1_1299 = $r1_2;
      $i_0300 = $175;
      $_0301 = $102;
      label = 16;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $scevgep = $np + ($100 << 2) | 0;
    $r0_1_lcssa = $r0_2;
    $r1_1_lcssa = $r1_2;
    $_0_lcssa = $scevgep;
    label = 21;
    break;
   case 21:
    $178 = ($qxn | 0) > 0;
    if ($178) {
      label = 22;
      break;
    } else {
      $r1_5 = $r1_1_lcssa;
      $r0_5 = $r0_1_lcssa;
      label = 27;
      break;
    }
   case 22:
    $179 = $_v_1 & 65535;
    $180 = $_v_1 >>> 16;
    $181 = -$5 | 0;
    $182 = ($5 | 0) != 0;
    $183 = $182 & 1;
    $sum = $183 + $4 | 0;
    $r0_3294 = $r0_1_lcssa;
    $r1_3295 = $r1_1_lcssa;
    $i_1296_in = $qxn;
    label = 23;
    break;
   case 23:
    $i_1296 = $i_1296_in - 1 | 0;
    $185 = $r1_3295 & 65535;
    $186 = $r1_3295 >>> 16;
    $187 = Math_imul($185, $179);
    $188 = Math_imul($185, $180);
    $189 = Math_imul($186, $179);
    $190 = Math_imul($186, $180);
    $191 = $187 >>> 16;
    $192 = $191 + $188 | 0;
    $uadd260$0 = _llvm_uadd_with_overflow_i32($192 | 0, $189 | 0) | 0;
    $uadd260$1 = tempRet0;
    $193 = $uadd260$0;
    $194 = $uadd260$1;
    $195 = $190 + 65536 | 0;
    $__x338_0 = $194 ? $195 : $190;
    $196 = $193 >>> 16;
    $197 = $193 << 16;
    $198 = $187 & 65535;
    $199 = $197 | $198;
    $uadd261$0 = _llvm_uadd_with_overflow_i32($199 | 0, $r0_3294 | 0) | 0;
    $uadd261$1 = tempRet0;
    $200 = $uadd261$0;
    $201 = $uadd261$1;
    $202 = $201 & 1;
    $203 = $196 + $r1_3295 | 0;
    $204 = $203 + $__x338_0 | 0;
    $205 = $204 + $202 | 0;
    $206 = Math_imul($205, $4);
    $207 = $205 & 65535;
    $208 = $205 >>> 16;
    $209 = Math_imul($207, $66);
    $210 = Math_imul($208, $66);
    $211 = Math_imul($207, $67);
    $212 = Math_imul($208, $67);
    $213 = $209 >>> 16;
    $214 = $213 + $210 | 0;
    $uadd262$0 = _llvm_uadd_with_overflow_i32($214 | 0, $211 | 0) | 0;
    $uadd262$1 = tempRet0;
    $215 = $uadd262$0;
    $216 = $uadd262$1;
    $217 = $212 + 65536 | 0;
    $__x350_0 = $216 ? $217 : $212;
    $218 = $215 >>> 16;
    $219 = $215 << 16;
    $220 = $209 & 65535;
    $221 = $220 | $219;
    $222 = $181 - $221 | 0;
    $223 = $221 >>> 0 > $181 >>> 0;
    $224 = $223 & 1;
    $225 = $r0_3294 - $sum | 0;
    $226 = $225 - $218 | 0;
    $227 = $226 - $206 | 0;
    $228 = $227 - $__x350_0 | 0;
    $229 = $228 - $224 | 0;
    $230 = $205 + 1 | 0;
    $231 = $229 >>> 0 >= $200 >>> 0;
    $232 = $231 & 1;
    $233 = -$232 | 0;
    $234 = $230 - $232 | 0;
    $235 = $5 & $233;
    $uadd263$0 = _llvm_uadd_with_overflow_i32($222 | 0, $235 | 0) | 0;
    $uadd263$1 = tempRet0;
    $236 = $uadd263$0;
    $237 = $4 & $233;
    $238 = $uadd263$1;
    $239 = $238 & 1;
    $240 = $229 + $239 | 0;
    $241 = $240 + $237 | 0;
    $242 = $241 >>> 0 < $4 >>> 0;
    if ($242) {
      $r1_4 = $241;
      $r0_4 = $236;
      $q30_0 = $234;
      label = 26;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $244 = $241 >>> 0 <= $4 >>> 0;
    $245 = $236 >>> 0 < $5 >>> 0;
    $or_cond277 = $244 & $245;
    if ($or_cond277) {
      $r1_4 = $241;
      $r0_4 = $236;
      $q30_0 = $234;
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $247 = $234 + 1 | 0;
    $248 = $236 - $5 | 0;
    $249 = $245 & 1;
    $sum306 = $249 + $4 | 0;
    $250 = $241 - $sum306 | 0;
    $r1_4 = $250;
    $r0_4 = $248;
    $q30_0 = $247;
    label = 26;
    break;
   case 26:
    $252 = $qp + ($i_1296 << 2) | 0;
    HEAP32[$252 >> 2] = $q30_0;
    $253 = ($i_1296 | 0) > 0;
    if ($253) {
      $r0_3294 = $r0_4;
      $r1_3295 = $r1_4;
      $i_1296_in = $i_1296;
      label = 23;
      break;
    } else {
      $r1_5 = $r1_4;
      $r0_5 = $r0_4;
      label = 27;
      break;
    }
   case 27:
    $254 = $_0_lcssa + 4 | 0;
    HEAP32[$254 >> 2] = $r1_5;
    HEAP32[$_0_lcssa >> 2] = $r0_5;
    return $most_significant_q_limb_0 | 0;
  }
  return 0;
}
function ___gmpn_mod_1($ap, $n, $b) {
  $ap = $ap | 0;
  $n = $n | 0;
  $b = $b | 0;
  var $1 = 0, $3 = 0, $5 = 0, $7 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($n | 0) == 0;
    if ($1) {
      $_0 = 0;
      label = 5;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = ($b | 0) < 0;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $5 = _mpn_mod_1_norm($ap, $n, $b) | 0;
    $_0 = $5;
    label = 5;
    break;
   case 4:
    $7 = _mpn_mod_1_unnorm($ap, $n, $b) | 0;
    $_0 = $7;
    label = 5;
    break;
   case 5:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_lshiftc($rp, $up, $n, $cnt) {
  $rp = $rp | 0;
  $up = $up | 0;
  $n = $n | 0;
  $cnt = $cnt | 0;
  var $1 = 0, $2 = 0, $_sum = 0, $3 = 0, $4 = 0, $5 = 0, $i_019 = 0, $high_limb_020 = 0, $6 = 0, $high_limb_024 = 0, $i_023 = 0, $_022 = 0, $_01821 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $i_0 = 0, $high_limb_0 = 0, $13 = 0, $scevgep = 0, $high_limb_0_lcssa = 0, $_0_lcssa = 0, $15 = 0, $16 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $rp + ($n << 2) | 0;
    $2 = 32 - $cnt | 0;
    $_sum = $n - 1 | 0;
    $3 = $up + ($_sum << 2) | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 >>> ($2 >>> 0);
    $i_019 = $n - 1 | 0;
    $high_limb_020 = $4 << $cnt;
    $6 = ($i_019 | 0) == 0;
    if ($6) {
      $_0_lcssa = $1;
      $high_limb_0_lcssa = $high_limb_020;
      label = 4;
      break;
    } else {
      $_01821 = $3;
      $_022 = $1;
      $i_023 = $i_019;
      $high_limb_024 = $high_limb_020;
      label = 2;
      break;
    }
   case 2:
    $7 = $_01821 - 4 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $8 >>> ($2 >>> 0);
    $10 = $9 | $high_limb_024;
    $11 = $10 ^ -1;
    $12 = $_022 - 4 | 0;
    HEAP32[$12 >> 2] = $11;
    $i_0 = $i_023 - 1 | 0;
    $high_limb_0 = $8 << $cnt;
    $13 = ($i_0 | 0) == 0;
    if ($13) {
      label = 3;
      break;
    } else {
      $_01821 = $7;
      $_022 = $12;
      $i_023 = $i_0;
      $high_limb_024 = $high_limb_0;
      label = 2;
      break;
    }
   case 3:
    $scevgep = $rp + 4 | 0;
    $_0_lcssa = $scevgep;
    $high_limb_0_lcssa = $high_limb_0;
    label = 4;
    break;
   case 4:
    $15 = $high_limb_0_lcssa ^ -1;
    $16 = $_0_lcssa - 4 | 0;
    HEAP32[$16 >> 2] = $15;
    return $5 | 0;
  }
  return 0;
}
function _mpn_mod_1_norm($up, $un, $d) {
  $up = $up | 0;
  $un = $un | 0;
  $d = $d | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_ = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $uadd89$0 = 0, $uadd89$1 = 0, $20 = 0, $21 = 0, $_not = 0, $22 = 0, $or_cond = 0, $24 = 0, $25 = 0, $__r1_0 = 0, $__q1_0 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $uadd88$0 = 0, $uadd88$1 = 0, $36 = 0, $_not90 = 0, $37 = 0, $38 = 0, $or_cond92 = 0, $_93_v = 0, $_93 = 0, $__q0_0 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $i_095 = 0, $r_194 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $uadd$0 = 0, $uadd$1 = 0, $57 = 0, $58 = 0, $59 = 0, $__x3_0 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $uadd87$0 = 0, $uadd87$1 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $_r_0 = 0, $80 = 0, $81 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $un - 1 | 0;
    $2 = $up + ($1 << 2) | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $3 >>> 0 < $d >>> 0;
    $5 = $4 ? 0 : $d;
    $_ = $3 - $5 | 0;
    $6 = ($un | 0) == 1;
    if ($6) {
      $_0 = $_;
      label = 10;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $8 = $d >>> 16;
    $9 = $d & 65535;
    $10 = $d ^ -1;
    $11 = ($10 >>> 0) / ($8 >>> 0) >>> 0;
    $12 = Math_imul($11, $8);
    $13 = $10 - $12 | 0;
    $14 = Math_imul($11, $9);
    $15 = $13 << 16;
    $16 = $15 | 65535;
    $17 = $16 >>> 0 < $14 >>> 0;
    if ($17) {
      label = 3;
      break;
    } else {
      $__q1_0 = $11;
      $__r1_0 = $16;
      label = 5;
      break;
    }
   case 3:
    $19 = $11 - 1 | 0;
    $uadd89$0 = _llvm_uadd_with_overflow_i32($16 | 0, $d | 0) | 0;
    $uadd89$1 = tempRet0;
    $20 = $uadd89$0;
    $21 = $uadd89$1;
    $_not = $21 ^ 1;
    $22 = $20 >>> 0 < $14 >>> 0;
    $or_cond = $22 & $_not;
    if ($or_cond) {
      label = 4;
      break;
    } else {
      $__q1_0 = $19;
      $__r1_0 = $20;
      label = 5;
      break;
    }
   case 4:
    $24 = $11 - 2 | 0;
    $25 = $20 + $d | 0;
    $__q1_0 = $24;
    $__r1_0 = $25;
    label = 5;
    break;
   case 5:
    $27 = $__r1_0 - $14 | 0;
    $28 = ($27 >>> 0) / ($8 >>> 0) >>> 0;
    $29 = Math_imul($28, $8);
    $30 = $27 - $29 | 0;
    $31 = Math_imul($28, $9);
    $32 = $30 << 16;
    $33 = $32 | 65535;
    $34 = $33 >>> 0 < $31 >>> 0;
    if ($34) {
      label = 6;
      break;
    } else {
      $__q0_0 = $28;
      label = 7;
      break;
    }
   case 6:
    $uadd88$0 = _llvm_uadd_with_overflow_i32($33 | 0, $d | 0) | 0;
    $uadd88$1 = tempRet0;
    $36 = $uadd88$1;
    $_not90 = $36 ^ 1;
    $37 = $uadd88$0;
    $38 = $37 >>> 0 < $31 >>> 0;
    $or_cond92 = $38 & $_not90;
    $_93_v = $or_cond92 ? -2 : -1;
    $_93 = $_93_v + $28 | 0;
    $__q0_0 = $_93;
    label = 7;
    break;
   case 7:
    $40 = $un - 2 | 0;
    $41 = ($40 | 0) > -1;
    if ($41) {
      label = 8;
      break;
    } else {
      $_0 = $_;
      label = 10;
      break;
    }
   case 8:
    $42 = $__q1_0 << 16;
    $43 = $__q0_0 | $42;
    $44 = $__q0_0 & 65535;
    $45 = $43 >>> 16;
    $r_194 = $_;
    $i_095 = $40;
    label = 9;
    break;
   case 9:
    $47 = $up + ($i_095 << 2) | 0;
    $48 = HEAP32[$47 >> 2] | 0;
    $49 = $r_194 & 65535;
    $50 = $r_194 >>> 16;
    $51 = Math_imul($49, $44);
    $52 = Math_imul($49, $45);
    $53 = Math_imul($50, $44);
    $54 = Math_imul($50, $45);
    $55 = $51 >>> 16;
    $56 = $55 + $52 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($56 | 0, $53 | 0) | 0;
    $uadd$1 = tempRet0;
    $57 = $uadd$0;
    $58 = $uadd$1;
    $59 = $54 + 65536 | 0;
    $__x3_0 = $58 ? $59 : $54;
    $60 = $57 >>> 16;
    $61 = $57 << 16;
    $62 = $51 & 65535;
    $63 = $61 | $62;
    $uadd87$0 = _llvm_uadd_with_overflow_i32($63 | 0, $48 | 0) | 0;
    $uadd87$1 = tempRet0;
    $64 = $uadd87$0;
    $65 = $r_194 + 1 | 0;
    $66 = $uadd87$1;
    $67 = $66 & 1;
    $68 = $65 + $60 | 0;
    $69 = $68 + $__x3_0 | 0;
    $70 = $69 + $67 | 0;
    $71 = Math_imul($70, $d);
    $72 = $48 - $71 | 0;
    $73 = $72 >>> 0 > $64 >>> 0;
    $74 = $73 & 1;
    $75 = -$74 | 0;
    $76 = $75 & $d;
    $77 = $76 + $72 | 0;
    $78 = $77 >>> 0 < $d >>> 0;
    $79 = $78 ? 0 : $d;
    $_r_0 = $77 - $79 | 0;
    $80 = $i_095 - 1 | 0;
    $81 = ($i_095 | 0) > 0;
    if ($81) {
      $r_194 = $_r_0;
      $i_095 = $80;
      label = 9;
      break;
    } else {
      $_0 = $_r_0;
      label = 10;
      break;
    }
   case 10:
    return $_0 | 0;
  }
  return 0;
}
function _mpn_mod_1_unnorm($up, $un, $d) {
  $up = $up | 0;
  $un = $un | 0;
  $d = $d | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $r_0 = 0, $_0133 = 0, $8 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $uadd138$0 = 0, $uadd138$1 = 0, $43 = 0, $44 = 0, $_not = 0, $45 = 0, $or_cond = 0, $47 = 0, $48 = 0, $__r1_0 = 0, $__q1_0 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $uadd137$0 = 0, $uadd137$1 = 0, $59 = 0, $_not139 = 0, $60 = 0, $61 = 0, $or_cond141 = 0, $__v = 0, $_ = 0, $__q0_0 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $i_0144 = 0, $n1_0143 = 0, $r_1142 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $uadd135$0 = 0, $uadd135$1 = 0, $83 = 0, $84 = 0, $85 = 0, $__x3_0 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $uadd136$0 = 0, $uadd136$1 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $_r_0 = 0, $106 = 0, $107 = 0, $n1_0_lcssa = 0, $r_1_lcssa = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $uadd$0 = 0, $uadd$1 = 0, $118 = 0, $119 = 0, $120 = 0, $__x38_0 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $uadd134$0 = 0, $uadd134$1 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $_r3_0 = 0, $142 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $un - 1 | 0;
    $2 = $up + ($1 << 2) | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $3 >>> 0 < $d >>> 0;
    if ($4) {
      label = 2;
      break;
    } else {
      $_0133 = $un;
      $r_0 = 0;
      label = 3;
      break;
    }
   case 2:
    $6 = ($1 | 0) == 0;
    if ($6) {
      $_0 = $3;
      label = 15;
      break;
    } else {
      $_0133 = $1;
      $r_0 = $3;
      label = 3;
      break;
    }
   case 3:
    $8 = $d >>> 0 < 65536;
    if ($8) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $10 = $d >>> 0 < 256;
    $11 = $10 ? 1 : 9;
    $16 = $11;
    label = 6;
    break;
   case 5:
    $13 = $d >>> 0 < 16777216;
    $14 = $13 ? 17 : 25;
    $16 = $14;
    label = 6;
    break;
   case 6:
    $17 = 33 - $16 | 0;
    $18 = $d >>> ($16 >>> 0);
    $19 = $18 + 9696 | 0;
    $20 = HEAP8[$19] | 0;
    $21 = $20 & 255;
    $22 = $17 - $21 | 0;
    $23 = $d << $22;
    $24 = $_0133 - 1 | 0;
    $25 = $up + ($24 << 2) | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = $r_0 << $22;
    $28 = 32 - $22 | 0;
    $29 = $26 >>> ($28 >>> 0);
    $30 = $29 | $27;
    $31 = $23 >>> 16;
    $32 = $23 & 65535;
    $33 = $23 ^ -1;
    $34 = ($33 >>> 0) / ($31 >>> 0) >>> 0;
    $35 = Math_imul($31, $34);
    $36 = $33 - $35 | 0;
    $37 = Math_imul($32, $34);
    $38 = $36 << 16;
    $39 = $38 | 65535;
    $40 = $39 >>> 0 < $37 >>> 0;
    if ($40) {
      label = 7;
      break;
    } else {
      $__q1_0 = $34;
      $__r1_0 = $39;
      label = 9;
      break;
    }
   case 7:
    $42 = $34 - 1 | 0;
    $uadd138$0 = _llvm_uadd_with_overflow_i32($39 | 0, $23 | 0) | 0;
    $uadd138$1 = tempRet0;
    $43 = $uadd138$0;
    $44 = $uadd138$1;
    $_not = $44 ^ 1;
    $45 = $43 >>> 0 < $37 >>> 0;
    $or_cond = $45 & $_not;
    if ($or_cond) {
      label = 8;
      break;
    } else {
      $__q1_0 = $42;
      $__r1_0 = $43;
      label = 9;
      break;
    }
   case 8:
    $47 = $34 - 2 | 0;
    $48 = $43 + $23 | 0;
    $__q1_0 = $47;
    $__r1_0 = $48;
    label = 9;
    break;
   case 9:
    $50 = $__r1_0 - $37 | 0;
    $51 = ($50 >>> 0) / ($31 >>> 0) >>> 0;
    $52 = Math_imul($51, $31);
    $53 = $50 - $52 | 0;
    $54 = Math_imul($51, $32);
    $55 = $53 << 16;
    $56 = $55 | 65535;
    $57 = $56 >>> 0 < $54 >>> 0;
    if ($57) {
      label = 10;
      break;
    } else {
      $__q0_0 = $51;
      label = 11;
      break;
    }
   case 10:
    $uadd137$0 = _llvm_uadd_with_overflow_i32($56 | 0, $23 | 0) | 0;
    $uadd137$1 = tempRet0;
    $59 = $uadd137$1;
    $_not139 = $59 ^ 1;
    $60 = $uadd137$0;
    $61 = $60 >>> 0 < $54 >>> 0;
    $or_cond141 = $61 & $_not139;
    $__v = $or_cond141 ? -2 : -1;
    $_ = $__v + $51 | 0;
    $__q0_0 = $_;
    label = 11;
    break;
   case 11:
    $63 = $__q1_0 << 16;
    $64 = $__q0_0 | $63;
    $65 = $_0133 - 2 | 0;
    $66 = ($65 | 0) > -1;
    if ($66) {
      label = 12;
      break;
    } else {
      $r_1_lcssa = $30;
      $n1_0_lcssa = $26;
      label = 14;
      break;
    }
   case 12:
    $67 = $__q0_0 & 65535;
    $68 = $64 >>> 16;
    $r_1142 = $30;
    $n1_0143 = $26;
    $i_0144 = $65;
    label = 13;
    break;
   case 13:
    $70 = $up + ($i_0144 << 2) | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    $72 = $n1_0143 << $22;
    $73 = $71 >>> ($28 >>> 0);
    $74 = $73 | $72;
    $75 = $r_1142 & 65535;
    $76 = $r_1142 >>> 16;
    $77 = Math_imul($75, $67);
    $78 = Math_imul($75, $68);
    $79 = Math_imul($76, $67);
    $80 = Math_imul($76, $68);
    $81 = $77 >>> 16;
    $82 = $81 + $78 | 0;
    $uadd135$0 = _llvm_uadd_with_overflow_i32($82 | 0, $79 | 0) | 0;
    $uadd135$1 = tempRet0;
    $83 = $uadd135$0;
    $84 = $uadd135$1;
    $85 = $80 + 65536 | 0;
    $__x3_0 = $84 ? $85 : $80;
    $86 = $83 >>> 16;
    $87 = $83 << 16;
    $88 = $77 & 65535;
    $89 = $87 | $88;
    $uadd136$0 = _llvm_uadd_with_overflow_i32($89 | 0, $74 | 0) | 0;
    $uadd136$1 = tempRet0;
    $90 = $uadd136$0;
    $91 = $r_1142 + 1 | 0;
    $92 = $uadd136$1;
    $93 = $92 & 1;
    $94 = $91 + $86 | 0;
    $95 = $94 + $__x3_0 | 0;
    $96 = $95 + $93 | 0;
    $97 = Math_imul($96, $23);
    $98 = $74 - $97 | 0;
    $99 = $98 >>> 0 > $90 >>> 0;
    $100 = $99 & 1;
    $101 = -$100 | 0;
    $102 = $23 & $101;
    $103 = $102 + $98 | 0;
    $104 = $103 >>> 0 < $23 >>> 0;
    $105 = $104 ? 0 : $23;
    $_r_0 = $103 - $105 | 0;
    $106 = $i_0144 - 1 | 0;
    $107 = ($i_0144 | 0) > 0;
    if ($107) {
      $r_1142 = $_r_0;
      $n1_0143 = $71;
      $i_0144 = $106;
      label = 13;
      break;
    } else {
      $r_1_lcssa = $_r_0;
      $n1_0_lcssa = $71;
      label = 14;
      break;
    }
   case 14:
    $108 = $r_1_lcssa & 65535;
    $109 = $r_1_lcssa >>> 16;
    $110 = $__q0_0 & 65535;
    $111 = $64 >>> 16;
    $112 = Math_imul($108, $110);
    $113 = Math_imul($108, $111);
    $114 = Math_imul($109, $110);
    $115 = Math_imul($109, $111);
    $116 = $112 >>> 16;
    $117 = $116 + $113 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($117 | 0, $114 | 0) | 0;
    $uadd$1 = tempRet0;
    $118 = $uadd$0;
    $119 = $uadd$1;
    $120 = $115 + 65536 | 0;
    $__x38_0 = $119 ? $120 : $115;
    $121 = $118 >>> 16;
    $122 = $118 << 16;
    $123 = $112 & 65535;
    $124 = $122 | $123;
    $125 = $n1_0_lcssa << $22;
    $uadd134$0 = _llvm_uadd_with_overflow_i32($124 | 0, $125 | 0) | 0;
    $uadd134$1 = tempRet0;
    $126 = $uadd134$0;
    $127 = $r_1_lcssa + 1 | 0;
    $128 = $uadd134$1;
    $129 = $128 & 1;
    $130 = $127 + $121 | 0;
    $131 = $130 + $__x38_0 | 0;
    $132 = $131 + $129 | 0;
    $133 = Math_imul($132, $23);
    $134 = $125 - $133 | 0;
    $135 = $134 >>> 0 > $126 >>> 0;
    $136 = $135 & 1;
    $137 = -$136 | 0;
    $138 = $23 & $137;
    $139 = $138 + $134 | 0;
    $140 = $139 >>> 0 < $23 >>> 0;
    $141 = $140 ? 0 : $23;
    $_r3_0 = $139 - $141 | 0;
    $142 = $_r3_0 >>> ($22 >>> 0);
    $_0 = $142;
    label = 15;
    break;
   case 15:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_modexact_1c_odd($src, $size, $d, $orig_c) {
  $src = $src | 0;
  $size = $size | 0;
  $d = $d | 0;
  $orig_c = $orig_c | 0;
  var $1 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_ = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $i_0 = 0, $c_0 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $uadd$0 = 0, $uadd$1 = 0, $46 = 0, $47 = 0, $48 = 0, $__x3_0 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $smax = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $l_0 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $uadd83$0 = 0, $uadd83$1 = 0, $75 = 0, $76 = 0, $77 = 0, $__x310_0 = 0, $78 = 0, $79 = 0, $80 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($size | 0) == 1;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 5;
      break;
    }
   case 2:
    $3 = HEAP32[$src >> 2] | 0;
    $4 = $3 >>> 0 > $orig_c >>> 0;
    if ($4) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $6 = $3 - $orig_c | 0;
    $7 = ($6 >>> 0) % ($d >>> 0);
    $8 = ($7 | 0) == 0;
    $9 = $d - $7 | 0;
    $_ = $8 ? 0 : $9;
    return $_ | 0;
   case 4:
    $11 = $orig_c - $3 | 0;
    $12 = ($11 >>> 0) % ($d >>> 0);
    $_0 = $12;
    label = 10;
    break;
   case 5:
    $14 = $d >>> 1;
    $15 = $14 & 127;
    $16 = $15 + 15720 | 0;
    $17 = HEAP8[$16] | 0;
    $18 = $17 & 255;
    $19 = $18 << 1;
    $20 = Math_imul($18, $d);
    $21 = Math_imul($20, $18);
    $22 = $19 - $21 | 0;
    $23 = $22 << 1;
    $24 = Math_imul($22, $d);
    $25 = Math_imul($24, $22);
    $26 = $23 - $25 | 0;
    $27 = $d & 65535;
    $28 = $d >>> 16;
    $29 = $size - 1 | 0;
    $30 = ($29 | 0) > 1;
    $c_0 = $orig_c;
    $i_0 = 0;
    label = 6;
    break;
   case 6:
    $32 = $src + ($i_0 << 2) | 0;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = $33 - $c_0 | 0;
    $35 = $34 >>> 0 > $33 >>> 0;
    $36 = $35 & 1;
    $37 = Math_imul($34, $26);
    $38 = $37 & 65535;
    $39 = $37 >>> 16;
    $40 = Math_imul($38, $27);
    $41 = Math_imul($38, $28);
    $42 = Math_imul($39, $27);
    $43 = Math_imul($39, $28);
    $44 = $40 >>> 16;
    $45 = $44 + $41 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($45 | 0, $42 | 0) | 0;
    $uadd$1 = tempRet0;
    $46 = $uadd$0;
    $47 = $uadd$1;
    $48 = $43 + 65536 | 0;
    $__x3_0 = $47 ? $48 : $43;
    $49 = $46 >>> 16;
    $50 = $36 + $49 | 0;
    $51 = $50 + $__x3_0 | 0;
    $52 = $i_0 + 1 | 0;
    $53 = ($52 | 0) < ($29 | 0);
    if ($53) {
      $c_0 = $51;
      $i_0 = $52;
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $smax = $30 ? $29 : 1;
    $55 = $src + ($smax << 2) | 0;
    $56 = HEAP32[$55 >> 2] | 0;
    $57 = $56 >>> 0 > $d >>> 0;
    if ($57) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $59 = $51 - $56 | 0;
    $60 = $51 >>> 0 < $56 >>> 0;
    $61 = $60 ? $d : 0;
    $l_0 = $59 + $61 | 0;
    $_0 = $l_0;
    label = 10;
    break;
   case 9:
    $63 = $56 - $51 | 0;
    $64 = $63 >>> 0 > $56 >>> 0;
    $65 = $64 & 1;
    $66 = Math_imul($63, $26);
    $67 = $66 & 65535;
    $68 = $66 >>> 16;
    $69 = Math_imul($67, $27);
    $70 = Math_imul($67, $28);
    $71 = Math_imul($68, $27);
    $72 = Math_imul($68, $28);
    $73 = $69 >>> 16;
    $74 = $73 + $70 | 0;
    $uadd83$0 = _llvm_uadd_with_overflow_i32($74 | 0, $71 | 0) | 0;
    $uadd83$1 = tempRet0;
    $75 = $uadd83$0;
    $76 = $uadd83$1;
    $77 = $72 + 65536 | 0;
    $__x310_0 = $76 ? $77 : $72;
    $78 = $75 >>> 16;
    $79 = $78 + $65 | 0;
    $80 = $79 + $__x310_0 | 0;
    $_0 = $80;
    label = 10;
    break;
   case 10:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_preinv_divrem_1($qp, $xsize, $ap, $size, $d_unnorm, $dinv, $shift) {
  $qp = $qp | 0;
  $xsize = $xsize | 0;
  $ap = $ap | 0;
  $size = $size | 0;
  $d_unnorm = $d_unnorm | 0;
  $dinv = $dinv | 0;
  $shift = $shift | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $_ = 0, $_sum184 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $smax = 0, $21 = 0, $_0192 = 0, $r_0191 = 0, $i_0190 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $uadd185$0 = 0, $uadd185$1 = 0, $33 = 0, $34 = 0, $35 = 0, $__x3_0 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $uadd186$0 = 0, $uadd186$1 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $_r_0 = 0, $_qh_0 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $_sum = 0, $67 = 0, $68 = 0, $r_1 = 0, $_0179 = 0, $_1 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $smax210 = 0, $82 = 0, $83 = 0, $_2200 = 0, $r_2199 = 0, $i_1198 = 0, $n1_0197 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $uadd182$0 = 0, $uadd182$1 = 0, $95 = 0, $96 = 0, $97 = 0, $__x38_0 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $uadd183$0 = 0, $uadd183$1 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $122 = 0, $123 = 0, $_r3_0 = 0, $_qh1_0 = 0, $125 = 0, $126 = 0, $127 = 0, $scevgep211 = 0, $_2_lcssa = 0, $r_2_lcssa = 0, $n1_0_lcssa = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $uadd$0 = 0, $uadd$1 = 0, $139 = 0, $140 = 0, $141 = 0, $__x323_0 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $uadd180$0 = 0, $uadd180$1 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $165 = 0, $_r18_0 = 0, $_qh16_0 = 0, $167 = 0, $scevgep = 0, $r_4_ph = 0, $_4_ph = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $_4189 = 0, $r_4188 = 0, $i_2187 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $uadd181$0 = 0, $uadd181$1 = 0, $181 = 0, $182 = 0, $183 = 0, $__x338_0 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $exitcond = 0, $r_4_lcssa = 0, $200 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $size - 1 | 0;
    $2 = $ap + ($1 << 2) | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $d_unnorm << $shift;
    $5 = $size + $xsize | 0;
    $6 = $5 - 1 | 0;
    $7 = $qp + ($6 << 2) | 0;
    $8 = ($shift | 0) == 0;
    if ($8) {
      label = 2;
      break;
    } else {
      label = 7;
      break;
    }
   case 2:
    $10 = $3 >>> 0 >= $4 >>> 0;
    $11 = $10 & 1;
    $12 = $10 ? $4 : 0;
    $_ = $3 - $12 | 0;
    $_sum184 = $5 - 2 | 0;
    $13 = $qp + ($_sum184 << 2) | 0;
    HEAP32[$7 >> 2] = $11;
    $14 = $size - 2 | 0;
    $15 = ($14 | 0) > -1;
    if ($15) {
      label = 3;
      break;
    } else {
      $_4_ph = $13;
      $r_4_ph = $_;
      label = 19;
      break;
    }
   case 3:
    $16 = $dinv & 65535;
    $17 = $dinv >>> 16;
    $18 = $xsize - 2 | 0;
    $19 = 1 - $size | 0;
    $20 = ($19 | 0) > -1;
    $smax = $20 ? $19 : -1;
    $21 = $18 - $smax | 0;
    $i_0190 = $14;
    $r_0191 = $_;
    $_0192 = $13;
    label = 4;
    break;
   case 4:
    $23 = $ap + ($i_0190 << 2) | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $r_0191 & 65535;
    $26 = $r_0191 >>> 16;
    $27 = Math_imul($25, $16);
    $28 = Math_imul($25, $17);
    $29 = Math_imul($26, $16);
    $30 = Math_imul($26, $17);
    $31 = $27 >>> 16;
    $32 = $31 + $28 | 0;
    $uadd185$0 = _llvm_uadd_with_overflow_i32($32 | 0, $29 | 0) | 0;
    $uadd185$1 = tempRet0;
    $33 = $uadd185$0;
    $34 = $uadd185$1;
    $35 = $30 + 65536 | 0;
    $__x3_0 = $34 ? $35 : $30;
    $36 = $33 >>> 16;
    $37 = $33 << 16;
    $38 = $27 & 65535;
    $39 = $37 | $38;
    $uadd186$0 = _llvm_uadd_with_overflow_i32($39 | 0, $24 | 0) | 0;
    $uadd186$1 = tempRet0;
    $40 = $uadd186$0;
    $41 = $r_0191 + 1 | 0;
    $42 = $uadd186$1;
    $43 = $42 & 1;
    $44 = $41 + $36 | 0;
    $45 = $44 + $__x3_0 | 0;
    $46 = $45 + $43 | 0;
    $47 = Math_imul($46, $4);
    $48 = $24 - $47 | 0;
    $49 = $48 >>> 0 > $40 >>> 0;
    $50 = $49 & 1;
    $51 = -$50 | 0;
    $52 = $46 - $50 | 0;
    $53 = $4 & $51;
    $54 = $53 + $48 | 0;
    $55 = $54 >>> 0 < $4 >>> 0;
    if ($55) {
      $_qh_0 = $52;
      $_r_0 = $54;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $57 = $54 - $4 | 0;
    $58 = $52 + 1 | 0;
    $_qh_0 = $58;
    $_r_0 = $57;
    label = 6;
    break;
   case 6:
    HEAP32[$_0192 >> 2] = $_qh_0;
    $60 = $_0192 - 4 | 0;
    $61 = $i_0190 - 1 | 0;
    $62 = ($i_0190 | 0) > 0;
    if ($62) {
      $i_0190 = $61;
      $r_0191 = $_r_0;
      $_0192 = $60;
      label = 4;
      break;
    } else {
      label = 18;
      break;
    }
   case 7:
    $64 = $3 >>> 0 < $d_unnorm >>> 0;
    if ($64) {
      label = 8;
      break;
    } else {
      $_1 = $7;
      $_0179 = $size;
      $r_1 = 0;
      label = 9;
      break;
    }
   case 8:
    $66 = $3 << $shift;
    $_sum = $5 - 2 | 0;
    $67 = $qp + ($_sum << 2) | 0;
    HEAP32[$7 >> 2] = 0;
    $68 = ($1 | 0) == 0;
    if ($68) {
      $_4_ph = $67;
      $r_4_ph = $66;
      label = 19;
      break;
    } else {
      $_1 = $67;
      $_0179 = $1;
      $r_1 = $66;
      label = 9;
      break;
    }
   case 9:
    $70 = $_0179 - 1 | 0;
    $71 = $ap + ($70 << 2) | 0;
    $72 = HEAP32[$71 >> 2] | 0;
    $73 = 32 - $shift | 0;
    $74 = $72 >>> ($73 >>> 0);
    $75 = $74 | $r_1;
    $76 = $_0179 - 2 | 0;
    $77 = ($76 | 0) > -1;
    if ($77) {
      label = 10;
      break;
    } else {
      $n1_0_lcssa = $72;
      $r_2_lcssa = $75;
      $_2_lcssa = $_1;
      label = 15;
      break;
    }
   case 10:
    $78 = $dinv & 65535;
    $79 = $dinv >>> 16;
    $80 = 1 - $_0179 | 0;
    $81 = ($80 | 0) > -1;
    $smax210 = $81 ? $80 : -1;
    $82 = $_0179 + $smax210 | 0;
    $83 = -$82 | 0;
    $n1_0197 = $72;
    $i_1198 = $76;
    $r_2199 = $75;
    $_2200 = $_1;
    label = 11;
    break;
   case 11:
    $85 = $ap + ($i_1198 << 2) | 0;
    $86 = HEAP32[$85 >> 2] | 0;
    $87 = $r_2199 & 65535;
    $88 = $r_2199 >>> 16;
    $89 = Math_imul($87, $78);
    $90 = Math_imul($87, $79);
    $91 = Math_imul($88, $78);
    $92 = Math_imul($88, $79);
    $93 = $89 >>> 16;
    $94 = $93 + $90 | 0;
    $uadd182$0 = _llvm_uadd_with_overflow_i32($94 | 0, $91 | 0) | 0;
    $uadd182$1 = tempRet0;
    $95 = $uadd182$0;
    $96 = $uadd182$1;
    $97 = $92 + 65536 | 0;
    $__x38_0 = $96 ? $97 : $92;
    $98 = $95 >>> 16;
    $99 = $95 << 16;
    $100 = $89 & 65535;
    $101 = $99 | $100;
    $102 = $n1_0197 << $shift;
    $103 = $86 >>> ($73 >>> 0);
    $104 = $103 | $102;
    $uadd183$0 = _llvm_uadd_with_overflow_i32($101 | 0, $104 | 0) | 0;
    $uadd183$1 = tempRet0;
    $105 = $uadd183$0;
    $106 = $r_2199 + 1 | 0;
    $107 = $uadd183$1;
    $108 = $107 & 1;
    $109 = $106 + $98 | 0;
    $110 = $109 + $__x38_0 | 0;
    $111 = $110 + $108 | 0;
    $112 = Math_imul($111, $4);
    $113 = $104 - $112 | 0;
    $114 = $113 >>> 0 > $105 >>> 0;
    $115 = $114 & 1;
    $116 = -$115 | 0;
    $117 = $111 - $115 | 0;
    $118 = $4 & $116;
    $119 = $118 + $113 | 0;
    $120 = $119 >>> 0 < $4 >>> 0;
    if ($120) {
      $_qh1_0 = $117;
      $_r3_0 = $119;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $122 = $119 - $4 | 0;
    $123 = $117 + 1 | 0;
    $_qh1_0 = $123;
    $_r3_0 = $122;
    label = 13;
    break;
   case 13:
    HEAP32[$_2200 >> 2] = $_qh1_0;
    $125 = $_2200 - 4 | 0;
    $126 = $i_1198 - 1 | 0;
    $127 = ($i_1198 | 0) > 0;
    if ($127) {
      $n1_0197 = $86;
      $i_1198 = $126;
      $r_2199 = $_r3_0;
      $_2200 = $125;
      label = 11;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $scevgep211 = $_1 + ($83 << 2) | 0;
    $n1_0_lcssa = $86;
    $r_2_lcssa = $_r3_0;
    $_2_lcssa = $scevgep211;
    label = 15;
    break;
   case 15:
    $129 = $r_2_lcssa & 65535;
    $130 = $r_2_lcssa >>> 16;
    $131 = $dinv & 65535;
    $132 = $dinv >>> 16;
    $133 = Math_imul($129, $131);
    $134 = Math_imul($129, $132);
    $135 = Math_imul($130, $131);
    $136 = Math_imul($130, $132);
    $137 = $133 >>> 16;
    $138 = $137 + $134 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($138 | 0, $135 | 0) | 0;
    $uadd$1 = tempRet0;
    $139 = $uadd$0;
    $140 = $uadd$1;
    $141 = $136 + 65536 | 0;
    $__x323_0 = $140 ? $141 : $136;
    $142 = $139 >>> 16;
    $143 = $139 << 16;
    $144 = $133 & 65535;
    $145 = $143 | $144;
    $146 = $n1_0_lcssa << $shift;
    $uadd180$0 = _llvm_uadd_with_overflow_i32($145 | 0, $146 | 0) | 0;
    $uadd180$1 = tempRet0;
    $147 = $uadd180$0;
    $148 = $r_2_lcssa + 1 | 0;
    $149 = $uadd180$1;
    $150 = $149 & 1;
    $151 = $148 + $142 | 0;
    $152 = $151 + $__x323_0 | 0;
    $153 = $152 + $150 | 0;
    $154 = Math_imul($153, $4);
    $155 = $146 - $154 | 0;
    $156 = $155 >>> 0 > $147 >>> 0;
    $157 = $156 & 1;
    $158 = -$157 | 0;
    $159 = $153 - $157 | 0;
    $160 = $4 & $158;
    $161 = $160 + $155 | 0;
    $162 = $161 >>> 0 < $4 >>> 0;
    if ($162) {
      $_qh16_0 = $159;
      $_r18_0 = $161;
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $164 = $161 - $4 | 0;
    $165 = $159 + 1 | 0;
    $_qh16_0 = $165;
    $_r18_0 = $164;
    label = 17;
    break;
   case 17:
    HEAP32[$_2_lcssa >> 2] = $_qh16_0;
    $167 = $_2_lcssa - 4 | 0;
    $_4_ph = $167;
    $r_4_ph = $_r18_0;
    label = 19;
    break;
   case 18:
    $scevgep = $qp + ($21 << 2) | 0;
    $_4_ph = $scevgep;
    $r_4_ph = $_r_0;
    label = 19;
    break;
   case 19:
    $168 = ($xsize | 0) > 0;
    if ($168) {
      label = 20;
      break;
    } else {
      $r_4_lcssa = $r_4_ph;
      label = 22;
      break;
    }
   case 20:
    $169 = $dinv & 65535;
    $170 = $dinv >>> 16;
    $171 = -$4 | 0;
    $i_2187 = 0;
    $r_4188 = $r_4_ph;
    $_4189 = $_4_ph;
    label = 21;
    break;
   case 21:
    $173 = $r_4188 & 65535;
    $174 = $r_4188 >>> 16;
    $175 = Math_imul($173, $169);
    $176 = Math_imul($173, $170);
    $177 = Math_imul($174, $169);
    $178 = Math_imul($174, $170);
    $179 = $175 >>> 16;
    $180 = $179 + $176 | 0;
    $uadd181$0 = _llvm_uadd_with_overflow_i32($180 | 0, $177 | 0) | 0;
    $uadd181$1 = tempRet0;
    $181 = $uadd181$0;
    $182 = $uadd181$1;
    $183 = $178 + 65536 | 0;
    $__x338_0 = $182 ? $183 : $178;
    $184 = $181 >>> 16;
    $185 = $181 << 16;
    $186 = $175 & 65535;
    $187 = $185 | $186;
    $188 = $r_4188 + 1 | 0;
    $189 = $188 + $184 | 0;
    $190 = $189 + $__x338_0 | 0;
    $191 = Math_imul($190, $171);
    $192 = $191 >>> 0 > $187 >>> 0;
    $193 = $192 & 1;
    $194 = -$193 | 0;
    $195 = $190 - $193 | 0;
    $196 = $4 & $194;
    $197 = $196 + $191 | 0;
    HEAP32[$_4189 >> 2] = $195;
    $198 = $_4189 - 4 | 0;
    $199 = $i_2187 + 1 | 0;
    $exitcond = ($199 | 0) == ($xsize | 0);
    if ($exitcond) {
      $r_4_lcssa = $197;
      label = 22;
      break;
    } else {
      $i_2187 = $199;
      $r_4188 = $197;
      $_4189 = $198;
      label = 21;
      break;
    }
   case 22:
    $200 = $r_4_lcssa >>> ($shift >>> 0);
    return $200 | 0;
  }
  return 0;
}
function _mpn_toom6h_mul_itch($an, $bn) {
  $an = $an | 0;
  $bn = $bn | 0;
  return (((($bn + $an | 0) >>> 0) / 10 >>> 0) * 12 & -1) + 394 | 0;
}
function _mpn_toom8h_mul_itch($an, $bn) {
  $an = $an | 0;
  $bn = $bn | 0;
  return ((((($bn + $an | 0) >>> 0) / 14 >>> 0) * 120 & -1) + 120 >> 3) + 439 | 0;
}
function ___gmpn_mul($prodp, $up, $un, $vp, $vn) {
  $prodp = $prodp | 0;
  $up = $up | 0;
  $un = $un | 0;
  $vp = $vp | 0;
  $vn = $vn | 0;
  var $tp = 0, $__tmp_marker = 0, $__tmp_marker39 = 0, $1 = 0, $3 = 0, $7 = 0, $9 = 0, $10 = 0, $or_cond = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $__x_0 = 0, $__src_0 = 0, $__dst_0 = 0, $__n_0 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $scevgep560 = 0, $__x_1 = 0, $__dst_1 = 0, $_0424463 = 0, $_0420464 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $scevgep = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $_0420467 = 0, $_0424466 = 0, $_0465 = 0, $40 = 0, $41 = 0, $42 = 0, $uadd456$0 = 0, $uadd456$1 = 0, $43 = 0, $44 = 0, $__p_0 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $__x5_0 = 0, $__src4_0 = 0, $__dst3_0 = 0, $__n2_0 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $__x5_1 = 0, $__dst3_1 = 0, $_0424 = 0, $_0420 = 0, $59 = 0, $scevgep557 = 0, $scevgep558 = 0, $_0420_lcssa = 0, $_0424_lcssa = 0, $_0_lcssa = 0, $61 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $uadd455$0 = 0, $uadd455$1 = 0, $69 = 0, $70 = 0, $__p7_0 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $_1539 = 0, $_1421540 = 0, $_1425541 = 0, $89 = 0, $90 = 0, $_1_sum430 = 0, $91 = 0, $_1_sum432 = 0, $92 = 0, $_sum433 = 0, $93 = 0, $94 = 0, $95 = 0, $scevgep583 = 0, $96 = 0, $indvars_iv584 = 0, $_1425545 = 0, $_1421544 = 0, $_1543 = 0, $prodp_pn542 = 0, $98 = 0, $100 = 0, $101 = 0, $__n9_0 = 0, $__dst10_0 = 0, $__src11_0 = 0, $__x12_0 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $110 = 0, $111 = 0, $uadd431$0 = 0, $uadd431$1 = 0, $112 = 0, $113 = 0, $_1 = 0, $_1421 = 0, $_1425 = 0, $114 = 0, $scevgep586590 = 0, $__p14_0 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $_1425_lcssa = 0, $_1421_lcssa = 0, $_1_lcssa = 0, $prodp_pn_lcssa = 0, $un_pn_lcssa = 0, $119 = 0, $120 = 0, $121 = 0, $124 = 0, $125 = 0, $129 = 0, $130 = 0, $132 = 0, $_1_sum429 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $_sum = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $__n15_0 = 0, $__dst16_0 = 0, $__src17_0 = 0, $__x18_0 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $scevgep581 = 0, $__dst16_1 = 0, $__x18_1 = 0, $_1_sum = 0, $149 = 0, $150 = 0, $uadd$0 = 0, $uadd$1 = 0, $151 = 0, $152 = 0, $__p20_0 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $160 = 0, $163 = 0, $164 = 0, $168 = 0, $169 = 0, $170 = 0, $172 = 0, $173 = 0, $175 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $_2514 = 0, $_2422515 = 0, $_2426516 = 0, $199 = 0, $200 = 0, $201 = 0, $_2_sum440 = 0, $202 = 0, $_2_sum442 = 0, $203 = 0, $_sum443 = 0, $204 = 0, $205 = 0, $206 = 0, $scevgep573 = 0, $207 = 0, $indvars_iv574 = 0, $_2426520 = 0, $_2422519 = 0, $_2518 = 0, $prodp_pn436517 = 0, $212 = 0, $214 = 0, $215 = 0, $__n24_0 = 0, $__dst25_0 = 0, $__src26_0 = 0, $__x27_0 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $224 = 0, $225 = 0, $uadd441$0 = 0, $uadd441$1 = 0, $226 = 0, $227 = 0, $_2 = 0, $_2422 = 0, $_2426 = 0, $228 = 0, $229 = 0, $scevgep576591 = 0, $__p29_0 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $_2426_lcssa = 0, $_2422_lcssa = 0, $_2_lcssa = 0, $prodp_pn436_lcssa = 0, $un_pn434_lcssa = 0, $234 = 0, $236 = 0, $238 = 0, $240 = 0, $241 = 0, $243 = 0, $_2_sum438 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $_sum439 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $__n30_0 = 0, $__dst31_0 = 0, $__src32_0 = 0, $__x33_0 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $scevgep571 = 0, $__dst31_1 = 0, $__x33_1 = 0, $_2_sum = 0, $260 = 0, $261 = 0, $uadd437$0 = 0, $uadd437$1 = 0, $262 = 0, $263 = 0, $__p35_0 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $269 = 0, $270 = 0, $271 = 0, $274 = 0, $275 = 0, $280 = 0, $281 = 0, $283 = 0, $284 = 0, $286 = 0, $293 = 0, $297 = 0, $299 = 0, $300 = 0, $301 = 0, $303 = 0, $305 = 0, $307 = 0, $308 = 0, $310 = 0, $312 = 0, $313 = 0, $314 = 0, $316 = 0, $318 = 0, $320 = 0, $321 = 0, $323 = 0, $324 = 0, $325 = 0, $327 = 0, $329 = 0, $331 = 0, $332 = 0, $334 = 0, $335 = 0, $338 = 0, $339 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $_3487 = 0, $_3423488 = 0, $_3427489 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $_3_sum450 = 0, $350 = 0, $_3_sum452 = 0, $351 = 0, $_sum453 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $scevgep564 = 0, $356 = 0, $indvars_iv = 0, $_3427493 = 0, $_3423492 = 0, $_3491 = 0, $prodp_pn446490 = 0, $358 = 0, $360 = 0, $361 = 0, $__n40_0 = 0, $__dst41_0 = 0, $__src42_0 = 0, $__x43_0 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $__dst41_1 = 0, $__x43_1 = 0, $368 = 0, $369 = 0, $uadd451$0 = 0, $uadd451$1 = 0, $370 = 0, $371 = 0, $_3 = 0, $_3423 = 0, $_3427 = 0, $372 = 0, $373 = 0, $scevgep566592 = 0, $__p45_0 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $_3427_lcssa = 0, $_3423_lcssa = 0, $_3_lcssa = 0, $prodp_pn446_lcssa = 0, $un_pn444_lcssa = 0, $378 = 0, $380 = 0, $382 = 0, $384 = 0, $385 = 0, $387 = 0, $_3_sum448 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $_sum449 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $__n46_0 = 0, $__dst47_0 = 0, $__src48_0 = 0, $__x49_0 = 0, $397 = 0, $398 = 0, $399 = 0, $400 = 0, $401 = 0, $scevgep562 = 0, $__dst47_1 = 0, $__x49_1 = 0, $_3_sum = 0, $404 = 0, $405 = 0, $uadd447$0 = 0, $uadd447$1 = 0, $406 = 0, $407 = 0, $__p51_0 = 0, $408 = 0, $409 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $_4428 = 0, $_4 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 136 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $tp = __stackBase__ | 0;
    $__tmp_marker = __stackBase__ + 120 | 0;
    $__tmp_marker39 = __stackBase__ + 128 | 0;
    $1 = ($un | 0) == ($vn | 0);
    if ($1) {
      label = 2;
      break;
    } else {
      label = 5;
      break;
    }
   case 2:
    $3 = ($up | 0) == ($vp | 0);
    if ($3) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    ___gmpn_sqr($prodp, $up, $un);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 4:
    ___gmpn_mul_n($prodp, $up, $vp, $un);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 5:
    $7 = ($vn | 0) < 30;
    if ($7) {
      label = 6;
      break;
    } else {
      label = 30;
      break;
    }
   case 6:
    $9 = ($un | 0) < 501;
    $10 = ($vn | 0) == 1;
    $or_cond = $9 | $10;
    if ($or_cond) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    ___gmpn_mul_basecase($prodp, $up, $un, $vp, $vn);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 8:
    ___gmpn_mul_basecase($prodp, $up, 500, $vp, $vn);
    $13 = $prodp + 2e3 | 0;
    $14 = ($vn | 0) != 0;
    if ($14) {
      label = 9;
      break;
    } else {
      label = 14;
      break;
    }
   case 9:
    $16 = $vn - 1 | 0;
    $17 = $tp | 0;
    $18 = HEAP32[$13 >> 2] | 0;
    $19 = ($16 | 0) == 0;
    if ($19) {
      $__dst_1 = $17;
      $__x_1 = $18;
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $20 = $prodp + 2004 | 0;
    $21 = $vn - 1 | 0;
    $__n_0 = $16;
    $__dst_0 = $17;
    $__src_0 = $20;
    $__x_0 = $18;
    label = 11;
    break;
   case 11:
    $23 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $24 = $__src_0 + 4 | 0;
    $25 = HEAP32[$__src_0 >> 2] | 0;
    $26 = $__n_0 - 1 | 0;
    $27 = ($26 | 0) == 0;
    if ($27) {
      label = 12;
      break;
    } else {
      $__n_0 = $26;
      $__dst_0 = $23;
      $__src_0 = $24;
      $__x_0 = $25;
      label = 11;
      break;
    }
   case 12:
    $scevgep560 = $tp + ($21 << 2) | 0;
    $__dst_1 = $scevgep560;
    $__x_1 = $25;
    label = 13;
    break;
   case 13:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 14;
    break;
   case 14:
    $_0424463 = $un - 500 | 0;
    $_0420464 = $up + 2e3 | 0;
    $29 = ($_0424463 | 0) > 500;
    if ($29) {
      label = 15;
      break;
    } else {
      $_0_lcssa = $13;
      $_0424_lcssa = $_0424463;
      $_0420_lcssa = $_0420464;
      label = 25;
      break;
    }
   case 15:
    $30 = $tp | 0;
    $31 = $vn - 1 | 0;
    $32 = ($31 | 0) == 0;
    $scevgep = $tp + ($31 << 2) | 0;
    $33 = $un - 1001 | 0;
    $34 = ($33 >>> 0) % 500;
    $35 = $33 - $34 | 0;
    $36 = $35 + 1e3 | 0;
    $37 = $un - 1e3 | 0;
    $38 = $37 - $35 | 0;
    $_0465 = $13;
    $_0424466 = $_0424463;
    $_0420467 = $_0420464;
    label = 16;
    break;
   case 16:
    ___gmpn_mul_basecase($_0465, $_0420467, 500, $vp, $vn);
    $40 = ___gmpn_add_n($_0465, $_0465, $30, $vn) | 0;
    $41 = $_0465 + ($vn << 2) | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    $uadd456$0 = _llvm_uadd_with_overflow_i32($42 | 0, $40 | 0) | 0;
    $uadd456$1 = tempRet0;
    $43 = $uadd456$0;
    HEAP32[$41 >> 2] = $43;
    $44 = $uadd456$1;
    if ($44) {
      $__p_0 = $41;
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $45 = $__p_0 + 4 | 0;
    $46 = HEAP32[$45 >> 2] | 0;
    $47 = $46 + 1 | 0;
    HEAP32[$45 >> 2] = $47;
    $48 = ($47 | 0) == 0;
    if ($48) {
      $__p_0 = $45;
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $49 = $_0465 + 2e3 | 0;
    if ($14) {
      label = 19;
      break;
    } else {
      label = 23;
      break;
    }
   case 19:
    $51 = HEAP32[$49 >> 2] | 0;
    if ($32) {
      $__dst3_1 = $30;
      $__x5_1 = $51;
      label = 22;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $52 = $_0465 + 2004 | 0;
    $__n2_0 = $31;
    $__dst3_0 = $30;
    $__src4_0 = $52;
    $__x5_0 = $51;
    label = 21;
    break;
   case 21:
    $54 = $__dst3_0 + 4 | 0;
    HEAP32[$__dst3_0 >> 2] = $__x5_0;
    $55 = $__src4_0 + 4 | 0;
    $56 = HEAP32[$__src4_0 >> 2] | 0;
    $57 = $__n2_0 - 1 | 0;
    $58 = ($57 | 0) == 0;
    if ($58) {
      $__dst3_1 = $scevgep;
      $__x5_1 = $56;
      label = 22;
      break;
    } else {
      $__n2_0 = $57;
      $__dst3_0 = $54;
      $__src4_0 = $55;
      $__x5_0 = $56;
      label = 21;
      break;
    }
   case 22:
    HEAP32[$__dst3_1 >> 2] = $__x5_1;
    label = 23;
    break;
   case 23:
    $_0424 = $_0424466 - 500 | 0;
    $_0420 = $_0420467 + 2e3 | 0;
    $59 = ($_0424 | 0) > 500;
    if ($59) {
      $_0465 = $49;
      $_0424466 = $_0424;
      $_0420467 = $_0420;
      label = 16;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $scevgep557 = $up + ($36 << 2) | 0;
    $scevgep558 = $prodp + ($36 << 2) | 0;
    $_0_lcssa = $scevgep558;
    $_0424_lcssa = $38;
    $_0420_lcssa = $scevgep557;
    label = 25;
    break;
   case 25:
    $61 = ($_0424_lcssa | 0) > ($vn | 0);
    if ($61) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    ___gmpn_mul_basecase($_0_lcssa, $_0420_lcssa, $_0424_lcssa, $vp, $vn);
    label = 28;
    break;
   case 27:
    ___gmpn_mul_basecase($_0_lcssa, $vp, $vn, $_0420_lcssa, $_0424_lcssa);
    label = 28;
    break;
   case 28:
    $65 = $tp | 0;
    $66 = ___gmpn_add_n($_0_lcssa, $_0_lcssa, $65, $vn) | 0;
    $67 = $_0_lcssa + ($vn << 2) | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    $uadd455$0 = _llvm_uadd_with_overflow_i32($68 | 0, $66 | 0) | 0;
    $uadd455$1 = tempRet0;
    $69 = $uadd455$0;
    HEAP32[$67 >> 2] = $69;
    $70 = $uadd455$1;
    if ($70) {
      $__p7_0 = $67;
      label = 29;
      break;
    } else {
      $_4 = $_0_lcssa;
      $_4428 = $_0424_lcssa;
      label = 147;
      break;
    }
   case 29:
    $71 = $__p7_0 + 4 | 0;
    $72 = HEAP32[$71 >> 2] | 0;
    $73 = $72 + 1 | 0;
    HEAP32[$71 >> 2] = $73;
    $74 = ($73 | 0) == 0;
    if ($74) {
      $__p7_0 = $71;
      label = 29;
      break;
    } else {
      $_4 = $_0_lcssa;
      $_4428 = $_0424_lcssa;
      label = 147;
      break;
    }
   case 30:
    $76 = ($vn | 0) > 99;
    if ($76) {
      label = 59;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    $78 = $vn << 6;
    $79 = $78 + 400 | 0;
    $80 = STACKTOP;
    STACKTOP = STACKTOP + $79 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $81 = $80;
    $82 = $vn * 3 & -1;
    $83 = ($82 | 0) > ($un | 0);
    if ($83) {
      label = 54;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $85 = $vn << 4;
    $86 = STACKTOP;
    STACKTOP = STACKTOP + $85 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $87 = $86;
    $88 = $vn << 1;
    ___gmpn_toom42_mul($prodp, $up, $88, $vp, $vn, $81);
    $_1539 = $prodp + ($88 << 2) | 0;
    $_1421540 = $up + ($88 << 2) | 0;
    $_1425541 = $un - $88 | 0;
    $89 = ($_1425541 | 0) < ($82 | 0);
    if ($89) {
      $un_pn_lcssa = $un;
      $prodp_pn_lcssa = $prodp;
      $_1_lcssa = $_1539;
      $_1421_lcssa = $_1421540;
      $_1425_lcssa = $_1425541;
      label = 41;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $90 = ($88 | 0) == 0;
    $_1_sum430 = $88 + $vn | 0;
    $91 = $88 - 1 | 0;
    $_1_sum432 = $88 + $vn | 0;
    $92 = $87 + ($vn << 2) | 0;
    $_sum433 = $vn + 1 | 0;
    $93 = $87 + ($_sum433 << 2) | 0;
    $94 = $vn * 5 & -1;
    $95 = $94 - 1 | 0;
    $scevgep583 = $prodp + ($95 << 2) | 0;
    $96 = $vn << 1;
    $prodp_pn542 = $prodp;
    $_1543 = $_1539;
    $_1421544 = $_1421540;
    $_1425545 = $_1425541;
    $indvars_iv584 = $scevgep583;
    label = 34;
    break;
   case 34:
    ___gmpn_toom42_mul($87, $_1421544, $88, $vp, $vn, $81);
    $98 = ___gmpn_add_n($_1543, $_1543, $87, $vn) | 0;
    if ($90) {
      label = 38;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $100 = $prodp_pn542 + ($_1_sum432 << 2) | 0;
    $101 = HEAP32[$92 >> 2] | 0;
    $__x12_0 = $101;
    $__src11_0 = $93;
    $__dst10_0 = $100;
    $__n9_0 = $91;
    label = 36;
    break;
   case 36:
    $103 = $__dst10_0 + 4 | 0;
    HEAP32[$__dst10_0 >> 2] = $__x12_0;
    $104 = $__src11_0 + 4 | 0;
    $105 = HEAP32[$__src11_0 >> 2] | 0;
    $106 = $__n9_0 - 1 | 0;
    $107 = ($106 | 0) == 0;
    if ($107) {
      label = 37;
      break;
    } else {
      $__x12_0 = $105;
      $__src11_0 = $104;
      $__dst10_0 = $103;
      $__n9_0 = $106;
      label = 36;
      break;
    }
   case 37:
    HEAP32[$indvars_iv584 >> 2] = $105;
    label = 38;
    break;
   case 38:
    $110 = $prodp_pn542 + ($_1_sum430 << 2) | 0;
    $111 = HEAP32[$110 >> 2] | 0;
    $uadd431$0 = _llvm_uadd_with_overflow_i32($111 | 0, $98 | 0) | 0;
    $uadd431$1 = tempRet0;
    $112 = $uadd431$0;
    HEAP32[$110 >> 2] = $112;
    $113 = $uadd431$1;
    if ($113) {
      $__p14_0 = $110;
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    $_1 = $_1543 + ($88 << 2) | 0;
    $_1421 = $_1421544 + ($88 << 2) | 0;
    $_1425 = $_1425545 - $88 | 0;
    $114 = ($_1425 | 0) < ($82 | 0);
    $scevgep586590 = $indvars_iv584 + ($96 << 2) | 0;
    if ($114) {
      $un_pn_lcssa = $_1425545;
      $prodp_pn_lcssa = $_1543;
      $_1_lcssa = $_1;
      $_1421_lcssa = $_1421;
      $_1425_lcssa = $_1425;
      label = 41;
      break;
    } else {
      $prodp_pn542 = $_1543;
      $_1543 = $_1;
      $_1421544 = $_1421;
      $_1425545 = $_1425;
      $indvars_iv584 = $scevgep586590;
      label = 34;
      break;
    }
   case 40:
    $115 = $__p14_0 + 4 | 0;
    $116 = HEAP32[$115 >> 2] | 0;
    $117 = $116 + 1 | 0;
    HEAP32[$115 >> 2] = $117;
    $118 = ($117 | 0) == 0;
    if ($118) {
      $__p14_0 = $115;
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 41:
    $119 = $_1425_lcssa << 2;
    $120 = $vn * 5 & -1;
    $121 = ($119 | 0) < ($120 | 0);
    if ($121) {
      label = 42;
      break;
    } else {
      label = 43;
      break;
    }
   case 42:
    ___gmpn_toom22_mul($87, $_1421_lcssa, $_1425_lcssa, $vp, $vn, $81);
    label = 46;
    break;
   case 43:
    $124 = $vn * 7 & -1;
    $125 = ($119 | 0) < ($124 | 0);
    if ($125) {
      label = 44;
      break;
    } else {
      label = 45;
      break;
    }
   case 44:
    ___gmpn_toom32_mul($87, $_1421_lcssa, $_1425_lcssa, $vp, $vn, $81);
    label = 46;
    break;
   case 45:
    ___gmpn_toom42_mul($87, $_1421_lcssa, $_1425_lcssa, $vp, $vn, $81);
    label = 46;
    break;
   case 46:
    $129 = ___gmpn_add_n($_1_lcssa, $_1_lcssa, $87, $vn) | 0;
    $130 = ($un_pn_lcssa | 0) == ($88 | 0);
    if ($130) {
      label = 52;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    $132 = $_1425_lcssa - 1 | 0;
    $_1_sum429 = $88 + $vn | 0;
    $133 = $prodp_pn_lcssa + ($_1_sum429 << 2) | 0;
    $134 = $87 + ($vn << 2) | 0;
    $135 = HEAP32[$134 >> 2] | 0;
    $136 = ($132 | 0) == 0;
    if ($136) {
      $__x18_1 = $135;
      $__dst16_1 = $133;
      label = 51;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    $_sum = $vn + 1 | 0;
    $137 = $87 + ($_sum << 2) | 0;
    $138 = $vn * 3 & -1;
    $139 = $_1425_lcssa + $138 | 0;
    $140 = $139 - 1 | 0;
    $__x18_0 = $135;
    $__src17_0 = $137;
    $__dst16_0 = $133;
    $__n15_0 = $132;
    label = 49;
    break;
   case 49:
    $142 = $__dst16_0 + 4 | 0;
    HEAP32[$__dst16_0 >> 2] = $__x18_0;
    $143 = $__src17_0 + 4 | 0;
    $144 = HEAP32[$__src17_0 >> 2] | 0;
    $145 = $__n15_0 - 1 | 0;
    $146 = ($145 | 0) == 0;
    if ($146) {
      label = 50;
      break;
    } else {
      $__x18_0 = $144;
      $__src17_0 = $143;
      $__dst16_0 = $142;
      $__n15_0 = $145;
      label = 49;
      break;
    }
   case 50:
    $scevgep581 = $prodp_pn_lcssa + ($140 << 2) | 0;
    $__x18_1 = $144;
    $__dst16_1 = $scevgep581;
    label = 51;
    break;
   case 51:
    HEAP32[$__dst16_1 >> 2] = $__x18_1;
    label = 52;
    break;
   case 52:
    $_1_sum = $88 + $vn | 0;
    $149 = $prodp_pn_lcssa + ($_1_sum << 2) | 0;
    $150 = HEAP32[$149 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($150 | 0, $129 | 0) | 0;
    $uadd$1 = tempRet0;
    $151 = $uadd$0;
    HEAP32[$149 >> 2] = $151;
    $152 = $uadd$1;
    if ($152) {
      $__p20_0 = $149;
      label = 53;
      break;
    } else {
      $_4 = $_1_lcssa;
      $_4428 = $_1425_lcssa;
      label = 147;
      break;
    }
   case 53:
    $153 = $__p20_0 + 4 | 0;
    $154 = HEAP32[$153 >> 2] | 0;
    $155 = $154 + 1 | 0;
    HEAP32[$153 >> 2] = $155;
    $156 = ($155 | 0) == 0;
    if ($156) {
      $__p20_0 = $153;
      label = 53;
      break;
    } else {
      $_4 = $_1_lcssa;
      $_4428 = $_1425_lcssa;
      label = 147;
      break;
    }
   case 54:
    $158 = $un << 2;
    $159 = $vn * 5 & -1;
    $160 = ($158 | 0) < ($159 | 0);
    if ($160) {
      label = 55;
      break;
    } else {
      label = 56;
      break;
    }
   case 55:
    ___gmpn_toom22_mul($prodp, $up, $un, $vp, $vn, $81);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 56:
    $163 = $vn * 7 & -1;
    $164 = ($158 | 0) < ($163 | 0);
    if ($164) {
      label = 57;
      break;
    } else {
      label = 58;
      break;
    }
   case 57:
    ___gmpn_toom32_mul($prodp, $up, $un, $vp, $vn, $81);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 58:
    ___gmpn_toom42_mul($prodp, $up, $un, $vp, $vn, $81);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 59:
    $168 = $vn + $un | 0;
    $169 = $168 >> 1;
    $170 = ($169 | 0) > 2999;
    if ($170) {
      label = 60;
      break;
    } else {
      label = 61;
      break;
    }
   case 60:
    $172 = $vn * 3 & -1;
    $173 = ($172 | 0) > 2999;
    if ($173) {
      label = 123;
      break;
    } else {
      label = 61;
      break;
    }
   case 61:
    $175 = ($vn | 0) > 299;
    if ($175) {
      label = 62;
      break;
    } else {
      label = 63;
      break;
    }
   case 62:
    $177 = $un * 3 & -1;
    $178 = $177 + 12 | 0;
    $179 = $vn << 2;
    $180 = ($178 | 0) < ($179 | 0);
    if ($180) {
      label = 107;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    $182 = $vn << 6;
    $183 = $182 + 400 | 0;
    $184 = STACKTOP;
    STACKTOP = STACKTOP + $183 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $185 = $184;
    $186 = $un << 1;
    $187 = $vn * 5 & -1;
    $188 = ($186 | 0) < ($187 | 0);
    if ($188) {
      label = 90;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    $190 = $vn * 7 & -1;
    $191 = $190 >>> 1;
    $192 = $191 << 2;
    $193 = STACKTOP;
    STACKTOP = STACKTOP + $192 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $194 = $193;
    $195 = ($vn | 0) > 109;
    $196 = $vn << 1;
    if ($195) {
      label = 66;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    ___gmpn_toom42_mul($prodp, $up, $196, $vp, $vn, $185);
    label = 67;
    break;
   case 66:
    ___gmpn_toom63_mul($prodp, $up, $196, $vp, $vn, $185);
    label = 67;
    break;
   case 67:
    $_2514 = $prodp + ($196 << 2) | 0;
    $_2422515 = $up + ($196 << 2) | 0;
    $_2426516 = $un - $196 | 0;
    $199 = $_2426516 << 1;
    $200 = ($199 | 0) < ($187 | 0);
    if ($200) {
      $un_pn434_lcssa = $un;
      $prodp_pn436_lcssa = $prodp;
      $_2_lcssa = $_2514;
      $_2422_lcssa = $_2422515;
      $_2426_lcssa = $_2426516;
      label = 79;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    $201 = ($196 | 0) == 0;
    $_2_sum440 = $196 + $vn | 0;
    $202 = $196 - 1 | 0;
    $_2_sum442 = $196 + $vn | 0;
    $203 = $194 + ($vn << 2) | 0;
    $_sum443 = $vn + 1 | 0;
    $204 = $194 + ($_sum443 << 2) | 0;
    $205 = $vn * 5 & -1;
    $206 = $205 - 1 | 0;
    $scevgep573 = $prodp + ($206 << 2) | 0;
    $207 = $vn << 1;
    $prodp_pn436517 = $prodp;
    $_2518 = $_2514;
    $_2422519 = $_2422515;
    $_2426520 = $_2426516;
    $indvars_iv574 = $scevgep573;
    label = 69;
    break;
   case 69:
    if ($195) {
      label = 71;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    ___gmpn_toom42_mul($194, $_2422519, $196, $vp, $vn, $185);
    label = 72;
    break;
   case 71:
    ___gmpn_toom63_mul($194, $_2422519, $196, $vp, $vn, $185);
    label = 72;
    break;
   case 72:
    $212 = ___gmpn_add_n($_2518, $_2518, $194, $vn) | 0;
    if ($201) {
      label = 76;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    $214 = $prodp_pn436517 + ($_2_sum442 << 2) | 0;
    $215 = HEAP32[$203 >> 2] | 0;
    $__x27_0 = $215;
    $__src26_0 = $204;
    $__dst25_0 = $214;
    $__n24_0 = $202;
    label = 74;
    break;
   case 74:
    $217 = $__dst25_0 + 4 | 0;
    HEAP32[$__dst25_0 >> 2] = $__x27_0;
    $218 = $__src26_0 + 4 | 0;
    $219 = HEAP32[$__src26_0 >> 2] | 0;
    $220 = $__n24_0 - 1 | 0;
    $221 = ($220 | 0) == 0;
    if ($221) {
      label = 75;
      break;
    } else {
      $__x27_0 = $219;
      $__src26_0 = $218;
      $__dst25_0 = $217;
      $__n24_0 = $220;
      label = 74;
      break;
    }
   case 75:
    HEAP32[$indvars_iv574 >> 2] = $219;
    label = 76;
    break;
   case 76:
    $224 = $prodp_pn436517 + ($_2_sum440 << 2) | 0;
    $225 = HEAP32[$224 >> 2] | 0;
    $uadd441$0 = _llvm_uadd_with_overflow_i32($225 | 0, $212 | 0) | 0;
    $uadd441$1 = tempRet0;
    $226 = $uadd441$0;
    HEAP32[$224 >> 2] = $226;
    $227 = $uadd441$1;
    if ($227) {
      $__p29_0 = $224;
      label = 78;
      break;
    } else {
      label = 77;
      break;
    }
   case 77:
    $_2 = $_2518 + ($196 << 2) | 0;
    $_2422 = $_2422519 + ($196 << 2) | 0;
    $_2426 = $_2426520 - $196 | 0;
    $228 = $_2426 << 1;
    $229 = ($228 | 0) < ($187 | 0);
    $scevgep576591 = $indvars_iv574 + ($207 << 2) | 0;
    if ($229) {
      $un_pn434_lcssa = $_2426520;
      $prodp_pn436_lcssa = $_2518;
      $_2_lcssa = $_2;
      $_2422_lcssa = $_2422;
      $_2426_lcssa = $_2426;
      label = 79;
      break;
    } else {
      $prodp_pn436517 = $_2518;
      $_2518 = $_2;
      $_2422519 = $_2422;
      $_2426520 = $_2426;
      $indvars_iv574 = $scevgep576591;
      label = 69;
      break;
    }
   case 78:
    $230 = $__p29_0 + 4 | 0;
    $231 = HEAP32[$230 >> 2] | 0;
    $232 = $231 + 1 | 0;
    HEAP32[$230 >> 2] = $232;
    $233 = ($232 | 0) == 0;
    if ($233) {
      $__p29_0 = $230;
      label = 78;
      break;
    } else {
      label = 77;
      break;
    }
   case 79:
    $234 = ($_2426_lcssa | 0) < ($vn | 0);
    if ($234) {
      label = 80;
      break;
    } else {
      label = 81;
      break;
    }
   case 80:
    $236 = ___gmpn_mul($194, $vp, $vn, $_2422_lcssa, $_2426_lcssa) | 0;
    label = 82;
    break;
   case 81:
    $238 = ___gmpn_mul($194, $_2422_lcssa, $_2426_lcssa, $vp, $vn) | 0;
    label = 82;
    break;
   case 82:
    $240 = ___gmpn_add_n($_2_lcssa, $_2_lcssa, $194, $vn) | 0;
    $241 = ($un_pn434_lcssa | 0) == ($196 | 0);
    if ($241) {
      label = 88;
      break;
    } else {
      label = 83;
      break;
    }
   case 83:
    $243 = $_2426_lcssa - 1 | 0;
    $_2_sum438 = $196 + $vn | 0;
    $244 = $prodp_pn436_lcssa + ($_2_sum438 << 2) | 0;
    $245 = $194 + ($vn << 2) | 0;
    $246 = HEAP32[$245 >> 2] | 0;
    $247 = ($243 | 0) == 0;
    if ($247) {
      $__x33_1 = $246;
      $__dst31_1 = $244;
      label = 87;
      break;
    } else {
      label = 84;
      break;
    }
   case 84:
    $_sum439 = $vn + 1 | 0;
    $248 = $194 + ($_sum439 << 2) | 0;
    $249 = $vn * 3 & -1;
    $250 = $_2426_lcssa + $249 | 0;
    $251 = $250 - 1 | 0;
    $__x33_0 = $246;
    $__src32_0 = $248;
    $__dst31_0 = $244;
    $__n30_0 = $243;
    label = 85;
    break;
   case 85:
    $253 = $__dst31_0 + 4 | 0;
    HEAP32[$__dst31_0 >> 2] = $__x33_0;
    $254 = $__src32_0 + 4 | 0;
    $255 = HEAP32[$__src32_0 >> 2] | 0;
    $256 = $__n30_0 - 1 | 0;
    $257 = ($256 | 0) == 0;
    if ($257) {
      label = 86;
      break;
    } else {
      $__x33_0 = $255;
      $__src32_0 = $254;
      $__dst31_0 = $253;
      $__n30_0 = $256;
      label = 85;
      break;
    }
   case 86:
    $scevgep571 = $prodp_pn436_lcssa + ($251 << 2) | 0;
    $__x33_1 = $255;
    $__dst31_1 = $scevgep571;
    label = 87;
    break;
   case 87:
    HEAP32[$__dst31_1 >> 2] = $__x33_1;
    label = 88;
    break;
   case 88:
    $_2_sum = $196 + $vn | 0;
    $260 = $prodp_pn436_lcssa + ($_2_sum << 2) | 0;
    $261 = HEAP32[$260 >> 2] | 0;
    $uadd437$0 = _llvm_uadd_with_overflow_i32($261 | 0, $240 | 0) | 0;
    $uadd437$1 = tempRet0;
    $262 = $uadd437$0;
    HEAP32[$260 >> 2] = $262;
    $263 = $uadd437$1;
    if ($263) {
      $__p35_0 = $260;
      label = 89;
      break;
    } else {
      $_4 = $_2_lcssa;
      $_4428 = $_2426_lcssa;
      label = 147;
      break;
    }
   case 89:
    $264 = $__p35_0 + 4 | 0;
    $265 = HEAP32[$264 >> 2] | 0;
    $266 = $265 + 1 | 0;
    HEAP32[$264 >> 2] = $266;
    $267 = ($266 | 0) == 0;
    if ($267) {
      $__p35_0 = $264;
      label = 89;
      break;
    } else {
      $_4 = $_2_lcssa;
      $_4428 = $_2426_lcssa;
      label = 147;
      break;
    }
   case 90:
    $269 = $un * 6 & -1;
    $270 = $vn * 7 & -1;
    $271 = ($269 | 0) < ($270 | 0);
    if ($271) {
      label = 91;
      break;
    } else {
      label = 92;
      break;
    }
   case 91:
    ___gmpn_toom33_mul($prodp, $up, $un, $vp, $vn, $185);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 92:
    $274 = $vn * 3 & -1;
    $275 = ($186 | 0) < ($274 | 0);
    if ($275) {
      label = 93;
      break;
    } else {
      label = 96;
      break;
    }
   case 93:
    if ($76) {
      label = 95;
      break;
    } else {
      label = 94;
      break;
    }
   case 94:
    ___gmpn_toom32_mul($prodp, $up, $un, $vp, $vn, $185);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 95:
    ___gmpn_toom43_mul($prodp, $up, $un, $vp, $vn, $185);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 96:
    $280 = $vn * 11 & -1;
    $281 = ($269 | 0) < ($280 | 0);
    if ($281) {
      label = 97;
      break;
    } else {
      label = 104;
      break;
    }
   case 97:
    $283 = $un << 2;
    $284 = ($283 | 0) < ($270 | 0);
    if ($284) {
      label = 98;
      break;
    } else {
      label = 101;
      break;
    }
   case 98:
    $286 = ($vn | 0) > 109;
    if ($286) {
      label = 100;
      break;
    } else {
      label = 99;
      break;
    }
   case 99:
    ___gmpn_toom32_mul($prodp, $up, $un, $vp, $vn, $185);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 100:
    ___gmpn_toom53_mul($prodp, $up, $un, $vp, $vn, $185);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 101:
    if ($76) {
      label = 103;
      break;
    } else {
      label = 102;
      break;
    }
   case 102:
    ___gmpn_toom42_mul($prodp, $up, $un, $vp, $vn, $185);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 103:
    ___gmpn_toom53_mul($prodp, $up, $un, $vp, $vn, $185);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 104:
    $293 = ($vn | 0) > 109;
    if ($293) {
      label = 106;
      break;
    } else {
      label = 105;
      break;
    }
   case 105:
    ___gmpn_toom42_mul($prodp, $up, $un, $vp, $vn, $185);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 106:
    ___gmpn_toom63_mul($prodp, $up, $un, $vp, $vn, $185);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 107:
    HEAP32[$__tmp_marker >> 2] = 0;
    $297 = ($vn | 0) > 349;
    if ($297) {
      label = 112;
      break;
    } else {
      label = 108;
      break;
    }
   case 108:
    $299 = $un * 12 & -1;
    $300 = $299 + 128 | 0;
    $301 = $300 >>> 0 < 65536;
    if ($301) {
      label = 109;
      break;
    } else {
      label = 110;
      break;
    }
   case 109:
    $303 = STACKTOP;
    STACKTOP = STACKTOP + $300 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $307 = $303;
    label = 111;
    break;
   case 110:
    $305 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $300) | 0;
    $307 = $305;
    label = 111;
    break;
   case 111:
    $308 = $307;
    ___gmpn_toom44_mul($prodp, $up, $un, $vp, $vn, $308);
    label = 121;
    break;
   case 112:
    $310 = ($vn | 0) > 449;
    if ($310) {
      label = 117;
      break;
    } else {
      label = 113;
      break;
    }
   case 113:
    $312 = _mpn_toom6h_mul_itch($un, $vn) | 0;
    $313 = $312 << 2;
    $314 = $313 >>> 0 < 65536;
    if ($314) {
      label = 114;
      break;
    } else {
      label = 115;
      break;
    }
   case 114:
    $316 = STACKTOP;
    STACKTOP = STACKTOP + $313 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $320 = $316;
    label = 116;
    break;
   case 115:
    $318 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $313) | 0;
    $320 = $318;
    label = 116;
    break;
   case 116:
    $321 = $320;
    ___gmpn_toom6h_mul($prodp, $up, $un, $vp, $vn, $321);
    label = 121;
    break;
   case 117:
    $323 = _mpn_toom8h_mul_itch($un, $vn) | 0;
    $324 = $323 << 2;
    $325 = $324 >>> 0 < 65536;
    if ($325) {
      label = 118;
      break;
    } else {
      label = 119;
      break;
    }
   case 118:
    $327 = STACKTOP;
    STACKTOP = STACKTOP + $324 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $331 = $327;
    label = 120;
    break;
   case 119:
    $329 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $324) | 0;
    $331 = $329;
    label = 120;
    break;
   case 120:
    $332 = $331;
    ___gmpn_toom8h_mul($prodp, $up, $un, $vp, $vn, $332);
    label = 121;
    break;
   case 121:
    $334 = HEAP32[$__tmp_marker >> 2] | 0;
    $335 = ($334 | 0) == 0;
    if ($335) {
      $_4 = $prodp;
      $_4428 = $un;
      label = 147;
      break;
    } else {
      label = 122;
      break;
    }
   case 122:
    ___gmp_tmp_reentrant_free($334);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 123:
    $338 = $vn << 3;
    $339 = ($338 | 0) > ($un | 0);
    if ($339) {
      label = 146;
      break;
    } else {
      label = 124;
      break;
    }
   case 124:
    HEAP32[$__tmp_marker39 >> 2] = 0;
    $341 = $vn * 9 & -1;
    $342 = $341 >>> 1;
    $343 = $342 << 2;
    $344 = ___gmp_tmp_reentrant_alloc($__tmp_marker39, $343) | 0;
    $345 = $344;
    ___gmpn_nussbaumer_mul($prodp, $up, $172, $vp, $vn);
    $_3487 = $prodp + ($172 << 2) | 0;
    $_3423488 = $up + ($172 << 2) | 0;
    $_3427489 = $un - $172 | 0;
    $346 = $_3427489 << 1;
    $347 = $vn * 7 & -1;
    $348 = ($346 | 0) < ($347 | 0);
    if ($348) {
      $un_pn444_lcssa = $un;
      $prodp_pn446_lcssa = $prodp;
      $_3_lcssa = $_3487;
      $_3423_lcssa = $_3423488;
      $_3427_lcssa = $_3427489;
      label = 133;
      break;
    } else {
      label = 125;
      break;
    }
   case 125:
    $349 = ($172 | 0) == 0;
    $_3_sum450 = $172 + $vn | 0;
    $350 = $172 - 1 | 0;
    $_3_sum452 = $172 + $vn | 0;
    $351 = $345 + ($vn << 2) | 0;
    $_sum453 = $vn + 1 | 0;
    $352 = $345 + ($_sum453 << 2) | 0;
    $353 = ($350 | 0) == 0;
    $354 = $vn * 7 & -1;
    $355 = $354 - 1 | 0;
    $scevgep564 = $prodp + ($355 << 2) | 0;
    $356 = $vn * 3 & -1;
    $prodp_pn446490 = $prodp;
    $_3491 = $_3487;
    $_3423492 = $_3423488;
    $_3427493 = $_3427489;
    $indvars_iv = $scevgep564;
    label = 126;
    break;
   case 126:
    ___gmpn_nussbaumer_mul($345, $_3423492, $172, $vp, $vn);
    $358 = ___gmpn_add_n($_3491, $_3491, $345, $vn) | 0;
    if ($349) {
      label = 130;
      break;
    } else {
      label = 127;
      break;
    }
   case 127:
    $360 = $prodp_pn446490 + ($_3_sum452 << 2) | 0;
    $361 = HEAP32[$351 >> 2] | 0;
    if ($353) {
      $__x43_1 = $361;
      $__dst41_1 = $360;
      label = 129;
      break;
    } else {
      $__x43_0 = $361;
      $__src42_0 = $352;
      $__dst41_0 = $360;
      $__n40_0 = $350;
      label = 128;
      break;
    }
   case 128:
    $362 = $__dst41_0 + 4 | 0;
    HEAP32[$__dst41_0 >> 2] = $__x43_0;
    $363 = $__src42_0 + 4 | 0;
    $364 = HEAP32[$__src42_0 >> 2] | 0;
    $365 = $__n40_0 - 1 | 0;
    $366 = ($365 | 0) == 0;
    if ($366) {
      $__x43_1 = $364;
      $__dst41_1 = $indvars_iv;
      label = 129;
      break;
    } else {
      $__x43_0 = $364;
      $__src42_0 = $363;
      $__dst41_0 = $362;
      $__n40_0 = $365;
      label = 128;
      break;
    }
   case 129:
    HEAP32[$__dst41_1 >> 2] = $__x43_1;
    label = 130;
    break;
   case 130:
    $368 = $prodp_pn446490 + ($_3_sum450 << 2) | 0;
    $369 = HEAP32[$368 >> 2] | 0;
    $uadd451$0 = _llvm_uadd_with_overflow_i32($369 | 0, $358 | 0) | 0;
    $uadd451$1 = tempRet0;
    $370 = $uadd451$0;
    HEAP32[$368 >> 2] = $370;
    $371 = $uadd451$1;
    if ($371) {
      $__p45_0 = $368;
      label = 132;
      break;
    } else {
      label = 131;
      break;
    }
   case 131:
    $_3 = $_3491 + ($172 << 2) | 0;
    $_3423 = $_3423492 + ($172 << 2) | 0;
    $_3427 = $_3427493 - $172 | 0;
    $372 = $_3427 << 1;
    $373 = ($372 | 0) < ($347 | 0);
    $scevgep566592 = $indvars_iv + ($356 << 2) | 0;
    if ($373) {
      $un_pn444_lcssa = $_3427493;
      $prodp_pn446_lcssa = $_3491;
      $_3_lcssa = $_3;
      $_3423_lcssa = $_3423;
      $_3427_lcssa = $_3427;
      label = 133;
      break;
    } else {
      $prodp_pn446490 = $_3491;
      $_3491 = $_3;
      $_3423492 = $_3423;
      $_3427493 = $_3427;
      $indvars_iv = $scevgep566592;
      label = 126;
      break;
    }
   case 132:
    $374 = $__p45_0 + 4 | 0;
    $375 = HEAP32[$374 >> 2] | 0;
    $376 = $375 + 1 | 0;
    HEAP32[$374 >> 2] = $376;
    $377 = ($376 | 0) == 0;
    if ($377) {
      $__p45_0 = $374;
      label = 132;
      break;
    } else {
      label = 131;
      break;
    }
   case 133:
    $378 = ($_3427_lcssa | 0) < ($vn | 0);
    if ($378) {
      label = 134;
      break;
    } else {
      label = 135;
      break;
    }
   case 134:
    $380 = ___gmpn_mul($345, $vp, $vn, $_3423_lcssa, $_3427_lcssa) | 0;
    label = 136;
    break;
   case 135:
    $382 = ___gmpn_mul($345, $_3423_lcssa, $_3427_lcssa, $vp, $vn) | 0;
    label = 136;
    break;
   case 136:
    $384 = ___gmpn_add_n($_3_lcssa, $_3_lcssa, $345, $vn) | 0;
    $385 = ($un_pn444_lcssa | 0) == ($172 | 0);
    if ($385) {
      label = 142;
      break;
    } else {
      label = 137;
      break;
    }
   case 137:
    $387 = $_3427_lcssa - 1 | 0;
    $_3_sum448 = $172 + $vn | 0;
    $388 = $prodp_pn446_lcssa + ($_3_sum448 << 2) | 0;
    $389 = $345 + ($vn << 2) | 0;
    $390 = HEAP32[$389 >> 2] | 0;
    $391 = ($387 | 0) == 0;
    if ($391) {
      $__x49_1 = $390;
      $__dst47_1 = $388;
      label = 141;
      break;
    } else {
      label = 138;
      break;
    }
   case 138:
    $_sum449 = $vn + 1 | 0;
    $392 = $345 + ($_sum449 << 2) | 0;
    $393 = $vn << 2;
    $394 = $_3427_lcssa + $393 | 0;
    $395 = $394 - 1 | 0;
    $__x49_0 = $390;
    $__src48_0 = $392;
    $__dst47_0 = $388;
    $__n46_0 = $387;
    label = 139;
    break;
   case 139:
    $397 = $__dst47_0 + 4 | 0;
    HEAP32[$__dst47_0 >> 2] = $__x49_0;
    $398 = $__src48_0 + 4 | 0;
    $399 = HEAP32[$__src48_0 >> 2] | 0;
    $400 = $__n46_0 - 1 | 0;
    $401 = ($400 | 0) == 0;
    if ($401) {
      label = 140;
      break;
    } else {
      $__x49_0 = $399;
      $__src48_0 = $398;
      $__dst47_0 = $397;
      $__n46_0 = $400;
      label = 139;
      break;
    }
   case 140:
    $scevgep562 = $prodp_pn446_lcssa + ($395 << 2) | 0;
    $__x49_1 = $399;
    $__dst47_1 = $scevgep562;
    label = 141;
    break;
   case 141:
    HEAP32[$__dst47_1 >> 2] = $__x49_1;
    label = 142;
    break;
   case 142:
    $_3_sum = $172 + $vn | 0;
    $404 = $prodp_pn446_lcssa + ($_3_sum << 2) | 0;
    $405 = HEAP32[$404 >> 2] | 0;
    $uadd447$0 = _llvm_uadd_with_overflow_i32($405 | 0, $384 | 0) | 0;
    $uadd447$1 = tempRet0;
    $406 = $uadd447$0;
    HEAP32[$404 >> 2] = $406;
    $407 = $uadd447$1;
    if ($407) {
      $__p51_0 = $404;
      label = 143;
      break;
    } else {
      label = 144;
      break;
    }
   case 143:
    $408 = $__p51_0 + 4 | 0;
    $409 = HEAP32[$408 >> 2] | 0;
    $410 = $409 + 1 | 0;
    HEAP32[$408 >> 2] = $410;
    $411 = ($410 | 0) == 0;
    if ($411) {
      $__p51_0 = $408;
      label = 143;
      break;
    } else {
      label = 144;
      break;
    }
   case 144:
    $412 = HEAP32[$__tmp_marker39 >> 2] | 0;
    $413 = ($412 | 0) == 0;
    if ($413) {
      $_4 = $_3_lcssa;
      $_4428 = $_3427_lcssa;
      label = 147;
      break;
    } else {
      label = 145;
      break;
    }
   case 145:
    ___gmp_tmp_reentrant_free($412);
    $_4 = $_3_lcssa;
    $_4428 = $_3427_lcssa;
    label = 147;
    break;
   case 146:
    ___gmpn_nussbaumer_mul($prodp, $up, $un, $vp, $vn);
    $_4 = $prodp;
    $_4428 = $un;
    label = 147;
    break;
   case 147:
    $416 = $vn - 1 | 0;
    $417 = $416 + $_4428 | 0;
    $418 = $_4 + ($417 << 2) | 0;
    $419 = HEAP32[$418 >> 2] | 0;
    STACKTOP = __stackBase__;
    return $419 | 0;
  }
  return 0;
}
function ___gmpn_fft_next_size($pl, $k) {
  $pl = $pl | 0;
  $k = $k | 0;
  return ($pl - 1 >> $k) + 1 << $k | 0;
}
function _mpn_mul_fft_lcm($k) {
  $k = $k | 0;
  var $1 = 0, $_02 = 0, $_051 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_0_lcssa = 0, $8 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($k | 0) == 0;
    if ($1) {
      $_0_lcssa = 32;
      label = 3;
      break;
    } else {
      $_051 = $k;
      $_02 = 32;
      label = 2;
      break;
    }
   case 2:
    $2 = $_02 >>> 1;
    $3 = $_051 - 1 | 0;
    $4 = $2 & 1;
    $5 = ($4 | 0) == 0;
    $6 = ($3 | 0) != 0;
    $7 = $5 & $6;
    if ($7) {
      $_051 = $3;
      $_02 = $2;
      label = 2;
      break;
    } else {
      $_0_lcssa = $2;
      label = 3;
      break;
    }
   case 3:
    $8 = $_0_lcssa << $k;
    return $8 | 0;
  }
  return 0;
}
function ___gmpn_fft_best_k($n, $sqr) {
  $n = $n | 0;
  $sqr = $sqr | 0;
  var $i_0 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $i_0 = 0;
    label = 2;
    break;
   case 2:
    $2 = 992 + ($sqr << 6) + ($i_0 << 2) | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($3 | 0) == 0;
    if ($4) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $6 = ($3 | 0) > ($n | 0);
    $7 = $i_0 + 1 | 0;
    if ($6) {
      label = 4;
      break;
    } else {
      $i_0 = $7;
      label = 2;
      break;
    }
   case 4:
    $9 = $i_0 + 4 | 0;
    $_0 = $9;
    label = 9;
    break;
   case 5:
    $11 = ($i_0 | 0) == 0;
    if ($11) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $13 = $i_0 - 1 | 0;
    $14 = 992 + ($sqr << 6) + ($13 << 2) | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $15 << 2;
    $17 = ($16 | 0) > ($n | 0);
    if ($17) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $19 = $i_0 + 4 | 0;
    $_0 = $19;
    label = 9;
    break;
   case 8:
    $21 = $i_0 + 5 | 0;
    $_0 = $21;
    label = 9;
    break;
   case 9:
    return $_0 | 0;
  }
  return 0;
}
function _mpn_fft_initl($l, $k) {
  $l = $l | 0;
  $k = $k | 0;
  var $1 = 0, $2 = 0, $3 = 0, $i_019 = 0, $K_017 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j_016 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $exitcond = 0, $20 = 0, $21 = 0, $exitcond23 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP32[$l >> 2] | 0;
    HEAP32[$1 >> 2] = 0;
    $2 = ($k | 0) < 1;
    if ($2) {
      label = 7;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = $k + 1 | 0;
    $K_017 = 1;
    $i_019 = 1;
    label = 3;
    break;
   case 3:
    $5 = $l + ($i_019 << 2) | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($K_017 | 0) > 0;
    if ($7) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $8 = $i_019 - 1 | 0;
    $9 = $l + ($8 << 2) | 0;
    $j_016 = 0;
    label = 5;
    break;
   case 5:
    $11 = HEAP32[$9 >> 2] | 0;
    $12 = $11 + ($j_016 << 2) | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13 << 1;
    $15 = $6 + ($j_016 << 2) | 0;
    HEAP32[$15 >> 2] = $14;
    $16 = $14 | 1;
    $17 = $j_016 + $K_017 | 0;
    $18 = $6 + ($17 << 2) | 0;
    HEAP32[$18 >> 2] = $16;
    $19 = $j_016 + 1 | 0;
    $exitcond = ($19 | 0) == ($K_017 | 0);
    if ($exitcond) {
      label = 6;
      break;
    } else {
      $j_016 = $19;
      label = 5;
      break;
    }
   case 6:
    $20 = $i_019 + 1 | 0;
    $21 = $K_017 << 1;
    $exitcond23 = ($20 | 0) == ($3 | 0);
    if ($exitcond23) {
      label = 7;
      break;
    } else {
      $K_017 = $21;
      $i_019 = $20;
      label = 3;
      break;
    }
   case 7:
    return;
  }
}
function _mpn_mul_fft_internal($op, $pl, $k, $Ap, $Bp, $B, $nprime, $l, $Mp, $fft_l, $T, $sqr) {
  $op = $op | 0;
  $pl = $pl | 0;
  $k = $k | 0;
  $Ap = $Ap | 0;
  $Bp = $Bp | 0;
  $B = $B | 0;
  $nprime = $nprime | 0;
  $l = $l | 0;
  $Mp = $Mp | 0;
  $fft_l = $fft_l | 0;
  $T = $T | 0;
  $sqr = $sqr | 0;
  var $B21 = 0, $T22 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $_sum = 0, $8 = 0, $9 = 0, $10 = 0, $i_017 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $exitcond = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $_sum6 = 0, $39 = 0, $40 = 0, $i_113 = 0, $cc_012 = 0, $lo_011 = 0, $sh_010 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $_sum7 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $cc_1 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $cc_2 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $_sum3 = 0, $73 = 0, $74 = 0, $75 = 0, $_sum4 = 0, $77 = 0, $78 = 0, $79 = 0, $_sum5 = 0, $80 = 0, $81 = 0, $83 = 0, $84 = 0, $_sum2 = 0, $85 = 0, $cc_3 = 0, $87 = 0, $88 = 0, $_sum1 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $B21 = $B;
    $T22 = $T;
    $1 = 1 << $k;
    $2 = $fft_l + ($k << 2) | 0;
    $3 = $Mp << 1;
    _mpn_fft_fft($Ap, $1, $2, $3, $nprime, 1, $T);
    $4 = ($sqr | 0) != 0;
    if ($4) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _mpn_fft_fft($Bp, $1, $2, $3, $nprime, 1, $T);
    label = 3;
    break;
   case 3:
    $7 = $4 ? $Ap : $Bp;
    _mpn_fft_mul_modF_K($Ap, $7, $nprime, $1);
    _mpn_fft_fftinv($Ap, $1, $3, $nprime, $T);
    $_sum = $nprime + 1 | 0;
    $8 = $T + ($_sum << 2) | 0;
    HEAP32[$Bp >> 2] = $8;
    $9 = HEAP32[$Ap >> 2] | 0;
    _mpn_fft_div_2exp_modF($8, $9, $k, $nprime);
    $10 = ($1 | 0) > 1;
    if ($10) {
      $i_017 = 1;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $11 = $i_017 - 1 | 0;
    $12 = $Ap + ($11 << 2) | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $Bp + ($i_017 << 2) | 0;
    HEAP32[$14 >> 2] = $13;
    $15 = $Ap + ($i_017 << 2) | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $1 - $i_017 | 0;
    $18 = Math_imul($17, $Mp);
    $19 = $18 + $k | 0;
    _mpn_fft_div_2exp_modF($13, $16, $19, $nprime);
    $20 = $i_017 + 1 | 0;
    $exitcond = ($20 | 0) == ($1 | 0);
    if ($exitcond) {
      label = 5;
      break;
    } else {
      $i_017 = $20;
      label = 4;
      break;
    }
   case 5:
    $21 = $nprime + 1 | 0;
    $22 = ($21 | 0) == 0;
    if ($22) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $23 = $nprime << 2;
    $24 = $23 + 4 | 0;
    _memset($T22 | 0, 0, $24 | 0);
    label = 7;
    break;
   case 7:
    $26 = $1 - 1 | 0;
    $27 = Math_imul($26, $l);
    $28 = $27 + $nprime | 0;
    $29 = $28 + 1 | 0;
    $30 = ($29 | 0) == 0;
    if ($30) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $31 = $1 - 1 | 0;
    $32 = Math_imul($31, $l);
    $33 = $32 + $nprime | 0;
    $34 = $33 << 2;
    $35 = $34 + 4 | 0;
    _memset($B21 | 0, 0, $35 | 0);
    label = 9;
    break;
   case 9:
    $36 = ($1 | 0) > 0;
    if ($36) {
      label = 10;
      break;
    } else {
      label = 23;
      break;
    }
   case 10:
    $37 = $l << 1;
    $38 = $T + ($37 << 2) | 0;
    $_sum6 = $nprime + 1 | 0;
    $39 = $nprime ^ -1;
    $40 = $29 + $39 | 0;
    $sh_010 = $27;
    $lo_011 = $28;
    $cc_012 = 0;
    $i_113 = $26;
    label = 11;
    break;
   case 11:
    $42 = $B + ($sh_010 << 2) | 0;
    $43 = $1 - $i_113 | 0;
    $44 = $43 & $26;
    $45 = $Bp + ($44 << 2) | 0;
    $46 = HEAP32[$45 >> 2] | 0;
    $47 = ___gmpn_add_n($42, $42, $46, $21) | 0;
    $48 = ($47 | 0) == 0;
    if ($48) {
      $cc_1 = $cc_012;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $_sum7 = $_sum6 + $sh_010 | 0;
    $50 = $B + ($_sum7 << 2) | 0;
    $51 = $40 - $sh_010 | 0;
    $52 = ___gmpn_add_1($50, $50, $51, 1) | 0;
    $53 = $52 + $cc_012 | 0;
    $cc_1 = $53;
    label = 13;
    break;
   case 13:
    $55 = $i_113 + 1 | 0;
    HEAP32[$38 >> 2] = $55;
    $56 = HEAP32[$45 >> 2] | 0;
    $57 = ___gmpn_cmp($56, $T, $21) | 0;
    $58 = ($57 | 0) > 0;
    if ($58) {
      label = 14;
      break;
    } else {
      $cc_2 = $cc_1;
      label = 15;
      break;
    }
   case 14:
    $60 = $29 - $sh_010 | 0;
    $61 = ___gmpn_sub_1($42, $42, $60, 1) | 0;
    $62 = $cc_1 - $61 | 0;
    $63 = $B + ($lo_011 << 2) | 0;
    $64 = $29 - $lo_011 | 0;
    $65 = ___gmpn_sub_1($63, $63, $64, 1) | 0;
    $66 = $62 - $65 | 0;
    $cc_2 = $66;
    label = 15;
    break;
   case 15:
    $68 = $i_113 - 1 | 0;
    $69 = $lo_011 - $l | 0;
    $70 = $sh_010 - $l | 0;
    $71 = ($i_113 | 0) > 0;
    if ($71) {
      $sh_010 = $70;
      $lo_011 = $69;
      $cc_012 = $cc_2;
      $i_113 = $68;
      label = 11;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    if (($cc_2 | 0) == (-1 | 0)) {
      label = 17;
      break;
    } else if (($cc_2 | 0) == 1) {
      label = 19;
      break;
    } else {
      label = 23;
      break;
    }
   case 17:
    $_sum3 = $29 - $pl | 0;
    $73 = $B + ($_sum3 << 2) | 0;
    $74 = ___gmpn_add_1($73, $73, $pl, 1) | 0;
    $75 = ($74 | 0) == 0;
    if ($75) {
      label = 23;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $_sum4 = $_sum3 - 1 | 0;
    $77 = $B + ($_sum4 << 2) | 0;
    $78 = $pl + 1 | 0;
    $79 = ___gmpn_sub_1($77, $77, $78, 1) | 0;
    $_sum5 = $27 + $nprime | 0;
    $80 = $B + ($_sum5 << 2) | 0;
    $81 = ___gmpn_sub_1($80, $80, 1, 1) | 0;
    label = 23;
    break;
   case 19:
    $83 = $pl << 1;
    $84 = ($29 | 0) < ($83 | 0);
    if ($84) {
      label = 22;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $_sum2 = $29 - $83 | 0;
    $85 = $B + ($_sum2 << 2) | 0;
    $cc_3 = 1;
    label = 21;
    break;
   case 21:
    $87 = ___gmpn_add_1($85, $85, $83, $cc_3) | 0;
    $88 = ($87 | 0) == 0;
    if ($88) {
      label = 23;
      break;
    } else {
      $cc_3 = $87;
      label = 21;
      break;
    }
   case 22:
    $_sum1 = $29 - $pl | 0;
    $90 = $B + ($_sum1 << 2) | 0;
    $91 = ___gmpn_sub_1($90, $90, $pl, $cc_2) | 0;
    label = 23;
    break;
   case 23:
    $92 = _mpn_fft_norm_modF($op, $pl, $B, $29) | 0;
    return $92 | 0;
  }
  return 0;
}
function _mpn_fft_fft($Ap, $K, $ll, $omega, $n, $inc, $tp) {
  $Ap = $Ap | 0;
  $K = $K | 0;
  $ll = $ll | 0;
  $omega = $omega | 0;
  $n = $n | 0;
  $inc = $inc | 0;
  $tp = $tp | 0;
  var $1 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__n_0 = 0, $__dst_0 = 0, $_pn = 0, $__x_0 = 0, $__src_0 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $lk_079 = 0, $j_078 = 0, $_077 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($K | 0) == 2;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 11;
      break;
    }
   case 2:
    $3 = $n + 1 | 0;
    $4 = ($3 | 0) == 0;
    if ($4) {
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $6 = HEAP32[$Ap >> 2] | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($n | 0) == 0;
    if ($8) {
      $__x_1 = $7;
      $__dst_1 = $tp;
      label = 6;
      break;
    } else {
      $__x_0 = $7;
      $_pn = $6;
      $__dst_0 = $tp;
      $__n_0 = $n;
      label = 4;
      break;
    }
   case 4:
    $__src_0 = $_pn + 4 | 0;
    $9 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $10 = HEAP32[$__src_0 >> 2] | 0;
    $11 = $__n_0 - 1 | 0;
    $12 = ($11 | 0) == 0;
    if ($12) {
      label = 5;
      break;
    } else {
      $__x_0 = $10;
      $_pn = $__src_0;
      $__dst_0 = $9;
      $__n_0 = $11;
      label = 4;
      break;
    }
   case 5:
    $scevgep = $tp + ($n << 2) | 0;
    $__x_1 = $10;
    $__dst_1 = $scevgep;
    label = 6;
    break;
   case 6:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 7;
    break;
   case 7:
    $15 = HEAP32[$Ap >> 2] | 0;
    $16 = $Ap + ($inc << 2) | 0;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = ___gmpn_add_n($15, $15, $17, $3) | 0;
    $19 = HEAP32[$16 >> 2] | 0;
    $20 = ___gmpn_sub_n($19, $tp, $19, $3) | 0;
    $21 = HEAP32[$Ap >> 2] | 0;
    $22 = $21 + ($n << 2) | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $23 >>> 0 > 1;
    if ($24) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $26 = $23 - 1 | 0;
    $27 = ___gmpn_sub_1($21, $21, $n, $26) | 0;
    $28 = 1 - $27 | 0;
    $29 = HEAP32[$Ap >> 2] | 0;
    $30 = $29 + ($n << 2) | 0;
    HEAP32[$30 >> 2] = $28;
    label = 9;
    break;
   case 9:
    $32 = ($20 | 0) == 0;
    if ($32) {
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $34 = HEAP32[$16 >> 2] | 0;
    $35 = $34 + ($n << 2) | 0;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = -$36 | 0;
    $38 = ___gmpn_add_1($34, $34, $n, $37) | 0;
    $39 = HEAP32[$16 >> 2] | 0;
    $40 = $39 + ($n << 2) | 0;
    HEAP32[$40 >> 2] = $38;
    label = 13;
    break;
   case 11:
    $42 = HEAP32[$ll >> 2] | 0;
    $43 = $K >> 1;
    $44 = $ll - 4 | 0;
    $45 = $omega << 1;
    $46 = $inc << 1;
    _mpn_fft_fft($Ap, $43, $44, $45, $n, $46, $tp);
    $47 = $Ap + ($inc << 2) | 0;
    _mpn_fft_fft($47, $43, $44, $45, $n, $46, $tp);
    $48 = ($43 | 0) > 0;
    if ($48) {
      $_077 = $Ap;
      $j_078 = 0;
      $lk_079 = $42;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $49 = $_077 + ($inc << 2) | 0;
    $50 = HEAP32[$49 >> 2] | 0;
    $51 = HEAP32[$lk_079 >> 2] | 0;
    $52 = Math_imul($51, $omega);
    _mpn_fft_mul_2exp_modF($tp, $50, $52, $n);
    $53 = HEAP32[$49 >> 2] | 0;
    $54 = HEAP32[$_077 >> 2] | 0;
    _mpn_fft_sub_modF($53, $54, $tp, $n);
    $55 = HEAP32[$_077 >> 2] | 0;
    _mpn_fft_add_modF($55, $55, $tp, $n);
    $56 = $j_078 + 1 | 0;
    $57 = $lk_079 + 8 | 0;
    $58 = $_077 + ($46 << 2) | 0;
    $exitcond = ($56 | 0) == ($43 | 0);
    if ($exitcond) {
      label = 13;
      break;
    } else {
      $_077 = $58;
      $j_078 = $56;
      $lk_079 = $57;
      label = 12;
      break;
    }
   case 13:
    return;
  }
}
function ___gmpn_mul_fft($op, $pl, $n, $nl, $m, $ml, $k) {
  $op = $op | 0;
  $pl = $pl | 0;
  $n = $n | 0;
  $nl = $nl | 0;
  $m = $m | 0;
  $ml = $ml | 0;
  $k = $k | 0;
  var $__tmp_marker = 0, $1 = 0, $2 = 0, $_ = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $i_080 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $exitcond = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $nprime_078 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $nprime_1 = 0, $Nprime_1 = 0, $64 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $91 = 0, $93 = 0, $95 = 0, $96 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $107 = 0, $109 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $117 = 0, $120 = 0, $122 = 0, $124 = 0, $125 = 0, $127 = 0, $129 = 0, $131 = 0, $132 = 0, $B_0 = 0, $Bp_0 = 0, $134 = 0, $135 = 0, $136 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    $1 = ($n | 0) == ($m | 0);
    $2 = ($nl | 0) == ($ml | 0);
    $_ = $1 & $2;
    $3 = $_ & 1;
    $4 = ___gmpn_fft_next_size($pl, $k) | 0;
    $5 = ($4 | 0) == ($pl | 0);
    if ($5) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    ___gmp_assert_fail(7472, 824, 8704);
    return 0;
   case 3:
    HEAP32[$__tmp_marker >> 2] = 0;
    $8 = $pl << 5;
    $9 = $k << 2;
    $10 = $9 + 4 | 0;
    $11 = $10 >>> 0 < 65536;
    if ($11) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $13 = STACKTOP;
    STACKTOP = STACKTOP + $10 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $17 = $13;
    label = 6;
    break;
   case 5:
    $15 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $10) | 0;
    $17 = $15;
    label = 6;
    break;
   case 6:
    $18 = $17;
    $19 = ($k | 0) < 0;
    if ($19) {
      label = 12;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $20 = $k + 1 | 0;
    $i_080 = 0;
    label = 8;
    break;
   case 8:
    $22 = 4 << $i_080;
    $23 = $22 >>> 0 < 65536;
    if ($23) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $25 = STACKTOP;
    STACKTOP = STACKTOP + $22 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $29 = $25;
    label = 11;
    break;
   case 10:
    $27 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $22) | 0;
    $29 = $27;
    label = 11;
    break;
   case 11:
    $30 = $29;
    $31 = $18 + ($i_080 << 2) | 0;
    HEAP32[$31 >> 2] = $30;
    $32 = $i_080 + 1 | 0;
    $exitcond = ($32 | 0) == ($20 | 0);
    if ($exitcond) {
      label = 12;
      break;
    } else {
      $i_080 = $32;
      label = 8;
      break;
    }
   case 12:
    _mpn_fft_initl($18, $k);
    $33 = 1 << $k;
    $34 = $8 >> $k;
    $35 = $34 - 1 | 0;
    $36 = ($35 | 0) / 32 & -1;
    $37 = $36 + 1 | 0;
    $38 = _mpn_mul_fft_lcm($k) | 0;
    $39 = $34 << 1;
    $40 = $k + 2 | 0;
    $41 = $40 + $39 | 0;
    $42 = ($41 | 0) / ($38 | 0) & -1;
    $43 = $42 + 1 | 0;
    $44 = Math_imul($43, $38);
    $45 = ($44 | 0) / 32 & -1;
    $46 = $_ ? 360 : 300;
    $47 = ($45 | 0) < ($46 | 0);
    if ($47) {
      $Nprime_1 = $44;
      $nprime_1 = $45;
      label = 16;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $48 = ___gmpn_fft_best_k($45, $3) | 0;
    $49 = 1 << $48;
    $50 = $49 - 1 | 0;
    $51 = $50 & $45;
    $52 = ($51 | 0) == 0;
    if ($52) {
      $Nprime_1 = $44;
      $nprime_1 = $45;
      label = 16;
      break;
    } else {
      $nprime_078 = $45;
      $53 = $49;
      label = 14;
      break;
    }
   case 14:
    $54 = $nprime_078 - 1 | 0;
    $55 = $54 + $53 | 0;
    $56 = -$53 | 0;
    $57 = $55 & $56;
    $58 = ___gmpn_fft_best_k($57, $3) | 0;
    $59 = 1 << $58;
    $60 = $59 - 1 | 0;
    $61 = $60 & $57;
    $62 = ($61 | 0) == 0;
    if ($62) {
      label = 15;
      break;
    } else {
      $nprime_078 = $57;
      $53 = $59;
      label = 14;
      break;
    }
   case 15:
    $63 = $57 << 5;
    $Nprime_1 = $63;
    $nprime_1 = $57;
    label = 16;
    break;
   case 16:
    $64 = ($nprime_1 | 0) < ($pl | 0);
    if ($64) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    ___gmp_assert_fail(7472, 857, 7144);
    return 0;
   case 18:
    $67 = $nprime_1 + 1 | 0;
    $68 = $67 << 3;
    $69 = $68 >>> 0 < 65536;
    if ($69) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    $71 = STACKTOP;
    STACKTOP = STACKTOP + $68 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $75 = $71;
    label = 21;
    break;
   case 20:
    $73 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $68) | 0;
    $75 = $73;
    label = 21;
    break;
   case 21:
    $76 = $75;
    $77 = $Nprime_1 >> $k;
    $78 = $67 << $k;
    $79 = $78 << 2;
    $80 = $79 >>> 0 < 65536;
    if ($80) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    $82 = STACKTOP;
    STACKTOP = STACKTOP + $79 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $86 = $82;
    label = 24;
    break;
   case 23:
    $84 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $79) | 0;
    $86 = $84;
    label = 24;
    break;
   case 24:
    $87 = $86;
    $88 = $33 << 2;
    $89 = $88 >>> 0 < 65536;
    if ($89) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    $91 = STACKTOP;
    STACKTOP = STACKTOP + $88 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $95 = $91;
    label = 27;
    break;
   case 26:
    $93 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $88) | 0;
    $95 = $93;
    label = 27;
    break;
   case 27:
    $96 = $95;
    _mpn_mul_fft_decompose($87, $96, $33, $nprime_1, $n, $nl, $37, $77, $76);
    if ($_) {
      label = 28;
      break;
    } else {
      label = 35;
      break;
    }
   case 28:
    $98 = $33 - 1 | 0;
    $99 = Math_imul($37, $98);
    $100 = $nprime_1 + $99 | 0;
    $101 = $100 << 2;
    $102 = $101 + 4 | 0;
    $103 = $102 >>> 0 < 65536;
    if ($103) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    $105 = STACKTOP;
    STACKTOP = STACKTOP + $102 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $109 = $105;
    label = 31;
    break;
   case 30:
    $107 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $102) | 0;
    $109 = $107;
    label = 31;
    break;
   case 31:
    $110 = $109;
    if ($89) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    $112 = STACKTOP;
    STACKTOP = STACKTOP + $88 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $116 = $112;
    label = 34;
    break;
   case 33:
    $114 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $88) | 0;
    $116 = $114;
    label = 34;
    break;
   case 34:
    $117 = $116;
    $Bp_0 = $117;
    $B_0 = $110;
    label = 42;
    break;
   case 35:
    if ($80) {
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 36:
    $120 = STACKTOP;
    STACKTOP = STACKTOP + $79 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $124 = $120;
    label = 38;
    break;
   case 37:
    $122 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $79) | 0;
    $124 = $122;
    label = 38;
    break;
   case 38:
    $125 = $124;
    if ($89) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    $127 = STACKTOP;
    STACKTOP = STACKTOP + $88 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $131 = $127;
    label = 41;
    break;
   case 40:
    $129 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $88) | 0;
    $131 = $129;
    label = 41;
    break;
   case 41:
    $132 = $131;
    _mpn_mul_fft_decompose($125, $132, $33, $nprime_1, $m, $ml, $37, $77, $76);
    $Bp_0 = $132;
    $B_0 = $125;
    label = 42;
    break;
   case 42:
    $134 = _mpn_mul_fft_internal($op, $pl, $k, $96, $Bp_0, $B_0, $nprime_1, $37, $77, $18, $76, $3) | 0;
    $135 = HEAP32[$__tmp_marker >> 2] | 0;
    $136 = ($135 | 0) == 0;
    if ($136) {
      label = 44;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    ___gmp_tmp_reentrant_free($135);
    label = 44;
    break;
   case 44:
    STACKTOP = __stackBase__;
    return $134 | 0;
  }
  return 0;
}
function _mpn_mul_fft_decompose($A, $Ap, $K, $nprime, $n, $nl, $l, $Mp, $T) {
  $A = $A | 0;
  $Ap = $Ap | 0;
  $K = $K | 0;
  $nprime = $nprime | 0;
  $n = $n | 0;
  $nl = $nl | 0;
  $l = $l | 0;
  $Mp = $Mp | 0;
  $T = $T | 0;
  var $A120 = 0, $__tmp_marker = 0, $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $dif_0108 = 0, $21 = 0, $22 = 0, $dif_0112 = 0, $subp_0111 = 0, $cy_0110 = 0, $_093109 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $cy_1 = 0, $30 = 0, $31 = 0, $dif_0 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $_093_lcssa129 = 0, $cy_0_lcssa128 = 0, $dif_0_lcssa127 = 0, $37 = 0, $38 = 0, $cy_2 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $cy_3 = 0, $50 = 0, $_195_ph = 0, $_2_ph = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $_0106 = 0, $_2105 = 0, $_195103 = 0, $i_0102 = 0, $60 = 0, $uglygep = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $or_cond = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $__n_0 = 0, $__dst_0 = 0, $_2_pn = 0, $__x_0 = 0, $__src_0 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $scevgep_sum = 0, $scevgep122 = 0, $__dst_1 = 0, $__x_1 = 0, $79 = 0, $scevgep123 = 0, $scevgep123124 = 0, $80 = 0, $81 = 0, $83 = 0, $84 = 0, $_296 = 0, $_3 = 0, $87 = 0, $88 = 0, $exitcond = 0, $_195_lcssa = 0, $89 = 0, $92 = 0, $93 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $A120 = $A;
    $__tmp_marker = STACKTOP;
    STACKTOP = STACKTOP + 4 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $1 = Math_imul($l, $K);
    HEAP32[$__tmp_marker >> 2] = 0;
    $2 = ($1 | 0) < ($nl | 0);
    if ($2) {
      label = 2;
      break;
    } else {
      $_2_ph = $n;
      $_195_ph = $nl;
      label = 19;
      break;
    }
   case 2:
    $4 = $nl - $1 | 0;
    $5 = $1 + 1 | 0;
    $6 = $5 << 2;
    $7 = $6 >>> 0 < 65536;
    if ($7) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $9 = STACKTOP;
    STACKTOP = STACKTOP + $6 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $13 = $9;
    label = 5;
    break;
   case 4:
    $11 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $6) | 0;
    $13 = $11;
    label = 5;
    break;
   case 5:
    $14 = $13;
    $15 = ($4 | 0) > ($1 | 0);
    $16 = $n + ($1 << 2) | 0;
    if ($15) {
      label = 6;
      break;
    } else {
      label = 17;
      break;
    }
   case 6:
    $18 = ___gmpn_sub_n($14, $n, $16, $1) | 0;
    $19 = $1 << 1;
    $20 = $n + ($19 << 2) | 0;
    $dif_0108 = $4 - $1 | 0;
    $21 = ($dif_0108 | 0) > ($1 | 0);
    if ($21) {
      $_093109 = $20;
      $cy_0110 = $18;
      $subp_0111 = 0;
      $dif_0112 = $dif_0108;
      $22 = 0;
      label = 7;
      break;
    } else {
      $dif_0_lcssa127 = $dif_0108;
      $cy_0_lcssa128 = $18;
      $_093_lcssa129 = $20;
      label = 13;
      break;
    }
   case 7:
    if ($22) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $24 = ___gmpn_sub_n($14, $14, $_093109, $1) | 0;
    $25 = $24 + $cy_0110 | 0;
    $cy_1 = $25;
    label = 10;
    break;
   case 9:
    $27 = ___gmpn_add_n($14, $14, $_093109, $1) | 0;
    $28 = $cy_0110 - $27 | 0;
    $cy_1 = $28;
    label = 10;
    break;
   case 10:
    $30 = $subp_0111 ^ 1;
    $31 = $_093109 + ($1 << 2) | 0;
    $dif_0 = $dif_0112 - $1 | 0;
    $32 = ($dif_0 | 0) > ($1 | 0);
    $33 = ($subp_0111 | 0) != 1;
    if ($32) {
      $_093109 = $31;
      $cy_0110 = $cy_1;
      $subp_0111 = $30;
      $dif_0112 = $dif_0;
      $22 = $33;
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    if ($33) {
      label = 12;
      break;
    } else {
      $dif_0_lcssa127 = $dif_0;
      $cy_0_lcssa128 = $cy_1;
      $_093_lcssa129 = $31;
      label = 13;
      break;
    }
   case 12:
    $35 = ___gmpn_sub($14, $14, $1, $31, $dif_0) | 0;
    $36 = $35 + $cy_1 | 0;
    $cy_2 = $36;
    label = 14;
    break;
   case 13:
    $37 = ___gmpn_add($14, $14, $1, $_093_lcssa129, $dif_0_lcssa127) | 0;
    $38 = $cy_0_lcssa128 - $37 | 0;
    $cy_2 = $38;
    label = 14;
    break;
   case 14:
    $40 = ($cy_2 | 0) > -1;
    if ($40) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $42 = ___gmpn_add_1($14, $14, $1, $cy_2) | 0;
    $cy_3 = $42;
    label = 18;
    break;
   case 16:
    $44 = -$cy_2 | 0;
    $45 = ___gmpn_sub_1($14, $14, $1, $44) | 0;
    $cy_3 = $45;
    label = 18;
    break;
   case 17:
    $47 = ___gmpn_sub($14, $n, $1, $16, $4) | 0;
    $48 = ___gmpn_add_1($14, $14, $1, $47) | 0;
    $cy_3 = $48;
    label = 18;
    break;
   case 18:
    $50 = $14 + ($1 << 2) | 0;
    HEAP32[$50 >> 2] = $cy_3;
    $_2_ph = $14;
    $_195_ph = $5;
    label = 19;
    break;
   case 19:
    $51 = ($K | 0) > 0;
    if ($51) {
      label = 20;
      break;
    } else {
      $_195_lcssa = $_195_ph;
      label = 33;
      break;
    }
   case 20:
    $52 = $nprime + 1 | 0;
    $53 = $K - 1 | 0;
    $54 = $nprime + 1 | 0;
    $55 = ($nprime | 0) == -1;
    $56 = $nprime << 2;
    $57 = $56 + 4 | 0;
    $58 = $nprime + 1 | 0;
    $i_0102 = 0;
    $_195103 = $_195_ph;
    $_2105 = $_2_ph;
    $_0106 = $A;
    label = 21;
    break;
   case 21:
    $60 = Math_imul($57, $i_0102);
    $uglygep = $A120 + $60 | 0;
    $61 = $Ap + ($i_0102 << 2) | 0;
    HEAP32[$61 >> 2] = $_0106;
    $62 = ($_195103 | 0) > 0;
    if ($62) {
      label = 22;
      break;
    } else {
      label = 30;
      break;
    }
   case 22:
    $64 = ($_195103 | 0) >= ($l | 0);
    $65 = ($i_0102 | 0) < ($53 | 0);
    $or_cond = $64 & $65;
    $66 = $or_cond ? $l : $_195103;
    $67 = $_195103 - $66 | 0;
    $68 = ($66 | 0) == 0;
    if ($68) {
      label = 27;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $70 = $66 - 1 | 0;
    $71 = HEAP32[$_2105 >> 2] | 0;
    $72 = ($70 | 0) == 0;
    if ($72) {
      $__x_1 = $71;
      $__dst_1 = $T;
      label = 26;
      break;
    } else {
      $__x_0 = $71;
      $_2_pn = $_2105;
      $__dst_0 = $T;
      $__n_0 = $70;
      label = 24;
      break;
    }
   case 24:
    $__src_0 = $_2_pn + 4 | 0;
    $73 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $74 = HEAP32[$__src_0 >> 2] | 0;
    $75 = $__n_0 - 1 | 0;
    $76 = ($75 | 0) == 0;
    if ($76) {
      label = 25;
      break;
    } else {
      $__x_0 = $74;
      $_2_pn = $__src_0;
      $__dst_0 = $73;
      $__n_0 = $75;
      label = 24;
      break;
    }
   case 25:
    $scevgep_sum = $66 - 1 | 0;
    $scevgep122 = $T + ($scevgep_sum << 2) | 0;
    $__x_1 = $74;
    $__dst_1 = $scevgep122;
    label = 26;
    break;
   case 26:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 27;
    break;
   case 27:
    $79 = ($52 | 0) == ($66 | 0);
    if ($79) {
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $scevgep123 = $T + ($66 << 2) | 0;
    $scevgep123124 = $scevgep123;
    $80 = $58 - $66 | 0;
    $81 = $80 << 2;
    _memset($scevgep123124 | 0, 0, $81 | 0);
    label = 29;
    break;
   case 29:
    $83 = $_2105 + ($l << 2) | 0;
    $84 = Math_imul($i_0102, $Mp);
    _mpn_fft_mul_2exp_modF($_0106, $T, $84, $nprime);
    $_3 = $83;
    $_296 = $67;
    label = 32;
    break;
   case 30:
    if ($55) {
      $_3 = $_2105;
      $_296 = $_195103;
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    _memset($uglygep | 0, 0, $57 | 0);
    $_3 = $_2105;
    $_296 = $_195103;
    label = 32;
    break;
   case 32:
    $87 = $_0106 + ($54 << 2) | 0;
    $88 = $i_0102 + 1 | 0;
    $exitcond = ($88 | 0) == ($K | 0);
    if ($exitcond) {
      $_195_lcssa = $_296;
      label = 33;
      break;
    } else {
      $i_0102 = $88;
      $_195103 = $_296;
      $_2105 = $_3;
      $_0106 = $87;
      label = 21;
      break;
    }
   case 33:
    $89 = ($_195_lcssa | 0) == 0;
    if ($89) {
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    ___gmp_assert_fail(7472, 699, 5648);
   case 35:
    $92 = HEAP32[$__tmp_marker >> 2] | 0;
    $93 = ($92 | 0) == 0;
    if ($93) {
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    ___gmp_tmp_reentrant_free($92);
    label = 37;
    break;
   case 37:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mpn_fft_fftinv($Ap, $K, $omega, $n, $tp) {
  $Ap = $Ap | 0;
  $K = $K | 0;
  $omega = $omega | 0;
  $n = $n | 0;
  $tp = $tp | 0;
  var $1 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__n_0 = 0, $__dst_0 = 0, $_pn = 0, $__x_0 = 0, $__src_0 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $_065 = 0, $j_064 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($K | 0) == 2;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 11;
      break;
    }
   case 2:
    $3 = $n + 1 | 0;
    $4 = ($3 | 0) == 0;
    if ($4) {
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $6 = HEAP32[$Ap >> 2] | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($n | 0) == 0;
    if ($8) {
      $__x_1 = $7;
      $__dst_1 = $tp;
      label = 6;
      break;
    } else {
      $__x_0 = $7;
      $_pn = $6;
      $__dst_0 = $tp;
      $__n_0 = $n;
      label = 4;
      break;
    }
   case 4:
    $__src_0 = $_pn + 4 | 0;
    $9 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $10 = HEAP32[$__src_0 >> 2] | 0;
    $11 = $__n_0 - 1 | 0;
    $12 = ($11 | 0) == 0;
    if ($12) {
      label = 5;
      break;
    } else {
      $__x_0 = $10;
      $_pn = $__src_0;
      $__dst_0 = $9;
      $__n_0 = $11;
      label = 4;
      break;
    }
   case 5:
    $scevgep = $tp + ($n << 2) | 0;
    $__x_1 = $10;
    $__dst_1 = $scevgep;
    label = 6;
    break;
   case 6:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 7;
    break;
   case 7:
    $15 = HEAP32[$Ap >> 2] | 0;
    $16 = $Ap + 4 | 0;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = ___gmpn_add_n($15, $15, $17, $3) | 0;
    $19 = HEAP32[$16 >> 2] | 0;
    $20 = ___gmpn_sub_n($19, $tp, $19, $3) | 0;
    $21 = HEAP32[$Ap >> 2] | 0;
    $22 = $21 + ($n << 2) | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $23 >>> 0 > 1;
    if ($24) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $26 = $23 - 1 | 0;
    $27 = ___gmpn_sub_1($21, $21, $n, $26) | 0;
    $28 = 1 - $27 | 0;
    $29 = HEAP32[$Ap >> 2] | 0;
    $30 = $29 + ($n << 2) | 0;
    HEAP32[$30 >> 2] = $28;
    label = 9;
    break;
   case 9:
    $32 = ($20 | 0) == 0;
    if ($32) {
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $34 = HEAP32[$16 >> 2] | 0;
    $35 = $34 + ($n << 2) | 0;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = -$36 | 0;
    $38 = ___gmpn_add_1($34, $34, $n, $37) | 0;
    $39 = HEAP32[$16 >> 2] | 0;
    $40 = $39 + ($n << 2) | 0;
    HEAP32[$40 >> 2] = $38;
    label = 13;
    break;
   case 11:
    $42 = $K >> 1;
    $43 = $omega << 1;
    _mpn_fft_fftinv($Ap, $42, $43, $n, $tp);
    $44 = $Ap + ($42 << 2) | 0;
    _mpn_fft_fftinv($44, $42, $43, $n, $tp);
    $45 = ($42 | 0) > 0;
    if ($45) {
      $j_064 = 0;
      $_065 = $Ap;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $46 = $_065 + ($42 << 2) | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    $48 = Math_imul($j_064, $omega);
    _mpn_fft_mul_2exp_modF($tp, $47, $48, $n);
    $49 = HEAP32[$46 >> 2] | 0;
    $50 = HEAP32[$_065 >> 2] | 0;
    _mpn_fft_sub_modF($49, $50, $tp, $n);
    $51 = HEAP32[$_065 >> 2] | 0;
    _mpn_fft_add_modF($51, $51, $tp, $n);
    $52 = $j_064 + 1 | 0;
    $53 = $_065 + 4 | 0;
    $exitcond = ($52 | 0) == ($42 | 0);
    if ($exitcond) {
      label = 13;
      break;
    } else {
      $j_064 = $52;
      $_065 = $53;
      label = 12;
      break;
    }
   case 13:
    return;
  }
}
function _mpn_fft_div_2exp_modF($r, $a, $k, $n) {
  $r = $r | 0;
  $a = $a | 0;
  $k = $k | 0;
  $n = $n | 0;
  _mpn_fft_mul_2exp_modF($r, $a, ($n << 6) - $k | 0, $n);
  _mpn_fft_normalize($r, $n);
  return;
}
function _mpn_fft_norm_modF($rp, $n, $ap, $an) {
  $rp = $rp | 0;
  $n = $n | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $__n_0 = 0, $__dst_0 = 0, $ap_pn = 0, $__x_0 = 0, $__src_0 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $l_0 = 0, $rpn_0 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $rpn_1 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n << 1;
    $2 = $an - $1 | 0;
    $3 = ($2 | 0) > 0;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $5 = $ap + ($1 << 2) | 0;
    $6 = ___gmpn_add_n($rp, $ap, $5, $2) | 0;
    $7 = $rp + ($2 << 2) | 0;
    $8 = $ap + ($2 << 2) | 0;
    $9 = $n - $2 | 0;
    $10 = ___gmpn_add_1($7, $8, $9, $6) | 0;
    $rpn_0 = $10;
    $l_0 = $n;
    label = 9;
    break;
   case 3:
    $12 = $an - $n | 0;
    $13 = ($n | 0) == 0;
    if ($13) {
      $rpn_0 = 0;
      $l_0 = $12;
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $15 = $n - 1 | 0;
    $16 = HEAP32[$ap >> 2] | 0;
    $17 = ($15 | 0) == 0;
    if ($17) {
      $__x_1 = $16;
      $__dst_1 = $rp;
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $18 = $n - 1 | 0;
    $__x_0 = $16;
    $ap_pn = $ap;
    $__dst_0 = $rp;
    $__n_0 = $15;
    label = 6;
    break;
   case 6:
    $__src_0 = $ap_pn + 4 | 0;
    $20 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $21 = HEAP32[$__src_0 >> 2] | 0;
    $22 = $__n_0 - 1 | 0;
    $23 = ($22 | 0) == 0;
    if ($23) {
      label = 7;
      break;
    } else {
      $__x_0 = $21;
      $ap_pn = $__src_0;
      $__dst_0 = $20;
      $__n_0 = $22;
      label = 6;
      break;
    }
   case 7:
    $scevgep = $rp + ($18 << 2) | 0;
    $__x_1 = $21;
    $__dst_1 = $scevgep;
    label = 8;
    break;
   case 8:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    $rpn_0 = 0;
    $l_0 = $12;
    label = 9;
    break;
   case 9:
    $26 = $ap + ($n << 2) | 0;
    $27 = ___gmpn_sub_n($rp, $rp, $26, $l_0) | 0;
    $28 = $rp + ($l_0 << 2) | 0;
    $29 = $n - $l_0 | 0;
    $30 = ___gmpn_sub_1($28, $28, $29, $27) | 0;
    $31 = $rpn_0 - $30 | 0;
    $32 = ($31 | 0) < 0;
    if ($32) {
      label = 10;
      break;
    } else {
      $rpn_1 = $31;
      label = 11;
      break;
    }
   case 10:
    $34 = ___gmpn_add_1($rp, $rp, $n, 1) | 0;
    $rpn_1 = $34;
    label = 11;
    break;
   case 11:
    return $rpn_1 | 0;
  }
  return 0;
}
function _mpn_fft_mul_2exp_modF($r, $a, $d, $n) {
  $r = $r | 0;
  $a = $a | 0;
  $d = $d | 0;
  $n = $n | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $_sum127 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $phitmp = 0, $15 = 0, $17 = 0, $_sum125 = 0, $18 = 0, $19 = 0, $20 = 0, $_sum126 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $__n_0 = 0, $__dst_0 = 0, $__src_0 = 0, $__x_0 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $scevgep140 = 0, $__dst_1 = 0, $__x_1 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $__d_0 = 0, $__s_0 = 0, $__n1_0 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $cc_0 = 0, $rd_0 = 0, $44 = 0, $45 = 0, $uadd$0 = 0, $uadd$1 = 0, $46 = 0, $47 = 0, $__p_0 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $_sum123 = 0, $56 = 0, $57 = 0, $uadd124$0 = 0, $uadd124$1 = 0, $58 = 0, $59 = 0, $__p4_0 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $_sum = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $__d5_0 = 0, $__s6_0 = 0, $__n7_0 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $__n8_0 = 0, $__dst9_0 = 0, $a_pn = 0, $__x11_0 = 0, $__src10_0 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $scevgep = 0, $__dst9_1 = 0, $__x11_1 = 0, $cc_1 = 0, $rd_1 = 0, $98 = 0, $100 = 0, $101 = 0, $103 = 0, $cc_2 = 0, $105 = 0, $106 = 0, $cc_3 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $d & 31;
    $2 = $d >>> 5;
    $3 = $2 >>> 0 < $n >>> 0;
    if ($3) {
      label = 16;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = $2 - $n | 0;
    $6 = ($1 | 0) == 0;
    if ($6) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $_sum127 = $n - $5 | 0;
    $8 = $a + ($_sum127 << 2) | 0;
    $9 = $5 + 1 | 0;
    $10 = ___gmpn_lshift($r, $8, $9, $1) | 0;
    $11 = $r + ($5 << 2) | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ___gmpn_lshiftc($11, $a, $_sum127, $1) | 0;
    $phitmp = $13 + 1 | 0;
    $rd_0 = $12;
    $cc_0 = $phitmp;
    label = 12;
    break;
   case 4:
    $15 = ($2 | 0) == ($n | 0);
    if ($15) {
      label = 10;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $17 = $5 - 1 | 0;
    $_sum125 = $n - $5 | 0;
    $18 = $a + ($_sum125 << 2) | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = ($17 | 0) == 0;
    if ($20) {
      $__x_1 = $19;
      $__dst_1 = $r;
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $_sum126 = $_sum125 + 1 | 0;
    $21 = $a + ($_sum126 << 2) | 0;
    $22 = $d >>> 5;
    $23 = $22 - 1 | 0;
    $24 = $23 - $n | 0;
    $__x_0 = $19;
    $__src_0 = $21;
    $__dst_0 = $r;
    $__n_0 = $17;
    label = 7;
    break;
   case 7:
    $26 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $27 = $__src_0 + 4 | 0;
    $28 = HEAP32[$__src_0 >> 2] | 0;
    $29 = $__n_0 - 1 | 0;
    $30 = ($29 | 0) == 0;
    if ($30) {
      label = 8;
      break;
    } else {
      $__x_0 = $28;
      $__src_0 = $27;
      $__dst_0 = $26;
      $__n_0 = $29;
      label = 7;
      break;
    }
   case 8:
    $scevgep140 = $r + ($24 << 2) | 0;
    $__x_1 = $28;
    $__dst_1 = $scevgep140;
    label = 9;
    break;
   case 9:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 10;
    break;
   case 10:
    $33 = $a + ($n << 2) | 0;
    $34 = HEAP32[$33 >> 2] | 0;
    $35 = $r + ($5 << 2) | 0;
    $36 = $n - $5 | 0;
    $__n1_0 = $36;
    $__s_0 = $a;
    $__d_0 = $35;
    label = 11;
    break;
   case 11:
    $38 = $__s_0 + 4 | 0;
    $39 = HEAP32[$__s_0 >> 2] | 0;
    $40 = $39 ^ -1;
    $41 = $__d_0 + 4 | 0;
    HEAP32[$__d_0 >> 2] = $40;
    $42 = $__n1_0 - 1 | 0;
    $43 = ($42 | 0) == 0;
    if ($43) {
      $rd_0 = $34;
      $cc_0 = 1;
      label = 12;
      break;
    } else {
      $__n1_0 = $42;
      $__s_0 = $38;
      $__d_0 = $41;
      label = 11;
      break;
    }
   case 12:
    $44 = $r + ($n << 2) | 0;
    HEAP32[$44 >> 2] = 0;
    $45 = HEAP32[$r >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($45 | 0, $cc_0 | 0) | 0;
    $uadd$1 = tempRet0;
    $46 = $uadd$0;
    HEAP32[$r >> 2] = $46;
    $47 = $uadd$1;
    if ($47) {
      $__p_0 = $r;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $48 = $__p_0 + 4 | 0;
    $49 = HEAP32[$48 >> 2] | 0;
    $50 = $49 + 1 | 0;
    HEAP32[$48 >> 2] = $50;
    $51 = ($50 | 0) == 0;
    if ($51) {
      $__p_0 = $48;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $52 = $rd_0 + 1 | 0;
    $53 = ($52 | 0) == 0;
    $54 = $53 ? 1 : $52;
    $55 = $53 & 1;
    $_sum123 = $55 + $5 | 0;
    $56 = $r + ($_sum123 << 2) | 0;
    $57 = HEAP32[$56 >> 2] | 0;
    $uadd124$0 = _llvm_uadd_with_overflow_i32($57 | 0, $54 | 0) | 0;
    $uadd124$1 = tempRet0;
    $58 = $uadd124$0;
    HEAP32[$56 >> 2] = $58;
    $59 = $uadd124$1;
    if ($59) {
      $__p4_0 = $56;
      label = 15;
      break;
    } else {
      label = 31;
      break;
    }
   case 15:
    $60 = $__p4_0 + 4 | 0;
    $61 = HEAP32[$60 >> 2] | 0;
    $62 = $61 + 1 | 0;
    HEAP32[$60 >> 2] = $62;
    $63 = ($62 | 0) == 0;
    if ($63) {
      $__p4_0 = $60;
      label = 15;
      break;
    } else {
      label = 31;
      break;
    }
   case 16:
    $65 = ($1 | 0) == 0;
    $_sum = $n - $2 | 0;
    $66 = $a + ($_sum << 2) | 0;
    $67 = $2 + 1 | 0;
    if ($65) {
      $__n7_0 = $67;
      $__s6_0 = $66;
      $__d5_0 = $r;
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $69 = ___gmpn_lshiftc($r, $66, $67, $1) | 0;
    $70 = $r + ($2 << 2) | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    $72 = $71 ^ -1;
    $73 = ___gmpn_lshift($70, $a, $_sum, $1) | 0;
    $rd_1 = $72;
    $cc_1 = $73;
    label = 25;
    break;
   case 18:
    $75 = $__s6_0 + 4 | 0;
    $76 = HEAP32[$__s6_0 >> 2] | 0;
    $77 = $76 ^ -1;
    $78 = $__d5_0 + 4 | 0;
    HEAP32[$__d5_0 >> 2] = $77;
    $79 = $__n7_0 - 1 | 0;
    $80 = ($79 | 0) == 0;
    if ($80) {
      label = 19;
      break;
    } else {
      $__n7_0 = $79;
      $__s6_0 = $75;
      $__d5_0 = $78;
      label = 18;
      break;
    }
   case 19:
    $82 = $a + ($n << 2) | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = ($2 | 0) == ($n | 0);
    if ($84) {
      $rd_1 = $83;
      $cc_1 = 0;
      label = 25;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $86 = $_sum - 1 | 0;
    $87 = $r + ($2 << 2) | 0;
    $88 = HEAP32[$a >> 2] | 0;
    $89 = ($86 | 0) == 0;
    if ($89) {
      $__x11_1 = $88;
      $__dst9_1 = $87;
      label = 24;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $90 = $n - 1 | 0;
    $__x11_0 = $88;
    $a_pn = $a;
    $__dst9_0 = $87;
    $__n8_0 = $86;
    label = 22;
    break;
   case 22:
    $__src10_0 = $a_pn + 4 | 0;
    $92 = $__dst9_0 + 4 | 0;
    HEAP32[$__dst9_0 >> 2] = $__x11_0;
    $93 = HEAP32[$__src10_0 >> 2] | 0;
    $94 = $__n8_0 - 1 | 0;
    $95 = ($94 | 0) == 0;
    if ($95) {
      label = 23;
      break;
    } else {
      $__x11_0 = $93;
      $a_pn = $__src10_0;
      $__dst9_0 = $92;
      $__n8_0 = $94;
      label = 22;
      break;
    }
   case 23:
    $scevgep = $r + ($90 << 2) | 0;
    $__x11_1 = $93;
    $__dst9_1 = $scevgep;
    label = 24;
    break;
   case 24:
    HEAP32[$__dst9_1 >> 2] = $__x11_1;
    $rd_1 = $83;
    $cc_1 = 0;
    label = 25;
    break;
   case 25:
    $98 = ($2 | 0) == 0;
    if ($98) {
      $cc_3 = $cc_1;
      label = 29;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    $100 = $cc_1 - 1 | 0;
    $101 = ($cc_1 | 0) == 0;
    if ($101) {
      label = 27;
      break;
    } else {
      $cc_2 = $100;
      label = 28;
      break;
    }
   case 27:
    $103 = ___gmpn_add_1($r, $r, $n, 1) | 0;
    $cc_2 = $103;
    label = 28;
    break;
   case 28:
    $105 = ___gmpn_sub_1($r, $r, $2, $cc_2) | 0;
    $106 = $105 + 1 | 0;
    $cc_3 = $106;
    label = 29;
    break;
   case 29:
    $108 = $r + ($2 << 2) | 0;
    $109 = $n - $2 | 0;
    $110 = ___gmpn_sub_1($108, $108, $109, $cc_3) | 0;
    $111 = -$110 | 0;
    $112 = $r + ($n << 2) | 0;
    HEAP32[$112 >> 2] = $111;
    $113 = ___gmpn_sub_1($108, $108, $109, $rd_1) | 0;
    $114 = HEAP32[$112 >> 2] | 0;
    $115 = $114 - $113 | 0;
    HEAP32[$112 >> 2] = $115;
    $116 = ($115 | 0) < 0;
    if ($116) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    $118 = ___gmpn_add_1($r, $r, $n, 1) | 0;
    HEAP32[$112 >> 2] = $118;
    label = 31;
    break;
   case 31:
    return;
  }
}
function _mpn_fft_normalize($ap, $n) {
  $ap = $ap | 0;
  $n = $n | 0;
  var $ap12 = 0, $1 = 0, $2 = 0, $3 = 0, $__p_0 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $ap12 = $ap;
    $1 = $ap + ($n << 2) | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) == 0;
    if ($3) {
      label = 8;
      break;
    } else {
      $__p_0 = $ap;
      label = 2;
      break;
    }
   case 2:
    $4 = $__p_0 + 4 | 0;
    $5 = HEAP32[$__p_0 >> 2] | 0;
    $6 = $5 - 1 | 0;
    HEAP32[$__p_0 >> 2] = $6;
    $7 = ($5 | 0) == 0;
    if ($7) {
      $__p_0 = $4;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $9 = HEAP32[$1 >> 2] | 0;
    $10 = ($9 | 0) == 0;
    if ($10) {
      label = 4;
      break;
    } else {
      label = 7;
      break;
    }
   case 4:
    $12 = ($n | 0) == 0;
    if ($12) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $13 = $n << 2;
    _memset($ap12 | 0, 0, $13 | 0);
    label = 6;
    break;
   case 6:
    HEAP32[$1 >> 2] = 1;
    label = 8;
    break;
   case 7:
    HEAP32[$1 >> 2] = 0;
    label = 8;
    break;
   case 8:
    return;
  }
}
function _mpn_fft_sub_modF($r, $a, $b, $n) {
  $r = $r | 0;
  $a = $a | 0;
  $b = $b | 0;
  $n = $n | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $uadd$0 = 0, $uadd$1 = 0, $14 = 0, $15 = 0, $__p_0 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + ($n << 2) | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $b + ($n << 2) | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $2 - $4 | 0;
    $6 = ___gmpn_sub_n($r, $a, $b, $n) | 0;
    $7 = $5 - $6 | 0;
    $8 = -$7 | 0;
    $9 = $7 >> 31;
    $10 = $9 & $8;
    $11 = $10 + $7 | 0;
    $12 = $r + ($n << 2) | 0;
    HEAP32[$12 >> 2] = $11;
    $13 = HEAP32[$r >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($13 | 0, $10 | 0) | 0;
    $uadd$1 = tempRet0;
    $14 = $uadd$0;
    HEAP32[$r >> 2] = $14;
    $15 = $uadd$1;
    if ($15) {
      $__p_0 = $r;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $16 = $__p_0 + 4 | 0;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = $17 + 1 | 0;
    HEAP32[$16 >> 2] = $18;
    $19 = ($18 | 0) == 0;
    if ($19) {
      $__p_0 = $16;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    return;
  }
}
function _mpn_fft_add_modF($r, $a, $b, $n) {
  $r = $r | 0;
  $a = $a | 0;
  $b = $b | 0;
  $n = $n | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $__p_0 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + ($n << 2) | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $b + ($n << 2) | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 + $2 | 0;
    $6 = ___gmpn_add_n($r, $a, $b, $n) | 0;
    $7 = $5 + $6 | 0;
    $8 = $7 - 1 | 0;
    $9 = ($7 | 0) != 0;
    $10 = $9 & 1;
    $11 = -$10 | 0;
    $12 = $8 & $11;
    $13 = $7 - $12 | 0;
    $14 = $r + ($n << 2) | 0;
    HEAP32[$14 >> 2] = $13;
    $15 = HEAP32[$r >> 2] | 0;
    $16 = $15 - $12 | 0;
    HEAP32[$r >> 2] = $16;
    $17 = $15 >>> 0 < $12 >>> 0;
    if ($17) {
      $__p_0 = $r;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $18 = $__p_0 + 4 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $19 - 1 | 0;
    HEAP32[$18 >> 2] = $20;
    $21 = ($19 | 0) == 0;
    if ($21) {
      $__p_0 = $18;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    return;
  }
}
function ___gmpn_mul_n($p, $a, $b, $n) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  $n = $n | 0;
  var $ws = 0, $__tmp_marker = 0, $1 = 0, $4 = 0, $6 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1056 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $ws = __stackBase__ | 0;
    $__tmp_marker = __stackBase__ + 1048 | 0;
    $1 = ($n | 0) > 29;
    if ($1) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    ___gmpn_mul_basecase($p, $a, $n, $b, $n);
    label = 18;
    break;
   case 3:
    $4 = ($n | 0) > 99;
    if ($4) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $6 = $ws | 0;
    ___gmpn_toom22_mul($p, $a, $n, $b, $n, $6);
    label = 18;
    break;
   case 5:
    $8 = ($n | 0) > 299;
    if ($8) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $10 = $n * 12 & -1;
    $11 = $10 + 128 | 0;
    $12 = STACKTOP;
    STACKTOP = STACKTOP + $11 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $13 = $12;
    ___gmpn_toom33_mul($p, $a, $n, $b, $n, $13);
    label = 18;
    break;
   case 7:
    $15 = ($n | 0) > 349;
    if ($15) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $17 = $n * 12 & -1;
    $18 = $17 + 128 | 0;
    $19 = STACKTOP;
    STACKTOP = STACKTOP + $18 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $20 = $19;
    ___gmpn_toom44_mul($p, $a, $n, $b, $n, $20);
    label = 18;
    break;
   case 9:
    $22 = ($n | 0) > 449;
    if ($22) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $24 = $n << 3;
    $25 = $24 + 1528 | 0;
    $26 = STACKTOP;
    STACKTOP = STACKTOP + $25 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $27 = $26;
    ___gmpn_toom6h_mul($p, $a, $n, $b, $n, $27);
    label = 18;
    break;
   case 11:
    $29 = ($n | 0) > 2999;
    if ($29) {
      label = 17;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    HEAP32[$__tmp_marker >> 2] = 0;
    $31 = $n * 15 & -1;
    $32 = $31 >> 3;
    $33 = $32 << 2;
    $34 = $33 + 1756 | 0;
    $35 = $34 >>> 0 < 65536;
    if ($35) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $37 = STACKTOP;
    STACKTOP = STACKTOP + $34 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $41 = $37;
    label = 15;
    break;
   case 14:
    $39 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $34) | 0;
    $41 = $39;
    label = 15;
    break;
   case 15:
    $42 = $41;
    ___gmpn_toom8h_mul($p, $a, $n, $b, $n, $42);
    $43 = HEAP32[$__tmp_marker >> 2] | 0;
    $44 = ($43 | 0) == 0;
    if ($44) {
      label = 18;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    ___gmp_tmp_reentrant_free($43);
    label = 18;
    break;
   case 17:
    ___gmpn_nussbaumer_mul($p, $a, $n, $b, $n);
    label = 18;
    break;
   case 18:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mpn_fft_mul_modF_K($ap, $bp, $n, $K) {
  $ap = $ap | 0;
  $bp = $bp | 0;
  $n = $n | 0;
  $K = $K | 0;
  var $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $nprime2_0140 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $Nprime2_1 = 0, $nprime2_1 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $_in = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $87 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $i_0137 = 0, $94 = 0, $95 = 0, $97 = 0, $99 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $exitcond144 = 0, $105 = 0, $106 = 0, $107 = 0, $_0135 = 0, $_0127134 = 0, $i_1133 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $exitcond143 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $_1131 = 0, $_1128130 = 0, $i_2129 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $143 = 0, $144 = 0, $145 = 0, $147 = 0, $cc_0 = 0, $149 = 0, $150 = 0, $151 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $cc_1 = 0, $158 = 0, $160 = 0, $162 = 0, $163 = 0, $165 = 0, $166 = 0, $168 = 0, $169 = 0, $170 = 0, $exitcond = 0, $171 = 0, $172 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    $1 = ($ap | 0) == ($bp | 0);
    $2 = $1 & 1;
    HEAP32[$__tmp_marker >> 2] = 0;
    $3 = $1 ? 360 : 300;
    $4 = ($3 | 0) > ($n | 0);
    if ($4) {
      label = 34;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $6 = ___gmpn_fft_best_k($n, $2) | 0;
    $7 = 1 << $6;
    $8 = $7 - 1 | 0;
    $9 = $8 & $n;
    $10 = ($9 | 0) == 0;
    if ($10) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    ___gmp_assert_fail(7472, 437, 6568);
   case 4:
    $13 = ($7 | 0) > 32;
    $14 = $13 ? $7 : 32;
    $15 = $n << 5;
    $16 = $15 >> $6;
    $17 = $n >> $6;
    $18 = $16 << 1;
    $19 = $6 + 2 | 0;
    $20 = $19 + $18 | 0;
    $21 = $20 + $14 | 0;
    $22 = ($21 | 0) % ($14 | 0);
    $23 = $21 - $22 | 0;
    $24 = ($23 | 0) / 32 & -1;
    $25 = ($24 | 0) < ($3 | 0);
    if ($25) {
      $nprime2_1 = $24;
      $Nprime2_1 = $23;
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $26 = ___gmpn_fft_best_k($24, $2) | 0;
    $27 = 1 << $26;
    $28 = $27 - 1 | 0;
    $29 = $28 & $24;
    $30 = ($29 | 0) == 0;
    if ($30) {
      $nprime2_1 = $24;
      $Nprime2_1 = $23;
      label = 8;
      break;
    } else {
      $nprime2_0140 = $24;
      $31 = $27;
      label = 6;
      break;
    }
   case 6:
    $32 = $nprime2_0140 - 1 | 0;
    $33 = $32 + $31 | 0;
    $34 = -$31 | 0;
    $35 = $33 & $34;
    $36 = ___gmpn_fft_best_k($35, $2) | 0;
    $37 = 1 << $36;
    $38 = $37 - 1 | 0;
    $39 = $38 & $35;
    $40 = ($39 | 0) == 0;
    if ($40) {
      label = 7;
      break;
    } else {
      $nprime2_0140 = $35;
      $31 = $37;
      label = 6;
      break;
    }
   case 7:
    $41 = $35 << 5;
    $nprime2_1 = $35;
    $Nprime2_1 = $41;
    label = 8;
    break;
   case 8:
    $42 = ($nprime2_1 | 0) < ($n | 0);
    if ($42) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    ___gmp_assert_fail(7472, 459, 6064);
   case 10:
    $45 = $Nprime2_1 >> $6;
    $46 = $7 << 2;
    $47 = $46 >>> 0 < 65536;
    if ($47) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $49 = STACKTOP;
    STACKTOP = STACKTOP + $46 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $50 = STACKTOP;
    STACKTOP = STACKTOP + $46 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $55 = $50;
    $_in = $49;
    label = 13;
    break;
   case 12:
    $52 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $46) | 0;
    $53 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $46) | 0;
    $55 = $53;
    $_in = $52;
    label = 13;
    break;
   case 13:
    $56 = $_in;
    $57 = $55;
    $58 = $nprime2_1 + 1 | 0;
    $59 = $58 << 1;
    $60 = $59 << $6;
    $61 = $60 << 2;
    $62 = $61 >>> 0 < 65536;
    if ($62) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $64 = STACKTOP;
    STACKTOP = STACKTOP + $61 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $68 = $64;
    label = 16;
    break;
   case 15:
    $66 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $61) | 0;
    $68 = $66;
    label = 16;
    break;
   case 16:
    $69 = $68;
    $70 = $58 << 3;
    $71 = $70 >>> 0 < 65536;
    if ($71) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $73 = STACKTOP;
    STACKTOP = STACKTOP + $70 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $77 = $73;
    label = 19;
    break;
   case 18:
    $75 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $70) | 0;
    $77 = $75;
    label = 19;
    break;
   case 19:
    $78 = $77;
    $79 = $58 << $6;
    $80 = $69 + ($79 << 2) | 0;
    $81 = $6 << 2;
    $82 = $81 + 4 | 0;
    $83 = $82 >>> 0 < 65536;
    if ($83) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    $85 = STACKTOP;
    STACKTOP = STACKTOP + $82 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $89 = $85;
    label = 22;
    break;
   case 21:
    $87 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $82) | 0;
    $89 = $87;
    label = 22;
    break;
   case 22:
    $90 = $89;
    $91 = ($6 | 0) < 0;
    if ($91) {
      label = 28;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $92 = $6 + 1 | 0;
    $i_0137 = 0;
    label = 24;
    break;
   case 24:
    $94 = 4 << $i_0137;
    $95 = $94 >>> 0 < 65536;
    if ($95) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    $97 = STACKTOP;
    STACKTOP = STACKTOP + $94 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $101 = $97;
    label = 27;
    break;
   case 26:
    $99 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $94) | 0;
    $101 = $99;
    label = 27;
    break;
   case 27:
    $102 = $101;
    $103 = $90 + ($i_0137 << 2) | 0;
    HEAP32[$103 >> 2] = $102;
    $104 = $i_0137 + 1 | 0;
    $exitcond144 = ($104 | 0) == ($92 | 0);
    if ($exitcond144) {
      label = 28;
      break;
    } else {
      $i_0137 = $104;
      label = 24;
      break;
    }
   case 28:
    _mpn_fft_initl($90, $6);
    $105 = ($K | 0) > 0;
    if ($105) {
      label = 29;
      break;
    } else {
      label = 50;
      break;
    }
   case 29:
    $106 = $17 << $6;
    $107 = $106 + 1 | 0;
    $i_1133 = 0;
    $_0127134 = $bp;
    $_0135 = $ap;
    label = 30;
    break;
   case 30:
    $109 = HEAP32[$_0135 >> 2] | 0;
    _mpn_fft_normalize($109, $n);
    if ($1) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    $110 = HEAP32[$_0135 >> 2] | 0;
    _mpn_mul_fft_decompose($69, $56, $7, $nprime2_1, $110, $107, $17, $45, $78);
    label = 33;
    break;
   case 32:
    $112 = HEAP32[$_0127134 >> 2] | 0;
    _mpn_fft_normalize($112, $n);
    $113 = HEAP32[$_0135 >> 2] | 0;
    _mpn_mul_fft_decompose($69, $56, $7, $nprime2_1, $113, $107, $17, $45, $78);
    $114 = HEAP32[$_0127134 >> 2] | 0;
    _mpn_mul_fft_decompose($80, $57, $7, $nprime2_1, $114, $107, $17, $45, $78);
    label = 33;
    break;
   case 33:
    $116 = HEAP32[$_0135 >> 2] | 0;
    $117 = _mpn_mul_fft_internal($116, $n, $6, $56, $57, $80, $nprime2_1, $17, $45, $90, $78, $2) | 0;
    $118 = HEAP32[$_0135 >> 2] | 0;
    $119 = $118 + ($n << 2) | 0;
    HEAP32[$119 >> 2] = $117;
    $120 = $i_1133 + 1 | 0;
    $121 = $_0135 + 4 | 0;
    $122 = $_0127134 + 4 | 0;
    $exitcond143 = ($120 | 0) == ($K | 0);
    if ($exitcond143) {
      label = 50;
      break;
    } else {
      $i_1133 = $120;
      $_0127134 = $122;
      $_0135 = $121;
      label = 30;
      break;
    }
   case 34:
    $124 = $n << 1;
    $125 = $n << 3;
    $126 = $125 >>> 0 < 65536;
    if ($126) {
      label = 35;
      break;
    } else {
      label = 36;
      break;
    }
   case 35:
    $128 = STACKTOP;
    STACKTOP = STACKTOP + $125 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $132 = $128;
    label = 37;
    break;
   case 36:
    $130 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $125) | 0;
    $132 = $130;
    label = 37;
    break;
   case 37:
    $133 = $132;
    $134 = $133 + ($n << 2) | 0;
    $135 = ($K | 0) > 0;
    if ($135) {
      $i_2129 = 0;
      $_1128130 = $bp;
      $_1131 = $ap;
      label = 38;
      break;
    } else {
      label = 50;
      break;
    }
   case 38:
    $136 = $_1131 + 4 | 0;
    $137 = HEAP32[$_1131 >> 2] | 0;
    $138 = $_1128130 + 4 | 0;
    $139 = HEAP32[$_1128130 >> 2] | 0;
    if ($1) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    ___gmpn_sqr($133, $137, $n);
    label = 41;
    break;
   case 40:
    ___gmpn_mul_n($133, $139, $137, $n);
    label = 41;
    break;
   case 41:
    $143 = $137 + ($n << 2) | 0;
    $144 = HEAP32[$143 >> 2] | 0;
    $145 = ($144 | 0) == 0;
    if ($145) {
      $cc_0 = 0;
      label = 43;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    $147 = ___gmpn_add_n($134, $134, $139, $n) | 0;
    $cc_0 = $147;
    label = 43;
    break;
   case 43:
    $149 = $139 + ($n << 2) | 0;
    $150 = HEAP32[$149 >> 2] | 0;
    $151 = ($150 | 0) == 0;
    if ($151) {
      $cc_1 = $cc_0;
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    $153 = ___gmpn_add_n($134, $134, $137, $n) | 0;
    $154 = HEAP32[$143 >> 2] | 0;
    $155 = $153 + $cc_0 | 0;
    $156 = $155 + $154 | 0;
    $cc_1 = $156;
    label = 45;
    break;
   case 45:
    $158 = ($cc_1 | 0) == 0;
    if ($158) {
      label = 47;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    $160 = ___gmpn_add_1($133, $133, $124, $cc_1) | 0;
    label = 47;
    break;
   case 47:
    $162 = ___gmpn_sub_n($137, $133, $134, $n) | 0;
    $163 = ($162 | 0) == 0;
    if ($163) {
      $168 = 0;
      label = 49;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    $165 = ___gmpn_add_1($137, $137, $n, 1) | 0;
    $166 = ($165 | 0) != 0;
    $168 = $166;
    label = 49;
    break;
   case 49:
    $169 = $168 & 1;
    HEAP32[$143 >> 2] = $169;
    $170 = $i_2129 + 1 | 0;
    $exitcond = ($170 | 0) == ($K | 0);
    if ($exitcond) {
      label = 50;
      break;
    } else {
      $i_2129 = $170;
      $_1128130 = $138;
      $_1131 = $136;
      label = 38;
      break;
    }
   case 50:
    $171 = HEAP32[$__tmp_marker >> 2] | 0;
    $172 = ($171 | 0) == 0;
    if ($172) {
      label = 52;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    ___gmp_tmp_reentrant_free($171);
    label = 52;
    break;
   case 52:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mpn_sqrmod_bnm1_itch($rn, $an) {
  $rn = $rn | 0;
  $an = $an | 0;
  return ($rn + 3 | 0) + (($rn >> 1 | 0) < ($an | 0) ? $an : 0) | 0;
}
function _mpn_mulmod_bnm1_itch($rn, $an, $bn) {
  $rn = $rn | 0;
  $an = $an | 0;
  $bn = $bn | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $rn >> 1;
    $2 = $rn + 4 | 0;
    $3 = ($1 | 0) < ($an | 0);
    if ($3) {
      label = 2;
      break;
    } else {
      $8 = 0;
      label = 3;
      break;
    }
   case 2:
    $5 = ($1 | 0) < ($bn | 0);
    $6 = $5 ? $rn : $1;
    $8 = $6;
    label = 3;
    break;
   case 3:
    $9 = $2 + $8 | 0;
    return $9 | 0;
  }
  return 0;
}
function ___gmpn_sqr($p, $a, $n) {
  $p = $p | 0;
  $a = $a | 0;
  $n = $n | 0;
  var $ws = 0, $__tmp_marker = 0, $1 = 0, $4 = 0, $6 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1216 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $ws = __stackBase__ | 0;
    $__tmp_marker = __stackBase__ + 1208 | 0;
    $1 = ($n | 0) > 49;
    if ($1) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    ___gmpn_sqr_basecase($p, $a, $n);
    label = 16;
    break;
   case 3:
    $4 = ($n | 0) > 119;
    if ($4) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $6 = $ws | 0;
    ___gmpn_toom2_sqr($p, $a, $n, $6);
    label = 16;
    break;
   case 5:
    $8 = ($n | 0) > 399;
    if ($8) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $10 = $n * 12 & -1;
    $11 = $10 + 128 | 0;
    $12 = STACKTOP;
    STACKTOP = STACKTOP + $11 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $13 = $12;
    ___gmpn_toom3_sqr($p, $a, $n, $13);
    label = 16;
    break;
   case 7:
    $15 = ($n | 0) > 449;
    if ($15) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $17 = $n << 3;
    $18 = $17 + 1528 | 0;
    $19 = STACKTOP;
    STACKTOP = STACKTOP + $18 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $20 = $19;
    ___gmpn_toom6_sqr($p, $a, $n, $20);
    label = 16;
    break;
   case 9:
    $22 = ($n | 0) > 3599;
    if ($22) {
      label = 15;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    HEAP32[$__tmp_marker >> 2] = 0;
    $24 = $n * 15 & -1;
    $25 = $24 >> 3;
    $26 = $25 << 2;
    $27 = $26 + 1756 | 0;
    $28 = $27 >>> 0 < 65536;
    if ($28) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $30 = STACKTOP;
    STACKTOP = STACKTOP + $27 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $34 = $30;
    label = 13;
    break;
   case 12:
    $32 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $27) | 0;
    $34 = $32;
    label = 13;
    break;
   case 13:
    $35 = $34;
    ___gmpn_toom8_sqr($p, $a, $n, $35);
    $36 = HEAP32[$__tmp_marker >> 2] | 0;
    $37 = ($36 | 0) == 0;
    if ($37) {
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    ___gmp_tmp_reentrant_free($36);
    label = 16;
    break;
   case 15:
    ___gmpn_nussbaumer_mul($p, $a, $n, $a, $n);
    label = 16;
    break;
   case 16:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpn_mul_basecase($rp, $up, $un, $vp, $vn) {
  $rp = $rp | 0;
  $up = $up | 0;
  $un = $un | 0;
  $vp = $vp | 0;
  $vn = $vn | 0;
  var $1 = 0, $2 = 0, $3 = 0, $_021 = 0, $4 = 0, $_020_sum = 0, $rp_pn = 0, $vp_pn = 0, $_025 = 0, $_01926 = 0, $_02027 = 0, $6 = 0, $7 = 0, $8 = 0, $_0 = 0, $9 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP32[$vp >> 2] | 0;
    $2 = ___gmpn_mul_1($rp, $up, $un, $1) | 0;
    $3 = $rp + ($un << 2) | 0;
    HEAP32[$3 >> 2] = $2;
    $_021 = $vn - 1 | 0;
    $4 = ($_021 | 0) > 0;
    if ($4) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $_020_sum = $un + 1 | 0;
    $_025 = $_021;
    $vp_pn = $vp;
    $rp_pn = $rp;
    label = 3;
    break;
   case 3:
    $_01926 = $vp_pn + 4 | 0;
    $_02027 = $rp_pn + 4 | 0;
    $6 = HEAP32[$_01926 >> 2] | 0;
    $7 = ___gmpn_addmul_1($_02027, $up, $un, $6) | 0;
    $8 = $rp_pn + ($_020_sum << 2) | 0;
    HEAP32[$8 >> 2] = $7;
    $_0 = $_025 - 1 | 0;
    $9 = ($_0 | 0) > 0;
    if ($9) {
      $_025 = $_0;
      $vp_pn = $_01926;
      $rp_pn = $_02027;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    return;
  }
}
function ___gmpn_sqr_basecase($rp, $up, $n) {
  $rp = $rp | 0;
  $up = $up | 0;
  $n = $n | 0;
  var $tarr = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $uadd$0 = 0, $uadd$1 = 0, $9 = 0, $10 = 0, $11 = 0, $__x3_0 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $i_070 = 0, $30 = 0, $_sum = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $exitcond73 = 0, $_i_069 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $uadd68$0 = 0, $uadd68$1 = 0, $50 = 0, $51 = 0, $52 = 0, $__x38_0 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $exitcond = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 400 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $tarr = __stackBase__ | 0;
    $1 = HEAP32[$up >> 2] | 0;
    $2 = $1 & 65535;
    $3 = $1 >>> 16;
    $4 = Math_imul($2, $2);
    $5 = Math_imul($2, $3);
    $6 = Math_imul($3, $3);
    $7 = $4 >>> 16;
    $8 = $7 + $5 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($8 | 0, $5 | 0) | 0;
    $uadd$1 = tempRet0;
    $9 = $uadd$0;
    $10 = $uadd$1;
    $11 = $6 + 65536 | 0;
    $__x3_0 = $10 ? $11 : $6;
    $12 = $9 >>> 16;
    $13 = $__x3_0 + $12 | 0;
    $14 = $rp + 4 | 0;
    HEAP32[$14 >> 2] = $13;
    $15 = $9 << 16;
    $16 = $4 & 65535;
    $17 = $15 | $16;
    HEAP32[$rp >> 2] = $17;
    $18 = ($n | 0) > 1;
    if ($18) {
      label = 2;
      break;
    } else {
      label = 8;
      break;
    }
   case 2:
    $20 = $tarr | 0;
    $21 = $up + 4 | 0;
    $22 = $n - 1 | 0;
    $23 = HEAP32[$up >> 2] | 0;
    $24 = ___gmpn_mul_1($20, $21, $22, $23) | 0;
    $25 = $tarr + ($22 << 2) | 0;
    HEAP32[$25 >> 2] = $24;
    $26 = ($n | 0) > 2;
    if ($26) {
      label = 3;
      break;
    } else {
      $_i_069 = 0;
      label = 6;
      break;
    }
   case 3:
    $27 = $n - 2 | 0;
    $i_070 = 2;
    label = 5;
    break;
   case 4:
    $28 = ($n | 0) > 0;
    if ($28) {
      $_i_069 = 0;
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $30 = $i_070 << 1;
    $_sum = $30 - 2 | 0;
    $31 = $tarr + ($_sum << 2) | 0;
    $32 = $up + ($i_070 << 2) | 0;
    $33 = $n - $i_070 | 0;
    $34 = $i_070 - 1 | 0;
    $35 = $up + ($34 << 2) | 0;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = ___gmpn_addmul_1($31, $32, $33, $36) | 0;
    $38 = $27 + $i_070 | 0;
    $39 = $tarr + ($38 << 2) | 0;
    HEAP32[$39 >> 2] = $37;
    $40 = $i_070 + 1 | 0;
    $exitcond73 = ($40 | 0) == ($n | 0);
    if ($exitcond73) {
      label = 4;
      break;
    } else {
      $i_070 = $40;
      label = 5;
      break;
    }
   case 6:
    $41 = $up + ($_i_069 << 2) | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    $43 = $42 & 65535;
    $44 = $42 >>> 16;
    $45 = Math_imul($43, $43);
    $46 = Math_imul($43, $44);
    $47 = Math_imul($44, $44);
    $48 = $45 >>> 16;
    $49 = $48 + $46 | 0;
    $uadd68$0 = _llvm_uadd_with_overflow_i32($49 | 0, $46 | 0) | 0;
    $uadd68$1 = tempRet0;
    $50 = $uadd68$0;
    $51 = $uadd68$1;
    $52 = $47 + 65536 | 0;
    $__x38_0 = $51 ? $52 : $47;
    $53 = $50 >>> 16;
    $54 = $__x38_0 + $53 | 0;
    $55 = $_i_069 << 1;
    $56 = $55 | 1;
    $57 = $rp + ($56 << 2) | 0;
    HEAP32[$57 >> 2] = $54;
    $58 = $50 << 16;
    $59 = $45 & 65535;
    $60 = $58 | $59;
    $61 = $rp + ($55 << 2) | 0;
    HEAP32[$61 >> 2] = $60;
    $62 = $_i_069 + 1 | 0;
    $exitcond = ($62 | 0) == ($n | 0);
    if ($exitcond) {
      label = 7;
      break;
    } else {
      $_i_069 = $62;
      label = 6;
      break;
    }
   case 7:
    $63 = $n << 1;
    $64 = $63 - 2 | 0;
    $65 = ___gmpn_lshift($20, $20, $64, 1) | 0;
    $66 = ___gmpn_add_n($14, $14, $20, $64) | 0;
    $67 = $66 + $65 | 0;
    $68 = $63 - 1 | 0;
    $69 = $rp + ($68 << 2) | 0;
    $70 = HEAP32[$69 >> 2] | 0;
    $71 = $67 + $70 | 0;
    HEAP32[$69 >> 2] = $71;
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpn_nussbaumer_mul($pp, $ap, $an, $bp, $bn) {
  $pp = $pp | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $bp = $bp | 0;
  $bn = $bn | 0;
  var $__tmp_marker = 0, $1 = 0, $2 = 0, $or_cond = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    $1 = ($ap | 0) == ($bp | 0);
    $2 = ($an | 0) == ($bn | 0);
    $or_cond = $1 & $2;
    if ($or_cond) {
      label = 2;
      break;
    } else {
      label = 6;
      break;
    }
   case 2:
    $4 = $an << 1;
    $5 = ___gmpn_sqrmod_bnm1_next_size($4) | 0;
    $6 = _mpn_sqrmod_bnm1_itch($5, $an) | 0;
    $7 = $6 << 2;
    $8 = $7 >>> 0 < 65536;
    if ($8) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $10 = STACKTOP;
    STACKTOP = STACKTOP + $7 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $14 = $10;
    label = 5;
    break;
   case 4:
    $12 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $7) | 0;
    $14 = $12;
    label = 5;
    break;
   case 5:
    $15 = $14;
    ___gmpn_sqrmod_bnm1($pp, $5, $ap, $an, $15);
    label = 10;
    break;
   case 6:
    $17 = $bn + $an | 0;
    $18 = ___gmpn_mulmod_bnm1_next_size($17) | 0;
    $19 = _mpn_mulmod_bnm1_itch($18, $an, $bn) | 0;
    $20 = $19 << 2;
    $21 = $20 >>> 0 < 65536;
    if ($21) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $23 = STACKTOP;
    STACKTOP = STACKTOP + $20 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $27 = $23;
    label = 9;
    break;
   case 8:
    $25 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $20) | 0;
    $27 = $25;
    label = 9;
    break;
   case 9:
    $28 = $27;
    ___gmpn_mulmod_bnm1($pp, $18, $ap, $an, $bp, $bn, $28);
    label = 10;
    break;
   case 10:
    $30 = HEAP32[$__tmp_marker >> 2] | 0;
    $31 = ($30 | 0) == 0;
    if ($31) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    ___gmp_tmp_reentrant_free($30);
    label = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpn_get_str($str, $base, $up, $un) {
  $str = $str | 0;
  $base = $base | 0;
  $up = $up | 0;
  $un = $un | 0;
  var $big_base = 0, $powtab = 0, $__tmp_marker = 0, $exptab = 0, $1 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $bits_0 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $s_0 = 0, $i_0 = 0, $bit_pos_0 = 0, $n1_0 = 0, $bit_pos_1140 = 0, $43 = 0, $bit_pos_1142 = 0, $s_1141 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $bit_pos_1 = 0, $48 = 0, $bit_pos_1_lcssa = 0, $s_1_lcssa = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $uadd$0 = 0, $uadd$1 = 0, $96 = 0, $97 = 0, $98 = 0, $__x3_0 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $106 = 0, $pn_0167 = 0, $n_pows_0166 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $_lcssa = 0, $n_pows_0_lcssa = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $powtab_mem_ptr_0163 = 0, $digits_in_base_0162 = 0, $pi_0161 = 0, $n_0160 = 0, $p_0159 = 0, $shift_0158 = 0, $bexp_0157 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $bexp_1 = 0, $n_1 = 0, $digits_in_base_1 = 0, $159 = 0, $160 = 0, $161 = 0, $n_2150 = 0, $t_0149 = 0, $shift_1148 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $n_2_lcssa = 0, $t_0_lcssa = 0, $shift_1_lcssa = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $pi_1144 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $n_3 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $exitcond = 0, $198 = 0, $pi_1_lcssa = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 784 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $big_base = __stackBase__ | 0;
    $powtab = __stackBase__ + 8 | 0;
    $__tmp_marker = __stackBase__ + 648 | 0;
    $exptab = __stackBase__ + 656 | 0;
    $1 = ($un | 0) == 0;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    HEAP8[$str] = 0;
    $_0 = 1;
    label = 37;
    break;
   case 3:
    $4 = $base - 1 | 0;
    $5 = $4 & $base;
    $6 = ($5 | 0) == 0;
    if ($6) {
      label = 4;
      break;
    } else {
      label = 15;
      break;
    }
   case 4:
    $8 = 9844 + ($base * 20 & -1) | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $un - 1 | 0;
    $11 = $up + ($10 << 2) | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 >>> 0 < 65536;
    if ($13) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $15 = $12 >>> 0 < 256;
    $16 = $15 ? 1 : 9;
    $21 = $16;
    label = 7;
    break;
   case 6:
    $18 = $12 >>> 0 < 16777216;
    $19 = $18 ? 17 : 25;
    $21 = $19;
    label = 7;
    break;
   case 7:
    $22 = $12 >>> ($21 >>> 0);
    $23 = $22 + 9696 | 0;
    $24 = HEAP8[$23] | 0;
    $25 = $24 & 255;
    $26 = $un << 5;
    $27 = $26 - 33 | 0;
    $28 = $27 + $21 | 0;
    $29 = $28 + $25 | 0;
    $30 = ($29 >>> 0) % ($9 >>> 0);
    $31 = ($30 | 0) == 0;
    if ($31) {
      $bits_0 = $29;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $33 = $9 - $30 | 0;
    $34 = $33 + $29 | 0;
    $bits_0 = $34;
    label = 9;
    break;
   case 9:
    $36 = $10 << 5;
    $37 = $bits_0 - $36 | 0;
    $38 = 1 << $9;
    $39 = $38 + 255 | 0;
    $40 = 1 << $9;
    $41 = $40 + 255 | 0;
    $n1_0 = $12;
    $bit_pos_0 = $37;
    $i_0 = $10;
    $s_0 = $str;
    label = 10;
    break;
   case 10:
    $bit_pos_1140 = $bit_pos_0 - $9 | 0;
    $43 = ($bit_pos_1140 | 0) > -1;
    if ($43) {
      $s_1141 = $s_0;
      $bit_pos_1142 = $bit_pos_1140;
      label = 11;
      break;
    } else {
      $s_1_lcssa = $s_0;
      $bit_pos_1_lcssa = $bit_pos_1140;
      label = 12;
      break;
    }
   case 11:
    $44 = $n1_0 >>> ($bit_pos_1142 >>> 0);
    $45 = $44 & $41;
    $46 = $45 & 255;
    $47 = $s_1141 + 1 | 0;
    HEAP8[$s_1141] = $46;
    $bit_pos_1 = $bit_pos_1142 - $9 | 0;
    $48 = ($bit_pos_1 | 0) > -1;
    if ($48) {
      $s_1141 = $47;
      $bit_pos_1142 = $bit_pos_1;
      label = 11;
      break;
    } else {
      $s_1_lcssa = $47;
      $bit_pos_1_lcssa = $bit_pos_1;
      label = 12;
      break;
    }
   case 12:
    $49 = $i_0 - 1 | 0;
    $50 = ($49 | 0) < 0;
    if ($50) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $52 = -$bit_pos_1_lcssa | 0;
    $53 = $n1_0 << $52;
    $54 = $53 & $39;
    $55 = $up + ($49 << 2) | 0;
    $56 = HEAP32[$55 >> 2] | 0;
    $57 = $bit_pos_1_lcssa + 32 | 0;
    $58 = $56 >>> ($57 >>> 0);
    $59 = $58 | $54;
    $60 = $59 & 255;
    $61 = $s_1_lcssa + 1 | 0;
    HEAP8[$s_1_lcssa] = $60;
    $n1_0 = $56;
    $bit_pos_0 = $57;
    $i_0 = $49;
    $s_0 = $61;
    label = 10;
    break;
   case 14:
    $63 = $s_1_lcssa;
    $64 = $str;
    $65 = $63 - $64 | 0;
    $_0 = $65;
    label = 37;
    break;
   case 15:
    $67 = ($un | 0) > 34;
    if ($67) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $69 = _mpn_sb_get_str($str, 0, $up, $un, $base) | 0;
    $70 = $69;
    $71 = $str;
    $72 = $70 - $71 | 0;
    $_0 = $72;
    label = 37;
    break;
   case 17:
    HEAP32[$__tmp_marker >> 2] = 0;
    $74 = $un + 64 | 0;
    $75 = $74 << 2;
    $76 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $75) | 0;
    $77 = $76;
    $78 = 9844 + ($base * 20 & -1) | 0;
    $79 = HEAP32[$78 >> 2] | 0;
    HEAP32[$big_base >> 2] = $79;
    $80 = 9832 + ($base * 20 & -1) | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    $82 = 9836 + ($base * 20 & -1) | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = $un << 5;
    $85 = $83 & 65535;
    $86 = $83 >>> 16;
    $87 = $84 & 65504;
    $88 = $un >>> 11;
    $89 = $88 & 65535;
    $90 = Math_imul($85, $87);
    $91 = Math_imul($85, $89);
    $92 = Math_imul($86, $87);
    $93 = Math_imul($86, $89);
    $94 = $90 >>> 16;
    $95 = $94 + $91 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($95 | 0, $92 | 0) | 0;
    $uadd$1 = tempRet0;
    $96 = $uadd$0;
    $97 = $uadd$1;
    $98 = $93 + 65536 | 0;
    $__x3_0 = $97 ? $98 : $93;
    $99 = $96 >>> 16;
    $100 = $__x3_0 + $99 | 0;
    $101 = ($100 >>> 0) / ($81 >>> 0) >>> 0;
    $102 = ($101 | 0) == 0;
    $103 = $exptab | 0;
    if ($102) {
      $n_pows_0_lcssa = 0;
      $_lcssa = $103;
      label = 20;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $104 = $101 + 1 | 0;
    $n_pows_0166 = 0;
    $pn_0167 = $104;
    $106 = $103;
    label = 19;
    break;
   case 19:
    HEAP32[$106 >> 2] = $pn_0167;
    $107 = $n_pows_0166 + 1 | 0;
    $108 = $pn_0167 + 1 | 0;
    $109 = $108 >> 1;
    $110 = ($109 | 0) == 1;
    $111 = $exptab + ($107 << 2) | 0;
    if ($110) {
      $n_pows_0_lcssa = $107;
      $_lcssa = $111;
      label = 20;
      break;
    } else {
      $n_pows_0166 = $107;
      $pn_0167 = $109;
      $106 = $111;
      label = 19;
      break;
    }
   case 20:
    HEAP32[$_lcssa >> 2] = 1;
    $112 = $powtab | 0;
    HEAP32[$112 >> 2] = $big_base;
    $113 = $powtab + 4 | 0;
    HEAP32[$113 >> 2] = 1;
    $114 = $powtab + 12 | 0;
    HEAP32[$114 >> 2] = $81;
    $115 = $powtab + 16 | 0;
    HEAP32[$115 >> 2] = $base;
    $116 = $powtab + 8 | 0;
    HEAP32[$116 >> 2] = 0;
    $117 = $powtab + 20 | 0;
    HEAP32[$117 >> 2] = $77;
    $118 = HEAP32[$big_base >> 2] | 0;
    HEAP32[$77 >> 2] = $118;
    $119 = $powtab + 24 | 0;
    HEAP32[$119 >> 2] = 1;
    $120 = $powtab + 32 | 0;
    HEAP32[$120 >> 2] = $81;
    $121 = $powtab + 36 | 0;
    HEAP32[$121 >> 2] = $base;
    $122 = $powtab + 28 | 0;
    HEAP32[$122 >> 2] = 0;
    $123 = ($n_pows_0_lcssa | 0) > 2;
    if ($123) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    $124 = $76 + 8 | 0;
    $125 = $124;
    $126 = $77 + ($74 << 2) | 0;
    $bexp_0157 = 1;
    $shift_0158 = 0;
    $p_0159 = $big_base;
    $n_0160 = 1;
    $pi_0161 = 2;
    $digits_in_base_0162 = $81;
    $powtab_mem_ptr_0163 = $125;
    label = 24;
    break;
   case 22:
    $127 = ($n_pows_0_lcssa | 0) > 1;
    if ($127) {
      label = 23;
      break;
    } else {
      $pi_1_lcssa = 0;
      label = 35;
      break;
    }
   case 23:
    $128 = HEAP32[$80 >> 2] | 0;
    $pi_1144 = 1;
    label = 31;
    break;
   case 24:
    $130 = $n_0160 << 1;
    $131 = $130 + 2 | 0;
    $132 = $powtab_mem_ptr_0163 + ($131 << 2) | 0;
    $133 = $132 >>> 0 < $126 >>> 0;
    if ($133) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    ___gmp_assert_fail(7392, 478, 8656);
    return 0;
   case 26:
    ___gmpn_sqr($powtab_mem_ptr_0163, $p_0159, $n_0160);
    $136 = $digits_in_base_0162 << 1;
    $137 = $130 - 1 | 0;
    $138 = $powtab_mem_ptr_0163 + ($137 << 2) | 0;
    $139 = HEAP32[$138 >> 2] | 0;
    $140 = ($139 | 0) == 0;
    $141 = $140 & 1;
    $142 = $130 - $141 | 0;
    $143 = $bexp_0157 << 1;
    $144 = $143 | 1;
    $145 = $n_pows_0_lcssa - $pi_0161 | 0;
    $146 = $exptab + ($145 << 2) | 0;
    $147 = HEAP32[$146 >> 2] | 0;
    $148 = ($144 | 0) < ($147 | 0);
    if ($148) {
      label = 27;
      break;
    } else {
      $digits_in_base_1 = $136;
      $n_1 = $142;
      $bexp_1 = $143;
      label = 28;
      break;
    }
   case 27:
    $150 = HEAP32[$80 >> 2] | 0;
    $151 = $150 + $136 | 0;
    $152 = HEAP32[$big_base >> 2] | 0;
    $153 = ___gmpn_mul_1($powtab_mem_ptr_0163, $powtab_mem_ptr_0163, $142, $152) | 0;
    $154 = $powtab_mem_ptr_0163 + ($142 << 2) | 0;
    HEAP32[$154 >> 2] = $153;
    $155 = ($153 | 0) != 0;
    $156 = $155 & 1;
    $157 = $156 + $142 | 0;
    $digits_in_base_1 = $151;
    $n_1 = $157;
    $bexp_1 = $144;
    label = 28;
    break;
   case 28:
    $159 = $shift_0158 << 1;
    $160 = HEAP32[$powtab_mem_ptr_0163 >> 2] | 0;
    $161 = ($160 | 0) == 0;
    if ($161) {
      $shift_1148 = $159;
      $t_0149 = $powtab_mem_ptr_0163;
      $n_2150 = $n_1;
      label = 29;
      break;
    } else {
      $shift_1_lcssa = $159;
      $t_0_lcssa = $powtab_mem_ptr_0163;
      $n_2_lcssa = $n_1;
      label = 30;
      break;
    }
   case 29:
    $162 = $t_0149 + 4 | 0;
    $163 = $n_2150 - 1 | 0;
    $164 = $shift_1148 + 1 | 0;
    $165 = HEAP32[$162 >> 2] | 0;
    $166 = ($165 | 0) == 0;
    if ($166) {
      $shift_1148 = $164;
      $t_0149 = $162;
      $n_2150 = $163;
      label = 29;
      break;
    } else {
      $shift_1_lcssa = $164;
      $t_0_lcssa = $162;
      $n_2_lcssa = $163;
      label = 30;
      break;
    }
   case 30:
    $167 = $powtab + ($pi_0161 * 20 & -1) | 0;
    HEAP32[$167 >> 2] = $t_0_lcssa;
    $168 = $powtab + ($pi_0161 * 20 & -1) + 4 | 0;
    HEAP32[$168 >> 2] = $n_2_lcssa;
    $169 = $powtab + ($pi_0161 * 20 & -1) + 12 | 0;
    HEAP32[$169 >> 2] = $digits_in_base_1;
    $170 = $powtab + ($pi_0161 * 20 & -1) + 16 | 0;
    HEAP32[$170 >> 2] = $base;
    $171 = $powtab + ($pi_0161 * 20 & -1) + 8 | 0;
    HEAP32[$171 >> 2] = $shift_1_lcssa;
    $172 = $pi_0161 + 1 | 0;
    $173 = ($172 | 0) < ($n_pows_0_lcssa | 0);
    if ($173) {
      $bexp_0157 = $bexp_1;
      $shift_0158 = $shift_1_lcssa;
      $p_0159 = $t_0_lcssa;
      $n_0160 = $n_2_lcssa;
      $pi_0161 = $172;
      $digits_in_base_0162 = $digits_in_base_1;
      $powtab_mem_ptr_0163 = $132;
      label = 24;
      break;
    } else {
      label = 22;
      break;
    }
   case 31:
    $175 = $powtab + ($pi_1144 * 20 & -1) | 0;
    $176 = HEAP32[$175 >> 2] | 0;
    $177 = $powtab + ($pi_1144 * 20 & -1) + 4 | 0;
    $178 = HEAP32[$177 >> 2] | 0;
    $179 = HEAP32[$big_base >> 2] | 0;
    $180 = ___gmpn_mul_1($176, $176, $178, $179) | 0;
    $181 = $176 + ($178 << 2) | 0;
    HEAP32[$181 >> 2] = $180;
    $182 = ($180 | 0) != 0;
    $183 = $182 & 1;
    $184 = $183 + $178 | 0;
    $185 = HEAP32[$176 >> 2] | 0;
    $186 = ($185 | 0) == 0;
    if ($186) {
      label = 32;
      break;
    } else {
      $n_3 = $184;
      label = 33;
      break;
    }
   case 32:
    $188 = $176 + 4 | 0;
    HEAP32[$175 >> 2] = $188;
    $189 = $184 - 1 | 0;
    $190 = $powtab + ($pi_1144 * 20 & -1) + 8 | 0;
    $191 = HEAP32[$190 >> 2] | 0;
    $192 = $191 + 1 | 0;
    HEAP32[$190 >> 2] = $192;
    $n_3 = $189;
    label = 33;
    break;
   case 33:
    HEAP32[$177 >> 2] = $n_3;
    $194 = $powtab + ($pi_1144 * 20 & -1) + 12 | 0;
    $195 = HEAP32[$194 >> 2] | 0;
    $196 = $195 + $128 | 0;
    HEAP32[$194 >> 2] = $196;
    $197 = $pi_1144 + 1 | 0;
    $exitcond = ($197 | 0) == ($n_pows_0_lcssa | 0);
    if ($exitcond) {
      label = 34;
      break;
    } else {
      $pi_1144 = $197;
      label = 31;
      break;
    }
   case 34:
    $198 = $n_pows_0_lcssa - 1 | 0;
    $pi_1_lcssa = $198;
    label = 35;
    break;
   case 35:
    $200 = $un << 2;
    $201 = $200 + 128 | 0;
    $202 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $201) | 0;
    $203 = $202;
    $204 = $powtab + ($pi_1_lcssa * 20 & -1) | 0;
    $205 = _mpn_dc_get_str($str, 0, $up, $un, $204, $203) | 0;
    $206 = $205;
    $207 = $str;
    $208 = $206 - $207 | 0;
    $209 = HEAP32[$__tmp_marker >> 2] | 0;
    $210 = ($209 | 0) == 0;
    if ($210) {
      $_0 = $208;
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    ___gmp_tmp_reentrant_free($209);
    $_0 = $208;
    label = 37;
    break;
   case 37:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _mpn_sb_get_str($str, $len, $up, $un, $base) {
  $str = $str | 0;
  $len = $len | 0;
  $up = $up | 0;
  $un = $un | 0;
  $base = $base | 0;
  var $buf = 0, $rp = 0, $1 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__x_0 = 0, $up_pn87 = 0, $__dst_0 = 0, $__n_0 = 0, $__src_0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $scevgep132 = 0, $__x_1 = 0, $__dst_1 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $_084103 = 0, $s_0102 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $uadd86 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $uadd86_1 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $uadd86_2 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $uadd86_3 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $uadd86_4 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $uadd86_5 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $uadd86_6 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $uadd86_7 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $uadd86_8 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $s_0_lcssa = 0, $102 = 0, $103 = 0, $104 = 0, $ul_098 = 0, $s_297 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $119 = 0, $120 = 0, $122 = 0, $123 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $__n1_0 = 0, $__dst2_0 = 0, $up_pn = 0, $__x4_0 = 0, $__src3_0 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $scevgep138 = 0, $__dst2_1 = 0, $__x4_1 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $_sum = 0, $_185118 = 0, $s_3117 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $i5_0 = 0, $frac6_0 = 0, $s_4 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $180 = 0, $scevgep134_sum = 0, $181 = 0, $182 = 0, $s_3_lcssa = 0, $183 = 0, $184 = 0, $185 = 0, $ul_1113 = 0, $s_5112 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $s_6 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $scevgep127 = 0, $_0_lcssa = 0, $198 = 0, $199 = 0, $_191 = 0, $s_790 = 0, $l_089 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $scevgep = 0, $_1_lcssa = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 856 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $buf = __stackBase__ | 0;
    $rp = __stackBase__ + 712 | 0;
    $1 = ($base | 0) == 10;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 12;
      break;
    }
   case 2:
    $3 = ($un | 0) == 0;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $4 = $buf + 712 | 0;
    $s_0_lcssa = $4;
    label = 10;
    break;
   case 4:
    $6 = $un - 1 | 0;
    $7 = $rp + 4 | 0;
    $8 = HEAP32[$up >> 2] | 0;
    $9 = ($6 | 0) == 0;
    if ($9) {
      $__dst_1 = $7;
      $__x_1 = $8;
      label = 7;
      break;
    } else {
      $__n_0 = $6;
      $__dst_0 = $7;
      $up_pn87 = $up;
      $__x_0 = $8;
      label = 5;
      break;
    }
   case 5:
    $__src_0 = $up_pn87 + 4 | 0;
    $10 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $11 = HEAP32[$__src_0 >> 2] | 0;
    $12 = $__n_0 - 1 | 0;
    $13 = ($12 | 0) == 0;
    if ($13) {
      label = 6;
      break;
    } else {
      $__n_0 = $12;
      $__dst_0 = $10;
      $up_pn87 = $__src_0;
      $__x_0 = $11;
      label = 5;
      break;
    }
   case 6:
    $scevgep132 = $rp + ($un << 2) | 0;
    $__dst_1 = $scevgep132;
    $__x_1 = $11;
    label = 7;
    break;
   case 7:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    $15 = $buf + 712 | 0;
    $16 = ($un | 0) > 1;
    if ($16) {
      label = 8;
      break;
    } else {
      $s_0_lcssa = $15;
      label = 10;
      break;
    }
   case 8:
    $17 = $rp | 0;
    $18 = $rp + 4 | 0;
    $s_0102 = $15;
    $_084103 = $un;
    label = 9;
    break;
   case 9:
    $20 = ___gmpn_preinv_divrem_1($17, 1, $18, $_084103, 1e9, 316718722, 2) | 0;
    $21 = HEAP32[$17 >> 2] | 0;
    $22 = $21 + 1 | 0;
    $23 = $rp + ($_084103 << 2) | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $s_0102 - 9 | 0;
    $26 = ($24 | 0) == 0;
    $27 = $26 & 1;
    $28 = $22 & 65535;
    $29 = $22 >>> 16;
    $30 = $28 * 10 & -1;
    $31 = $29 * 10 & -1;
    $32 = $30 >>> 16;
    $uadd86 = $32 + $31 | 0;
    $33 = $uadd86 >>> 16;
    $34 = $33 & 255;
    $35 = $s_0102 - 8 | 0;
    HEAP8[$25] = $34;
    $36 = $30 & 65534;
    $37 = $uadd86 & 65535;
    $38 = $36 * 10 & -1;
    $39 = $37 * 10 & -1;
    $40 = $38 >>> 16;
    $uadd86_1 = $40 + $39 | 0;
    $41 = $uadd86_1 >>> 16;
    $42 = $41 & 255;
    $43 = $s_0102 - 7 | 0;
    HEAP8[$35] = $42;
    $44 = $38 & 65532;
    $45 = $uadd86_1 & 65535;
    $46 = $44 * 10 & -1;
    $47 = $45 * 10 & -1;
    $48 = $46 >>> 16;
    $uadd86_2 = $48 + $47 | 0;
    $49 = $uadd86_2 >>> 16;
    $50 = $49 & 255;
    $51 = $s_0102 - 6 | 0;
    HEAP8[$43] = $50;
    $52 = $46 & 65528;
    $53 = $uadd86_2 & 65535;
    $54 = $52 * 10 & -1;
    $55 = $53 * 10 & -1;
    $56 = $54 >>> 16;
    $uadd86_3 = $56 + $55 | 0;
    $57 = $uadd86_3 >>> 16;
    $58 = $57 & 255;
    $59 = $s_0102 - 5 | 0;
    HEAP8[$51] = $58;
    $60 = $54 & 65520;
    $61 = $uadd86_3 & 65535;
    $62 = $60 * 10 & -1;
    $63 = $61 * 10 & -1;
    $64 = $62 >>> 16;
    $uadd86_4 = $64 + $63 | 0;
    $65 = $uadd86_4 >>> 16;
    $66 = $65 & 255;
    $67 = $s_0102 - 4 | 0;
    HEAP8[$59] = $66;
    $68 = $62 & 65504;
    $69 = $uadd86_4 & 65535;
    $70 = $68 * 10 & -1;
    $71 = $69 * 10 & -1;
    $72 = $70 >>> 16;
    $uadd86_5 = $72 + $71 | 0;
    $73 = $uadd86_5 >>> 16;
    $74 = $73 & 255;
    $75 = $s_0102 - 3 | 0;
    HEAP8[$67] = $74;
    $76 = $70 & 65472;
    $77 = $uadd86_5 & 65535;
    $78 = $76 * 10 & -1;
    $79 = $77 * 10 & -1;
    $80 = $78 >>> 16;
    $uadd86_6 = $80 + $79 | 0;
    $81 = $uadd86_6 >>> 16;
    $82 = $81 & 255;
    $83 = $s_0102 - 2 | 0;
    HEAP8[$75] = $82;
    $84 = $78 & 65408;
    $85 = $uadd86_6 & 65535;
    $86 = $84 * 10 & -1;
    $87 = $85 * 10 & -1;
    $88 = $86 >>> 16;
    $uadd86_7 = $88 + $87 | 0;
    $89 = $uadd86_7 >>> 16;
    $90 = $89 & 255;
    $91 = $s_0102 - 1 | 0;
    HEAP8[$83] = $90;
    $92 = $86 & 65280;
    $93 = $uadd86_7 & 65535;
    $94 = $92 * 10 & -1;
    $95 = $93 * 10 & -1;
    $96 = $94 >>> 16;
    $uadd86_8 = $96 + $95 | 0;
    $97 = $uadd86_8 >>> 16;
    $98 = $97 & 255;
    HEAP8[$91] = $98;
    $99 = $_084103 - $27 | 0;
    $100 = $s_0102 - 9 | 0;
    $101 = ($99 | 0) > 1;
    if ($101) {
      $s_0102 = $100;
      $_084103 = $99;
      label = 9;
      break;
    } else {
      $s_0_lcssa = $100;
      label = 10;
      break;
    }
   case 10:
    $102 = $rp + 4 | 0;
    $103 = HEAP32[$102 >> 2] | 0;
    $104 = ($103 | 0) == 0;
    if ($104) {
      $s_6 = $s_0_lcssa;
      label = 27;
      break;
    } else {
      $s_297 = $s_0_lcssa;
      $ul_098 = $103;
      label = 11;
      break;
    }
   case 11:
    $105 = ($ul_098 >>> 0) / 10 >>> 0;
    $106 = ($ul_098 >>> 0) % 10;
    $107 = $106 & 255;
    $108 = $s_297 - 1 | 0;
    HEAP8[$108] = $107;
    $109 = $ul_098 >>> 0 < 10;
    if ($109) {
      $s_6 = $108;
      label = 27;
      break;
    } else {
      $s_297 = $108;
      $ul_098 = $105;
      label = 11;
      break;
    }
   case 12:
    $111 = 9832 + ($base * 20 & -1) | 0;
    $112 = HEAP32[$111 >> 2] | 0;
    $113 = 9844 + ($base * 20 & -1) | 0;
    $114 = HEAP32[$113 >> 2] | 0;
    $115 = 9848 + ($base * 20 & -1) | 0;
    $116 = HEAP32[$115 >> 2] | 0;
    $117 = $114 >>> 0 < 65536;
    if ($117) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $119 = $114 >>> 0 < 256;
    $120 = $119 ? 1 : 9;
    $125 = $120;
    label = 15;
    break;
   case 14:
    $122 = $114 >>> 0 < 16777216;
    $123 = $122 ? 17 : 25;
    $125 = $123;
    label = 15;
    break;
   case 15:
    $126 = 33 - $125 | 0;
    $127 = $114 >>> ($125 >>> 0);
    $128 = $127 + 9696 | 0;
    $129 = HEAP8[$128] | 0;
    $130 = $129 & 255;
    $131 = $126 - $130 | 0;
    $132 = ($un | 0) == 0;
    if ($132) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    $133 = $buf + 712 | 0;
    $s_3_lcssa = $133;
    label = 25;
    break;
   case 17:
    $135 = $un - 1 | 0;
    $136 = $rp + 4 | 0;
    $137 = HEAP32[$up >> 2] | 0;
    $138 = ($135 | 0) == 0;
    if ($138) {
      $__x4_1 = $137;
      $__dst2_1 = $136;
      label = 20;
      break;
    } else {
      $__x4_0 = $137;
      $up_pn = $up;
      $__dst2_0 = $136;
      $__n1_0 = $135;
      label = 18;
      break;
    }
   case 18:
    $__src3_0 = $up_pn + 4 | 0;
    $139 = $__dst2_0 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    $140 = HEAP32[$__src3_0 >> 2] | 0;
    $141 = $__n1_0 - 1 | 0;
    $142 = ($141 | 0) == 0;
    if ($142) {
      label = 19;
      break;
    } else {
      $__x4_0 = $140;
      $up_pn = $__src3_0;
      $__dst2_0 = $139;
      $__n1_0 = $141;
      label = 18;
      break;
    }
   case 19:
    $scevgep138 = $rp + ($un << 2) | 0;
    $__x4_1 = $140;
    $__dst2_1 = $scevgep138;
    label = 20;
    break;
   case 20:
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    $144 = $buf + 712 | 0;
    $145 = ($un | 0) > 1;
    if ($145) {
      label = 21;
      break;
    } else {
      $s_3_lcssa = $144;
      label = 25;
      break;
    }
   case 21:
    $146 = $rp | 0;
    $147 = $rp + 4 | 0;
    $148 = -$112 | 0;
    $149 = $base & 65535;
    $150 = $base >>> 16;
    $_sum = 1 - $112 | 0;
    $s_3117 = $144;
    $_185118 = $un;
    label = 22;
    break;
   case 22:
    $152 = ___gmpn_preinv_divrem_1($146, 1, $147, $_185118, $114, $116, $131) | 0;
    $153 = $rp + ($_185118 << 2) | 0;
    $154 = HEAP32[$153 >> 2] | 0;
    $155 = ($154 | 0) == 0;
    $156 = $155 & 1;
    $157 = HEAP32[$146 >> 2] | 0;
    $158 = $157 + 1 | 0;
    $159 = $s_3117 + $148 | 0;
    $s_4 = $159;
    $frac6_0 = $158;
    $i5_0 = $112;
    label = 23;
    break;
   case 23:
    $161 = $frac6_0 & 65535;
    $162 = $frac6_0 >>> 16;
    $163 = Math_imul($161, $149);
    $164 = Math_imul($161, $150);
    $165 = Math_imul($162, $149);
    $166 = Math_imul($162, $150);
    $167 = $163 >>> 16;
    $168 = $165 + $164 | 0;
    $169 = $168 + $167 | 0;
    $170 = $169 >>> 16;
    $171 = $170 + $166 | 0;
    $172 = $169 << 16;
    $173 = $163 & 65535;
    $174 = $172 | $173;
    $175 = $171 & 255;
    $176 = $s_4 + 1 | 0;
    HEAP8[$s_4] = $175;
    $177 = $i5_0 - 1 | 0;
    $178 = ($177 | 0) == 0;
    if ($178) {
      label = 24;
      break;
    } else {
      $s_4 = $176;
      $frac6_0 = $174;
      $i5_0 = $177;
      label = 23;
      break;
    }
   case 24:
    $180 = $_185118 - $156 | 0;
    $scevgep134_sum = $_sum - 1 | 0;
    $181 = $s_3117 + $scevgep134_sum | 0;
    $182 = ($180 | 0) > 1;
    if ($182) {
      $s_3117 = $181;
      $_185118 = $180;
      label = 22;
      break;
    } else {
      $s_3_lcssa = $181;
      label = 25;
      break;
    }
   case 25:
    $183 = $rp + 4 | 0;
    $184 = HEAP32[$183 >> 2] | 0;
    $185 = ($184 | 0) == 0;
    if ($185) {
      $s_6 = $s_3_lcssa;
      label = 27;
      break;
    } else {
      $s_5112 = $s_3_lcssa;
      $ul_1113 = $184;
      label = 26;
      break;
    }
   case 26:
    $186 = ($ul_1113 >>> 0) / ($base >>> 0) >>> 0;
    $187 = ($ul_1113 >>> 0) % ($base >>> 0);
    $188 = $187 & 255;
    $189 = $s_5112 - 1 | 0;
    HEAP8[$189] = $188;
    $190 = ($186 | 0) == 0;
    if ($190) {
      $s_6 = $189;
      label = 27;
      break;
    } else {
      $s_5112 = $189;
      $ul_1113 = $186;
      label = 26;
      break;
    }
   case 27:
    $191 = $buf + 712 | 0;
    $192 = $191;
    $193 = $s_6;
    $194 = $192 - $193 | 0;
    $195 = $194 >>> 0 < $len >>> 0;
    if ($195) {
      label = 28;
      break;
    } else {
      $_0_lcssa = $str;
      label = 29;
      break;
    }
   case 28:
    $196 = $193 + $len | 0;
    $197 = $196 - $192 | 0;
    _memset($str | 0, 0, $197 | 0);
    $scevgep127 = $str + $197 | 0;
    $_0_lcssa = $scevgep127;
    label = 29;
    break;
   case 29:
    $198 = ($191 | 0) == ($s_6 | 0);
    if ($198) {
      $_1_lcssa = $_0_lcssa;
      label = 33;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    $199 = $192 - $193 | 0;
    $l_089 = $194;
    $s_790 = $s_6;
    $_191 = $_0_lcssa;
    label = 31;
    break;
   case 31:
    $201 = $s_790 + 1 | 0;
    $202 = HEAP8[$s_790] | 0;
    $203 = $_191 + 1 | 0;
    HEAP8[$_191] = $202;
    $204 = $l_089 - 1 | 0;
    $205 = ($204 | 0) == 0;
    if ($205) {
      label = 32;
      break;
    } else {
      $l_089 = $204;
      $s_790 = $201;
      $_191 = $203;
      label = 31;
      break;
    }
   case 32:
    $scevgep = $_0_lcssa + $199 | 0;
    $_1_lcssa = $scevgep;
    label = 33;
    break;
   case 33:
    STACKTOP = __stackBase__;
    return $_1_lcssa | 0;
  }
  return 0;
}
function _mpn_dc_get_str($str, $len, $up, $un, $powtab, $tmp) {
  $str = $str | 0;
  $len = $len | 0;
  $up = $up | 0;
  $un = $un | 0;
  $powtab = $powtab | 0;
  $tmp = $tmp | 0;
  var $1 = 0, $powtab_tr_ph81 = 0, $un_tr_ph80 = 0, $len_tr_ph79 = 0, $str_tr_ph78 = 0, $un_tr_ph76 = 0, $len_tr_ph74 = 0, $str_tr_ph72 = 0, $powtab_tr_lcssa = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $powtab_tr67 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $_160 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $scevgep = 0, $_1 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($un | 0) > 17;
    if ($1) {
      $str_tr_ph78 = $str;
      $len_tr_ph79 = $len;
      $un_tr_ph80 = $un;
      $powtab_tr_ph81 = $powtab;
      label = 2;
      break;
    } else {
      $powtab_tr_lcssa = $powtab;
      $str_tr_ph72 = $str;
      $len_tr_ph74 = $len;
      $un_tr_ph76 = $un;
      label = 3;
      break;
    }
   case 2:
    $powtab_tr67 = $powtab_tr_ph81;
    label = 6;
    break;
   case 3:
    $2 = ($un_tr_ph76 | 0) == 0;
    if ($2) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $3 = ($len_tr_ph74 | 0) == 0;
    if ($3) {
      $_1 = $str_tr_ph72;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 5:
    $5 = $powtab_tr_lcssa + 16 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = _mpn_sb_get_str($str_tr_ph72, $len_tr_ph74, $up, $un_tr_ph76, $6) | 0;
    $_1 = $7;
    label = 14;
    break;
   case 6:
    $9 = $powtab_tr67 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $powtab_tr67 + 4 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $powtab_tr67 + 8 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14 + $12 | 0;
    $16 = ($15 | 0) > ($un_tr_ph80 | 0);
    if ($16) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $18 = ($15 | 0) == ($un_tr_ph80 | 0);
    if ($18) {
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 8:
    $20 = $up + ($14 << 2) | 0;
    $21 = $un_tr_ph80 - $14 | 0;
    $22 = ___gmpn_cmp($20, $10, $21) | 0;
    $23 = ($22 | 0) < 0;
    if ($23) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $24 = $powtab_tr67 - 20 | 0;
    $powtab_tr67 = $24;
    label = 6;
    break;
   case 10:
    $26 = $up + ($14 << 2) | 0;
    $27 = $un_tr_ph80 - $14 | 0;
    ___gmpn_tdiv_qr($tmp, $26, 0, $26, $27, $10, $12);
    $28 = $27 - $12 | 0;
    $29 = $tmp + ($28 << 2) | 0;
    $30 = HEAP32[$29 >> 2] | 0;
    $31 = ($30 | 0) != 0;
    $32 = $31 & 1;
    $33 = $32 + $28 | 0;
    $34 = ($len_tr_ph79 | 0) == 0;
    if ($34) {
      $_160 = 0;
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $36 = $powtab_tr67 + 12 | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    $38 = $len_tr_ph79 - $37 | 0;
    $_160 = $38;
    label = 12;
    break;
   case 12:
    $39 = $powtab_tr67 - 20 | 0;
    $40 = $tmp + ($33 << 2) | 0;
    $41 = _mpn_dc_get_str($str_tr_ph78, $_160, $tmp, $33, $39, $40) | 0;
    $42 = $powtab_tr67 + 12 | 0;
    $43 = HEAP32[$42 >> 2] | 0;
    $44 = ($15 | 0) > 17;
    if ($44) {
      $str_tr_ph78 = $41;
      $len_tr_ph79 = $43;
      $un_tr_ph80 = $15;
      $powtab_tr_ph81 = $39;
      label = 2;
      break;
    } else {
      $powtab_tr_lcssa = $39;
      $str_tr_ph72 = $41;
      $len_tr_ph74 = $43;
      $un_tr_ph76 = $15;
      label = 3;
      break;
    }
   case 13:
    _memset($str_tr_ph72 | 0, 0, $len_tr_ph74 | 0);
    $scevgep = $str_tr_ph72 + $len_tr_ph74 | 0;
    $_1 = $scevgep;
    label = 14;
    break;
   case 14:
    return $_1 | 0;
  }
  return 0;
}
function ___gmpn_set_str($rp, $str, $str_len, $base) {
  $rp = $rp | 0;
  $str = $str | 0;
  $str_len = $str_len | 0;
  $base = $base | 0;
  var $powtab = 0, $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $_sum = 0, $7 = 0, $8 = 0, $s_038 = 0, $next_bitpos_037 = 0, $res_digit_036 = 0, $size_035 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $size_1 = 0, $res_digit_1 = 0, $next_bitpos_1 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 648 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $powtab = __stackBase__ | 0;
    $__tmp_marker = __stackBase__ + 640 | 0;
    $1 = $base - 1 | 0;
    $2 = $1 & $base;
    $3 = ($2 | 0) == 0;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 9;
      break;
    }
   case 2:
    $5 = 9844 + ($base * 20 & -1) | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $_sum = $str_len - 1 | 0;
    $7 = ($_sum | 0) < 0;
    if ($7) {
      $_0 = 0;
      label = 13;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $8 = $str + $_sum | 0;
    $size_035 = 0;
    $res_digit_036 = 0;
    $next_bitpos_037 = 0;
    $s_038 = $8;
    label = 4;
    break;
   case 4:
    $10 = HEAP8[$s_038] | 0;
    $11 = $10 & 255;
    $12 = $11 << $next_bitpos_037;
    $13 = $12 | $res_digit_036;
    $14 = $next_bitpos_037 + $6 | 0;
    $15 = ($14 | 0) > 31;
    if ($15) {
      label = 5;
      break;
    } else {
      $next_bitpos_1 = $14;
      $res_digit_1 = $13;
      $size_1 = $size_035;
      label = 6;
      break;
    }
   case 5:
    $17 = $size_035 + 1 | 0;
    $18 = $rp + ($size_035 << 2) | 0;
    HEAP32[$18 >> 2] = $13;
    $19 = $14 - 32 | 0;
    $20 = $6 - $19 | 0;
    $21 = $11 >>> ($20 >>> 0);
    $next_bitpos_1 = $19;
    $res_digit_1 = $21;
    $size_1 = $17;
    label = 6;
    break;
   case 6:
    $23 = $s_038 - 1 | 0;
    $24 = $23 >>> 0 < $str >>> 0;
    if ($24) {
      label = 7;
      break;
    } else {
      $size_035 = $size_1;
      $res_digit_036 = $res_digit_1;
      $next_bitpos_037 = $next_bitpos_1;
      $s_038 = $23;
      label = 4;
      break;
    }
   case 7:
    $25 = ($res_digit_1 | 0) == 0;
    if ($25) {
      $_0 = $size_1;
      label = 13;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $27 = $size_1 + 1 | 0;
    $28 = $rp + ($size_1 << 2) | 0;
    HEAP32[$28 >> 2] = $res_digit_1;
    $_0 = $27;
    label = 13;
    break;
   case 9:
    $30 = $str_len >>> 0 > 1999;
    if ($30) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $32 = ___gmpn_bc_set_str($rp, $str, $str_len, $base) | 0;
    $_0 = $32;
    label = 13;
    break;
   case 11:
    HEAP32[$__tmp_marker >> 2] = 0;
    $34 = 9832 + ($base * 20 & -1) | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    $36 = ($str_len >>> 0) / ($35 >>> 0) >>> 0;
    $37 = $36 + 1 | 0;
    $38 = $36 << 2;
    $39 = $38 + 132 | 0;
    $40 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $39) | 0;
    $41 = $40;
    $42 = $powtab | 0;
    ___gmpn_set_str_compute_powtab($42, $41, $37, $base);
    $43 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $39) | 0;
    $44 = $43;
    $45 = ___gmpn_dc_set_str($rp, $str, $str_len, $42, $44) | 0;
    $46 = HEAP32[$__tmp_marker >> 2] | 0;
    $47 = ($46 | 0) == 0;
    if ($47) {
      $_0 = $45;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    ___gmp_tmp_reentrant_free($46);
    $_0 = $45;
    label = 13;
    break;
   case 13:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_bc_set_str($rp, $str, $str_len, $base) {
  $rp = $rp | 0;
  $str = $str | 0;
  $str_len = $str_len | 0;
  $base = $base | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j_181 = 0, $10 = 0, $12 = 0, $13 = 0, $i_097 = 0, $size_096 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $scevgep112 = 0, $j_184 = 0, $res_digit_183 = 0, $_282 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $j_1 = 0, $58 = 0, $scevgep = 0, $_3 = 0, $res_digit_2 = 0, $59 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $size_1 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $_lcssa93 = 0, $_lcssa = 0, $_pn = 0, $size_0_lcssa = 0, $_neg = 0, $78 = 0, $j_265 = 0, $79 = 0, $j_269 = 0, $res_digit_368 = 0, $_467 = 0, $big_base_066 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $j_2 = 0, $86 = 0, $88 = 0, $89 = 0, $j_372 = 0, $90 = 0, $j_376 = 0, $res_digit_475 = 0, $_574 = 0, $big_base_173 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $j_3 = 0, $97 = 0, $big_base_2 = 0, $res_digit_5 = 0, $98 = 0, $100 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $size_2 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = 9844 + ($base * 20 & -1) | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = 9832 + ($base * 20 & -1) | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 >>> 0 < $str_len >>> 0;
    $6 = $str + 1 | 0;
    $7 = HEAP8[$str] | 0;
    $8 = $7 & 255;
    $9 = ($base | 0) == 10;
    if ($5) {
      label = 2;
      break;
    } else {
      $size_0_lcssa = 0;
      $_pn = $4;
      $_lcssa = $6;
      $_lcssa93 = $8;
      label = 14;
      break;
    }
   case 2:
    $j_181 = $4 - 1 | 0;
    $10 = ($j_181 | 0) == 0;
    $size_096 = 0;
    $i_097 = $4;
    $13 = $6;
    $12 = $8;
    label = 3;
    break;
   case 3:
    if ($9) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    if ($10) {
      $res_digit_2 = $12;
      $_3 = $13;
      label = 8;
      break;
    } else {
      $_282 = $13;
      $res_digit_183 = $12;
      $j_184 = $j_181;
      label = 6;
      break;
    }
   case 5:
    $14 = $12 * 10 & -1;
    $15 = $13 + 1 | 0;
    $16 = HEAP8[$13] | 0;
    $17 = $16 & 255;
    $18 = $17 + $14 | 0;
    $19 = $18 * 10 & -1;
    $20 = $13 + 2 | 0;
    $21 = HEAP8[$15] | 0;
    $22 = $21 & 255;
    $23 = $22 + $19 | 0;
    $24 = $23 * 10 & -1;
    $25 = $13 + 3 | 0;
    $26 = HEAP8[$20] | 0;
    $27 = $26 & 255;
    $28 = $27 + $24 | 0;
    $29 = $28 * 10 & -1;
    $30 = $13 + 4 | 0;
    $31 = HEAP8[$25] | 0;
    $32 = $31 & 255;
    $33 = $32 + $29 | 0;
    $34 = $33 * 10 & -1;
    $35 = $13 + 5 | 0;
    $36 = HEAP8[$30] | 0;
    $37 = $36 & 255;
    $38 = $37 + $34 | 0;
    $39 = $38 * 10 & -1;
    $40 = $13 + 6 | 0;
    $41 = HEAP8[$35] | 0;
    $42 = $41 & 255;
    $43 = $42 + $39 | 0;
    $44 = $43 * 10 & -1;
    $45 = $13 + 7 | 0;
    $46 = HEAP8[$40] | 0;
    $47 = $46 & 255;
    $48 = $47 + $44 | 0;
    $49 = $48 * 10 & -1;
    $50 = HEAP8[$45] | 0;
    $51 = $50 & 255;
    $52 = $51 + $49 | 0;
    $scevgep112 = $13 + 8 | 0;
    $res_digit_2 = $52;
    $_3 = $scevgep112;
    label = 8;
    break;
   case 6:
    $53 = Math_imul($res_digit_183, $base);
    $54 = $_282 + 1 | 0;
    $55 = HEAP8[$_282] | 0;
    $56 = $55 & 255;
    $57 = $56 + $53 | 0;
    $j_1 = $j_184 - 1 | 0;
    $58 = ($j_1 | 0) == 0;
    if ($58) {
      label = 7;
      break;
    } else {
      $_282 = $54;
      $res_digit_183 = $57;
      $j_184 = $j_1;
      label = 6;
      break;
    }
   case 7:
    $scevgep = $13 + $j_181 | 0;
    $res_digit_2 = $57;
    $_3 = $scevgep;
    label = 8;
    break;
   case 8:
    $59 = ($size_096 | 0) == 0;
    if ($59) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    $61 = ($res_digit_2 | 0) == 0;
    if ($61) {
      $size_1 = 0;
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    HEAP32[$rp >> 2] = $res_digit_2;
    $size_1 = 1;
    label = 13;
    break;
   case 11:
    $64 = ___gmpn_mul_1($rp, $rp, $size_096, $2) | 0;
    $65 = ___gmpn_add_1($rp, $rp, $size_096, $res_digit_2) | 0;
    $66 = $65 + $64 | 0;
    $67 = ($66 | 0) == 0;
    if ($67) {
      $size_1 = $size_096;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $69 = $size_096 + 1 | 0;
    $70 = $rp + ($size_096 << 2) | 0;
    HEAP32[$70 >> 2] = $66;
    $size_1 = $69;
    label = 13;
    break;
   case 13:
    $72 = $i_097 + $4 | 0;
    $73 = $72 >>> 0 < $str_len >>> 0;
    $74 = $_3 + 1 | 0;
    $75 = HEAP8[$_3] | 0;
    $76 = $75 & 255;
    if ($73) {
      $size_096 = $size_1;
      $i_097 = $72;
      $13 = $74;
      $12 = $76;
      label = 3;
      break;
    } else {
      $size_0_lcssa = $size_1;
      $_pn = $72;
      $_lcssa = $74;
      $_lcssa93 = $76;
      label = 14;
      break;
    }
   case 14:
    if ($9) {
      label = 15;
      break;
    } else {
      label = 17;
      break;
    }
   case 15:
    $_neg = $str_len + 9 | 0;
    $78 = $_neg - $_pn | 0;
    $j_265 = $78 - 1 | 0;
    $79 = ($j_265 | 0) > 0;
    if ($79) {
      $big_base_066 = 10;
      $_467 = $_lcssa;
      $res_digit_368 = $_lcssa93;
      $j_269 = $j_265;
      label = 16;
      break;
    } else {
      $res_digit_5 = $_lcssa93;
      $big_base_2 = 10;
      label = 19;
      break;
    }
   case 16:
    $80 = $res_digit_368 * 10 & -1;
    $81 = $_467 + 1 | 0;
    $82 = HEAP8[$_467] | 0;
    $83 = $82 & 255;
    $84 = $83 + $80 | 0;
    $85 = $big_base_066 * 10 & -1;
    $j_2 = $j_269 - 1 | 0;
    $86 = ($j_2 | 0) > 0;
    if ($86) {
      $big_base_066 = $85;
      $_467 = $81;
      $res_digit_368 = $84;
      $j_269 = $j_2;
      label = 16;
      break;
    } else {
      $res_digit_5 = $84;
      $big_base_2 = $85;
      label = 19;
      break;
    }
   case 17:
    $88 = $4 + $str_len | 0;
    $89 = $88 - $_pn | 0;
    $j_372 = $89 - 1 | 0;
    $90 = ($j_372 | 0) > 0;
    if ($90) {
      $big_base_173 = $base;
      $_574 = $_lcssa;
      $res_digit_475 = $_lcssa93;
      $j_376 = $j_372;
      label = 18;
      break;
    } else {
      $res_digit_5 = $_lcssa93;
      $big_base_2 = $base;
      label = 19;
      break;
    }
   case 18:
    $91 = Math_imul($res_digit_475, $base);
    $92 = $_574 + 1 | 0;
    $93 = HEAP8[$_574] | 0;
    $94 = $93 & 255;
    $95 = $94 + $91 | 0;
    $96 = Math_imul($big_base_173, $base);
    $j_3 = $j_376 - 1 | 0;
    $97 = ($j_3 | 0) > 0;
    if ($97) {
      $big_base_173 = $96;
      $_574 = $92;
      $res_digit_475 = $95;
      $j_376 = $j_3;
      label = 18;
      break;
    } else {
      $res_digit_5 = $95;
      $big_base_2 = $96;
      label = 19;
      break;
    }
   case 19:
    $98 = ($size_0_lcssa | 0) == 0;
    if ($98) {
      label = 20;
      break;
    } else {
      label = 22;
      break;
    }
   case 20:
    $100 = ($res_digit_5 | 0) == 0;
    if ($100) {
      $size_2 = 0;
      label = 24;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    HEAP32[$rp >> 2] = $res_digit_5;
    $size_2 = 1;
    label = 24;
    break;
   case 22:
    $103 = ___gmpn_mul_1($rp, $rp, $size_0_lcssa, $big_base_2) | 0;
    $104 = ___gmpn_add_1($rp, $rp, $size_0_lcssa, $res_digit_5) | 0;
    $105 = $104 + $103 | 0;
    $106 = ($105 | 0) == 0;
    if ($106) {
      $size_2 = $size_0_lcssa;
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $108 = $size_0_lcssa + 1 | 0;
    $109 = $rp + ($size_0_lcssa << 2) | 0;
    HEAP32[$109 >> 2] = $105;
    $size_2 = $108;
    label = 24;
    break;
   case 24:
    return $size_2 | 0;
  }
  return 0;
}
function ___gmpn_set_str_compute_powtab($powtab, $powtab_mem, $un, $base) {
  $powtab = $powtab | 0;
  $powtab_mem = $powtab_mem | 0;
  $un = $un | 0;
  $base = $base | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $powtab_mem_ptr_078 = 0, $pi_077 = 0, $shift_076 = 0, $digits_in_base_075 = 0, $n_074 = 0, $p_073 = 0, $36 = 0, $37 = 0, $38 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $n_1 = 0, $digits_in_base_1 = 0, $60 = 0, $61 = 0, $62 = 0, $shift_170 = 0, $n_269 = 0, $t_068 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $shift_1_lcssa = 0, $n_2_lcssa = 0, $t_0_lcssa = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = 9832 + ($base * 20 & -1) | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = 9844 + ($base * 20 & -1) | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $powtab_mem + 4 | 0;
    HEAP32[$powtab_mem >> 2] = $4;
    $6 = $un - 1 | 0;
    $7 = $6 >>> 0 < 65536;
    if ($7) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $9 = $6 >>> 0 < 256;
    $10 = $9 ? 1 : 9;
    $15 = $10;
    label = 4;
    break;
   case 3:
    $12 = $6 >>> 0 < 16777216;
    $13 = $12 ? 17 : 25;
    $15 = $13;
    label = 4;
    break;
   case 4:
    $16 = $6 >>> ($15 >>> 0);
    $17 = $16 + 9696 | 0;
    $18 = HEAP8[$17] | 0;
    $19 = $18 & 255;
    $20 = $15 - 33 | 0;
    $21 = $20 + $19 | 0;
    $22 = $21 + 31 | 0;
    $23 = $powtab + ($22 * 20 & -1) | 0;
    HEAP32[$23 >> 2] = $powtab_mem;
    $24 = $powtab + ($22 * 20 & -1) + 4 | 0;
    HEAP32[$24 >> 2] = 1;
    $25 = $powtab + ($22 * 20 & -1) + 12 | 0;
    HEAP32[$25 >> 2] = $2;
    $26 = $powtab + ($22 * 20 & -1) + 16 | 0;
    HEAP32[$26 >> 2] = $base;
    $27 = $powtab + ($22 * 20 & -1) + 8 | 0;
    HEAP32[$27 >> 2] = 0;
    $28 = $21 + 30 | 0;
    $29 = ($28 | 0) > -1;
    if ($29) {
      label = 5;
      break;
    } else {
      label = 14;
      break;
    }
   case 5:
    $30 = $un + 32 | 0;
    $31 = $powtab_mem + ($30 << 2) | 0;
    $32 = -$4 | 0;
    $33 = $4 & $32;
    $34 = $33 - 1 | 0;
    $p_073 = $powtab_mem;
    $n_074 = 1;
    $digits_in_base_075 = $2;
    $shift_076 = 0;
    $pi_077 = $28;
    $powtab_mem_ptr_078 = $5;
    label = 6;
    break;
   case 6:
    $36 = $n_074 << 1;
    $37 = $powtab_mem_ptr_078 + ($36 << 2) | 0;
    $38 = $37 >>> 0 < $31 >>> 0;
    if ($38) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    ___gmp_assert_fail(7368, 167, 8584);
   case 8:
    ___gmpn_sqr($powtab_mem_ptr_078, $p_073, $n_074);
    $41 = $36 - 1 | 0;
    $42 = $powtab_mem_ptr_078 + ($41 << 2) | 0;
    $43 = HEAP32[$42 >> 2] | 0;
    $44 = ($43 | 0) != 0;
    $45 = $44 & 1;
    $46 = $45 + $41 | 0;
    $47 = $digits_in_base_075 << 1;
    $48 = $6 >> $pi_077;
    $49 = $48 & 2;
    $50 = ($49 | 0) == 0;
    if ($50) {
      label = 9;
      break;
    } else {
      $digits_in_base_1 = $47;
      $n_1 = $46;
      label = 10;
      break;
    }
   case 9:
    ___gmpn_divexact_1($powtab_mem_ptr_078, $powtab_mem_ptr_078, $46, $4);
    $52 = $46 - 1 | 0;
    $53 = $powtab_mem_ptr_078 + ($52 << 2) | 0;
    $54 = HEAP32[$53 >> 2] | 0;
    $55 = ($54 | 0) == 0;
    $56 = $55 & 1;
    $57 = $46 - $56 | 0;
    $58 = $47 - $2 | 0;
    $digits_in_base_1 = $58;
    $n_1 = $57;
    label = 10;
    break;
   case 10:
    $60 = $shift_076 << 1;
    $61 = HEAP32[$powtab_mem_ptr_078 >> 2] | 0;
    $62 = ($61 | 0) == 0;
    if ($62) {
      $t_068 = $powtab_mem_ptr_078;
      $n_269 = $n_1;
      $shift_170 = $60;
      label = 11;
      break;
    } else {
      $t_0_lcssa = $powtab_mem_ptr_078;
      $n_2_lcssa = $n_1;
      $shift_1_lcssa = $60;
      label = 13;
      break;
    }
   case 11:
    $63 = $t_068 + 4 | 0;
    $64 = HEAP32[$63 >> 2] | 0;
    $65 = $64 & $34;
    $66 = ($65 | 0) == 0;
    if ($66) {
      label = 12;
      break;
    } else {
      $t_0_lcssa = $t_068;
      $n_2_lcssa = $n_269;
      $shift_1_lcssa = $shift_170;
      label = 13;
      break;
    }
   case 12:
    $68 = $n_269 - 1 | 0;
    $69 = $shift_170 + 1 | 0;
    $70 = HEAP32[$63 >> 2] | 0;
    $71 = ($70 | 0) == 0;
    if ($71) {
      $t_068 = $63;
      $n_269 = $68;
      $shift_170 = $69;
      label = 11;
      break;
    } else {
      $t_0_lcssa = $63;
      $n_2_lcssa = $68;
      $shift_1_lcssa = $69;
      label = 13;
      break;
    }
   case 13:
    $72 = $powtab + ($pi_077 * 20 & -1) | 0;
    HEAP32[$72 >> 2] = $t_0_lcssa;
    $73 = $powtab + ($pi_077 * 20 & -1) + 4 | 0;
    HEAP32[$73 >> 2] = $n_2_lcssa;
    $74 = $powtab + ($pi_077 * 20 & -1) + 12 | 0;
    HEAP32[$74 >> 2] = $digits_in_base_1;
    $75 = $powtab + ($pi_077 * 20 & -1) + 16 | 0;
    HEAP32[$75 >> 2] = $base;
    $76 = $powtab + ($pi_077 * 20 & -1) + 8 | 0;
    HEAP32[$76 >> 2] = $shift_1_lcssa;
    $77 = $pi_077 - 1 | 0;
    $78 = ($pi_077 | 0) > 0;
    if ($78) {
      $p_073 = $t_0_lcssa;
      $n_074 = $n_2_lcssa;
      $digits_in_base_075 = $digits_in_base_1;
      $shift_076 = $shift_1_lcssa;
      $pi_077 = $77;
      $powtab_mem_ptr_078 = $37;
      label = 6;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    return;
  }
}
function ___gmpn_gcdext_1($up, $vp, $a, $b) {
  $up = $up | 0;
  $vp = $vp | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $_032 = 0, $_0 = 0, $u0_0 = 0, $v0_0 = 0, $u1_0 = 0, $v1_0 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $_133 = 0, $_1 = 0, $u0_1 = 0, $v0_1 = 0, $u1_1 = 0, $v1_1 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $storemerge35 = 0, $storemerge = 0, $_034 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a >>> 0 < $b >>> 0;
    if ($1) {
      $v1_1 = 1;
      $u1_1 = 0;
      $v0_1 = 0;
      $u0_1 = 1;
      $_1 = $b;
      $_133 = $a;
      label = 4;
      break;
    } else {
      $v1_0 = 1;
      $u1_0 = 0;
      $v0_0 = 0;
      $u0_0 = 1;
      $_0 = $b;
      $_032 = $a;
      label = 2;
      break;
    }
   case 2:
    $3 = ($_032 >>> 0) / ($_0 >>> 0) >>> 0;
    $4 = Math_imul($3, $_0);
    $5 = ($_032 | 0) == ($4 | 0);
    if ($5) {
      $_034 = $_0;
      $storemerge = $v1_0;
      $storemerge35 = $u1_0;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $7 = $_032 - $4 | 0;
    $8 = Math_imul($3, $u1_0);
    $9 = $u0_0 - $8 | 0;
    $10 = Math_imul($3, $v1_0);
    $11 = $v0_0 - $10 | 0;
    $v1_1 = $v1_0;
    $u1_1 = $u1_0;
    $v0_1 = $11;
    $u0_1 = $9;
    $_1 = $_0;
    $_133 = $7;
    label = 4;
    break;
   case 4:
    $13 = ($_1 >>> 0) / ($_133 >>> 0) >>> 0;
    $14 = Math_imul($13, $_133);
    $15 = ($_1 | 0) == ($14 | 0);
    if ($15) {
      $_034 = $_133;
      $storemerge = $v0_1;
      $storemerge35 = $u0_1;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $17 = $_1 - $14 | 0;
    $18 = Math_imul($13, $u0_1);
    $19 = $u1_1 - $18 | 0;
    $20 = Math_imul($13, $v0_1);
    $21 = $v1_1 - $20 | 0;
    $v1_0 = $21;
    $u1_0 = $19;
    $v0_0 = $v0_1;
    $u0_0 = $u0_1;
    $_0 = $17;
    $_032 = $_133;
    label = 2;
    break;
   case 6:
    HEAP32[$up >> 2] = $storemerge35;
    HEAP32[$vp >> 2] = $storemerge;
    return $_034 | 0;
  }
  return 0;
}
function ___gmpn_popcount($up, $n) {
  $up = $up | 0;
  $n = $n | 0;
  var $1 = 0, $2 = 0, $3 = 0, $i_054 = 0, $_053 = 0, $result_052 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $scevgep = 0, $_0_lcssa = 0, $result_0_lcssa = 0, $61 = 0, $62 = 0, $x_0 = 0, $_051 = 0, $_1 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $result_1 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n >> 2;
    $2 = ($1 | 0) == 0;
    if ($2) {
      $result_0_lcssa = 0;
      $_0_lcssa = $up;
      label = 5;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = $1 << 2;
    $result_052 = 0;
    $_053 = $up;
    $i_054 = $1;
    label = 3;
    break;
   case 3:
    $5 = HEAP32[$_053 >> 2] | 0;
    $6 = $5 >>> 1;
    $7 = $6 & 1431655765;
    $8 = $5 - $7 | 0;
    $9 = $8 >>> 2;
    $10 = $9 & 858993459;
    $11 = $8 & 858993459;
    $12 = $_053 + 4 | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13 >>> 1;
    $15 = $14 & 1431655765;
    $16 = $13 - $15 | 0;
    $17 = $16 >>> 2;
    $18 = $17 & 858993459;
    $19 = $16 & 858993459;
    $20 = $10 + $11 | 0;
    $21 = $20 + $19 | 0;
    $22 = $21 + $18 | 0;
    $23 = $22 >>> 4;
    $24 = $23 & 252645135;
    $25 = $22 & 252645135;
    $26 = $_053 + 8 | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = $27 >>> 1;
    $29 = $28 & 1431655765;
    $30 = $27 - $29 | 0;
    $31 = $30 >>> 2;
    $32 = $31 & 858993459;
    $33 = $30 & 858993459;
    $34 = $_053 + 12 | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    $36 = $35 >>> 1;
    $37 = $36 & 1431655765;
    $38 = $35 - $37 | 0;
    $39 = $38 >>> 2;
    $40 = $39 & 858993459;
    $41 = $38 & 858993459;
    $42 = $32 + $33 | 0;
    $43 = $42 + $41 | 0;
    $44 = $43 + $40 | 0;
    $45 = $44 >>> 4;
    $46 = $45 & 252645135;
    $47 = $44 & 252645135;
    $48 = $24 + $25 | 0;
    $49 = $48 + $47 | 0;
    $50 = $49 + $46 | 0;
    $51 = $50 >>> 8;
    $52 = $51 + $50 | 0;
    $53 = $52 >>> 16;
    $54 = $53 + $52 | 0;
    $55 = $54 & 255;
    $56 = $55 + $result_052 | 0;
    $57 = $_053 + 16 | 0;
    $58 = $i_054 - 1 | 0;
    $59 = ($58 | 0) == 0;
    if ($59) {
      label = 4;
      break;
    } else {
      $result_052 = $56;
      $_053 = $57;
      $i_054 = $58;
      label = 3;
      break;
    }
   case 4:
    $scevgep = $up + ($3 << 2) | 0;
    $result_0_lcssa = $56;
    $_0_lcssa = $scevgep;
    label = 5;
    break;
   case 5:
    $61 = $n & 3;
    $62 = ($61 | 0) == 0;
    if ($62) {
      $result_1 = $result_0_lcssa;
      label = 8;
      break;
    } else {
      $_1 = $_0_lcssa;
      $_051 = $61;
      $x_0 = 0;
      label = 6;
      break;
    }
   case 6:
    $63 = HEAP32[$_1 >> 2] | 0;
    $64 = $63 >>> 1;
    $65 = $64 & 1431655765;
    $66 = $63 - $65 | 0;
    $67 = $66 >>> 2;
    $68 = $67 & 858993459;
    $69 = $66 & 858993459;
    $70 = $68 + $69 | 0;
    $71 = $70 >>> 4;
    $72 = $71 + $70 | 0;
    $73 = $72 & 252645135;
    $74 = $73 + $x_0 | 0;
    $75 = $_1 + 4 | 0;
    $76 = $_051 - 1 | 0;
    $77 = ($76 | 0) == 0;
    if ($77) {
      label = 7;
      break;
    } else {
      $_1 = $75;
      $_051 = $76;
      $x_0 = $74;
      label = 6;
      break;
    }
   case 7:
    $79 = $74 >>> 8;
    $80 = $79 + $74 | 0;
    $81 = $80 >>> 16;
    $82 = $81 + $80 | 0;
    $83 = $82 & 255;
    $84 = $83 + $result_0_lcssa | 0;
    $result_1 = $84;
    label = 8;
    break;
   case 8:
    return $result_1 | 0;
  }
  return 0;
}
function ___gmpn_cmp($__gmp_xp, $__gmp_yp, $__gmp_size) {
  $__gmp_xp = $__gmp_xp | 0;
  $__gmp_yp = $__gmp_yp | 0;
  $__gmp_size = $__gmp_size | 0;
  var $__gmp_i_0 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $__gmp_result_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__gmp_i_0 = $__gmp_size;
    label = 2;
    break;
   case 2:
    $2 = $__gmp_i_0 - 1 | 0;
    $3 = ($__gmp_i_0 | 0) > 0;
    if ($3) {
      label = 3;
      break;
    } else {
      $__gmp_result_0 = 0;
      label = 5;
      break;
    }
   case 3:
    $5 = $__gmp_xp + ($2 << 2) | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $__gmp_yp + ($2 << 2) | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($6 | 0) == ($8 | 0);
    if ($9) {
      $__gmp_i_0 = $2;
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $11 = $6 >>> 0 > $8 >>> 0;
    $12 = $11 ? 1 : -1;
    $__gmp_result_0 = $12;
    label = 5;
    break;
   case 5:
    return $__gmp_result_0 | 0;
  }
  return 0;
}
function ___gmpn_dc_set_str($rp, $str, $str_len, $powtab, $tp) {
  $rp = $rp | 0;
  $str = $str | 0;
  $str_len = $str_len | 0;
  $powtab = $powtab | 0;
  $tp = $tp | 0;
  var $rp68 = 0, $1 = 0, $powtab_tr = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $hn_0 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $_sum60 = 0, $_sum61 = 0, $56 = 0, $57 = 0, $ln_0 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $uadd$0 = 0, $uadd$1 = 0, $64 = 0, $65 = 0, $__p_0 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $rp68 = $rp;
    $1 = $str_len >>> 0 > 749;
    $powtab_tr = $powtab;
    label = 2;
    break;
   case 2:
    $2 = $powtab_tr + 12 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $3 >>> 0 < $str_len >>> 0;
    if ($4) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $6 = $powtab_tr + 20 | 0;
    if ($1) {
      $powtab_tr = $6;
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $8 = $powtab_tr + 16 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ___gmpn_bc_set_str($rp, $str, $str_len, $9) | 0;
    $_0 = $10;
    label = 23;
    break;
   case 5:
    $12 = $str_len - $3 | 0;
    $13 = $12 >>> 0 > 749;
    if ($13) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $15 = $powtab_tr + 16 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = ___gmpn_bc_set_str($tp, $str, $12, $16) | 0;
    $hn_0 = $17;
    label = 8;
    break;
   case 7:
    $19 = $powtab_tr + 20 | 0;
    $20 = ___gmpn_dc_set_str($tp, $str, $12, $19, $rp) | 0;
    $hn_0 = $20;
    label = 8;
    break;
   case 8:
    $22 = $powtab_tr + 8 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = ($hn_0 | 0) == 0;
    $25 = $powtab_tr + 4 | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    if ($24) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $28 = $23 + 1 | 0;
    $29 = -$26 | 0;
    $30 = ($28 | 0) == ($29 | 0);
    if ($30) {
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 10:
    $32 = ($26 | 0) > ($hn_0 | 0);
    $33 = $rp + ($23 << 2) | 0;
    $34 = $powtab_tr | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    if ($32) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $37 = ___gmpn_mul($33, $35, $26, $tp, $hn_0) | 0;
    label = 13;
    break;
   case 12:
    $39 = ___gmpn_mul($33, $tp, $hn_0, $35, $26) | 0;
    label = 13;
    break;
   case 13:
    $41 = ($23 | 0) == 0;
    if ($41) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $42 = $23 + $26 | 0;
    $43 = $42 << 2;
    $44 = $43 + 4 | 0;
    _memset($rp68 | 0, 0, $44 | 0);
    label = 16;
    break;
   case 15:
    $45 = $23 << 2;
    _memset($rp68 | 0, 0, $45 | 0);
    label = 16;
    break;
   case 16:
    $47 = $str + $12 | 0;
    $48 = $3 >>> 0 > 749;
    if ($48) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $50 = $powtab_tr + 16 | 0;
    $51 = HEAP32[$50 >> 2] | 0;
    $52 = ___gmpn_bc_set_str($tp, $47, $3, $51) | 0;
    $ln_0 = $52;
    label = 19;
    break;
   case 18:
    $54 = $powtab_tr + 20 | 0;
    $55 = HEAP32[$25 >> 2] | 0;
    $_sum60 = $23 + 1 | 0;
    $_sum61 = $_sum60 + $55 | 0;
    $56 = $tp + ($_sum61 << 2) | 0;
    $57 = ___gmpn_dc_set_str($tp, $47, $3, $54, $56) | 0;
    $ln_0 = $57;
    label = 19;
    break;
   case 19:
    $59 = ($ln_0 | 0) == 0;
    if ($59) {
      label = 22;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $61 = ___gmpn_add_n($rp, $rp, $tp, $ln_0) | 0;
    $62 = $rp + ($ln_0 << 2) | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($63 | 0, $61 | 0) | 0;
    $uadd$1 = tempRet0;
    $64 = $uadd$0;
    HEAP32[$62 >> 2] = $64;
    $65 = $uadd$1;
    if ($65) {
      $__p_0 = $62;
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    $66 = $__p_0 + 4 | 0;
    $67 = HEAP32[$66 >> 2] | 0;
    $68 = $67 + 1 | 0;
    HEAP32[$66 >> 2] = $68;
    $69 = ($68 | 0) == 0;
    if ($69) {
      $__p_0 = $66;
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $70 = HEAP32[$25 >> 2] | 0;
    $71 = $23 + $hn_0 | 0;
    $72 = $71 + $70 | 0;
    $73 = $72 - 1 | 0;
    $74 = $rp + ($73 << 2) | 0;
    $75 = HEAP32[$74 >> 2] | 0;
    $76 = ($75 | 0) == 0;
    $77 = $76 & 1;
    $78 = $72 - $77 | 0;
    $_0 = $78;
    label = 23;
    break;
   case 23:
    return $_0 | 0;
  }
  return 0;
}
function _mpn_zero_p225($ap, $n) {
  $ap = $ap | 0;
  $n = $n | 0;
  var $i_0_in = 0, $i_0 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $i_0_in = $n;
    label = 2;
    break;
   case 2:
    $i_0 = $i_0_in - 1 | 0;
    $2 = ($i_0_in | 0) > 0;
    if ($2) {
      label = 3;
      break;
    } else {
      $_0 = 1;
      label = 4;
      break;
    }
   case 3:
    $4 = $ap + ($i_0 << 2) | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($5 | 0) == 0;
    if ($6) {
      $i_0_in = $i_0;
      label = 2;
      break;
    } else {
      $_0 = 0;
      label = 4;
      break;
    }
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_gcdext($gp, $up, $usizep, $ap, $an, $bp, $n) {
  $gp = $gp | 0;
  $up = $up | 0;
  $usizep = $usizep | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $bp = $bp | 0;
  $n = $n | 0;
  var $ctx = 0, $__tmp_marker = 0, $M = 0, $M11 = 0, $lehmer_un = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_ = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $__ = 0, $27 = 0, $talloc_2 = 0, $28 = 0, $29 = 0, $matrix_scratch_0 = 0, $talloc_3 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $__x_0 = 0, $bp_pn325 = 0, $__dst_0 = 0, $__n_0 = 0, $__src_0 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $scevgep419 = 0, $__x_1 = 0, $__dst_1 = 0, $58 = 0, $59 = 0, $63 = 0, $64 = 0, $65 = 0, $_mask = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $_sum = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $_sum308 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $scevgep415 = 0, $__n3_0 = 0, $__dst4_0 = 0, $_pn324 = 0, $__x6_0 = 0, $__src5_0 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $scevgep415416 = 0, $__dst4_1 = 0, $__x6_1 = 0, $_pr = 0, $104 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $scevgep411 = 0, $__n7_0 = 0, $__dst8_0 = 0, $_pn = 0, $__x10_0 = 0, $__src9_0 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $scevgep411412 = 0, $__dst8_1 = 0, $__x10_1 = 0, $120 = 0, $un_0 = 0, $122 = 0, $123 = 0, $124 = 0, $_sum323 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $131 = 0, $_sum309 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $140 = 0, $143 = 0, $144 = 0, $146 = 0, $un_1_ph = 0, $_0307_ph = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $_0307363 = 0, $un_1362 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $167 = 0, $168 = 0, $169 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $scevgep406_sum = 0, $scevgep407 = 0, $__n14_0 = 0, $__dst15_0 = 0, $__src16_0 = 0, $__x17_0 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $scevgep407408 = 0, $__dst15_1 = 0, $__x17_1 = 0, $_sum322 = 0, $183 = 0, $184 = 0, $_sum321 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $191 = 0, $194 = 0, $195 = 0, $197 = 0, $un_1_be = 0, $_0307_be = 0, $198 = 0, $_0307_lcssa = 0, $un_1_lcssa = 0, $199 = 0, $200 = 0, $202 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $__n18_0 = 0, $__dst19_0 = 0, $ap_pn320 = 0, $__x21_0 = 0, $__src20_0 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $scevgep390 = 0, $__dst19_1 = 0, $__x21_1 = 0, $__gmp_i_0 = 0, $214 = 0, $215 = 0, $217 = 0, $218 = 0, $_sum319 = 0, $219 = 0, $220 = 0, $221 = 0, $not_ = 0, $223 = 0, $scevgep383 = 0, $224 = 0, $scevgep = 0, $indvars_iv384 = 0, $un_2 = 0, $226 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $scevgep385 = 0, $233 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $__n22_0 = 0, $__dst23_0 = 0, $__src24_0 = 0, $__x25_0 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $__dst23_1 = 0, $__x25_1 = 0, $247 = 0, $indvars_iv = 0, $un_3 = 0, $248 = 0, $_sum317 = 0, $249 = 0, $250 = 0, $251 = 0, $scevgep380 = 0, $253 = 0, $255 = 0, $256 = 0, $_sum318 = 0, $257 = 0, $__n26_0 = 0, $__dst27_0 = 0, $__src28_0 = 0, $__x29_0 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $__dst27_1 = 0, $__x29_1 = 0, $storemerge = 0, $265 = 0, $266 = 0, $269 = 0, $270 = 0, $271 = 0, $or_cond = 0, $273 = 0, $274 = 0, $275 = 0, $_sum310 = 0, $278 = 0, $279 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $scevgep402 = 0, $_sum316329 = 0, $288 = 0, $289 = 0, $__n32_0 = 0, $__dst33_0 = 0, $ap_pn = 0, $__x35_0 = 0, $__src34_0 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $scevgep402403 = 0, $_sum316 = 0, $297 = 0, $298 = 0, $299 = 0, $300 = 0, $301 = 0, $302 = 0, $scevgep398 = 0, $__n36_0 = 0, $__dst37_0 = 0, $bp_pn = 0, $__x39_0 = 0, $__src38_0 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $scevgep398399 = 0, $__dst37_1 = 0, $__x39_1 = 0, $_sum311 = 0, $309 = 0, $310 = 0, $_sum312 = 0, $311 = 0, $312 = 0, $313 = 0, $scevgep393 = 0, $indvars_iv394 = 0, $u0n_0 = 0, $315 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $scevgep395 = 0, $322 = 0, $323 = 0, $325 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $__n40_0 = 0, $__dst41_0 = 0, $__src42_0 = 0, $__x43_0 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $__dst41_1 = 0, $__x43_1 = 0, $339 = 0, $340 = 0, $341 = 0, $_sum313 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $349 = 0, $negate_0 = 0, $u1n_0 = 0, $352 = 0, $_sum315 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $359 = 0, $360 = 0, $362 = 0, $364 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $376 = 0, $378 = 0, $380 = 0, $382 = 0, $_sum314 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $390 = 0, $392 = 0, $un_4 = 0, $cy_0 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $un_5 = 0, $399 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $ctx = __stackBase__ | 0;
    $__tmp_marker = __stackBase__ + 32 | 0;
    $M = __stackBase__ + 40 | 0;
    $M11 = __stackBase__ + 64 | 0;
    $lehmer_un = __stackBase__ + 88 | 0;
    $1 = $n + 1 | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    $2 = $n << 2;
    $3 = $2 | 3;
    $4 = $an - $n | 0;
    $5 = $4 + 1 | 0;
    $6 = ($5 | 0) > ($3 | 0);
    $_ = $6 ? $5 : $3;
    $7 = ($n | 0) > 599;
    if ($7) {
      label = 2;
      break;
    } else {
      $talloc_3 = $_;
      $matrix_scratch_0 = 0;
      label = 3;
      break;
    }
   case 2:
    $9 = ($n | 0) / 2 & -1;
    $10 = ($n | 0) / 3 & -1;
    $11 = ($9 | 0) < ($10 | 0);
    $12 = $11 ? $9 : $10;
    $13 = ($9 | 0) > ($10 | 0);
    $14 = $13 ? $9 : $10;
    $15 = $n - $12 | 0;
    $16 = $15 + 1 | 0;
    $17 = ($16 | 0) / 2 & -1;
    $18 = $17 << 2;
    $19 = $18 + 4 | 0;
    $20 = ___gmpn_hgcd_itch($15) | 0;
    $21 = $n - 1 | 0;
    $22 = $21 + $14 | 0;
    $23 = ($20 | 0) > ($22 | 0);
    $24 = $23 ? $20 : $22;
    $25 = $24 + $19 | 0;
    $26 = ($25 | 0) > ($_ | 0);
    $__ = $26 ? $25 : $_;
    $27 = ($__ | 0) < 4203;
    $talloc_2 = $27 ? 4203 : $__;
    $28 = $1 << 1;
    $29 = $talloc_2 + $28 | 0;
    $talloc_3 = $29;
    $matrix_scratch_0 = $19;
    label = 3;
    break;
   case 3:
    $31 = $talloc_3 << 2;
    $32 = $31 >>> 0 < 65536;
    if ($32) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $34 = STACKTOP;
    STACKTOP = STACKTOP + $31 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $38 = $34;
    label = 6;
    break;
   case 5:
    $36 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $31) | 0;
    $38 = $36;
    label = 6;
    break;
   case 6:
    $39 = $38;
    $40 = ($an | 0) > ($n | 0);
    if ($40) {
      label = 7;
      break;
    } else {
      label = 16;
      break;
    }
   case 7:
    ___gmpn_tdiv_qr($39, $ap, 0, $ap, $an, $bp, $n);
    $42 = _mpn_zero_p225($ap, $n) | 0;
    $43 = ($42 | 0) == 0;
    if ($43) {
      label = 16;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $45 = ($n | 0) == 0;
    if ($45) {
      label = 14;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $47 = $n - 1 | 0;
    $48 = HEAP32[$bp >> 2] | 0;
    $49 = ($47 | 0) == 0;
    if ($49) {
      $__dst_1 = $gp;
      $__x_1 = $48;
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $50 = $n - 1 | 0;
    $__n_0 = $47;
    $__dst_0 = $gp;
    $bp_pn325 = $bp;
    $__x_0 = $48;
    label = 11;
    break;
   case 11:
    $__src_0 = $bp_pn325 + 4 | 0;
    $52 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $53 = HEAP32[$__src_0 >> 2] | 0;
    $54 = $__n_0 - 1 | 0;
    $55 = ($54 | 0) == 0;
    if ($55) {
      label = 12;
      break;
    } else {
      $__n_0 = $54;
      $__dst_0 = $52;
      $bp_pn325 = $__src_0;
      $__x_0 = $53;
      label = 11;
      break;
    }
   case 12:
    $scevgep419 = $gp + ($50 << 2) | 0;
    $__dst_1 = $scevgep419;
    $__x_1 = $53;
    label = 13;
    break;
   case 13:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 14;
    break;
   case 14:
    HEAP32[$usizep >> 2] = 0;
    $58 = HEAP32[$__tmp_marker >> 2] | 0;
    $59 = ($58 | 0) == 0;
    if ($59) {
      $_0 = $n;
      label = 127;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    ___gmp_tmp_reentrant_free($58);
    $_0 = $n;
    label = 127;
    break;
   case 16:
    if ($7) {
      label = 19;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $63 = ___gmpn_gcdext_lehmer_n($gp, $up, $usizep, $ap, $bp, $n, $39) | 0;
    $64 = HEAP32[$__tmp_marker >> 2] | 0;
    $65 = ($64 | 0) == 0;
    if ($65) {
      $_0 = $63;
      label = 127;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    ___gmp_tmp_reentrant_free($64);
    $_0 = $63;
    label = 127;
    break;
   case 19:
    $_mask = $1 & 2147483647;
    $68 = ($_mask | 0) == 0;
    if ($68) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $69 = $n << 3;
    $70 = $69 + 8 | 0;
    _memset($38 | 0, 0, $70 | 0);
    label = 21;
    break;
   case 21:
    $72 = $39 + ($1 << 2) | 0;
    $_sum = $1 << 1;
    $73 = $39 + ($_sum << 2) | 0;
    $74 = $ctx | 0;
    HEAP32[$74 >> 2] = $gp;
    $75 = $ctx + 8 | 0;
    HEAP32[$75 >> 2] = $up;
    $76 = $ctx + 12 | 0;
    HEAP32[$76 >> 2] = $usizep;
    $77 = ($n | 0) / 2 & -1;
    $78 = $n - $77 | 0;
    ___gmpn_hgcd_matrix_init($M, $78, $73);
    $79 = $ap + ($77 << 2) | 0;
    $80 = $bp + ($77 << 2) | 0;
    $_sum308 = $matrix_scratch_0 + $_sum | 0;
    $81 = $39 + ($_sum308 << 2) | 0;
    $82 = ___gmpn_hgcd($79, $80, $78, $M, $81) | 0;
    $83 = ($82 | 0) > 0;
    if ($83) {
      label = 22;
      break;
    } else {
      label = 35;
      break;
    }
   case 22:
    $85 = $82 + $77 | 0;
    $86 = ___gmpn_hgcd_matrix_adjust($M, $85, $ap, $bp, $77, $81) | 0;
    $87 = $M + 4 | 0;
    $88 = HEAP32[$87 >> 2] | 0;
    $89 = ($88 | 0) == 0;
    if ($89) {
      label = 33;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $91 = $88 - 1 | 0;
    $92 = $M + 16 | 0;
    $93 = HEAP32[$92 >> 2] | 0;
    $94 = HEAP32[$93 >> 2] | 0;
    $95 = ($91 | 0) == 0;
    if ($95) {
      $__x6_1 = $94;
      $__dst4_1 = $39;
      label = 27;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $96 = $88 << 2;
    $97 = $96 - 4 | 0;
    $scevgep415 = $38 + $97 | 0;
    $__x6_0 = $94;
    $_pn324 = $93;
    $__dst4_0 = $39;
    $__n3_0 = $91;
    label = 25;
    break;
   case 25:
    $__src5_0 = $_pn324 + 4 | 0;
    $99 = $__dst4_0 + 4 | 0;
    HEAP32[$__dst4_0 >> 2] = $__x6_0;
    $100 = HEAP32[$__src5_0 >> 2] | 0;
    $101 = $__n3_0 - 1 | 0;
    $102 = ($101 | 0) == 0;
    if ($102) {
      label = 26;
      break;
    } else {
      $__x6_0 = $100;
      $_pn324 = $__src5_0;
      $__dst4_0 = $99;
      $__n3_0 = $101;
      label = 25;
      break;
    }
   case 26:
    $scevgep415416 = $scevgep415;
    $__x6_1 = $100;
    $__dst4_1 = $scevgep415416;
    label = 27;
    break;
   case 27:
    HEAP32[$__dst4_1 >> 2] = $__x6_1;
    $_pr = HEAP32[$87 >> 2] | 0;
    $104 = ($_pr | 0) == 0;
    if ($104) {
      label = 33;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $106 = $_pr - 1 | 0;
    $107 = $M + 20 | 0;
    $108 = HEAP32[$107 >> 2] | 0;
    $109 = HEAP32[$108 >> 2] | 0;
    $110 = ($106 | 0) == 0;
    if ($110) {
      $__x10_1 = $109;
      $__dst8_1 = $72;
      label = 32;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $111 = $_pr << 2;
    $112 = $n << 2;
    $113 = $111 + $112 | 0;
    $scevgep411 = $38 + $113 | 0;
    $__x10_0 = $109;
    $_pn = $108;
    $__dst8_0 = $72;
    $__n7_0 = $106;
    label = 30;
    break;
   case 30:
    $__src9_0 = $_pn + 4 | 0;
    $115 = $__dst8_0 + 4 | 0;
    HEAP32[$__dst8_0 >> 2] = $__x10_0;
    $116 = HEAP32[$__src9_0 >> 2] | 0;
    $117 = $__n7_0 - 1 | 0;
    $118 = ($117 | 0) == 0;
    if ($118) {
      label = 31;
      break;
    } else {
      $__x10_0 = $116;
      $_pn = $__src9_0;
      $__dst8_0 = $115;
      $__n7_0 = $117;
      label = 30;
      break;
    }
   case 31:
    $scevgep411412 = $scevgep411;
    $__x10_1 = $116;
    $__dst8_1 = $scevgep411412;
    label = 32;
    break;
   case 32:
    HEAP32[$__dst8_1 >> 2] = $__x10_1;
    label = 33;
    break;
   case 33:
    $120 = HEAP32[$87 >> 2] | 0;
    $un_0 = $120;
    label = 34;
    break;
   case 34:
    $122 = $un_0 - 1 | 0;
    $123 = $39 + ($122 << 2) | 0;
    $124 = HEAP32[$123 >> 2] | 0;
    $_sum323 = $un_0 + $n | 0;
    $125 = $39 + ($_sum323 << 2) | 0;
    $126 = HEAP32[$125 >> 2] | 0;
    $127 = $126 | $124;
    $128 = ($127 | 0) == 0;
    if ($128) {
      $un_0 = $122;
      label = 34;
      break;
    } else {
      $_0307_ph = $86;
      $un_1_ph = $un_0;
      label = 40;
      break;
    }
   case 35:
    HEAP32[$72 >> 2] = 1;
    $130 = $ctx + 20 | 0;
    HEAP32[$130 >> 2] = $39;
    $131 = $ctx + 24 | 0;
    HEAP32[$131 >> 2] = $72;
    $_sum309 = $_sum + $n | 0;
    $132 = $39 + ($_sum309 << 2) | 0;
    $133 = $ctx + 28 | 0;
    HEAP32[$133 >> 2] = $132;
    $134 = $ctx + 16 | 0;
    HEAP32[$134 >> 2] = 1;
    $135 = $ctx;
    $136 = ___gmpn_gcd_subdiv_step($ap, $bp, $n, 0, 820, $135, $73) | 0;
    $137 = ($136 | 0) == 0;
    if ($137) {
      label = 36;
      break;
    } else {
      label = 39;
      break;
    }
   case 36:
    $139 = HEAP32[$__tmp_marker >> 2] | 0;
    $140 = ($139 | 0) == 0;
    if ($140) {
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    ___gmp_tmp_reentrant_free($139);
    label = 38;
    break;
   case 38:
    $143 = $ctx + 4 | 0;
    $144 = HEAP32[$143 >> 2] | 0;
    $_0 = $144;
    label = 127;
    break;
   case 39:
    $146 = HEAP32[$134 >> 2] | 0;
    $_0307_ph = $136;
    $un_1_ph = $146;
    label = 40;
    break;
   case 40:
    $147 = ($_0307_ph | 0) > 599;
    if ($147) {
      label = 41;
      break;
    } else {
      $un_1_lcssa = $un_1_ph;
      $_0307_lcssa = $_0307_ph;
      label = 56;
      break;
    }
   case 41:
    $148 = $38 + 4 | 0;
    $149 = $148;
    $150 = $ctx + 20 | 0;
    $151 = $ctx + 24 | 0;
    $152 = $ctx + 28 | 0;
    $153 = $ctx + 16 | 0;
    $154 = $ctx;
    $155 = $n << 3;
    $156 = $matrix_scratch_0 << 2;
    $157 = $155 + $156 | 0;
    $158 = $157 + 4 | 0;
    $un_1362 = $un_1_ph;
    $_0307363 = $_0307_ph;
    label = 42;
    break;
   case 42:
    $160 = ($_0307363 | 0) / 3 & -1;
    $161 = $_0307363 - $160 | 0;
    ___gmpn_hgcd_matrix_init($M11, $161, $73);
    $162 = $ap + ($160 << 2) | 0;
    $163 = $bp + ($160 << 2) | 0;
    $164 = ___gmpn_hgcd($162, $163, $161, $M11, $81) | 0;
    $165 = ($164 | 0) > 0;
    if ($165) {
      label = 43;
      break;
    } else {
      label = 50;
      break;
    }
   case 43:
    $167 = $164 + $160 | 0;
    $168 = ___gmpn_hgcd_matrix_adjust($M11, $167, $ap, $bp, $160, $81) | 0;
    $169 = ($un_1362 | 0) == 0;
    if ($169) {
      label = 49;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    $171 = $un_1362 - 1 | 0;
    $172 = HEAP32[$39 >> 2] | 0;
    $173 = ($171 | 0) == 0;
    if ($173) {
      $__x17_1 = $172;
      $__dst15_1 = $81;
      label = 48;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    $174 = $un_1362 << 2;
    $scevgep406_sum = $158 + $174 | 0;
    $scevgep407 = $38 + $scevgep406_sum | 0;
    $__x17_0 = $172;
    $__src16_0 = $149;
    $__dst15_0 = $81;
    $__n14_0 = $171;
    label = 46;
    break;
   case 46:
    $176 = $__dst15_0 + 4 | 0;
    HEAP32[$__dst15_0 >> 2] = $__x17_0;
    $177 = $__src16_0 + 4 | 0;
    $178 = HEAP32[$__src16_0 >> 2] | 0;
    $179 = $__n14_0 - 1 | 0;
    $180 = ($179 | 0) == 0;
    if ($180) {
      label = 47;
      break;
    } else {
      $__x17_0 = $178;
      $__src16_0 = $177;
      $__dst15_0 = $176;
      $__n14_0 = $179;
      label = 46;
      break;
    }
   case 47:
    $scevgep407408 = $scevgep407;
    $__x17_1 = $178;
    $__dst15_1 = $scevgep407408;
    label = 48;
    break;
   case 48:
    HEAP32[$__dst15_1 >> 2] = $__x17_1;
    label = 49;
    break;
   case 49:
    $_sum322 = $un_1362 + $_sum308 | 0;
    $183 = $39 + ($_sum322 << 2) | 0;
    $184 = _hgcd_mul_matrix_vector($M11, $39, $81, $72, $un_1362, $183) | 0;
    $_0307_be = $168;
    $un_1_be = $184;
    label = 55;
    break;
   case 50:
    HEAP32[$150 >> 2] = $39;
    HEAP32[$151 >> 2] = $72;
    $_sum321 = $_0307363 + $_sum | 0;
    $186 = $39 + ($_sum321 << 2) | 0;
    HEAP32[$152 >> 2] = $186;
    HEAP32[$153 >> 2] = $un_1362;
    $187 = ___gmpn_gcd_subdiv_step($ap, $bp, $_0307363, 0, 820, $154, $73) | 0;
    $188 = ($187 | 0) == 0;
    if ($188) {
      label = 51;
      break;
    } else {
      label = 54;
      break;
    }
   case 51:
    $190 = HEAP32[$__tmp_marker >> 2] | 0;
    $191 = ($190 | 0) == 0;
    if ($191) {
      label = 53;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    ___gmp_tmp_reentrant_free($190);
    label = 53;
    break;
   case 53:
    $194 = $ctx + 4 | 0;
    $195 = HEAP32[$194 >> 2] | 0;
    $_0 = $195;
    label = 127;
    break;
   case 54:
    $197 = HEAP32[$153 >> 2] | 0;
    $_0307_be = $187;
    $un_1_be = $197;
    label = 55;
    break;
   case 55:
    $198 = ($_0307_be | 0) > 599;
    if ($198) {
      $un_1362 = $un_1_be;
      $_0307363 = $_0307_be;
      label = 42;
      break;
    } else {
      $un_1_lcssa = $un_1_be;
      $_0307_lcssa = $_0307_be;
      label = 56;
      break;
    }
   case 56:
    $199 = ___gmpn_cmp($ap, $bp, $_0307_lcssa) | 0;
    $200 = ($199 | 0) == 0;
    if ($200) {
      label = 57;
      break;
    } else {
      label = 84;
      break;
    }
   case 57:
    $202 = ($_0307_lcssa | 0) == 0;
    if ($202) {
      $__gmp_i_0 = $un_1_lcssa;
      label = 63;
      break;
    } else {
      label = 58;
      break;
    }
   case 58:
    $204 = $_0307_lcssa - 1 | 0;
    $205 = HEAP32[$ap >> 2] | 0;
    $206 = ($204 | 0) == 0;
    if ($206) {
      $__x21_1 = $205;
      $__dst19_1 = $gp;
      label = 62;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    $207 = $_0307_lcssa - 1 | 0;
    $__x21_0 = $205;
    $ap_pn320 = $ap;
    $__dst19_0 = $gp;
    $__n18_0 = $204;
    label = 60;
    break;
   case 60:
    $__src20_0 = $ap_pn320 + 4 | 0;
    $209 = $__dst19_0 + 4 | 0;
    HEAP32[$__dst19_0 >> 2] = $__x21_0;
    $210 = HEAP32[$__src20_0 >> 2] | 0;
    $211 = $__n18_0 - 1 | 0;
    $212 = ($211 | 0) == 0;
    if ($212) {
      label = 61;
      break;
    } else {
      $__x21_0 = $210;
      $ap_pn320 = $__src20_0;
      $__dst19_0 = $209;
      $__n18_0 = $211;
      label = 60;
      break;
    }
   case 61:
    $scevgep390 = $gp + ($207 << 2) | 0;
    $__x21_1 = $210;
    $__dst19_1 = $scevgep390;
    label = 62;
    break;
   case 62:
    HEAP32[$__dst19_1 >> 2] = $__x21_1;
    $__gmp_i_0 = $un_1_lcssa;
    label = 63;
    break;
   case 63:
    $214 = $__gmp_i_0 - 1 | 0;
    $215 = ($__gmp_i_0 | 0) > 0;
    if ($215) {
      label = 64;
      break;
    } else {
      label = 67;
      break;
    }
   case 64:
    $217 = $39 + ($214 << 2) | 0;
    $218 = HEAP32[$217 >> 2] | 0;
    $_sum319 = $__gmp_i_0 + $n | 0;
    $219 = $39 + ($_sum319 << 2) | 0;
    $220 = HEAP32[$219 >> 2] | 0;
    $221 = ($218 | 0) == ($220 | 0);
    if ($221) {
      $__gmp_i_0 = $214;
      label = 63;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    $not_ = $218 >>> 0 > $220 >>> 0;
    if ($not_) {
      label = 67;
      break;
    } else {
      label = 66;
      break;
    }
   case 66:
    $223 = $un_1_lcssa - 1 | 0;
    $scevgep383 = $up + ($223 << 2) | 0;
    $un_2 = $un_1_lcssa;
    $indvars_iv384 = $scevgep383;
    label = 68;
    break;
   case 67:
    $224 = $un_1_lcssa - 1 | 0;
    $scevgep = $up + ($224 << 2) | 0;
    $un_3 = $un_1_lcssa;
    $indvars_iv = $scevgep;
    label = 76;
    break;
   case 68:
    $226 = ($un_2 | 0) > 0;
    if ($226) {
      label = 69;
      break;
    } else {
      label = 70;
      break;
    }
   case 69:
    $228 = $un_2 - 1 | 0;
    $229 = $39 + ($228 << 2) | 0;
    $230 = HEAP32[$229 >> 2] | 0;
    $231 = ($230 | 0) == 0;
    $scevgep385 = $indvars_iv384 - 4 | 0;
    if ($231) {
      $un_2 = $228;
      $indvars_iv384 = $scevgep385;
      label = 68;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    $233 = ($un_2 | 0) == 0;
    if ($233) {
      label = 75;
      break;
    } else {
      label = 71;
      break;
    }
   case 71:
    $235 = $un_2 - 1 | 0;
    $236 = HEAP32[$39 >> 2] | 0;
    $237 = ($235 | 0) == 0;
    if ($237) {
      $__x25_1 = $236;
      $__dst23_1 = $up;
      label = 74;
      break;
    } else {
      label = 72;
      break;
    }
   case 72:
    $238 = $38 + 4 | 0;
    $239 = $238;
    $__x25_0 = $236;
    $__src24_0 = $239;
    $__dst23_0 = $up;
    $__n22_0 = $235;
    label = 73;
    break;
   case 73:
    $241 = $__dst23_0 + 4 | 0;
    HEAP32[$__dst23_0 >> 2] = $__x25_0;
    $242 = $__src24_0 + 4 | 0;
    $243 = HEAP32[$__src24_0 >> 2] | 0;
    $244 = $__n22_0 - 1 | 0;
    $245 = ($244 | 0) == 0;
    if ($245) {
      $__x25_1 = $243;
      $__dst23_1 = $indvars_iv384;
      label = 74;
      break;
    } else {
      $__x25_0 = $243;
      $__src24_0 = $242;
      $__dst23_0 = $241;
      $__n22_0 = $244;
      label = 73;
      break;
    }
   case 74:
    HEAP32[$__dst23_1 >> 2] = $__x25_1;
    label = 75;
    break;
   case 75:
    $247 = -$un_2 | 0;
    $storemerge = $247;
    label = 82;
    break;
   case 76:
    $248 = $un_3 - 1 | 0;
    $_sum317 = $un_3 + $n | 0;
    $249 = $39 + ($_sum317 << 2) | 0;
    $250 = HEAP32[$249 >> 2] | 0;
    $251 = ($250 | 0) == 0;
    $scevgep380 = $indvars_iv - 4 | 0;
    if ($251) {
      $un_3 = $248;
      $indvars_iv = $scevgep380;
      label = 76;
      break;
    } else {
      label = 77;
      break;
    }
   case 77:
    $253 = ($un_3 | 0) == 0;
    if ($253) {
      $storemerge = 0;
      label = 82;
      break;
    } else {
      label = 78;
      break;
    }
   case 78:
    $255 = HEAP32[$72 >> 2] | 0;
    $256 = ($248 | 0) == 0;
    if ($256) {
      $__x29_1 = $255;
      $__dst27_1 = $up;
      label = 81;
      break;
    } else {
      label = 79;
      break;
    }
   case 79:
    $_sum318 = $n + 2 | 0;
    $257 = $39 + ($_sum318 << 2) | 0;
    $__x29_0 = $255;
    $__src28_0 = $257;
    $__dst27_0 = $up;
    $__n26_0 = $248;
    label = 80;
    break;
   case 80:
    $259 = $__dst27_0 + 4 | 0;
    HEAP32[$__dst27_0 >> 2] = $__x29_0;
    $260 = $__src28_0 + 4 | 0;
    $261 = HEAP32[$__src28_0 >> 2] | 0;
    $262 = $__n26_0 - 1 | 0;
    $263 = ($262 | 0) == 0;
    if ($263) {
      $__x29_1 = $261;
      $__dst27_1 = $indvars_iv;
      label = 81;
      break;
    } else {
      $__x29_0 = $261;
      $__src28_0 = $260;
      $__dst27_0 = $259;
      $__n26_0 = $262;
      label = 80;
      break;
    }
   case 81:
    HEAP32[$__dst27_1 >> 2] = $__x29_1;
    $storemerge = $un_3;
    label = 82;
    break;
   case 82:
    HEAP32[$usizep >> 2] = $storemerge;
    $265 = HEAP32[$__tmp_marker >> 2] | 0;
    $266 = ($265 | 0) == 0;
    if ($266) {
      $_0 = $_0307_lcssa;
      label = 127;
      break;
    } else {
      label = 83;
      break;
    }
   case 83:
    ___gmp_tmp_reentrant_free($265);
    $_0 = $_0307_lcssa;
    label = 127;
    break;
   case 84:
    $269 = HEAP32[$39 >> 2] | 0;
    $270 = ($269 | 0) == 0;
    $271 = ($un_1_lcssa | 0) == 1;
    $or_cond = $270 & $271;
    if ($or_cond) {
      label = 85;
      break;
    } else {
      label = 87;
      break;
    }
   case 85:
    $273 = ___gmpn_gcdext_lehmer_n($gp, $up, $usizep, $ap, $bp, $_0307_lcssa, $73) | 0;
    $274 = HEAP32[$__tmp_marker >> 2] | 0;
    $275 = ($274 | 0) == 0;
    if ($275) {
      $_0 = $273;
      label = 127;
      break;
    } else {
      label = 86;
      break;
    }
   case 86:
    ___gmp_tmp_reentrant_free($274);
    $_0 = $273;
    label = 127;
    break;
   case 87:
    $_sum310 = $_0307_lcssa + $_sum | 0;
    $278 = $39 + ($_sum310 << 2) | 0;
    $279 = ($_0307_lcssa | 0) != 0;
    if ($279) {
      label = 88;
      break;
    } else {
      label = 98;
      break;
    }
   case 88:
    $281 = $_0307_lcssa - 1 | 0;
    $282 = HEAP32[$ap >> 2] | 0;
    $283 = ($281 | 0) == 0;
    if ($283) {
      label = 90;
      break;
    } else {
      label = 89;
      break;
    }
   case 89:
    $284 = $_0307_lcssa << 3;
    $285 = $n << 3;
    $286 = $284 + $285 | 0;
    $287 = $286 | 4;
    $scevgep402 = $38 + $287 | 0;
    $__x35_0 = $282;
    $ap_pn = $ap;
    $__dst33_0 = $278;
    $__n32_0 = $281;
    label = 91;
    break;
   case 90:
    HEAP32[$278 >> 2] = $282;
    $_sum316329 = $_sum310 + $_0307_lcssa | 0;
    $288 = $39 + ($_sum316329 << 2) | 0;
    $289 = HEAP32[$bp >> 2] | 0;
    $__x39_1 = $289;
    $__dst37_1 = $288;
    label = 97;
    break;
   case 91:
    $__src34_0 = $ap_pn + 4 | 0;
    $291 = $__dst33_0 + 4 | 0;
    HEAP32[$__dst33_0 >> 2] = $__x35_0;
    $292 = HEAP32[$__src34_0 >> 2] | 0;
    $293 = $__n32_0 - 1 | 0;
    $294 = ($293 | 0) == 0;
    if ($294) {
      label = 92;
      break;
    } else {
      $__x35_0 = $292;
      $ap_pn = $__src34_0;
      $__dst33_0 = $291;
      $__n32_0 = $293;
      label = 91;
      break;
    }
   case 92:
    $scevgep402403 = $scevgep402;
    HEAP32[$scevgep402403 >> 2] = $292;
    if ($279) {
      label = 93;
      break;
    } else {
      label = 98;
      break;
    }
   case 93:
    $_sum316 = $_sum310 + $_0307_lcssa | 0;
    $297 = $39 + ($_sum316 << 2) | 0;
    $298 = HEAP32[$bp >> 2] | 0;
    if ($283) {
      $__x39_1 = $298;
      $__dst37_1 = $297;
      label = 97;
      break;
    } else {
      label = 94;
      break;
    }
   case 94:
    $299 = $_0307_lcssa * 12 & -1;
    $300 = $n << 3;
    $301 = $299 + $300 | 0;
    $302 = $301 + 4 | 0;
    $scevgep398 = $38 + $302 | 0;
    $__x39_0 = $298;
    $bp_pn = $bp;
    $__dst37_0 = $297;
    $__n36_0 = $281;
    label = 95;
    break;
   case 95:
    $__src38_0 = $bp_pn + 4 | 0;
    $304 = $__dst37_0 + 4 | 0;
    HEAP32[$__dst37_0 >> 2] = $__x39_0;
    $305 = HEAP32[$__src38_0 >> 2] | 0;
    $306 = $__n36_0 - 1 | 0;
    $307 = ($306 | 0) == 0;
    if ($307) {
      label = 96;
      break;
    } else {
      $__x39_0 = $305;
      $bp_pn = $__src38_0;
      $__dst37_0 = $304;
      $__n36_0 = $306;
      label = 95;
      break;
    }
   case 96:
    $scevgep398399 = $scevgep398;
    $__x39_1 = $305;
    $__dst37_1 = $scevgep398399;
    label = 97;
    break;
   case 97:
    HEAP32[$__dst37_1 >> 2] = $__x39_1;
    label = 98;
    break;
   case 98:
    $_sum311 = $_sum310 + $_0307_lcssa | 0;
    $309 = $39 + ($_sum311 << 2) | 0;
    $310 = $_0307_lcssa << 1;
    $_sum312 = $_sum310 + $310 | 0;
    $311 = $39 + ($_sum312 << 2) | 0;
    $312 = ___gmpn_gcdext_lehmer_n($gp, $73, $lehmer_un, $278, $309, $_0307_lcssa, $311) | 0;
    $313 = $un_1_lcssa - 1 | 0;
    $scevgep393 = $up + ($313 << 2) | 0;
    $u0n_0 = $un_1_lcssa;
    $indvars_iv394 = $scevgep393;
    label = 99;
    break;
   case 99:
    $315 = ($u0n_0 | 0) > 0;
    if ($315) {
      label = 100;
      break;
    } else {
      label = 101;
      break;
    }
   case 100:
    $317 = $u0n_0 - 1 | 0;
    $318 = $39 + ($317 << 2) | 0;
    $319 = HEAP32[$318 >> 2] | 0;
    $320 = ($319 | 0) == 0;
    $scevgep395 = $indvars_iv394 - 4 | 0;
    if ($320) {
      $u0n_0 = $317;
      $indvars_iv394 = $scevgep395;
      label = 99;
      break;
    } else {
      label = 101;
      break;
    }
   case 101:
    $322 = HEAP32[$lehmer_un >> 2] | 0;
    $323 = ($322 | 0) == 0;
    if ($323) {
      label = 102;
      break;
    } else {
      label = 109;
      break;
    }
   case 102:
    $325 = ($u0n_0 | 0) == 0;
    if ($325) {
      label = 107;
      break;
    } else {
      label = 103;
      break;
    }
   case 103:
    $327 = $u0n_0 - 1 | 0;
    $328 = HEAP32[$39 >> 2] | 0;
    $329 = ($327 | 0) == 0;
    if ($329) {
      $__x43_1 = $328;
      $__dst41_1 = $up;
      label = 106;
      break;
    } else {
      label = 104;
      break;
    }
   case 104:
    $330 = $38 + 4 | 0;
    $331 = $330;
    $__x43_0 = $328;
    $__src42_0 = $331;
    $__dst41_0 = $up;
    $__n40_0 = $327;
    label = 105;
    break;
   case 105:
    $333 = $__dst41_0 + 4 | 0;
    HEAP32[$__dst41_0 >> 2] = $__x43_0;
    $334 = $__src42_0 + 4 | 0;
    $335 = HEAP32[$__src42_0 >> 2] | 0;
    $336 = $__n40_0 - 1 | 0;
    $337 = ($336 | 0) == 0;
    if ($337) {
      $__x43_1 = $335;
      $__dst41_1 = $indvars_iv394;
      label = 106;
      break;
    } else {
      $__x43_0 = $335;
      $__src42_0 = $334;
      $__dst41_0 = $333;
      $__n40_0 = $336;
      label = 105;
      break;
    }
   case 106:
    HEAP32[$__dst41_1 >> 2] = $__x43_1;
    label = 107;
    break;
   case 107:
    $339 = -$u0n_0 | 0;
    HEAP32[$usizep >> 2] = $339;
    $340 = HEAP32[$__tmp_marker >> 2] | 0;
    $341 = ($340 | 0) == 0;
    if ($341) {
      $_0 = $312;
      label = 127;
      break;
    } else {
      label = 108;
      break;
    }
   case 108:
    ___gmp_tmp_reentrant_free($340);
    $_0 = $312;
    label = 127;
    break;
   case 109:
    $_sum313 = $_sum311 + 1 | 0;
    $344 = $39 + ($_sum313 << 2) | 0;
    $345 = _compute_v($278, $ap, $bp, $_0307_lcssa, $gp, $312, $73, $322, $344) | 0;
    $346 = HEAP32[$lehmer_un >> 2] | 0;
    $347 = ($346 | 0) > 0;
    if ($347) {
      $negate_0 = 0;
      label = 111;
      break;
    } else {
      label = 110;
      break;
    }
   case 110:
    $349 = -$346 | 0;
    HEAP32[$lehmer_un >> 2] = $349;
    $negate_0 = 1;
    label = 111;
    break;
   case 111:
    $u1n_0 = $un_1_lcssa;
    label = 112;
    break;
   case 112:
    $352 = ($u1n_0 | 0) > 0;
    if ($352) {
      label = 113;
      break;
    } else {
      label = 114;
      break;
    }
   case 113:
    $_sum315 = $u1n_0 + $n | 0;
    $354 = $39 + ($_sum315 << 2) | 0;
    $355 = HEAP32[$354 >> 2] | 0;
    $356 = ($355 | 0) == 0;
    $357 = $u1n_0 - 1 | 0;
    if ($356) {
      $u1n_0 = $357;
      label = 112;
      break;
    } else {
      label = 114;
      break;
    }
   case 114:
    $359 = HEAP32[$lehmer_un >> 2] | 0;
    $360 = ($359 | 0) > ($u1n_0 | 0);
    if ($360) {
      label = 116;
      break;
    } else {
      label = 115;
      break;
    }
   case 115:
    $362 = ___gmpn_mul($up, $72, $u1n_0, $73, $359) | 0;
    label = 117;
    break;
   case 116:
    $364 = ___gmpn_mul($up, $73, $359, $72, $u1n_0) | 0;
    label = 117;
    break;
   case 117:
    $366 = HEAP32[$lehmer_un >> 2] | 0;
    $367 = $366 + $u1n_0 | 0;
    $368 = $367 - 1 | 0;
    $369 = $up + ($368 << 2) | 0;
    $370 = HEAP32[$369 >> 2] | 0;
    $371 = ($370 | 0) == 0;
    $372 = $371 & 1;
    $373 = $367 - $372 | 0;
    $374 = ($345 | 0) > 0;
    if ($374) {
      label = 118;
      break;
    } else {
      $un_5 = $373;
      label = 125;
      break;
    }
   case 118:
    $376 = ($345 | 0) > ($u0n_0 | 0);
    if ($376) {
      label = 120;
      break;
    } else {
      label = 119;
      break;
    }
   case 119:
    $378 = ___gmpn_mul($72, $39, $u0n_0, $278, $345) | 0;
    label = 121;
    break;
   case 120:
    $380 = ___gmpn_mul($72, $278, $345, $39, $u0n_0) | 0;
    label = 121;
    break;
   case 121:
    $382 = $345 + $u0n_0 | 0;
    $_sum314 = $382 + $n | 0;
    $383 = $39 + ($_sum314 << 2) | 0;
    $384 = HEAP32[$383 >> 2] | 0;
    $385 = ($384 | 0) == 0;
    $386 = $385 & 1;
    $387 = $382 - $386 | 0;
    $388 = ($387 | 0) > ($373 | 0);
    if ($388) {
      label = 123;
      break;
    } else {
      label = 122;
      break;
    }
   case 122:
    $390 = ___gmpn_add($up, $up, $373, $72, $387) | 0;
    $cy_0 = $390;
    $un_4 = $373;
    label = 124;
    break;
   case 123:
    $392 = ___gmpn_add($up, $72, $387, $up, $373) | 0;
    $cy_0 = $392;
    $un_4 = $387;
    label = 124;
    break;
   case 124:
    $394 = $up + ($un_4 << 2) | 0;
    HEAP32[$394 >> 2] = $cy_0;
    $395 = ($cy_0 | 0) != 0;
    $396 = $395 & 1;
    $397 = $396 + $un_4 | 0;
    $un_5 = $397;
    label = 125;
    break;
   case 125:
    $399 = ($negate_0 | 0) != 0;
    $400 = -$un_5 | 0;
    $401 = $399 ? $400 : $un_5;
    HEAP32[$usizep >> 2] = $401;
    $402 = HEAP32[$__tmp_marker >> 2] | 0;
    $403 = ($402 | 0) == 0;
    if ($403) {
      $_0 = $312;
      label = 127;
      break;
    } else {
      label = 126;
      break;
    }
   case 126:
    ___gmp_tmp_reentrant_free($402);
    $_0 = $312;
    label = 127;
    break;
   case 127:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _hgcd_mul_matrix_vector($M, $rp, $ap, $bp, $n, $tp) {
  $M = $M | 0;
  $rp = $rp | 0;
  $ap = $ap | 0;
  $bp = $bp | 0;
  $n = $n | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $_0 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $_1 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $M + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) < ($n | 0);
    $4 = $M + 8 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $7 = ___gmpn_mul($tp, $5, $2, $ap, $n) | 0;
    $8 = $M + 16 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = HEAP32[$1 >> 2] | 0;
    $11 = ___gmpn_mul($rp, $9, $10, $bp, $n) | 0;
    label = 4;
    break;
   case 3:
    $13 = ___gmpn_mul($tp, $ap, $n, $5, $2) | 0;
    $14 = $M + 16 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = HEAP32[$1 >> 2] | 0;
    $17 = ___gmpn_mul($rp, $bp, $n, $15, $16) | 0;
    label = 4;
    break;
   case 4:
    $19 = HEAP32[$1 >> 2] | 0;
    $20 = $19 + $n | 0;
    $21 = ___gmpn_add_n($rp, $rp, $tp, $20) | 0;
    $22 = HEAP32[$1 >> 2] | 0;
    $23 = ($22 | 0) < ($n | 0);
    $24 = $M + 20 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ($23) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $27 = ___gmpn_mul($tp, $25, $22, $bp, $n) | 0;
    $28 = $M + 12 | 0;
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = HEAP32[$1 >> 2] | 0;
    $31 = ___gmpn_mul($bp, $29, $30, $ap, $n) | 0;
    label = 7;
    break;
   case 6:
    $33 = ___gmpn_mul($tp, $bp, $n, $25, $22) | 0;
    $34 = $M + 12 | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    $36 = HEAP32[$1 >> 2] | 0;
    $37 = ___gmpn_mul($bp, $ap, $n, $35, $36) | 0;
    label = 7;
    break;
   case 7:
    $39 = HEAP32[$1 >> 2] | 0;
    $40 = $39 + $n | 0;
    $41 = ___gmpn_add_n($bp, $bp, $tp, $40) | 0;
    $42 = HEAP32[$1 >> 2] | 0;
    $43 = $42 + $n | 0;
    $44 = $41 | $21;
    $45 = ($44 | 0) == 0;
    if ($45) {
      $_0 = $43;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $47 = $rp + ($43 << 2) | 0;
    HEAP32[$47 >> 2] = $21;
    $48 = $bp + ($43 << 2) | 0;
    HEAP32[$48 >> 2] = $41;
    $49 = $43 + 1 | 0;
    $_1 = $49;
    label = 10;
    break;
   case 9:
    $50 = $_0 - 1 | 0;
    $51 = $rp + ($50 << 2) | 0;
    $52 = HEAP32[$51 >> 2] | 0;
    $53 = $bp + ($50 << 2) | 0;
    $54 = HEAP32[$53 >> 2] | 0;
    $55 = $54 | $52;
    $56 = ($55 | 0) == 0;
    if ($56) {
      $_0 = $50;
      label = 9;
      break;
    } else {
      $_1 = $_0;
      label = 10;
      break;
    }
   case 10:
    return $_1 | 0;
  }
  return 0;
}
function _compute_v($vp, $ap, $bp, $n, $gp, $gn, $up, $usize, $tp) {
  $vp = $vp | 0;
  $ap = $ap | 0;
  $bp = $bp | 0;
  $n = $n | 0;
  $gp = $gp | 0;
  $gn = $gn | 0;
  $up = $up | 0;
  $usize = $usize | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $an_0 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $size_0 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $size_1 = 0, $bn_0 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($usize | 0) > -1;
    $2 = -$usize | 0;
    $3 = $1 ? $usize : $2;
    $an_0 = $n;
    label = 2;
    break;
   case 2:
    $5 = ($an_0 | 0) > 0;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $7 = $an_0 - 1 | 0;
    $8 = $ap + ($7 << 2) | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ($9 | 0) == 0;
    if ($10) {
      $an_0 = $7;
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $12 = ($an_0 | 0) < ($3 | 0);
    if ($12) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $14 = ___gmpn_mul($tp, $ap, $an_0, $up, $3) | 0;
    label = 7;
    break;
   case 6:
    $16 = ___gmpn_mul($tp, $up, $3, $ap, $an_0) | 0;
    label = 7;
    break;
   case 7:
    $18 = $an_0 + $3 | 0;
    $19 = ($usize | 0) > 0;
    if ($19) {
      label = 8;
      break;
    } else {
      label = 12;
      break;
    }
   case 8:
    $21 = ___gmpn_sub($tp, $tp, $18, $gp, $gn) | 0;
    $size_0 = $18;
    label = 9;
    break;
   case 9:
    $23 = ($size_0 | 0) > 0;
    if ($23) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $25 = $size_0 - 1 | 0;
    $26 = $tp + ($25 << 2) | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = ($27 | 0) == 0;
    if ($28) {
      $size_0 = $25;
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $30 = ($size_0 | 0) == 0;
    if ($30) {
      $_0 = 0;
      label = 17;
      break;
    } else {
      $size_1 = $size_0;
      label = 13;
      break;
    }
   case 12:
    $32 = ___gmpn_add($tp, $tp, $18, $gp, $gn) | 0;
    $33 = $18 - 1 | 0;
    $34 = $tp + ($33 << 2) | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    $36 = ($35 | 0) == 0;
    $37 = $36 & 1;
    $38 = $18 - $37 | 0;
    $size_1 = $38;
    label = 13;
    break;
   case 13:
    $bn_0 = $n;
    label = 14;
    break;
   case 14:
    $41 = ($bn_0 | 0) > 0;
    if ($41) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $43 = $bn_0 - 1 | 0;
    $44 = $bp + ($43 << 2) | 0;
    $45 = HEAP32[$44 >> 2] | 0;
    $46 = ($45 | 0) == 0;
    if ($46) {
      $bn_0 = $43;
      label = 14;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $48 = $size_1 + 1 | 0;
    $49 = $48 - $bn_0 | 0;
    ___gmpn_divexact($vp, $tp, $size_1, $bp, $bn_0);
    $50 = $49 - 1 | 0;
    $51 = $vp + ($50 << 2) | 0;
    $52 = HEAP32[$51 >> 2] | 0;
    $53 = ($52 | 0) == 0;
    $54 = $53 & 1;
    $55 = $49 - $54 | 0;
    $_0 = $55;
    label = 17;
    break;
   case 17:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_gcd_subdiv_step($ap, $bp, $n, $s, $hook, $ctx, $tp) {
  $ap = $ap | 0;
  $bp = $bp | 0;
  $n = $n | 0;
  $s = $s | 0;
  $hook = $hook | 0;
  $ctx = $ctx | 0;
  $tp = $tp | 0;
  var $an_0 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $bn_0 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $__gmp_i_0 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $_ = 0, $ap_bp = 0, $26 = 0, $29 = 0, $_141 = 0, $an_0_bn_0 = 0, $bn_0_an_0 = 0, $ap_bp142 = 0, $_sink = 0, $swapped_0 = 0, $bn_1 = 0, $an_1 = 0, $_0139 = 0, $bp_ap143 = 0, $31 = 0, $33 = 0, $35 = 0, $37 = 0, $bn_2 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $51 = 0, $53 = 0, $__gmp_i3_0 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $_0138__0139 = 0, $65 = 0, $69 = 0, $70 = 0, $an_1_bn_2 = 0, $bn_2_an_1 = 0, $_0138__0139145 = 0, $_sink147 = 0, $_pn = 0, $bn_3 = 0, $an_2 = 0, $_1140 = 0, $swapped_1 = 0, $_0139__0138146 = 0, $72 = 0, $73 = 0, $bn_4 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $82 = 0, $84 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__n_0 = 0, $__dst_0 = 0, $_1_pn = 0, $__x_0 = 0, $__src_0 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $an_3 = 0, $__p_0 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $an_4 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $an_0 = $n;
    label = 2;
    break;
   case 2:
    $2 = ($an_0 | 0) > 0;
    if ($2) {
      label = 3;
      break;
    } else {
      $bn_0 = $n;
      label = 4;
      break;
    }
   case 3:
    $4 = $an_0 - 1 | 0;
    $5 = $ap + ($4 << 2) | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) == 0;
    if ($7) {
      $an_0 = $4;
      label = 2;
      break;
    } else {
      $bn_0 = $n;
      label = 4;
      break;
    }
   case 4:
    $8 = ($bn_0 | 0) > 0;
    if ($8) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $10 = $bn_0 - 1 | 0;
    $11 = $bp + ($10 << 2) | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($12 | 0) == 0;
    if ($13) {
      $bn_0 = $10;
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $15 = ($an_0 | 0) == ($bn_0 | 0);
    if ($15) {
      $__gmp_i_0 = $an_0;
      label = 7;
      break;
    } else {
      label = 12;
      break;
    }
   case 7:
    $16 = $__gmp_i_0 - 1 | 0;
    $17 = ($__gmp_i_0 | 0) > 0;
    if ($17) {
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 8:
    $19 = $ap + ($16 << 2) | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $bp + ($16 << 2) | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = ($20 | 0) == ($22 | 0);
    if ($23) {
      $__gmp_i_0 = $16;
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $25 = $20 >>> 0 > $22 >>> 0;
    $_ = $25 & 1;
    $ap_bp = $25 ? $ap : $bp;
    $_0139 = $ap_bp;
    $an_1 = $an_0;
    $bn_1 = $bn_0;
    $swapped_0 = $_;
    $_sink = $25;
    label = 13;
    break;
   case 10:
    $26 = ($s | 0) == 0;
    if ($26) {
      label = 11;
      break;
    } else {
      $_0 = 0;
      label = 48;
      break;
    }
   case 11:
    FUNCTION_TABLE_viiiiii[$hook & 1023]($ctx, $ap, $an_0, 0, 0, -1);
    $_0 = 0;
    label = 48;
    break;
   case 12:
    $29 = ($an_0 | 0) > ($bn_0 | 0);
    $_141 = $29 & 1;
    $an_0_bn_0 = $29 ? $an_0 : $bn_0;
    $bn_0_an_0 = $29 ? $bn_0 : $an_0;
    $ap_bp142 = $29 ? $ap : $bp;
    $_0139 = $ap_bp142;
    $an_1 = $bn_0_an_0;
    $bn_1 = $an_0_bn_0;
    $swapped_0 = $_141;
    $_sink = $29;
    label = 13;
    break;
   case 13:
    $bp_ap143 = $_sink ? $bp : $ap;
    $31 = ($an_1 | 0) > ($s | 0);
    if ($31) {
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $33 = ($s | 0) == 0;
    if ($33) {
      label = 15;
      break;
    } else {
      $_0 = 0;
      label = 48;
      break;
    }
   case 15:
    $35 = $swapped_0 ^ 1;
    FUNCTION_TABLE_viiiiii[$hook & 1023]($ctx, $_0139, $bn_1, 0, 0, $35);
    $_0 = 0;
    label = 48;
    break;
   case 16:
    $37 = ___gmpn_sub($_0139, $_0139, $bn_1, $bp_ap143, $an_1) | 0;
    $bn_2 = $bn_1;
    label = 17;
    break;
   case 17:
    $39 = ($bn_2 | 0) > 0;
    if ($39) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    $41 = $bn_2 - 1 | 0;
    $42 = $_0139 + ($41 << 2) | 0;
    $43 = HEAP32[$42 >> 2] | 0;
    $44 = ($43 | 0) == 0;
    if ($44) {
      $bn_2 = $41;
      label = 17;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $46 = ($bn_2 | 0) > ($s | 0);
    if ($46) {
      label = 22;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $48 = ___gmpn_add($_0139, $bp_ap143, $an_1, $_0139, $bn_2) | 0;
    $49 = ($48 | 0) == 0;
    if ($49) {
      $_0 = 0;
      label = 48;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $51 = $_0139 + ($an_1 << 2) | 0;
    HEAP32[$51 >> 2] = $48;
    $_0 = 0;
    label = 48;
    break;
   case 22:
    $53 = ($an_1 | 0) == ($bn_2 | 0);
    if ($53) {
      $__gmp_i3_0 = $an_1;
      label = 23;
      break;
    } else {
      label = 29;
      break;
    }
   case 23:
    $54 = $__gmp_i3_0 - 1 | 0;
    $55 = ($__gmp_i3_0 | 0) > 0;
    if ($55) {
      label = 24;
      break;
    } else {
      label = 26;
      break;
    }
   case 24:
    $57 = $bp_ap143 + ($54 << 2) | 0;
    $58 = HEAP32[$57 >> 2] | 0;
    $59 = $_0139 + ($54 << 2) | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    $61 = ($58 | 0) == ($60 | 0);
    if ($61) {
      $__gmp_i3_0 = $54;
      label = 23;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $63 = $58 >>> 0 > $60 >>> 0;
    FUNCTION_TABLE_viiiiii[$hook & 1023]($ctx, 0, 0, 9688, 1, $swapped_0);
    $64 = $63 & 1;
    $_0138__0139 = $63 ? $bp_ap143 : $_0139;
    $_1140 = $_0138__0139;
    $an_2 = $an_1;
    $bn_3 = $bn_2;
    $_pn = $64;
    $_sink147 = $63;
    label = 30;
    break;
   case 26:
    $65 = ($s | 0) > 0;
    if ($65) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    FUNCTION_TABLE_viiiiii[$hook & 1023]($ctx, 0, 0, 9688, 1, $swapped_0);
    $_0 = 0;
    label = 48;
    break;
   case 28:
    FUNCTION_TABLE_viiiiii[$hook & 1023]($ctx, $_0139, $bn_2, 0, 0, $swapped_0);
    $_0 = 0;
    label = 48;
    break;
   case 29:
    FUNCTION_TABLE_viiiiii[$hook & 1023]($ctx, 0, 0, 9688, 1, $swapped_0);
    $69 = ($an_1 | 0) > ($bn_2 | 0);
    $70 = $69 & 1;
    $an_1_bn_2 = $69 ? $an_1 : $bn_2;
    $bn_2_an_1 = $69 ? $bn_2 : $an_1;
    $_0138__0139145 = $69 ? $bp_ap143 : $_0139;
    $_1140 = $_0138__0139145;
    $an_2 = $bn_2_an_1;
    $bn_3 = $an_1_bn_2;
    $_pn = $70;
    $_sink147 = $69;
    label = 30;
    break;
   case 30:
    $swapped_1 = $_pn ^ $swapped_0;
    $_0139__0138146 = $_sink147 ? $_0139 : $bp_ap143;
    ___gmpn_tdiv_qr($tp, $_1140, 0, $_1140, $bn_3, $_0139__0138146, $an_2);
    $72 = $bn_3 - $an_2 | 0;
    $73 = $72 + 1 | 0;
    $bn_4 = $an_2;
    label = 31;
    break;
   case 31:
    $75 = ($bn_4 | 0) > 0;
    if ($75) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    $77 = $bn_4 - 1 | 0;
    $78 = $_1140 + ($77 << 2) | 0;
    $79 = HEAP32[$78 >> 2] | 0;
    $80 = ($79 | 0) == 0;
    if ($80) {
      $bn_4 = $77;
      label = 31;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $82 = ($bn_4 | 0) > ($s | 0);
    if ($82) {
      $an_4 = $an_2;
      label = 47;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    $84 = ($s | 0) == 0;
    if ($84) {
      label = 35;
      break;
    } else {
      label = 36;
      break;
    }
   case 35:
    FUNCTION_TABLE_viiiiii[$hook & 1023]($ctx, $_0139__0138146, $an_2, $tp, $73, $swapped_1);
    $_0 = 0;
    label = 48;
    break;
   case 36:
    if ($75) {
      label = 37;
      break;
    } else {
      label = 39;
      break;
    }
   case 37:
    $88 = ___gmpn_add($_1140, $_0139__0138146, $an_2, $_1140, $bn_4) | 0;
    $89 = ($88 | 0) == 0;
    if ($89) {
      $an_3 = $an_2;
      label = 45;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    $91 = $an_2 + 1 | 0;
    $92 = $_1140 + ($an_2 << 2) | 0;
    HEAP32[$92 >> 2] = $88;
    $an_3 = $91;
    label = 45;
    break;
   case 39:
    $94 = ($an_2 | 0) == 0;
    if ($94) {
      $an_3 = 0;
      label = 45;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    $96 = $an_2 - 1 | 0;
    $97 = HEAP32[$_0139__0138146 >> 2] | 0;
    $98 = ($96 | 0) == 0;
    if ($98) {
      $__x_1 = $97;
      $__dst_1 = $_1140;
      label = 44;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $99 = $an_2 - 1 | 0;
    $__x_0 = $97;
    $_1_pn = $_0139__0138146;
    $__dst_0 = $_1140;
    $__n_0 = $96;
    label = 42;
    break;
   case 42:
    $__src_0 = $_1_pn + 4 | 0;
    $101 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $102 = HEAP32[$__src_0 >> 2] | 0;
    $103 = $__n_0 - 1 | 0;
    $104 = ($103 | 0) == 0;
    if ($104) {
      label = 43;
      break;
    } else {
      $__x_0 = $102;
      $_1_pn = $__src_0;
      $__dst_0 = $101;
      $__n_0 = $103;
      label = 42;
      break;
    }
   case 43:
    $scevgep = $_1140 + ($99 << 2) | 0;
    $__x_1 = $102;
    $__dst_1 = $scevgep;
    label = 44;
    break;
   case 44:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    $an_3 = $an_2;
    label = 45;
    break;
   case 45:
    $__p_0 = $tp;
    label = 46;
    break;
   case 46:
    $108 = $__p_0 + 4 | 0;
    $109 = HEAP32[$__p_0 >> 2] | 0;
    $110 = $109 - 1 | 0;
    HEAP32[$__p_0 >> 2] = $110;
    $111 = ($109 | 0) == 0;
    if ($111) {
      $__p_0 = $108;
      label = 46;
      break;
    } else {
      $an_4 = $an_3;
      label = 47;
      break;
    }
   case 47:
    FUNCTION_TABLE_viiiiii[$hook & 1023]($ctx, 0, 0, $tp, $73, $swapped_1);
    $_0 = $an_4;
    label = 48;
    break;
   case 48:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_gcdext_hook($p, $gp, $gn, $qp, $qn, $d) {
  $p = $p | 0;
  $gp = $gp | 0;
  $gn = $gn | 0;
  $qp = $qp | 0;
  $qn = $qn | 0;
  $d = $d | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $gp_pn = 0, $__x_0 = 0, $__dst_0 = 0, $__n_0 = 0, $__src_0 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $scevgep = 0, $__x_1 = 0, $__dst_1 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $__gmp_i_0 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $not_ = 0, $c_0 = 0, $40 = 0, $_0 = 0, $42 = 0, $43 = 0, $44 = 0, $_in_in = 0, $_in = 0, $45 = 0, $un_0 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $__n1_0 = 0, $__dst2_0 = 0, $_pn = 0, $__x4_0 = 0, $__src3_0 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $__dst2_1 = 0, $__x4_1 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $_ = 0, $_88 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $93 = 0, $u1n_0 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $121 = 0, $123 = 0, $cy_0 = 0, $un_1 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p + 16 | 0;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($gp | 0) == 0;
    if ($4) {
      label = 22;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $6 = ($gn | 0) == 0;
    if ($6) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $8 = $gn - 1 | 0;
    $9 = $p;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = HEAP32[$gp >> 2] | 0;
    $12 = ($8 | 0) == 0;
    if ($12) {
      $__dst_1 = $10;
      $__x_1 = $11;
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $13 = $gn - 1 | 0;
    $__n_0 = $8;
    $__dst_0 = $10;
    $__x_0 = $11;
    $gp_pn = $gp;
    label = 5;
    break;
   case 5:
    $__src_0 = $gp_pn + 4 | 0;
    $15 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $16 = HEAP32[$__src_0 >> 2] | 0;
    $17 = $__n_0 - 1 | 0;
    $18 = ($17 | 0) == 0;
    if ($18) {
      label = 6;
      break;
    } else {
      $__n_0 = $17;
      $__dst_0 = $15;
      $__x_0 = $16;
      $gp_pn = $__src_0;
      label = 5;
      break;
    }
   case 6:
    $scevgep = $10 + ($13 << 2) | 0;
    $__dst_1 = $scevgep;
    $__x_1 = $16;
    label = 7;
    break;
   case 7:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 8;
    break;
   case 8:
    $21 = $p + 4 | 0;
    $22 = $21;
    HEAP32[$22 >> 2] = $gn;
    $23 = ($d | 0) < 0;
    if ($23) {
      label = 9;
      break;
    } else {
      $_0 = $d;
      label = 14;
      break;
    }
   case 9:
    $24 = $p + 20 | 0;
    $25 = $24;
    $26 = $p + 24 | 0;
    $27 = $26;
    $__gmp_i_0 = $3;
    label = 10;
    break;
   case 10:
    $29 = $__gmp_i_0 - 1 | 0;
    $30 = ($__gmp_i_0 | 0) > 0;
    if ($30) {
      label = 11;
      break;
    } else {
      $c_0 = 0;
      label = 13;
      break;
    }
   case 11:
    $32 = HEAP32[$25 >> 2] | 0;
    $33 = $32 + ($29 << 2) | 0;
    $34 = HEAP32[$33 >> 2] | 0;
    $35 = HEAP32[$27 >> 2] | 0;
    $36 = $35 + ($29 << 2) | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    $38 = ($34 | 0) == ($37 | 0);
    if ($38) {
      $__gmp_i_0 = $29;
      label = 10;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $not_ = $34 >>> 0 <= $37 >>> 0;
    $c_0 = $not_;
    label = 13;
    break;
   case 13:
    $40 = $c_0 & 1;
    $_0 = $40;
    label = 14;
    break;
   case 14:
    $42 = ($_0 | 0) != 0;
    $43 = $p + 20 | 0;
    $44 = $p + 24 | 0;
    $_in_in = $42 ? $43 : $44;
    $_in = $_in_in;
    $45 = HEAP32[$_in >> 2] | 0;
    $un_0 = $3;
    label = 15;
    break;
   case 15:
    $47 = ($un_0 | 0) > 0;
    if ($47) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    $49 = $un_0 - 1 | 0;
    $50 = $45 + ($49 << 2) | 0;
    $51 = HEAP32[$50 >> 2] | 0;
    $52 = ($51 | 0) == 0;
    if ($52) {
      $un_0 = $49;
      label = 15;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $54 = ($un_0 | 0) == 0;
    if ($54) {
      label = 21;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $56 = $un_0 - 1 | 0;
    $57 = $p + 8 | 0;
    $58 = $57;
    $59 = HEAP32[$58 >> 2] | 0;
    $60 = HEAP32[$45 >> 2] | 0;
    $61 = ($56 | 0) == 0;
    if ($61) {
      $__x4_1 = $60;
      $__dst2_1 = $59;
      label = 20;
      break;
    } else {
      $__x4_0 = $60;
      $_pn = $45;
      $__dst2_0 = $59;
      $__n1_0 = $56;
      label = 19;
      break;
    }
   case 19:
    $__src3_0 = $_pn + 4 | 0;
    $62 = $__dst2_0 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    $63 = HEAP32[$__src3_0 >> 2] | 0;
    $64 = $__n1_0 - 1 | 0;
    $65 = ($64 | 0) == 0;
    if ($65) {
      $__x4_1 = $63;
      $__dst2_1 = $62;
      label = 20;
      break;
    } else {
      $__x4_0 = $63;
      $_pn = $__src3_0;
      $__dst2_0 = $62;
      $__n1_0 = $64;
      label = 19;
      break;
    }
   case 20:
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    label = 21;
    break;
   case 21:
    $67 = -$un_0 | 0;
    $68 = $42 ? $67 : $un_0;
    $69 = $p + 12 | 0;
    $70 = $69;
    $71 = HEAP32[$70 >> 2] | 0;
    HEAP32[$71 >> 2] = $68;
    label = 36;
    break;
   case 22:
    $73 = $p + 20 | 0;
    $74 = $73;
    $75 = HEAP32[$74 >> 2] | 0;
    $76 = $p + 24 | 0;
    $77 = $76;
    $78 = HEAP32[$77 >> 2] | 0;
    $79 = ($d | 0) == 0;
    $_ = $79 ? $75 : $78;
    $_88 = $79 ? $78 : $75;
    $80 = $qn - 1 | 0;
    $81 = $qp + ($80 << 2) | 0;
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = ($82 | 0) == 0;
    $84 = $83 & 1;
    $85 = $qn - $84 | 0;
    $86 = ($85 | 0) == 1;
    if ($86) {
      label = 23;
      break;
    } else {
      $u1n_0 = $3;
      label = 26;
      break;
    }
   case 23:
    $88 = HEAP32[$qp >> 2] | 0;
    $89 = ($88 | 0) == 1;
    if ($89) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    $91 = ___gmpn_add_n($_, $_, $_88, $3) | 0;
    $un_1 = $3;
    $cy_0 = $91;
    label = 35;
    break;
   case 25:
    $93 = ___gmpn_addmul_1($_, $_88, $3, $88) | 0;
    $un_1 = $3;
    $cy_0 = $93;
    label = 35;
    break;
   case 26:
    $94 = ($u1n_0 | 0) > 0;
    if ($94) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    $96 = $u1n_0 - 1 | 0;
    $97 = $_88 + ($96 << 2) | 0;
    $98 = HEAP32[$97 >> 2] | 0;
    $99 = ($98 | 0) == 0;
    if ($99) {
      $u1n_0 = $96;
      label = 26;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $101 = ($u1n_0 | 0) == 0;
    if ($101) {
      label = 36;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $103 = $p + 28 | 0;
    $104 = $103;
    $105 = HEAP32[$104 >> 2] | 0;
    $106 = ($85 | 0) > ($u1n_0 | 0);
    if ($106) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    $108 = ___gmpn_mul($105, $qp, $85, $_88, $u1n_0) | 0;
    label = 32;
    break;
   case 31:
    $110 = ___gmpn_mul($105, $_88, $u1n_0, $qp, $85) | 0;
    label = 32;
    break;
   case 32:
    $112 = $u1n_0 + $85 | 0;
    $113 = $112 - 1 | 0;
    $114 = $105 + ($113 << 2) | 0;
    $115 = HEAP32[$114 >> 2] | 0;
    $116 = ($115 | 0) == 0;
    $117 = $116 & 1;
    $118 = $112 - $117 | 0;
    $119 = ($118 | 0) < ($3 | 0);
    if ($119) {
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $121 = ___gmpn_add($_, $105, $118, $_, $3) | 0;
    $un_1 = $118;
    $cy_0 = $121;
    label = 35;
    break;
   case 34:
    $123 = ___gmpn_add($_, $_, $3, $105, $118) | 0;
    $un_1 = $3;
    $cy_0 = $123;
    label = 35;
    break;
   case 35:
    $125 = $_ + ($un_1 << 2) | 0;
    HEAP32[$125 >> 2] = $cy_0;
    $126 = ($cy_0 | 0) != 0;
    $127 = $126 & 1;
    $128 = $127 + $un_1 | 0;
    HEAP32[$2 >> 2] = $128;
    label = 36;
    break;
   case 36:
    return;
  }
}
function ___gmpn_gcdext_lehmer_n($gp, $up, $usize, $ap, $bp, $n, $tp) {
  $gp = $gp | 0;
  $up = $up | 0;
  $usize = $usize | 0;
  $ap = $ap | 0;
  $bp = $bp | 0;
  $n = $n | 0;
  $tp = $tp | 0;
  var $ctx = 0, $M = 0, $u = 0, $v = 0, $1 = 0, $2 = 0, $3 = 0, $tp267 = 0, $4 = 0, $5 = 0, $7 = 0, $_sum = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $_sum180 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $_0177_ph230 = 0, $_0178_ph229 = 0, $_0179_ph228 = 0, $un_0_ph227 = 0, $u0_0_ph226 = 0, $u2_0_ph225 = 0, $20 = 0, $_0178213 = 0, $un_0212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $bl_0 = 0, $bh_0 = 0, $al_0 = 0, $ah_0 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $114 = 0, $116 = 0, $117 = 0, $119 = 0, $120 = 0, $_0177_ph224 = 0, $u0_0_ph219 = 0, $un_0_lcssa = 0, $121 = 0, $122 = 0, $125 = 0, $126 = 0, $129 = 0, $__gmp_i_0 = 0, $132 = 0, $133 = 0, $135 = 0, $136 = 0, $_sum186 = 0, $137 = 0, $138 = 0, $139 = 0, $not_ = 0, $141 = 0, $scevgep238 = 0, $142 = 0, $scevgep = 0, $indvars_iv239 = 0, $un_1 = 0, $144 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $scevgep240 = 0, $151 = 0, $153 = 0, $154 = 0, $155 = 0, $__n5_0 = 0, $__dst6_0 = 0, $u0_0_pn185 = 0, $__x_0 = 0, $__src_0 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $__dst6_1 = 0, $__x_1 = 0, $161 = 0, $indvars_iv = 0, $un_2 = 0, $162 = 0, $_sum183 = 0, $163 = 0, $164 = 0, $165 = 0, $scevgep235 = 0, $167 = 0, $169 = 0, $170 = 0, $_sum184 = 0, $171 = 0, $__n7_0 = 0, $__dst8_0 = 0, $__src9_0 = 0, $__x10_0 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $__dst8_1 = 0, $__x10_1 = 0, $storemerge = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $scevgep245 = 0, $indvars_iv246 = 0, $un_3 = 0, $185 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $scevgep247 = 0, $192 = 0, $194 = 0, $195 = 0, $196 = 0, $__n11_0 = 0, $__dst12_0 = 0, $u0_0_pn = 0, $__x14_0 = 0, $__src13_0 = 0, $197 = 0, $198 = 0, $199 = 0, $200 = 0, $__dst12_1 = 0, $__x14_1 = 0, $202 = 0, $204 = 0, $205 = 0, $206 = 0, $scevgep250 = 0, $indvars_iv251 = 0, $un_4 = 0, $208 = 0, $_sum182 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $scevgep252 = 0, $215 = 0, $217 = 0, $218 = 0, $219 = 0, $_sum181 = 0, $220 = 0, $__n15_0 = 0, $__dst16_0 = 0, $__src17_0 = 0, $__x18_0 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $__dst16_1 = 0, $__x18_1 = 0, $229 = 0, $231 = 0, $233 = 0, $negate_0 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $uadd$0 = 0, $uadd$1 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $247 = 0, $248 = 0, $un_5 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $254 = 0, $255 = 0, $256 = 0, $_0 = 0, label = 0, __stackBase__ = 0, $u0_0_ph226$phi = 0, $_0177_ph230$phi = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $ctx = __stackBase__ | 0;
    $M = __stackBase__ + 32 | 0;
    $u = __stackBase__ + 48 | 0;
    $v = __stackBase__ + 56 | 0;
    $1 = $n + 1 | 0;
    $2 = $1 * 3 & -1;
    $3 = ($2 | 0) == 0;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $tp267 = $tp;
    $4 = $n * 12 & -1;
    $5 = $4 + 12 | 0;
    _memset($tp267 | 0, 0, $5 | 0);
    label = 3;
    break;
   case 3:
    $7 = $tp + ($1 << 2) | 0;
    $_sum = $1 << 1;
    HEAP32[$7 >> 2] = 1;
    $8 = $ctx | 0;
    HEAP32[$8 >> 2] = $gp;
    $9 = $ctx + 8 | 0;
    HEAP32[$9 >> 2] = $up;
    $10 = $ctx + 12 | 0;
    HEAP32[$10 >> 2] = $usize;
    $11 = ($n | 0) > 1;
    if ($11) {
      label = 4;
      break;
    } else {
      $un_0_lcssa = 1;
      $u0_0_ph219 = $tp;
      $_0177_ph224 = $ap;
      label = 22;
      break;
    }
   case 4:
    $_sum180 = $_sum + $1 | 0;
    $12 = $tp + ($_sum180 << 2) | 0;
    $13 = $tp + ($_sum << 2) | 0;
    $14 = $ctx + 20 | 0;
    $15 = $ctx + 24 | 0;
    $16 = $ctx + 28 | 0;
    $17 = $ctx + 16 | 0;
    $18 = $ctx;
    $19 = $bp + 4 | 0;
    $u2_0_ph225 = $13;
    $u0_0_ph226 = $tp;
    $un_0_ph227 = 1;
    $_0179_ph228 = $12;
    $_0178_ph229 = $n;
    $_0177_ph230 = $ap;
    label = 5;
    break;
   case 5:
    $20 = $_0177_ph230 + 4 | 0;
    $un_0212 = $un_0_ph227;
    $_0178213 = $_0178_ph229;
    label = 6;
    break;
   case 6:
    $22 = $_0178213 - 1 | 0;
    $23 = $_0177_ph230 + ($22 << 2) | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $bp + ($22 << 2) | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = $26 | $24;
    $28 = ($27 | 0) < 0;
    if ($28) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $30 = $_0178213 - 2 | 0;
    $31 = $_0177_ph230 + ($30 << 2) | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    $33 = $bp + ($30 << 2) | 0;
    $34 = HEAP32[$33 >> 2] | 0;
    $ah_0 = $24;
    $al_0 = $32;
    $bh_0 = $26;
    $bl_0 = $34;
    label = 17;
    break;
   case 8:
    $36 = ($_0178213 | 0) == 2;
    $37 = $27 >>> 0 < 65536;
    if ($36) {
      label = 9;
      break;
    } else {
      label = 13;
      break;
    }
   case 9:
    if ($37) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $40 = $27 >>> 0 < 256;
    $41 = $40 ? 1 : 9;
    $46 = $41;
    label = 12;
    break;
   case 11:
    $43 = $27 >>> 0 < 16777216;
    $44 = $43 ? 17 : 25;
    $46 = $44;
    label = 12;
    break;
   case 12:
    $47 = 33 - $46 | 0;
    $48 = $27 >>> ($46 >>> 0);
    $49 = $48 + 9696 | 0;
    $50 = HEAP8[$49] | 0;
    $51 = $50 & 255;
    $52 = $47 - $51 | 0;
    $53 = HEAP32[$20 >> 2] | 0;
    $54 = $53 << $52;
    $55 = HEAP32[$_0177_ph230 >> 2] | 0;
    $56 = 32 - $52 | 0;
    $57 = $55 >>> ($56 >>> 0);
    $58 = $57 | $54;
    $59 = $55 << $52;
    $60 = HEAP32[$19 >> 2] | 0;
    $61 = $60 << $52;
    $62 = HEAP32[$bp >> 2] | 0;
    $63 = $62 >>> ($56 >>> 0);
    $64 = $63 | $61;
    $65 = $62 << $52;
    $ah_0 = $58;
    $al_0 = $59;
    $bh_0 = $64;
    $bl_0 = $65;
    label = 17;
    break;
   case 13:
    if ($37) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $68 = $27 >>> 0 < 256;
    $69 = $68 ? 1 : 9;
    $74 = $69;
    label = 16;
    break;
   case 15:
    $71 = $27 >>> 0 < 16777216;
    $72 = $71 ? 17 : 25;
    $74 = $72;
    label = 16;
    break;
   case 16:
    $75 = 33 - $74 | 0;
    $76 = $27 >>> ($74 >>> 0);
    $77 = $76 + 9696 | 0;
    $78 = HEAP8[$77] | 0;
    $79 = $78 & 255;
    $80 = $75 - $79 | 0;
    $81 = HEAP32[$23 >> 2] | 0;
    $82 = $81 << $80;
    $83 = $_0178213 - 2 | 0;
    $84 = $_0177_ph230 + ($83 << 2) | 0;
    $85 = HEAP32[$84 >> 2] | 0;
    $86 = 32 - $80 | 0;
    $87 = $85 >>> ($86 >>> 0);
    $88 = $87 | $82;
    $89 = $85 << $80;
    $90 = $_0178213 - 3 | 0;
    $91 = $_0177_ph230 + ($90 << 2) | 0;
    $92 = HEAP32[$91 >> 2] | 0;
    $93 = $92 >>> ($86 >>> 0);
    $94 = $93 | $89;
    $95 = HEAP32[$25 >> 2] | 0;
    $96 = $95 << $80;
    $97 = $bp + ($83 << 2) | 0;
    $98 = HEAP32[$97 >> 2] | 0;
    $99 = $98 >>> ($86 >>> 0);
    $100 = $99 | $96;
    $101 = $98 << $80;
    $102 = $bp + ($90 << 2) | 0;
    $103 = HEAP32[$102 >> 2] | 0;
    $104 = $103 >>> ($86 >>> 0);
    $105 = $104 | $101;
    $ah_0 = $88;
    $al_0 = $94;
    $bh_0 = $100;
    $bl_0 = $105;
    label = 17;
    break;
   case 17:
    $107 = ___gmpn_hgcd2($ah_0, $al_0, $bh_0, $bl_0, $M) | 0;
    $108 = ($107 | 0) == 0;
    if ($108) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $109 = ___gmpn_matrix22_mul1_inverse_vector($M, $_0179_ph228, $_0177_ph230, $bp, $_0178213) | 0;
    $110 = ___gmpn_hgcd_mul_matrix1_vector($M, $u2_0_ph225, $u0_0_ph226, $7, $un_0212) | 0;
    $111 = ($109 | 0) > 1;
    if ($111) {
      $u2_0_ph225 = $u0_0_ph226;
      $u0_0_ph226$phi = $u2_0_ph225;
      $_0179_ph228 = $_0177_ph230;
      $_0177_ph230$phi = $_0179_ph228;
      $un_0_ph227 = $110;
      $_0178_ph229 = $109;
      $_0177_ph230 = $_0177_ph230$phi;
      $u0_0_ph226 = $u0_0_ph226$phi;
      label = 5;
      break;
    } else {
      $un_0_lcssa = $110;
      $u0_0_ph219 = $u2_0_ph225;
      $_0177_ph224 = $_0179_ph228;
      label = 22;
      break;
    }
   case 19:
    HEAP32[$14 >> 2] = $u0_0_ph226;
    HEAP32[$15 >> 2] = $7;
    HEAP32[$16 >> 2] = $u2_0_ph225;
    HEAP32[$17 >> 2] = $un_0212;
    $113 = ___gmpn_gcd_subdiv_step($_0177_ph230, $bp, $_0178213, 0, 820, $18, $_0179_ph228) | 0;
    $114 = ($113 | 0) == 0;
    if ($114) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    $116 = $ctx + 4 | 0;
    $117 = HEAP32[$116 >> 2] | 0;
    $_0 = $117;
    label = 74;
    break;
   case 21:
    $119 = HEAP32[$17 >> 2] | 0;
    $120 = ($113 | 0) > 1;
    if ($120) {
      $un_0212 = $119;
      $_0178213 = $113;
      label = 6;
      break;
    } else {
      $un_0_lcssa = $119;
      $u0_0_ph219 = $u0_0_ph226;
      $_0177_ph224 = $_0177_ph230;
      label = 22;
      break;
    }
   case 22:
    $121 = HEAP32[$_0177_ph224 >> 2] | 0;
    $122 = ($121 | 0) == 0;
    if ($122) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    ___gmp_assert_fail(7056, 239, 8496);
    return 0;
   case 24:
    $125 = HEAP32[$bp >> 2] | 0;
    $126 = ($125 | 0) == 0;
    if ($126) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    ___gmp_assert_fail(7056, 240, 7104);
    return 0;
   case 26:
    $129 = ($121 | 0) == ($125 | 0);
    if ($129) {
      label = 27;
      break;
    } else {
      label = 47;
      break;
    }
   case 27:
    HEAP32[$gp >> 2] = $121;
    $__gmp_i_0 = $un_0_lcssa;
    label = 28;
    break;
   case 28:
    $132 = $__gmp_i_0 - 1 | 0;
    $133 = ($__gmp_i_0 | 0) > 0;
    if ($133) {
      label = 29;
      break;
    } else {
      label = 32;
      break;
    }
   case 29:
    $135 = $u0_0_ph219 + ($132 << 2) | 0;
    $136 = HEAP32[$135 >> 2] | 0;
    $_sum186 = $__gmp_i_0 + $n | 0;
    $137 = $tp + ($_sum186 << 2) | 0;
    $138 = HEAP32[$137 >> 2] | 0;
    $139 = ($136 | 0) == ($138 | 0);
    if ($139) {
      $__gmp_i_0 = $132;
      label = 28;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    $not_ = $136 >>> 0 > $138 >>> 0;
    if ($not_) {
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    $141 = $un_0_lcssa - 1 | 0;
    $scevgep238 = $up + ($141 << 2) | 0;
    $un_1 = $un_0_lcssa;
    $indvars_iv239 = $scevgep238;
    label = 33;
    break;
   case 32:
    $142 = $un_0_lcssa - 1 | 0;
    $scevgep = $up + ($142 << 2) | 0;
    $un_2 = $un_0_lcssa;
    $indvars_iv = $scevgep;
    label = 40;
    break;
   case 33:
    $144 = ($un_1 | 0) > 0;
    if ($144) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    $146 = $un_1 - 1 | 0;
    $147 = $u0_0_ph219 + ($146 << 2) | 0;
    $148 = HEAP32[$147 >> 2] | 0;
    $149 = ($148 | 0) == 0;
    $scevgep240 = $indvars_iv239 - 4 | 0;
    if ($149) {
      $un_1 = $146;
      $indvars_iv239 = $scevgep240;
      label = 33;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $151 = ($un_1 | 0) == 0;
    if ($151) {
      label = 39;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    $153 = $un_1 - 1 | 0;
    $154 = HEAP32[$u0_0_ph219 >> 2] | 0;
    $155 = ($153 | 0) == 0;
    if ($155) {
      $__x_1 = $154;
      $__dst6_1 = $up;
      label = 38;
      break;
    } else {
      $__x_0 = $154;
      $u0_0_pn185 = $u0_0_ph219;
      $__dst6_0 = $up;
      $__n5_0 = $153;
      label = 37;
      break;
    }
   case 37:
    $__src_0 = $u0_0_pn185 + 4 | 0;
    $156 = $__dst6_0 + 4 | 0;
    HEAP32[$__dst6_0 >> 2] = $__x_0;
    $157 = HEAP32[$__src_0 >> 2] | 0;
    $158 = $__n5_0 - 1 | 0;
    $159 = ($158 | 0) == 0;
    if ($159) {
      $__x_1 = $157;
      $__dst6_1 = $indvars_iv239;
      label = 38;
      break;
    } else {
      $__x_0 = $157;
      $u0_0_pn185 = $__src_0;
      $__dst6_0 = $156;
      $__n5_0 = $158;
      label = 37;
      break;
    }
   case 38:
    HEAP32[$__dst6_1 >> 2] = $__x_1;
    label = 39;
    break;
   case 39:
    $161 = -$un_1 | 0;
    $storemerge = $161;
    label = 46;
    break;
   case 40:
    $162 = $un_2 - 1 | 0;
    $_sum183 = $un_2 + $n | 0;
    $163 = $tp + ($_sum183 << 2) | 0;
    $164 = HEAP32[$163 >> 2] | 0;
    $165 = ($164 | 0) == 0;
    $scevgep235 = $indvars_iv - 4 | 0;
    if ($165) {
      $un_2 = $162;
      $indvars_iv = $scevgep235;
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $167 = ($un_2 | 0) == 0;
    if ($167) {
      $storemerge = 0;
      label = 46;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    $169 = HEAP32[$7 >> 2] | 0;
    $170 = ($162 | 0) == 0;
    if ($170) {
      $__x10_1 = $169;
      $__dst8_1 = $up;
      label = 45;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    $_sum184 = $n + 2 | 0;
    $171 = $tp + ($_sum184 << 2) | 0;
    $__x10_0 = $169;
    $__src9_0 = $171;
    $__dst8_0 = $up;
    $__n7_0 = $162;
    label = 44;
    break;
   case 44:
    $173 = $__dst8_0 + 4 | 0;
    HEAP32[$__dst8_0 >> 2] = $__x10_0;
    $174 = $__src9_0 + 4 | 0;
    $175 = HEAP32[$__src9_0 >> 2] | 0;
    $176 = $__n7_0 - 1 | 0;
    $177 = ($176 | 0) == 0;
    if ($177) {
      $__x10_1 = $175;
      $__dst8_1 = $indvars_iv;
      label = 45;
      break;
    } else {
      $__x10_0 = $175;
      $__src9_0 = $174;
      $__dst8_0 = $173;
      $__n7_0 = $176;
      label = 44;
      break;
    }
   case 45:
    HEAP32[$__dst8_1 >> 2] = $__x10_1;
    $storemerge = $un_2;
    label = 46;
    break;
   case 46:
    HEAP32[$usize >> 2] = $storemerge;
    $_0 = 1;
    label = 74;
    break;
   case 47:
    $180 = ___gmpn_gcdext_1($u, $v, $121, $125) | 0;
    HEAP32[$gp >> 2] = $180;
    $181 = HEAP32[$u >> 2] | 0;
    $182 = ($181 | 0) == 0;
    if ($182) {
      label = 48;
      break;
    } else {
      label = 56;
      break;
    }
   case 48:
    $183 = $un_0_lcssa - 1 | 0;
    $scevgep245 = $up + ($183 << 2) | 0;
    $un_3 = $un_0_lcssa;
    $indvars_iv246 = $scevgep245;
    label = 49;
    break;
   case 49:
    $185 = ($un_3 | 0) > 0;
    if ($185) {
      label = 50;
      break;
    } else {
      label = 51;
      break;
    }
   case 50:
    $187 = $un_3 - 1 | 0;
    $188 = $u0_0_ph219 + ($187 << 2) | 0;
    $189 = HEAP32[$188 >> 2] | 0;
    $190 = ($189 | 0) == 0;
    $scevgep247 = $indvars_iv246 - 4 | 0;
    if ($190) {
      $un_3 = $187;
      $indvars_iv246 = $scevgep247;
      label = 49;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    $192 = ($un_3 | 0) == 0;
    if ($192) {
      label = 55;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    $194 = $un_3 - 1 | 0;
    $195 = HEAP32[$u0_0_ph219 >> 2] | 0;
    $196 = ($194 | 0) == 0;
    if ($196) {
      $__x14_1 = $195;
      $__dst12_1 = $up;
      label = 54;
      break;
    } else {
      $__x14_0 = $195;
      $u0_0_pn = $u0_0_ph219;
      $__dst12_0 = $up;
      $__n11_0 = $194;
      label = 53;
      break;
    }
   case 53:
    $__src13_0 = $u0_0_pn + 4 | 0;
    $197 = $__dst12_0 + 4 | 0;
    HEAP32[$__dst12_0 >> 2] = $__x14_0;
    $198 = HEAP32[$__src13_0 >> 2] | 0;
    $199 = $__n11_0 - 1 | 0;
    $200 = ($199 | 0) == 0;
    if ($200) {
      $__x14_1 = $198;
      $__dst12_1 = $indvars_iv246;
      label = 54;
      break;
    } else {
      $__x14_0 = $198;
      $u0_0_pn = $__src13_0;
      $__dst12_0 = $197;
      $__n11_0 = $199;
      label = 53;
      break;
    }
   case 54:
    HEAP32[$__dst12_1 >> 2] = $__x14_1;
    label = 55;
    break;
   case 55:
    $202 = -$un_3 | 0;
    HEAP32[$usize >> 2] = $202;
    $_0 = 1;
    label = 74;
    break;
   case 56:
    $204 = HEAP32[$v >> 2] | 0;
    $205 = ($204 | 0) == 0;
    if ($205) {
      label = 57;
      break;
    } else {
      label = 66;
      break;
    }
   case 57:
    $206 = $un_0_lcssa - 1 | 0;
    $scevgep250 = $up + ($206 << 2) | 0;
    $un_4 = $un_0_lcssa;
    $indvars_iv251 = $scevgep250;
    label = 58;
    break;
   case 58:
    $208 = ($un_4 | 0) > 0;
    if ($208) {
      label = 59;
      break;
    } else {
      label = 60;
      break;
    }
   case 59:
    $_sum182 = $un_4 + $n | 0;
    $210 = $tp + ($_sum182 << 2) | 0;
    $211 = HEAP32[$210 >> 2] | 0;
    $212 = ($211 | 0) == 0;
    $213 = $un_4 - 1 | 0;
    $scevgep252 = $indvars_iv251 - 4 | 0;
    if ($212) {
      $un_4 = $213;
      $indvars_iv251 = $scevgep252;
      label = 58;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    $215 = ($un_4 | 0) == 0;
    if ($215) {
      label = 65;
      break;
    } else {
      label = 61;
      break;
    }
   case 61:
    $217 = $un_4 - 1 | 0;
    $218 = HEAP32[$7 >> 2] | 0;
    $219 = ($217 | 0) == 0;
    if ($219) {
      $__x18_1 = $218;
      $__dst16_1 = $up;
      label = 64;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    $_sum181 = $n + 2 | 0;
    $220 = $tp + ($_sum181 << 2) | 0;
    $__x18_0 = $218;
    $__src17_0 = $220;
    $__dst16_0 = $up;
    $__n15_0 = $217;
    label = 63;
    break;
   case 63:
    $222 = $__dst16_0 + 4 | 0;
    HEAP32[$__dst16_0 >> 2] = $__x18_0;
    $223 = $__src17_0 + 4 | 0;
    $224 = HEAP32[$__src17_0 >> 2] | 0;
    $225 = $__n15_0 - 1 | 0;
    $226 = ($225 | 0) == 0;
    if ($226) {
      $__x18_1 = $224;
      $__dst16_1 = $indvars_iv251;
      label = 64;
      break;
    } else {
      $__x18_0 = $224;
      $__src17_0 = $223;
      $__dst16_0 = $222;
      $__n15_0 = $225;
      label = 63;
      break;
    }
   case 64:
    HEAP32[$__dst16_1 >> 2] = $__x18_1;
    label = 65;
    break;
   case 65:
    HEAP32[$usize >> 2] = $un_4;
    $_0 = 1;
    label = 74;
    break;
   case 66:
    $229 = ($181 | 0) > 0;
    if ($229) {
      label = 67;
      break;
    } else {
      label = 68;
      break;
    }
   case 67:
    $231 = -$204 | 0;
    HEAP32[$v >> 2] = $231;
    $negate_0 = 0;
    label = 69;
    break;
   case 68:
    $233 = -$181 | 0;
    HEAP32[$u >> 2] = $233;
    $negate_0 = 1;
    label = 69;
    break;
   case 69:
    $235 = HEAP32[$u >> 2] | 0;
    $236 = ___gmpn_mul_1($up, $7, $un_0_lcssa, $235) | 0;
    $237 = HEAP32[$v >> 2] | 0;
    $238 = ___gmpn_addmul_1($up, $u0_0_ph219, $un_0_lcssa, $237) | 0;
    $239 = $238 | $236;
    $240 = ($239 | 0) == 0;
    if ($240) {
      $un_5 = $un_0_lcssa;
      label = 72;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    $uadd$0 = _llvm_uadd_with_overflow_i32($236 | 0, $238 | 0) | 0;
    $uadd$1 = tempRet0;
    $242 = $uadd$0;
    $243 = $un_0_lcssa + 1 | 0;
    $244 = $up + ($un_0_lcssa << 2) | 0;
    HEAP32[$244 >> 2] = $242;
    $245 = $uadd$1;
    if ($245) {
      label = 71;
      break;
    } else {
      $un_5 = $243;
      label = 72;
      break;
    }
   case 71:
    $247 = $un_0_lcssa + 2 | 0;
    $248 = $up + ($243 << 2) | 0;
    HEAP32[$248 >> 2] = 1;
    $un_5 = $247;
    label = 72;
    break;
   case 72:
    $249 = $un_5 - 1 | 0;
    $250 = $up + ($249 << 2) | 0;
    $251 = HEAP32[$250 >> 2] | 0;
    $252 = ($251 | 0) == 0;
    if ($252) {
      $un_5 = $249;
      label = 72;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    $254 = ($negate_0 | 0) != 0;
    $255 = -$un_5 | 0;
    $256 = $254 ? $255 : $un_5;
    HEAP32[$usize >> 2] = $256;
    $_0 = 1;
    label = 74;
    break;
   case 74:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_tdiv_qr($qp, $rp, $qxn, $np, $nn, $dp, $dn) {
  $qp = $qp | 0;
  $rp = $rp | 0;
  $qxn = $qxn | 0;
  $np = $np | 0;
  $nn = $nn | 0;
  $dp = $dp | 0;
  $dn = $dn | 0;
  var $__tmp_marker = 0, $dtmp = 0, $dinv = 0, $__tmp_marker1 = 0, $1 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $73 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $scevgep707 = 0, $__x_0 = 0, $np_pn = 0, $__dst_0 = 0, $__n_0 = 0, $__src_0 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $scevgep707708 = 0, $__x_1 = 0, $__dst_1 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $102 = 0, $103 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $120 = 0, $121 = 0, $123 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $161 = 0, $162 = 0, $163 = 0, $165 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $scevgep704 = 0, $__x11_0 = 0, $np_pn636 = 0, $__dst9_0 = 0, $__n8_0 = 0, $__src10_0 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $scevgep704705 = 0, $__x11_1 = 0, $__dst9_1 = 0, $184 = 0, $cnt5_0 = 0, $d2p3_0 = 0, $n2p2_0 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $199 = 0, $uadd635$0 = 0, $uadd635$1 = 0, $200 = 0, $201 = 0, $_not = 0, $202 = 0, $or_cond = 0, $204 = 0, $205 = 0, $__r1_0 = 0, $__q1_0 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $216 = 0, $uadd634$0 = 0, $uadd634$1 = 0, $217 = 0, $_not637 = 0, $218 = 0, $219 = 0, $or_cond639 = 0, $__v = 0, $_ = 0, $__q0_0 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $uadd631$0 = 0, $uadd631$1 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $_p_0 = 0, $_v_0 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $uadd632$0 = 0, $uadd632$1 = 0, $251 = 0, $252 = 0, $253 = 0, $__x3_0 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $uadd633$0 = 0, $uadd633$1 = 0, $259 = 0, $260 = 0, $262 = 0, $263 = 0, $264 = 0, $266 = 0, $267 = 0, $or_cond651 = 0, $268 = 0, $_653 = 0, $_v_1 = 0, $270 = 0, $271 = 0, $273 = 0, $275 = 0, $276 = 0, $or_cond640 = 0, $278 = 0.0, $279 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $286 = 0, $288 = 0, $289 = 0, $290 = 0, $292 = 0, $294 = 0, $296 = 0, $297 = 0, $298 = 0, $n2p2_1 = 0, $300 = 0, $302 = 0, $304 = 0, $306 = 0, $307 = 0, $308 = 0, $__x15_0 = 0, $n2p2_1_pn = 0, $__dst13_0 = 0, $__n12_0 = 0, $__src14_0 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $scevgep702 = 0, $__x15_1 = 0, $__dst13_1 = 0, $316 = 0, $317 = 0, $320 = 0, $321 = 0, $323 = 0, $325 = 0, $326 = 0, $327 = 0, $__n20_0 = 0, $__dst21_0 = 0, $np_pn630 = 0, $__x23_0 = 0, $__src22_0 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $scevgep = 0, $__dst21_1 = 0, $__x23_1 = 0, $335 = 0, $336 = 0, $339 = 0, $340 = 0, $341 = 0, $343 = 0, $345 = 0, $346 = 0, $348 = 0, $349 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $361 = 0, $363 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $381 = 0, $383 = 0, $385 = 0, $386 = 0, $_sum629 = 0, $387 = 0, $388 = 0, $390 = 0, $391 = 0, $392 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $400 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $408 = 0, $410 = 0, $412 = 0, $413 = 0, $414 = 0, $416 = 0, $_sum = 0, $417 = 0, $_sum628 = 0, $418 = 0, $419 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $scevgep699 = 0, $__n26_0 = 0, $__dst27_0 = 0, $__src28_0 = 0, $__x29_0 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $scevgep699700 = 0, $434 = 0, $435 = 0, $436 = 0, $cnt19_0 = 0, $d2p17_0 = 0, $n2p16_0 = 0, $439 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $454 = 0, $uadd627$0 = 0, $uadd627$1 = 0, $455 = 0, $456 = 0, $_not641 = 0, $457 = 0, $or_cond642 = 0, $459 = 0, $460 = 0, $__q132_0 = 0, $__r134_0 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $473 = 0, $474 = 0, $uadd626$0 = 0, $uadd626$1 = 0, $475 = 0, $476 = 0, $_not643 = 0, $477 = 0, $or_cond644 = 0, $479 = 0, $480 = 0, $__q033_0 = 0, $__r035_0 = 0, $482 = 0, $483 = 0, $484 = 0, $486 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $500 = 0, $502 = 0, $uadd625$0 = 0, $uadd625$1 = 0, $503 = 0, $504 = 0, $_not645 = 0, $505 = 0, $or_cond646 = 0, $507 = 0, $508 = 0, $__q145_0 = 0, $__r147_0 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $519 = 0, $uadd624$0 = 0, $uadd624$1 = 0, $520 = 0, $_not647 = 0, $521 = 0, $522 = 0, $or_cond649 = 0, $_650_v = 0, $_650 = 0, $__q046_0 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $uadd$0 = 0, $uadd$1 = 0, $531 = 0, $532 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $540 = 0, $541 = 0, $_v37_0 = 0, $_p38_0 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $uadd620$0 = 0, $uadd620$1 = 0, $554 = 0, $555 = 0, $556 = 0, $__x353_0 = 0, $557 = 0, $558 = 0, $559 = 0, $560 = 0, $561 = 0, $uadd621$0 = 0, $uadd621$1 = 0, $562 = 0, $563 = 0, $565 = 0, $566 = 0, $567 = 0, $569 = 0, $570 = 0, $or_cond652 = 0, $571 = 0, $_654 = 0, $_v37_1 = 0, $573 = 0, $574 = 0, $576 = 0, $577 = 0, $579 = 0, $580 = 0, $582 = 0, $584 = 0, $585 = 0, $586 = 0, $588 = 0, $590 = 0, $592 = 0, $593 = 0, $594 = 0, $596 = 0, $597 = 0, $r2p_0 = 0, $599 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $__n62_0 = 0, $__dst63_0 = 0, $r2p_0_pn = 0, $__x65_0 = 0, $__src64_0 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $scevgep697 = 0, $__dst63_1 = 0, $__x65_1 = 0, $614 = 0, $615 = 0, $617 = 0, $618 = 0, $phitmp = 0, $dl_0 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $640 = 0, $uadd622$0 = 0, $uadd622$1 = 0, $641 = 0, $642 = 0, $643 = 0, $__x369_0 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $__p_0 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $654 = 0, $655 = 0, $657 = 0, $658 = 0, $rn_0 = 0, $660 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $675 = 0, $676 = 0, $677 = 0, $680 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $quotient_too_large_1 = 0, $rn_2 = 0, $in_0 = 0, $688 = 0, $689 = 0, $691 = 0, $693 = 0, $695 = 0, $696 = 0, $697 = 0, $699 = 0, $701 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $__n78_0 = 0, $__dst79_0 = 0, $n2p16_0_pn623 = 0, $__x81_0 = 0, $__src80_0 = 0, $708 = 0, $709 = 0, $710 = 0, $711 = 0, $scevgep693 = 0, $__dst79_1 = 0, $__x81_1 = 0, $714 = 0, $717 = 0, $719 = 0, $721 = 0, $722 = 0, $723 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $__n82_0 = 0, $__dst83_0 = 0, $n2p16_0_pn = 0, $__x85_0 = 0, $__src84_0 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $scevgep695 = 0, $__dst83_1 = 0, $__x85_1 = 0, $738 = 0, $739 = 0, $740 = 0, $741 = 0, $742 = 0, $quotient_too_large_2 = 0, $744 = 0, $__p87_0 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $750 = 0, $752 = 0, $753 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    $dtmp = __stackBase__ + 8 | 0;
    $dinv = __stackBase__ + 16 | 0;
    $__tmp_marker1 = __stackBase__ + 24 | 0;
    $1 = ($qxn | 0) == 0;
    if ($1) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    ___gmp_assert_fail(7016, 40, 8424);
   case 3:
    if (($dn | 0) == 0) {
      label = 4;
      break;
    } else if (($dn | 0) == 1) {
      label = 5;
      break;
    } else if (($dn | 0) == 2) {
      label = 6;
      break;
    } else {
      label = 28;
      break;
    }
   case 4:
    ___gmp_divide_by_zero();
   case 5:
    $6 = HEAP32[$dp >> 2] | 0;
    $7 = ___gmpn_divrem_1($qp, 0, $np, $nn, $6) | 0;
    HEAP32[$rp >> 2] = $7;
    label = 183;
    break;
   case 6:
    HEAP32[$__tmp_marker >> 2] = 0;
    $9 = $dp + 4 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = ($10 | 0) > -1;
    if ($11) {
      label = 7;
      break;
    } else {
      label = 16;
      break;
    }
   case 7:
    $13 = $10 >>> 0 < 65536;
    if ($13) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $15 = $10 >>> 0 < 256;
    $16 = $15 ? 1 : 9;
    $21 = $16;
    label = 10;
    break;
   case 9:
    $18 = $10 >>> 0 < 16777216;
    $19 = $18 ? 17 : 25;
    $21 = $19;
    label = 10;
    break;
   case 10:
    $22 = 33 - $21 | 0;
    $23 = $10 >>> ($21 >>> 0);
    $24 = $23 + 9696 | 0;
    $25 = HEAP8[$24] | 0;
    $26 = $25 & 255;
    $27 = $22 - $26 | 0;
    $28 = $dtmp | 0;
    $29 = HEAP32[$9 >> 2] | 0;
    $30 = $29 << $27;
    $31 = HEAP32[$dp >> 2] | 0;
    $32 = 32 - $27 | 0;
    $33 = $31 >>> ($32 >>> 0);
    $34 = $33 | $30;
    $35 = $dtmp + 4 | 0;
    HEAP32[$35 >> 2] = $34;
    $36 = HEAP32[$dp >> 2] | 0;
    $37 = $36 << $27;
    HEAP32[$28 >> 2] = $37;
    $38 = $nn << 2;
    $39 = $38 + 4 | 0;
    $40 = $39 >>> 0 < 65536;
    if ($40) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $42 = STACKTOP;
    STACKTOP = STACKTOP + $39 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $46 = $42;
    label = 13;
    break;
   case 12:
    $44 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $39) | 0;
    $46 = $44;
    label = 13;
    break;
   case 13:
    $47 = $46;
    $48 = ___gmpn_lshift($47, $np, $nn, $27) | 0;
    $49 = $47 + ($nn << 2) | 0;
    HEAP32[$49 >> 2] = $48;
    $50 = ($48 | 0) != 0;
    $51 = $50 & 1;
    $52 = $51 + $nn | 0;
    $53 = ___gmpn_divrem_2($qp, 0, $47, $52, $28) | 0;
    $54 = ($48 | 0) == 0;
    if ($54) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $56 = $nn - 2 | 0;
    $57 = $qp + ($56 << 2) | 0;
    HEAP32[$57 >> 2] = $53;
    label = 15;
    break;
   case 15:
    $59 = HEAP32[$47 >> 2] | 0;
    $60 = $59 >>> ($27 >>> 0);
    $61 = $46 + 4 | 0;
    $62 = $61;
    $63 = HEAP32[$62 >> 2] | 0;
    $64 = $63 << $32;
    $65 = $64 | $60;
    HEAP32[$rp >> 2] = $65;
    $66 = HEAP32[$62 >> 2] | 0;
    $67 = $66 >>> ($27 >>> 0);
    $68 = $rp + 4 | 0;
    HEAP32[$68 >> 2] = $67;
    label = 26;
    break;
   case 16:
    $70 = $nn << 2;
    $71 = $70 >>> 0 < 65536;
    if ($71) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $73 = STACKTOP;
    STACKTOP = STACKTOP + $70 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $77 = $73;
    label = 19;
    break;
   case 18:
    $75 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $70) | 0;
    $77 = $75;
    label = 19;
    break;
   case 19:
    $78 = $77;
    $79 = ($nn | 0) == 0;
    if ($79) {
      label = 25;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $81 = $nn - 1 | 0;
    $82 = HEAP32[$np >> 2] | 0;
    $83 = ($81 | 0) == 0;
    if ($83) {
      $__dst_1 = $78;
      $__x_1 = $82;
      label = 24;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $84 = $nn << 2;
    $85 = $84 - 4 | 0;
    $scevgep707 = $77 + $85 | 0;
    $__n_0 = $81;
    $__dst_0 = $78;
    $np_pn = $np;
    $__x_0 = $82;
    label = 22;
    break;
   case 22:
    $__src_0 = $np_pn + 4 | 0;
    $87 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $88 = HEAP32[$__src_0 >> 2] | 0;
    $89 = $__n_0 - 1 | 0;
    $90 = ($89 | 0) == 0;
    if ($90) {
      label = 23;
      break;
    } else {
      $__n_0 = $89;
      $__dst_0 = $87;
      $np_pn = $__src_0;
      $__x_0 = $88;
      label = 22;
      break;
    }
   case 23:
    $scevgep707708 = $scevgep707;
    $__dst_1 = $scevgep707708;
    $__x_1 = $88;
    label = 24;
    break;
   case 24:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 25;
    break;
   case 25:
    $93 = ___gmpn_divrem_2($qp, 0, $78, $nn, $dp) | 0;
    $94 = $nn - 2 | 0;
    $95 = $qp + ($94 << 2) | 0;
    HEAP32[$95 >> 2] = $93;
    $96 = HEAP32[$78 >> 2] | 0;
    HEAP32[$rp >> 2] = $96;
    $97 = $77 + 4 | 0;
    $98 = $97;
    $99 = HEAP32[$98 >> 2] | 0;
    $100 = $rp + 4 | 0;
    HEAP32[$100 >> 2] = $99;
    label = 26;
    break;
   case 26:
    $102 = HEAP32[$__tmp_marker >> 2] | 0;
    $103 = ($102 | 0) == 0;
    if ($103) {
      label = 183;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    ___gmp_tmp_reentrant_free($102);
    label = 183;
    break;
   case 28:
    HEAP32[$__tmp_marker1 >> 2] = 0;
    $106 = $nn - 1 | 0;
    $107 = $np + ($106 << 2) | 0;
    $108 = HEAP32[$107 >> 2] | 0;
    $109 = $dn - 1 | 0;
    $110 = $dp + ($109 << 2) | 0;
    $111 = HEAP32[$110 >> 2] | 0;
    $112 = $108 >>> 0 >= $111 >>> 0;
    $113 = $112 & 1;
    $114 = $113 + $nn | 0;
    $115 = $dn << 1;
    $116 = ($114 | 0) < ($115 | 0);
    $117 = $nn - $dn | 0;
    $118 = $qp + ($117 << 2) | 0;
    HEAP32[$118 >> 2] = 0;
    if ($116) {
      label = 79;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $120 = HEAP32[$110 >> 2] | 0;
    $121 = ($120 | 0) > -1;
    if ($121) {
      label = 30;
      break;
    } else {
      label = 40;
      break;
    }
   case 30:
    $123 = $120 >>> 0 < 65536;
    if ($123) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    $125 = $120 >>> 0 < 256;
    $126 = $125 ? 1 : 9;
    $131 = $126;
    label = 33;
    break;
   case 32:
    $128 = $120 >>> 0 < 16777216;
    $129 = $128 ? 17 : 25;
    $131 = $129;
    label = 33;
    break;
   case 33:
    $132 = 33 - $131 | 0;
    $133 = $120 >>> ($131 >>> 0);
    $134 = $133 + 9696 | 0;
    $135 = HEAP8[$134] | 0;
    $136 = $135 & 255;
    $137 = $132 - $136 | 0;
    $138 = $dn << 2;
    $139 = $138 >>> 0 < 65536;
    if ($139) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    $141 = STACKTOP;
    STACKTOP = STACKTOP + $138 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $145 = $141;
    label = 36;
    break;
   case 35:
    $143 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $138) | 0;
    $145 = $143;
    label = 36;
    break;
   case 36:
    $146 = $145;
    $147 = ___gmpn_lshift($146, $dp, $dn, $137) | 0;
    $148 = $nn << 2;
    $149 = $148 + 4 | 0;
    $150 = $149 >>> 0 < 65536;
    if ($150) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    $152 = STACKTOP;
    STACKTOP = STACKTOP + $149 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $156 = $152;
    label = 39;
    break;
   case 38:
    $154 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $149) | 0;
    $156 = $154;
    label = 39;
    break;
   case 39:
    $157 = $156;
    $158 = ___gmpn_lshift($157, $np, $nn, $137) | 0;
    $159 = $157 + ($nn << 2) | 0;
    HEAP32[$159 >> 2] = $158;
    $n2p2_0 = $157;
    $d2p3_0 = $146;
    $cnt5_0 = $137;
    label = 50;
    break;
   case 40:
    $161 = $nn << 2;
    $162 = $161 + 4 | 0;
    $163 = $162 >>> 0 < 65536;
    if ($163) {
      label = 41;
      break;
    } else {
      label = 42;
      break;
    }
   case 41:
    $165 = STACKTOP;
    STACKTOP = STACKTOP + $162 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $169 = $165;
    label = 43;
    break;
   case 42:
    $167 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $162) | 0;
    $169 = $167;
    label = 43;
    break;
   case 43:
    $170 = $169;
    $171 = ($nn | 0) == 0;
    if ($171) {
      label = 49;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    $173 = HEAP32[$np >> 2] | 0;
    $174 = ($106 | 0) == 0;
    if ($174) {
      $__dst9_1 = $170;
      $__x11_1 = $173;
      label = 48;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    $175 = $nn << 2;
    $176 = $175 - 4 | 0;
    $scevgep704 = $169 + $176 | 0;
    $__n8_0 = $106;
    $__dst9_0 = $170;
    $np_pn636 = $np;
    $__x11_0 = $173;
    label = 46;
    break;
   case 46:
    $__src10_0 = $np_pn636 + 4 | 0;
    $178 = $__dst9_0 + 4 | 0;
    HEAP32[$__dst9_0 >> 2] = $__x11_0;
    $179 = HEAP32[$__src10_0 >> 2] | 0;
    $180 = $__n8_0 - 1 | 0;
    $181 = ($180 | 0) == 0;
    if ($181) {
      label = 47;
      break;
    } else {
      $__n8_0 = $180;
      $__dst9_0 = $178;
      $np_pn636 = $__src10_0;
      $__x11_0 = $179;
      label = 46;
      break;
    }
   case 47:
    $scevgep704705 = $scevgep704;
    $__dst9_1 = $scevgep704705;
    $__x11_1 = $179;
    label = 48;
    break;
   case 48:
    HEAP32[$__dst9_1 >> 2] = $__x11_1;
    label = 49;
    break;
   case 49:
    $184 = $170 + ($nn << 2) | 0;
    HEAP32[$184 >> 2] = 0;
    $n2p2_0 = $170;
    $d2p3_0 = $dp;
    $cnt5_0 = 0;
    label = 50;
    break;
   case 50:
    $186 = $d2p3_0 + ($109 << 2) | 0;
    $187 = HEAP32[$186 >> 2] | 0;
    $188 = $187 >>> 16;
    $189 = $187 & 65535;
    $190 = $187 ^ -1;
    $191 = ($190 >>> 0) / ($188 >>> 0) >>> 0;
    $192 = Math_imul($191, $188);
    $193 = $190 - $192 | 0;
    $194 = Math_imul($191, $189);
    $195 = $193 << 16;
    $196 = $195 | 65535;
    $197 = $196 >>> 0 < $194 >>> 0;
    if ($197) {
      label = 51;
      break;
    } else {
      $__q1_0 = $191;
      $__r1_0 = $196;
      label = 53;
      break;
    }
   case 51:
    $199 = $191 - 1 | 0;
    $uadd635$0 = _llvm_uadd_with_overflow_i32($196 | 0, $187 | 0) | 0;
    $uadd635$1 = tempRet0;
    $200 = $uadd635$0;
    $201 = $uadd635$1;
    $_not = $201 ^ 1;
    $202 = $200 >>> 0 < $194 >>> 0;
    $or_cond = $202 & $_not;
    if ($or_cond) {
      label = 52;
      break;
    } else {
      $__q1_0 = $199;
      $__r1_0 = $200;
      label = 53;
      break;
    }
   case 52:
    $204 = $191 - 2 | 0;
    $205 = $200 + $187 | 0;
    $__q1_0 = $204;
    $__r1_0 = $205;
    label = 53;
    break;
   case 53:
    $207 = $__r1_0 - $194 | 0;
    $208 = ($207 >>> 0) / ($188 >>> 0) >>> 0;
    $209 = Math_imul($208, $188);
    $210 = $207 - $209 | 0;
    $211 = Math_imul($208, $189);
    $212 = $210 << 16;
    $213 = $212 | 65535;
    $214 = $213 >>> 0 < $211 >>> 0;
    if ($214) {
      label = 54;
      break;
    } else {
      $__q0_0 = $208;
      label = 55;
      break;
    }
   case 54:
    $216 = HEAP32[$186 >> 2] | 0;
    $uadd634$0 = _llvm_uadd_with_overflow_i32($213 | 0, $216 | 0) | 0;
    $uadd634$1 = tempRet0;
    $217 = $uadd634$1;
    $_not637 = $217 ^ 1;
    $218 = $uadd634$0;
    $219 = $218 >>> 0 < $211 >>> 0;
    $or_cond639 = $219 & $_not637;
    $__v = $or_cond639 ? -2 : -1;
    $_ = $__v + $208 | 0;
    $__q0_0 = $_;
    label = 55;
    break;
   case 55:
    $221 = $__q1_0 << 16;
    $222 = $__q0_0 | $221;
    $223 = HEAP32[$186 >> 2] | 0;
    $224 = Math_imul($223, $222);
    $225 = $dn - 2 | 0;
    $226 = $d2p3_0 + ($225 << 2) | 0;
    $227 = HEAP32[$226 >> 2] | 0;
    $uadd631$0 = _llvm_uadd_with_overflow_i32($224 | 0, $227 | 0) | 0;
    $uadd631$1 = tempRet0;
    $228 = $uadd631$0;
    $229 = $uadd631$1;
    if ($229) {
      label = 56;
      break;
    } else {
      $_v_0 = $222;
      $_p_0 = $228;
      label = 57;
      break;
    }
   case 56:
    $231 = $222 - 1 | 0;
    $232 = $228 >>> 0 >= $223 >>> 0;
    $233 = $232 & 1;
    $234 = -$233 | 0;
    $235 = $228 - $223 | 0;
    $236 = $231 - $233 | 0;
    $237 = $223 & $234;
    $238 = $235 - $237 | 0;
    $_v_0 = $236;
    $_p_0 = $238;
    label = 57;
    break;
   case 57:
    $240 = HEAP32[$226 >> 2] | 0;
    $241 = $240 & 65535;
    $242 = $240 >>> 16;
    $243 = $_v_0 & 65535;
    $244 = $_v_0 >>> 16;
    $245 = Math_imul($241, $243);
    $246 = Math_imul($241, $244);
    $247 = Math_imul($242, $243);
    $248 = Math_imul($242, $244);
    $249 = $245 >>> 16;
    $250 = $249 + $246 | 0;
    $uadd632$0 = _llvm_uadd_with_overflow_i32($250 | 0, $247 | 0) | 0;
    $uadd632$1 = tempRet0;
    $251 = $uadd632$0;
    $252 = $uadd632$1;
    $253 = $248 + 65536 | 0;
    $__x3_0 = $252 ? $253 : $248;
    $254 = $251 >>> 16;
    $255 = $__x3_0 + $254 | 0;
    $256 = $251 << 16;
    $257 = $245 & 65535;
    $258 = $256 | $257;
    $uadd633$0 = _llvm_uadd_with_overflow_i32($_p_0 | 0, $255 | 0) | 0;
    $uadd633$1 = tempRet0;
    $259 = $uadd633$0;
    $260 = $uadd633$1;
    if ($260) {
      label = 58;
      break;
    } else {
      $_v_1 = $_v_0;
      label = 60;
      break;
    }
   case 58:
    $262 = $_v_0 - 1 | 0;
    $263 = HEAP32[$186 >> 2] | 0;
    $264 = $259 >>> 0 < $263 >>> 0;
    if ($264) {
      $_v_1 = $262;
      label = 60;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    $266 = $259 >>> 0 <= $263 >>> 0;
    $267 = $258 >>> 0 < $240 >>> 0;
    $or_cond651 = $266 & $267;
    $268 = $_v_0 - 2 | 0;
    $_653 = $or_cond651 ? $262 : $268;
    $_v_1 = $_653;
    label = 60;
    break;
   case 60:
    $270 = $dinv | 0;
    HEAP32[$270 >> 2] = $_v_1;
    $271 = ($dn | 0) > 49;
    if ($271) {
      label = 62;
      break;
    } else {
      label = 61;
      break;
    }
   case 61:
    $273 = ___gmpn_sbpi1_div_qr($qp, $n2p2_0, $114, $d2p3_0, $dn, $_v_1) | 0;
    $n2p2_1 = $n2p2_0;
    label = 69;
    break;
   case 62:
    $275 = ($dn | 0) > 199;
    $276 = ($114 | 0) > 3999;
    $or_cond640 = $275 & $276;
    if ($or_cond640) {
      label = 63;
      break;
    } else {
      label = 64;
      break;
    }
   case 63:
    $278 = +($dn | 0);
    $279 = $278 * 3600.0;
    $280 = +($114 | 0);
    $281 = $280 * 200.0;
    $282 = $279 + $281;
    $283 = $278 * $280;
    $284 = $282 > $283;
    if ($284) {
      label = 64;
      break;
    } else {
      label = 65;
      break;
    }
   case 64:
    $286 = ___gmpn_dcpi1_div_qr($qp, $n2p2_0, $114, $d2p3_0, $dn, $dinv) | 0;
    $n2p2_1 = $n2p2_0;
    label = 69;
    break;
   case 65:
    $288 = ___gmpn_mu_div_qr_itch($114, $dn, 0) | 0;
    $289 = $288 << 2;
    $290 = $289 >>> 0 < 65536;
    if ($290) {
      label = 66;
      break;
    } else {
      label = 67;
      break;
    }
   case 66:
    $292 = STACKTOP;
    STACKTOP = STACKTOP + $289 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $296 = $292;
    label = 68;
    break;
   case 67:
    $294 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $289) | 0;
    $296 = $294;
    label = 68;
    break;
   case 68:
    $297 = $296;
    $298 = ___gmpn_mu_div_qr($qp, $rp, $n2p2_0, $114, $d2p3_0, $dn, $297) | 0;
    $n2p2_1 = $rp;
    label = 69;
    break;
   case 69:
    $300 = ($cnt5_0 | 0) == 0;
    if ($300) {
      label = 71;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    $302 = ___gmpn_rshift($rp, $n2p2_1, $dn, $cnt5_0) | 0;
    label = 77;
    break;
   case 71:
    $304 = ($dn | 0) == 0;
    if ($304) {
      label = 77;
      break;
    } else {
      label = 72;
      break;
    }
   case 72:
    $306 = HEAP32[$n2p2_1 >> 2] | 0;
    $307 = ($109 | 0) == 0;
    if ($307) {
      $__dst13_1 = $rp;
      $__x15_1 = $306;
      label = 76;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    $308 = $dn - 1 | 0;
    $__n12_0 = $109;
    $__dst13_0 = $rp;
    $n2p2_1_pn = $n2p2_1;
    $__x15_0 = $306;
    label = 74;
    break;
   case 74:
    $__src14_0 = $n2p2_1_pn + 4 | 0;
    $310 = $__dst13_0 + 4 | 0;
    HEAP32[$__dst13_0 >> 2] = $__x15_0;
    $311 = HEAP32[$__src14_0 >> 2] | 0;
    $312 = $__n12_0 - 1 | 0;
    $313 = ($312 | 0) == 0;
    if ($313) {
      label = 75;
      break;
    } else {
      $__n12_0 = $312;
      $__dst13_0 = $310;
      $n2p2_1_pn = $__src14_0;
      $__x15_0 = $311;
      label = 74;
      break;
    }
   case 75:
    $scevgep702 = $rp + ($308 << 2) | 0;
    $__dst13_1 = $scevgep702;
    $__x15_1 = $311;
    label = 76;
    break;
   case 76:
    HEAP32[$__dst13_1 >> 2] = $__x15_1;
    label = 77;
    break;
   case 77:
    $316 = HEAP32[$__tmp_marker1 >> 2] | 0;
    $317 = ($316 | 0) == 0;
    if ($317) {
      label = 183;
      break;
    } else {
      label = 78;
      break;
    }
   case 78:
    ___gmp_tmp_reentrant_free($316);
    label = 183;
    break;
   case 79:
    $320 = $113 + $117 | 0;
    $321 = ($320 | 0) == 0;
    if ($321) {
      label = 80;
      break;
    } else {
      label = 88;
      break;
    }
   case 80:
    $323 = ($dn | 0) == 0;
    if ($323) {
      label = 86;
      break;
    } else {
      label = 81;
      break;
    }
   case 81:
    $325 = HEAP32[$np >> 2] | 0;
    $326 = ($109 | 0) == 0;
    if ($326) {
      $__x23_1 = $325;
      $__dst21_1 = $rp;
      label = 85;
      break;
    } else {
      label = 82;
      break;
    }
   case 82:
    $327 = $dn - 1 | 0;
    $__x23_0 = $325;
    $np_pn630 = $np;
    $__dst21_0 = $rp;
    $__n20_0 = $109;
    label = 83;
    break;
   case 83:
    $__src22_0 = $np_pn630 + 4 | 0;
    $329 = $__dst21_0 + 4 | 0;
    HEAP32[$__dst21_0 >> 2] = $__x23_0;
    $330 = HEAP32[$__src22_0 >> 2] | 0;
    $331 = $__n20_0 - 1 | 0;
    $332 = ($331 | 0) == 0;
    if ($332) {
      label = 84;
      break;
    } else {
      $__x23_0 = $330;
      $np_pn630 = $__src22_0;
      $__dst21_0 = $329;
      $__n20_0 = $331;
      label = 83;
      break;
    }
   case 84:
    $scevgep = $rp + ($327 << 2) | 0;
    $__x23_1 = $330;
    $__dst21_1 = $scevgep;
    label = 85;
    break;
   case 85:
    HEAP32[$__dst21_1 >> 2] = $__x23_1;
    label = 86;
    break;
   case 86:
    $335 = HEAP32[$__tmp_marker1 >> 2] | 0;
    $336 = ($335 | 0) == 0;
    if ($336) {
      label = 183;
      break;
    } else {
      label = 87;
      break;
    }
   case 87:
    ___gmp_tmp_reentrant_free($335);
    label = 183;
    break;
   case 88:
    $339 = $dn - $320 | 0;
    $340 = HEAP32[$110 >> 2] | 0;
    $341 = ($340 | 0) > -1;
    if ($341) {
      label = 89;
      break;
    } else {
      label = 101;
      break;
    }
   case 89:
    $343 = $340 >>> 0 < 65536;
    if ($343) {
      label = 90;
      break;
    } else {
      label = 91;
      break;
    }
   case 90:
    $345 = $340 >>> 0 < 256;
    $346 = $345 ? 1 : 9;
    $351 = $346;
    label = 92;
    break;
   case 91:
    $348 = $340 >>> 0 < 16777216;
    $349 = $348 ? 17 : 25;
    $351 = $349;
    label = 92;
    break;
   case 92:
    $352 = 33 - $351 | 0;
    $353 = $340 >>> ($351 >>> 0);
    $354 = $353 + 9696 | 0;
    $355 = HEAP8[$354] | 0;
    $356 = $355 & 255;
    $357 = $352 - $356 | 0;
    $358 = $320 << 2;
    $359 = $358 >>> 0 < 65536;
    if ($359) {
      label = 93;
      break;
    } else {
      label = 94;
      break;
    }
   case 93:
    $361 = STACKTOP;
    STACKTOP = STACKTOP + $358 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $365 = $361;
    label = 95;
    break;
   case 94:
    $363 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $358) | 0;
    $365 = $363;
    label = 95;
    break;
   case 95:
    $366 = $365;
    $367 = $dp + ($339 << 2) | 0;
    $368 = ___gmpn_lshift($366, $367, $320, $357) | 0;
    $369 = $339 - 1 | 0;
    $370 = $dp + ($369 << 2) | 0;
    $371 = HEAP32[$370 >> 2] | 0;
    $372 = 32 - $357 | 0;
    $373 = $371 >>> ($372 >>> 0);
    $374 = HEAP32[$366 >> 2] | 0;
    $375 = $374 | $373;
    HEAP32[$366 >> 2] = $375;
    $376 = $320 << 1;
    $377 = $320 << 3;
    $378 = $377 | 4;
    $379 = $378 >>> 0 < 65536;
    if ($379) {
      label = 96;
      break;
    } else {
      label = 97;
      break;
    }
   case 96:
    $381 = STACKTOP;
    STACKTOP = STACKTOP + $378 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $385 = $381;
    label = 98;
    break;
   case 97:
    $383 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $378) | 0;
    $385 = $383;
    label = 98;
    break;
   case 98:
    $386 = $385;
    $_sum629 = $nn - $376 | 0;
    $387 = $np + ($_sum629 << 2) | 0;
    $388 = ___gmpn_lshift($386, $387, $376, $357) | 0;
    if ($112) {
      label = 99;
      break;
    } else {
      label = 100;
      break;
    }
   case 99:
    $390 = $386 + ($376 << 2) | 0;
    HEAP32[$390 >> 2] = $388;
    $391 = $385 + 4 | 0;
    $392 = $391;
    $n2p16_0 = $392;
    $d2p17_0 = $366;
    $cnt19_0 = $357;
    label = 110;
    break;
   case 100:
    $394 = $nn - 1 | 0;
    $395 = $394 - $376 | 0;
    $396 = $np + ($395 << 2) | 0;
    $397 = HEAP32[$396 >> 2] | 0;
    $398 = $397 >>> ($372 >>> 0);
    $399 = HEAP32[$386 >> 2] | 0;
    $400 = $399 | $398;
    HEAP32[$386 >> 2] = $400;
    $n2p16_0 = $386;
    $d2p17_0 = $366;
    $cnt19_0 = $357;
    label = 110;
    break;
   case 101:
    $402 = $dp + ($339 << 2) | 0;
    $403 = $320 << 1;
    $404 = $320 << 3;
    $405 = $404 | 4;
    $406 = $405 >>> 0 < 65536;
    if ($406) {
      label = 102;
      break;
    } else {
      label = 103;
      break;
    }
   case 102:
    $408 = STACKTOP;
    STACKTOP = STACKTOP + $405 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $412 = $408;
    label = 104;
    break;
   case 103:
    $410 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $405) | 0;
    $412 = $410;
    label = 104;
    break;
   case 104:
    $413 = $412;
    $414 = ($403 | 0) == 0;
    if ($414) {
      label = 108;
      break;
    } else {
      label = 105;
      break;
    }
   case 105:
    $416 = $403 - 1 | 0;
    $_sum = $nn - $403 | 0;
    $417 = $np + ($_sum << 2) | 0;
    $_sum628 = $_sum + 1 | 0;
    $418 = $np + ($_sum628 << 2) | 0;
    $419 = HEAP32[$417 >> 2] | 0;
    $420 = $112 & 1;
    $421 = $420 + $nn | 0;
    $422 = $421 - $dn | 0;
    $423 = $422 << 3;
    $424 = $423 - 4 | 0;
    $scevgep699 = $412 + $424 | 0;
    $__x29_0 = $419;
    $__src28_0 = $418;
    $__dst27_0 = $413;
    $__n26_0 = $416;
    label = 106;
    break;
   case 106:
    $426 = $__dst27_0 + 4 | 0;
    HEAP32[$__dst27_0 >> 2] = $__x29_0;
    $427 = $__src28_0 + 4 | 0;
    $428 = HEAP32[$__src28_0 >> 2] | 0;
    $429 = $__n26_0 - 1 | 0;
    $430 = ($429 | 0) == 0;
    if ($430) {
      label = 107;
      break;
    } else {
      $__x29_0 = $428;
      $__src28_0 = $427;
      $__dst27_0 = $426;
      $__n26_0 = $429;
      label = 106;
      break;
    }
   case 107:
    $scevgep699700 = $scevgep699;
    HEAP32[$scevgep699700 >> 2] = $428;
    label = 108;
    break;
   case 108:
    if ($112) {
      label = 109;
      break;
    } else {
      $n2p16_0 = $413;
      $d2p17_0 = $402;
      $cnt19_0 = 0;
      label = 110;
      break;
    }
   case 109:
    $434 = $413 + ($403 << 2) | 0;
    HEAP32[$434 >> 2] = 0;
    $435 = $412 + 4 | 0;
    $436 = $435;
    $n2p16_0 = $436;
    $d2p17_0 = $402;
    $cnt19_0 = 0;
    label = 110;
    break;
   case 110:
    if (($320 | 0) == 1) {
      label = 111;
      break;
    } else if (($320 | 0) == 2) {
      label = 118;
      break;
    } else {
      label = 119;
      break;
    }
   case 111:
    $439 = HEAP32[$d2p17_0 >> 2] | 0;
    $440 = $439 >>> 16;
    $441 = $439 & 65535;
    $442 = $n2p16_0 + 4 | 0;
    $443 = HEAP32[$442 >> 2] | 0;
    $444 = ($443 >>> 0) / ($440 >>> 0) >>> 0;
    $445 = Math_imul($444, $440);
    $446 = $443 - $445 | 0;
    $447 = Math_imul($444, $441);
    $448 = $446 << 16;
    $449 = HEAP32[$n2p16_0 >> 2] | 0;
    $450 = $449 >>> 16;
    $451 = $448 | $450;
    $452 = $451 >>> 0 < $447 >>> 0;
    if ($452) {
      label = 112;
      break;
    } else {
      $__r134_0 = $451;
      $__q132_0 = $444;
      label = 114;
      break;
    }
   case 112:
    $454 = $444 - 1 | 0;
    $uadd627$0 = _llvm_uadd_with_overflow_i32($451 | 0, $439 | 0) | 0;
    $uadd627$1 = tempRet0;
    $455 = $uadd627$0;
    $456 = $uadd627$1;
    $_not641 = $456 ^ 1;
    $457 = $455 >>> 0 < $447 >>> 0;
    $or_cond642 = $457 & $_not641;
    if ($or_cond642) {
      label = 113;
      break;
    } else {
      $__r134_0 = $455;
      $__q132_0 = $454;
      label = 114;
      break;
    }
   case 113:
    $459 = $444 - 2 | 0;
    $460 = $455 + $439 | 0;
    $__r134_0 = $460;
    $__q132_0 = $459;
    label = 114;
    break;
   case 114:
    $462 = $__r134_0 - $447 | 0;
    $463 = ($462 >>> 0) / ($440 >>> 0) >>> 0;
    $464 = Math_imul($463, $440);
    $465 = $462 - $464 | 0;
    $466 = Math_imul($463, $441);
    $467 = $465 << 16;
    $468 = HEAP32[$n2p16_0 >> 2] | 0;
    $469 = $468 & 65535;
    $470 = $467 | $469;
    $471 = $470 >>> 0 < $466 >>> 0;
    if ($471) {
      label = 115;
      break;
    } else {
      $__r035_0 = $470;
      $__q033_0 = $463;
      label = 117;
      break;
    }
   case 115:
    $473 = $463 - 1 | 0;
    $474 = HEAP32[$d2p17_0 >> 2] | 0;
    $uadd626$0 = _llvm_uadd_with_overflow_i32($470 | 0, $474 | 0) | 0;
    $uadd626$1 = tempRet0;
    $475 = $uadd626$0;
    $476 = $uadd626$1;
    $_not643 = $476 ^ 1;
    $477 = $475 >>> 0 < $466 >>> 0;
    $or_cond644 = $477 & $_not643;
    if ($or_cond644) {
      label = 116;
      break;
    } else {
      $__r035_0 = $475;
      $__q033_0 = $473;
      label = 117;
      break;
    }
   case 116:
    $479 = $463 - 2 | 0;
    $480 = $475 + $474 | 0;
    $__r035_0 = $480;
    $__q033_0 = $479;
    label = 117;
    break;
   case 117:
    $482 = $__r035_0 - $466 | 0;
    $483 = $__q132_0 << 16;
    $484 = $__q033_0 | $483;
    HEAP32[$n2p16_0 >> 2] = $482;
    HEAP32[$qp >> 2] = $484;
    label = 144;
    break;
   case 118:
    $486 = ___gmpn_divrem_2($qp, 0, $n2p16_0, 4, $d2p17_0) | 0;
    label = 144;
    break;
   case 119:
    $488 = $320 - 1 | 0;
    $489 = $d2p17_0 + ($488 << 2) | 0;
    $490 = HEAP32[$489 >> 2] | 0;
    $491 = $490 >>> 16;
    $492 = $490 & 65535;
    $493 = $490 ^ -1;
    $494 = ($493 >>> 0) / ($491 >>> 0) >>> 0;
    $495 = Math_imul($494, $491);
    $496 = $493 - $495 | 0;
    $497 = Math_imul($494, $492);
    $498 = $496 << 16;
    $499 = $498 | 65535;
    $500 = $499 >>> 0 < $497 >>> 0;
    if ($500) {
      label = 120;
      break;
    } else {
      $__r147_0 = $499;
      $__q145_0 = $494;
      label = 122;
      break;
    }
   case 120:
    $502 = $494 - 1 | 0;
    $uadd625$0 = _llvm_uadd_with_overflow_i32($499 | 0, $490 | 0) | 0;
    $uadd625$1 = tempRet0;
    $503 = $uadd625$0;
    $504 = $uadd625$1;
    $_not645 = $504 ^ 1;
    $505 = $503 >>> 0 < $497 >>> 0;
    $or_cond646 = $505 & $_not645;
    if ($or_cond646) {
      label = 121;
      break;
    } else {
      $__r147_0 = $503;
      $__q145_0 = $502;
      label = 122;
      break;
    }
   case 121:
    $507 = $494 - 2 | 0;
    $508 = $503 + $490 | 0;
    $__r147_0 = $508;
    $__q145_0 = $507;
    label = 122;
    break;
   case 122:
    $510 = $__r147_0 - $497 | 0;
    $511 = ($510 >>> 0) / ($491 >>> 0) >>> 0;
    $512 = Math_imul($511, $491);
    $513 = $510 - $512 | 0;
    $514 = Math_imul($511, $492);
    $515 = $513 << 16;
    $516 = $515 | 65535;
    $517 = $516 >>> 0 < $514 >>> 0;
    if ($517) {
      label = 123;
      break;
    } else {
      $__q046_0 = $511;
      label = 124;
      break;
    }
   case 123:
    $519 = HEAP32[$489 >> 2] | 0;
    $uadd624$0 = _llvm_uadd_with_overflow_i32($516 | 0, $519 | 0) | 0;
    $uadd624$1 = tempRet0;
    $520 = $uadd624$1;
    $_not647 = $520 ^ 1;
    $521 = $uadd624$0;
    $522 = $521 >>> 0 < $514 >>> 0;
    $or_cond649 = $522 & $_not647;
    $_650_v = $or_cond649 ? -2 : -1;
    $_650 = $_650_v + $511 | 0;
    $__q046_0 = $_650;
    label = 124;
    break;
   case 124:
    $524 = $__q145_0 << 16;
    $525 = $__q046_0 | $524;
    $526 = HEAP32[$489 >> 2] | 0;
    $527 = Math_imul($526, $525);
    $528 = $320 - 2 | 0;
    $529 = $d2p17_0 + ($528 << 2) | 0;
    $530 = HEAP32[$529 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($527 | 0, $530 | 0) | 0;
    $uadd$1 = tempRet0;
    $531 = $uadd$0;
    $532 = $uadd$1;
    if ($532) {
      label = 125;
      break;
    } else {
      $_p38_0 = $531;
      $_v37_0 = $525;
      label = 126;
      break;
    }
   case 125:
    $534 = $525 - 1 | 0;
    $535 = $531 >>> 0 >= $526 >>> 0;
    $536 = $535 & 1;
    $537 = -$536 | 0;
    $538 = $531 - $526 | 0;
    $539 = $534 - $536 | 0;
    $540 = $526 & $537;
    $541 = $538 - $540 | 0;
    $_p38_0 = $541;
    $_v37_0 = $539;
    label = 126;
    break;
   case 126:
    $543 = HEAP32[$529 >> 2] | 0;
    $544 = $543 & 65535;
    $545 = $543 >>> 16;
    $546 = $_v37_0 & 65535;
    $547 = $_v37_0 >>> 16;
    $548 = Math_imul($544, $546);
    $549 = Math_imul($544, $547);
    $550 = Math_imul($545, $546);
    $551 = Math_imul($545, $547);
    $552 = $548 >>> 16;
    $553 = $552 + $549 | 0;
    $uadd620$0 = _llvm_uadd_with_overflow_i32($553 | 0, $550 | 0) | 0;
    $uadd620$1 = tempRet0;
    $554 = $uadd620$0;
    $555 = $uadd620$1;
    $556 = $551 + 65536 | 0;
    $__x353_0 = $555 ? $556 : $551;
    $557 = $554 >>> 16;
    $558 = $__x353_0 + $557 | 0;
    $559 = $554 << 16;
    $560 = $548 & 65535;
    $561 = $559 | $560;
    $uadd621$0 = _llvm_uadd_with_overflow_i32($_p38_0 | 0, $558 | 0) | 0;
    $uadd621$1 = tempRet0;
    $562 = $uadd621$0;
    $563 = $uadd621$1;
    if ($563) {
      label = 127;
      break;
    } else {
      $_v37_1 = $_v37_0;
      label = 129;
      break;
    }
   case 127:
    $565 = $_v37_0 - 1 | 0;
    $566 = HEAP32[$489 >> 2] | 0;
    $567 = $562 >>> 0 < $566 >>> 0;
    if ($567) {
      $_v37_1 = $565;
      label = 129;
      break;
    } else {
      label = 128;
      break;
    }
   case 128:
    $569 = $562 >>> 0 <= $566 >>> 0;
    $570 = $561 >>> 0 < $543 >>> 0;
    $or_cond652 = $569 & $570;
    $571 = $_v37_0 - 2 | 0;
    $_654 = $or_cond652 ? $565 : $571;
    $_v37_1 = $_654;
    label = 129;
    break;
   case 129:
    $573 = $dinv | 0;
    HEAP32[$573 >> 2] = $_v37_1;
    $574 = ($320 | 0) > 49;
    if ($574) {
      label = 131;
      break;
    } else {
      label = 130;
      break;
    }
   case 130:
    $576 = $320 << 1;
    $577 = ___gmpn_sbpi1_div_qr($qp, $n2p16_0, $576, $d2p17_0, $320, $_v37_1) | 0;
    label = 144;
    break;
   case 131:
    $579 = ($320 | 0) > 1999;
    $580 = $320 << 1;
    if ($579) {
      label = 133;
      break;
    } else {
      label = 132;
      break;
    }
   case 132:
    $582 = ___gmpn_dcpi1_div_qr($qp, $n2p16_0, $580, $d2p17_0, $320, $dinv) | 0;
    label = 144;
    break;
   case 133:
    $584 = ___gmpn_mu_div_qr_itch($580, $320, 0) | 0;
    $585 = $584 << 2;
    $586 = $585 >>> 0 < 65536;
    if ($586) {
      label = 134;
      break;
    } else {
      label = 135;
      break;
    }
   case 134:
    $588 = STACKTOP;
    STACKTOP = STACKTOP + $585 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $592 = $588;
    label = 136;
    break;
   case 135:
    $590 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $585) | 0;
    $592 = $590;
    label = 136;
    break;
   case 136:
    $593 = $592;
    $594 = ($np | 0) == ($rp | 0);
    if ($594) {
      label = 137;
      break;
    } else {
      $r2p_0 = $rp;
      label = 138;
      break;
    }
   case 137:
    $596 = $nn - $320 | 0;
    $597 = $rp + ($596 << 2) | 0;
    $r2p_0 = $597;
    label = 138;
    break;
   case 138:
    $599 = ___gmpn_mu_div_qr($qp, $r2p_0, $n2p16_0, $580, $d2p17_0, $320, $593) | 0;
    if ($321) {
      label = 144;
      break;
    } else {
      label = 139;
      break;
    }
   case 139:
    $601 = HEAP32[$r2p_0 >> 2] | 0;
    $602 = ($488 | 0) == 0;
    if ($602) {
      $__x65_1 = $601;
      $__dst63_1 = $n2p16_0;
      label = 143;
      break;
    } else {
      label = 140;
      break;
    }
   case 140:
    $603 = $112 & 1;
    $604 = $603 + $nn | 0;
    $605 = $604 - 1 | 0;
    $606 = $605 - $dn | 0;
    $__x65_0 = $601;
    $r2p_0_pn = $r2p_0;
    $__dst63_0 = $n2p16_0;
    $__n62_0 = $488;
    label = 141;
    break;
   case 141:
    $__src64_0 = $r2p_0_pn + 4 | 0;
    $608 = $__dst63_0 + 4 | 0;
    HEAP32[$__dst63_0 >> 2] = $__x65_0;
    $609 = HEAP32[$__src64_0 >> 2] | 0;
    $610 = $__n62_0 - 1 | 0;
    $611 = ($610 | 0) == 0;
    if ($611) {
      label = 142;
      break;
    } else {
      $__x65_0 = $609;
      $r2p_0_pn = $__src64_0;
      $__dst63_0 = $608;
      $__n62_0 = $610;
      label = 141;
      break;
    }
   case 142:
    $scevgep697 = $n2p16_0 + ($606 << 2) | 0;
    $__x65_1 = $609;
    $__dst63_1 = $scevgep697;
    label = 143;
    break;
   case 143:
    HEAP32[$__dst63_1 >> 2] = $__x65_1;
    label = 144;
    break;
   case 144:
    $614 = $339 - 2 | 0;
    $615 = ($614 | 0) < 0;
    if ($615) {
      $dl_0 = 0;
      label = 146;
      break;
    } else {
      label = 145;
      break;
    }
   case 145:
    $617 = $dp + ($614 << 2) | 0;
    $618 = HEAP32[$617 >> 2] | 0;
    $phitmp = $618 >>> 1;
    $dl_0 = $phitmp;
    label = 146;
    break;
   case 146:
    $620 = $339 - 1 | 0;
    $621 = $dp + ($620 << 2) | 0;
    $622 = HEAP32[$621 >> 2] | 0;
    $623 = $622 << $cnt19_0;
    $624 = $cnt19_0 & 31;
    $625 = $624 ^ 31;
    $626 = $dl_0 >>> ($625 >>> 0);
    $627 = $623 | $626;
    $628 = $320 - 1 | 0;
    $629 = $qp + ($628 << 2) | 0;
    $630 = HEAP32[$629 >> 2] | 0;
    $631 = $627 & 65535;
    $632 = $627 >>> 16;
    $633 = $630 & 65535;
    $634 = $630 >>> 16;
    $635 = Math_imul($631, $633);
    $636 = Math_imul($631, $634);
    $637 = Math_imul($632, $633);
    $638 = Math_imul($632, $634);
    $639 = $635 >>> 16;
    $640 = $639 + $636 | 0;
    $uadd622$0 = _llvm_uadd_with_overflow_i32($640 | 0, $637 | 0) | 0;
    $uadd622$1 = tempRet0;
    $641 = $uadd622$0;
    $642 = $uadd622$1;
    $643 = $638 + 65536 | 0;
    $__x369_0 = $642 ? $643 : $638;
    $644 = $641 >>> 16;
    $645 = $__x369_0 + $644 | 0;
    $646 = $n2p16_0 + ($628 << 2) | 0;
    $647 = HEAP32[$646 >> 2] | 0;
    $648 = $647 >>> 0 < $645 >>> 0;
    if ($648) {
      $__p_0 = $qp;
      label = 147;
      break;
    } else {
      $rn_0 = $320;
      label = 150;
      break;
    }
   case 147:
    $649 = $__p_0 + 4 | 0;
    $650 = HEAP32[$__p_0 >> 2] | 0;
    $651 = $650 - 1 | 0;
    HEAP32[$__p_0 >> 2] = $651;
    $652 = ($650 | 0) == 0;
    if ($652) {
      $__p_0 = $649;
      label = 147;
      break;
    } else {
      label = 148;
      break;
    }
   case 148:
    $654 = ___gmpn_add_n($n2p16_0, $n2p16_0, $d2p17_0, $320) | 0;
    $655 = ($654 | 0) == 0;
    if ($655) {
      $rn_0 = $320;
      label = 150;
      break;
    } else {
      label = 149;
      break;
    }
   case 149:
    $657 = $n2p16_0 + ($320 << 2) | 0;
    HEAP32[$657 >> 2] = $654;
    $658 = $320 + 1 | 0;
    $rn_0 = $658;
    label = 150;
    break;
   case 150:
    $660 = ($cnt19_0 | 0) == 0;
    if ($660) {
      $in_0 = $339;
      $rn_2 = $rn_0;
      $quotient_too_large_1 = 0;
      label = 156;
      break;
    } else {
      label = 151;
      break;
    }
   case 151:
    $662 = 32 - $cnt19_0 | 0;
    $663 = ___gmpn_lshift($n2p16_0, $n2p16_0, $rn_0, $662) | 0;
    $664 = $np + ($620 << 2) | 0;
    $665 = HEAP32[$664 >> 2] | 0;
    $666 = -1 >>> ($cnt19_0 >>> 0);
    $667 = $665 & $666;
    $668 = HEAP32[$n2p16_0 >> 2] | 0;
    $669 = $668 | $667;
    HEAP32[$n2p16_0 >> 2] = $669;
    $670 = HEAP32[$621 >> 2] | 0;
    $671 = $670 & $666;
    $672 = ___gmpn_submul_1($n2p16_0, $qp, $320, $671) | 0;
    $673 = ($320 | 0) == ($rn_0 | 0);
    if ($673) {
      label = 155;
      break;
    } else {
      label = 152;
      break;
    }
   case 152:
    $675 = $n2p16_0 + ($320 << 2) | 0;
    $676 = HEAP32[$675 >> 2] | 0;
    $677 = $676 >>> 0 < $672 >>> 0;
    if ($677) {
      label = 153;
      break;
    } else {
      label = 154;
      break;
    }
   case 153:
    ___gmp_assert_fail(7016, 332, 7072);
   case 154:
    $680 = $676 - $672 | 0;
    HEAP32[$675 >> 2] = $680;
    $in_0 = $620;
    $rn_2 = $rn_0;
    $quotient_too_large_1 = 0;
    label = 156;
    break;
   case 155:
    $682 = $663 - $672 | 0;
    $683 = $n2p16_0 + ($320 << 2) | 0;
    HEAP32[$683 >> 2] = $682;
    $684 = $663 >>> 0 < $672 >>> 0;
    $685 = $684 & 1;
    $686 = $rn_0 + 1 | 0;
    $in_0 = $620;
    $rn_2 = $686;
    $quotient_too_large_1 = $685;
    label = 156;
    break;
   case 156:
    $688 = $dn << 2;
    $689 = $688 >>> 0 < 65536;
    if ($689) {
      label = 157;
      break;
    } else {
      label = 158;
      break;
    }
   case 157:
    $691 = STACKTOP;
    STACKTOP = STACKTOP + $688 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $695 = $691;
    label = 159;
    break;
   case 158:
    $693 = ___gmp_tmp_reentrant_alloc($__tmp_marker1, $688) | 0;
    $695 = $693;
    label = 159;
    break;
   case 159:
    $696 = $695;
    $697 = ($in_0 | 0) < ($320 | 0);
    if ($697) {
      label = 160;
      break;
    } else {
      label = 170;
      break;
    }
   case 160:
    $699 = ($in_0 | 0) == 0;
    if ($699) {
      label = 161;
      break;
    } else {
      label = 169;
      break;
    }
   case 161:
    $701 = ($rn_2 | 0) == 0;
    if ($701) {
      label = 167;
      break;
    } else {
      label = 162;
      break;
    }
   case 162:
    $703 = $rn_2 - 1 | 0;
    $704 = HEAP32[$n2p16_0 >> 2] | 0;
    $705 = ($703 | 0) == 0;
    if ($705) {
      $__x81_1 = $704;
      $__dst79_1 = $rp;
      label = 166;
      break;
    } else {
      label = 163;
      break;
    }
   case 163:
    $706 = $rn_2 - 1 | 0;
    $__x81_0 = $704;
    $n2p16_0_pn623 = $n2p16_0;
    $__dst79_0 = $rp;
    $__n78_0 = $703;
    label = 164;
    break;
   case 164:
    $__src80_0 = $n2p16_0_pn623 + 4 | 0;
    $708 = $__dst79_0 + 4 | 0;
    HEAP32[$__dst79_0 >> 2] = $__x81_0;
    $709 = HEAP32[$__src80_0 >> 2] | 0;
    $710 = $__n78_0 - 1 | 0;
    $711 = ($710 | 0) == 0;
    if ($711) {
      label = 165;
      break;
    } else {
      $__x81_0 = $709;
      $n2p16_0_pn623 = $__src80_0;
      $__dst79_0 = $708;
      $__n78_0 = $710;
      label = 164;
      break;
    }
   case 165:
    $scevgep693 = $rp + ($706 << 2) | 0;
    $__x81_1 = $709;
    $__dst79_1 = $scevgep693;
    label = 166;
    break;
   case 166:
    HEAP32[$__dst79_1 >> 2] = $__x81_1;
    label = 167;
    break;
   case 167:
    $714 = ($rn_2 | 0) == ($dn | 0);
    if ($714) {
      $quotient_too_large_2 = $quotient_too_large_1;
      label = 178;
      break;
    } else {
      label = 168;
      break;
    }
   case 168:
    ___gmp_assert_fail(7016, 353, 6456);
   case 169:
    $717 = ___gmpn_mul($696, $qp, $320, $dp, $in_0) | 0;
    label = 171;
    break;
   case 170:
    $719 = ___gmpn_mul($696, $dp, $in_0, $qp, $320) | 0;
    label = 171;
    break;
   case 171:
    $721 = $696 + ($in_0 << 2) | 0;
    $722 = ___gmpn_sub($n2p16_0, $n2p16_0, $rn_2, $721, $320) | 0;
    $723 = ($in_0 | 0) == ($dn | 0);
    if ($723) {
      label = 177;
      break;
    } else {
      label = 172;
      break;
    }
   case 172:
    $725 = $dn - $in_0 | 0;
    $726 = $725 - 1 | 0;
    $727 = $rp + ($in_0 << 2) | 0;
    $728 = HEAP32[$n2p16_0 >> 2] | 0;
    $729 = ($726 | 0) == 0;
    if ($729) {
      $__x85_1 = $728;
      $__dst83_1 = $727;
      label = 176;
      break;
    } else {
      label = 173;
      break;
    }
   case 173:
    $730 = $dn - 1 | 0;
    $__x85_0 = $728;
    $n2p16_0_pn = $n2p16_0;
    $__dst83_0 = $727;
    $__n82_0 = $726;
    label = 174;
    break;
   case 174:
    $__src84_0 = $n2p16_0_pn + 4 | 0;
    $732 = $__dst83_0 + 4 | 0;
    HEAP32[$__dst83_0 >> 2] = $__x85_0;
    $733 = HEAP32[$__src84_0 >> 2] | 0;
    $734 = $__n82_0 - 1 | 0;
    $735 = ($734 | 0) == 0;
    if ($735) {
      label = 175;
      break;
    } else {
      $__x85_0 = $733;
      $n2p16_0_pn = $__src84_0;
      $__dst83_0 = $732;
      $__n82_0 = $734;
      label = 174;
      break;
    }
   case 175:
    $scevgep695 = $rp + ($730 << 2) | 0;
    $__x85_1 = $733;
    $__dst83_1 = $scevgep695;
    label = 176;
    break;
   case 176:
    HEAP32[$__dst83_1 >> 2] = $__x85_1;
    label = 177;
    break;
   case 177:
    $738 = $722 | $quotient_too_large_1;
    $739 = ___gmpn_sub_n($rp, $np, $696, $in_0) | 0;
    $740 = $rp + ($in_0 << 2) | 0;
    $741 = ___gmpn_sub_1($740, $740, $rn_2, $739) | 0;
    $742 = $738 | $741;
    $quotient_too_large_2 = $742;
    label = 178;
    break;
   case 178:
    $744 = ($quotient_too_large_2 | 0) == 0;
    if ($744) {
      label = 181;
      break;
    } else {
      $__p87_0 = $qp;
      label = 179;
      break;
    }
   case 179:
    $745 = $__p87_0 + 4 | 0;
    $746 = HEAP32[$__p87_0 >> 2] | 0;
    $747 = $746 - 1 | 0;
    HEAP32[$__p87_0 >> 2] = $747;
    $748 = ($746 | 0) == 0;
    if ($748) {
      $__p87_0 = $745;
      label = 179;
      break;
    } else {
      label = 180;
      break;
    }
   case 180:
    $750 = ___gmpn_add_n($rp, $rp, $dp, $dn) | 0;
    label = 181;
    break;
   case 181:
    $752 = HEAP32[$__tmp_marker1 >> 2] | 0;
    $753 = ($752 | 0) == 0;
    if ($753) {
      label = 183;
      break;
    } else {
      label = 182;
      break;
    }
   case 182:
    ___gmp_tmp_reentrant_free($752);
    label = 183;
    break;
   case 183:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpn_jacobi_base($a, $b, $result_bit1) {
  $a = $a | 0;
  $b = $b | 0;
  $result_bit1 = $result_bit1 | 0;
  var $1 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $_030 = 0, $_027 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $_131 = 0, $_1 = 0, $13 = 0, $15 = 0, $_232 = 0, $_028 = 0, $_2 = 0, $16 = 0, $17 = 0, $_333_ph = 0, $_129_ph = 0, $_3_ph = 0, $18 = 0, $19 = 0, $_333 = 0, $_3 = 0, $21 = 0, $23 = 0, $_434 = 0, $_4 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $_5 = 0, $33 = 0, $34 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($a | 0) == 0;
    if ($1) {
      $_0 = 0;
      label = 15;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = $a & 1;
    $4 = ($3 | 0) == 0;
    if ($4) {
      label = 3;
      break;
    } else {
      $_1 = $a;
      $_131 = $result_bit1;
      label = 5;
      break;
    }
   case 3:
    $6 = $b >>> 1;
    $7 = $6 ^ $b;
    $_027 = $a;
    $_030 = $result_bit1;
    label = 4;
    break;
   case 4:
    $9 = $_027 >>> 1;
    $10 = $7 ^ $_030;
    $11 = $9 & 1;
    $12 = ($11 | 0) == 0;
    if ($12) {
      $_027 = $9;
      $_030 = $10;
      label = 4;
      break;
    } else {
      $_1 = $9;
      $_131 = $10;
      label = 5;
      break;
    }
   case 5:
    $13 = ($_1 | 0) == 1;
    if ($13) {
      $_5 = $_131;
      label = 14;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $15 = $_1 >>> 0 < $b >>> 0;
    if ($15) {
      $_2 = $_1;
      $_028 = $b;
      $_232 = $_131;
      label = 7;
      break;
    } else {
      $_3_ph = $_1;
      $_129_ph = $b;
      $_333_ph = $_131;
      label = 8;
      break;
    }
   case 7:
    $16 = $_2 & $_028;
    $17 = $16 ^ $_232;
    $_3_ph = $_028;
    $_129_ph = $_2;
    $_333_ph = $17;
    label = 8;
    break;
   case 8:
    $18 = $_129_ph >>> 1;
    $19 = $18 ^ $_129_ph;
    $_3 = $_3_ph;
    $_333 = $_333_ph;
    label = 9;
    break;
   case 9:
    $21 = ($_3 | 0) == ($_129_ph | 0);
    if ($21) {
      $_0 = 0;
      label = 15;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $23 = $_3 - $_129_ph | 0;
    $_4 = $23;
    $_434 = $_333;
    label = 11;
    break;
   case 11:
    $25 = $_4 >>> 1;
    $26 = $19 ^ $_434;
    $27 = $25 & 1;
    $28 = ($27 | 0) == 0;
    if ($28) {
      $_4 = $25;
      $_434 = $26;
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $30 = ($25 | 0) == 1;
    if ($30) {
      $_5 = $26;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $32 = $25 >>> 0 < $_129_ph >>> 0;
    if ($32) {
      $_2 = $25;
      $_028 = $_129_ph;
      $_232 = $26;
      label = 7;
      break;
    } else {
      $_3 = $25;
      $_333 = $26;
      label = 9;
      break;
    }
   case 14:
    $33 = $_5 & 2;
    $34 = 1 - $33 | 0;
    $_0 = $34;
    label = 15;
    break;
   case 15:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_jacobi_2($ap, $bp, $bit) {
  $ap = $ap | 0;
  $bp = $bp | 0;
  $bit = $bit | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or_cond = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $__ctz_x_0 = 0, $__ctz_c_0 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $__ctz_x_1 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $c_0 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $__ctz_x1_0 = 0, $__ctz_c2_0 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $__ctz_x1_1 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $c_1 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $al_0 = 0, $ah_0 = 0, $_0244 = 0, $93 = 0, $96 = 0, $97 = 0, $bl_0 = 0, $bh_0 = 0, $al_1 = 0, $ah_1 = 0, $_1 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $_2270 = 0, $ah_2269 = 0, $al_2268 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $110 = 0, $111 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $__ctz_x3_0 = 0, $__ctz_c4_0 = 0, $119 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $__ctz_x3_1 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $c_2 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $143 = 0, $144 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $__ctz_x5_0 = 0, $__ctz_c6_0 = 0, $152 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $__ctz_x5_1 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $c_3 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $_2_lcssa = 0, $ah_2_lcssa = 0, $al_2_lcssa = 0, $175 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $_3283 = 0, $bh_1282 = 0, $bl_1281 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $191 = 0, $192 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $__ctz_x9_0 = 0, $__ctz_c10_0 = 0, $200 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $__ctz_x9_1 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $c_4 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $224 = 0, $225 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $__ctz_x11_0 = 0, $__ctz_c12_0 = 0, $233 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $__ctz_x11_1 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $c_5 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $_3_lcssa = 0, $bh_1_lcssa = 0, $bl_1_lcssa = 0, $256 = 0, $257 = 0, $258 = 0, $bl_2 = 0, $_4 = 0, $260 = 0, $262 = 0, $263 = 0, $bl_3 = 0, $al_3 = 0, $_5 = 0, $265 = 0, $266 = 0, $268 = 0, $269 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $__ctz_x14_0 = 0, $__ctz_c15_0 = 0, $277 = 0, $279 = 0, $280 = 0, $281 = 0, $282 = 0, $__ctz_x14_1 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $c_6 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $299 = 0, $300 = 0, $302 = 0, $303 = 0, $bl_4 = 0, $al_4 = 0, $ah_3 = 0, $_6 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $309 = 0, $310 = 0, $_7254 = 0, $ah_4253 = 0, $al_5252 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $321 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $__ctz_x17_0 = 0, $__ctz_c18_0 = 0, $329 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $__ctz_x17_1 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $340 = 0, $341 = 0, $c_7 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $351 = 0, $352 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $__ctz_x19_0 = 0, $__ctz_c20_0 = 0, $360 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $__ctz_x19_1 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $c_8 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $bl_5 = 0, $al_6 = 0, $_8 = 0, $383 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP32[$ap >> 2] | 0;
    $2 = $ap + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = HEAP32[$bp >> 2] | 0;
    $5 = $bp + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $bit << 1;
    $8 = ($6 | 0) == 0;
    $9 = ($4 | 0) == 1;
    $or_cond = $8 & $9;
    if ($or_cond) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $11 = $7 & 2;
    $12 = 1 - $11 | 0;
    $_0 = $12;
    label = 87;
    break;
   case 3:
    $14 = ($1 | 0) == 0;
    if ($14) {
      label = 4;
      break;
    } else {
      label = 13;
      break;
    }
   case 4:
    $16 = ($3 | 0) == 0;
    if ($16) {
      $_0 = 0;
      label = 87;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $18 = $3 & 255;
    $19 = ($18 | 0) == 0;
    if ($19) {
      $__ctz_c_0 = 6;
      $__ctz_x_0 = $3;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $21 = -$3 | 0;
    $22 = $3 & $21;
    $23 = $22 + 9696 | 0;
    $24 = HEAP8[$23] | 0;
    $25 = $24 & 255;
    $26 = $25 - 2 | 0;
    $c_0 = $26;
    label = 10;
    break;
   case 7:
    $27 = ($__ctz_c_0 | 0) < 30;
    if ($27) {
      label = 8;
      break;
    } else {
      $__ctz_x_1 = $__ctz_x_0;
      label = 9;
      break;
    }
   case 8:
    $29 = $__ctz_x_0 >>> 8;
    $30 = $29 & 255;
    $31 = ($30 | 0) == 0;
    $32 = $__ctz_c_0 + 8 | 0;
    if ($31) {
      $__ctz_c_0 = $32;
      $__ctz_x_0 = $29;
      label = 7;
      break;
    } else {
      $__ctz_x_1 = $29;
      label = 9;
      break;
    }
   case 9:
    $34 = -$__ctz_x_1 | 0;
    $35 = $__ctz_x_1 & $34;
    $36 = $35 + 9696 | 0;
    $37 = HEAP8[$36] | 0;
    $38 = $37 & 255;
    $39 = $38 + $__ctz_c_0 | 0;
    $c_0 = $39;
    label = 10;
    break;
   case 10:
    $41 = $c_0 << 1;
    $42 = $41 + 64 | 0;
    $43 = $4 >>> 1;
    $44 = $43 ^ $4;
    $45 = $42 & $44;
    $46 = $45 ^ $7;
    $47 = $3 >>> ($c_0 >>> 0);
    $48 = ($47 | 0) == 1;
    if ($48) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $50 = $46 & 2;
    $51 = 1 - $50 | 0;
    $_0 = $51;
    label = 87;
    break;
   case 12:
    $53 = $47 & $4;
    $54 = $46 ^ $53;
    $_6 = $54;
    $ah_3 = $6;
    $al_4 = $4;
    $bl_4 = $47;
    label = 68;
    break;
   case 13:
    $56 = $1 & 1;
    $57 = ($56 | 0) == 0;
    if ($57) {
      label = 14;
      break;
    } else {
      $_0244 = $7;
      $ah_0 = $3;
      $al_0 = $1;
      label = 20;
      break;
    }
   case 14:
    $59 = $1 & 255;
    $60 = ($59 | 0) == 0;
    if ($60) {
      $__ctz_c2_0 = 6;
      $__ctz_x1_0 = $1;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $62 = -$1 | 0;
    $63 = $1 & $62;
    $64 = $63 + 9696 | 0;
    $65 = HEAP8[$64] | 0;
    $66 = $65 & 255;
    $67 = $66 - 2 | 0;
    $c_1 = $67;
    label = 19;
    break;
   case 16:
    $68 = ($__ctz_c2_0 | 0) < 30;
    if ($68) {
      label = 17;
      break;
    } else {
      $__ctz_x1_1 = $__ctz_x1_0;
      label = 18;
      break;
    }
   case 17:
    $70 = $__ctz_x1_0 >>> 8;
    $71 = $70 & 255;
    $72 = ($71 | 0) == 0;
    $73 = $__ctz_c2_0 + 8 | 0;
    if ($72) {
      $__ctz_c2_0 = $73;
      $__ctz_x1_0 = $70;
      label = 16;
      break;
    } else {
      $__ctz_x1_1 = $70;
      label = 18;
      break;
    }
   case 18:
    $75 = -$__ctz_x1_1 | 0;
    $76 = $__ctz_x1_1 & $75;
    $77 = $76 + 9696 | 0;
    $78 = HEAP8[$77] | 0;
    $79 = $78 & 255;
    $80 = $79 + $__ctz_c2_0 | 0;
    $c_1 = $80;
    label = 19;
    break;
   case 19:
    $82 = 32 - $c_1 | 0;
    $83 = $3 << $82;
    $84 = $1 >>> ($c_1 >>> 0);
    $85 = $83 | $84;
    $86 = $3 >>> ($c_1 >>> 0);
    $87 = $c_1 << 1;
    $88 = $4 >>> 1;
    $89 = $88 ^ $4;
    $90 = $87 & $89;
    $91 = $90 ^ $7;
    $_0244 = $91;
    $ah_0 = $86;
    $al_0 = $85;
    label = 20;
    break;
   case 20:
    $93 = ($ah_0 | 0) == 0;
    if ($93) {
      label = 21;
      break;
    } else {
      $_1 = $_0244;
      $ah_1 = $ah_0;
      $al_1 = $al_0;
      $bh_0 = $6;
      $bl_0 = $4;
      label = 23;
      break;
    }
   case 21:
    if ($8) {
      $_8 = $_0244;
      $al_6 = $al_0;
      $bl_5 = $4;
      label = 86;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $96 = $al_0 & $4;
    $97 = $_0244 ^ $96;
    $_6 = $97;
    $ah_3 = $6;
    $al_4 = $4;
    $bl_4 = $al_0;
    label = 68;
    break;
   case 23:
    $98 = ($bh_0 | 0) == 0;
    if ($98) {
      $_6 = $_1;
      $ah_3 = $ah_1;
      $al_4 = $al_1;
      $bl_4 = $bl_0;
      label = 68;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $99 = $ah_1 >>> 0 > $bh_0 >>> 0;
    if ($99) {
      label = 25;
      break;
    } else {
      $al_2_lcssa = $al_1;
      $ah_2_lcssa = $ah_1;
      $_2_lcssa = $_1;
      label = 39;
      break;
    }
   case 25:
    $100 = $bl_0 >>> 1;
    $101 = $100 ^ $bl_0;
    $al_2268 = $al_1;
    $ah_2269 = $ah_1;
    $_2270 = $_1;
    label = 26;
    break;
   case 26:
    $103 = $al_2268 - $bl_0 | 0;
    $104 = $ah_2269 - $bh_0 | 0;
    $105 = $al_2268 >>> 0 < $bl_0 >>> 0;
    $106 = $105 & 1;
    $107 = $104 - $106 | 0;
    $108 = ($al_2268 | 0) == ($bl_0 | 0);
    if ($108) {
      label = 27;
      break;
    } else {
      label = 33;
      break;
    }
   case 27:
    $110 = $107 & 255;
    $111 = ($110 | 0) == 0;
    if ($111) {
      $__ctz_c4_0 = 6;
      $__ctz_x3_0 = $107;
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $113 = -$107 | 0;
    $114 = $107 & $113;
    $115 = $114 + 9696 | 0;
    $116 = HEAP8[$115] | 0;
    $117 = $116 & 255;
    $118 = $117 - 2 | 0;
    $c_2 = $118;
    label = 32;
    break;
   case 29:
    $119 = ($__ctz_c4_0 | 0) < 30;
    if ($119) {
      label = 30;
      break;
    } else {
      $__ctz_x3_1 = $__ctz_x3_0;
      label = 31;
      break;
    }
   case 30:
    $121 = $__ctz_x3_0 >>> 8;
    $122 = $121 & 255;
    $123 = ($122 | 0) == 0;
    $124 = $__ctz_c4_0 + 8 | 0;
    if ($123) {
      $__ctz_c4_0 = $124;
      $__ctz_x3_0 = $121;
      label = 29;
      break;
    } else {
      $__ctz_x3_1 = $121;
      label = 31;
      break;
    }
   case 31:
    $126 = -$__ctz_x3_1 | 0;
    $127 = $__ctz_x3_1 & $126;
    $128 = $127 + 9696 | 0;
    $129 = HEAP8[$128] | 0;
    $130 = $129 & 255;
    $131 = $130 + $__ctz_c4_0 | 0;
    $c_2 = $131;
    label = 32;
    break;
   case 32:
    $133 = $c_2 << 1;
    $134 = $133 + 64 | 0;
    $135 = $bl_0 >>> 1;
    $136 = $135 ^ $bl_0;
    $137 = $134 & $136;
    $138 = $107 >>> ($c_2 >>> 0);
    $139 = $138 & $bl_0;
    $140 = $139 ^ $_2270;
    $141 = $140 ^ $137;
    $_6 = $141;
    $ah_3 = $bh_0;
    $al_4 = $bl_0;
    $bl_4 = $138;
    label = 68;
    break;
   case 33:
    $143 = $103 & 255;
    $144 = ($143 | 0) == 0;
    if ($144) {
      $__ctz_c6_0 = 6;
      $__ctz_x5_0 = $103;
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    $146 = -$103 | 0;
    $147 = $103 & $146;
    $148 = $147 + 9696 | 0;
    $149 = HEAP8[$148] | 0;
    $150 = $149 & 255;
    $151 = $150 - 2 | 0;
    $c_3 = $151;
    label = 38;
    break;
   case 35:
    $152 = ($__ctz_c6_0 | 0) < 30;
    if ($152) {
      label = 36;
      break;
    } else {
      $__ctz_x5_1 = $__ctz_x5_0;
      label = 37;
      break;
    }
   case 36:
    $154 = $__ctz_x5_0 >>> 8;
    $155 = $154 & 255;
    $156 = ($155 | 0) == 0;
    $157 = $__ctz_c6_0 + 8 | 0;
    if ($156) {
      $__ctz_c6_0 = $157;
      $__ctz_x5_0 = $154;
      label = 35;
      break;
    } else {
      $__ctz_x5_1 = $154;
      label = 37;
      break;
    }
   case 37:
    $159 = -$__ctz_x5_1 | 0;
    $160 = $__ctz_x5_1 & $159;
    $161 = $160 + 9696 | 0;
    $162 = HEAP8[$161] | 0;
    $163 = $162 & 255;
    $164 = $163 + $__ctz_c6_0 | 0;
    $c_3 = $164;
    label = 38;
    break;
   case 38:
    $166 = $c_3 << 1;
    $167 = $166 & $101;
    $168 = $167 ^ $_2270;
    $169 = 32 - $c_3 | 0;
    $170 = $107 << $169;
    $171 = $103 >>> ($c_3 >>> 0);
    $172 = $170 | $171;
    $173 = $107 >>> ($c_3 >>> 0);
    $174 = $173 >>> 0 > $bh_0 >>> 0;
    if ($174) {
      $al_2268 = $172;
      $ah_2269 = $173;
      $_2270 = $168;
      label = 26;
      break;
    } else {
      $al_2_lcssa = $172;
      $ah_2_lcssa = $173;
      $_2_lcssa = $168;
      label = 39;
      break;
    }
   case 39:
    $175 = ($ah_2_lcssa | 0) == ($bh_0 | 0);
    if ($175) {
      $_4 = $_2_lcssa;
      $bl_2 = $bl_0;
      label = 57;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    $177 = ($ah_2_lcssa | 0) == 0;
    $178 = $al_2_lcssa & $bl_0;
    $179 = $_2_lcssa ^ $178;
    if ($177) {
      $_6 = $179;
      $ah_3 = $bh_0;
      $al_4 = $bl_0;
      $bl_4 = $al_2_lcssa;
      label = 68;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $180 = $bh_0 >>> 0 > $ah_2_lcssa >>> 0;
    if ($180) {
      label = 42;
      break;
    } else {
      $bl_1_lcssa = $bl_0;
      $bh_1_lcssa = $bh_0;
      $_3_lcssa = $179;
      label = 56;
      break;
    }
   case 42:
    $181 = $al_2_lcssa >>> 1;
    $182 = $181 ^ $al_2_lcssa;
    $bl_1281 = $bl_0;
    $bh_1282 = $bh_0;
    $_3283 = $179;
    label = 43;
    break;
   case 43:
    $184 = $bl_1281 - $al_2_lcssa | 0;
    $185 = $bh_1282 - $ah_2_lcssa | 0;
    $186 = $bl_1281 >>> 0 < $al_2_lcssa >>> 0;
    $187 = $186 & 1;
    $188 = $185 - $187 | 0;
    $189 = ($bl_1281 | 0) == ($al_2_lcssa | 0);
    if ($189) {
      label = 44;
      break;
    } else {
      label = 50;
      break;
    }
   case 44:
    $191 = $188 & 255;
    $192 = ($191 | 0) == 0;
    if ($192) {
      $__ctz_c10_0 = 6;
      $__ctz_x9_0 = $188;
      label = 46;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    $194 = -$188 | 0;
    $195 = $188 & $194;
    $196 = $195 + 9696 | 0;
    $197 = HEAP8[$196] | 0;
    $198 = $197 & 255;
    $199 = $198 - 2 | 0;
    $c_4 = $199;
    label = 49;
    break;
   case 46:
    $200 = ($__ctz_c10_0 | 0) < 30;
    if ($200) {
      label = 47;
      break;
    } else {
      $__ctz_x9_1 = $__ctz_x9_0;
      label = 48;
      break;
    }
   case 47:
    $202 = $__ctz_x9_0 >>> 8;
    $203 = $202 & 255;
    $204 = ($203 | 0) == 0;
    $205 = $__ctz_c10_0 + 8 | 0;
    if ($204) {
      $__ctz_c10_0 = $205;
      $__ctz_x9_0 = $202;
      label = 46;
      break;
    } else {
      $__ctz_x9_1 = $202;
      label = 48;
      break;
    }
   case 48:
    $207 = -$__ctz_x9_1 | 0;
    $208 = $__ctz_x9_1 & $207;
    $209 = $208 + 9696 | 0;
    $210 = HEAP8[$209] | 0;
    $211 = $210 & 255;
    $212 = $211 + $__ctz_c10_0 | 0;
    $c_4 = $212;
    label = 49;
    break;
   case 49:
    $214 = $c_4 << 1;
    $215 = $214 + 64 | 0;
    $216 = $al_2_lcssa >>> 1;
    $217 = $216 ^ $al_2_lcssa;
    $218 = $215 & $217;
    $219 = $188 >>> ($c_4 >>> 0);
    $220 = $219 & $al_2_lcssa;
    $221 = $220 ^ $_3283;
    $222 = $221 ^ $218;
    $_6 = $222;
    $ah_3 = $ah_2_lcssa;
    $al_4 = $al_2_lcssa;
    $bl_4 = $219;
    label = 68;
    break;
   case 50:
    $224 = $184 & 255;
    $225 = ($224 | 0) == 0;
    if ($225) {
      $__ctz_c12_0 = 6;
      $__ctz_x11_0 = $184;
      label = 52;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    $227 = -$184 | 0;
    $228 = $184 & $227;
    $229 = $228 + 9696 | 0;
    $230 = HEAP8[$229] | 0;
    $231 = $230 & 255;
    $232 = $231 - 2 | 0;
    $c_5 = $232;
    label = 55;
    break;
   case 52:
    $233 = ($__ctz_c12_0 | 0) < 30;
    if ($233) {
      label = 53;
      break;
    } else {
      $__ctz_x11_1 = $__ctz_x11_0;
      label = 54;
      break;
    }
   case 53:
    $235 = $__ctz_x11_0 >>> 8;
    $236 = $235 & 255;
    $237 = ($236 | 0) == 0;
    $238 = $__ctz_c12_0 + 8 | 0;
    if ($237) {
      $__ctz_c12_0 = $238;
      $__ctz_x11_0 = $235;
      label = 52;
      break;
    } else {
      $__ctz_x11_1 = $235;
      label = 54;
      break;
    }
   case 54:
    $240 = -$__ctz_x11_1 | 0;
    $241 = $__ctz_x11_1 & $240;
    $242 = $241 + 9696 | 0;
    $243 = HEAP8[$242] | 0;
    $244 = $243 & 255;
    $245 = $244 + $__ctz_c12_0 | 0;
    $c_5 = $245;
    label = 55;
    break;
   case 55:
    $247 = $c_5 << 1;
    $248 = $247 & $182;
    $249 = $248 ^ $_3283;
    $250 = 32 - $c_5 | 0;
    $251 = $188 << $250;
    $252 = $184 >>> ($c_5 >>> 0);
    $253 = $251 | $252;
    $254 = $188 >>> ($c_5 >>> 0);
    $255 = $254 >>> 0 > $ah_2_lcssa >>> 0;
    if ($255) {
      $bl_1281 = $253;
      $bh_1282 = $254;
      $_3283 = $249;
      label = 43;
      break;
    } else {
      $bl_1_lcssa = $253;
      $bh_1_lcssa = $254;
      $_3_lcssa = $249;
      label = 56;
      break;
    }
   case 56:
    $256 = $bl_1_lcssa & $al_2_lcssa;
    $257 = $_3_lcssa ^ $256;
    $258 = ($ah_2_lcssa | 0) == ($bh_1_lcssa | 0);
    if ($258) {
      $_4 = $257;
      $bl_2 = $bl_1_lcssa;
      label = 57;
      break;
    } else {
      $_1 = $257;
      $ah_1 = $ah_2_lcssa;
      $al_1 = $al_2_lcssa;
      $bh_0 = $bh_1_lcssa;
      $bl_0 = $bl_1_lcssa;
      label = 23;
      break;
    }
   case 57:
    $260 = $al_2_lcssa >>> 0 < $bl_2 >>> 0;
    if ($260) {
      label = 58;
      break;
    } else {
      $_5 = $_4;
      $al_3 = $al_2_lcssa;
      $bl_3 = $bl_2;
      label = 59;
      break;
    }
   case 58:
    $262 = $bl_2 & $al_2_lcssa;
    $263 = $_4 ^ $262;
    $_5 = $263;
    $al_3 = $bl_2;
    $bl_3 = $al_2_lcssa;
    label = 59;
    break;
   case 59:
    $265 = $al_3 - $bl_3 | 0;
    $266 = ($al_3 | 0) == ($bl_3 | 0);
    if ($266) {
      $_0 = 0;
      label = 87;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    $268 = $265 & 255;
    $269 = ($268 | 0) == 0;
    if ($269) {
      $__ctz_c15_0 = 6;
      $__ctz_x14_0 = $265;
      label = 62;
      break;
    } else {
      label = 61;
      break;
    }
   case 61:
    $271 = -$265 | 0;
    $272 = $265 & $271;
    $273 = $272 + 9696 | 0;
    $274 = HEAP8[$273] | 0;
    $275 = $274 & 255;
    $276 = $275 - 2 | 0;
    $c_6 = $276;
    label = 65;
    break;
   case 62:
    $277 = ($__ctz_c15_0 | 0) < 30;
    if ($277) {
      label = 63;
      break;
    } else {
      $__ctz_x14_1 = $__ctz_x14_0;
      label = 64;
      break;
    }
   case 63:
    $279 = $__ctz_x14_0 >>> 8;
    $280 = $279 & 255;
    $281 = ($280 | 0) == 0;
    $282 = $__ctz_c15_0 + 8 | 0;
    if ($281) {
      $__ctz_c15_0 = $282;
      $__ctz_x14_0 = $279;
      label = 62;
      break;
    } else {
      $__ctz_x14_1 = $279;
      label = 64;
      break;
    }
   case 64:
    $284 = -$__ctz_x14_1 | 0;
    $285 = $__ctz_x14_1 & $284;
    $286 = $285 + 9696 | 0;
    $287 = HEAP8[$286] | 0;
    $288 = $287 & 255;
    $289 = $288 + $__ctz_c15_0 | 0;
    $c_6 = $289;
    label = 65;
    break;
   case 65:
    $291 = $c_6 << 1;
    $292 = $bl_3 >>> 1;
    $293 = $292 ^ $bl_3;
    $294 = $291 & $293;
    $295 = $294 ^ $_5;
    $296 = $265 >>> ($c_6 >>> 0);
    $297 = ($296 | 0) == 1;
    if ($297) {
      label = 66;
      break;
    } else {
      label = 67;
      break;
    }
   case 66:
    $299 = $295 & 2;
    $300 = 1 - $299 | 0;
    $_0 = $300;
    label = 87;
    break;
   case 67:
    $302 = $296 & $bl_3;
    $303 = $295 ^ $302;
    $_6 = $303;
    $ah_3 = $ah_2_lcssa;
    $al_4 = $bl_3;
    $bl_4 = $296;
    label = 68;
    break;
   case 68:
    $304 = ($bl_4 | 0) == 1;
    if ($304) {
      label = 71;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    $305 = ($ah_3 | 0) == 0;
    if ($305) {
      $_8 = $_6;
      $al_6 = $al_4;
      $bl_5 = $bl_4;
      label = 86;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    $306 = $bl_4 >>> 1;
    $307 = $306 ^ $bl_4;
    $al_5252 = $al_4;
    $ah_4253 = $ah_3;
    $_7254 = $_6;
    label = 72;
    break;
   case 71:
    $309 = $_6 & 2;
    $310 = 1 - $309 | 0;
    $_0 = $310;
    label = 87;
    break;
   case 72:
    $312 = $al_5252 >>> 0 < $bl_4 >>> 0;
    $313 = $312 & 1;
    $314 = $ah_4253 - $313 | 0;
    $315 = $al_5252 - $bl_4 | 0;
    $316 = ($al_5252 | 0) == ($bl_4 | 0);
    if ($316) {
      label = 73;
      break;
    } else {
      label = 80;
      break;
    }
   case 73:
    $318 = ($ah_4253 | 0) == ($313 | 0);
    if ($318) {
      $_0 = 0;
      label = 87;
      break;
    } else {
      label = 74;
      break;
    }
   case 74:
    $320 = $314 & 255;
    $321 = ($320 | 0) == 0;
    if ($321) {
      $__ctz_c18_0 = 6;
      $__ctz_x17_0 = $314;
      label = 76;
      break;
    } else {
      label = 75;
      break;
    }
   case 75:
    $323 = -$314 | 0;
    $324 = $314 & $323;
    $325 = $324 + 9696 | 0;
    $326 = HEAP8[$325] | 0;
    $327 = $326 & 255;
    $328 = $327 - 2 | 0;
    $c_7 = $328;
    label = 79;
    break;
   case 76:
    $329 = ($__ctz_c18_0 | 0) < 30;
    if ($329) {
      label = 77;
      break;
    } else {
      $__ctz_x17_1 = $__ctz_x17_0;
      label = 78;
      break;
    }
   case 77:
    $331 = $__ctz_x17_0 >>> 8;
    $332 = $331 & 255;
    $333 = ($332 | 0) == 0;
    $334 = $__ctz_c18_0 + 8 | 0;
    if ($333) {
      $__ctz_c18_0 = $334;
      $__ctz_x17_0 = $331;
      label = 76;
      break;
    } else {
      $__ctz_x17_1 = $331;
      label = 78;
      break;
    }
   case 78:
    $336 = -$__ctz_x17_1 | 0;
    $337 = $__ctz_x17_1 & $336;
    $338 = $337 + 9696 | 0;
    $339 = HEAP8[$338] | 0;
    $340 = $339 & 255;
    $341 = $340 + $__ctz_c18_0 | 0;
    $c_7 = $341;
    label = 79;
    break;
   case 79:
    $343 = $c_7 << 1;
    $344 = $343 + 64 | 0;
    $345 = $bl_4 >>> 1;
    $346 = $345 ^ $bl_4;
    $347 = $344 & $346;
    $348 = $347 ^ $_7254;
    $349 = $314 >>> ($c_7 >>> 0);
    $_8 = $348;
    $al_6 = $349;
    $bl_5 = $bl_4;
    label = 86;
    break;
   case 80:
    $351 = $315 & 255;
    $352 = ($351 | 0) == 0;
    if ($352) {
      $__ctz_c20_0 = 6;
      $__ctz_x19_0 = $315;
      label = 82;
      break;
    } else {
      label = 81;
      break;
    }
   case 81:
    $354 = -$315 | 0;
    $355 = $315 & $354;
    $356 = $355 + 9696 | 0;
    $357 = HEAP8[$356] | 0;
    $358 = $357 & 255;
    $359 = $358 - 2 | 0;
    $c_8 = $359;
    label = 85;
    break;
   case 82:
    $360 = ($__ctz_c20_0 | 0) < 30;
    if ($360) {
      label = 83;
      break;
    } else {
      $__ctz_x19_1 = $__ctz_x19_0;
      label = 84;
      break;
    }
   case 83:
    $362 = $__ctz_x19_0 >>> 8;
    $363 = $362 & 255;
    $364 = ($363 | 0) == 0;
    $365 = $__ctz_c20_0 + 8 | 0;
    if ($364) {
      $__ctz_c20_0 = $365;
      $__ctz_x19_0 = $362;
      label = 82;
      break;
    } else {
      $__ctz_x19_1 = $362;
      label = 84;
      break;
    }
   case 84:
    $367 = -$__ctz_x19_1 | 0;
    $368 = $__ctz_x19_1 & $367;
    $369 = $368 + 9696 | 0;
    $370 = HEAP8[$369] | 0;
    $371 = $370 & 255;
    $372 = $371 + $__ctz_c20_0 | 0;
    $c_8 = $372;
    label = 85;
    break;
   case 85:
    $374 = 32 - $c_8 | 0;
    $375 = $314 << $374;
    $376 = $315 >>> ($c_8 >>> 0);
    $377 = $375 | $376;
    $378 = $314 >>> ($c_8 >>> 0);
    $379 = $c_8 << 1;
    $380 = $379 & $307;
    $381 = $380 ^ $_7254;
    $382 = ($378 | 0) == 0;
    if ($382) {
      $_8 = $381;
      $al_6 = $377;
      $bl_5 = $bl_4;
      label = 86;
      break;
    } else {
      $al_5252 = $377;
      $ah_4253 = $378;
      $_7254 = $381;
      label = 72;
      break;
    }
   case 86:
    $383 = ___gmpn_jacobi_base($al_6, $bl_5, $_8) | 0;
    $_0 = $383;
    label = 87;
    break;
   case 87:
    return $_0 | 0;
  }
  return 0;
}
function _mpn_jacobi_finish($bits) {
  $bits = $bits | 0;
  return 1 - ($bits << 1 & 2) | 0;
}
function _mpn_jacobi_update($bits, $denominator, $q) {
  $bits = $bits | 0;
  $denominator = $denominator | 0;
  $q = $q | 0;
  return HEAPU8[15e3 + ((($denominator << 2) + ($bits << 3) | 0) + $q | 0) | 0] | 0 | 0;
}
function ___gmpn_jacobi_n($ap, $bp, $n, $bits) {
  $ap = $ap | 0;
  $bp = $bp | 0;
  $n = $n | 0;
  $bits = $bits | 0;
  var $1 = 0, $__tmp_marker = 0, $M = 0, $M3 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $_n = 0, $scratch_0 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $_098_lcssa = 0, $30 = 0, $_098103 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $_098_be = 0, $47 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $59 = 0, $_199 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $79 = 0, $80 = 0, $82 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $bl_0 = 0, $bh_0 = 0, $al_0 = 0, $ah_0 = 0, $118 = 0, $119 = 0, $121 = 0, $tp_0_ph = 0, $_199_ph = 0, $_096_ph = 0, $123 = 0, $124 = 0, $126 = 0, $127 = 0, $130 = 0, $131 = 0, $133 = 0, $135 = 0, $136 = 0, $_096_bp = 0, $bp__096 = 0, $137 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $145 = 0, $146 = 0, $147 = 0, $149 = 0, $150 = 0, $152 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $_0 = 0, label = 0, __stackBase__ = 0, $tp_0_ph$phi = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = __stackBase__ | 0;
    $__tmp_marker = __stackBase__ + 8 | 0;
    $M = __stackBase__ + 16 | 0;
    $M3 = __stackBase__ + 40 | 0;
    HEAP32[$1 >> 2] = $bits;
    $2 = ($n | 0) > 999;
    if ($2) {
      label = 2;
      break;
    } else {
      $scratch_0 = $n;
      label = 3;
      break;
    }
   case 2:
    $4 = $n << 1;
    $5 = ($4 | 0) / 3 & -1;
    $6 = $n - $5 | 0;
    $7 = $6 + 1 | 0;
    $8 = ($7 | 0) / 2 & -1;
    $9 = $8 << 2;
    $10 = $9 + 4 | 0;
    $11 = ___gmpn_hgcd_itch($6) | 0;
    $12 = $n - 1 | 0;
    $13 = $12 + $5 | 0;
    $14 = ($11 | 0) > ($13 | 0);
    $15 = $14 ? $11 : $13;
    $16 = $10 + $15 | 0;
    $17 = ($16 | 0) > ($n | 0);
    $_n = $17 ? $16 : $n;
    $scratch_0 = $_n;
    label = 3;
    break;
   case 3:
    HEAP32[$__tmp_marker >> 2] = 0;
    $19 = $scratch_0 << 2;
    $20 = $19 >>> 0 < 65536;
    if ($20) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $22 = STACKTOP;
    STACKTOP = STACKTOP + $19 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $26 = $22;
    label = 6;
    break;
   case 5:
    $24 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $19) | 0;
    $26 = $24;
    label = 6;
    break;
   case 6:
    $27 = $26;
    $28 = ($n | 0) > 999;
    if ($28) {
      label = 7;
      break;
    } else {
      $_098_lcssa = $n;
      label = 8;
      break;
    }
   case 7:
    $29 = $1;
    $_098103 = $n;
    label = 9;
    break;
   case 8:
    $30 = $1;
    $_096_ph = $ap;
    $_199_ph = $_098_lcssa;
    $tp_0_ph = $27;
    label = 26;
    break;
   case 9:
    $32 = $_098103 << 1;
    $33 = ($32 | 0) / 3 & -1;
    $34 = $_098103 - $33 | 0;
    $35 = $34 + 1 | 0;
    $36 = ($35 | 0) / 2 & -1;
    $37 = $36 << 2;
    $38 = $37 + 4 | 0;
    ___gmpn_hgcd_matrix_init($M, $34, $27);
    $39 = $ap + ($33 << 2) | 0;
    $40 = $bp + ($33 << 2) | 0;
    $41 = $27 + ($38 << 2) | 0;
    $42 = ___gmpn_hgcd_jacobi($39, $40, $34, $M, $1, $41) | 0;
    $43 = ($42 | 0) > 0;
    if ($43) {
      label = 10;
      break;
    } else {
      label = 12;
      break;
    }
   case 10:
    $45 = $42 + $33 | 0;
    $46 = ___gmpn_hgcd_matrix_adjust($M, $45, $ap, $bp, $33, $41) | 0;
    $_098_be = $46;
    label = 11;
    break;
   case 11:
    $47 = ($_098_be | 0) > 999;
    if ($47) {
      $_098103 = $_098_be;
      label = 9;
      break;
    } else {
      $_098_lcssa = $_098_be;
      label = 8;
      break;
    }
   case 12:
    $49 = ___gmpn_gcd_subdiv_step($ap, $bp, $_098103, 0, 6, $29, $27) | 0;
    $50 = ($49 | 0) == 0;
    if ($50) {
      label = 13;
      break;
    } else {
      $_098_be = $49;
      label = 11;
      break;
    }
   case 13:
    $52 = HEAP32[$__tmp_marker >> 2] | 0;
    $53 = ($52 | 0) == 0;
    if ($53) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    ___gmp_tmp_reentrant_free($52);
    label = 15;
    break;
   case 15:
    $56 = HEAP32[$1 >> 2] | 0;
    $57 = ($56 | 0) == 31;
    if ($57) {
      $_0 = 0;
      label = 40;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $59 = _mpn_jacobi_finish($56) | 0;
    $_0 = $59;
    label = 40;
    break;
   case 17:
    $61 = ($_199 | 0) > 2;
    if ($61) {
      label = 18;
      break;
    } else {
      label = 32;
      break;
    }
   case 18:
    $63 = $_199 - 1 | 0;
    $64 = $_096_ph + ($63 << 2) | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    $66 = $bp + ($63 << 2) | 0;
    $67 = HEAP32[$66 >> 2] | 0;
    $68 = $67 | $65;
    $69 = ($68 | 0) < 0;
    if ($69) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    $71 = $_199 - 2 | 0;
    $72 = $_096_ph + ($71 << 2) | 0;
    $73 = HEAP32[$72 >> 2] | 0;
    $74 = $bp + ($71 << 2) | 0;
    $75 = HEAP32[$74 >> 2] | 0;
    $ah_0 = $65;
    $al_0 = $73;
    $bh_0 = $67;
    $bl_0 = $75;
    label = 24;
    break;
   case 20:
    $77 = $68 >>> 0 < 65536;
    if ($77) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    $79 = $68 >>> 0 < 256;
    $80 = $79 ? 1 : 9;
    $85 = $80;
    label = 23;
    break;
   case 22:
    $82 = $68 >>> 0 < 16777216;
    $83 = $82 ? 17 : 25;
    $85 = $83;
    label = 23;
    break;
   case 23:
    $86 = 33 - $85 | 0;
    $87 = $68 >>> ($85 >>> 0);
    $88 = $87 + 9696 | 0;
    $89 = HEAP8[$88] | 0;
    $90 = $89 & 255;
    $91 = $86 - $90 | 0;
    $92 = HEAP32[$64 >> 2] | 0;
    $93 = $92 << $91;
    $94 = $_199 - 2 | 0;
    $95 = $_096_ph + ($94 << 2) | 0;
    $96 = HEAP32[$95 >> 2] | 0;
    $97 = 32 - $91 | 0;
    $98 = $96 >>> ($97 >>> 0);
    $99 = $98 | $93;
    $100 = $96 << $91;
    $101 = $_199 - 3 | 0;
    $102 = $_096_ph + ($101 << 2) | 0;
    $103 = HEAP32[$102 >> 2] | 0;
    $104 = $103 >>> ($97 >>> 0);
    $105 = $104 | $100;
    $106 = HEAP32[$66 >> 2] | 0;
    $107 = $106 << $91;
    $108 = $bp + ($94 << 2) | 0;
    $109 = HEAP32[$108 >> 2] | 0;
    $110 = $109 >>> ($97 >>> 0);
    $111 = $110 | $107;
    $112 = $109 << $91;
    $113 = $bp + ($101 << 2) | 0;
    $114 = HEAP32[$113 >> 2] | 0;
    $115 = $114 >>> ($97 >>> 0);
    $116 = $115 | $112;
    $ah_0 = $99;
    $al_0 = $105;
    $bh_0 = $111;
    $bl_0 = $116;
    label = 24;
    break;
   case 24:
    $118 = ___gmpn_hgcd2_jacobi($ah_0, $al_0, $bh_0, $bl_0, $M3, $1) | 0;
    $119 = ($118 | 0) == 0;
    if ($119) {
      label = 27;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $121 = ___gmpn_matrix22_mul1_inverse_vector($M3, $tp_0_ph, $_096_ph, $bp, $_199) | 0;
    $_096_ph = $tp_0_ph;
    $tp_0_ph$phi = $_096_ph;
    $_199_ph = $121;
    $tp_0_ph = $tp_0_ph$phi;
    label = 26;
    break;
   case 26:
    $_199 = $_199_ph;
    label = 17;
    break;
   case 27:
    $123 = ___gmpn_gcd_subdiv_step($_096_ph, $bp, $_199, 0, 6, $30, $tp_0_ph) | 0;
    $124 = ($123 | 0) == 0;
    if ($124) {
      label = 28;
      break;
    } else {
      $_199 = $123;
      label = 17;
      break;
    }
   case 28:
    $126 = HEAP32[$__tmp_marker >> 2] | 0;
    $127 = ($126 | 0) == 0;
    if ($127) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    ___gmp_tmp_reentrant_free($126);
    label = 30;
    break;
   case 30:
    $130 = HEAP32[$1 >> 2] | 0;
    $131 = ($130 | 0) == 31;
    if ($131) {
      $_0 = 0;
      label = 40;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    $133 = _mpn_jacobi_finish($130) | 0;
    $_0 = $133;
    label = 40;
    break;
   case 32:
    $135 = HEAP32[$1 >> 2] | 0;
    $136 = $135 >>> 0 > 15;
    $_096_bp = $136 ? $_096_ph : $bp;
    $bp__096 = $136 ? $bp : $_096_ph;
    $137 = ($_199 | 0) == 1;
    if ($137) {
      label = 33;
      break;
    } else {
      label = 38;
      break;
    }
   case 33:
    $139 = HEAP32[$bp__096 >> 2] | 0;
    $140 = HEAP32[$_096_bp >> 2] | 0;
    $141 = HEAP32[$__tmp_marker >> 2] | 0;
    $142 = ($141 | 0) == 0;
    if ($142) {
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    ___gmp_tmp_reentrant_free($141);
    label = 35;
    break;
   case 35:
    $145 = ($140 | 0) == 1;
    $146 = HEAP32[$1 >> 2] | 0;
    $147 = $146 << 1;
    if ($145) {
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 36:
    $149 = $147 & 2;
    $150 = 1 - $149 | 0;
    $_0 = $150;
    label = 40;
    break;
   case 37:
    $152 = ___gmpn_jacobi_base($139, $140, $147) | 0;
    $_0 = $152;
    label = 40;
    break;
   case 38:
    $154 = $135 & 1;
    $155 = ___gmpn_jacobi_2($bp__096, $_096_bp, $154) | 0;
    $156 = HEAP32[$__tmp_marker >> 2] | 0;
    $157 = ($156 | 0) == 0;
    if ($157) {
      $_0 = $155;
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    ___gmp_tmp_reentrant_free($156);
    $_0 = $155;
    label = 40;
    break;
   case 40:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _jacobi_hook($p, $gp, $gn, $qp, $qn, $d) {
  $p = $p | 0;
  $gp = $gp | 0;
  $gn = $gn | 0;
  $qp = $qp | 0;
  $qn = $qn | 0;
  $d = $d | 0;
  var $1 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p;
    $2 = ($gp | 0) == 0;
    if ($2) {
      label = 5;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $4 = ($gn | 0) == 1;
    if ($4) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $6 = HEAP32[$gp >> 2] | 0;
    $7 = ($6 | 0) == 1;
    if ($7) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    HEAP32[$1 >> 2] = 31;
    label = 7;
    break;
   case 5:
    $10 = ($qp | 0) == 0;
    if ($10) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $12 = HEAP32[$1 >> 2] | 0;
    $13 = HEAP32[$qp >> 2] | 0;
    $14 = $13 & 3;
    $15 = _mpn_jacobi_update($12, $d, $14) | 0;
    HEAP32[$1 >> 2] = $15;
    label = 7;
    break;
   case 7:
    return;
  }
}
function ___gmpn_matrix22_mul_strassen($r0, $r1, $r2, $r3, $rn, $m0, $m1, $m2, $m3, $mn, $tp) {
  $r0 = $r0 | 0;
  $r1 = $r1 | 0;
  $r2 = $r2 | 0;
  $r3 = $r3 | 0;
  $rn = $rn | 0;
  $m0 = $m0 | 0;
  $m1 = $m1 | 0;
  $m2 = $m2 | 0;
  $m3 = $m3 | 0;
  $mn = $mn | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $_sum = 0, $4 = 0, $5 = 0, $6 = 0, $_sum242 = 0, $7 = 0, $8 = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $r1s_0248 = 0, $s0s_0 = 0, $39 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $51 = 0, $_sum243 = 0, $53 = 0, $54 = 0, $56 = 0, $_sum247 = 0, $57 = 0, $59 = 0, $_sum244 = 0, $60 = 0, $t0s_0 = 0, $_sum245 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $68 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $79 = 0, $81 = 0, $83 = 0, $_sum246 = 0, $85 = 0, $86 = 0, $88 = 0, $90 = 0, $r3s_0 = 0, $92 = 0, $94 = 0, $96 = 0, $97 = 0, $99 = 0, $100 = 0, $101 = 0, $103 = 0, $t0s_1 = 0, $105 = 0, $107 = 0, $109 = 0, $112 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $131 = 0, $133 = 0, $135 = 0, $136 = 0, $138 = 0, $140 = 0, $142 = 0, $144 = 0, $146 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $rn + 1 | 0;
    $2 = $tp + ($1 << 2) | 0;
    $3 = $mn + 1 | 0;
    $_sum = $3 + $1 | 0;
    $4 = $tp + ($_sum << 2) | 0;
    $5 = $mn + $rn | 0;
    $6 = $5 + 1 | 0;
    $_sum242 = $_sum + $6 | 0;
    $7 = $tp + ($_sum242 << 2) | 0;
    $8 = ($rn | 0) >= ($mn | 0);
    if ($8) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $10 = ___gmpn_mul($4, $r1, $rn, $m2, $mn) | 0;
    label = 4;
    break;
   case 3:
    $12 = ___gmpn_mul($4, $m2, $mn, $r1, $rn) | 0;
    label = 4;
    break;
   case 4:
    $14 = _abs_sub_n($r3, $r3, $r2, $rn) | 0;
    $15 = ($14 | 0) == 0;
    if ($15) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $16 = ___gmpn_add_n($r1, $r1, $r3, $rn) | 0;
    $17 = $r1 + ($rn << 2) | 0;
    HEAP32[$17 >> 2] = $16;
    label = 8;
    break;
   case 6:
    $19 = _abs_sub_n($r1, $r1, $r3, $rn) | 0;
    $20 = $r1 + ($rn << 2) | 0;
    HEAP32[$20 >> 2] = 0;
    $21 = ($19 | 0) == 0;
    if ($21) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $23 = ___gmpn_add_n($tp, $r1, $r0, $rn) | 0;
    $24 = $tp + ($rn << 2) | 0;
    HEAP32[$24 >> 2] = $23;
    $s0s_0 = 0;
    $r1s_0248 = $19;
    $37 = 1;
    label = 11;
    break;
   case 8:
    $26 = $r1 + ($rn << 2) | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = ($27 | 0) == 0;
    if ($28) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $30 = ___gmpn_sub_n($tp, $r1, $r0, $rn) | 0;
    $31 = $27 - $30 | 0;
    $32 = $tp + ($rn << 2) | 0;
    HEAP32[$32 >> 2] = $31;
    $s0s_0 = 1;
    $r1s_0248 = 0;
    $37 = 0;
    label = 11;
    break;
   case 10:
    $34 = _abs_sub_n($tp, $r0, $r1, $rn) | 0;
    $35 = $tp + ($rn << 2) | 0;
    HEAP32[$35 >> 2] = 0;
    $s0s_0 = $34;
    $r1s_0248 = 0;
    $37 = 0;
    label = 11;
    break;
   case 11:
    if ($8) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $39 = ___gmpn_mul($7, $r0, $rn, $m0, $mn) | 0;
    label = 14;
    break;
   case 13:
    $41 = ___gmpn_mul($7, $m0, $mn, $r0, $rn) | 0;
    label = 14;
    break;
   case 14:
    $43 = ___gmpn_add_n($r0, $4, $7, $5) | 0;
    $44 = $r0 + ($5 << 2) | 0;
    HEAP32[$44 >> 2] = $43;
    $45 = _abs_sub_n($2, $m3, $m2, $mn) | 0;
    $46 = $14 ^ 1;
    $47 = $46 ^ $45;
    if ($8) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $49 = ___gmpn_mul($7, $r3, $rn, $2, $mn) | 0;
    label = 17;
    break;
   case 16:
    $51 = ___gmpn_mul($7, $2, $mn, $r3, $rn) | 0;
    label = 17;
    break;
   case 17:
    $_sum243 = $_sum242 + $5 | 0;
    $53 = $tp + ($_sum243 << 2) | 0;
    HEAP32[$53 >> 2] = 0;
    $54 = ($45 | 0) == 0;
    if ($54) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $56 = _abs_sub_n($2, $m1, $2, $mn) | 0;
    $_sum247 = $1 + $mn | 0;
    $57 = $tp + ($_sum247 << 2) | 0;
    HEAP32[$57 >> 2] = 0;
    $t0s_0 = $56;
    label = 20;
    break;
   case 19:
    $59 = ___gmpn_add_n($2, $2, $m1, $mn) | 0;
    $_sum244 = $1 + $mn | 0;
    $60 = $tp + ($_sum244 << 2) | 0;
    HEAP32[$60 >> 2] = $59;
    $t0s_0 = 0;
    label = 20;
    break;
   case 20:
    $_sum245 = $1 + $mn | 0;
    $62 = $tp + ($_sum245 << 2) | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    $64 = ($63 | 0) == 0;
    if ($64) {
      label = 26;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $66 = ($3 | 0) > ($rn | 0);
    if ($66) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $68 = ___gmpn_mul($r3, $r1, $rn, $2, $3) | 0;
    label = 24;
    break;
   case 23:
    $70 = ___gmpn_mul($r3, $2, $3, $r1, $rn) | 0;
    label = 24;
    break;
   case 24:
    $72 = $r1 + ($rn << 2) | 0;
    $73 = HEAP32[$72 >> 2] | 0;
    $74 = ($73 | 0) == 0;
    if ($74) {
      label = 29;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $76 = $r3 + ($rn << 2) | 0;
    $77 = ___gmpn_add_n($76, $76, $2, $3) | 0;
    label = 29;
    break;
   case 26:
    $79 = ($1 | 0) < ($mn | 0);
    if ($79) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $81 = ___gmpn_mul($r3, $r1, $1, $2, $mn) | 0;
    label = 29;
    break;
   case 28:
    $83 = ___gmpn_mul($r3, $2, $mn, $r1, $1) | 0;
    label = 29;
    break;
   case 29:
    $_sum246 = $_sum + $5 | 0;
    $85 = $tp + ($_sum246 << 2) | 0;
    HEAP32[$85 >> 2] = 0;
    $86 = ($r1s_0248 | 0) == ($t0s_0 | 0);
    if ($86) {
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    $88 = _abs_sub_n($r3, $4, $r3, $6) | 0;
    $r3s_0 = $88;
    label = 32;
    break;
   case 31:
    $90 = ___gmpn_add_n($r3, $r3, $4, $6) | 0;
    $r3s_0 = 0;
    label = 32;
    break;
   case 32:
    $92 = ($t0s_0 | 0) == 0;
    if ($92) {
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $94 = ___gmpn_add_n($2, $2, $m0, $mn) | 0;
    HEAP32[$62 >> 2] = $94;
    $t0s_1 = $t0s_0;
    label = 37;
    break;
   case 34:
    $96 = HEAP32[$62 >> 2] | 0;
    $97 = ($96 | 0) == 0;
    if ($97) {
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $99 = ___gmpn_sub_n($2, $2, $m0, $mn) | 0;
    $100 = HEAP32[$62 >> 2] | 0;
    $101 = $100 - $99 | 0;
    HEAP32[$62 >> 2] = $101;
    $t0s_1 = $t0s_0;
    label = 37;
    break;
   case 36:
    $103 = _abs_sub_n($2, $2, $m0, $mn) | 0;
    $t0s_1 = $103;
    label = 37;
    break;
   case 37:
    $105 = ($3 | 0) > ($rn | 0);
    if ($105) {
      label = 39;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    $107 = ___gmpn_mul($4, $r2, $rn, $2, $3) | 0;
    label = 40;
    break;
   case 39:
    $109 = ___gmpn_mul($4, $2, $3, $r2, $rn) | 0;
    label = 40;
    break;
   case 40:
    if ($37) {
      label = 41;
      break;
    } else {
      label = 42;
      break;
    }
   case 41:
    $112 = ___gmpn_sub_n($r1, $r2, $r1, $rn) | 0;
    label = 43;
    break;
   case 42:
    $114 = ___gmpn_add_n($r1, $r1, $r2, $rn) | 0;
    $115 = $r1 + ($rn << 2) | 0;
    $116 = HEAP32[$115 >> 2] | 0;
    $117 = $116 + $114 | 0;
    HEAP32[$115 >> 2] = $117;
    label = 43;
    break;
   case 43:
    $119 = $1 + $mn | 0;
    $120 = _add_signed_n($r2, $r3, $r3s_0, $4, $t0s_1, $119) | 0;
    $121 = _add_signed_n($r3, $r3, $r3s_0, $7, $47, $119) | 0;
    $122 = ($1 | 0) < ($mn | 0);
    if ($122) {
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    $124 = ___gmpn_mul($4, $tp, $1, $m1, $mn) | 0;
    label = 46;
    break;
   case 45:
    $126 = ___gmpn_mul($4, $m1, $mn, $tp, $1) | 0;
    label = 46;
    break;
   case 46:
    $128 = ___gmpn_add_n($2, $m3, $m1, $mn) | 0;
    HEAP32[$62 >> 2] = $128;
    $129 = ($1 | 0) < ($3 | 0);
    if ($129) {
      label = 48;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    $131 = ___gmpn_mul($7, $r1, $1, $2, $3) | 0;
    label = 49;
    break;
   case 48:
    $133 = ___gmpn_mul($7, $2, $3, $r1, $1) | 0;
    label = 49;
    break;
   case 49:
    $135 = _add_signed_n($r1, $r3, $121, $4, $s0s_0, $119) | 0;
    $136 = ($121 | 0) == 0;
    if ($136) {
      label = 51;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    $138 = ___gmpn_add_n($r3, $7, $r3, $119) | 0;
    label = 52;
    break;
   case 51:
    $140 = ___gmpn_sub_n($r3, $7, $r3, $119) | 0;
    label = 52;
    break;
   case 52:
    $142 = ($120 | 0) == 0;
    if ($142) {
      label = 54;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    $144 = ___gmpn_add_n($r2, $7, $r2, $119) | 0;
    label = 55;
    break;
   case 54:
    $146 = ___gmpn_sub_n($r2, $7, $r2, $119) | 0;
    label = 55;
    break;
   case 55:
    return;
  }
}
function _abs_sub_n($rp, $ap, $bp, $n) {
  $rp = $rp | 0;
  $ap = $ap | 0;
  $bp = $bp | 0;
  $n = $n | 0;
  var $__gmp_i_0 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $14 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__gmp_i_0 = $n;
    label = 2;
    break;
   case 2:
    $2 = $__gmp_i_0 - 1 | 0;
    $3 = ($__gmp_i_0 | 0) > 0;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $5 = $ap + ($2 << 2) | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $bp + ($2 << 2) | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($6 | 0) == ($8 | 0);
    if ($9) {
      $__gmp_i_0 = $2;
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $11 = $6 >>> 0 > $8 >>> 0;
    if ($11) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $12 = ___gmpn_sub_n($rp, $ap, $bp, $n) | 0;
    $_0 = 0;
    label = 7;
    break;
   case 6:
    $14 = ___gmpn_sub_n($rp, $bp, $ap, $n) | 0;
    $_0 = 1;
    label = 7;
    break;
   case 7:
    return $_0 | 0;
  }
  return 0;
}
function _add_signed_n($rp, $ap, $as, $bp, $bs, $n) {
  $rp = $rp | 0;
  $ap = $ap | 0;
  $as = $as | 0;
  $bp = $bp | 0;
  $bs = $bs | 0;
  $n = $n | 0;
  var $1 = 0, $3 = 0, $4 = 0, $6 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($as | 0) == ($bs | 0);
    if ($1) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = _abs_sub_n($rp, $ap, $bp, $n) | 0;
    $4 = $3 ^ $as;
    $_0 = $4;
    label = 4;
    break;
   case 3:
    $6 = ___gmpn_add_n($rp, $ap, $bp, $n) | 0;
    $_0 = $as;
    label = 4;
    break;
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_matrix22_mul($r0, $r1, $r2, $r3, $rn, $m0, $m1, $m2, $m3, $mn, $tp) {
  $r0 = $r0 | 0;
  $r1 = $r1 | 0;
  $r2 = $r2 | 0;
  $r3 = $r3 | 0;
  $rn = $rn | 0;
  $m0 = $m0 | 0;
  $m1 = $m1 | 0;
  $m2 = $m2 | 0;
  $m3 = $m3 | 0;
  $mn = $mn | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $or_cond = 0, $4 = 0, $_sum = 0, $_sum85 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $scevgep = 0, $i_090 = 0, $_089 = 0, $_08488 = 0, $13 = 0, $__n_0 = 0, $__dst_0 = 0, $_0_pn = 0, $__x_0 = 0, $__src_0 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $__dst_1 = 0, $__x_1 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($rn | 0) > 29;
    $2 = ($mn | 0) > 29;
    $or_cond = $1 & $2;
    if ($or_cond) {
      label = 11;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $4 = $tp + ($rn << 2) | 0;
    $_sum = $rn << 1;
    $_sum85 = $_sum + $mn | 0;
    $5 = $tp + ($_sum85 << 2) | 0;
    $6 = ($rn | 0) == 0;
    $7 = ($rn | 0) < ($mn | 0);
    $8 = $mn + $rn | 0;
    $9 = $rn - 1 | 0;
    $10 = ($9 | 0) == 0;
    $scevgep = $tp + ($9 << 2) | 0;
    $_08488 = $r1;
    $_089 = $r0;
    $i_090 = 0;
    label = 3;
    break;
   case 3:
    if ($6) {
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $13 = HEAP32[$_089 >> 2] | 0;
    if ($10) {
      $__x_1 = $13;
      $__dst_1 = $tp;
      label = 6;
      break;
    } else {
      $__x_0 = $13;
      $_0_pn = $_089;
      $__dst_0 = $tp;
      $__n_0 = $9;
      label = 5;
      break;
    }
   case 5:
    $__src_0 = $_0_pn + 4 | 0;
    $14 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $15 = HEAP32[$__src_0 >> 2] | 0;
    $16 = $__n_0 - 1 | 0;
    $17 = ($16 | 0) == 0;
    if ($17) {
      $__x_1 = $15;
      $__dst_1 = $scevgep;
      label = 6;
      break;
    } else {
      $__x_0 = $15;
      $_0_pn = $__src_0;
      $__dst_0 = $14;
      $__n_0 = $16;
      label = 5;
      break;
    }
   case 6:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 7;
    break;
   case 7:
    if ($7) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $20 = ___gmpn_mul($4, $_089, $rn, $m0, $mn) | 0;
    $21 = ___gmpn_mul($5, $_08488, $rn, $m3, $mn) | 0;
    $22 = ___gmpn_mul($_089, $_08488, $rn, $m2, $mn) | 0;
    $23 = ___gmpn_mul($_08488, $tp, $rn, $m1, $mn) | 0;
    label = 10;
    break;
   case 9:
    $25 = ___gmpn_mul($4, $m0, $mn, $_089, $rn) | 0;
    $26 = ___gmpn_mul($5, $m3, $mn, $_08488, $rn) | 0;
    $27 = ___gmpn_mul($_089, $m2, $mn, $_08488, $rn) | 0;
    $28 = ___gmpn_mul($_08488, $m1, $mn, $tp, $rn) | 0;
    label = 10;
    break;
   case 10:
    $30 = ___gmpn_add_n($_089, $_089, $4, $8) | 0;
    $31 = $_089 + ($8 << 2) | 0;
    HEAP32[$31 >> 2] = $30;
    $32 = ___gmpn_add_n($_08488, $_08488, $5, $8) | 0;
    $33 = $_08488 + ($8 << 2) | 0;
    HEAP32[$33 >> 2] = $32;
    $34 = $i_090 + 1 | 0;
    $exitcond = ($34 | 0) == 2;
    if ($exitcond) {
      label = 12;
      break;
    } else {
      $_08488 = $r3;
      $_089 = $r2;
      $i_090 = $34;
      label = 3;
      break;
    }
   case 11:
    ___gmpn_matrix22_mul_strassen($r0, $r1, $r2, $r3, $rn, $m0, $m1, $m2, $m3, $mn, $tp);
    label = 12;
    break;
   case 12:
    return;
  }
}
function ___gmpn_matrix22_mul1_inverse_vector($M, $rp, $ap, $bp, $n) {
  $M = $M | 0;
  $rp = $rp | 0;
  $ap = $ap | 0;
  $bp = $bp | 0;
  $n = $n | 0;
  var $13 = 0;
  ___gmpn_mul_1($rp, $ap, $n, HEAP32[$M + 12 >> 2] | 0);
  ___gmpn_submul_1($rp, $bp, $n, HEAP32[$M + 4 >> 2] | 0);
  ___gmpn_mul_1($bp, $bp, $n, HEAP32[$M >> 2] | 0);
  ___gmpn_submul_1($bp, $ap, $n, HEAP32[$M + 8 >> 2] | 0);
  $13 = $n - 1 | 0;
  return $n - ((HEAP32[$bp + ($13 << 2) >> 2] | HEAP32[$rp + ($13 << 2) >> 2] | 0) == 0 & 1) | 0;
}
function ___gmpn_hgcd_matrix_init($M, $n, $p) {
  $M = $M | 0;
  $n = $n | 0;
  $p = $p | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_mask = 0, $6 = 0, $p19 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n + 1 | 0;
    $2 = ($1 | 0) / 2 & -1;
    $3 = $2 + 1 | 0;
    $4 = $M | 0;
    HEAP32[$4 >> 2] = $3;
    $5 = $M + 4 | 0;
    HEAP32[$5 >> 2] = 1;
    $_mask = $3 & 1073741823;
    $6 = ($_mask | 0) == 0;
    if ($6) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $p19 = $p;
    $7 = $2 << 4;
    $8 = $7 + 16 | 0;
    _memset($p19 | 0, 0, $8 | 0);
    label = 3;
    break;
   case 3:
    $10 = $M + 8 | 0;
    HEAP32[$10 >> 2] = $p;
    $11 = $p + ($3 << 2) | 0;
    $12 = $M + 12 | 0;
    HEAP32[$12 >> 2] = $11;
    $13 = $3 << 1;
    $14 = $p + ($13 << 2) | 0;
    $15 = $M + 16 | 0;
    HEAP32[$15 >> 2] = $14;
    $16 = $3 * 3 & -1;
    $17 = $p + ($16 << 2) | 0;
    $18 = $M + 20 | 0;
    HEAP32[$18 >> 2] = $17;
    HEAP32[$17 >> 2] = 1;
    $19 = HEAP32[$10 >> 2] | 0;
    HEAP32[$19 >> 2] = 1;
    return;
  }
}
function ___gmpn_hgcd_matrix_update_q($M, $qp, $qn, $col, $tp) {
  $M = $M | 0;
  $qp = $qp | 0;
  $qn = $qn | 0;
  $col = $col | 0;
  $tp = $tp | 0;
  var $c = 0, $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $n_0 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $n_1 = 0, $93 = 0, $95 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $c = __stackBase__ | 0;
    $1 = ($qn | 0) == 1;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $3 = HEAP32[$qp >> 2] | 0;
    $4 = $M + 8 + ($col << 2) | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = 1 - $col | 0;
    $7 = $M + 8 + ($6 << 2) | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $M + 4 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = ___gmpn_addmul_1($5, $8, $10, $3) | 0;
    $12 = $M + 16 + ($col << 2) | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $M + 16 + ($6 << 2) | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = HEAP32[$9 >> 2] | 0;
    $17 = ___gmpn_addmul_1($13, $15, $16, $3) | 0;
    $18 = HEAP32[$9 >> 2] | 0;
    $19 = HEAP32[$4 >> 2] | 0;
    $20 = $19 + ($18 << 2) | 0;
    HEAP32[$20 >> 2] = $11;
    $21 = HEAP32[$9 >> 2] | 0;
    $22 = HEAP32[$12 >> 2] | 0;
    $23 = $22 + ($21 << 2) | 0;
    HEAP32[$23 >> 2] = $17;
    $24 = $17 | $11;
    $25 = ($24 | 0) != 0;
    $26 = $25 & 1;
    $27 = HEAP32[$9 >> 2] | 0;
    $28 = $27 + $26 | 0;
    HEAP32[$9 >> 2] = $28;
    label = 14;
    break;
   case 3:
    $30 = $M + 4 | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = 1 - $col | 0;
    $33 = $M + 16 + ($32 << 2) | 0;
    $34 = $M + 8 + ($32 << 2) | 0;
    $n_0 = $31;
    label = 4;
    break;
   case 4:
    $36 = $n_0 + $qn | 0;
    $37 = ($36 | 0) > ($31 | 0);
    if ($37) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $39 = $n_0 - 1 | 0;
    $40 = HEAP32[$34 >> 2] | 0;
    $41 = $40 + ($39 << 2) | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    $43 = ($42 | 0) == 0;
    if ($43) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $45 = HEAP32[$33 >> 2] | 0;
    $46 = $45 + ($39 << 2) | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    $48 = ($47 | 0) == 0;
    if ($48) {
      $n_0 = $39;
      label = 4;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $50 = ($n_0 | 0) < ($qn | 0);
    $51 = 1 - $col | 0;
    $52 = $M + 8 + ($51 << 2) | 0;
    $53 = HEAP32[$52 >> 2] | 0;
    if ($50) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $55 = ___gmpn_mul($tp, $53, $n_0, $qp, $qn) | 0;
    label = 10;
    break;
   case 9:
    $57 = ___gmpn_mul($tp, $qp, $qn, $53, $n_0) | 0;
    label = 10;
    break;
   case 10:
    $59 = $M + 8 + ($col << 2) | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    $61 = HEAP32[$30 >> 2] | 0;
    $62 = ___gmpn_add($60, $tp, $36, $60, $61) | 0;
    $63 = $c | 0;
    HEAP32[$63 >> 2] = $62;
    $64 = $M + 16 + ($51 << 2) | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    if ($50) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 11:
    $67 = $c + 4 | 0;
    $68 = $M + 8 + ($col << 2) | 0;
    $69 = HEAP32[$68 >> 2] | 0;
    $70 = $69 + ($36 << 2) | 0;
    HEAP32[$70 >> 2] = $103;
    $71 = HEAP32[$67 >> 2] | 0;
    $72 = $M + 16 + ($col << 2) | 0;
    $73 = HEAP32[$72 >> 2] | 0;
    $74 = $73 + ($36 << 2) | 0;
    HEAP32[$74 >> 2] = $71;
    $75 = $36 + 1 | 0;
    $n_1 = $75;
    label = 13;
    break;
   case 12:
    $77 = $36 - 1 | 0;
    $78 = $M + 8 + ($col << 2) | 0;
    $79 = HEAP32[$78 >> 2] | 0;
    $80 = $79 + ($77 << 2) | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    $82 = $M + 16 + ($col << 2) | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = $83 + ($77 << 2) | 0;
    $85 = HEAP32[$84 >> 2] | 0;
    $86 = $85 | $81;
    $87 = ($86 | 0) == 0;
    $88 = $87 & 1;
    $89 = $36 - $88 | 0;
    $n_1 = $89;
    label = 13;
    break;
   case 13:
    HEAP32[$30 >> 2] = $n_1;
    label = 14;
    break;
   case 14:
    STACKTOP = __stackBase__;
    return;
   case 15:
    $93 = ___gmpn_mul($tp, $65, $n_0, $qp, $qn) | 0;
    label = 17;
    break;
   case 16:
    $95 = ___gmpn_mul($tp, $qp, $qn, $65, $n_0) | 0;
    label = 17;
    break;
   case 17:
    $97 = $M + 16 + ($col << 2) | 0;
    $98 = HEAP32[$97 >> 2] | 0;
    $99 = HEAP32[$30 >> 2] | 0;
    $100 = ___gmpn_add($98, $tp, $36, $98, $99) | 0;
    $101 = $c + 4 | 0;
    HEAP32[$101 >> 2] = $100;
    $102 = $c | 0;
    $103 = HEAP32[$102 >> 2] | 0;
    $104 = $100 | $103;
    $105 = ($104 | 0) == 0;
    if ($105) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
  }
}
function _div1($rp, $n0, $d0) {
  $rp = $rp | 0;
  $n0 = $n0 | 0;
  $d0 = $d0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cnt_037 = 0, $_036 = 0, $5 = 0, $6 = 0, $7 = 0, $cnt_133 = 0, $q_032 = 0, $_131 = 0, $_02630 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $_127 = 0, $q_1 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $cnt1_052 = 0, $_251 = 0, $18 = 0, $19 = 0, $20 = 0, $cnt1_146 = 0, $q_245 = 0, $_344 = 0, $_22843 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $_329 = 0, $q_3 = 0, $28 = 0, $29 = 0, $_4 = 0, $q_4 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($n0 | 0) < 0;
    if ($1) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $2 = $d0 >>> 0 > $n0 >>> 0;
    if ($2) {
      $q_4 = 0;
      $_4 = $n0;
      label = 14;
      break;
    } else {
      $_251 = $d0;
      $cnt1_052 = 0;
      label = 10;
      break;
    }
   case 3:
    $3 = ($d0 | 0) > -1;
    if ($3) {
      $_036 = $d0;
      $cnt_037 = 1;
      label = 5;
      break;
    } else {
      $_02630 = $n0;
      $_131 = $d0;
      $q_032 = 0;
      $cnt_133 = 1;
      label = 6;
      break;
    }
   case 4:
    $4 = ($6 | 0) == 0;
    if ($4) {
      $q_4 = 0;
      $_4 = $n0;
      label = 14;
      break;
    } else {
      $_02630 = $n0;
      $_131 = $5;
      $q_032 = 0;
      $cnt_133 = $6;
      label = 6;
      break;
    }
   case 5:
    $5 = $_036 << 1;
    $6 = $cnt_037 + 1 | 0;
    $7 = ($5 | 0) > -1;
    if ($7) {
      $_036 = $5;
      $cnt_037 = $6;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 6:
    $8 = $q_032 << 1;
    $9 = $_02630 >>> 0 < $_131 >>> 0;
    if ($9) {
      $q_1 = $8;
      $_127 = $_02630;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $11 = $_02630 - $_131 | 0;
    $12 = $8 | 1;
    $q_1 = $12;
    $_127 = $11;
    label = 8;
    break;
   case 8:
    $14 = $_131 >>> 1;
    $15 = $cnt_133 - 1 | 0;
    $16 = ($15 | 0) == 0;
    if ($16) {
      $q_4 = $q_1;
      $_4 = $_127;
      label = 14;
      break;
    } else {
      $_02630 = $_127;
      $_131 = $14;
      $q_032 = $q_1;
      $cnt_133 = $15;
      label = 6;
      break;
    }
   case 9:
    $17 = ($19 | 0) == 0;
    if ($17) {
      $q_4 = 0;
      $_4 = $n0;
      label = 14;
      break;
    } else {
      $_22843 = $n0;
      $_344 = $18;
      $q_245 = 0;
      $cnt1_146 = $19;
      label = 11;
      break;
    }
   case 10:
    $18 = $_251 << 1;
    $19 = $cnt1_052 + 1 | 0;
    $20 = $18 >>> 0 > $n0 >>> 0;
    if ($20) {
      label = 9;
      break;
    } else {
      $_251 = $18;
      $cnt1_052 = $19;
      label = 10;
      break;
    }
   case 11:
    $21 = $_344 >>> 1;
    $22 = $q_245 << 1;
    $23 = $_22843 >>> 0 < $21 >>> 0;
    if ($23) {
      $q_3 = $22;
      $_329 = $_22843;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $25 = $_22843 - $21 | 0;
    $26 = $22 | 1;
    $q_3 = $26;
    $_329 = $25;
    label = 13;
    break;
   case 13:
    $28 = $cnt1_146 - 1 | 0;
    $29 = ($28 | 0) == 0;
    if ($29) {
      $q_4 = $q_3;
      $_4 = $_329;
      label = 14;
      break;
    } else {
      $_22843 = $_329;
      $_344 = $21;
      $q_245 = $q_3;
      $cnt1_146 = $28;
      label = 11;
      break;
    }
   case 14:
    HEAP32[$rp >> 2] = $_4;
    return $q_4 | 0;
  }
  return 0;
}
function _div2($rp, $nh, $nl, $dh, $dl) {
  $rp = $rp | 0;
  $nh = $nh | 0;
  $nl = $nl | 0;
  $dh = $dh | 0;
  $dl = $dl | 0;
  var $1 = 0, $2 = 0, $3 = 0, $cnt_086 = 0, $_06285 = 0, $_06684 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_080 = 0, $_05779 = 0, $cnt_178 = 0, $q_077 = 0, $_16376 = 0, $_16774 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $or_cond = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $q_1 = 0, $_158 = 0, $_1 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $_268 = 0, $_264 = 0, $cnt1_0 = 0, $29 = 0, $31 = 0, $32 = 0, $or_cond70 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $_297 = 0, $cnt1_196 = 0, $_25995 = 0, $q_294 = 0, $_36593 = 0, $_36992 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $or_cond71 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $q_3 = 0, $_360 = 0, $_3 = 0, $55 = 0, $56 = 0, $q_4 = 0, $_461 = 0, $_4 = 0, $57 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($nh | 0) < 0;
    if ($1) {
      label = 2;
      break;
    } else {
      $cnt1_0 = 0;
      $_264 = $dl;
      $_268 = $dh;
      label = 9;
      break;
    }
   case 2:
    $2 = ($dh | 0) > -1;
    if ($2) {
      $_06684 = $dh;
      $_06285 = $dl;
      $cnt_086 = 1;
      label = 4;
      break;
    } else {
      $_16774 = $dh;
      $_16376 = $dl;
      $q_077 = 0;
      $cnt_178 = 1;
      $_05779 = $nl;
      $_080 = $nh;
      label = 5;
      break;
    }
   case 3:
    $3 = ($8 | 0) == 0;
    if ($3) {
      $_4 = $nh;
      $_461 = $nl;
      $q_4 = 0;
      label = 17;
      break;
    } else {
      $_16774 = $6;
      $_16376 = $7;
      $q_077 = 0;
      $cnt_178 = $8;
      $_05779 = $nl;
      $_080 = $nh;
      label = 5;
      break;
    }
   case 4:
    $4 = $_06684 << 1;
    $5 = $_06285 >>> 31;
    $6 = $5 | $4;
    $7 = $_06285 << 1;
    $8 = $cnt_086 + 1 | 0;
    $9 = ($6 | 0) > -1;
    if ($9) {
      $_06684 = $6;
      $_06285 = $7;
      $cnt_086 = $8;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 5:
    $10 = $q_077 << 1;
    $11 = $_080 >>> 0 > $_16774 >>> 0;
    if ($11) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $13 = ($_080 | 0) != ($_16774 | 0);
    $14 = $_05779 >>> 0 < $_16376 >>> 0;
    $or_cond = $13 | $14;
    if ($or_cond) {
      $_1 = $_080;
      $_158 = $_05779;
      $q_1 = $10;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $16 = $_05779 - $_16376 | 0;
    $17 = $_080 - $_16774 | 0;
    $18 = $_05779 >>> 0 < $_16376 >>> 0;
    $19 = $18 & 1;
    $20 = $17 - $19 | 0;
    $21 = $10 | 1;
    $_1 = $20;
    $_158 = $16;
    $q_1 = $21;
    label = 8;
    break;
   case 8:
    $23 = $_16774 << 31;
    $24 = $_16376 >>> 1;
    $25 = $24 | $23;
    $26 = $_16774 >>> 1;
    $27 = $cnt_178 - 1 | 0;
    $28 = ($27 | 0) == 0;
    if ($28) {
      $_4 = $_1;
      $_461 = $_158;
      $q_4 = $q_1;
      label = 17;
      break;
    } else {
      $_16774 = $26;
      $_16376 = $25;
      $q_077 = $q_1;
      $cnt_178 = $27;
      $_05779 = $_158;
      $_080 = $_1;
      label = 5;
      break;
    }
   case 9:
    $29 = $_268 >>> 0 < $nh >>> 0;
    if ($29) {
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $31 = ($_268 | 0) != ($nh | 0);
    $32 = $_264 >>> 0 > $nl >>> 0;
    $or_cond70 = $31 | $32;
    if ($or_cond70) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $33 = ($cnt1_0 | 0) == 0;
    if ($33) {
      $_4 = $nh;
      $_461 = $nl;
      $q_4 = 0;
      label = 17;
      break;
    } else {
      $_36992 = $_268;
      $_36593 = $_264;
      $q_294 = 0;
      $_25995 = $nl;
      $cnt1_196 = $cnt1_0;
      $_297 = $nh;
      label = 13;
      break;
    }
   case 12:
    $34 = $_268 << 1;
    $35 = $_264 >>> 31;
    $36 = $35 | $34;
    $37 = $_264 << 1;
    $38 = $cnt1_0 + 1 | 0;
    $cnt1_0 = $38;
    $_264 = $37;
    $_268 = $36;
    label = 9;
    break;
   case 13:
    $39 = $_36992 << 31;
    $40 = $_36593 >>> 1;
    $41 = $40 | $39;
    $42 = $_36992 >>> 1;
    $43 = $q_294 << 1;
    $44 = $_297 >>> 0 > $42 >>> 0;
    if ($44) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $46 = ($_297 | 0) != ($42 | 0);
    $47 = $_25995 >>> 0 < $41 >>> 0;
    $or_cond71 = $46 | $47;
    if ($or_cond71) {
      $_3 = $_297;
      $_360 = $_25995;
      $q_3 = $43;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $49 = $_25995 - $41 | 0;
    $50 = $_297 - $42 | 0;
    $51 = $_25995 >>> 0 < $41 >>> 0;
    $52 = $51 & 1;
    $53 = $50 - $52 | 0;
    $54 = $43 | 1;
    $_3 = $53;
    $_360 = $49;
    $q_3 = $54;
    label = 16;
    break;
   case 16:
    $55 = $cnt1_196 - 1 | 0;
    $56 = ($55 | 0) == 0;
    if ($56) {
      $_4 = $_3;
      $_461 = $_360;
      $q_4 = $q_3;
      label = 17;
      break;
    } else {
      $_36992 = $42;
      $_36593 = $41;
      $q_294 = $q_3;
      $_25995 = $_360;
      $cnt1_196 = $55;
      $_297 = $_3;
      label = 13;
      break;
    }
   case 17:
    HEAP32[$rp >> 2] = $_461;
    $57 = $rp + 4 | 0;
    HEAP32[$57 >> 2] = $_4;
    return $q_4 | 0;
  }
  return 0;
}
function ___gmpn_hgcd_matrix_mul_1($M, $M1, $tp) {
  $M = $M | 0;
  $M1 = $M1 | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $__n_0 = 0, $__dst_0 = 0, $_pn29 = 0, $__x_0 = 0, $__src_0 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $scevgep37 = 0, $__dst_1 = 0, $__x_1 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $__n1_0 = 0, $__dst2_0 = 0, $_pn = 0, $__x4_0 = 0, $__src3_0 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $scevgep = 0, $__dst2_1 = 0, $__x4_1 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $M + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) == 0;
    if ($3) {
      label = 7;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = $2 - 1 | 0;
    $6 = $M + 8 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($5 | 0) == 0;
    if ($9) {
      $__x_1 = $8;
      $__dst_1 = $tp;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $10 = $2 - 1 | 0;
    $__x_0 = $8;
    $_pn29 = $7;
    $__dst_0 = $tp;
    $__n_0 = $5;
    label = 4;
    break;
   case 4:
    $__src_0 = $_pn29 + 4 | 0;
    $12 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $13 = HEAP32[$__src_0 >> 2] | 0;
    $14 = $__n_0 - 1 | 0;
    $15 = ($14 | 0) == 0;
    if ($15) {
      label = 5;
      break;
    } else {
      $__x_0 = $13;
      $_pn29 = $__src_0;
      $__dst_0 = $12;
      $__n_0 = $14;
      label = 4;
      break;
    }
   case 5:
    $scevgep37 = $tp + ($10 << 2) | 0;
    $__x_1 = $13;
    $__dst_1 = $scevgep37;
    label = 6;
    break;
   case 6:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 7;
    break;
   case 7:
    $18 = $M + 8 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $M + 12 | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = HEAP32[$1 >> 2] | 0;
    $23 = ___gmpn_hgcd_mul_matrix1_vector($M1, $19, $tp, $21, $22) | 0;
    $24 = HEAP32[$1 >> 2] | 0;
    $25 = ($24 | 0) == 0;
    if ($25) {
      label = 13;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $27 = $24 - 1 | 0;
    $28 = $M + 16 | 0;
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = HEAP32[$29 >> 2] | 0;
    $31 = ($27 | 0) == 0;
    if ($31) {
      $__x4_1 = $30;
      $__dst2_1 = $tp;
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $32 = $24 - 1 | 0;
    $__x4_0 = $30;
    $_pn = $29;
    $__dst2_0 = $tp;
    $__n1_0 = $27;
    label = 10;
    break;
   case 10:
    $__src3_0 = $_pn + 4 | 0;
    $34 = $__dst2_0 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    $35 = HEAP32[$__src3_0 >> 2] | 0;
    $36 = $__n1_0 - 1 | 0;
    $37 = ($36 | 0) == 0;
    if ($37) {
      label = 11;
      break;
    } else {
      $__x4_0 = $35;
      $_pn = $__src3_0;
      $__dst2_0 = $34;
      $__n1_0 = $36;
      label = 10;
      break;
    }
   case 11:
    $scevgep = $tp + ($32 << 2) | 0;
    $__x4_1 = $35;
    $__dst2_1 = $scevgep;
    label = 12;
    break;
   case 12:
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    label = 13;
    break;
   case 13:
    $40 = $M + 16 | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    $42 = $M + 20 | 0;
    $43 = HEAP32[$42 >> 2] | 0;
    $44 = HEAP32[$1 >> 2] | 0;
    $45 = ___gmpn_hgcd_mul_matrix1_vector($M1, $41, $tp, $43, $44) | 0;
    $46 = ($23 | 0) > ($45 | 0);
    $47 = $46 ? $23 : $45;
    HEAP32[$1 >> 2] = $47;
    return;
  }
}
function ___gmpn_hgcd_matrix_mul($M, $M1, $tp) {
  $M = $M | 0;
  $M1 = $M1 | 0;
  $tp = $tp | 0;
  var $1 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0, $19 = 0, $23 = 0, $24 = 0, $27 = 0, $31 = 0, $35 = 0, $41 = 0, $55 = 0;
  $1 = $M + 8 | 0;
  $3 = $M + 12 | 0;
  $5 = $M + 16 | 0;
  $7 = $M + 20 | 0;
  $9 = $M + 4 | 0;
  $19 = $M1 + 4 | 0;
  ___gmpn_matrix22_mul(HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0, HEAP32[$5 >> 2] | 0, HEAP32[$7 >> 2] | 0, HEAP32[$9 >> 2] | 0, HEAP32[$M1 + 8 >> 2] | 0, HEAP32[$M1 + 12 >> 2] | 0, HEAP32[$M1 + 16 >> 2] | 0, HEAP32[$M1 + 20 >> 2] | 0, HEAP32[$19 >> 2] | 0, $tp);
  $23 = (HEAP32[$19 >> 2] | 0) + (HEAP32[$9 >> 2] | 0) | 0;
  $24 = HEAP32[$1 >> 2] | 0;
  $27 = HEAP32[$3 >> 2] | 0;
  $31 = HEAP32[$5 >> 2] | 0;
  $35 = HEAP32[$7 >> 2] | 0;
  $41 = $23 - ((HEAP32[$27 + ($23 << 2) >> 2] | HEAP32[$24 + ($23 << 2) >> 2] | HEAP32[$31 + ($23 << 2) >> 2] | HEAP32[$35 + ($23 << 2) >> 2] | 0) == 0 & 1) | 0;
  $55 = $41 - ((HEAP32[$27 + ($41 << 2) >> 2] | HEAP32[$24 + ($41 << 2) >> 2] | HEAP32[$31 + ($41 << 2) >> 2] | HEAP32[$35 + ($41 << 2) >> 2] | 0) == 0 & 1) | 0;
  HEAP32[$9 >> 2] = ($55 + 1 | 0) - ((HEAP32[$27 + ($55 << 2) >> 2] | HEAP32[$24 + ($55 << 2) >> 2] | HEAP32[$31 + ($55 << 2) >> 2] | HEAP32[$35 + ($55 << 2) >> 2] | 0) == 0 & 1) | 0;
  return;
}
function ___gmpn_hgcd_matrix_adjust($M, $n, $ap, $bp, $p, $tp) {
  $M = $M | 0;
  $n = $n | 0;
  $ap = $ap | 0;
  $bp = $bp | 0;
  $p = $p | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $_sum = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $__n_0 = 0, $__dst_0 = 0, $tp_pn107 = 0, $__x_0 = 0, $__src_0 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $scevgep115 = 0, $__dst_1 = 0, $__x_1 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $58 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $__n1_0 = 0, $__dst2_0 = 0, $tp_pn = 0, $__x4_0 = 0, $__src3_0 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $scevgep = 0, $__dst2_1 = 0, $__x4_1 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $or_cond = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $93 = 0, $_n = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $tp + ($p << 2) | 0;
    $2 = $M + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $_sum = $3 + $p | 0;
    $4 = $tp + ($_sum << 2) | 0;
    $5 = ($3 | 0) < ($p | 0);
    $6 = $M + 20 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $9 = ___gmpn_mul($tp, $7, $3, $ap, $p) | 0;
    $10 = $M + 16 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = HEAP32[$2 >> 2] | 0;
    $13 = ___gmpn_mul($4, $11, $12, $ap, $p) | 0;
    label = 4;
    break;
   case 3:
    $15 = ___gmpn_mul($tp, $ap, $p, $7, $3) | 0;
    $16 = $M + 16 | 0;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = HEAP32[$2 >> 2] | 0;
    $19 = ___gmpn_mul($4, $ap, $p, $17, $18) | 0;
    label = 4;
    break;
   case 4:
    $21 = ($p | 0) != 0;
    if ($21) {
      label = 5;
      break;
    } else {
      label = 10;
      break;
    }
   case 5:
    $23 = $p - 1 | 0;
    $24 = HEAP32[$tp >> 2] | 0;
    $25 = ($23 | 0) == 0;
    if ($25) {
      $__x_1 = $24;
      $__dst_1 = $ap;
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $26 = $p - 1 | 0;
    $__x_0 = $24;
    $tp_pn107 = $tp;
    $__dst_0 = $ap;
    $__n_0 = $23;
    label = 7;
    break;
   case 7:
    $__src_0 = $tp_pn107 + 4 | 0;
    $28 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $29 = HEAP32[$__src_0 >> 2] | 0;
    $30 = $__n_0 - 1 | 0;
    $31 = ($30 | 0) == 0;
    if ($31) {
      label = 8;
      break;
    } else {
      $__x_0 = $29;
      $tp_pn107 = $__src_0;
      $__dst_0 = $28;
      $__n_0 = $30;
      label = 7;
      break;
    }
   case 8:
    $scevgep115 = $ap + ($26 << 2) | 0;
    $__x_1 = $29;
    $__dst_1 = $scevgep115;
    label = 9;
    break;
   case 9:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 10;
    break;
   case 10:
    $34 = $ap + ($p << 2) | 0;
    $35 = $n - $p | 0;
    $36 = HEAP32[$2 >> 2] | 0;
    $37 = ___gmpn_add($34, $34, $35, $1, $36) | 0;
    $38 = HEAP32[$2 >> 2] | 0;
    $39 = ($38 | 0) < ($p | 0);
    $40 = $M + 12 | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    if ($39) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $43 = ___gmpn_mul($tp, $41, $38, $bp, $p) | 0;
    label = 13;
    break;
   case 12:
    $45 = ___gmpn_mul($tp, $bp, $p, $41, $38) | 0;
    label = 13;
    break;
   case 13:
    $47 = HEAP32[$2 >> 2] | 0;
    $48 = $47 + $p | 0;
    $49 = ___gmpn_sub($ap, $ap, $n, $tp, $48) | 0;
    $50 = $37 - $49 | 0;
    $51 = HEAP32[$2 >> 2] | 0;
    $52 = ($51 | 0) < ($p | 0);
    $53 = $M + 8 | 0;
    $54 = HEAP32[$53 >> 2] | 0;
    if ($52) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $56 = ___gmpn_mul($tp, $54, $51, $bp, $p) | 0;
    label = 16;
    break;
   case 15:
    $58 = ___gmpn_mul($tp, $bp, $p, $54, $51) | 0;
    label = 16;
    break;
   case 16:
    if ($21) {
      label = 17;
      break;
    } else {
      label = 22;
      break;
    }
   case 17:
    $61 = $p - 1 | 0;
    $62 = HEAP32[$tp >> 2] | 0;
    $63 = ($61 | 0) == 0;
    if ($63) {
      $__x4_1 = $62;
      $__dst2_1 = $bp;
      label = 21;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $64 = $p - 1 | 0;
    $__x4_0 = $62;
    $tp_pn = $tp;
    $__dst2_0 = $bp;
    $__n1_0 = $61;
    label = 19;
    break;
   case 19:
    $__src3_0 = $tp_pn + 4 | 0;
    $66 = $__dst2_0 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    $67 = HEAP32[$__src3_0 >> 2] | 0;
    $68 = $__n1_0 - 1 | 0;
    $69 = ($68 | 0) == 0;
    if ($69) {
      label = 20;
      break;
    } else {
      $__x4_0 = $67;
      $tp_pn = $__src3_0;
      $__dst2_0 = $66;
      $__n1_0 = $68;
      label = 19;
      break;
    }
   case 20:
    $scevgep = $bp + ($64 << 2) | 0;
    $__x4_1 = $67;
    $__dst2_1 = $scevgep;
    label = 21;
    break;
   case 21:
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    label = 22;
    break;
   case 22:
    $72 = $bp + ($p << 2) | 0;
    $73 = HEAP32[$2 >> 2] | 0;
    $74 = ___gmpn_add($72, $72, $35, $1, $73) | 0;
    $75 = HEAP32[$2 >> 2] | 0;
    $76 = $75 + $p | 0;
    $77 = ___gmpn_sub($bp, $bp, $n, $4, $76) | 0;
    $78 = ($37 | 0) == ($49 | 0);
    $79 = ($74 | 0) == ($77 | 0);
    $or_cond = $78 & $79;
    if ($or_cond) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $81 = $74 - $77 | 0;
    $82 = $ap + ($n << 2) | 0;
    HEAP32[$82 >> 2] = $50;
    $83 = $bp + ($n << 2) | 0;
    HEAP32[$83 >> 2] = $81;
    $84 = $n + 1 | 0;
    $_0 = $84;
    label = 26;
    break;
   case 24:
    $86 = $n - 1 | 0;
    $87 = $ap + ($86 << 2) | 0;
    $88 = HEAP32[$87 >> 2] | 0;
    $89 = ($88 | 0) == 0;
    if ($89) {
      label = 25;
      break;
    } else {
      $_0 = $n;
      label = 26;
      break;
    }
   case 25:
    $91 = $bp + ($86 << 2) | 0;
    $92 = HEAP32[$91 >> 2] | 0;
    $93 = ($92 | 0) == 0;
    $_n = $93 ? $86 : $n;
    return $_n | 0;
   case 26:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_hgcd2($ah, $al, $bh, $bl, $M) {
  $ah = $ah | 0;
  $al = $al | 0;
  $bh = $bh | 0;
  $bl = $bl | 0;
  $M = $M | 0;
  var $r = 0, $r4 = 0, $r6 = 0, $r8 = 0, $1 = 0, $2 = 0, $or_cond = 0, $4 = 0, $6 = 0, $7 = 0, $or_cond159 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $_0156 = 0, $u01_0 = 0, $u10_0 = 0, $_0151 = 0, $_0148 = 0, $_0147 = 0, $24 = 0, $_1157 = 0, $u00_1 = 0, $u01_1 = 0, $u10_1 = 0, $u11_1 = 0, $_1152 = 0, $_1149 = 0, $_1 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $_2158 = 0, $u00_2 = 0, $u01_2 = 0, $u10_2 = 0, $u11_2 = 0, $_2153 = 0, $_2150 = 0, $_2 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $87 = 0, $88 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $u00_3 = 0, $u01_3 = 0, $u10_3 = 0, $u11_3 = 0, $_3154 = 0, $_3 = 0, $108 = 0, $109 = 0, $111 = 0, $113 = 0, $114 = 0, $116 = 0, $117 = 0, $118 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $u00_4 = 0, $u01_4 = 0, $u10_4 = 0, $u11_4 = 0, $_4155 = 0, $_4 = 0, $131 = 0, $132 = 0, $134 = 0, $136 = 0, $137 = 0, $139 = 0, $140 = 0, $141 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $u00_5 = 0, $u01_5 = 0, $u10_5 = 0, $u11_5 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $r = __stackBase__ | 0;
    $r4 = __stackBase__ + 8 | 0;
    $r6 = __stackBase__ + 16 | 0;
    $r8 = __stackBase__ + 24 | 0;
    $1 = $ah >>> 0 < 2;
    $2 = $bh >>> 0 < 2;
    $or_cond = $1 | $2;
    if ($or_cond) {
      $_0 = 0;
      label = 40;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $4 = $ah >>> 0 > $bh >>> 0;
    if ($4) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $6 = ($ah | 0) == ($bh | 0);
    $7 = $al >>> 0 > $bl >>> 0;
    $or_cond159 = $6 & $7;
    if ($or_cond159) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $9 = $ah - $bh | 0;
    $10 = $al >>> 0 < $bl >>> 0;
    $11 = $10 & 1;
    $12 = $9 - $11 | 0;
    $13 = $12 >>> 0 < 2;
    if ($13) {
      $_0 = 0;
      label = 40;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $15 = $al - $bl | 0;
    $_0147 = $12;
    $_0148 = $15;
    $_0151 = $bh;
    $u10_0 = 0;
    $u01_0 = 1;
    $_0156 = $bl;
    label = 8;
    break;
   case 6:
    $17 = $bh - $ah | 0;
    $18 = $7 & 1;
    $19 = $17 - $18 | 0;
    $20 = $19 >>> 0 < 2;
    if ($20) {
      $_0 = 0;
      label = 40;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $22 = $bl - $al | 0;
    $_0147 = $ah;
    $_0148 = $al;
    $_0151 = $19;
    $u10_0 = 1;
    $u01_0 = 0;
    $_0156 = $22;
    label = 8;
    break;
   case 8:
    $24 = $_0147 >>> 0 < $_0151 >>> 0;
    if ($24) {
      $_2 = $_0147;
      $_2150 = $_0148;
      $_2153 = $_0151;
      $u11_2 = 1;
      $u10_2 = $u10_0;
      $u01_2 = $u01_0;
      $u00_2 = 1;
      $_2158 = $_0156;
      label = 18;
      break;
    } else {
      $_1 = $_0147;
      $_1149 = $_0148;
      $_1152 = $_0151;
      $u11_1 = 1;
      $u10_1 = $u10_0;
      $u01_1 = $u01_0;
      $u00_1 = 1;
      $_1157 = $_0156;
      label = 9;
      break;
    }
   case 9:
    $26 = ($_1 | 0) == ($_1152 | 0);
    if ($26) {
      $u11_5 = $u11_1;
      $u10_5 = $u10_1;
      $u01_5 = $u01_1;
      $u00_5 = $u00_1;
      label = 39;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $28 = $_1 >>> 0 < 65536;
    if ($28) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $30 = $_1 << 16;
    $31 = $_1149 >>> 16;
    $32 = $30 | $31;
    $33 = $_1152 << 16;
    $34 = $_1157 >>> 16;
    $35 = $33 | $34;
    $_3 = $32;
    $_3154 = $35;
    $u11_3 = $u11_1;
    $u10_3 = $u10_1;
    $u01_3 = $u01_1;
    $u00_3 = $u00_1;
    label = 27;
    break;
   case 12:
    $37 = $_1149 - $_1157 | 0;
    $38 = $_1 - $_1152 | 0;
    $39 = $_1149 >>> 0 < $_1157 >>> 0;
    $40 = $39 & 1;
    $41 = $38 - $40 | 0;
    $42 = $41 >>> 0 < 2;
    if ($42) {
      $u11_5 = $u11_1;
      $u10_5 = $u10_1;
      $u01_5 = $u01_1;
      $u00_5 = $u00_1;
      label = 39;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $44 = $41 >>> 0 > $_1152 >>> 0;
    if ($44) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $46 = $u01_1 + $u00_1 | 0;
    $47 = $u11_1 + $u10_1 | 0;
    $_2 = $41;
    $_2150 = $37;
    $_2153 = $_1152;
    $u11_2 = $47;
    $u10_2 = $u10_1;
    $u01_2 = $46;
    $u00_2 = $u00_1;
    $_2158 = $_1157;
    label = 18;
    break;
   case 15:
    $49 = $r | 0;
    $50 = _div2($49, $41, $37, $_1152, $_1157) | 0;
    $51 = $r + 4 | 0;
    $52 = HEAP32[$51 >> 2] | 0;
    $53 = $52 >>> 0 < 2;
    if ($53) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    $55 = Math_imul($50, $u00_1);
    $56 = $55 + $u01_1 | 0;
    $57 = Math_imul($50, $u10_1);
    $58 = $57 + $u11_1 | 0;
    $u11_5 = $58;
    $u10_5 = $u10_1;
    $u01_5 = $56;
    $u00_5 = $u00_1;
    label = 39;
    break;
   case 17:
    $60 = HEAP32[$49 >> 2] | 0;
    $61 = $50 + 1 | 0;
    $62 = Math_imul($61, $u00_1);
    $63 = $62 + $u01_1 | 0;
    $64 = Math_imul($61, $u10_1);
    $65 = $64 + $u11_1 | 0;
    $_2 = $52;
    $_2150 = $60;
    $_2153 = $_1152;
    $u11_2 = $65;
    $u10_2 = $u10_1;
    $u01_2 = $63;
    $u00_2 = $u00_1;
    $_2158 = $_1157;
    label = 18;
    break;
   case 18:
    $67 = ($_2 | 0) == ($_2153 | 0);
    if ($67) {
      $u11_5 = $u11_2;
      $u10_5 = $u10_2;
      $u01_5 = $u01_2;
      $u00_5 = $u00_2;
      label = 39;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $69 = $_2153 >>> 0 < 65536;
    if ($69) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    $71 = $_2 << 16;
    $72 = $_2150 >>> 16;
    $73 = $71 | $72;
    $74 = $_2153 << 16;
    $75 = $_2158 >>> 16;
    $76 = $74 | $75;
    $_4 = $73;
    $_4155 = $76;
    $u11_4 = $u11_2;
    $u10_4 = $u10_2;
    $u01_4 = $u01_2;
    $u00_4 = $u00_2;
    label = 33;
    break;
   case 21:
    $78 = $_2158 - $_2150 | 0;
    $79 = $_2153 - $_2 | 0;
    $80 = $_2158 >>> 0 < $_2150 >>> 0;
    $81 = $80 & 1;
    $82 = $79 - $81 | 0;
    $83 = $82 >>> 0 < 2;
    if ($83) {
      $u11_5 = $u11_2;
      $u10_5 = $u10_2;
      $u01_5 = $u01_2;
      $u00_5 = $u00_2;
      label = 39;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $85 = $82 >>> 0 > $_2 >>> 0;
    if ($85) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $87 = $u01_2 + $u00_2 | 0;
    $88 = $u11_2 + $u10_2 | 0;
    $_1 = $_2;
    $_1149 = $_2150;
    $_1152 = $82;
    $u11_1 = $u11_2;
    $u10_1 = $88;
    $u01_1 = $u01_2;
    $u00_1 = $87;
    $_1157 = $78;
    label = 9;
    break;
   case 24:
    $90 = $r4 | 0;
    $91 = _div2($90, $82, $78, $_2, $_2150) | 0;
    $92 = $r4 + 4 | 0;
    $93 = HEAP32[$92 >> 2] | 0;
    $94 = $93 >>> 0 < 2;
    if ($94) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    $96 = Math_imul($91, $u01_2);
    $97 = $96 + $u00_2 | 0;
    $98 = Math_imul($91, $u11_2);
    $99 = $98 + $u10_2 | 0;
    $u11_5 = $u11_2;
    $u10_5 = $99;
    $u01_5 = $u01_2;
    $u00_5 = $97;
    label = 39;
    break;
   case 26:
    $101 = HEAP32[$90 >> 2] | 0;
    $102 = $91 + 1 | 0;
    $103 = Math_imul($102, $u01_2);
    $104 = $103 + $u00_2 | 0;
    $105 = Math_imul($102, $u11_2);
    $106 = $105 + $u10_2 | 0;
    $_1 = $_2;
    $_1149 = $_2150;
    $_1152 = $93;
    $u11_1 = $u11_2;
    $u10_1 = $106;
    $u01_1 = $u01_2;
    $u00_1 = $104;
    $_1157 = $101;
    label = 9;
    break;
   case 27:
    $108 = $_3 - $_3154 | 0;
    $109 = $108 >>> 0 < 131072;
    if ($109) {
      $u11_5 = $u11_3;
      $u10_5 = $u10_3;
      $u01_5 = $u01_3;
      $u00_5 = $u00_3;
      label = 39;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $111 = $108 >>> 0 > $_3154 >>> 0;
    if ($111) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $113 = $u01_3 + $u00_3 | 0;
    $114 = $u11_3 + $u10_3 | 0;
    $_4 = $108;
    $_4155 = $_3154;
    $u11_4 = $114;
    $u10_4 = $u10_3;
    $u01_4 = $113;
    $u00_4 = $u00_3;
    label = 33;
    break;
   case 30:
    $116 = _div1($r6, $108, $_3154) | 0;
    $117 = HEAP32[$r6 >> 2] | 0;
    $118 = $117 >>> 0 < 131072;
    if ($118) {
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    $120 = Math_imul($116, $u00_3);
    $121 = $120 + $u01_3 | 0;
    $122 = Math_imul($116, $u10_3);
    $123 = $122 + $u11_3 | 0;
    $u11_5 = $123;
    $u10_5 = $u10_3;
    $u01_5 = $121;
    $u00_5 = $u00_3;
    label = 39;
    break;
   case 32:
    $125 = $116 + 1 | 0;
    $126 = Math_imul($125, $u00_3);
    $127 = $126 + $u01_3 | 0;
    $128 = Math_imul($125, $u10_3);
    $129 = $128 + $u11_3 | 0;
    $_4 = $117;
    $_4155 = $_3154;
    $u11_4 = $129;
    $u10_4 = $u10_3;
    $u01_4 = $127;
    $u00_4 = $u00_3;
    label = 33;
    break;
   case 33:
    $131 = $_4155 - $_4 | 0;
    $132 = $131 >>> 0 < 131072;
    if ($132) {
      $u11_5 = $u11_4;
      $u10_5 = $u10_4;
      $u01_5 = $u01_4;
      $u00_5 = $u00_4;
      label = 39;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    $134 = $131 >>> 0 > $_4 >>> 0;
    if ($134) {
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $136 = $u01_4 + $u00_4 | 0;
    $137 = $u11_4 + $u10_4 | 0;
    $_3 = $_4;
    $_3154 = $131;
    $u11_3 = $u11_4;
    $u10_3 = $137;
    $u01_3 = $u01_4;
    $u00_3 = $136;
    label = 27;
    break;
   case 36:
    $139 = _div1($r8, $131, $_4) | 0;
    $140 = HEAP32[$r8 >> 2] | 0;
    $141 = $140 >>> 0 < 131072;
    if ($141) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    $143 = Math_imul($139, $u01_4);
    $144 = $143 + $u00_4 | 0;
    $145 = Math_imul($139, $u11_4);
    $146 = $145 + $u10_4 | 0;
    $u11_5 = $u11_4;
    $u10_5 = $146;
    $u01_5 = $u01_4;
    $u00_5 = $144;
    label = 39;
    break;
   case 38:
    $148 = $139 + 1 | 0;
    $149 = Math_imul($148, $u01_4);
    $150 = $149 + $u00_4 | 0;
    $151 = Math_imul($148, $u11_4);
    $152 = $151 + $u10_4 | 0;
    $_3 = $_4;
    $_3154 = $140;
    $u11_3 = $u11_4;
    $u10_3 = $152;
    $u01_3 = $u01_4;
    $u00_3 = $150;
    label = 27;
    break;
   case 39:
    $154 = $M | 0;
    HEAP32[$154 >> 2] = $u00_5;
    $155 = $M + 4 | 0;
    HEAP32[$155 >> 2] = $u01_5;
    $156 = $M + 8 | 0;
    HEAP32[$156 >> 2] = $u10_5;
    $157 = $M + 12 | 0;
    HEAP32[$157 >> 2] = $u11_5;
    $_0 = 1;
    label = 40;
    break;
   case 40:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_hgcd_mul_matrix1_vector($M, $rp, $ap, $bp, $n) {
  $M = $M | 0;
  $rp = $rp | 0;
  $ap = $ap | 0;
  $bp = $bp | 0;
  $n = $n | 0;
  var $3 = 0, $7 = 0, $10 = 0, $14 = 0;
  $3 = ___gmpn_mul_1($rp, $ap, $n, HEAP32[$M >> 2] | 0) | 0;
  $7 = (___gmpn_addmul_1($rp, $bp, $n, HEAP32[$M + 8 >> 2] | 0) | 0) + $3 | 0;
  $10 = ___gmpn_mul_1($bp, $bp, $n, HEAP32[$M + 12 >> 2] | 0) | 0;
  $14 = (___gmpn_addmul_1($bp, $ap, $n, HEAP32[$M + 4 >> 2] | 0) | 0) + $10 | 0;
  HEAP32[$rp + ($n << 2) >> 2] = $7;
  HEAP32[$bp + ($n << 2) >> 2] = $14;
  return (($14 | $7 | 0) != 0 & 1) + $n | 0;
}
function _mpn_mulmod_bnm1_itch259($rn, $an, $bn) {
  $rn = $rn | 0;
  $an = $an | 0;
  $bn = $bn | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $rn >> 1;
    $2 = $rn + 4 | 0;
    $3 = ($1 | 0) < ($an | 0);
    if ($3) {
      label = 2;
      break;
    } else {
      $8 = 0;
      label = 3;
      break;
    }
   case 2:
    $5 = ($1 | 0) < ($bn | 0);
    $6 = $5 ? $rn : $1;
    $8 = $6;
    label = 3;
    break;
   case 3:
    $9 = $2 + $8 | 0;
    return $9 | 0;
  }
  return 0;
}
function ___gmpn_hgcd_itch($n) {
  $n = $n | 0;
  var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($n | 0) > 399;
    if ($1) {
      label = 2;
      break;
    } else {
      $_0 = $n;
      label = 6;
      break;
    }
   case 2:
    $3 = $n - 1 | 0;
    $4 = ($3 | 0) / 399 & -1;
    $5 = $4 >>> 0 < 65536;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $7 = $4 >>> 0 < 256;
    $8 = $7 ? 1 : 9;
    $13 = $8;
    label = 5;
    break;
   case 4:
    $10 = $4 >>> 0 < 16777216;
    $11 = $10 ? 17 : 25;
    $13 = $11;
    label = 5;
    break;
   case 5:
    $14 = $4 >>> ($13 >>> 0);
    $15 = $14 + 9696 | 0;
    $16 = HEAP8[$15] | 0;
    $17 = $16 & 255;
    $18 = $13 - 33 | 0;
    $19 = $18 + $17 | 0;
    $20 = $n + 3 | 0;
    $21 = ($20 | 0) / 4 & -1;
    $22 = $21 * 20 & -1;
    $23 = $19 * 22 & -1;
    $24 = $22 + 1104 | 0;
    $25 = $24 + $23 | 0;
    $_0 = $25;
    label = 6;
    break;
   case 6:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_hgcd_step($n, $ap, $bp, $s, $M, $tp) {
  $n = $n | 0;
  $ap = $ap | 0;
  $bp = $bp | 0;
  $s = $s | 0;
  $M = $M | 0;
  $tp = $tp | 0;
  var $M1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $bh_0 = 0, $bl_0 = 0, $al_0 = 0, $ah_0 = 0, $67 = 0, $68 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $__n_0 = 0, $__dst_0 = 0, $ap_pn = 0, $__x_0 = 0, $__src_0 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $82 = 0, $84 = 0, $85 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $M1 = __stackBase__ | 0;
    $1 = $n - 1 | 0;
    $2 = $ap + ($1 << 2) | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $bp + ($1 << 2) | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $5 | $3;
    $7 = $s + 1 | 0;
    $8 = ($7 | 0) == ($n | 0);
    if ($8) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $10 = $6 >>> 0 < 4;
    if ($10) {
      label = 18;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $12 = $n - 2 | 0;
    $13 = $ap + ($12 << 2) | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $bp + ($12 << 2) | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $ah_0 = $3;
    $al_0 = $14;
    $bl_0 = $16;
    $bh_0 = $5;
    label = 10;
    break;
   case 4:
    $18 = ($6 | 0) < 0;
    if ($18) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $20 = $n - 2 | 0;
    $21 = $ap + ($20 << 2) | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = $bp + ($20 << 2) | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $ah_0 = $3;
    $al_0 = $22;
    $bl_0 = $24;
    $bh_0 = $5;
    label = 10;
    break;
   case 6:
    $26 = $6 >>> 0 < 65536;
    if ($26) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $28 = $6 >>> 0 < 256;
    $29 = $28 ? 1 : 9;
    $34 = $29;
    label = 9;
    break;
   case 8:
    $31 = $6 >>> 0 < 16777216;
    $32 = $31 ? 17 : 25;
    $34 = $32;
    label = 9;
    break;
   case 9:
    $35 = 33 - $34 | 0;
    $36 = $6 >>> ($34 >>> 0);
    $37 = $36 + 9696 | 0;
    $38 = HEAP8[$37] | 0;
    $39 = $38 & 255;
    $40 = $35 - $39 | 0;
    $41 = HEAP32[$2 >> 2] | 0;
    $42 = $41 << $40;
    $43 = $n - 2 | 0;
    $44 = $ap + ($43 << 2) | 0;
    $45 = HEAP32[$44 >> 2] | 0;
    $46 = 32 - $40 | 0;
    $47 = $45 >>> ($46 >>> 0);
    $48 = $47 | $42;
    $49 = $45 << $40;
    $50 = $n - 3 | 0;
    $51 = $ap + ($50 << 2) | 0;
    $52 = HEAP32[$51 >> 2] | 0;
    $53 = $52 >>> ($46 >>> 0);
    $54 = $53 | $49;
    $55 = HEAP32[$4 >> 2] | 0;
    $56 = $55 << $40;
    $57 = $bp + ($43 << 2) | 0;
    $58 = HEAP32[$57 >> 2] | 0;
    $59 = $58 >>> ($46 >>> 0);
    $60 = $59 | $56;
    $61 = $58 << $40;
    $62 = $bp + ($50 << 2) | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    $64 = $63 >>> ($46 >>> 0);
    $65 = $64 | $61;
    $ah_0 = $48;
    $al_0 = $54;
    $bl_0 = $65;
    $bh_0 = $60;
    label = 10;
    break;
   case 10:
    $67 = ___gmpn_hgcd2($ah_0, $al_0, $bh_0, $bl_0, $M1) | 0;
    $68 = ($67 | 0) == 0;
    if ($68) {
      label = 18;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    ___gmpn_hgcd_matrix_mul_1($M, $M1, $tp);
    $70 = ($n | 0) == 0;
    if ($70) {
      label = 17;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $72 = HEAP32[$ap >> 2] | 0;
    $73 = ($1 | 0) == 0;
    if ($73) {
      $__x_1 = $72;
      $__dst_1 = $tp;
      label = 16;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $74 = $n - 1 | 0;
    $__x_0 = $72;
    $ap_pn = $ap;
    $__dst_0 = $tp;
    $__n_0 = $1;
    label = 14;
    break;
   case 14:
    $__src_0 = $ap_pn + 4 | 0;
    $76 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $77 = HEAP32[$__src_0 >> 2] | 0;
    $78 = $__n_0 - 1 | 0;
    $79 = ($78 | 0) == 0;
    if ($79) {
      label = 15;
      break;
    } else {
      $__x_0 = $77;
      $ap_pn = $__src_0;
      $__dst_0 = $76;
      $__n_0 = $78;
      label = 14;
      break;
    }
   case 15:
    $scevgep = $tp + ($74 << 2) | 0;
    $__x_1 = $77;
    $__dst_1 = $scevgep;
    label = 16;
    break;
   case 16:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 17;
    break;
   case 17:
    $82 = ___gmpn_matrix22_mul1_inverse_vector($M1, $ap, $tp, $bp, $n) | 0;
    $_0 = $82;
    label = 19;
    break;
   case 18:
    $84 = $M;
    $85 = ___gmpn_gcd_subdiv_step($ap, $bp, $n, $s, 312, $84, $tp) | 0;
    $_0 = $85;
    label = 19;
    break;
   case 19:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _hgcd_hook($p, $gp, $gn, $qp, $qn, $d) {
  $p = $p | 0;
  $gp = $gp | 0;
  $gn = $gn | 0;
  $qp = $qp | 0;
  $qn = $qn | 0;
  $d = $d | 0;
  var $_0 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $_0 = $qn;
    label = 2;
    break;
   case 2:
    $2 = ($_0 | 0) > 0;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $4 = $_0 - 1 | 0;
    $5 = $qp + ($4 << 2) | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) == 0;
    if ($7) {
      $_0 = $4;
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $9 = $p;
    $10 = $qp + ($_0 << 2) | 0;
    ___gmpn_hgcd_matrix_update_q($9, $qp, $_0, $d, $10);
    label = 5;
    break;
   case 5:
    return;
  }
}
function ___gmpn_hgcd_reduce($M, $ap, $bp, $n, $p, $tp) {
  $M = $M | 0;
  $ap = $ap | 0;
  $bp = $bp | 0;
  $n = $n | 0;
  $p = $p | 0;
  $tp = $tp | 0;
  var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $_sum57 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $_sum5559 = 0, $22 = 0, $23 = 0, $24 = 0, $__n_0 = 0, $__dst_0 = 0, $__src_0 = 0, $__x_0 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $scevgep66 = 0, $_sum55 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $__n1_0 = 0, $__dst2_0 = 0, $__src3_0 = 0, $__x4_0 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $scevgep = 0, $__dst2_1 = 0, $__x4_1 = 0, $_sum = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($n | 0) > 999;
    if ($1) {
      label = 4;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = $ap + ($p << 2) | 0;
    $4 = $bp + ($p << 2) | 0;
    $5 = $n - $p | 0;
    $6 = ___gmpn_hgcd($3, $4, $5, $M, $tp) | 0;
    $7 = ($6 | 0) > 0;
    if ($7) {
      label = 3;
      break;
    } else {
      $_0 = 0;
      label = 17;
      break;
    }
   case 3:
    $9 = $6 + $p | 0;
    $10 = ___gmpn_hgcd_matrix_adjust($M, $9, $ap, $bp, $p, $tp) | 0;
    $_0 = $10;
    label = 17;
    break;
   case 4:
    $12 = $n - $p | 0;
    $13 = ($n | 0) != ($p | 0);
    if ($13) {
      label = 5;
      break;
    } else {
      label = 15;
      break;
    }
   case 5:
    $15 = $12 - 1 | 0;
    $16 = $ap + ($p << 2) | 0;
    $_sum57 = $p + 1 | 0;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = ($15 | 0) == 0;
    if ($18) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $19 = $ap + ($_sum57 << 2) | 0;
    $20 = $n - 1 | 0;
    $21 = $20 - $p | 0;
    $__x_0 = $17;
    $__src_0 = $19;
    $__dst_0 = $tp;
    $__n_0 = $15;
    label = 8;
    break;
   case 7:
    HEAP32[$tp >> 2] = $17;
    $_sum5559 = $n - $p | 0;
    $22 = $tp + ($_sum5559 << 2) | 0;
    $23 = $bp + ($p << 2) | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $__x4_1 = $24;
    $__dst2_1 = $22;
    label = 14;
    break;
   case 8:
    $26 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $27 = $__src_0 + 4 | 0;
    $28 = HEAP32[$__src_0 >> 2] | 0;
    $29 = $__n_0 - 1 | 0;
    $30 = ($29 | 0) == 0;
    if ($30) {
      label = 9;
      break;
    } else {
      $__x_0 = $28;
      $__src_0 = $27;
      $__dst_0 = $26;
      $__n_0 = $29;
      label = 8;
      break;
    }
   case 9:
    $scevgep66 = $tp + ($21 << 2) | 0;
    HEAP32[$scevgep66 >> 2] = $28;
    if ($13) {
      label = 10;
      break;
    } else {
      label = 15;
      break;
    }
   case 10:
    $_sum55 = $n - $p | 0;
    $33 = $tp + ($_sum55 << 2) | 0;
    $34 = $bp + ($p << 2) | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    if ($18) {
      $__x4_1 = $35;
      $__dst2_1 = $33;
      label = 14;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $36 = $bp + ($_sum57 << 2) | 0;
    $37 = $n << 1;
    $38 = $37 - 1 | 0;
    $39 = $p << 1;
    $40 = $38 - $39 | 0;
    $__x4_0 = $35;
    $__src3_0 = $36;
    $__dst2_0 = $33;
    $__n1_0 = $15;
    label = 12;
    break;
   case 12:
    $42 = $__dst2_0 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    $43 = $__src3_0 + 4 | 0;
    $44 = HEAP32[$__src3_0 >> 2] | 0;
    $45 = $__n1_0 - 1 | 0;
    $46 = ($45 | 0) == 0;
    if ($46) {
      label = 13;
      break;
    } else {
      $__x4_0 = $44;
      $__src3_0 = $43;
      $__dst2_0 = $42;
      $__n1_0 = $45;
      label = 12;
      break;
    }
   case 13:
    $scevgep = $tp + ($40 << 2) | 0;
    $__x4_1 = $44;
    $__dst2_1 = $scevgep;
    label = 14;
    break;
   case 14:
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    label = 15;
    break;
   case 15:
    $_sum = $n - $p | 0;
    $48 = $tp + ($_sum << 2) | 0;
    $49 = $12 << 1;
    $50 = $tp + ($49 << 2) | 0;
    $51 = ___gmpn_hgcd_appr($tp, $48, $12, $M, $50) | 0;
    $52 = ($51 | 0) == 0;
    if ($52) {
      $_0 = 0;
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $54 = _hgcd_matrix_apply($M, $ap, $bp, $n) | 0;
    $_0 = $54;
    label = 17;
    break;
   case 17:
    return $_0 | 0;
  }
  return 0;
}
function _hgcd_matrix_apply($M, $ap, $bp, $n) {
  $M = $M | 0;
  $ap = $ap | 0;
  $bp = $bp | 0;
  $n = $n | 0;
  var $mn = 0, $__tmp_marker = 0, $indvars_iv218 = 0, $an_0 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $indvars_iv_next219 = 0, $indvars_iv220 = 0, $bn_0 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $indvars_iv_next221 = 0, $15 = 0, $16 = 0, $17 = 0, $k_0 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $_ = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $79 = 0, $80 = 0, $_in = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $uadd$0 = 0, $uadd$1 = 0, $91 = 0, $92 = 0, $__p_0 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $uadd174$0 = 0, $uadd174$1 = 0, $100 = 0, $101 = 0, $__p2_0 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $_0 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $or_cond = 0, $117 = 0, $118 = 0, $scevgep226 = 0, $119 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $or_cond230 = 0, $128 = 0, $129 = 0, $scevgep225 = 0, $130 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $__p6_0 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $smax217 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $smax222 = 0, $167 = 0, $168 = 0, $smax223 = 0, $__n7_0 = 0, $__dst8_0 = 0, $__src_0 = 0, $__x9_0 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $scevgep212_sum = 0, $scevgep224 = 0, $__dst8_1 = 0, $__x9_1 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $or_cond232 = 0, $185 = 0, $186 = 0, $scevgep210 = 0, $187 = 0, $188 = 0, $189 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $or_cond234 = 0, $196 = 0, $197 = 0, $scevgep209 = 0, $198 = 0, $199 = 0, $200 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $__p15_0 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $smax = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $smax206 = 0, $231 = 0, $232 = 0, $smax207 = 0, $__n16_0 = 0, $__dst17_0 = 0, $__src18_0 = 0, $__x19_0 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $scevgep_sum = 0, $scevgep208 = 0, $__dst17_1 = 0, $__x19_1 = 0, $nn_0 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $nn_1 = 0, $247 = 0, $248 = 0, $k_0_1 = 0, $252 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $260 = 0, $261 = 0, $k_0_1227 = 0, $263 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $271 = 0, $272 = 0, $k_0_1_1 = 0, $274 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $mn = __stackBase__ | 0;
    $__tmp_marker = __stackBase__ + 16 | 0;
    $an_0 = $n;
    $indvars_iv218 = 0;
    label = 2;
    break;
   case 2:
    $2 = ($an_0 | 0) > 0;
    if ($2) {
      label = 3;
      break;
    } else {
      $bn_0 = $n;
      $indvars_iv220 = 0;
      label = 4;
      break;
    }
   case 3:
    $4 = $an_0 - 1 | 0;
    $5 = $ap + ($4 << 2) | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) == 0;
    $indvars_iv_next219 = $indvars_iv218 + 1 | 0;
    if ($7) {
      $an_0 = $4;
      $indvars_iv218 = $indvars_iv_next219;
      label = 2;
      break;
    } else {
      $bn_0 = $n;
      $indvars_iv220 = 0;
      label = 4;
      break;
    }
   case 4:
    $8 = ($bn_0 | 0) > 0;
    if ($8) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $10 = $bn_0 - 1 | 0;
    $11 = $bp + ($10 << 2) | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($12 | 0) == 0;
    $indvars_iv_next221 = $indvars_iv220 + 1 | 0;
    if ($13) {
      $bn_0 = $10;
      $indvars_iv220 = $indvars_iv_next221;
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $15 = $M + 4 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $M + 8 | 0;
    $k_0 = $16;
    label = 7;
    break;
   case 7:
    $19 = ($k_0 | 0) > 0;
    if ($19) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $21 = $k_0 - 1 | 0;
    $22 = HEAP32[$17 >> 2] | 0;
    $23 = $22 + ($21 << 2) | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = ($24 | 0) == 0;
    if ($25) {
      $k_0 = $21;
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $27 = $mn | 0;
    HEAP32[$27 >> 2] = $k_0;
    $28 = $M + 12 | 0;
    $k_0_1 = $16;
    label = 52;
    break;
   case 10:
    $30 = $M + 16 | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = $mn + 8 | 0;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = _submul($bp, $bn_0, $ap, $an_0, $31, $33) | 0;
    $nn_1 = $34;
    label = 49;
    break;
   case 11:
    $36 = $mn + 8 | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    $38 = ($37 | 0) == 0;
    if ($38) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $40 = $M + 12 | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    $42 = _submul($ap, $an_0, $bp, $bn_0, $41, $284) | 0;
    $nn_1 = $42;
    label = 49;
    break;
   case 13:
    $44 = $mn | 0;
    $45 = HEAP32[$44 >> 2] | 0;
    $46 = $an_0 - $45 | 0;
    $47 = $bn_0 - $37 | 0;
    $48 = ($46 | 0) < ($47 | 0);
    $_ = $48 ? $46 : $47;
    $49 = $_ + 1 | 0;
    $50 = $an_0 - $284 | 0;
    $51 = $mn + 12 | 0;
    $52 = HEAP32[$51 >> 2] | 0;
    $53 = $bn_0 - $52 | 0;
    $54 = ($50 | 0) < ($53 | 0);
    $55 = $54 ? $50 : $53;
    $56 = $55 + 1 | 0;
    $57 = ($49 | 0) > ($56 | 0);
    $58 = $57 ? $49 : $56;
    $59 = $58 + 1 | 0;
    $60 = ___gmpn_mulmod_bnm1_next_size($59) | 0;
    $61 = $M + 4 | 0;
    $62 = HEAP32[$61 >> 2] | 0;
    $63 = _mpn_mulmod_bnm1_itch259($60, $60, $62) | 0;
    $64 = $63 << 2;
    $65 = $64 >>> 0 < 65536;
    if ($65) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $67 = STACKTOP;
    STACKTOP = STACKTOP + $64 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $71 = $67;
    label = 16;
    break;
   case 15:
    $69 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $64) | 0;
    $71 = $69;
    label = 16;
    break;
   case 16:
    $72 = $71;
    $73 = $60 << 2;
    $74 = $73 >>> 0 < 65536;
    if ($74) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $76 = STACKTOP;
    STACKTOP = STACKTOP + $73 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $77 = STACKTOP;
    STACKTOP = STACKTOP + $73 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $82 = $77;
    $_in = $76;
    label = 19;
    break;
   case 18:
    $79 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $73) | 0;
    $80 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $73) | 0;
    $82 = $80;
    $_in = $79;
    label = 19;
    break;
   case 19:
    $83 = $_in;
    $84 = $82;
    $85 = ($60 | 0) < ($n | 0);
    if ($85) {
      label = 20;
      break;
    } else {
      $_0 = $n;
      label = 24;
      break;
    }
   case 20:
    $87 = $ap + ($60 << 2) | 0;
    $88 = $n - $60 | 0;
    $89 = ___gmpn_add($ap, $ap, $60, $87, $88) | 0;
    $90 = HEAP32[$ap >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($90 | 0, $89 | 0) | 0;
    $uadd$1 = tempRet0;
    $91 = $uadd$0;
    HEAP32[$ap >> 2] = $91;
    $92 = $uadd$1;
    if ($92) {
      $__p_0 = $ap;
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    $93 = $__p_0 + 4 | 0;
    $94 = HEAP32[$93 >> 2] | 0;
    $95 = $94 + 1 | 0;
    HEAP32[$93 >> 2] = $95;
    $96 = ($95 | 0) == 0;
    if ($96) {
      $__p_0 = $93;
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $97 = $bp + ($60 << 2) | 0;
    $98 = ___gmpn_add($bp, $bp, $60, $97, $88) | 0;
    $99 = HEAP32[$bp >> 2] | 0;
    $uadd174$0 = _llvm_uadd_with_overflow_i32($99 | 0, $98 | 0) | 0;
    $uadd174$1 = tempRet0;
    $100 = $uadd174$0;
    HEAP32[$bp >> 2] = $100;
    $101 = $uadd174$1;
    if ($101) {
      $__p2_0 = $bp;
      label = 23;
      break;
    } else {
      $_0 = $60;
      label = 24;
      break;
    }
   case 23:
    $102 = $__p2_0 + 4 | 0;
    $103 = HEAP32[$102 >> 2] | 0;
    $104 = $103 + 1 | 0;
    HEAP32[$102 >> 2] = $104;
    $105 = ($104 | 0) == 0;
    if ($105) {
      $__p2_0 = $102;
      label = 23;
      break;
    } else {
      $_0 = $60;
      label = 24;
      break;
    }
   case 24:
    $106 = $M + 20 | 0;
    $107 = HEAP32[$106 >> 2] | 0;
    $108 = HEAP32[$51 >> 2] | 0;
    ___gmpn_mulmod_bnm1($83, $60, $ap, $_0, $107, $108, $72);
    $109 = $M + 12 | 0;
    $110 = HEAP32[$109 >> 2] | 0;
    $111 = HEAP32[$283 >> 2] | 0;
    ___gmpn_mulmod_bnm1($84, $60, $bp, $_0, $110, $111, $72);
    $112 = HEAP32[$51 >> 2] | 0;
    $113 = $112 + $_0 | 0;
    $114 = ($113 | 0) >= ($60 | 0);
    $115 = $60 - $_0 | 0;
    $116 = ($115 | 0) == ($112 | 0);
    $or_cond = $114 | $116;
    if ($or_cond) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $117 = $_0 + $112 | 0;
    $118 = $117 << 2;
    $scevgep226 = $_in + $118 | 0;
    $119 = $60 - $_0 | 0;
    $120 = $119 - $112 | 0;
    $121 = $120 << 2;
    _memset($scevgep226 | 0, 0, $121 | 0);
    label = 26;
    break;
   case 26:
    $123 = HEAP32[$283 >> 2] | 0;
    $124 = $123 + $_0 | 0;
    $125 = ($124 | 0) >= ($60 | 0);
    $126 = $60 - $_0 | 0;
    $127 = ($126 | 0) == ($123 | 0);
    $or_cond230 = $125 | $127;
    if ($or_cond230) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $128 = $_0 + $123 | 0;
    $129 = $128 << 2;
    $scevgep225 = $82 + $129 | 0;
    $130 = $60 - $_0 | 0;
    $131 = $130 - $123 | 0;
    $132 = $131 << 2;
    _memset($scevgep225 | 0, 0, $132 | 0);
    label = 28;
    break;
   case 28:
    $134 = ___gmpn_sub_n($83, $83, $84, $60) | 0;
    $135 = HEAP32[$83 >> 2] | 0;
    $136 = $135 - $134 | 0;
    HEAP32[$83 >> 2] = $136;
    $137 = $135 >>> 0 < $134 >>> 0;
    if ($137) {
      $__p6_0 = $83;
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    $138 = $__p6_0 + 4 | 0;
    $139 = HEAP32[$138 >> 2] | 0;
    $140 = $139 - 1 | 0;
    HEAP32[$138 >> 2] = $140;
    $141 = ($139 | 0) == 0;
    if ($141) {
      $__p6_0 = $138;
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    $142 = $M + 16 | 0;
    $143 = HEAP32[$142 >> 2] | 0;
    $144 = HEAP32[$36 >> 2] | 0;
    ___gmpn_mulmod_bnm1($84, $60, $ap, $_0, $143, $144, $72);
    $145 = ($58 | 0) != 0;
    if ($145) {
      label = 31;
      break;
    } else {
      label = 36;
      break;
    }
   case 31:
    $147 = $58 - 1 | 0;
    $148 = HEAP32[$83 >> 2] | 0;
    $149 = ($147 | 0) == 0;
    if ($149) {
      $__x9_1 = $148;
      $__dst8_1 = $ap;
      label = 35;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $150 = $_in + 4 | 0;
    $151 = $150;
    $152 = $284 - 1 | 0;
    $153 = $152 - $n | 0;
    $154 = $indvars_iv218 + $153 | 0;
    $155 = $52 - 1 | 0;
    $156 = $155 - $n | 0;
    $157 = $indvars_iv220 + $156 | 0;
    $158 = ($154 | 0) > ($157 | 0);
    $smax217 = $158 ? $154 : $157;
    $159 = -$smax217 | 0;
    $160 = $45 - 1 | 0;
    $161 = $160 - $n | 0;
    $162 = $indvars_iv218 + $161 | 0;
    $163 = $37 - 1 | 0;
    $164 = $163 - $n | 0;
    $165 = $indvars_iv220 + $164 | 0;
    $166 = ($162 | 0) > ($165 | 0);
    $smax222 = $166 ? $162 : $165;
    $167 = -$smax222 | 0;
    $168 = ($159 | 0) > ($167 | 0);
    $smax223 = $168 ? $159 : $167;
    $__x9_0 = $148;
    $__src_0 = $151;
    $__dst8_0 = $ap;
    $__n7_0 = $147;
    label = 33;
    break;
   case 33:
    $170 = $__dst8_0 + 4 | 0;
    HEAP32[$__dst8_0 >> 2] = $__x9_0;
    $171 = $__src_0 + 4 | 0;
    $172 = HEAP32[$__src_0 >> 2] | 0;
    $173 = $__n7_0 - 1 | 0;
    $174 = ($173 | 0) == 0;
    if ($174) {
      label = 34;
      break;
    } else {
      $__x9_0 = $172;
      $__src_0 = $171;
      $__dst8_0 = $170;
      $__n7_0 = $173;
      label = 33;
      break;
    }
   case 34:
    $scevgep212_sum = $smax223 - 1 | 0;
    $scevgep224 = $ap + ($scevgep212_sum << 2) | 0;
    $__x9_1 = $172;
    $__dst8_1 = $scevgep224;
    label = 35;
    break;
   case 35:
    HEAP32[$__dst8_1 >> 2] = $__x9_1;
    label = 36;
    break;
   case 36:
    $177 = $M + 8 | 0;
    $178 = HEAP32[$177 >> 2] | 0;
    $179 = HEAP32[$44 >> 2] | 0;
    ___gmpn_mulmod_bnm1($83, $60, $bp, $_0, $178, $179, $72);
    $180 = HEAP32[$36 >> 2] | 0;
    $181 = $180 + $_0 | 0;
    $182 = ($181 | 0) >= ($60 | 0);
    $183 = $60 - $_0 | 0;
    $184 = ($183 | 0) == ($180 | 0);
    $or_cond232 = $182 | $184;
    if ($or_cond232) {
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    $185 = $_0 + $180 | 0;
    $186 = $185 << 2;
    $scevgep210 = $82 + $186 | 0;
    $187 = $60 - $_0 | 0;
    $188 = $187 - $180 | 0;
    $189 = $188 << 2;
    _memset($scevgep210 | 0, 0, $189 | 0);
    label = 38;
    break;
   case 38:
    $191 = HEAP32[$44 >> 2] | 0;
    $192 = $191 + $_0 | 0;
    $193 = ($192 | 0) >= ($60 | 0);
    $194 = $60 - $_0 | 0;
    $195 = ($194 | 0) == ($191 | 0);
    $or_cond234 = $193 | $195;
    if ($or_cond234) {
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    $196 = $_0 + $191 | 0;
    $197 = $196 << 2;
    $scevgep209 = $_in + $197 | 0;
    $198 = $60 - $_0 | 0;
    $199 = $198 - $191 | 0;
    $200 = $199 << 2;
    _memset($scevgep209 | 0, 0, $200 | 0);
    label = 40;
    break;
   case 40:
    $202 = ___gmpn_sub_n($83, $83, $84, $60) | 0;
    $203 = HEAP32[$83 >> 2] | 0;
    $204 = $203 - $202 | 0;
    HEAP32[$83 >> 2] = $204;
    $205 = $203 >>> 0 < $202 >>> 0;
    if ($205) {
      $__p15_0 = $83;
      label = 41;
      break;
    } else {
      label = 42;
      break;
    }
   case 41:
    $206 = $__p15_0 + 4 | 0;
    $207 = HEAP32[$206 >> 2] | 0;
    $208 = $207 - 1 | 0;
    HEAP32[$206 >> 2] = $208;
    $209 = ($207 | 0) == 0;
    if ($209) {
      $__p15_0 = $206;
      label = 41;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    if ($145) {
      label = 43;
      break;
    } else {
      $nn_0 = 0;
      label = 48;
      break;
    }
   case 43:
    $211 = $58 - 1 | 0;
    $212 = HEAP32[$83 >> 2] | 0;
    $213 = ($211 | 0) == 0;
    if ($213) {
      $__x19_1 = $212;
      $__dst17_1 = $bp;
      label = 47;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    $214 = $_in + 4 | 0;
    $215 = $214;
    $216 = $284 - 1 | 0;
    $217 = $216 - $n | 0;
    $218 = $indvars_iv218 + $217 | 0;
    $219 = $52 - 1 | 0;
    $220 = $219 - $n | 0;
    $221 = $indvars_iv220 + $220 | 0;
    $222 = ($218 | 0) > ($221 | 0);
    $smax = $222 ? $218 : $221;
    $223 = -$smax | 0;
    $224 = $45 - 1 | 0;
    $225 = $224 - $n | 0;
    $226 = $indvars_iv218 + $225 | 0;
    $227 = $37 - 1 | 0;
    $228 = $227 - $n | 0;
    $229 = $indvars_iv220 + $228 | 0;
    $230 = ($226 | 0) > ($229 | 0);
    $smax206 = $230 ? $226 : $229;
    $231 = -$smax206 | 0;
    $232 = ($223 | 0) > ($231 | 0);
    $smax207 = $232 ? $223 : $231;
    $__x19_0 = $212;
    $__src18_0 = $215;
    $__dst17_0 = $bp;
    $__n16_0 = $211;
    label = 45;
    break;
   case 45:
    $234 = $__dst17_0 + 4 | 0;
    HEAP32[$__dst17_0 >> 2] = $__x19_0;
    $235 = $__src18_0 + 4 | 0;
    $236 = HEAP32[$__src18_0 >> 2] | 0;
    $237 = $__n16_0 - 1 | 0;
    $238 = ($237 | 0) == 0;
    if ($238) {
      label = 46;
      break;
    } else {
      $__x19_0 = $236;
      $__src18_0 = $235;
      $__dst17_0 = $234;
      $__n16_0 = $237;
      label = 45;
      break;
    }
   case 46:
    $scevgep_sum = $smax207 - 1 | 0;
    $scevgep208 = $bp + ($scevgep_sum << 2) | 0;
    $__x19_1 = $236;
    $__dst17_1 = $scevgep208;
    label = 47;
    break;
   case 47:
    HEAP32[$__dst17_1 >> 2] = $__x19_1;
    $nn_0 = $58;
    label = 48;
    break;
   case 48:
    $240 = $nn_0 - 1 | 0;
    $241 = $ap + ($240 << 2) | 0;
    $242 = HEAP32[$241 >> 2] | 0;
    $243 = $bp + ($240 << 2) | 0;
    $244 = HEAP32[$243 >> 2] | 0;
    $245 = $244 | $242;
    $246 = ($245 | 0) == 0;
    if ($246) {
      $nn_0 = $240;
      label = 48;
      break;
    } else {
      $nn_1 = $nn_0;
      label = 49;
      break;
    }
   case 49:
    $247 = HEAP32[$__tmp_marker >> 2] | 0;
    $248 = ($247 | 0) == 0;
    if ($248) {
      label = 51;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    ___gmp_tmp_reentrant_free($247);
    label = 51;
    break;
   case 51:
    STACKTOP = __stackBase__;
    return $nn_1 | 0;
   case 52:
    $252 = ($k_0_1 | 0) > 0;
    if ($252) {
      label = 53;
      break;
    } else {
      label = 54;
      break;
    }
   case 53:
    $254 = $k_0_1 - 1 | 0;
    $255 = HEAP32[$28 >> 2] | 0;
    $256 = $255 + ($254 << 2) | 0;
    $257 = HEAP32[$256 >> 2] | 0;
    $258 = ($257 | 0) == 0;
    if ($258) {
      $k_0_1 = $254;
      label = 52;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    $260 = $mn + 4 | 0;
    HEAP32[$260 >> 2] = $k_0_1;
    $261 = $M + 16 | 0;
    $k_0_1227 = $16;
    label = 55;
    break;
   case 55:
    $263 = ($k_0_1227 | 0) > 0;
    if ($263) {
      label = 56;
      break;
    } else {
      label = 57;
      break;
    }
   case 56:
    $265 = $k_0_1227 - 1 | 0;
    $266 = HEAP32[$261 >> 2] | 0;
    $267 = $266 + ($265 << 2) | 0;
    $268 = HEAP32[$267 >> 2] | 0;
    $269 = ($268 | 0) == 0;
    if ($269) {
      $k_0_1227 = $265;
      label = 55;
      break;
    } else {
      label = 57;
      break;
    }
   case 57:
    $271 = $mn + 8 | 0;
    HEAP32[$271 >> 2] = $k_0_1227;
    $272 = $M + 20 | 0;
    $k_0_1_1 = $16;
    label = 58;
    break;
   case 58:
    $274 = ($k_0_1_1 | 0) > 0;
    if ($274) {
      label = 59;
      break;
    } else {
      label = 60;
      break;
    }
   case 59:
    $276 = $k_0_1_1 - 1 | 0;
    $277 = HEAP32[$272 >> 2] | 0;
    $278 = $277 + ($276 << 2) | 0;
    $279 = HEAP32[$278 >> 2] | 0;
    $280 = ($279 | 0) == 0;
    if ($280) {
      $k_0_1_1 = $276;
      label = 58;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    $282 = $mn + 12 | 0;
    HEAP32[$282 >> 2] = $k_0_1_1;
    HEAP32[$__tmp_marker >> 2] = 0;
    $283 = $mn + 4 | 0;
    $284 = HEAP32[$283 >> 2] | 0;
    $285 = ($284 | 0) == 0;
    if ($285) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
  }
  return 0;
}
function _submul($rp, $rn, $ap, $an, $bp, $bn) {
  $rp = $rp | 0;
  $rn = $rn | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $bp = $bp | 0;
  $bn = $bn | 0;
  var $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $_bn = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $_0 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    $1 = $bn + $an | 0;
    $2 = $1 << 2;
    $3 = $2 >>> 0 < 65536;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $5 = STACKTOP;
    STACKTOP = STACKTOP + $2 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $9 = $5;
    label = 4;
    break;
   case 3:
    $7 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $2) | 0;
    $9 = $7;
    label = 4;
    break;
   case 4:
    $10 = $9;
    $11 = ___gmpn_mul($10, $ap, $an, $bp, $bn) | 0;
    $12 = ($1 | 0) > ($rn | 0);
    $13 = $12 << 31 >> 31;
    $_bn = $bn + $an | 0;
    $14 = $_bn + $13 | 0;
    $15 = ___gmpn_sub($rp, $rp, $rn, $10, $14) | 0;
    $16 = HEAP32[$__tmp_marker >> 2] | 0;
    $17 = ($16 | 0) == 0;
    if ($17) {
      $_0 = $rn;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    ___gmp_tmp_reentrant_free($16);
    $_0 = $rn;
    label = 6;
    break;
   case 6:
    $19 = ($_0 | 0) > ($an | 0);
    if ($19) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $21 = $_0 - 1 | 0;
    $22 = $rp + ($21 << 2) | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = ($23 | 0) == 0;
    if ($24) {
      $_0 = $21;
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_hgcd($ap, $bp, $n, $M, $tp) {
  $ap = $ap | 0;
  $bp = $bp | 0;
  $n = $n | 0;
  $M = $M | 0;
  $tp = $tp | 0;
  var $M1 = 0, $1 = 0, $2 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $_ = 0, $n_ = 0, $success_0 = 0, $_058 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $success_1 = 0, $_1 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $M1 = __stackBase__ | 0;
    $1 = ($n | 0) / 2 & -1;
    $2 = $1 + 1 | 0;
    $3 = ($2 | 0) < ($n | 0);
    if ($3) {
      label = 2;
      break;
    } else {
      $_0 = 0;
      label = 12;
      break;
    }
   case 2:
    $5 = ($n | 0) > 399;
    if ($5) {
      label = 3;
      break;
    } else {
      $_1 = $n;
      $success_1 = 0;
      label = 10;
      break;
    }
   case 3:
    $7 = $n * 3 & -1;
    $8 = ($7 | 0) / 4 & -1;
    $9 = $8 + 1 | 0;
    $10 = ___gmpn_hgcd_reduce($M, $ap, $bp, $n, $1, $tp) | 0;
    $11 = ($10 | 0) == 0;
    $12 = $11 & 1;
    $_ = $12 ^ 1;
    $n_ = $11 ? $n : $10;
    $_058 = $n_;
    $success_0 = $_;
    label = 4;
    break;
   case 4:
    $14 = ($_058 | 0) > ($9 | 0);
    if ($14) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $16 = ___gmpn_hgcd_step($_058, $ap, $bp, $2, $M, $tp) | 0;
    $17 = ($16 | 0) == 0;
    if ($17) {
      label = 6;
      break;
    } else {
      $_058 = $16;
      $success_0 = 1;
      label = 4;
      break;
    }
   case 6:
    $19 = ($success_0 | 0) != 0;
    $20 = $19 ? $_058 : 0;
    $_0 = $20;
    label = 12;
    break;
   case 7:
    $22 = $1 + 3 | 0;
    $23 = ($_058 | 0) > ($22 | 0);
    if ($23) {
      label = 8;
      break;
    } else {
      $_1 = $_058;
      $success_1 = $success_0;
      label = 10;
      break;
    }
   case 8:
    $25 = $2 << 1;
    $26 = $25 - $_058 | 0;
    $27 = $26 + 1 | 0;
    $28 = $_058 - $27 | 0;
    $29 = $28 + 1 | 0;
    $30 = ($29 | 0) / 2 & -1;
    $31 = $30 << 2;
    $32 = $31 + 4 | 0;
    ___gmpn_hgcd_matrix_init($M1, $28, $tp);
    $33 = $ap + ($27 << 2) | 0;
    $34 = $bp + ($27 << 2) | 0;
    $35 = $tp + ($32 << 2) | 0;
    $36 = ___gmpn_hgcd($33, $34, $28, $M1, $35) | 0;
    $37 = ($36 | 0) > 0;
    if ($37) {
      label = 9;
      break;
    } else {
      $_1 = $_058;
      $success_1 = $success_0;
      label = 10;
      break;
    }
   case 9:
    $39 = $36 + $27 | 0;
    $40 = ___gmpn_hgcd_matrix_adjust($M1, $39, $ap, $bp, $27, $35) | 0;
    ___gmpn_hgcd_matrix_mul($M, $M1, $35);
    $_1 = $40;
    $success_1 = 1;
    label = 10;
    break;
   case 10:
    $41 = ___gmpn_hgcd_step($_1, $ap, $bp, $2, $M, $tp) | 0;
    $42 = ($41 | 0) == 0;
    if ($42) {
      label = 11;
      break;
    } else {
      $_1 = $41;
      $success_1 = 1;
      label = 10;
      break;
    }
   case 11:
    $44 = ($success_1 | 0) != 0;
    $45 = $44 ? $_1 : 0;
    $_0 = $45;
    label = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _div1271($rp, $n0, $d0) {
  $rp = $rp | 0;
  $n0 = $n0 | 0;
  $d0 = $d0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cnt_037 = 0, $_036 = 0, $5 = 0, $6 = 0, $7 = 0, $cnt_133 = 0, $q_032 = 0, $_131 = 0, $_02630 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $_127 = 0, $q_1 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $cnt1_052 = 0, $_251 = 0, $18 = 0, $19 = 0, $20 = 0, $cnt1_146 = 0, $q_245 = 0, $_344 = 0, $_22843 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $_329 = 0, $q_3 = 0, $28 = 0, $29 = 0, $_4 = 0, $q_4 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($n0 | 0) < 0;
    if ($1) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $2 = $d0 >>> 0 > $n0 >>> 0;
    if ($2) {
      $q_4 = 0;
      $_4 = $n0;
      label = 14;
      break;
    } else {
      $_251 = $d0;
      $cnt1_052 = 0;
      label = 10;
      break;
    }
   case 3:
    $3 = ($d0 | 0) > -1;
    if ($3) {
      $_036 = $d0;
      $cnt_037 = 1;
      label = 5;
      break;
    } else {
      $_02630 = $n0;
      $_131 = $d0;
      $q_032 = 0;
      $cnt_133 = 1;
      label = 6;
      break;
    }
   case 4:
    $4 = ($6 | 0) == 0;
    if ($4) {
      $q_4 = 0;
      $_4 = $n0;
      label = 14;
      break;
    } else {
      $_02630 = $n0;
      $_131 = $5;
      $q_032 = 0;
      $cnt_133 = $6;
      label = 6;
      break;
    }
   case 5:
    $5 = $_036 << 1;
    $6 = $cnt_037 + 1 | 0;
    $7 = ($5 | 0) > -1;
    if ($7) {
      $_036 = $5;
      $cnt_037 = $6;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 6:
    $8 = $q_032 << 1;
    $9 = $_02630 >>> 0 < $_131 >>> 0;
    if ($9) {
      $q_1 = $8;
      $_127 = $_02630;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $11 = $_02630 - $_131 | 0;
    $12 = $8 | 1;
    $q_1 = $12;
    $_127 = $11;
    label = 8;
    break;
   case 8:
    $14 = $_131 >>> 1;
    $15 = $cnt_133 - 1 | 0;
    $16 = ($15 | 0) == 0;
    if ($16) {
      $q_4 = $q_1;
      $_4 = $_127;
      label = 14;
      break;
    } else {
      $_02630 = $_127;
      $_131 = $14;
      $q_032 = $q_1;
      $cnt_133 = $15;
      label = 6;
      break;
    }
   case 9:
    $17 = ($19 | 0) == 0;
    if ($17) {
      $q_4 = 0;
      $_4 = $n0;
      label = 14;
      break;
    } else {
      $_22843 = $n0;
      $_344 = $18;
      $q_245 = 0;
      $cnt1_146 = $19;
      label = 11;
      break;
    }
   case 10:
    $18 = $_251 << 1;
    $19 = $cnt1_052 + 1 | 0;
    $20 = $18 >>> 0 > $n0 >>> 0;
    if ($20) {
      label = 9;
      break;
    } else {
      $_251 = $18;
      $cnt1_052 = $19;
      label = 10;
      break;
    }
   case 11:
    $21 = $_344 >>> 1;
    $22 = $q_245 << 1;
    $23 = $_22843 >>> 0 < $21 >>> 0;
    if ($23) {
      $q_3 = $22;
      $_329 = $_22843;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $25 = $_22843 - $21 | 0;
    $26 = $22 | 1;
    $q_3 = $26;
    $_329 = $25;
    label = 13;
    break;
   case 13:
    $28 = $cnt1_146 - 1 | 0;
    $29 = ($28 | 0) == 0;
    if ($29) {
      $q_4 = $q_3;
      $_4 = $_329;
      label = 14;
      break;
    } else {
      $_22843 = $_329;
      $_344 = $21;
      $q_245 = $q_3;
      $cnt1_146 = $28;
      label = 11;
      break;
    }
   case 14:
    HEAP32[$rp >> 2] = $_4;
    return $q_4 | 0;
  }
  return 0;
}
function _mpn_zero_p266($ap, $n) {
  $ap = $ap | 0;
  $n = $n | 0;
  var $i_0_in = 0, $i_0 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $i_0_in = $n;
    label = 2;
    break;
   case 2:
    $i_0 = $i_0_in - 1 | 0;
    $2 = ($i_0_in | 0) > 0;
    if ($2) {
      label = 3;
      break;
    } else {
      $_0 = 1;
      label = 4;
      break;
    }
   case 3:
    $4 = $ap + ($i_0 << 2) | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($5 | 0) == 0;
    if ($6) {
      $i_0_in = $i_0;
      label = 2;
      break;
    } else {
      $_0 = 0;
      label = 4;
      break;
    }
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function _mpn_jacobi_update269($bits, $denominator, $q) {
  $bits = $bits | 0;
  $denominator = $denominator | 0;
  $q = $q | 0;
  return HEAPU8[15e3 + ((($denominator << 2) + ($bits << 3) | 0) + $q | 0) | 0] | 0 | 0;
}
function _div2270($rp, $nh, $nl, $dh, $dl) {
  $rp = $rp | 0;
  $nh = $nh | 0;
  $nl = $nl | 0;
  $dh = $dh | 0;
  $dl = $dl | 0;
  var $1 = 0, $2 = 0, $3 = 0, $cnt_086 = 0, $_06285 = 0, $_06684 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_080 = 0, $_05779 = 0, $cnt_178 = 0, $q_077 = 0, $_16376 = 0, $_16774 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $or_cond = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $q_1 = 0, $_158 = 0, $_1 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $_268 = 0, $_264 = 0, $cnt1_0 = 0, $29 = 0, $31 = 0, $32 = 0, $or_cond70 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $_297 = 0, $cnt1_196 = 0, $_25995 = 0, $q_294 = 0, $_36593 = 0, $_36992 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $or_cond71 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $q_3 = 0, $_360 = 0, $_3 = 0, $55 = 0, $56 = 0, $q_4 = 0, $_461 = 0, $_4 = 0, $57 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($nh | 0) < 0;
    if ($1) {
      label = 2;
      break;
    } else {
      $cnt1_0 = 0;
      $_264 = $dl;
      $_268 = $dh;
      label = 9;
      break;
    }
   case 2:
    $2 = ($dh | 0) > -1;
    if ($2) {
      $_06684 = $dh;
      $_06285 = $dl;
      $cnt_086 = 1;
      label = 4;
      break;
    } else {
      $_16774 = $dh;
      $_16376 = $dl;
      $q_077 = 0;
      $cnt_178 = 1;
      $_05779 = $nl;
      $_080 = $nh;
      label = 5;
      break;
    }
   case 3:
    $3 = ($8 | 0) == 0;
    if ($3) {
      $_4 = $nh;
      $_461 = $nl;
      $q_4 = 0;
      label = 17;
      break;
    } else {
      $_16774 = $6;
      $_16376 = $7;
      $q_077 = 0;
      $cnt_178 = $8;
      $_05779 = $nl;
      $_080 = $nh;
      label = 5;
      break;
    }
   case 4:
    $4 = $_06684 << 1;
    $5 = $_06285 >>> 31;
    $6 = $5 | $4;
    $7 = $_06285 << 1;
    $8 = $cnt_086 + 1 | 0;
    $9 = ($6 | 0) > -1;
    if ($9) {
      $_06684 = $6;
      $_06285 = $7;
      $cnt_086 = $8;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 5:
    $10 = $q_077 << 1;
    $11 = $_080 >>> 0 > $_16774 >>> 0;
    if ($11) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $13 = ($_080 | 0) != ($_16774 | 0);
    $14 = $_05779 >>> 0 < $_16376 >>> 0;
    $or_cond = $13 | $14;
    if ($or_cond) {
      $_1 = $_080;
      $_158 = $_05779;
      $q_1 = $10;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $16 = $_05779 - $_16376 | 0;
    $17 = $_080 - $_16774 | 0;
    $18 = $_05779 >>> 0 < $_16376 >>> 0;
    $19 = $18 & 1;
    $20 = $17 - $19 | 0;
    $21 = $10 | 1;
    $_1 = $20;
    $_158 = $16;
    $q_1 = $21;
    label = 8;
    break;
   case 8:
    $23 = $_16774 << 31;
    $24 = $_16376 >>> 1;
    $25 = $24 | $23;
    $26 = $_16774 >>> 1;
    $27 = $cnt_178 - 1 | 0;
    $28 = ($27 | 0) == 0;
    if ($28) {
      $_4 = $_1;
      $_461 = $_158;
      $q_4 = $q_1;
      label = 17;
      break;
    } else {
      $_16774 = $26;
      $_16376 = $25;
      $q_077 = $q_1;
      $cnt_178 = $27;
      $_05779 = $_158;
      $_080 = $_1;
      label = 5;
      break;
    }
   case 9:
    $29 = $_268 >>> 0 < $nh >>> 0;
    if ($29) {
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $31 = ($_268 | 0) != ($nh | 0);
    $32 = $_264 >>> 0 > $nl >>> 0;
    $or_cond70 = $31 | $32;
    if ($or_cond70) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $33 = ($cnt1_0 | 0) == 0;
    if ($33) {
      $_4 = $nh;
      $_461 = $nl;
      $q_4 = 0;
      label = 17;
      break;
    } else {
      $_36992 = $_268;
      $_36593 = $_264;
      $q_294 = 0;
      $_25995 = $nl;
      $cnt1_196 = $cnt1_0;
      $_297 = $nh;
      label = 13;
      break;
    }
   case 12:
    $34 = $_268 << 1;
    $35 = $_264 >>> 31;
    $36 = $35 | $34;
    $37 = $_264 << 1;
    $38 = $cnt1_0 + 1 | 0;
    $cnt1_0 = $38;
    $_264 = $37;
    $_268 = $36;
    label = 9;
    break;
   case 13:
    $39 = $_36992 << 31;
    $40 = $_36593 >>> 1;
    $41 = $40 | $39;
    $42 = $_36992 >>> 1;
    $43 = $q_294 << 1;
    $44 = $_297 >>> 0 > $42 >>> 0;
    if ($44) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $46 = ($_297 | 0) != ($42 | 0);
    $47 = $_25995 >>> 0 < $41 >>> 0;
    $or_cond71 = $46 | $47;
    if ($or_cond71) {
      $_3 = $_297;
      $_360 = $_25995;
      $q_3 = $43;
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $49 = $_25995 - $41 | 0;
    $50 = $_297 - $42 | 0;
    $51 = $_25995 >>> 0 < $41 >>> 0;
    $52 = $51 & 1;
    $53 = $50 - $52 | 0;
    $54 = $43 | 1;
    $_3 = $53;
    $_360 = $49;
    $q_3 = $54;
    label = 16;
    break;
   case 16:
    $55 = $cnt1_196 - 1 | 0;
    $56 = ($55 | 0) == 0;
    if ($56) {
      $_4 = $_3;
      $_461 = $_360;
      $q_4 = $q_3;
      label = 17;
      break;
    } else {
      $_36992 = $42;
      $_36593 = $41;
      $q_294 = $q_3;
      $_25995 = $_360;
      $cnt1_196 = $55;
      $_297 = $_3;
      label = 13;
      break;
    }
   case 17:
    HEAP32[$rp >> 2] = $_461;
    $57 = $rp + 4 | 0;
    HEAP32[$57 >> 2] = $_4;
    return $q_4 | 0;
  }
  return 0;
}
function ___gmpn_hgcd_appr($ap, $bp, $n, $M, $tp) {
  $ap = $ap | 0;
  $bp = $bp | 0;
  $n = $n | 0;
  $M = $M | 0;
  $tp = $tp | 0;
  var $M1 = 0, $M15 = 0, $1 = 0, $3 = 0, $4 = 0, $5 = 0, $_0112_ph_ph194 = 0, $_0113_ph_ph193 = 0, $_0115_ph_ph192 = 0, $s_0_ph_ph191 = 0, $success_0_ph_ph190 = 0, $extra_bits_0_ph_ph189 = 0, $6 = 0, $7 = 0, $8 = 0, $_sum118 = 0, $9 = 0, $10 = 0, $11 = 0, $_0115_ph161 = 0, $success_0_ph160 = 0, $extra_bits_0_ph159 = 0, $12 = 0, $13 = 0, $14 = 0, $_0115142 = 0, $success_0141 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $extra_bits_1 = 0, $s_1 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $_0112_ph_ph187 = 0, $_0113_ph_ph182 = 0, $s_0_ph_ph174 = 0, $extra_bits_0_ph150 = 0, $_0115_lcssa = 0, $success_0_lcssa = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $_sum = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $_1116 = 0, $61 = 0, $63 = 0, $64 = 0, $success_0_lcssa235 = 0, $_2 = 0, $_1114 = 0, $_1 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $_ = 0, $n_ = 0, $success_2 = 0, $_3 = 0, $84 = 0, $86 = 0, $87 = 0, $89 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $success_3 = 0, $_4 = 0, $106 = 0, $107 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $M1 = __stackBase__ | 0;
    $M15 = __stackBase__ + 16 | 0;
    $1 = ($n | 0) < 3;
    if ($1) {
      $_0 = 0;
      label = 29;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = ($n | 0) / 2 & -1;
    $4 = $3 + 1 | 0;
    $5 = ($n | 0) > 399;
    if ($5) {
      label = 22;
      break;
    } else {
      $extra_bits_0_ph_ph189 = 0;
      $success_0_ph_ph190 = 0;
      $s_0_ph_ph191 = $4;
      $_0115_ph_ph192 = $n;
      $_0113_ph_ph193 = $bp;
      $_0112_ph_ph194 = $ap;
      label = 3;
      break;
    }
   case 3:
    $6 = $s_0_ph_ph191 << 6;
    $7 = $s_0_ph_ph191 << 1;
    $8 = $s_0_ph_ph191 + 1 | 0;
    $_sum118 = $s_0_ph_ph191 + 1 | 0;
    $9 = $_0112_ph_ph194 + ($_sum118 << 2) | 0;
    $10 = $_0113_ph_ph193 + ($_sum118 << 2) | 0;
    $extra_bits_0_ph159 = $extra_bits_0_ph_ph189;
    $success_0_ph160 = $success_0_ph_ph190;
    $_0115_ph161 = $_0115_ph_ph192;
    label = 5;
    break;
   case 4:
    $11 = ($16 | 0) > 2;
    if ($11) {
      $extra_bits_0_ph159 = 0;
      $success_0_ph160 = 1;
      $_0115_ph161 = $16;
      label = 5;
      break;
    } else {
      $_1 = $_0112_ph_ph194;
      $_1114 = $_0113_ph_ph193;
      $_2 = $16;
      $success_0_lcssa235 = 1;
      label = 19;
      break;
    }
   case 5:
    $12 = $extra_bits_0_ph159 << 1;
    $13 = $12 + 32 | 0;
    $14 = ($extra_bits_0_ph159 | 0) == 0;
    $success_0141 = $success_0_ph160;
    $_0115142 = $_0115_ph161;
    label = 6;
    break;
   case 6:
    $16 = ___gmpn_hgcd_step($_0115142, $_0112_ph_ph194, $_0113_ph_ph193, $s_0_ph_ph191, $M, $tp) | 0;
    $17 = ($16 | 0) == 0;
    if ($17) {
      $success_0_lcssa = $success_0141;
      $_0115_lcssa = $_0115142;
      $extra_bits_0_ph150 = $extra_bits_0_ph159;
      $s_0_ph_ph174 = $s_0_ph_ph191;
      $_0113_ph_ph182 = $_0113_ph_ph193;
      $_0112_ph_ph187 = $_0112_ph_ph194;
      label = 15;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $19 = $16 << 5;
    $20 = $13 + $19 | 0;
    $21 = $20 >>> 0 > $6 >>> 0;
    if ($21) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $22 = ($16 | 0) > 2;
    if ($22) {
      $success_0141 = 1;
      $_0115142 = $16;
      label = 6;
      break;
    } else {
      $success_0_lcssa = 1;
      $_0115_lcssa = $16;
      $extra_bits_0_ph150 = $extra_bits_0_ph159;
      $s_0_ph_ph174 = $s_0_ph_ph191;
      $_0113_ph_ph182 = $_0113_ph_ph193;
      $_0112_ph_ph187 = $_0112_ph_ph194;
      label = 15;
      break;
    }
   case 9:
    $24 = $7 - $16 | 0;
    $25 = $24 << 5;
    $26 = $25 - $12 | 0;
    $27 = $26 >>> 5;
    if ($14) {
      label = 10;
      break;
    } else {
      label = 13;
      break;
    }
   case 10:
    $29 = ($8 | 0) == ($16 | 0);
    if ($29) {
      label = 4;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $31 = $16 - $s_0_ph_ph191 | 0;
    $32 = $31 - 1 | 0;
    $33 = _mpn_zero_p266($9, $32) | 0;
    $34 = ($33 | 0) == 0;
    if ($34) {
      label = 12;
      break;
    } else {
      label = 8;
      break;
    }
   case 12:
    $36 = _mpn_zero_p266($10, $32) | 0;
    $37 = ($36 | 0) == 0;
    if ($37) {
      $s_1 = $8;
      $extra_bits_1 = 31;
      label = 14;
      break;
    } else {
      label = 8;
      break;
    }
   case 13:
    $39 = $extra_bits_0_ph159 - 1 | 0;
    $s_1 = $s_0_ph_ph191;
    $extra_bits_1 = $39;
    label = 14;
    break;
   case 14:
    $40 = $_0112_ph_ph194 + ($27 << 2) | 0;
    $41 = $_0113_ph_ph193 + ($27 << 2) | 0;
    $42 = $16 - $27 | 0;
    $43 = $s_1 - $27 | 0;
    $44 = ($42 | 0) > 2;
    if ($44) {
      $extra_bits_0_ph_ph189 = $extra_bits_1;
      $success_0_ph_ph190 = 1;
      $s_0_ph_ph191 = $43;
      $_0115_ph_ph192 = $42;
      $_0113_ph_ph193 = $41;
      $_0112_ph_ph194 = $40;
      label = 3;
      break;
    } else {
      $success_0_lcssa = 1;
      $_0115_lcssa = $42;
      $extra_bits_0_ph150 = $extra_bits_1;
      $s_0_ph_ph174 = $43;
      $_0113_ph_ph182 = $41;
      $_0112_ph_ph187 = $40;
      label = 15;
      break;
    }
   case 15:
    $45 = ($extra_bits_0_ph150 | 0) == 0;
    if ($45) {
      $_1 = $_0112_ph_ph187;
      $_1114 = $_0113_ph_ph182;
      $_2 = $_0115_lcssa;
      $success_0_lcssa235 = $success_0_lcssa;
      label = 19;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $47 = $_0112_ph_ph187 - 4 | 0;
    $48 = $_0113_ph_ph182 - 4 | 0;
    $49 = 32 - $extra_bits_0_ph150 | 0;
    $50 = ___gmpn_rshift($_0112_ph_ph187, $_0112_ph_ph187, $_0115_lcssa, $49) | 0;
    HEAP32[$47 >> 2] = $50;
    $51 = ___gmpn_rshift($_0113_ph_ph182, $_0113_ph_ph182, $_0115_lcssa, $49) | 0;
    HEAP32[$48 >> 2] = $51;
    $_sum = $_0115_lcssa - 1 | 0;
    $52 = $_0112_ph_ph187 + ($_sum << 2) | 0;
    $53 = HEAP32[$52 >> 2] | 0;
    $54 = $_0113_ph_ph182 + ($_sum << 2) | 0;
    $55 = HEAP32[$54 >> 2] | 0;
    $56 = $55 | $53;
    $57 = ($56 | 0) != 0;
    $58 = $57 & 1;
    $59 = $58 + $_0115_lcssa | 0;
    $_1116 = $59;
    label = 17;
    break;
   case 17:
    $61 = ($_1116 | 0) > 2;
    if ($61) {
      label = 18;
      break;
    } else {
      $_1 = $47;
      $_1114 = $48;
      $_2 = $_1116;
      $success_0_lcssa235 = $success_0_lcssa;
      label = 19;
      break;
    }
   case 18:
    $63 = ___gmpn_hgcd_step($_1116, $47, $48, $s_0_ph_ph174, $M, $tp) | 0;
    $64 = ($63 | 0) == 0;
    if ($64) {
      $_0 = 1;
      label = 29;
      break;
    } else {
      $_1116 = $63;
      label = 17;
      break;
    }
   case 19:
    $65 = ($_2 | 0) == 2;
    if ($65) {
      label = 20;
      break;
    } else {
      $_0 = $success_0_lcssa235;
      label = 29;
      break;
    }
   case 20:
    $67 = $_1 + 4 | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    $69 = HEAP32[$_1 >> 2] | 0;
    $70 = $_1114 + 4 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    $72 = HEAP32[$_1114 >> 2] | 0;
    $73 = ___gmpn_hgcd2($68, $69, $71, $72, $M1) | 0;
    $74 = ($73 | 0) == 0;
    if ($74) {
      $_0 = $success_0_lcssa235;
      label = 29;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    ___gmpn_hgcd_matrix_mul_1($M, $M1, $tp);
    $_0 = 1;
    label = 29;
    break;
   case 22:
    $77 = $n * 3 & -1;
    $78 = ($77 | 0) / 4 & -1;
    $79 = $78 + 1 | 0;
    $80 = ___gmpn_hgcd_reduce($M, $ap, $bp, $n, $3, $tp) | 0;
    $81 = ($80 | 0) == 0;
    $82 = $81 & 1;
    $_ = $82 ^ 1;
    $n_ = $81 ? $n : $80;
    $_3 = $n_;
    $success_2 = $_;
    label = 23;
    break;
   case 23:
    $84 = ($_3 | 0) > ($79 | 0);
    if ($84) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    $86 = ___gmpn_hgcd_step($_3, $ap, $bp, $4, $M, $tp) | 0;
    $87 = ($86 | 0) == 0;
    if ($87) {
      $_0 = $success_2;
      label = 29;
      break;
    } else {
      $_3 = $86;
      $success_2 = 1;
      label = 23;
      break;
    }
   case 25:
    $89 = $3 + 3 | 0;
    $90 = ($_3 | 0) > ($89 | 0);
    if ($90) {
      label = 26;
      break;
    } else {
      $_4 = $_3;
      $success_3 = $success_2;
      label = 28;
      break;
    }
   case 26:
    $92 = $4 << 1;
    $93 = $92 - $_3 | 0;
    $94 = $93 + 1 | 0;
    $95 = $_3 - $94 | 0;
    $96 = $95 + 1 | 0;
    $97 = ($96 | 0) / 2 & -1;
    $98 = $97 << 2;
    $99 = $98 + 4 | 0;
    ___gmpn_hgcd_matrix_init($M15, $95, $tp);
    $100 = $ap + ($94 << 2) | 0;
    $101 = $bp + ($94 << 2) | 0;
    $102 = $tp + ($99 << 2) | 0;
    $103 = ___gmpn_hgcd_appr($100, $101, $95, $M15, $102) | 0;
    $104 = ($103 | 0) == 0;
    if ($104) {
      $_4 = $_3;
      $success_3 = $success_2;
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    ___gmpn_hgcd_matrix_mul($M, $M15, $102);
    $_0 = 1;
    label = 29;
    break;
   case 28:
    $106 = ___gmpn_hgcd_step($_4, $ap, $bp, $4, $M, $tp) | 0;
    $107 = ($106 | 0) == 0;
    if ($107) {
      $_0 = $success_3;
      label = 29;
      break;
    } else {
      $_4 = $106;
      $success_3 = 1;
      label = 28;
      break;
    }
   case 29:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_hgcd2_jacobi($ah, $al, $bh, $bl, $M, $bitsp) {
  $ah = $ah | 0;
  $al = $al | 0;
  $bh = $bh | 0;
  $bl = $bl | 0;
  $M = $M | 0;
  $bitsp = $bitsp | 0;
  var $r = 0, $r4 = 0, $r6 = 0, $r8 = 0, $1 = 0, $2 = 0, $3 = 0, $or_cond = 0, $5 = 0, $7 = 0, $8 = 0, $or_cond187 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $_0184 = 0, $u01_0 = 0, $u10_0 = 0, $bits_0 = 0, $_0179 = 0, $_0176 = 0, $_0175 = 0, $27 = 0, $_1185 = 0, $u00_1 = 0, $u01_1 = 0, $u10_1 = 0, $u11_1 = 0, $bits_1 = 0, $_1180 = 0, $_1177 = 0, $_1 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $_2186 = 0, $u00_2 = 0, $u01_2 = 0, $u10_2 = 0, $u11_2 = 0, $bits_2 = 0, $_2181 = 0, $_2178 = 0, $_2 = 0, $75 = 0, $77 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $93 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $u00_3 = 0, $u01_3 = 0, $u10_3 = 0, $u11_3 = 0, $bits_3 = 0, $_3182 = 0, $_3 = 0, $121 = 0, $123 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $u00_4 = 0, $u01_4 = 0, $u10_4 = 0, $u11_4 = 0, $bits_4 = 0, $_4183 = 0, $_4 = 0, $151 = 0, $153 = 0, $154 = 0, $156 = 0, $158 = 0, $159 = 0, $160 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $u00_5 = 0, $u01_5 = 0, $u10_5 = 0, $u11_5 = 0, $bits_5 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $r = __stackBase__ | 0;
    $r4 = __stackBase__ + 8 | 0;
    $r6 = __stackBase__ + 16 | 0;
    $r8 = __stackBase__ + 24 | 0;
    $1 = HEAP32[$bitsp >> 2] | 0;
    $2 = $ah >>> 0 < 2;
    $3 = $bh >>> 0 < 2;
    $or_cond = $2 | $3;
    if ($or_cond) {
      $_0 = 0;
      label = 42;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = $ah >>> 0 > $bh >>> 0;
    if ($5) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $7 = ($ah | 0) == ($bh | 0);
    $8 = $al >>> 0 > $bl >>> 0;
    $or_cond187 = $7 & $8;
    if ($or_cond187) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $10 = $ah - $bh | 0;
    $11 = $al >>> 0 < $bl >>> 0;
    $12 = $11 & 1;
    $13 = $10 - $12 | 0;
    $14 = $13 >>> 0 < 2;
    if ($14) {
      $_0 = 0;
      label = 42;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $16 = $al - $bl | 0;
    $17 = _mpn_jacobi_update269($1, 1, 1) | 0;
    $_0175 = $13;
    $_0176 = $16;
    $_0179 = $bh;
    $bits_0 = $17;
    $u10_0 = 0;
    $u01_0 = 1;
    $_0184 = $bl;
    label = 8;
    break;
   case 6:
    $19 = $bh - $ah | 0;
    $20 = $8 & 1;
    $21 = $19 - $20 | 0;
    $22 = $21 >>> 0 < 2;
    if ($22) {
      $_0 = 0;
      label = 42;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $24 = $bl - $al | 0;
    $25 = _mpn_jacobi_update269($1, 0, 1) | 0;
    $_0175 = $ah;
    $_0176 = $al;
    $_0179 = $21;
    $bits_0 = $25;
    $u10_0 = 1;
    $u01_0 = 0;
    $_0184 = $24;
    label = 8;
    break;
   case 8:
    $27 = $_0175 >>> 0 < $_0179 >>> 0;
    if ($27) {
      $_2 = $_0175;
      $_2178 = $_0176;
      $_2181 = $_0179;
      $bits_2 = $bits_0;
      $u11_2 = 1;
      $u10_2 = $u10_0;
      $u01_2 = $u01_0;
      $u00_2 = 1;
      $_2186 = $_0184;
      label = 18;
      break;
    } else {
      $_1 = $_0175;
      $_1177 = $_0176;
      $_1180 = $_0179;
      $bits_1 = $bits_0;
      $u11_1 = 1;
      $u10_1 = $u10_0;
      $u01_1 = $u01_0;
      $u00_1 = 1;
      $_1185 = $_0184;
      label = 9;
      break;
    }
   case 9:
    $29 = ($_1 | 0) == ($_1180 | 0);
    if ($29) {
      $bits_5 = $bits_1;
      $u11_5 = $u11_1;
      $u10_5 = $u10_1;
      $u01_5 = $u01_1;
      $u00_5 = $u00_1;
      label = 41;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $31 = $_1 >>> 0 < 65536;
    if ($31) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $33 = $_1 << 16;
    $34 = $_1177 >>> 16;
    $35 = $33 | $34;
    $36 = $_1180 << 16;
    $37 = $_1185 >>> 16;
    $38 = $36 | $37;
    $_3 = $35;
    $_3182 = $38;
    $bits_3 = $bits_1;
    $u11_3 = $u11_1;
    $u10_3 = $u10_1;
    $u01_3 = $u01_1;
    $u00_3 = $u00_1;
    label = 27;
    break;
   case 12:
    $40 = $_1177 - $_1185 | 0;
    $41 = $_1 - $_1180 | 0;
    $42 = $_1177 >>> 0 < $_1185 >>> 0;
    $43 = $42 & 1;
    $44 = $41 - $43 | 0;
    $45 = $44 >>> 0 < 2;
    if ($45) {
      $bits_5 = $bits_1;
      $u11_5 = $u11_1;
      $u10_5 = $u10_1;
      $u01_5 = $u01_1;
      $u00_5 = $u00_1;
      label = 41;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $47 = $44 >>> 0 > $_1180 >>> 0;
    if ($47) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $49 = $u01_1 + $u00_1 | 0;
    $50 = $u11_1 + $u10_1 | 0;
    $51 = _mpn_jacobi_update269($bits_1, 1, 1) | 0;
    $_2 = $44;
    $_2178 = $40;
    $_2181 = $_1180;
    $bits_2 = $51;
    $u11_2 = $50;
    $u10_2 = $u10_1;
    $u01_2 = $49;
    $u00_2 = $u00_1;
    $_2186 = $_1185;
    label = 18;
    break;
   case 15:
    $53 = $r | 0;
    $54 = _div2270($53, $44, $40, $_1180, $_1185) | 0;
    $55 = $r + 4 | 0;
    $56 = HEAP32[$55 >> 2] | 0;
    $57 = $56 >>> 0 < 2;
    if ($57) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    $59 = Math_imul($54, $u00_1);
    $60 = $59 + $u01_1 | 0;
    $61 = Math_imul($54, $u10_1);
    $62 = $61 + $u11_1 | 0;
    $63 = $54 & 3;
    $64 = _mpn_jacobi_update269($bits_1, 1, $63) | 0;
    $bits_5 = $64;
    $u11_5 = $62;
    $u10_5 = $u10_1;
    $u01_5 = $60;
    $u00_5 = $u00_1;
    label = 41;
    break;
   case 17:
    $66 = HEAP32[$53 >> 2] | 0;
    $67 = $54 + 1 | 0;
    $68 = Math_imul($67, $u00_1);
    $69 = $68 + $u01_1 | 0;
    $70 = Math_imul($67, $u10_1);
    $71 = $70 + $u11_1 | 0;
    $72 = $67 & 3;
    $73 = _mpn_jacobi_update269($bits_1, 1, $72) | 0;
    $_2 = $56;
    $_2178 = $66;
    $_2181 = $_1180;
    $bits_2 = $73;
    $u11_2 = $71;
    $u10_2 = $u10_1;
    $u01_2 = $69;
    $u00_2 = $u00_1;
    $_2186 = $_1185;
    label = 18;
    break;
   case 18:
    $75 = ($_2 | 0) == ($_2181 | 0);
    if ($75) {
      $bits_5 = $bits_2;
      $u11_5 = $u11_2;
      $u10_5 = $u10_2;
      $u01_5 = $u01_2;
      $u00_5 = $u00_2;
      label = 41;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $77 = $_2181 >>> 0 < 65536;
    if ($77) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    $79 = $_2 << 16;
    $80 = $_2178 >>> 16;
    $81 = $79 | $80;
    $82 = $_2181 << 16;
    $83 = $_2186 >>> 16;
    $84 = $82 | $83;
    $_4 = $81;
    $_4183 = $84;
    $bits_4 = $bits_2;
    $u11_4 = $u11_2;
    $u10_4 = $u10_2;
    $u01_4 = $u01_2;
    $u00_4 = $u00_2;
    label = 34;
    break;
   case 21:
    $86 = $_2186 - $_2178 | 0;
    $87 = $_2181 - $_2 | 0;
    $88 = $_2186 >>> 0 < $_2178 >>> 0;
    $89 = $88 & 1;
    $90 = $87 - $89 | 0;
    $91 = $90 >>> 0 < 2;
    if ($91) {
      $bits_5 = $bits_2;
      $u11_5 = $u11_2;
      $u10_5 = $u10_2;
      $u01_5 = $u01_2;
      $u00_5 = $u00_2;
      label = 41;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $93 = $90 >>> 0 > $_2 >>> 0;
    if ($93) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $95 = $u01_2 + $u00_2 | 0;
    $96 = $u11_2 + $u10_2 | 0;
    $97 = _mpn_jacobi_update269($bits_2, 0, 1) | 0;
    $_1 = $_2;
    $_1177 = $_2178;
    $_1180 = $90;
    $bits_1 = $97;
    $u11_1 = $u11_2;
    $u10_1 = $96;
    $u01_1 = $u01_2;
    $u00_1 = $95;
    $_1185 = $86;
    label = 9;
    break;
   case 24:
    $99 = $r4 | 0;
    $100 = _div2270($99, $90, $86, $_2, $_2178) | 0;
    $101 = $r4 + 4 | 0;
    $102 = HEAP32[$101 >> 2] | 0;
    $103 = $102 >>> 0 < 2;
    if ($103) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    $105 = Math_imul($100, $u01_2);
    $106 = $105 + $u00_2 | 0;
    $107 = Math_imul($100, $u11_2);
    $108 = $107 + $u10_2 | 0;
    $109 = $100 & 3;
    $110 = _mpn_jacobi_update269($bits_2, 0, $109) | 0;
    $bits_5 = $110;
    $u11_5 = $u11_2;
    $u10_5 = $108;
    $u01_5 = $u01_2;
    $u00_5 = $106;
    label = 41;
    break;
   case 26:
    $112 = HEAP32[$99 >> 2] | 0;
    $113 = $100 + 1 | 0;
    $114 = Math_imul($113, $u01_2);
    $115 = $114 + $u00_2 | 0;
    $116 = Math_imul($113, $u11_2);
    $117 = $116 + $u10_2 | 0;
    $118 = $113 & 3;
    $119 = _mpn_jacobi_update269($bits_2, 0, $118) | 0;
    $_1 = $_2;
    $_1177 = $_2178;
    $_1180 = $102;
    $bits_1 = $119;
    $u11_1 = $u11_2;
    $u10_1 = $117;
    $u01_1 = $u01_2;
    $u00_1 = $115;
    $_1185 = $112;
    label = 9;
    break;
   case 27:
    $121 = ($_3 | 0) == ($_3182 | 0);
    if ($121) {
      $bits_5 = $bits_3;
      $u11_5 = $u11_3;
      $u10_5 = $u10_3;
      $u01_5 = $u01_3;
      $u00_5 = $u00_3;
      label = 41;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $123 = $_3 - $_3182 | 0;
    $124 = $123 >>> 0 < 131072;
    if ($124) {
      $bits_5 = $bits_3;
      $u11_5 = $u11_3;
      $u10_5 = $u10_3;
      $u01_5 = $u01_3;
      $u00_5 = $u00_3;
      label = 41;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $126 = $123 >>> 0 > $_3182 >>> 0;
    if ($126) {
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    $128 = $u01_3 + $u00_3 | 0;
    $129 = $u11_3 + $u10_3 | 0;
    $130 = _mpn_jacobi_update269($bits_3, 1, 1) | 0;
    $_4 = $123;
    $_4183 = $_3182;
    $bits_4 = $130;
    $u11_4 = $129;
    $u10_4 = $u10_3;
    $u01_4 = $128;
    $u00_4 = $u00_3;
    label = 34;
    break;
   case 31:
    $132 = _div1271($r6, $123, $_3182) | 0;
    $133 = HEAP32[$r6 >> 2] | 0;
    $134 = $133 >>> 0 < 131072;
    if ($134) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    $136 = Math_imul($132, $u00_3);
    $137 = $136 + $u01_3 | 0;
    $138 = Math_imul($132, $u10_3);
    $139 = $138 + $u11_3 | 0;
    $140 = $132 & 3;
    $141 = _mpn_jacobi_update269($bits_3, 1, $140) | 0;
    $bits_5 = $141;
    $u11_5 = $139;
    $u10_5 = $u10_3;
    $u01_5 = $137;
    $u00_5 = $u00_3;
    label = 41;
    break;
   case 33:
    $143 = $132 + 1 | 0;
    $144 = Math_imul($143, $u00_3);
    $145 = $144 + $u01_3 | 0;
    $146 = Math_imul($143, $u10_3);
    $147 = $146 + $u11_3 | 0;
    $148 = $143 & 3;
    $149 = _mpn_jacobi_update269($bits_3, 1, $148) | 0;
    $_4 = $133;
    $_4183 = $_3182;
    $bits_4 = $149;
    $u11_4 = $147;
    $u10_4 = $u10_3;
    $u01_4 = $145;
    $u00_4 = $u00_3;
    label = 34;
    break;
   case 34:
    $151 = ($_4 | 0) == ($_4183 | 0);
    if ($151) {
      $bits_5 = $bits_4;
      $u11_5 = $u11_4;
      $u10_5 = $u10_4;
      $u01_5 = $u01_4;
      $u00_5 = $u00_4;
      label = 41;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $153 = $_4183 - $_4 | 0;
    $154 = $153 >>> 0 < 131072;
    if ($154) {
      $bits_5 = $bits_4;
      $u11_5 = $u11_4;
      $u10_5 = $u10_4;
      $u01_5 = $u01_4;
      $u00_5 = $u00_4;
      label = 41;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    $156 = $153 >>> 0 > $_4 >>> 0;
    if ($156) {
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    $158 = $u01_4 + $u00_4 | 0;
    $159 = $u11_4 + $u10_4 | 0;
    $160 = _mpn_jacobi_update269($bits_4, 0, 1) | 0;
    $_3 = $_4;
    $_3182 = $153;
    $bits_3 = $160;
    $u11_3 = $u11_4;
    $u10_3 = $159;
    $u01_3 = $u01_4;
    $u00_3 = $158;
    label = 27;
    break;
   case 38:
    $162 = _div1271($r8, $153, $_4) | 0;
    $163 = HEAP32[$r8 >> 2] | 0;
    $164 = $163 >>> 0 < 131072;
    if ($164) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    $166 = Math_imul($162, $u01_4);
    $167 = $166 + $u00_4 | 0;
    $168 = Math_imul($162, $u11_4);
    $169 = $168 + $u10_4 | 0;
    $170 = $162 & 3;
    $171 = _mpn_jacobi_update269($bits_4, 0, $170) | 0;
    $bits_5 = $171;
    $u11_5 = $u11_4;
    $u10_5 = $169;
    $u01_5 = $u01_4;
    $u00_5 = $167;
    label = 41;
    break;
   case 40:
    $173 = $162 + 1 | 0;
    $174 = Math_imul($173, $u01_4);
    $175 = $174 + $u00_4 | 0;
    $176 = Math_imul($173, $u11_4);
    $177 = $176 + $u10_4 | 0;
    $178 = $173 & 3;
    $179 = _mpn_jacobi_update269($bits_4, 0, $178) | 0;
    $_3 = $_4;
    $_3182 = $163;
    $bits_3 = $179;
    $u11_3 = $u11_4;
    $u10_3 = $177;
    $u01_3 = $u01_4;
    $u00_3 = $175;
    label = 27;
    break;
   case 41:
    $181 = $M | 0;
    HEAP32[$181 >> 2] = $u00_5;
    $182 = $M + 4 | 0;
    HEAP32[$182 >> 2] = $u01_5;
    $183 = $M + 8 | 0;
    HEAP32[$183 >> 2] = $u10_5;
    $184 = $M + 12 | 0;
    HEAP32[$184 >> 2] = $u11_5;
    HEAP32[$bitsp >> 2] = $bits_5;
    $_0 = 1;
    label = 42;
    break;
   case 42:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_hgcd_jacobi($ap, $bp, $n, $M, $bitsp, $tp) {
  $ap = $ap | 0;
  $bp = $bp | 0;
  $n = $n | 0;
  $M = $M | 0;
  $bitsp = $bitsp | 0;
  $tp = $tp | 0;
  var $M1 = 0, $1 = 0, $2 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $success_0 = 0, $_070 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $success_1 = 0, $_1 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $M1 = __stackBase__ | 0;
    $1 = ($n | 0) / 2 & -1;
    $2 = $1 + 1 | 0;
    $3 = ($2 | 0) < ($n | 0);
    if ($3) {
      label = 2;
      break;
    } else {
      $_0 = 0;
      label = 13;
      break;
    }
   case 2:
    $5 = ($n | 0) > 399;
    if ($5) {
      label = 3;
      break;
    } else {
      $_1 = $n;
      $success_1 = 0;
      label = 11;
      break;
    }
   case 3:
    $7 = $n * 3 & -1;
    $8 = ($7 | 0) / 4 & -1;
    $9 = $8 + 1 | 0;
    $10 = $ap + ($1 << 2) | 0;
    $11 = $bp + ($1 << 2) | 0;
    $12 = $n - $1 | 0;
    $13 = ___gmpn_hgcd_jacobi($10, $11, $12, $M, $bitsp, $tp) | 0;
    $14 = ($13 | 0) > 0;
    if ($14) {
      label = 4;
      break;
    } else {
      $_070 = $n;
      $success_0 = 0;
      label = 5;
      break;
    }
   case 4:
    $16 = $13 + $1 | 0;
    $17 = ___gmpn_hgcd_matrix_adjust($M, $16, $ap, $bp, $1, $tp) | 0;
    $_070 = $17;
    $success_0 = 1;
    label = 5;
    break;
   case 5:
    $18 = ($_070 | 0) > ($9 | 0);
    if ($18) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    $20 = _hgcd_jacobi_step($_070, $ap, $bp, $2, $M, $bitsp, $tp) | 0;
    $21 = ($20 | 0) == 0;
    if ($21) {
      label = 7;
      break;
    } else {
      $_070 = $20;
      $success_0 = 1;
      label = 5;
      break;
    }
   case 7:
    $23 = ($success_0 | 0) != 0;
    $24 = $23 ? $_070 : 0;
    $_0 = $24;
    label = 13;
    break;
   case 8:
    $26 = $1 + 3 | 0;
    $27 = ($_070 | 0) > ($26 | 0);
    if ($27) {
      label = 9;
      break;
    } else {
      $_1 = $_070;
      $success_1 = $success_0;
      label = 11;
      break;
    }
   case 9:
    $29 = $2 << 1;
    $30 = $29 - $_070 | 0;
    $31 = $30 + 1 | 0;
    $32 = $_070 - $31 | 0;
    $33 = $32 + 1 | 0;
    $34 = ($33 | 0) / 2 & -1;
    $35 = $34 << 2;
    $36 = $35 + 4 | 0;
    ___gmpn_hgcd_matrix_init($M1, $32, $tp);
    $37 = $ap + ($31 << 2) | 0;
    $38 = $bp + ($31 << 2) | 0;
    $39 = $tp + ($36 << 2) | 0;
    $40 = ___gmpn_hgcd_jacobi($37, $38, $32, $M1, $bitsp, $39) | 0;
    $41 = ($40 | 0) > 0;
    if ($41) {
      label = 10;
      break;
    } else {
      $_1 = $_070;
      $success_1 = $success_0;
      label = 11;
      break;
    }
   case 10:
    $43 = $40 + $31 | 0;
    $44 = ___gmpn_hgcd_matrix_adjust($M1, $43, $ap, $bp, $31, $39) | 0;
    ___gmpn_hgcd_matrix_mul($M, $M1, $39);
    $_1 = $44;
    $success_1 = 1;
    label = 11;
    break;
   case 11:
    $45 = _hgcd_jacobi_step($_1, $ap, $bp, $2, $M, $bitsp, $tp) | 0;
    $46 = ($45 | 0) == 0;
    if ($46) {
      label = 12;
      break;
    } else {
      $_1 = $45;
      $success_1 = 1;
      label = 11;
      break;
    }
   case 12:
    $48 = ($success_1 | 0) != 0;
    $49 = $48 ? $_1 : 0;
    $_0 = $49;
    label = 13;
    break;
   case 13:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _mpn_mullo_n_itch($n) {
  $n = $n | 0;
  return $n << 1 | 0;
}
function _mpn_jacobi_update274($bits, $denominator, $q) {
  $bits = $bits | 0;
  $denominator = $denominator | 0;
  $q = $q | 0;
  return HEAPU8[15e3 + ((($denominator << 2) + ($bits << 3) | 0) + $q | 0) | 0] | 0 | 0;
}
function _mpn_zero_p281($ap, $n) {
  $ap = $ap | 0;
  $n = $n | 0;
  var $i_0_in = 0, $i_0 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $i_0_in = $n;
    label = 2;
    break;
   case 2:
    $i_0 = $i_0_in - 1 | 0;
    $2 = ($i_0_in | 0) > 0;
    if ($2) {
      label = 3;
      break;
    } else {
      $_0 = 1;
      label = 4;
      break;
    }
   case 3:
    $4 = $ap + ($i_0 << 2) | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($5 | 0) == 0;
    if ($6) {
      $i_0_in = $i_0;
      label = 2;
      break;
    } else {
      $_0 = 0;
      label = 4;
      break;
    }
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function _hgcd_jacobi_step($n, $ap, $bp, $s, $M, $bitsp, $tp) {
  $n = $n | 0;
  $ap = $ap | 0;
  $bp = $bp | 0;
  $s = $s | 0;
  $M = $M | 0;
  $bitsp = $bitsp | 0;
  $tp = $tp | 0;
  var $M1 = 0, $ctx = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $bh_0 = 0, $bl_0 = 0, $al_0 = 0, $ah_0 = 0, $67 = 0, $68 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $__n_0 = 0, $__dst_0 = 0, $ap_pn = 0, $__x_0 = 0, $__src_0 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $M1 = __stackBase__ | 0;
    $ctx = __stackBase__ + 16 | 0;
    $1 = $n - 1 | 0;
    $2 = $ap + ($1 << 2) | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $bp + ($1 << 2) | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $5 | $3;
    $7 = $s + 1 | 0;
    $8 = ($7 | 0) == ($n | 0);
    if ($8) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $10 = $6 >>> 0 < 4;
    if ($10) {
      label = 18;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $12 = $n - 2 | 0;
    $13 = $ap + ($12 << 2) | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $bp + ($12 << 2) | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $ah_0 = $3;
    $al_0 = $14;
    $bl_0 = $16;
    $bh_0 = $5;
    label = 10;
    break;
   case 4:
    $18 = ($6 | 0) < 0;
    if ($18) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $20 = $n - 2 | 0;
    $21 = $ap + ($20 << 2) | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = $bp + ($20 << 2) | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $ah_0 = $3;
    $al_0 = $22;
    $bl_0 = $24;
    $bh_0 = $5;
    label = 10;
    break;
   case 6:
    $26 = $6 >>> 0 < 65536;
    if ($26) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $28 = $6 >>> 0 < 256;
    $29 = $28 ? 1 : 9;
    $34 = $29;
    label = 9;
    break;
   case 8:
    $31 = $6 >>> 0 < 16777216;
    $32 = $31 ? 17 : 25;
    $34 = $32;
    label = 9;
    break;
   case 9:
    $35 = 33 - $34 | 0;
    $36 = $6 >>> ($34 >>> 0);
    $37 = $36 + 9696 | 0;
    $38 = HEAP8[$37] | 0;
    $39 = $38 & 255;
    $40 = $35 - $39 | 0;
    $41 = HEAP32[$2 >> 2] | 0;
    $42 = $41 << $40;
    $43 = $n - 2 | 0;
    $44 = $ap + ($43 << 2) | 0;
    $45 = HEAP32[$44 >> 2] | 0;
    $46 = 32 - $40 | 0;
    $47 = $45 >>> ($46 >>> 0);
    $48 = $47 | $42;
    $49 = $45 << $40;
    $50 = $n - 3 | 0;
    $51 = $ap + ($50 << 2) | 0;
    $52 = HEAP32[$51 >> 2] | 0;
    $53 = $52 >>> ($46 >>> 0);
    $54 = $53 | $49;
    $55 = HEAP32[$4 >> 2] | 0;
    $56 = $55 << $40;
    $57 = $bp + ($43 << 2) | 0;
    $58 = HEAP32[$57 >> 2] | 0;
    $59 = $58 >>> ($46 >>> 0);
    $60 = $59 | $56;
    $61 = $58 << $40;
    $62 = $bp + ($50 << 2) | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    $64 = $63 >>> ($46 >>> 0);
    $65 = $64 | $61;
    $ah_0 = $48;
    $al_0 = $54;
    $bl_0 = $65;
    $bh_0 = $60;
    label = 10;
    break;
   case 10:
    $67 = ___gmpn_hgcd2_jacobi($ah_0, $al_0, $bh_0, $bl_0, $M1, $bitsp) | 0;
    $68 = ($67 | 0) == 0;
    if ($68) {
      label = 18;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    ___gmpn_hgcd_matrix_mul_1($M, $M1, $tp);
    $70 = ($n | 0) == 0;
    if ($70) {
      label = 17;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $72 = HEAP32[$ap >> 2] | 0;
    $73 = ($1 | 0) == 0;
    if ($73) {
      $__x_1 = $72;
      $__dst_1 = $tp;
      label = 16;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $74 = $n - 1 | 0;
    $__x_0 = $72;
    $ap_pn = $ap;
    $__dst_0 = $tp;
    $__n_0 = $1;
    label = 14;
    break;
   case 14:
    $__src_0 = $ap_pn + 4 | 0;
    $76 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $77 = HEAP32[$__src_0 >> 2] | 0;
    $78 = $__n_0 - 1 | 0;
    $79 = ($78 | 0) == 0;
    if ($79) {
      label = 15;
      break;
    } else {
      $__x_0 = $77;
      $ap_pn = $__src_0;
      $__dst_0 = $76;
      $__n_0 = $78;
      label = 14;
      break;
    }
   case 15:
    $scevgep = $tp + ($74 << 2) | 0;
    $__x_1 = $77;
    $__dst_1 = $scevgep;
    label = 16;
    break;
   case 16:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 17;
    break;
   case 17:
    $82 = ___gmpn_matrix22_mul1_inverse_vector($M1, $ap, $tp, $bp, $n) | 0;
    $_0 = $82;
    label = 19;
    break;
   case 18:
    $84 = $ctx | 0;
    HEAP32[$84 >> 2] = $M;
    $85 = $ctx + 4 | 0;
    HEAP32[$85 >> 2] = $bitsp;
    $86 = $ctx;
    $87 = ___gmpn_gcd_subdiv_step($ap, $bp, $n, $s, 538, $86, $tp) | 0;
    $_0 = $87;
    label = 19;
    break;
   case 19:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _hgcd_jacobi_hook($p, $gp, $gn, $qp, $qn, $d) {
  $p = $p | 0;
  $gp = $gp | 0;
  $gn = $gn | 0;
  $qp = $qp | 0;
  $qn = $qn | 0;
  $d = $d | 0;
  var $_0 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $_0 = $qn;
    label = 2;
    break;
   case 2:
    $2 = ($_0 | 0) > 0;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $4 = $_0 - 1 | 0;
    $5 = $qp + ($4 << 2) | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) == 0;
    if ($7) {
      $_0 = $4;
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $9 = $qp + ($_0 << 2) | 0;
    $10 = $p;
    $11 = HEAP32[$10 >> 2] | 0;
    ___gmpn_hgcd_matrix_update_q($11, $qp, $_0, $d, $9);
    $12 = $p + 4 | 0;
    $13 = $12;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = HEAP32[$qp >> 2] | 0;
    $17 = $16 & 3;
    $18 = _mpn_jacobi_update274($15, $d, $17) | 0;
    HEAP32[$14 >> 2] = $18;
    label = 5;
    break;
   case 5:
    return;
  }
}
function ___gmpn_mullo_n($rp, $xp, $yp, $n) {
  $rp = $rp | 0;
  $xp = $xp | 0;
  $yp = $yp | 0;
  $n = $n | 0;
  var $__tmp_marker = 0, $1 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $__n_0 = 0, $__dst_0 = 0, $__src_0 = 0, $__x_0 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $31 = 0, $32 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    $1 = ($n | 0) > 89;
    if ($1) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    ___gmpn_mullo_basecase($rp, $xp, $yp, $n);
    label = 15;
    break;
   case 3:
    HEAP32[$__tmp_marker >> 2] = 0;
    $4 = _mpn_mullo_n_itch($n) | 0;
    $5 = $4 << 2;
    $6 = $5 >>> 0 < 65536;
    if ($6) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $8 = STACKTOP;
    STACKTOP = STACKTOP + $5 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $12 = $8;
    label = 6;
    break;
   case 5:
    $10 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $5) | 0;
    $12 = $10;
    label = 6;
    break;
   case 6:
    $13 = $12;
    $14 = ($n | 0) > 2999;
    if ($14) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _mpn_dc_mullo_n($rp, $xp, $yp, $n, $13);
    label = 13;
    break;
   case 8:
    ___gmpn_mul_n($13, $xp, $yp, $n);
    $17 = $n - 1 | 0;
    $18 = HEAP32[$13 >> 2] | 0;
    $19 = ($17 | 0) == 0;
    if ($19) {
      $__x_1 = $18;
      $__dst_1 = $rp;
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $20 = $12 + 4 | 0;
    $21 = $20;
    $22 = $n - 1 | 0;
    $__x_0 = $18;
    $__src_0 = $21;
    $__dst_0 = $rp;
    $__n_0 = $17;
    label = 10;
    break;
   case 10:
    $24 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $25 = $__src_0 + 4 | 0;
    $26 = HEAP32[$__src_0 >> 2] | 0;
    $27 = $__n_0 - 1 | 0;
    $28 = ($27 | 0) == 0;
    if ($28) {
      label = 11;
      break;
    } else {
      $__x_0 = $26;
      $__src_0 = $25;
      $__dst_0 = $24;
      $__n_0 = $27;
      label = 10;
      break;
    }
   case 11:
    $scevgep = $rp + ($22 << 2) | 0;
    $__x_1 = $26;
    $__dst_1 = $scevgep;
    label = 12;
    break;
   case 12:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 13;
    break;
   case 13:
    $31 = HEAP32[$__tmp_marker >> 2] | 0;
    $32 = ($31 | 0) == 0;
    if ($32) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    ___gmp_tmp_reentrant_free($31);
    label = 15;
    break;
   case 15:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mpn_dc_mullo_n($rp, $xp, $yp, $n, $tp) {
  $rp = $rp | 0;
  $xp = $xp | 0;
  $yp = $yp | 0;
  $n = $n | 0;
  $tp = $tp | 0;
  var $1 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $n1_0 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $__n_0 = 0, $__dst_0 = 0, $tp_pn = 0, $__x_0 = 0, $__src_0 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $33 = 0, $34 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($n | 0) > 143;
    if ($1) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = $n * 11 & -1;
    $4 = ($3 >>> 0) / 36 >>> 0;
    $n1_0 = $4;
    label = 8;
    break;
   case 3:
    $6 = ($n | 0) > 386;
    if ($6) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $8 = $n * 9 & -1;
    $9 = ($8 >>> 0) / 40 >>> 0;
    $n1_0 = $9;
    label = 8;
    break;
   case 5:
    $11 = ($n | 0) > 499;
    if ($11) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $13 = $n * 7 & -1;
    $14 = ($13 >>> 0) / 39 >>> 0;
    $n1_0 = $14;
    label = 8;
    break;
   case 7:
    $16 = ($n >>> 0) / 10 >>> 0;
    $n1_0 = $16;
    label = 8;
    break;
   case 8:
    $18 = $n - $n1_0 | 0;
    ___gmpn_mul_n($tp, $xp, $yp, $18);
    $19 = ($n1_0 | 0) == ($n | 0);
    if ($19) {
      label = 14;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $21 = $18 - 1 | 0;
    $22 = HEAP32[$tp >> 2] | 0;
    $23 = ($21 | 0) == 0;
    if ($23) {
      $__x_1 = $22;
      $__dst_1 = $rp;
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $24 = $n - 1 | 0;
    $25 = $24 - $n1_0 | 0;
    $__x_0 = $22;
    $tp_pn = $tp;
    $__dst_0 = $rp;
    $__n_0 = $21;
    label = 11;
    break;
   case 11:
    $__src_0 = $tp_pn + 4 | 0;
    $27 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $28 = HEAP32[$__src_0 >> 2] | 0;
    $29 = $__n_0 - 1 | 0;
    $30 = ($29 | 0) == 0;
    if ($30) {
      label = 12;
      break;
    } else {
      $__x_0 = $28;
      $tp_pn = $__src_0;
      $__dst_0 = $27;
      $__n_0 = $29;
      label = 11;
      break;
    }
   case 12:
    $scevgep = $rp + ($25 << 2) | 0;
    $__x_1 = $28;
    $__dst_1 = $scevgep;
    label = 13;
    break;
   case 13:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 14;
    break;
   case 14:
    $33 = $n1_0 >>> 0 > 89;
    $34 = $tp + ($n << 2) | 0;
    $35 = $xp + ($18 << 2) | 0;
    if ($33) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    ___gmpn_mullo_basecase($34, $35, $yp, $n1_0);
    label = 17;
    break;
   case 16:
    _mpn_dc_mullo_n($34, $35, $yp, $n1_0, $34);
    label = 17;
    break;
   case 17:
    $39 = $rp + ($18 << 2) | 0;
    $40 = $tp + ($18 << 2) | 0;
    $41 = ___gmpn_add_n($39, $40, $34, $n1_0) | 0;
    $42 = $yp + ($18 << 2) | 0;
    if ($33) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    ___gmpn_mullo_basecase($34, $xp, $42, $n1_0);
    label = 20;
    break;
   case 19:
    _mpn_dc_mullo_n($34, $xp, $42, $n1_0, $34);
    label = 20;
    break;
   case 20:
    $46 = ___gmpn_add_n($39, $39, $34, $n1_0) | 0;
    return;
  }
}
function ___gmpn_mullo_basecase($rp, $up, $vp, $n) {
  $rp = $rp | 0;
  $up = $up | 0;
  $vp = $vp | 0;
  $n = $n | 0;
  var $1 = 0, $2 = 0, $3 = 0, $i_013 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP32[$vp >> 2] | 0;
    $2 = ___gmpn_mul_1($rp, $up, $n, $1) | 0;
    $3 = ($n | 0) > 1;
    if ($3) {
      $i_013 = 1;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $4 = $rp + ($i_013 << 2) | 0;
    $5 = $n - $i_013 | 0;
    $6 = $vp + ($i_013 << 2) | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ___gmpn_addmul_1($4, $up, $5, $7) | 0;
    $9 = $i_013 + 1 | 0;
    $exitcond = ($9 | 0) == ($n | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_013 = $9;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function ___gmpn_toom22_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  $pp = $pp | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $bp = $bp | 0;
  $bn = $bn | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $scevgep187 = 0, $scevgep187188 = 0, $28 = 0, $29 = 0, $30 = 0, $vm1_neg_0 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $scevgep = 0, $scevgep186 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $vm1_neg_1 = 0, $64 = 0, $67 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $97 = 0, $101 = 0, $102 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $_sum = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $117 = 0, $119 = 0, $120 = 0, $cy_0 = 0, $122 = 0, $uadd$0 = 0, $uadd$1 = 0, $123 = 0, $124 = 0, $__p_0 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $uadd178$0 = 0, $uadd178$1 = 0, $134 = 0, $135 = 0, $__p4_0 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $__p6_0 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $an >> 1;
    $2 = $an - $1 | 0;
    $3 = $bn - $2 | 0;
    $4 = $pp + ($2 << 2) | 0;
    $5 = ($1 | 0) == ($2 | 0);
    if ($5) {
      label = 2;
      break;
    } else {
      label = 5;
      break;
    }
   case 2:
    $7 = $ap + ($2 << 2) | 0;
    $8 = ___gmpn_cmp($ap, $7, $2) | 0;
    $9 = ($8 | 0) < 0;
    if ($9) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $11 = ___gmpn_sub_n($pp, $7, $ap, $2) | 0;
    $vm1_neg_0 = 1;
    label = 10;
    break;
   case 4:
    $13 = ___gmpn_sub_n($pp, $ap, $7, $2) | 0;
    $vm1_neg_0 = 0;
    label = 10;
    break;
   case 5:
    $15 = $ap + ($1 << 2) | 0;
    $16 = $2 - $1 | 0;
    $17 = _mpn_zero_p281($15, $16) | 0;
    $18 = ($17 | 0) == 0;
    if ($18) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $20 = $ap + ($2 << 2) | 0;
    $21 = ___gmpn_cmp($ap, $20, $1) | 0;
    $22 = ($21 | 0) < 0;
    if ($22) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $24 = ___gmpn_sub_n($pp, $20, $ap, $1) | 0;
    if ($5) {
      $vm1_neg_0 = 1;
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $26 = $ap + ($2 << 2) | 0;
    $27 = ___gmpn_sub($pp, $ap, $2, $26, $1) | 0;
    $vm1_neg_0 = 0;
    label = 10;
    break;
   case 9:
    $scevgep187 = $pp + ($1 << 2) | 0;
    $scevgep187188 = $scevgep187;
    $28 = $1 << 1;
    $29 = $an - $28 | 0;
    $30 = $29 << 2;
    _memset($scevgep187188 | 0, 0, $30 | 0);
    $vm1_neg_0 = 1;
    label = 10;
    break;
   case 10:
    $32 = ($3 | 0) == ($2 | 0);
    if ($32) {
      label = 11;
      break;
    } else {
      label = 14;
      break;
    }
   case 11:
    $34 = $bp + ($2 << 2) | 0;
    $35 = ___gmpn_cmp($bp, $34, $2) | 0;
    $36 = ($35 | 0) < 0;
    if ($36) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $38 = ___gmpn_sub_n($4, $34, $bp, $2) | 0;
    $39 = $vm1_neg_0 ^ 1;
    $vm1_neg_1 = $39;
    label = 20;
    break;
   case 13:
    $41 = ___gmpn_sub_n($4, $bp, $34, $2) | 0;
    $vm1_neg_1 = $vm1_neg_0;
    label = 20;
    break;
   case 14:
    $43 = $bp + ($3 << 2) | 0;
    $44 = $2 - $3 | 0;
    $45 = _mpn_zero_p281($43, $44) | 0;
    $46 = ($45 | 0) == 0;
    if ($46) {
      label = 19;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $48 = $bp + ($2 << 2) | 0;
    $49 = ___gmpn_cmp($bp, $48, $3) | 0;
    $50 = ($49 | 0) < 0;
    if ($50) {
      label = 16;
      break;
    } else {
      label = 19;
      break;
    }
   case 16:
    $52 = ___gmpn_sub_n($4, $48, $bp, $3) | 0;
    if ($32) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $scevgep = $pp + ($bn << 2) | 0;
    $scevgep186 = $scevgep;
    $53 = $an << 1;
    $54 = $53 - $bn | 0;
    $55 = $1 << 1;
    $56 = $54 - $55 | 0;
    $57 = $56 << 2;
    _memset($scevgep186 | 0, 0, $57 | 0);
    label = 18;
    break;
   case 18:
    $59 = $vm1_neg_0 ^ 1;
    $vm1_neg_1 = $59;
    label = 20;
    break;
   case 19:
    $61 = $bp + ($2 << 2) | 0;
    $62 = ___gmpn_sub($4, $bp, $2, $61, $3) | 0;
    $vm1_neg_1 = $vm1_neg_0;
    label = 20;
    break;
   case 20:
    $64 = ($2 | 0) > 29;
    if ($64) {
      label = 22;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    ___gmpn_mul_basecase($scratch, $pp, $2, $4, $2);
    label = 23;
    break;
   case 22:
    $67 = $2 << 1;
    $68 = $scratch + ($67 << 2) | 0;
    ___gmpn_toom22_mul($scratch, $pp, $2, $4, $2, $68);
    label = 23;
    break;
   case 23:
    $70 = ($1 | 0) > ($3 | 0);
    if ($70) {
      label = 24;
      break;
    } else {
      label = 29;
      break;
    }
   case 24:
    $72 = ($3 | 0) > 29;
    if ($72) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $74 = $2 << 1;
    $75 = $pp + ($74 << 2) | 0;
    $76 = $ap + ($2 << 2) | 0;
    $77 = $bp + ($2 << 2) | 0;
    ___gmpn_mul_basecase($75, $76, $1, $77, $3);
    label = 32;
    break;
   case 26:
    $79 = $1 << 2;
    $80 = $3 * 5 & -1;
    $81 = ($79 | 0) < ($80 | 0);
    $82 = $2 << 1;
    $83 = $pp + ($82 << 2) | 0;
    $84 = $ap + ($2 << 2) | 0;
    $85 = $bp + ($2 << 2) | 0;
    $86 = $scratch + ($82 << 2) | 0;
    if ($81) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    ___gmpn_toom22_mul($83, $84, $1, $85, $3, $86);
    label = 32;
    break;
   case 28:
    ___gmpn_toom32_mul($83, $84, $1, $85, $3, $86);
    label = 32;
    break;
   case 29:
    $90 = ($1 | 0) > 29;
    $91 = $2 << 1;
    $92 = $pp + ($91 << 2) | 0;
    $93 = $ap + ($2 << 2) | 0;
    $94 = $bp + ($2 << 2) | 0;
    if ($90) {
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    ___gmpn_mul_basecase($92, $93, $1, $94, $1);
    label = 32;
    break;
   case 31:
    $97 = $scratch + ($91 << 2) | 0;
    ___gmpn_toom22_mul($92, $93, $1, $94, $1, $97);
    label = 32;
    break;
   case 32:
    if ($64) {
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    ___gmpn_mul_basecase($pp, $ap, $2, $bp, $2);
    label = 35;
    break;
   case 34:
    $101 = $2 << 1;
    $102 = $scratch + ($101 << 2) | 0;
    ___gmpn_toom22_mul($pp, $ap, $2, $bp, $2, $102);
    label = 35;
    break;
   case 35:
    $104 = $2 << 1;
    $105 = $pp + ($104 << 2) | 0;
    $106 = ___gmpn_add_n($105, $4, $105, $2) | 0;
    $107 = ___gmpn_add_n($4, $105, $pp, $2) | 0;
    $108 = $107 + $106 | 0;
    $_sum = $104 + $2 | 0;
    $109 = $pp + ($_sum << 2) | 0;
    $110 = $1 - $2 | 0;
    $111 = $110 + $3 | 0;
    $112 = ___gmpn_add($105, $105, $2, $109, $111) | 0;
    $113 = $112 + $106 | 0;
    $114 = ($vm1_neg_1 | 0) == 0;
    if ($114) {
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    $116 = ___gmpn_add_n($4, $4, $scratch, $104) | 0;
    $117 = $116 + $113 | 0;
    $cy_0 = $117;
    label = 38;
    break;
   case 37:
    $119 = ___gmpn_sub_n($4, $4, $scratch, $104) | 0;
    $120 = $113 - $119 | 0;
    $cy_0 = $120;
    label = 38;
    break;
   case 38:
    $122 = HEAP32[$105 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($122 | 0, $108 | 0) | 0;
    $uadd$1 = tempRet0;
    $123 = $uadd$0;
    HEAP32[$105 >> 2] = $123;
    $124 = $uadd$1;
    if ($124) {
      $__p_0 = $105;
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    $125 = $__p_0 + 4 | 0;
    $126 = HEAP32[$125 >> 2] | 0;
    $127 = $126 + 1 | 0;
    HEAP32[$125 >> 2] = $127;
    $128 = ($127 | 0) == 0;
    if ($128) {
      $__p_0 = $125;
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    $129 = $cy_0 >>> 0 < 3;
    $130 = $2 * 3 & -1;
    $131 = $pp + ($130 << 2) | 0;
    if ($129) {
      label = 41;
      break;
    } else {
      $__p6_0 = $131;
      label = 43;
      break;
    }
   case 41:
    $133 = HEAP32[$131 >> 2] | 0;
    $uadd178$0 = _llvm_uadd_with_overflow_i32($133 | 0, $cy_0 | 0) | 0;
    $uadd178$1 = tempRet0;
    $134 = $uadd178$0;
    HEAP32[$131 >> 2] = $134;
    $135 = $uadd178$1;
    if ($135) {
      $__p4_0 = $131;
      label = 42;
      break;
    } else {
      label = 44;
      break;
    }
   case 42:
    $136 = $__p4_0 + 4 | 0;
    $137 = HEAP32[$136 >> 2] | 0;
    $138 = $137 + 1 | 0;
    HEAP32[$136 >> 2] = $138;
    $139 = ($138 | 0) == 0;
    if ($139) {
      $__p4_0 = $136;
      label = 42;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    $140 = $__p6_0 + 4 | 0;
    $141 = HEAP32[$__p6_0 >> 2] | 0;
    $142 = $141 - 1 | 0;
    HEAP32[$__p6_0 >> 2] = $142;
    $143 = ($141 | 0) == 0;
    if ($143) {
      $__p6_0 = $140;
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    return;
  }
}
function _mpn_zero_p284($ap, $n) {
  $ap = $ap | 0;
  $n = $n | 0;
  var $i_0_in = 0, $i_0 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $i_0_in = $n;
    label = 2;
    break;
   case 2:
    $i_0 = $i_0_in - 1 | 0;
    $2 = ($i_0_in | 0) > 0;
    if ($2) {
      label = 3;
      break;
    } else {
      $_0 = 1;
      label = 4;
      break;
    }
   case 3:
    $4 = $ap + ($i_0 << 2) | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($5 | 0) == 0;
    if ($6) {
      $i_0_in = $i_0;
      label = 2;
      break;
    } else {
      $_0 = 0;
      label = 4;
      break;
    }
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function _mpn_zero_p287($ap, $n) {
  $ap = $ap | 0;
  $n = $n | 0;
  var $i_0_in = 0, $i_0 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $i_0_in = $n;
    label = 2;
    break;
   case 2:
    $i_0 = $i_0_in - 1 | 0;
    $2 = ($i_0_in | 0) > 0;
    if ($2) {
      label = 3;
      break;
    } else {
      $_0 = 1;
      label = 4;
      break;
    }
   case 3:
    $4 = $ap + ($i_0 << 2) | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($5 | 0) == 0;
    if ($6) {
      $i_0_in = $i_0;
      label = 2;
      break;
    } else {
      $_0 = 0;
      label = 4;
      break;
    }
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_toom32_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  $pp = $pp | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $bp = $bp | 0;
  $bn = $bn | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $hi_0 = 0, $vm1_neg_0 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $scevgep = 0, $scevgep293 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $bp1_hi_0 = 0, $vm1_neg_1 = 0, $76 = 0, $77 = 0, $78 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $cy_0 = 0, $85 = 0, $87 = 0, $88 = 0, $89 = 0, $cy_1 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $hi_1 = 0, $99 = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $__p_0 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $uadd282$0 = 0, $uadd282$1 = 0, $127 = 0, $128 = 0, $__p2_0 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $__p4_0 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $146 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $__p6_0 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $uadd$0 = 0, $uadd$1 = 0, $177 = 0, $178 = 0, $__p8_0 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $an << 1;
    $2 = $bn * 3 & -1;
    $3 = ($1 | 0) < ($2 | 0);
    if ($3) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = $an - 1 | 0;
    $6 = ($5 >>> 0) / 3 >>> 0;
    $11 = $6;
    label = 4;
    break;
   case 3:
    $8 = $bn - 1 | 0;
    $9 = $8 >> 1;
    $11 = $9;
    label = 4;
    break;
   case 4:
    $12 = $11 + 1 | 0;
    $13 = $12 << 1;
    $14 = $an - $13 | 0;
    $15 = $bn - $12 | 0;
    $16 = $ap + ($13 << 2) | 0;
    $17 = ___gmpn_add($pp, $ap, $12, $16, $14) | 0;
    $18 = ($17 | 0) == 0;
    if ($18) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $20 = $ap + ($12 << 2) | 0;
    $21 = ___gmpn_cmp($pp, $20, $12) | 0;
    $22 = ($21 | 0) < 0;
    if ($22) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $24 = $pp + ($13 << 2) | 0;
    $25 = ___gmpn_sub_n($24, $20, $pp, $12) | 0;
    $vm1_neg_0 = 1;
    $hi_0 = 0;
    label = 8;
    break;
   case 7:
    $27 = $pp + ($13 << 2) | 0;
    $28 = $ap + ($12 << 2) | 0;
    $29 = ___gmpn_sub_n($27, $pp, $28, $12) | 0;
    $30 = $17 - $29 | 0;
    $vm1_neg_0 = 0;
    $hi_0 = $30;
    label = 8;
    break;
   case 8:
    $32 = $ap + ($12 << 2) | 0;
    $33 = ___gmpn_add_n($pp, $pp, $32, $12) | 0;
    $34 = $33 + $17 | 0;
    $35 = ($15 | 0) == ($12 | 0);
    $36 = $pp + ($12 << 2) | 0;
    $37 = $bp + ($12 << 2) | 0;
    if ($35) {
      label = 9;
      break;
    } else {
      label = 12;
      break;
    }
   case 9:
    $39 = ___gmpn_add_n($36, $bp, $37, $12) | 0;
    $40 = ___gmpn_cmp($bp, $37, $12) | 0;
    $41 = ($40 | 0) < 0;
    $42 = $12 * 3 & -1;
    $43 = $pp + ($42 << 2) | 0;
    if ($41) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $45 = ___gmpn_sub_n($43, $37, $bp, $12) | 0;
    $46 = $vm1_neg_0 ^ 1;
    $vm1_neg_1 = $46;
    $bp1_hi_0 = $39;
    label = 18;
    break;
   case 11:
    $48 = ___gmpn_sub_n($43, $bp, $37, $12) | 0;
    $vm1_neg_1 = $vm1_neg_0;
    $bp1_hi_0 = $39;
    label = 18;
    break;
   case 12:
    $50 = ___gmpn_add($36, $bp, $12, $37, $15) | 0;
    $51 = $bp + ($15 << 2) | 0;
    $52 = $12 - $15 | 0;
    $53 = _mpn_zero_p284($51, $52) | 0;
    $54 = ($53 | 0) == 0;
    if ($54) {
      label = 17;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $56 = ___gmpn_cmp($bp, $37, $15) | 0;
    $57 = ($56 | 0) < 0;
    if ($57) {
      label = 14;
      break;
    } else {
      label = 17;
      break;
    }
   case 14:
    $59 = $12 * 3 & -1;
    $60 = $pp + ($59 << 2) | 0;
    $61 = ___gmpn_sub_n($60, $37, $bp, $15) | 0;
    if ($35) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $62 = $11 << 1;
    $63 = $62 + $bn | 0;
    $64 = $63 + 2 | 0;
    $scevgep = $pp + ($64 << 2) | 0;
    $scevgep293 = $scevgep;
    $65 = $62 + 2 | 0;
    $66 = $65 - $bn | 0;
    $67 = $66 << 2;
    _memset($scevgep293 | 0, 0, $67 | 0);
    label = 16;
    break;
   case 16:
    $69 = $vm1_neg_0 ^ 1;
    $vm1_neg_1 = $69;
    $bp1_hi_0 = $50;
    label = 18;
    break;
   case 17:
    $71 = $12 * 3 & -1;
    $72 = $pp + ($71 << 2) | 0;
    $73 = ___gmpn_sub($72, $bp, $12, $37, $15) | 0;
    $vm1_neg_1 = $vm1_neg_0;
    $bp1_hi_0 = $50;
    label = 18;
    break;
   case 18:
    ___gmpn_mul_n($scratch, $pp, $36, $12);
    if (($34 | 0) == 1) {
      label = 19;
      break;
    } else if (($34 | 0) == 2) {
      label = 20;
      break;
    } else {
      $cy_0 = 0;
      label = 21;
      break;
    }
   case 19:
    $76 = $scratch + ($12 << 2) | 0;
    $77 = ___gmpn_add_n($76, $76, $36, $12) | 0;
    $78 = $77 + $bp1_hi_0 | 0;
    $cy_0 = $78;
    label = 21;
    break;
   case 20:
    $80 = $bp1_hi_0 << 1;
    $81 = $scratch + ($12 << 2) | 0;
    $82 = ___gmpn_addmul_1($81, $36, $12, 2) | 0;
    $83 = $82 + $80 | 0;
    $cy_0 = $83;
    label = 21;
    break;
   case 21:
    $85 = ($bp1_hi_0 | 0) == 0;
    if ($85) {
      $cy_1 = $cy_0;
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $87 = $scratch + ($12 << 2) | 0;
    $88 = ___gmpn_add_n($87, $87, $pp, $12) | 0;
    $89 = $88 + $cy_0 | 0;
    $cy_1 = $89;
    label = 23;
    break;
   case 23:
    $91 = $scratch + ($13 << 2) | 0;
    HEAP32[$91 >> 2] = $cy_1;
    $92 = $pp + ($13 << 2) | 0;
    $93 = $12 * 3 & -1;
    $94 = $pp + ($93 << 2) | 0;
    ___gmpn_mul_n($pp, $92, $94, $12);
    $95 = ($hi_0 | 0) == 0;
    if ($95) {
      $hi_1 = 0;
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $97 = ___gmpn_add_n($36, $36, $94, $12) | 0;
    $hi_1 = $97;
    label = 25;
    break;
   case 25:
    HEAP32[$92 >> 2] = $hi_1;
    $99 = ($vm1_neg_1 | 0) != 0;
    $100 = $13 | 1;
    if ($99) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    $102 = ___gmpn_sub_n($scratch, $scratch, $pp, $100) | 0;
    $103 = ___gmpn_rshift($scratch, $scratch, $100, 1) | 0;
    label = 28;
    break;
   case 27:
    $105 = ___gmpn_add_n($scratch, $scratch, $pp, $100) | 0;
    $106 = ___gmpn_rshift($scratch, $scratch, $100, 1) | 0;
    label = 28;
    break;
   case 28:
    $108 = HEAP32[$92 >> 2] | 0;
    $109 = $scratch + ($12 << 2) | 0;
    $110 = ___gmpn_add_n($92, $scratch, $109, $12) | 0;
    $111 = HEAP32[$109 >> 2] | 0;
    $112 = HEAP32[$91 >> 2] | 0;
    $113 = $111 + $110 | 0;
    $114 = $113 + $112 | 0;
    HEAP32[$109 >> 2] = $114;
    $115 = HEAP32[$91 >> 2] | 0;
    $116 = $115 + $110 | 0;
    $117 = $114 >>> 0 < $116 >>> 0;
    if ($117) {
      $__p_0 = $109;
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    $118 = $__p_0 + 4 | 0;
    $119 = HEAP32[$118 >> 2] | 0;
    $120 = $119 + 1 | 0;
    HEAP32[$118 >> 2] = $120;
    $121 = ($120 | 0) == 0;
    if ($121) {
      $__p_0 = $118;
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    if ($99) {
      label = 31;
      break;
    } else {
      label = 33;
      break;
    }
   case 31:
    $123 = ___gmpn_add_n($scratch, $scratch, $pp, $12) | 0;
    $124 = _mpn_add_nc($92, $92, $36, $12, $123) | 0;
    $125 = $124 + $108 | 0;
    $126 = HEAP32[$109 >> 2] | 0;
    $uadd282$0 = _llvm_uadd_with_overflow_i32($126 | 0, $125 | 0) | 0;
    $uadd282$1 = tempRet0;
    $127 = $uadd282$0;
    HEAP32[$109 >> 2] = $127;
    $128 = $uadd282$1;
    if ($128) {
      $__p2_0 = $109;
      label = 32;
      break;
    } else {
      label = 35;
      break;
    }
   case 32:
    $129 = $__p2_0 + 4 | 0;
    $130 = HEAP32[$129 >> 2] | 0;
    $131 = $130 + 1 | 0;
    HEAP32[$129 >> 2] = $131;
    $132 = ($131 | 0) == 0;
    if ($132) {
      $__p2_0 = $129;
      label = 32;
      break;
    } else {
      label = 35;
      break;
    }
   case 33:
    $134 = ___gmpn_sub_n($scratch, $scratch, $pp, $12) | 0;
    $135 = _mpn_sub_nc($92, $92, $36, $12, $134) | 0;
    $136 = $135 + $108 | 0;
    $137 = HEAP32[$109 >> 2] | 0;
    $138 = $137 - $136 | 0;
    HEAP32[$109 >> 2] = $138;
    $139 = $137 >>> 0 < $136 >>> 0;
    if ($139) {
      $__p4_0 = $109;
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    $140 = $__p4_0 + 4 | 0;
    $141 = HEAP32[$140 >> 2] | 0;
    $142 = $141 - 1 | 0;
    HEAP32[$140 >> 2] = $142;
    $143 = ($141 | 0) == 0;
    if ($143) {
      $__p4_0 = $140;
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    ___gmpn_mul_n($pp, $ap, $bp, $12);
    $144 = ($14 | 0) > ($15 | 0);
    if ($144) {
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 36:
    $146 = ___gmpn_mul($94, $16, $14, $37, $15) | 0;
    label = 38;
    break;
   case 37:
    $148 = ___gmpn_mul($94, $37, $15, $16, $14) | 0;
    label = 38;
    break;
   case 38:
    $150 = ___gmpn_sub_n($36, $36, $94, $12) | 0;
    $151 = HEAP32[$91 >> 2] | 0;
    $152 = _mpn_sub_nc($92, $92, $pp, $12, $150) | 0;
    $153 = _mpn_sub_nc($94, $109, $36, $12, $152) | 0;
    $154 = ___gmpn_add($36, $36, $93, $scratch, $12) | 0;
    $155 = $14 + $15 | 0;
    $156 = ($155 | 0) > ($12 | 0);
    if ($156) {
      label = 39;
      break;
    } else {
      label = 44;
      break;
    }
   case 39:
    $158 = $151 + $150 | 0;
    $159 = $158 - $153 | 0;
    $160 = $159 + $154 | 0;
    $161 = $12 << 2;
    $162 = $pp + ($161 << 2) | 0;
    $163 = $155 - $12 | 0;
    $164 = ___gmpn_sub($92, $92, $13, $162, $163) | 0;
    $165 = $160 - $164 | 0;
    $166 = ($165 | 0) < 0;
    $167 = HEAP32[$162 >> 2] | 0;
    if ($166) {
      label = 40;
      break;
    } else {
      label = 42;
      break;
    }
   case 40:
    $169 = -$165 | 0;
    $170 = $167 + $165 | 0;
    HEAP32[$162 >> 2] = $170;
    $171 = $167 >>> 0 < $169 >>> 0;
    if ($171) {
      $__p6_0 = $162;
      label = 41;
      break;
    } else {
      label = 44;
      break;
    }
   case 41:
    $172 = $__p6_0 + 4 | 0;
    $173 = HEAP32[$172 >> 2] | 0;
    $174 = $173 - 1 | 0;
    HEAP32[$172 >> 2] = $174;
    $175 = ($173 | 0) == 0;
    if ($175) {
      $__p6_0 = $172;
      label = 41;
      break;
    } else {
      label = 44;
      break;
    }
   case 42:
    $uadd$0 = _llvm_uadd_with_overflow_i32($167 | 0, $165 | 0) | 0;
    $uadd$1 = tempRet0;
    $177 = $uadd$0;
    HEAP32[$162 >> 2] = $177;
    $178 = $uadd$1;
    if ($178) {
      $__p8_0 = $162;
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    $179 = $__p8_0 + 4 | 0;
    $180 = HEAP32[$179 >> 2] | 0;
    $181 = $180 + 1 | 0;
    HEAP32[$179 >> 2] = $181;
    $182 = ($181 | 0) == 0;
    if ($182) {
      $__p8_0 = $179;
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    return;
  }
}
function _mpn_add_nc($rp, $up, $vp, $n, $ci) {
  $rp = $rp | 0;
  $up = $up | 0;
  $vp = $vp | 0;
  $n = $n | 0;
  $ci = $ci | 0;
  var $1 = 0;
  $1 = ___gmpn_add_n($rp, $up, $vp, $n) | 0;
  return (___gmpn_add_1($rp, $rp, $n, $ci) | 0) + $1 | 0;
}
function _mpn_sub_nc($rp, $up, $vp, $n, $ci) {
  $rp = $rp | 0;
  $up = $up | 0;
  $vp = $vp | 0;
  $n = $n | 0;
  $ci = $ci | 0;
  var $1 = 0;
  $1 = ___gmpn_sub_n($rp, $up, $vp, $n) | 0;
  return (___gmpn_sub_1($rp, $rp, $n, $ci) | 0) + $1 | 0;
}
function ___gmpn_toom42_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  $pp = $pp | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $bp = $bp | 0;
  $bn = $bn | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $_sum215 = 0, $40 = 0, $41 = 0, $42 = 0, $cy_0 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $79 = 0, $80 = 0, $81 = 0, $scevgep = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $88 = 0, $vm1_neg_0 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $95 = 0, $96 = 0, $cy_1 = 0, $98 = 0, $_sum210 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $114 = 0, $_sum214 = 0, $115 = 0, $116 = 0, $117 = 0, $119 = 0, $120 = 0, $121 = 0, $_sum213 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $127 = 0, $128 = 0, $_sum212 = 0, $129 = 0, $130 = 0, $131 = 0, $cy_2 = 0, $133 = 0, $134 = 0, $135 = 0, $_sum211 = 0, $137 = 0, $138 = 0, $139 = 0, $cy_3 = 0, $141 = 0, $142 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $bn << 1;
    $2 = ($1 | 0) > ($an | 0);
    if ($2) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $4 = $an + 3 | 0;
    $5 = $4 >> 2;
    $10 = $5;
    label = 4;
    break;
   case 3:
    $7 = $bn + 1 | 0;
    $8 = $7 >> 1;
    $10 = $8;
    label = 4;
    break;
   case 4:
    $11 = $10 * 3 & -1;
    $12 = $an - $11 | 0;
    $13 = $bn - $10 | 0;
    $14 = $10 + 1 | 0;
    $15 = $14 << 2;
    $16 = STACKTOP;
    STACKTOP = STACKTOP + $15 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $17 = $16;
    $18 = STACKTOP;
    STACKTOP = STACKTOP + $15 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $19 = $18;
    $20 = STACKTOP;
    STACKTOP = STACKTOP + $15 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $21 = $20;
    $22 = STACKTOP;
    STACKTOP = STACKTOP + $15 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $23 = $22;
    $24 = $10 << 2;
    $25 = STACKTOP;
    STACKTOP = STACKTOP + $24 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $26 = $25;
    $27 = STACKTOP;
    STACKTOP = STACKTOP + $15 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $28 = $27;
    $29 = ___gmpn_toom_eval_dgr3_pm1($17, $19, $ap, $10, $12, $pp) | 0;
    $30 = $29 & 1;
    $31 = $ap + ($11 << 2) | 0;
    $32 = ___gmpn_lshift($21, $31, $12, 1) | 0;
    $33 = $10 << 1;
    $34 = $ap + ($33 << 2) | 0;
    $35 = ___gmpn_add_n($21, $34, $21, $12) | 0;
    $36 = $35 + $32 | 0;
    $37 = ($12 | 0) == ($10 | 0);
    if ($37) {
      $cy_0 = $36;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $39 = $21 + ($12 << 2) | 0;
    $_sum215 = $12 + $33 | 0;
    $40 = $ap + ($_sum215 << 2) | 0;
    $41 = $10 - $12 | 0;
    $42 = ___gmpn_add_1($39, $40, $41, $36) | 0;
    $cy_0 = $42;
    label = 6;
    break;
   case 6:
    $44 = $cy_0 << 1;
    $45 = ___gmpn_lshift($21, $21, $10, 1) | 0;
    $46 = $44 + $45 | 0;
    $47 = $ap + ($10 << 2) | 0;
    $48 = ___gmpn_add_n($21, $47, $21, $10) | 0;
    $49 = $46 + $48 | 0;
    $50 = $49 << 1;
    $51 = ___gmpn_lshift($21, $21, $10, 1) | 0;
    $52 = $50 + $51 | 0;
    $53 = ___gmpn_add_n($21, $ap, $21, $10) | 0;
    $54 = $52 + $53 | 0;
    $55 = $21 + ($10 << 2) | 0;
    HEAP32[$55 >> 2] = $54;
    $56 = ($13 | 0) == ($10 | 0);
    $57 = $bp + ($10 << 2) | 0;
    if ($56) {
      label = 7;
      break;
    } else {
      label = 10;
      break;
    }
   case 7:
    $59 = ___gmpn_add_n($23, $bp, $57, $10) | 0;
    $60 = $23 + ($10 << 2) | 0;
    HEAP32[$60 >> 2] = $59;
    $61 = ___gmpn_cmp($bp, $57, $10) | 0;
    $62 = ($61 | 0) < 0;
    if ($62) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $64 = ___gmpn_sub_n($26, $57, $bp, $10) | 0;
    $65 = $30 ^ 1;
    $vm1_neg_0 = $65;
    label = 16;
    break;
   case 9:
    $67 = ___gmpn_sub_n($26, $bp, $57, $10) | 0;
    $vm1_neg_0 = $30;
    label = 16;
    break;
   case 10:
    $69 = ___gmpn_add($23, $bp, $10, $57, $13) | 0;
    $70 = $23 + ($10 << 2) | 0;
    HEAP32[$70 >> 2] = $69;
    $71 = $bp + ($13 << 2) | 0;
    $72 = $10 - $13 | 0;
    $73 = _mpn_zero_p287($71, $72) | 0;
    $74 = ($73 | 0) == 0;
    if ($74) {
      label = 15;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $76 = ___gmpn_cmp($bp, $57, $13) | 0;
    $77 = ($76 | 0) < 0;
    if ($77) {
      label = 12;
      break;
    } else {
      label = 15;
      break;
    }
   case 12:
    $79 = ___gmpn_sub_n($26, $57, $bp, $13) | 0;
    if ($56) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $80 = $bn - $10 | 0;
    $81 = $80 << 2;
    $scevgep = $25 + $81 | 0;
    $82 = $10 << 1;
    $83 = $82 - $bn | 0;
    $84 = $83 << 2;
    _memset($scevgep | 0, 0, $84 | 0);
    label = 14;
    break;
   case 14:
    $86 = $30 ^ 1;
    $vm1_neg_0 = $86;
    label = 16;
    break;
   case 15:
    $88 = ___gmpn_sub($26, $bp, $10, $57, $13) | 0;
    $vm1_neg_0 = $30;
    label = 16;
    break;
   case 16:
    $90 = ___gmpn_add($28, $23, $14, $57, $13) | 0;
    ___gmpn_mul_n($scratch, $19, $26, $10);
    $91 = $19 + ($10 << 2) | 0;
    $92 = HEAP32[$91 >> 2] | 0;
    $93 = ($92 | 0) == 0;
    if ($93) {
      $cy_1 = 0;
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $95 = $scratch + ($10 << 2) | 0;
    $96 = ___gmpn_add_n($95, $95, $26, $10) | 0;
    $cy_1 = $96;
    label = 18;
    break;
   case 18:
    $98 = $scratch + ($33 << 2) | 0;
    HEAP32[$98 >> 2] = $cy_1;
    $_sum210 = $33 | 1;
    $99 = $scratch + ($_sum210 << 2) | 0;
    ___gmpn_mul_n($99, $21, $28, $14);
    $100 = ($12 | 0) > ($13 | 0);
    $101 = $10 << 2;
    $102 = $pp + ($101 << 2) | 0;
    if ($100) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    $104 = ___gmpn_mul($102, $31, $12, $57, $13) | 0;
    label = 21;
    break;
   case 20:
    $106 = ___gmpn_mul($102, $57, $13, $31, $12) | 0;
    label = 21;
    break;
   case 21:
    $108 = HEAP32[$102 >> 2] | 0;
    $109 = $pp + ($33 << 2) | 0;
    ___gmpn_mul_n($109, $17, $23, $10);
    $110 = $17 + ($10 << 2) | 0;
    $111 = HEAP32[$110 >> 2] | 0;
    if (($111 | 0) == 1) {
      label = 22;
      break;
    } else if (($111 | 0) == 2) {
      label = 23;
      break;
    } else if (($111 | 0) == 3) {
      label = 24;
      break;
    } else {
      $cy_2 = 0;
      label = 25;
      break;
    }
   case 22:
    $113 = $23 + ($10 << 2) | 0;
    $114 = HEAP32[$113 >> 2] | 0;
    $_sum214 = $33 + $10 | 0;
    $115 = $pp + ($_sum214 << 2) | 0;
    $116 = ___gmpn_add_n($115, $115, $23, $10) | 0;
    $117 = $116 + $114 | 0;
    $cy_2 = $117;
    label = 25;
    break;
   case 23:
    $119 = $23 + ($10 << 2) | 0;
    $120 = HEAP32[$119 >> 2] | 0;
    $121 = $120 << 1;
    $_sum213 = $33 + $10 | 0;
    $122 = $pp + ($_sum213 << 2) | 0;
    $123 = ___gmpn_addmul_1($122, $23, $10, 2) | 0;
    $124 = $121 + $123 | 0;
    $cy_2 = $124;
    label = 25;
    break;
   case 24:
    $126 = $23 + ($10 << 2) | 0;
    $127 = HEAP32[$126 >> 2] | 0;
    $128 = $127 * 3 & -1;
    $_sum212 = $33 + $10 | 0;
    $129 = $pp + ($_sum212 << 2) | 0;
    $130 = ___gmpn_addmul_1($129, $23, $10, 3) | 0;
    $131 = $128 + $130 | 0;
    $cy_2 = $131;
    label = 25;
    break;
   case 25:
    $133 = $23 + ($10 << 2) | 0;
    $134 = HEAP32[$133 >> 2] | 0;
    $135 = ($134 | 0) == 0;
    if ($135) {
      $cy_3 = $cy_2;
      label = 27;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    $_sum211 = $33 + $10 | 0;
    $137 = $pp + ($_sum211 << 2) | 0;
    $138 = ___gmpn_add_n($137, $137, $17, $10) | 0;
    $139 = $138 + $cy_2 | 0;
    $cy_3 = $139;
    label = 27;
    break;
   case 27:
    $141 = $pp + ($24 << 2) | 0;
    HEAP32[$141 >> 2] = $cy_3;
    ___gmpn_mul_n($pp, $ap, $bp, $10);
    $142 = $12 + $13 | 0;
    ___gmpn_toom_interpolate_5pts($pp, $99, $scratch, $10, $142, $vm1_neg_0, $108);
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpn_toom33_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  $pp = $pp | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $bp = $bp | 0;
  $bn = $bn | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_sum = 0, $7 = 0, $_sum204 = 0, $8 = 0, $9 = 0, $_sum205 = 0, $10 = 0, $11 = 0, $_sum206 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $_sum208 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $_sum222 = 0, $27 = 0, $29 = 0, $30 = 0, $_sum209 = 0, $31 = 0, $vm1_neg_0 = 0, $33 = 0, $34 = 0, $_sum220 = 0, $36 = 0, $_sum221 = 0, $37 = 0, $38 = 0, $39 = 0, $cy_0 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $_sum210 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $_sum219 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $_sum211 = 0, $65 = 0, $vm1_neg_1 = 0, $67 = 0, $68 = 0, $_sum218 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $cy_1 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $_sum212 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $_sum213 = 0, $86 = 0, $_sum214215 = 0, $88 = 0, $_sum214215223 = 0, $90 = 0, $92 = 0, $93 = 0, $95 = 0, $96 = 0, $98 = 0, $99 = 0, $103 = 0, $104 = 0, $_sum216217 = 0, $105 = 0, $106 = 0, $110 = 0, $114 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $an + 2 | 0;
    $2 = ($1 >>> 0) / 3 >>> 0;
    $3 = $2 << 1;
    $4 = $an - $3 | 0;
    $5 = $bn - $3 | 0;
    $6 = $2 << 2;
    $_sum = $6 + 4 | 0;
    $7 = $scratch + ($_sum << 2) | 0;
    $_sum204 = $3 + 2 | 0;
    $8 = $scratch + ($_sum204 << 2) | 0;
    $9 = $pp + ($2 << 2) | 0;
    $_sum205 = $2 + 1 | 0;
    $10 = $pp + ($_sum205 << 2) | 0;
    $11 = $2 * 3 & -1;
    $_sum206 = $11 + 3 | 0;
    $12 = $scratch + ($_sum206 << 2) | 0;
    $13 = $pp + ($3 << 2) | 0;
    $14 = $pp + ($_sum204 << 2) | 0;
    $15 = $ap + ($3 << 2) | 0;
    $16 = ___gmpn_add($scratch, $ap, $2, $15, $4) | 0;
    $17 = $ap + ($2 << 2) | 0;
    $18 = ___gmpn_add_n($7, $scratch, $17, $2) | 0;
    $19 = $18 + $16 | 0;
    $_sum208 = $_sum + $2 | 0;
    $20 = $scratch + ($_sum208 << 2) | 0;
    HEAP32[$20 >> 2] = $19;
    $21 = ($16 | 0) == 0;
    if ($21) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $23 = ___gmpn_cmp($scratch, $17, $2) | 0;
    $24 = ($23 | 0) < 0;
    if ($24) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $26 = ___gmpn_sub_n($8, $17, $scratch, $2) | 0;
    $_sum222 = $_sum204 + $2 | 0;
    $27 = $scratch + ($_sum222 << 2) | 0;
    HEAP32[$27 >> 2] = 0;
    $vm1_neg_0 = 1;
    label = 5;
    break;
   case 4:
    $29 = ___gmpn_sub_n($8, $scratch, $17, $2) | 0;
    $30 = $16 - $29 | 0;
    $_sum209 = $_sum204 + $2 | 0;
    $31 = $scratch + ($_sum209 << 2) | 0;
    HEAP32[$31 >> 2] = $30;
    $vm1_neg_0 = 0;
    label = 5;
    break;
   case 5:
    $33 = ___gmpn_add_n($10, $15, $7, $4) | 0;
    $34 = ($4 | 0) == ($2 | 0);
    if ($34) {
      $cy_0 = $33;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $_sum220 = $4 + $_sum205 | 0;
    $36 = $pp + ($_sum220 << 2) | 0;
    $_sum221 = $_sum + $4 | 0;
    $37 = $scratch + ($_sum221 << 2) | 0;
    $38 = $2 - $4 | 0;
    $39 = ___gmpn_add_1($36, $37, $38, $33) | 0;
    $cy_0 = $39;
    label = 7;
    break;
   case 7:
    $41 = HEAP32[$20 >> 2] | 0;
    $42 = $41 + $cy_0 | 0;
    $43 = $42 << 1;
    $44 = ___gmpn_lshift($10, $10, $2, 1) | 0;
    $45 = $43 + $44 | 0;
    $46 = ___gmpn_sub_n($10, $10, $ap, $2) | 0;
    $47 = $45 - $46 | 0;
    $_sum210 = $_sum205 + $2 | 0;
    $48 = $pp + ($_sum210 << 2) | 0;
    HEAP32[$48 >> 2] = $47;
    $49 = $bp + ($3 << 2) | 0;
    $50 = ___gmpn_add($scratch, $bp, $2, $49, $5) | 0;
    $51 = $bp + ($2 << 2) | 0;
    $52 = ___gmpn_add_n($pp, $scratch, $51, $2) | 0;
    $53 = $52 + $50 | 0;
    HEAP32[$9 >> 2] = $53;
    $54 = ($50 | 0) == 0;
    if ($54) {
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 8:
    $56 = ___gmpn_cmp($scratch, $51, $2) | 0;
    $57 = ($56 | 0) < 0;
    if ($57) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $59 = ___gmpn_sub_n($12, $51, $scratch, $2) | 0;
    $_sum219 = $_sum206 + $2 | 0;
    $60 = $scratch + ($_sum219 << 2) | 0;
    HEAP32[$60 >> 2] = 0;
    $61 = $vm1_neg_0 ^ 1;
    $vm1_neg_1 = $61;
    label = 11;
    break;
   case 10:
    $63 = ___gmpn_sub_n($12, $scratch, $51, $2) | 0;
    $64 = $50 - $63 | 0;
    $_sum211 = $_sum206 + $2 | 0;
    $65 = $scratch + ($_sum211 << 2) | 0;
    HEAP32[$65 >> 2] = $64;
    $vm1_neg_1 = $vm1_neg_0;
    label = 11;
    break;
   case 11:
    $67 = ___gmpn_add_n($14, $pp, $49, $5) | 0;
    $68 = ($5 | 0) == ($2 | 0);
    if ($68) {
      $cy_1 = $67;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $_sum218 = $bn + 2 | 0;
    $70 = $pp + ($_sum218 << 2) | 0;
    $71 = $pp + ($5 << 2) | 0;
    $72 = $2 - $5 | 0;
    $73 = ___gmpn_add_1($70, $71, $72, $67) | 0;
    $cy_1 = $73;
    label = 13;
    break;
   case 13:
    $75 = HEAP32[$9 >> 2] | 0;
    $76 = $75 + $cy_1 | 0;
    $77 = $76 << 1;
    $78 = ___gmpn_lshift($14, $14, $2, 1) | 0;
    $79 = $77 + $78 | 0;
    $80 = ___gmpn_sub_n($14, $14, $bp, $2) | 0;
    $81 = $79 - $80 | 0;
    $_sum212 = $_sum204 + $2 | 0;
    $82 = $pp + ($_sum212 << 2) | 0;
    HEAP32[$82 >> 2] = $81;
    $83 = $2 + 1 | 0;
    $84 = ($83 | 0) > 99;
    $85 = $2 * 5 & -1;
    $_sum213 = $85 + 5 | 0;
    $86 = $scratch + ($_sum213 << 2) | 0;
    if ($84) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    ___gmpn_toom22_mul($scratch, $8, $83, $12, $83, $86);
    $_sum214215 = $3 | 1;
    $88 = $scratch + ($_sum214215 << 2) | 0;
    ___gmpn_toom22_mul($88, $10, $83, $14, $83, $86);
    $92 = $88;
    label = 16;
    break;
   case 15:
    ___gmpn_toom33_mul($scratch, $8, $83, $12, $83, $86);
    $_sum214215223 = $3 | 1;
    $90 = $scratch + ($_sum214215223 << 2) | 0;
    ___gmpn_toom33_mul($90, $10, $83, $14, $83, $86);
    $92 = $90;
    label = 16;
    break;
   case 16:
    $93 = ($4 | 0) > ($5 | 0);
    if ($93) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $95 = $pp + ($6 << 2) | 0;
    $96 = ___gmpn_mul($95, $15, $4, $49, $5) | 0;
    label = 21;
    break;
   case 18:
    $98 = ($4 | 0) > 99;
    $99 = $pp + ($6 << 2) | 0;
    if ($98) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    ___gmpn_toom22_mul($99, $15, $4, $49, $4, $86);
    label = 21;
    break;
   case 20:
    ___gmpn_toom33_mul($99, $15, $4, $49, $4, $86);
    label = 21;
    break;
   case 21:
    $103 = $pp + ($6 << 2) | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    $_sum216217 = $6 | 1;
    $105 = $pp + ($_sum216217 << 2) | 0;
    $106 = HEAP32[$105 >> 2] | 0;
    if ($84) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    ___gmpn_toom22_mul($13, $7, $83, $pp, $83, $86);
    label = 24;
    break;
   case 23:
    ___gmpn_toom33_mul($13, $7, $83, $pp, $83, $86);
    label = 24;
    break;
   case 24:
    HEAP32[$105 >> 2] = $106;
    $110 = $1 >>> 0 > 299;
    if ($110) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    ___gmpn_toom22_mul($pp, $ap, $2, $bp, $2, $86);
    label = 27;
    break;
   case 26:
    ___gmpn_toom33_mul($pp, $ap, $2, $bp, $2, $86);
    label = 27;
    break;
   case 27:
    $114 = $4 + $5 | 0;
    ___gmpn_toom_interpolate_5pts($pp, $92, $scratch, $2, $114, $vm1_neg_1, $104);
    return;
  }
}
function ___gmpn_toom43_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  $pp = $pp | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $bp = $bp | 0;
  $bn = $bn | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $_sum = 0, $17 = 0, $18 = 0, $_sum173 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $_sum175 = 0, $23 = 0, $24 = 0, $25 = 0, $_sum176 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $cy_0 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $51 = 0, $flags_0 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $flags_1 = 0, $_sum180181 = 0, $73 = 0, $_sum182183 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $80 = 0, $82 = 0, $84 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $an * 3 & -1;
    $2 = $bn << 2;
    $3 = ($1 | 0) < ($2 | 0);
    if ($3) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = $an - 1 | 0;
    $6 = $5 >> 2;
    $11 = $6;
    label = 4;
    break;
   case 3:
    $8 = $bn - 1 | 0;
    $9 = ($8 >>> 0) / 3 >>> 0;
    $11 = $9;
    label = 4;
    break;
   case 4:
    $12 = $11 + 1 | 0;
    $13 = $12 * 3 & -1;
    $14 = $an - $13 | 0;
    $15 = $12 << 1;
    $16 = $bn - $15 | 0;
    $_sum = $13 + 3 | 0;
    $17 = $pp + ($_sum << 2) | 0;
    $18 = $12 << 2;
    $_sum173 = $18 + 4 | 0;
    $19 = $scratch + ($_sum173 << 2) | 0;
    $20 = $scratch + ($_sum << 2) | 0;
    $21 = ___gmpn_toom_eval_dgr3_pm2($17, $19, $ap, $12, $14, $20) | 0;
    $22 = $21 & 2;
    $_sum175 = $15 + 2 | 0;
    $23 = $scratch + ($_sum175 << 2) | 0;
    $24 = $bp + ($12 << 2) | 0;
    $25 = ___gmpn_lshift($23, $24, $12, 1) | 0;
    $_sum176 = $_sum175 + $12 | 0;
    $26 = $scratch + ($_sum176 << 2) | 0;
    HEAP32[$26 >> 2] = $25;
    $27 = $bp + ($15 << 2) | 0;
    $28 = ___gmpn_lshift($scratch, $27, $16, 2) | 0;
    $29 = ___gmpn_add_n($scratch, $scratch, $bp, $16) | 0;
    $30 = $29 + $28 | 0;
    $31 = ($16 | 0) == ($12 | 0);
    if ($31) {
      $cy_0 = $30;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $33 = $scratch + ($16 << 2) | 0;
    $34 = $bp + ($16 << 2) | 0;
    $35 = $12 - $16 | 0;
    $36 = ___gmpn_add_1($33, $34, $35, $30) | 0;
    $cy_0 = $36;
    label = 6;
    break;
   case 6:
    $38 = $scratch + ($12 << 2) | 0;
    HEAP32[$38 >> 2] = $cy_0;
    $39 = $pp + ($15 << 2) | 0;
    $40 = $pp + ($_sum175 << 2) | 0;
    $41 = $11 + 2 | 0;
    $42 = ___gmpn_add_n($40, $scratch, $23, $41) | 0;
    $43 = ___gmpn_cmp($scratch, $23, $41) | 0;
    $44 = ($43 | 0) < 0;
    $45 = $pp + ($12 << 2) | 0;
    $46 = $pp + ($41 << 2) | 0;
    if ($44) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $48 = ___gmpn_sub_n($46, $23, $scratch, $41) | 0;
    $49 = $22 ^ 2;
    $flags_0 = $49;
    label = 9;
    break;
   case 8:
    $51 = ___gmpn_sub_n($46, $scratch, $23, $41) | 0;
    $flags_0 = $22;
    label = 9;
    break;
   case 9:
    $53 = $pp + ($_sum173 << 2) | 0;
    $54 = ___gmpn_toom_eval_dgr3_pm1($53, $20, $ap, $12, $14, $scratch) | 0;
    $55 = $54 & 1;
    $56 = $55 ^ $flags_0;
    $57 = ___gmpn_add($23, $bp, $12, $27, $16) | 0;
    HEAP32[$26 >> 2] = $57;
    $58 = ___gmpn_add_n($pp, $23, $24, $12) | 0;
    $59 = $58 + $57 | 0;
    HEAP32[$45 >> 2] = $59;
    $60 = HEAP32[$26 >> 2] | 0;
    $61 = ($60 | 0) == 0;
    if ($61) {
      label = 10;
      break;
    } else {
      label = 12;
      break;
    }
   case 10:
    $63 = ___gmpn_cmp($23, $24, $12) | 0;
    $64 = ($63 | 0) < 0;
    if ($64) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $66 = ___gmpn_sub_n($23, $24, $23, $12) | 0;
    $67 = $56 ^ 1;
    $flags_1 = $67;
    label = 13;
    break;
   case 12:
    $69 = ___gmpn_sub_n($23, $23, $24, $12) | 0;
    $70 = HEAP32[$26 >> 2] | 0;
    $71 = $70 - $69 | 0;
    HEAP32[$26 >> 2] = $71;
    $flags_1 = $56;
    label = 13;
    break;
   case 13:
    ___gmpn_mul_n($scratch, $20, $23, $41);
    $_sum180181 = $15 | 1;
    $73 = $scratch + ($_sum180181 << 2) | 0;
    ___gmpn_mul_n($73, $19, $46, $41);
    $_sum182183 = $18 | 2;
    $74 = $scratch + ($_sum182183 << 2) | 0;
    ___gmpn_mul_n($74, $17, $40, $41);
    ___gmpn_mul_n($39, $53, $pp, $41);
    $75 = ($14 | 0) > ($16 | 0);
    $76 = $12 * 5 & -1;
    $77 = $pp + ($76 << 2) | 0;
    $78 = $ap + ($13 << 2) | 0;
    if ($75) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $80 = ___gmpn_mul($77, $78, $14, $27, $16) | 0;
    label = 16;
    break;
   case 15:
    $82 = ___gmpn_mul($77, $27, $16, $78, $14) | 0;
    label = 16;
    break;
   case 16:
    ___gmpn_mul_n($pp, $ap, $bp, $12);
    $84 = $16 + $14 | 0;
    ___gmpn_toom_interpolate_6pts($pp, $12, $flags_1, $scratch, $73, $74, $84);
    return;
  }
}
function ___gmpn_toom53_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  $pp = $pp | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $bp = $bp | 0;
  $bn = $bn | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $78 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $flags_0 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $uadd$0 = 0, $uadd$1 = 0, $96 = 0, $97 = 0, $__p_0 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $107 = 0, $108 = 0, $110 = 0, $flags_1 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $_sum230 = 0, $122 = 0, $_sum231 = 0, $123 = 0, $124 = 0, $_sum = 0, $125 = 0, $_sum232 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $_sum233 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $147 = 0, $149 = 0, $151 = 0, $152 = 0, $_sum234235 = 0, $153 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $an * 3 & -1;
    $2 = $bn * 5 & -1;
    $3 = ($1 | 0) < ($2 | 0);
    if ($3) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = $an - 1 | 0;
    $6 = ($5 >>> 0) / 5 >>> 0;
    $11 = $6;
    label = 4;
    break;
   case 3:
    $8 = $bn - 1 | 0;
    $9 = ($8 >>> 0) / 3 >>> 0;
    $11 = $9;
    label = 4;
    break;
   case 4:
    $12 = $11 + 1 | 0;
    $13 = $12 << 2;
    $14 = $an - $13 | 0;
    $15 = $12 << 1;
    $16 = $bn - $15 | 0;
    $17 = $11 + 2 | 0;
    $18 = $17 << 2;
    $19 = STACKTOP;
    STACKTOP = STACKTOP + $18 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $20 = $19;
    $21 = STACKTOP;
    STACKTOP = STACKTOP + $18 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $22 = $21;
    $23 = STACKTOP;
    STACKTOP = STACKTOP + $18 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $24 = $23;
    $25 = STACKTOP;
    STACKTOP = STACKTOP + $18 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $26 = $25;
    $27 = STACKTOP;
    STACKTOP = STACKTOP + $18 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $28 = $27;
    $29 = STACKTOP;
    STACKTOP = STACKTOP + $18 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $30 = $29;
    $31 = STACKTOP;
    STACKTOP = STACKTOP + $18 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $32 = $31;
    $33 = STACKTOP;
    STACKTOP = STACKTOP + $18 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $34 = $33;
    $35 = STACKTOP;
    STACKTOP = STACKTOP + $18 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $36 = $35;
    $37 = STACKTOP;
    STACKTOP = STACKTOP + $18 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $38 = $37;
    $39 = ___gmpn_toom_eval_pm1($20, $22, 4, $ap, $12, $14, $pp) | 0;
    $40 = $39 & 2;
    $41 = ___gmpn_toom_eval_pm2($24, $26, 4, $ap, $12, $14, $pp) | 0;
    $42 = $41 & 1;
    $43 = $42 | $40;
    $44 = ___gmpn_lshift($28, $ap, $12, 1) | 0;
    $45 = $ap + ($12 << 2) | 0;
    $46 = ___gmpn_add_n($28, $28, $45, $12) | 0;
    $47 = $46 + $44 | 0;
    $48 = $47 << 1;
    $49 = ___gmpn_lshift($28, $28, $12, 1) | 0;
    $50 = $48 + $49 | 0;
    $51 = $ap + ($15 << 2) | 0;
    $52 = ___gmpn_add_n($28, $28, $51, $12) | 0;
    $53 = $50 + $52 | 0;
    $54 = $53 << 1;
    $55 = ___gmpn_lshift($28, $28, $12, 1) | 0;
    $56 = $12 * 3 & -1;
    $57 = $ap + ($56 << 2) | 0;
    $58 = ___gmpn_add_n($28, $28, $57, $12) | 0;
    $59 = $58 + $55 | 0;
    $60 = $59 + $54 | 0;
    $61 = $60 << 1;
    $62 = ___gmpn_lshift($28, $28, $12, 1) | 0;
    $63 = $ap + ($13 << 2) | 0;
    $64 = ___gmpn_add($28, $28, $12, $63, $14) | 0;
    $65 = $64 + $62 | 0;
    $66 = $65 + $61 | 0;
    $67 = $28 + ($12 << 2) | 0;
    HEAP32[$67 >> 2] = $66;
    $68 = $bp + ($15 << 2) | 0;
    $69 = ___gmpn_add($30, $bp, $12, $68, $16) | 0;
    $70 = $30 + ($12 << 2) | 0;
    HEAP32[$70 >> 2] = $69;
    $71 = ($69 | 0) == 0;
    if ($71) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $73 = $bp + ($12 << 2) | 0;
    $74 = ___gmpn_cmp($30, $73, $12) | 0;
    $75 = ($74 | 0) < 0;
    if ($75) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $77 = ___gmpn_sub_n($32, $73, $30, $12) | 0;
    $78 = $32 + ($12 << 2) | 0;
    HEAP32[$78 >> 2] = 0;
    $79 = $43 ^ 2;
    $flags_0 = $79;
    label = 8;
    break;
   case 7:
    $81 = HEAP32[$70 >> 2] | 0;
    $82 = $bp + ($12 << 2) | 0;
    $83 = ___gmpn_sub_n($32, $30, $82, $12) | 0;
    $84 = $81 - $83 | 0;
    $85 = $32 + ($12 << 2) | 0;
    HEAP32[$85 >> 2] = $84;
    $flags_0 = $43;
    label = 8;
    break;
   case 8:
    $87 = $bp + ($12 << 2) | 0;
    $88 = ___gmpn_add_n($30, $30, $87, $12) | 0;
    $89 = HEAP32[$70 >> 2] | 0;
    $90 = $89 + $88 | 0;
    HEAP32[$70 >> 2] = $90;
    $91 = ___gmpn_lshift($pp, $68, $16, 2) | 0;
    $92 = ___gmpn_add($34, $bp, $12, $pp, $16) | 0;
    $93 = $34 + ($12 << 2) | 0;
    HEAP32[$93 >> 2] = $92;
    $94 = $34 + ($16 << 2) | 0;
    $95 = HEAP32[$94 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($95 | 0, $91 | 0) | 0;
    $uadd$1 = tempRet0;
    $96 = $uadd$0;
    HEAP32[$94 >> 2] = $96;
    $97 = $uadd$1;
    if ($97) {
      $__p_0 = $94;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $98 = $__p_0 + 4 | 0;
    $99 = HEAP32[$98 >> 2] | 0;
    $100 = $99 + 1 | 0;
    HEAP32[$98 >> 2] = $100;
    $101 = ($100 | 0) == 0;
    if ($101) {
      $__p_0 = $98;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $102 = ___gmpn_lshift($pp, $87, $12, 1) | 0;
    $103 = $pp + ($12 << 2) | 0;
    HEAP32[$103 >> 2] = $102;
    $104 = ___gmpn_cmp($34, $pp, $17) | 0;
    $105 = ($104 | 0) < 0;
    if ($105) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $107 = ___gmpn_sub_n($36, $pp, $34, $17) | 0;
    $108 = $flags_0 ^ 1;
    $flags_1 = $108;
    label = 13;
    break;
   case 12:
    $110 = ___gmpn_sub_n($36, $34, $pp, $17) | 0;
    $flags_1 = $flags_0;
    label = 13;
    break;
   case 13:
    $112 = ___gmpn_add_n($34, $34, $pp, $17) | 0;
    $113 = ___gmpn_lshift($38, $bp, $12, 1) | 0;
    $114 = ___gmpn_add_n($38, $38, $87, $12) | 0;
    $115 = $114 + $113 | 0;
    $116 = $115 << 1;
    $117 = ___gmpn_lshift($38, $38, $12, 1) | 0;
    $118 = $116 + $117 | 0;
    $119 = ___gmpn_add($38, $38, $12, $68, $16) | 0;
    $120 = $118 + $119 | 0;
    $121 = $38 + ($12 << 2) | 0;
    HEAP32[$121 >> 2] = $120;
    ___gmpn_mul_n($scratch, $24, $34, $17);
    $_sum230 = $15 | 1;
    $122 = $scratch + ($_sum230 << 2) | 0;
    ___gmpn_mul_n($122, $26, $36, $17);
    $_sum231 = $13 | 2;
    $123 = $scratch + ($_sum231 << 2) | 0;
    ___gmpn_mul_n($123, $28, $38, $17);
    $124 = $12 * 6 & -1;
    $_sum = $124 + 3 | 0;
    $125 = $scratch + ($_sum << 2) | 0;
    $_sum232 = $_sum + $15 | 0;
    $126 = $scratch + ($_sum232 << 2) | 0;
    HEAP32[$126 >> 2] = 0;
    $127 = $22 + ($12 << 2) | 0;
    $128 = HEAP32[$127 >> 2] | 0;
    $129 = $32 + ($12 << 2) | 0;
    $130 = HEAP32[$129 >> 2] | 0;
    $131 = $130 | $128;
    $132 = ($131 | 0) != 0;
    $133 = $132 & 1;
    $134 = $133 + $12 | 0;
    ___gmpn_mul_n($125, $22, $32, $134);
    $135 = $pp + ($15 << 2) | 0;
    $_sum233 = $12 << 2;
    $136 = $pp + ($_sum233 << 2) | 0;
    HEAP32[$136 >> 2] = 0;
    $137 = $20 + ($12 << 2) | 0;
    $138 = HEAP32[$137 >> 2] | 0;
    $139 = HEAP32[$70 >> 2] | 0;
    $140 = $139 | $138;
    $141 = ($140 | 0) != 0;
    $142 = $141 & 1;
    $143 = $142 + $12 | 0;
    ___gmpn_mul_n($135, $20, $30, $143);
    ___gmpn_mul_n($pp, $ap, $bp, $12);
    $144 = ($14 | 0) > ($16 | 0);
    $145 = $pp + ($124 << 2) | 0;
    if ($144) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $147 = ___gmpn_mul($145, $63, $14, $68, $16) | 0;
    label = 16;
    break;
   case 15:
    $149 = ___gmpn_mul($145, $68, $16, $63, $14) | 0;
    label = 16;
    break;
   case 16:
    $151 = $14 + $16 | 0;
    $152 = $12 << 3;
    $_sum234235 = $152 | 4;
    $153 = $scratch + ($_sum234235 << 2) | 0;
    ___gmpn_toom_interpolate_7pts($pp, $12, $flags_1, $122, $125, $scratch, $123, $151, $153);
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpn_toom63_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  $pp = $pp | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $bp = $bp | 0;
  $bn = $bn | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $_sum = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $_sum243 = 0, $24 = 0, $25 = 0, $26 = 0, $_sum244 = 0, $27 = 0, $28 = 0, $30 = 0, $_sum253 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $_sum245 = 0, $37 = 0, $39 = 0, $_sum246247 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $_sum248 = 0, $44 = 0, $45 = 0, $46 = 0, $_sum249 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $_sum250 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $57 = 0, $_sum252 = 0, $58 = 0, $59 = 0, $61 = 0, $62 = 0, $_sum251 = 0, $63 = 0, $sign_0 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $74 = 0, $storemerge = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $85 = 0, $87 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $bn << 1;
    $2 = ($1 | 0) > ($an | 0);
    if ($2) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $4 = $an - 1 | 0;
    $5 = ($4 >>> 0) / 6 >>> 0;
    $10 = $5;
    label = 4;
    break;
   case 3:
    $7 = $bn - 1 | 0;
    $8 = ($7 >>> 0) / 3 >>> 0;
    $10 = $8;
    label = 4;
    break;
   case 4:
    $11 = $10 + 1 | 0;
    $12 = $11 * 5 & -1;
    $13 = $an - $12 | 0;
    $14 = $11 << 1;
    $15 = $bn - $14 | 0;
    $_sum = $12 + 2 | 0;
    $16 = $pp + ($_sum << 2) | 0;
    $17 = $11 * 3 & -1;
    $18 = $pp + ($17 << 2) | 0;
    $19 = ___gmpn_toom_eval_pm2exp($16, $18, 5, $ap, $11, $13, 2, $pp) | 0;
    $20 = $bp + ($11 << 2) | 0;
    $21 = ___gmpn_lshift($pp, $20, $11, 2) | 0;
    $22 = $pp + ($11 << 2) | 0;
    HEAP32[$22 >> 2] = $21;
    $23 = $11 * 6 & -1;
    $_sum243 = $23 + 3 | 0;
    $24 = $pp + ($_sum243 << 2) | 0;
    $25 = $bp + ($14 << 2) | 0;
    $26 = ___gmpn_lshift($24, $25, $15, 4) | 0;
    $_sum244 = $_sum243 + $15 | 0;
    $27 = $pp + ($_sum244 << 2) | 0;
    HEAP32[$27 >> 2] = $26;
    $28 = ($11 | 0) == ($15 | 0);
    if ($28) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $30 = ___gmpn_add_n($24, $24, $bp, $11) | 0;
    $_sum253 = $_sum243 + $11 | 0;
    $31 = $pp + ($_sum253 << 2) | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    $33 = $32 + $30 | 0;
    HEAP32[$31 >> 2] = $33;
    label = 7;
    break;
   case 6:
    $35 = $15 + 1 | 0;
    $36 = ___gmpn_add($24, $bp, $11, $24, $35) | 0;
    $_sum245 = $_sum243 + $11 | 0;
    $37 = $pp + ($_sum245 << 2) | 0;
    HEAP32[$37 >> 2] = $36;
    label = 7;
    break;
   case 7:
    $39 = $11 << 2;
    $_sum246247 = $39 | 1;
    $40 = $pp + ($_sum246247 << 2) | 0;
    $41 = $10 + 2 | 0;
    $42 = _abs_sub_add_n($40, $24, $pp, $41) | 0;
    $43 = $42 ^ $19;
    ___gmpn_mul_n($pp, $18, $40, $41);
    $_sum248 = $17 + 1 | 0;
    $44 = $scratch + ($_sum248 << 2) | 0;
    ___gmpn_mul_n($44, $16, $24, $41);
    $45 = $14 | 1;
    ___gmpn_toom_couple_handling($44, $45, $pp, $43, $11, 2, 4);
    $46 = ___gmpn_toom_eval_pm1($16, $18, 5, $ap, $11, $13, $pp) | 0;
    $_sum249 = $23 + 2 | 0;
    $47 = $scratch + ($_sum249 << 2) | 0;
    $48 = ___gmpn_add($47, $bp, $11, $25, $15) | 0;
    $49 = ___gmpn_add_n($24, $47, $20, $11) | 0;
    $50 = $49 + $48 | 0;
    $_sum250 = $_sum243 + $11 | 0;
    $51 = $pp + ($_sum250 << 2) | 0;
    HEAP32[$51 >> 2] = $50;
    $52 = ($48 | 0) == 0;
    if ($52) {
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 8:
    $54 = ___gmpn_cmp($47, $20, $11) | 0;
    $55 = ($54 | 0) < 0;
    if ($55) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $57 = ___gmpn_sub_n($40, $20, $47, $11) | 0;
    $_sum252 = $_sum246247 + $11 | 0;
    $58 = $pp + ($_sum252 << 2) | 0;
    HEAP32[$58 >> 2] = 0;
    $59 = $46 ^ -1;
    $sign_0 = $59;
    label = 11;
    break;
   case 10:
    $61 = ___gmpn_sub_n($40, $47, $20, $11) | 0;
    $62 = $48 - $61 | 0;
    $_sum251 = $_sum246247 + $11 | 0;
    $63 = $pp + ($_sum251 << 2) | 0;
    HEAP32[$63 >> 2] = $62;
    $sign_0 = $46;
    label = 11;
    break;
   case 11:
    ___gmpn_mul_n($pp, $18, $40, $41);
    ___gmpn_mul_n($scratch, $16, $24, $41);
    ___gmpn_toom_couple_handling($scratch, $45, $pp, $sign_0, $11, 0, 0);
    $65 = ___gmpn_toom_eval_pm2($16, $18, 5, $ap, $11, $13, $pp) | 0;
    $66 = ___gmpn_lshift($pp, $20, $11, 1) | 0;
    HEAP32[$22 >> 2] = $66;
    $67 = ___gmpn_lshift($24, $25, $15, 2) | 0;
    HEAP32[$27 >> 2] = $67;
    if ($28) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $69 = ___gmpn_add_n($24, $24, $bp, $11) | 0;
    $70 = HEAP32[$51 >> 2] | 0;
    $71 = $70 + $69 | 0;
    $storemerge = $71;
    label = 14;
    break;
   case 13:
    $73 = $15 + 1 | 0;
    $74 = ___gmpn_add($24, $bp, $11, $24, $73) | 0;
    $storemerge = $74;
    label = 14;
    break;
   case 14:
    HEAP32[$51 >> 2] = $storemerge;
    $76 = _abs_sub_add_n($40, $24, $pp, $41) | 0;
    $77 = $76 ^ $65;
    ___gmpn_mul_n($pp, $18, $40, $41);
    ___gmpn_mul_n($18, $16, $24, $41);
    ___gmpn_toom_couple_handling($18, $45, $pp, $77, $11, 1, 2);
    ___gmpn_mul_n($pp, $ap, $bp, $11);
    $78 = ($13 | 0) > ($15 | 0);
    $79 = $11 * 7 & -1;
    $80 = $pp + ($79 << 2) | 0;
    $81 = $ap + ($12 << 2) | 0;
    if ($78) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $83 = ___gmpn_mul($80, $81, $13, $25, $15) | 0;
    label = 17;
    break;
   case 16:
    $85 = ___gmpn_mul($80, $25, $15, $81, $13) | 0;
    label = 17;
    break;
   case 17:
    $87 = $13 + $15 | 0;
    ___gmpn_toom_interpolate_8pts($pp, $11, $44, $scratch, $87, $47);
    return;
  }
}
function _abs_sub_add_n($rm, $rp, $rs, $n) {
  $rm = $rm | 0;
  $rp = $rp | 0;
  $rs = $rs | 0;
  $n = $n | 0;
  var $1 = 0;
  $1 = _abs_sub_n298($rm, $rp, $rs, $n) | 0;
  ___gmpn_add_n($rp, $rp, $rs, $n);
  return $1 | 0;
}
function _abs_sub_n298($rp, $ap, $bp, $n) {
  $rp = $rp | 0;
  $ap = $ap | 0;
  $bp = $bp | 0;
  $n = $n | 0;
  var $1 = 0, $_in = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($n | 0) > 0;
    if ($1) {
      $_in = $n;
      label = 2;
      break;
    } else {
      $_0 = 0;
      label = 7;
      break;
    }
   case 2:
    $2 = $_in - 1 | 0;
    $3 = $ap + ($2 << 2) | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $bp + ($2 << 2) | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($4 | 0) == ($6 | 0);
    if ($7) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $9 = $4 >>> 0 > $6 >>> 0;
    if ($9) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $11 = ___gmpn_sub_n($rp, $ap, $bp, $_in) | 0;
    $_0 = 0;
    label = 7;
    break;
   case 5:
    $13 = ___gmpn_sub_n($rp, $bp, $ap, $_in) | 0;
    $_0 = -1;
    label = 7;
    break;
   case 6:
    $15 = $rp + ($2 << 2) | 0;
    HEAP32[$15 >> 2] = 0;
    $16 = ($2 | 0) > 0;
    if ($16) {
      $_in = $2;
      label = 2;
      break;
    } else {
      $_0 = 0;
      label = 7;
      break;
    }
   case 7:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_toom44_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  $pp = $pp | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $bp = $bp | 0;
  $bn = $bn | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_sum = 0, $7 = 0, $8 = 0, $_sum207208 = 0, $9 = 0, $10 = 0, $11 = 0, $_sum209210 = 0, $12 = 0, $13 = 0, $14 = 0, $_sum211 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $_sum212213 = 0, $22 = 0, $_sum212213218 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $_sum214 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $_sum217 = 0, $71 = 0, $75 = 0, $79 = 0, $81 = 0, $82 = 0, $84 = 0, $85 = 0, $89 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $an + 3 | 0;
    $2 = $1 >> 2;
    $3 = $2 * 3 & -1;
    $4 = $an - $3 | 0;
    $5 = $bn - $3 | 0;
    $6 = $pp + ($2 << 2) | 0;
    $_sum = $2 + 1 | 0;
    $7 = $pp + ($_sum << 2) | 0;
    $8 = $2 << 3;
    $_sum207208 = $8 | 5;
    $9 = $scratch + ($_sum207208 << 2) | 0;
    $10 = ___gmpn_toom_eval_dgr3_pm2($pp, $7, $ap, $2, $4, $9) | 0;
    $11 = $2 << 2;
    $_sum209210 = $11 | 2;
    $12 = $pp + ($_sum209210 << 2) | 0;
    $13 = $2 << 1;
    $14 = $pp + ($13 << 2) | 0;
    $_sum211 = $13 + 2 | 0;
    $15 = $pp + ($_sum211 << 2) | 0;
    $16 = ___gmpn_toom_eval_dgr3_pm2($12, $15, $bp, $2, $5, $9) | 0;
    $17 = $16 ^ $10;
    $18 = $17 & 1;
    $19 = $2 + 1 | 0;
    $20 = ($19 | 0) > 99;
    if ($20) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    ___gmpn_toom22_mul($scratch, $pp, $19, $12, $19, $9);
    $_sum212213 = $13 | 1;
    $22 = $scratch + ($_sum212213 << 2) | 0;
    ___gmpn_toom22_mul($22, $7, $19, $15, $19, $9);
    $26 = $22;
    label = 4;
    break;
   case 3:
    ___gmpn_toom33_mul($scratch, $pp, $19, $12, $19, $9);
    $_sum212213218 = $13 | 1;
    $24 = $scratch + ($_sum212213218 << 2) | 0;
    ___gmpn_toom33_mul($24, $7, $19, $15, $19, $9);
    $26 = $24;
    label = 4;
    break;
   case 4:
    $27 = ___gmpn_lshift($pp, $ap, $2, 1) | 0;
    $28 = $ap + ($2 << 2) | 0;
    $29 = ___gmpn_add_n($pp, $pp, $28, $2) | 0;
    $30 = $29 + $27 | 0;
    $31 = $30 << 1;
    $32 = ___gmpn_lshift($pp, $pp, $2, 1) | 0;
    $33 = $31 + $32 | 0;
    $34 = $ap + ($13 << 2) | 0;
    $35 = ___gmpn_add_n($pp, $pp, $34, $2) | 0;
    $36 = $33 + $35 | 0;
    $37 = $36 << 1;
    $38 = ___gmpn_lshift($pp, $pp, $2, 1) | 0;
    $39 = $ap + ($3 << 2) | 0;
    $40 = ___gmpn_add($pp, $pp, $2, $39, $4) | 0;
    $41 = $40 + $38 | 0;
    $42 = $41 + $37 | 0;
    HEAP32[$6 >> 2] = $42;
    $43 = ___gmpn_lshift($12, $bp, $2, 1) | 0;
    $44 = $bp + ($2 << 2) | 0;
    $45 = ___gmpn_add_n($12, $12, $44, $2) | 0;
    $46 = $45 + $43 | 0;
    $47 = $46 << 1;
    $48 = ___gmpn_lshift($12, $12, $2, 1) | 0;
    $49 = $47 + $48 | 0;
    $50 = $bp + ($13 << 2) | 0;
    $51 = ___gmpn_add_n($12, $12, $50, $2) | 0;
    $52 = $49 + $51 | 0;
    $53 = $52 << 1;
    $54 = ___gmpn_lshift($12, $12, $2, 1) | 0;
    $55 = $bp + ($3 << 2) | 0;
    $56 = ___gmpn_add($12, $12, $2, $55, $5) | 0;
    $57 = $56 + $54 | 0;
    $58 = $57 + $53 | 0;
    $_sum214 = $_sum209210 + $2 | 0;
    $59 = $pp + ($_sum214 << 2) | 0;
    HEAP32[$59 >> 2] = $58;
    $60 = $scratch + ($_sum209210 << 2) | 0;
    if ($20) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    ___gmpn_toom22_mul($60, $pp, $19, $12, $19, $9);
    label = 7;
    break;
   case 6:
    ___gmpn_toom33_mul($60, $pp, $19, $12, $19, $9);
    label = 7;
    break;
   case 7:
    $64 = ___gmpn_toom_eval_dgr3_pm1($pp, $7, $ap, $2, $4, $9) | 0;
    $65 = $64 & 2;
    $66 = $65 | $18;
    $67 = ___gmpn_toom_eval_dgr3_pm1($12, $15, $bp, $2, $5, $9) | 0;
    $68 = $67 & 2;
    $69 = $66 ^ $68;
    $70 = $2 * 6 & -1;
    $_sum217 = $70 + 3 | 0;
    $71 = $scratch + ($_sum217 << 2) | 0;
    if ($20) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    ___gmpn_toom22_mul($71, $7, $19, $15, $19, $9);
    ___gmpn_toom22_mul($14, $pp, $19, $12, $19, $9);
    label = 10;
    break;
   case 9:
    ___gmpn_toom33_mul($71, $7, $19, $15, $19, $9);
    ___gmpn_toom33_mul($14, $pp, $19, $12, $19, $9);
    label = 10;
    break;
   case 10:
    $75 = ($2 | 0) > 99;
    if ($75) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    ___gmpn_toom22_mul($pp, $ap, $2, $bp, $2, $9);
    label = 13;
    break;
   case 12:
    ___gmpn_toom33_mul($pp, $ap, $2, $bp, $2, $9);
    label = 13;
    break;
   case 13:
    $79 = ($4 | 0) > ($5 | 0);
    if ($79) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $81 = $pp + ($70 << 2) | 0;
    $82 = ___gmpn_mul($81, $39, $4, $55, $5) | 0;
    label = 18;
    break;
   case 15:
    $84 = ($4 | 0) > 99;
    $85 = $pp + ($70 << 2) | 0;
    if ($84) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    ___gmpn_toom22_mul($85, $39, $4, $55, $4, $9);
    label = 18;
    break;
   case 17:
    ___gmpn_toom33_mul($85, $39, $4, $55, $4, $9);
    label = 18;
    break;
   case 18:
    $89 = $4 + $5 | 0;
    ___gmpn_toom_interpolate_7pts($pp, $2, $69, $26, $71, $scratch, $60, $89, $9);
    return;
  }
}
function ___gmpn_toom6h_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  $pp = $pp | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $bp = $bp | 0;
  $bn = $bn | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $_ = 0, $p_0 = 0, $q_0 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $51 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $n_0 = 0, $s_0 = 0, $t_0 = 0, $p_1 = 0, $q_1 = 0, $half_0 = 0, $59 = 0, $_sum = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $_sum567 = 0, $64 = 0, $65 = 0, $_sum568569 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $_sum570 = 0, $73 = 0, $75 = 0, $77 = 0, $_sum593 = 0, $78 = 0, $80 = 0, $81 = 0, $_sum594 = 0, $82 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $94 = 0, $_pn = 0, $sign_0 = 0, $97 = 0, $_sum571 = 0, $98 = 0, $99 = 0, $_sum572 = 0, $100 = 0, $102 = 0, $104 = 0, $_sum588 = 0, $105 = 0, $106 = 0, $_sum589 = 0, $107 = 0, $109 = 0, $110 = 0, $_sum590 = 0, $111 = 0, $113 = 0, $_sum591 = 0, $114 = 0, $116 = 0, $_sum592 = 0, $117 = 0, $119 = 0, $_sum573 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $125 = 0, $_sum574 = 0, $126 = 0, $127 = 0, $_sum575 = 0, $128 = 0, $130 = 0, $132 = 0, $_sum583 = 0, $133 = 0, $134 = 0, $_sum584 = 0, $135 = 0, $137 = 0, $138 = 0, $_sum585 = 0, $139 = 0, $141 = 0, $_sum586 = 0, $142 = 0, $144 = 0, $_sum587 = 0, $145 = 0, $147 = 0, $_sum576 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $153 = 0, $_sum577 = 0, $154 = 0, $155 = 0, $157 = 0, $159 = 0, $_sum581 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $_sum582 = 0, $165 = 0, $167 = 0, $169 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $178 = 0, $_sum578 = 0, $179 = 0, $181 = 0, $183 = 0, $_sum579 = 0, $184 = 0, $186 = 0, $187 = 0, $_sum580 = 0, $188 = 0, $192 = 0, $195 = 0, $198 = 0, $202 = 0, $204 = 0, $205 = 0, $206 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $220 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $an * 17 & -1;
    $2 = $bn * 18 & -1;
    $3 = ($1 | 0) < ($2 | 0);
    if ($3) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $5 = $an - 1 | 0;
    $6 = ($5 >>> 0) / 6 >>> 0;
    $7 = $6 + 1 | 0;
    $8 = $7 * 5 & -1;
    $9 = $an - $8 | 0;
    $10 = $bn - $8 | 0;
    $half_0 = 0;
    $q_1 = 5;
    $p_1 = 5;
    $t_0 = $10;
    $s_0 = $9;
    $n_0 = $7;
    label = 15;
    break;
   case 3:
    $12 = $an * 90 & -1;
    $13 = $bn * 119 & -1;
    $14 = ($12 | 0) < ($13 | 0);
    if ($14) {
      $q_0 = 6;
      $p_0 = 7;
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $16 = $an * 85 & -1;
    $17 = $bn * 126 & -1;
    $18 = ($16 | 0) < ($17 | 0);
    if ($18) {
      $q_0 = 5;
      $p_0 = 7;
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $20 = $an * 18 & -1;
    $21 = $bn * 34 & -1;
    $22 = ($20 | 0) < ($21 | 0);
    if ($22) {
      $q_0 = 5;
      $p_0 = 8;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $24 = $bn * 36 & -1;
    $25 = ($1 | 0) < ($24 | 0);
    $_ = $25 ? 8 : 9;
    $q_0 = 4;
    $p_0 = $_;
    label = 7;
    break;
   case 7:
    $27 = $q_0 ^ $p_0;
    $28 = $27 & 1;
    $29 = Math_imul($q_0, $an);
    $30 = Math_imul($p_0, $bn);
    $31 = ($29 | 0) < ($30 | 0);
    if ($31) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $33 = $an - 1 | 0;
    $34 = ($33 >>> 0) / ($p_0 >>> 0) >>> 0;
    $39 = $34;
    label = 10;
    break;
   case 9:
    $36 = $bn - 1 | 0;
    $37 = ($36 >>> 0) / ($q_0 >>> 0) >>> 0;
    $39 = $37;
    label = 10;
    break;
   case 10:
    $40 = $39 + 1 | 0;
    $41 = $p_0 - 1 | 0;
    $42 = $q_0 - 1 | 0;
    $43 = Math_imul($40, $41);
    $44 = $an - $43 | 0;
    $45 = Math_imul($40, $42);
    $46 = $bn - $45 | 0;
    $47 = ($28 | 0) == 0;
    if ($47) {
      $half_0 = 0;
      $q_1 = $42;
      $p_1 = $41;
      $t_0 = $46;
      $s_0 = $44;
      $n_0 = $40;
      label = 15;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $49 = ($44 | 0) < 1;
    if ($49) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $51 = $p_0 - 2 | 0;
    $52 = $44 + $40 | 0;
    $half_0 = 0;
    $q_1 = $42;
    $p_1 = $51;
    $t_0 = $46;
    $s_0 = $52;
    $n_0 = $40;
    label = 15;
    break;
   case 13:
    $54 = ($46 | 0) < 1;
    if ($54) {
      label = 14;
      break;
    } else {
      $half_0 = $28;
      $q_1 = $42;
      $p_1 = $41;
      $t_0 = $46;
      $s_0 = $44;
      $n_0 = $40;
      label = 15;
      break;
    }
   case 14:
    $56 = $q_0 - 2 | 0;
    $57 = $46 + $40 | 0;
    $half_0 = 0;
    $q_1 = $56;
    $p_1 = $41;
    $t_0 = $57;
    $s_0 = $44;
    $n_0 = $40;
    label = 15;
    break;
   case 15:
    $59 = $n_0 * 9 & -1;
    $_sum = $59 + 2 | 0;
    $60 = $pp + ($_sum << 2) | 0;
    $61 = $n_0 * 7 & -1;
    $62 = $pp + ($61 << 2) | 0;
    $63 = ___gmpn_toom_eval_pm2rexp($60, $62, $p_1, $ap, $n_0, $s_0, 1, $pp) | 0;
    $_sum567 = $59 + 3 | 0;
    $64 = $scratch + ($_sum567 << 2) | 0;
    $65 = $n_0 << 3;
    $_sum568569 = $65 | 1;
    $66 = $pp + ($_sum568569 << 2) | 0;
    $67 = ___gmpn_toom_eval_pm2rexp($64, $66, $q_1, $bp, $n_0, $t_0, 1, $pp) | 0;
    $68 = $67 ^ $63;
    $69 = $n_0 + 1 | 0;
    $70 = ($69 | 0) > 99;
    if ($70) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $72 = $n_0 * 10 & -1;
    $_sum570 = $72 + 4 | 0;
    $73 = $scratch + ($_sum570 << 2) | 0;
    ___gmpn_toom22_mul($pp, $62, $69, $66, $69, $73);
    ___gmpn_toom22_mul($scratch, $60, $69, $64, $69, $73);
    label = 22;
    break;
   case 17:
    $75 = ($69 | 0) > 299;
    if ($75) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $77 = $n_0 * 10 & -1;
    $_sum593 = $77 + 4 | 0;
    $78 = $scratch + ($_sum593 << 2) | 0;
    ___gmpn_toom33_mul($pp, $62, $69, $66, $69, $78);
    ___gmpn_toom33_mul($scratch, $60, $69, $64, $69, $78);
    label = 22;
    break;
   case 19:
    $80 = ($69 | 0) > 349;
    $81 = $n_0 * 10 & -1;
    $_sum594 = $81 + 4 | 0;
    $82 = $scratch + ($_sum594 << 2) | 0;
    if ($80) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    ___gmpn_toom44_mul($pp, $62, $69, $66, $69, $82);
    ___gmpn_toom44_mul($scratch, $60, $69, $64, $69, $82);
    label = 22;
    break;
   case 21:
    ___gmpn_toom6h_mul($pp, $62, $69, $66, $69, $82);
    ___gmpn_toom6h_mul($scratch, $60, $69, $64, $69, $82);
    label = 22;
    break;
   case 22:
    $86 = $n_0 << 1;
    $87 = $86 | 1;
    $88 = $half_0 + 1 | 0;
    ___gmpn_toom_couple_handling($scratch, $87, $pp, $68, $n_0, $88, $half_0);
    $89 = ___gmpn_toom_eval_pm1($60, $62, $p_1, $ap, $n_0, $s_0, $pp) | 0;
    $90 = ($q_1 | 0) == 3;
    if ($90) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    $92 = ___gmpn_toom_eval_dgr3_pm1($64, $66, $bp, $n_0, $t_0, $pp) | 0;
    $_pn = $92;
    label = 25;
    break;
   case 24:
    $94 = ___gmpn_toom_eval_pm1($64, $66, $q_1, $bp, $n_0, $t_0, $pp) | 0;
    $_pn = $94;
    label = 25;
    break;
   case 25:
    $sign_0 = $_pn ^ $89;
    if ($70) {
      label = 27;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    $97 = $n_0 * 10 & -1;
    $_sum571 = $97 + 4 | 0;
    $98 = $scratch + ($_sum571 << 2) | 0;
    ___gmpn_toom22_mul($pp, $62, $69, $66, $69, $98);
    $99 = $n_0 * 3 & -1;
    $_sum572 = $99 + 1 | 0;
    $100 = $scratch + ($_sum572 << 2) | 0;
    ___gmpn_toom22_mul($100, $60, $69, $64, $69, $98);
    label = 32;
    break;
   case 27:
    $102 = ($69 | 0) > 299;
    if ($102) {
      label = 29;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $104 = $n_0 * 10 & -1;
    $_sum588 = $104 + 4 | 0;
    $105 = $scratch + ($_sum588 << 2) | 0;
    ___gmpn_toom33_mul($pp, $62, $69, $66, $69, $105);
    $106 = $n_0 * 3 & -1;
    $_sum589 = $106 + 1 | 0;
    $107 = $scratch + ($_sum589 << 2) | 0;
    ___gmpn_toom33_mul($107, $60, $69, $64, $69, $105);
    label = 32;
    break;
   case 29:
    $109 = ($69 | 0) > 349;
    $110 = $n_0 * 10 & -1;
    $_sum590 = $110 + 4 | 0;
    $111 = $scratch + ($_sum590 << 2) | 0;
    if ($109) {
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    ___gmpn_toom44_mul($pp, $62, $69, $66, $69, $111);
    $113 = $n_0 * 3 & -1;
    $_sum591 = $113 + 1 | 0;
    $114 = $scratch + ($_sum591 << 2) | 0;
    ___gmpn_toom44_mul($114, $60, $69, $64, $69, $111);
    label = 32;
    break;
   case 31:
    ___gmpn_toom6h_mul($pp, $62, $69, $66, $69, $111);
    $116 = $n_0 * 3 & -1;
    $_sum592 = $116 + 1 | 0;
    $117 = $scratch + ($_sum592 << 2) | 0;
    ___gmpn_toom6h_mul($117, $60, $69, $64, $69, $111);
    label = 32;
    break;
   case 32:
    $119 = $n_0 * 3 & -1;
    $_sum573 = $119 + 1 | 0;
    $120 = $scratch + ($_sum573 << 2) | 0;
    ___gmpn_toom_couple_handling($120, $87, $pp, $sign_0, $n_0, 0, 0);
    $121 = ___gmpn_toom_eval_pm2exp($60, $62, $p_1, $ap, $n_0, $s_0, 2, $pp) | 0;
    $122 = ___gmpn_toom_eval_pm2exp($64, $66, $q_1, $bp, $n_0, $t_0, 2, $pp) | 0;
    $123 = $122 ^ $121;
    if ($70) {
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $125 = $n_0 * 10 & -1;
    $_sum574 = $125 + 4 | 0;
    $126 = $scratch + ($_sum574 << 2) | 0;
    ___gmpn_toom22_mul($pp, $62, $69, $66, $69, $126);
    $127 = $n_0 * 6 & -1;
    $_sum575 = $127 + 2 | 0;
    $128 = $scratch + ($_sum575 << 2) | 0;
    ___gmpn_toom22_mul($128, $60, $69, $64, $69, $126);
    label = 39;
    break;
   case 34:
    $130 = ($69 | 0) > 299;
    if ($130) {
      label = 36;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $132 = $n_0 * 10 & -1;
    $_sum583 = $132 + 4 | 0;
    $133 = $scratch + ($_sum583 << 2) | 0;
    ___gmpn_toom33_mul($pp, $62, $69, $66, $69, $133);
    $134 = $n_0 * 6 & -1;
    $_sum584 = $134 + 2 | 0;
    $135 = $scratch + ($_sum584 << 2) | 0;
    ___gmpn_toom33_mul($135, $60, $69, $64, $69, $133);
    label = 39;
    break;
   case 36:
    $137 = ($69 | 0) > 349;
    $138 = $n_0 * 10 & -1;
    $_sum585 = $138 + 4 | 0;
    $139 = $scratch + ($_sum585 << 2) | 0;
    if ($137) {
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    ___gmpn_toom44_mul($pp, $62, $69, $66, $69, $139);
    $141 = $n_0 * 6 & -1;
    $_sum586 = $141 + 2 | 0;
    $142 = $scratch + ($_sum586 << 2) | 0;
    ___gmpn_toom44_mul($142, $60, $69, $64, $69, $139);
    label = 39;
    break;
   case 38:
    ___gmpn_toom6h_mul($pp, $62, $69, $66, $69, $139);
    $144 = $n_0 * 6 & -1;
    $_sum587 = $144 + 2 | 0;
    $145 = $scratch + ($_sum587 << 2) | 0;
    ___gmpn_toom6h_mul($145, $60, $69, $64, $69, $139);
    label = 39;
    break;
   case 39:
    $147 = $n_0 * 6 & -1;
    $_sum576 = $147 + 2 | 0;
    $148 = $scratch + ($_sum576 << 2) | 0;
    ___gmpn_toom_couple_handling($148, $87, $pp, $123, $n_0, 2, 4);
    $149 = ___gmpn_toom_eval_pm2rexp($60, $62, $p_1, $ap, $n_0, $s_0, 2, $pp) | 0;
    $150 = ___gmpn_toom_eval_pm2rexp($64, $66, $q_1, $bp, $n_0, $t_0, 2, $pp) | 0;
    $151 = $150 ^ $149;
    if ($70) {
      label = 41;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    $153 = $n_0 * 10 & -1;
    $_sum577 = $153 + 4 | 0;
    $154 = $scratch + ($_sum577 << 2) | 0;
    ___gmpn_toom22_mul($pp, $62, $69, $66, $69, $154);
    $155 = $pp + ($119 << 2) | 0;
    ___gmpn_toom22_mul($155, $60, $69, $64, $69, $154);
    label = 46;
    break;
   case 41:
    $157 = ($69 | 0) > 299;
    if ($157) {
      label = 43;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    $159 = $n_0 * 10 & -1;
    $_sum581 = $159 + 4 | 0;
    $160 = $scratch + ($_sum581 << 2) | 0;
    ___gmpn_toom33_mul($pp, $62, $69, $66, $69, $160);
    $161 = $pp + ($119 << 2) | 0;
    ___gmpn_toom33_mul($161, $60, $69, $64, $69, $160);
    label = 46;
    break;
   case 43:
    $163 = ($69 | 0) > 349;
    $164 = $n_0 * 10 & -1;
    $_sum582 = $164 + 4 | 0;
    $165 = $scratch + ($_sum582 << 2) | 0;
    if ($163) {
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    ___gmpn_toom44_mul($pp, $62, $69, $66, $69, $165);
    $167 = $pp + ($119 << 2) | 0;
    ___gmpn_toom44_mul($167, $60, $69, $64, $69, $165);
    label = 46;
    break;
   case 45:
    ___gmpn_toom6h_mul($pp, $62, $69, $66, $69, $165);
    $169 = $pp + ($119 << 2) | 0;
    ___gmpn_toom6h_mul($169, $60, $69, $64, $69, $165);
    label = 46;
    break;
   case 46:
    $171 = $pp + ($119 << 2) | 0;
    $172 = $88 << 1;
    $173 = $half_0 << 1;
    ___gmpn_toom_couple_handling($171, $87, $pp, $151, $n_0, $172, $173);
    $174 = ___gmpn_toom_eval_pm2($60, $62, $p_1, $ap, $n_0, $s_0, $pp) | 0;
    $175 = ___gmpn_toom_eval_pm2($64, $66, $q_1, $bp, $n_0, $t_0, $pp) | 0;
    $176 = $175 ^ $174;
    if ($70) {
      label = 48;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    $178 = $n_0 * 10 & -1;
    $_sum578 = $178 + 4 | 0;
    $179 = $scratch + ($_sum578 << 2) | 0;
    ___gmpn_toom22_mul($pp, $62, $69, $66, $69, $179);
    ___gmpn_toom22_mul($62, $60, $69, $64, $69, $179);
    label = 53;
    break;
   case 48:
    $181 = ($69 | 0) > 299;
    if ($181) {
      label = 50;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    $183 = $n_0 * 10 & -1;
    $_sum579 = $183 + 4 | 0;
    $184 = $scratch + ($_sum579 << 2) | 0;
    ___gmpn_toom33_mul($pp, $62, $69, $66, $69, $184);
    ___gmpn_toom33_mul($62, $60, $69, $64, $69, $184);
    label = 53;
    break;
   case 50:
    $186 = ($69 | 0) > 349;
    $187 = $n_0 * 10 & -1;
    $_sum580 = $187 + 4 | 0;
    $188 = $scratch + ($_sum580 << 2) | 0;
    if ($186) {
      label = 52;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    ___gmpn_toom44_mul($pp, $62, $69, $66, $69, $188);
    ___gmpn_toom44_mul($62, $60, $69, $64, $69, $188);
    label = 53;
    break;
   case 52:
    ___gmpn_toom6h_mul($pp, $62, $69, $66, $69, $188);
    ___gmpn_toom6h_mul($62, $60, $69, $64, $69, $188);
    label = 53;
    break;
   case 53:
    ___gmpn_toom_couple_handling($62, $87, $pp, $176, $n_0, 1, 2);
    $192 = ($n_0 | 0) > 99;
    if ($192) {
      label = 55;
      break;
    } else {
      label = 54;
      break;
    }
   case 54:
    ___gmpn_toom22_mul($pp, $ap, $n_0, $bp, $n_0, $64);
    label = 60;
    break;
   case 55:
    $195 = ($n_0 | 0) > 299;
    if ($195) {
      label = 57;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    ___gmpn_toom33_mul($pp, $ap, $n_0, $bp, $n_0, $64);
    label = 60;
    break;
   case 57:
    $198 = ($n_0 | 0) > 349;
    if ($198) {
      label = 59;
      break;
    } else {
      label = 58;
      break;
    }
   case 58:
    ___gmpn_toom44_mul($pp, $ap, $n_0, $bp, $n_0, $64);
    label = 60;
    break;
   case 59:
    ___gmpn_toom6h_mul($pp, $ap, $n_0, $bp, $n_0, $64);
    label = 60;
    break;
   case 60:
    $202 = ($half_0 | 0) == 0;
    if ($202) {
      label = 64;
      break;
    } else {
      label = 61;
      break;
    }
   case 61:
    $204 = ($s_0 | 0) > ($t_0 | 0);
    $205 = $n_0 * 11 & -1;
    $206 = $pp + ($205 << 2) | 0;
    if ($204) {
      label = 62;
      break;
    } else {
      label = 63;
      break;
    }
   case 62:
    $208 = Math_imul($p_1, $n_0);
    $209 = $ap + ($208 << 2) | 0;
    $210 = Math_imul($q_1, $n_0);
    $211 = $bp + ($210 << 2) | 0;
    $212 = ___gmpn_mul($206, $209, $s_0, $211, $t_0) | 0;
    label = 64;
    break;
   case 63:
    $214 = Math_imul($q_1, $n_0);
    $215 = $bp + ($214 << 2) | 0;
    $216 = Math_imul($p_1, $n_0);
    $217 = $ap + ($216 << 2) | 0;
    $218 = ___gmpn_mul($206, $215, $t_0, $217, $s_0) | 0;
    label = 64;
    break;
   case 64:
    $220 = $t_0 + $s_0 | 0;
    ___gmpn_toom_interpolate_12pts($pp, $148, $120, $scratch, $n_0, $220, $half_0, $64);
    return;
  }
}
function ___gmpn_toom6_sqr($pp, $ap, $an, $scratch) {
  $pp = $pp | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $scratch = $scratch | 0;
  var $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $22 = 0;
  $2 = (($an - 1 | 0) >>> 0) / 6 >>> 0;
  $3 = $2 + 1 | 0;
  $5 = ($3 * -5 & -1) + $an | 0;
  $6 = $3 * 9 & -1;
  $7 = $pp + ($6 + 2 << 2) | 0;
  $9 = $pp + (($3 * 7 & -1) << 2) | 0;
  ___gmpn_toom_eval_pm2rexp($7, $9, 5, $ap, $3, $5, 1, $pp);
  $11 = $2 + 2 | 0;
  $12 = $scratch + ($6 + 3 << 2) | 0;
  ___gmpn_toom2_sqr($pp, $9, $11, $12);
  ___gmpn_toom2_sqr($scratch, $7, $11, $12);
  $14 = $3 << 1 | 1;
  ___gmpn_toom_couple_handling($scratch, $14, $pp, 0, $3, 1, 0);
  ___gmpn_toom_eval_pm1($7, $9, 5, $ap, $3, $5, $pp);
  ___gmpn_toom2_sqr($pp, $9, $11, $12);
  $16 = $3 * 3 & -1;
  $17 = $scratch + ($16 + 1 << 2) | 0;
  ___gmpn_toom2_sqr($17, $7, $11, $12);
  ___gmpn_toom_couple_handling($17, $14, $pp, 0, $3, 0, 0);
  ___gmpn_toom_eval_pm2exp($7, $9, 5, $ap, $3, $5, 2, $pp);
  ___gmpn_toom2_sqr($pp, $9, $11, $12);
  $20 = $scratch + (($3 * 6 & -1) + 2 << 2) | 0;
  ___gmpn_toom2_sqr($20, $7, $11, $12);
  ___gmpn_toom_couple_handling($20, $14, $pp, 0, $3, 2, 4);
  ___gmpn_toom_eval_pm2rexp($7, $9, 5, $ap, $3, $5, 2, $pp);
  ___gmpn_toom2_sqr($pp, $9, $11, $12);
  $22 = $pp + ($16 << 2) | 0;
  ___gmpn_toom2_sqr($22, $7, $11, $12);
  ___gmpn_toom_couple_handling($22, $14, $pp, 0, $3, 2, 0);
  ___gmpn_toom_eval_pm2($7, $9, 5, $ap, $3, $5, $pp);
  ___gmpn_toom2_sqr($pp, $9, $11, $12);
  ___gmpn_toom2_sqr($9, $7, $11, $12);
  ___gmpn_toom_couple_handling($9, $14, $pp, 0, $3, 1, 2);
  ___gmpn_toom2_sqr($pp, $ap, $3, $12);
  ___gmpn_toom_interpolate_12pts($pp, $20, $17, $scratch, $3, $5 << 1, 0, $12);
  return;
}
function ___gmpn_toom8h_mul($pp, $ap, $an, $bp, $bn, $scratch) {
  $pp = $pp | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $bp = $bp | 0;
  $bn = $bn | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $_ = 0, $p_0 = 0, $q_0 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $57 = 0, $58 = 0, $60 = 0, $62 = 0, $63 = 0, $n_0 = 0, $s_0 = 0, $t_0 = 0, $p_1 = 0, $q_1 = 0, $half_0 = 0, $65 = 0, $_sum = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $_sum758 = 0, $71 = 0, $_sum759760 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $_sum761 = 0, $78 = 0, $80 = 0, $_sum795 = 0, $82 = 0, $84 = 0, $_sum796 = 0, $85 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $_sum762 = 0, $100 = 0, $101 = 0, $_sum763 = 0, $102 = 0, $104 = 0, $_sum790 = 0, $106 = 0, $107 = 0, $_sum791 = 0, $108 = 0, $110 = 0, $_sum792 = 0, $111 = 0, $113 = 0, $_sum793 = 0, $114 = 0, $116 = 0, $_sum794 = 0, $117 = 0, $119 = 0, $_sum764 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $_sum765 = 0, $127 = 0, $128 = 0, $_sum766 = 0, $129 = 0, $131 = 0, $_sum785 = 0, $133 = 0, $134 = 0, $_sum786 = 0, $135 = 0, $137 = 0, $_sum787 = 0, $138 = 0, $140 = 0, $_sum788 = 0, $141 = 0, $143 = 0, $_sum789 = 0, $144 = 0, $146 = 0, $_sum767 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $_sum768 = 0, $152 = 0, $153 = 0, $_sum769 = 0, $154 = 0, $156 = 0, $_sum780 = 0, $158 = 0, $159 = 0, $_sum781 = 0, $160 = 0, $162 = 0, $_sum782 = 0, $163 = 0, $165 = 0, $_sum783 = 0, $166 = 0, $168 = 0, $_sum784 = 0, $169 = 0, $171 = 0, $_sum770 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $_sum771 = 0, $177 = 0, $178 = 0, $180 = 0, $_sum778 = 0, $182 = 0, $183 = 0, $185 = 0, $_sum779 = 0, $186 = 0, $188 = 0, $190 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $_sum772 = 0, $197 = 0, $198 = 0, $199 = 0, $201 = 0, $_sum776 = 0, $203 = 0, $204 = 0, $205 = 0, $207 = 0, $_sum777 = 0, $208 = 0, $210 = 0, $211 = 0, $213 = 0, $214 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $_sum773 = 0, $222 = 0, $224 = 0, $_sum774 = 0, $226 = 0, $228 = 0, $_sum775 = 0, $229 = 0, $233 = 0, $236 = 0, $239 = 0, $243 = 0, $245 = 0, $246 = 0, $247 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $261 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($an | 0) == ($bn | 0);
    if ($1) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = $an * 10 & -1;
    $4 = $bn >> 1;
    $5 = $4 * 21 & -1;
    $6 = ($3 | 0) < ($5 | 0);
    if ($6) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $8 = $an - 1 | 0;
    $9 = $8 >> 3;
    $10 = $9 + 1 | 0;
    $11 = $10 * 7 & -1;
    $12 = $an - $11 | 0;
    $13 = $bn - $11 | 0;
    $half_0 = 0;
    $q_1 = 7;
    $p_1 = 7;
    $t_0 = $13;
    $s_0 = $12;
    $n_0 = $10;
    label = 17;
    break;
   case 4:
    $15 = $an * 13 & -1;
    $16 = $bn << 4;
    $17 = ($15 | 0) < ($16 | 0);
    if ($17) {
      $q_0 = 8;
      $p_0 = 9;
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $19 = $4 * 27 & -1;
    $20 = ($3 | 0) < ($19 | 0);
    if ($20) {
      $q_0 = 7;
      $p_0 = 9;
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $22 = $4 * 33 & -1;
    $23 = ($3 | 0) < ($22 | 0);
    if ($23) {
      $q_0 = 7;
      $p_0 = 10;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $25 = $an << 2;
    $26 = $bn * 7 & -1;
    $27 = ($25 | 0) < ($26 | 0);
    if ($27) {
      $q_0 = 6;
      $p_0 = 10;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $29 = $an * 6 & -1;
    $30 = $bn * 13 & -1;
    $31 = ($29 | 0) < ($30 | 0);
    $_ = $31 ? 6 : 5;
    $q_0 = $_;
    $p_0 = 11;
    label = 9;
    break;
   case 9:
    $33 = $q_0 + $p_0 | 0;
    $34 = $33 & 1;
    $35 = Math_imul($q_0, $an);
    $36 = Math_imul($p_0, $bn);
    $37 = ($35 | 0) < ($36 | 0);
    if ($37) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $39 = $an - 1 | 0;
    $40 = ($39 >>> 0) / ($p_0 >>> 0) >>> 0;
    $45 = $40;
    label = 12;
    break;
   case 11:
    $42 = $bn - 1 | 0;
    $43 = ($42 >>> 0) / ($q_0 >>> 0) >>> 0;
    $45 = $43;
    label = 12;
    break;
   case 12:
    $46 = $45 + 1 | 0;
    $47 = $p_0 - 1 | 0;
    $48 = $q_0 - 1 | 0;
    $49 = Math_imul($46, $47);
    $50 = $an - $49 | 0;
    $51 = Math_imul($46, $48);
    $52 = $bn - $51 | 0;
    $53 = ($34 | 0) == 0;
    if ($53) {
      $half_0 = 0;
      $q_1 = $48;
      $p_1 = $47;
      $t_0 = $52;
      $s_0 = $50;
      $n_0 = $46;
      label = 17;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $55 = ($50 | 0) < 1;
    if ($55) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $57 = $p_0 - 2 | 0;
    $58 = $50 + $46 | 0;
    $half_0 = 0;
    $q_1 = $48;
    $p_1 = $57;
    $t_0 = $52;
    $s_0 = $58;
    $n_0 = $46;
    label = 17;
    break;
   case 15:
    $60 = ($52 | 0) < 1;
    if ($60) {
      label = 16;
      break;
    } else {
      $half_0 = $34;
      $q_1 = $48;
      $p_1 = $47;
      $t_0 = $52;
      $s_0 = $50;
      $n_0 = $46;
      label = 17;
      break;
    }
   case 16:
    $62 = $q_0 - 2 | 0;
    $63 = $52 + $46 | 0;
    $half_0 = 0;
    $q_1 = $62;
    $p_1 = $47;
    $t_0 = $63;
    $s_0 = $50;
    $n_0 = $46;
    label = 17;
    break;
   case 17:
    $65 = $n_0 * 13 & -1;
    $_sum = $65 + 2 | 0;
    $66 = $pp + ($_sum << 2) | 0;
    $67 = $n_0 * 11 & -1;
    $68 = $pp + ($67 << 2) | 0;
    $69 = ___gmpn_toom_eval_pm2rexp($66, $68, $p_1, $ap, $n_0, $s_0, 3, $pp) | 0;
    $70 = $n_0 * 12 & -1;
    $_sum758 = $70 + 4 | 0;
    $71 = $scratch + ($_sum758 << 2) | 0;
    $_sum759760 = $70 | 1;
    $72 = $pp + ($_sum759760 << 2) | 0;
    $73 = ___gmpn_toom_eval_pm2rexp($71, $72, $q_1, $bp, $n_0, $t_0, 3, $pp) | 0;
    $74 = $73 ^ $69;
    $75 = $n_0 + 1 | 0;
    $76 = ($75 | 0) > 99;
    if ($76) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $_sum761 = $65 + 5 | 0;
    $78 = $scratch + ($_sum761 << 2) | 0;
    ___gmpn_toom22_mul($pp, $68, $75, $72, $75, $78);
    ___gmpn_toom22_mul($scratch, $66, $75, $71, $75, $78);
    label = 24;
    break;
   case 19:
    $80 = ($75 | 0) > 299;
    if ($80) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $_sum795 = $65 + 5 | 0;
    $82 = $scratch + ($_sum795 << 2) | 0;
    ___gmpn_toom33_mul($pp, $68, $75, $72, $75, $82);
    ___gmpn_toom33_mul($scratch, $66, $75, $71, $75, $82);
    label = 24;
    break;
   case 21:
    $84 = ($75 | 0) > 349;
    $_sum796 = $65 + 5 | 0;
    $85 = $scratch + ($_sum796 << 2) | 0;
    if ($84) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    ___gmpn_toom44_mul($pp, $68, $75, $72, $75, $85);
    ___gmpn_toom44_mul($scratch, $66, $75, $71, $75, $85);
    label = 24;
    break;
   case 23:
    ___gmpn_toom6h_mul($pp, $68, $75, $72, $75, $85);
    ___gmpn_toom6h_mul($scratch, $66, $75, $71, $75, $85);
    label = 24;
    break;
   case 24:
    $89 = $n_0 << 1;
    $90 = $89 | 1;
    $91 = $90 + 1 | 0;
    $92 = $half_0 + 1 | 0;
    $93 = $92 * 3 & -1;
    $94 = -$half_0 | 0;
    $95 = $94 & 3;
    ___gmpn_toom_couple_handling($scratch, $91, $pp, $74, $n_0, $93, $95);
    $96 = ___gmpn_toom_eval_pm2rexp($66, $68, $p_1, $ap, $n_0, $s_0, 2, $pp) | 0;
    $97 = ___gmpn_toom_eval_pm2rexp($71, $72, $q_1, $bp, $n_0, $t_0, 2, $pp) | 0;
    $98 = $97 ^ $96;
    if ($76) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $_sum762 = $65 + 5 | 0;
    $100 = $scratch + ($_sum762 << 2) | 0;
    ___gmpn_toom22_mul($pp, $68, $75, $72, $75, $100);
    $101 = $n_0 * 3 & -1;
    $_sum763 = $101 + 1 | 0;
    $102 = $scratch + ($_sum763 << 2) | 0;
    ___gmpn_toom22_mul($102, $66, $75, $71, $75, $100);
    label = 31;
    break;
   case 26:
    $104 = ($75 | 0) > 299;
    if ($104) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $_sum790 = $65 + 5 | 0;
    $106 = $scratch + ($_sum790 << 2) | 0;
    ___gmpn_toom33_mul($pp, $68, $75, $72, $75, $106);
    $107 = $n_0 * 3 & -1;
    $_sum791 = $107 + 1 | 0;
    $108 = $scratch + ($_sum791 << 2) | 0;
    ___gmpn_toom33_mul($108, $66, $75, $71, $75, $106);
    label = 31;
    break;
   case 28:
    $110 = ($75 | 0) > 349;
    $_sum792 = $65 + 5 | 0;
    $111 = $scratch + ($_sum792 << 2) | 0;
    if ($110) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    ___gmpn_toom44_mul($pp, $68, $75, $72, $75, $111);
    $113 = $n_0 * 3 & -1;
    $_sum793 = $113 + 1 | 0;
    $114 = $scratch + ($_sum793 << 2) | 0;
    ___gmpn_toom44_mul($114, $66, $75, $71, $75, $111);
    label = 31;
    break;
   case 30:
    ___gmpn_toom6h_mul($pp, $68, $75, $72, $75, $111);
    $116 = $n_0 * 3 & -1;
    $_sum794 = $116 + 1 | 0;
    $117 = $scratch + ($_sum794 << 2) | 0;
    ___gmpn_toom6h_mul($117, $66, $75, $71, $75, $111);
    label = 31;
    break;
   case 31:
    $119 = $n_0 * 3 & -1;
    $_sum764 = $119 + 1 | 0;
    $120 = $scratch + ($_sum764 << 2) | 0;
    $121 = $92 << 1;
    $122 = $half_0 << 1;
    ___gmpn_toom_couple_handling($120, $90, $pp, $98, $n_0, $121, $122);
    $123 = ___gmpn_toom_eval_pm2($66, $68, $p_1, $ap, $n_0, $s_0, $pp) | 0;
    $124 = ___gmpn_toom_eval_pm2($71, $72, $q_1, $bp, $n_0, $t_0, $pp) | 0;
    $125 = $124 ^ $123;
    if ($76) {
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $_sum765 = $65 + 5 | 0;
    $127 = $scratch + ($_sum765 << 2) | 0;
    ___gmpn_toom22_mul($pp, $68, $75, $72, $75, $127);
    $128 = $n_0 * 6 & -1;
    $_sum766 = $128 + 2 | 0;
    $129 = $scratch + ($_sum766 << 2) | 0;
    ___gmpn_toom22_mul($129, $66, $75, $71, $75, $127);
    label = 38;
    break;
   case 33:
    $131 = ($75 | 0) > 299;
    if ($131) {
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    $_sum785 = $65 + 5 | 0;
    $133 = $scratch + ($_sum785 << 2) | 0;
    ___gmpn_toom33_mul($pp, $68, $75, $72, $75, $133);
    $134 = $n_0 * 6 & -1;
    $_sum786 = $134 + 2 | 0;
    $135 = $scratch + ($_sum786 << 2) | 0;
    ___gmpn_toom33_mul($135, $66, $75, $71, $75, $133);
    label = 38;
    break;
   case 35:
    $137 = ($75 | 0) > 349;
    $_sum787 = $65 + 5 | 0;
    $138 = $scratch + ($_sum787 << 2) | 0;
    if ($137) {
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    ___gmpn_toom44_mul($pp, $68, $75, $72, $75, $138);
    $140 = $n_0 * 6 & -1;
    $_sum788 = $140 + 2 | 0;
    $141 = $scratch + ($_sum788 << 2) | 0;
    ___gmpn_toom44_mul($141, $66, $75, $71, $75, $138);
    label = 38;
    break;
   case 37:
    ___gmpn_toom6h_mul($pp, $68, $75, $72, $75, $138);
    $143 = $n_0 * 6 & -1;
    $_sum789 = $143 + 2 | 0;
    $144 = $scratch + ($_sum789 << 2) | 0;
    ___gmpn_toom6h_mul($144, $66, $75, $71, $75, $138);
    label = 38;
    break;
   case 38:
    $146 = $n_0 * 6 & -1;
    $_sum767 = $146 + 2 | 0;
    $147 = $scratch + ($_sum767 << 2) | 0;
    ___gmpn_toom_couple_handling($147, $90, $pp, $125, $n_0, 1, 2);
    $148 = ___gmpn_toom_eval_pm2exp($66, $68, $p_1, $ap, $n_0, $s_0, 3, $pp) | 0;
    $149 = ___gmpn_toom_eval_pm2exp($71, $72, $q_1, $bp, $n_0, $t_0, 3, $pp) | 0;
    $150 = $149 ^ $148;
    if ($76) {
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    $_sum768 = $65 + 5 | 0;
    $152 = $scratch + ($_sum768 << 2) | 0;
    ___gmpn_toom22_mul($pp, $68, $75, $72, $75, $152);
    $153 = $n_0 * 9 & -1;
    $_sum769 = $153 + 3 | 0;
    $154 = $scratch + ($_sum769 << 2) | 0;
    ___gmpn_toom22_mul($154, $66, $75, $71, $75, $152);
    label = 45;
    break;
   case 40:
    $156 = ($75 | 0) > 299;
    if ($156) {
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $_sum780 = $65 + 5 | 0;
    $158 = $scratch + ($_sum780 << 2) | 0;
    ___gmpn_toom33_mul($pp, $68, $75, $72, $75, $158);
    $159 = $n_0 * 9 & -1;
    $_sum781 = $159 + 3 | 0;
    $160 = $scratch + ($_sum781 << 2) | 0;
    ___gmpn_toom33_mul($160, $66, $75, $71, $75, $158);
    label = 45;
    break;
   case 42:
    $162 = ($75 | 0) > 349;
    $_sum782 = $65 + 5 | 0;
    $163 = $scratch + ($_sum782 << 2) | 0;
    if ($162) {
      label = 44;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    ___gmpn_toom44_mul($pp, $68, $75, $72, $75, $163);
    $165 = $n_0 * 9 & -1;
    $_sum783 = $165 + 3 | 0;
    $166 = $scratch + ($_sum783 << 2) | 0;
    ___gmpn_toom44_mul($166, $66, $75, $71, $75, $163);
    label = 45;
    break;
   case 44:
    ___gmpn_toom6h_mul($pp, $68, $75, $72, $75, $163);
    $168 = $n_0 * 9 & -1;
    $_sum784 = $168 + 3 | 0;
    $169 = $scratch + ($_sum784 << 2) | 0;
    ___gmpn_toom6h_mul($169, $66, $75, $71, $75, $163);
    label = 45;
    break;
   case 45:
    $171 = $n_0 * 9 & -1;
    $_sum770 = $171 + 3 | 0;
    $172 = $scratch + ($_sum770 << 2) | 0;
    ___gmpn_toom_couple_handling($172, $91, $pp, $150, $n_0, 3, 6);
    $173 = ___gmpn_toom_eval_pm2rexp($66, $68, $p_1, $ap, $n_0, $s_0, 1, $pp) | 0;
    $174 = ___gmpn_toom_eval_pm2rexp($71, $72, $q_1, $bp, $n_0, $t_0, 1, $pp) | 0;
    $175 = $174 ^ $173;
    if ($76) {
      label = 47;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    $_sum771 = $65 + 5 | 0;
    $177 = $scratch + ($_sum771 << 2) | 0;
    ___gmpn_toom22_mul($pp, $68, $75, $72, $75, $177);
    $178 = $pp + ($119 << 2) | 0;
    ___gmpn_toom22_mul($178, $66, $75, $71, $75, $177);
    label = 52;
    break;
   case 47:
    $180 = ($75 | 0) > 299;
    if ($180) {
      label = 49;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    $_sum778 = $65 + 5 | 0;
    $182 = $scratch + ($_sum778 << 2) | 0;
    ___gmpn_toom33_mul($pp, $68, $75, $72, $75, $182);
    $183 = $pp + ($119 << 2) | 0;
    ___gmpn_toom33_mul($183, $66, $75, $71, $75, $182);
    label = 52;
    break;
   case 49:
    $185 = ($75 | 0) > 349;
    $_sum779 = $65 + 5 | 0;
    $186 = $scratch + ($_sum779 << 2) | 0;
    if ($185) {
      label = 51;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    ___gmpn_toom44_mul($pp, $68, $75, $72, $75, $186);
    $188 = $pp + ($119 << 2) | 0;
    ___gmpn_toom44_mul($188, $66, $75, $71, $75, $186);
    label = 52;
    break;
   case 51:
    ___gmpn_toom6h_mul($pp, $68, $75, $72, $75, $186);
    $190 = $pp + ($119 << 2) | 0;
    ___gmpn_toom6h_mul($190, $66, $75, $71, $75, $186);
    label = 52;
    break;
   case 52:
    $192 = $pp + ($119 << 2) | 0;
    ___gmpn_toom_couple_handling($192, $90, $pp, $175, $n_0, $92, $half_0);
    $193 = ___gmpn_toom_eval_pm1($66, $68, $p_1, $ap, $n_0, $s_0, $pp) | 0;
    $194 = ___gmpn_toom_eval_pm1($71, $72, $q_1, $bp, $n_0, $t_0, $pp) | 0;
    $195 = $194 ^ $193;
    if ($76) {
      label = 54;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    $_sum772 = $65 + 5 | 0;
    $197 = $scratch + ($_sum772 << 2) | 0;
    ___gmpn_toom22_mul($pp, $68, $75, $72, $75, $197);
    $198 = $n_0 * 7 & -1;
    $199 = $pp + ($198 << 2) | 0;
    ___gmpn_toom22_mul($199, $66, $75, $71, $75, $197);
    label = 59;
    break;
   case 54:
    $201 = ($75 | 0) > 299;
    if ($201) {
      label = 56;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    $_sum776 = $65 + 5 | 0;
    $203 = $scratch + ($_sum776 << 2) | 0;
    ___gmpn_toom33_mul($pp, $68, $75, $72, $75, $203);
    $204 = $n_0 * 7 & -1;
    $205 = $pp + ($204 << 2) | 0;
    ___gmpn_toom33_mul($205, $66, $75, $71, $75, $203);
    label = 59;
    break;
   case 56:
    $207 = ($75 | 0) > 349;
    $_sum777 = $65 + 5 | 0;
    $208 = $scratch + ($_sum777 << 2) | 0;
    if ($207) {
      label = 58;
      break;
    } else {
      label = 57;
      break;
    }
   case 57:
    ___gmpn_toom44_mul($pp, $68, $75, $72, $75, $208);
    $210 = $n_0 * 7 & -1;
    $211 = $pp + ($210 << 2) | 0;
    ___gmpn_toom44_mul($211, $66, $75, $71, $75, $208);
    label = 59;
    break;
   case 58:
    ___gmpn_toom6h_mul($pp, $68, $75, $72, $75, $208);
    $213 = $n_0 * 7 & -1;
    $214 = $pp + ($213 << 2) | 0;
    ___gmpn_toom6h_mul($214, $66, $75, $71, $75, $208);
    label = 59;
    break;
   case 59:
    $216 = $n_0 * 7 & -1;
    $217 = $pp + ($216 << 2) | 0;
    ___gmpn_toom_couple_handling($217, $90, $pp, $195, $n_0, 0, 0);
    $218 = ___gmpn_toom_eval_pm2exp($66, $68, $p_1, $ap, $n_0, $s_0, 2, $pp) | 0;
    $219 = ___gmpn_toom_eval_pm2exp($71, $72, $q_1, $bp, $n_0, $t_0, 2, $pp) | 0;
    $220 = $219 ^ $218;
    if ($76) {
      label = 61;
      break;
    } else {
      label = 60;
      break;
    }
   case 60:
    $_sum773 = $65 + 5 | 0;
    $222 = $scratch + ($_sum773 << 2) | 0;
    ___gmpn_toom22_mul($pp, $68, $75, $72, $75, $222);
    ___gmpn_toom22_mul($68, $66, $75, $71, $75, $222);
    label = 66;
    break;
   case 61:
    $224 = ($75 | 0) > 299;
    if ($224) {
      label = 63;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    $_sum774 = $65 + 5 | 0;
    $226 = $scratch + ($_sum774 << 2) | 0;
    ___gmpn_toom33_mul($pp, $68, $75, $72, $75, $226);
    ___gmpn_toom33_mul($68, $66, $75, $71, $75, $226);
    label = 66;
    break;
   case 63:
    $228 = ($75 | 0) > 349;
    $_sum775 = $65 + 5 | 0;
    $229 = $scratch + ($_sum775 << 2) | 0;
    if ($228) {
      label = 65;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    ___gmpn_toom44_mul($pp, $68, $75, $72, $75, $229);
    ___gmpn_toom44_mul($68, $66, $75, $71, $75, $229);
    label = 66;
    break;
   case 65:
    ___gmpn_toom6h_mul($pp, $68, $75, $72, $75, $229);
    ___gmpn_toom6h_mul($68, $66, $75, $71, $75, $229);
    label = 66;
    break;
   case 66:
    ___gmpn_toom_couple_handling($68, $90, $pp, $220, $n_0, 2, 4);
    $233 = ($n_0 | 0) > 99;
    if ($233) {
      label = 68;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    ___gmpn_toom22_mul($pp, $ap, $n_0, $bp, $n_0, $71);
    label = 73;
    break;
   case 68:
    $236 = ($n_0 | 0) > 299;
    if ($236) {
      label = 70;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    ___gmpn_toom33_mul($pp, $ap, $n_0, $bp, $n_0, $71);
    label = 73;
    break;
   case 70:
    $239 = ($n_0 | 0) > 349;
    if ($239) {
      label = 72;
      break;
    } else {
      label = 71;
      break;
    }
   case 71:
    ___gmpn_toom44_mul($pp, $ap, $n_0, $bp, $n_0, $71);
    label = 73;
    break;
   case 72:
    ___gmpn_toom6h_mul($pp, $ap, $n_0, $bp, $n_0, $71);
    label = 73;
    break;
   case 73:
    $243 = ($half_0 | 0) == 0;
    if ($243) {
      label = 77;
      break;
    } else {
      label = 74;
      break;
    }
   case 74:
    $245 = ($s_0 | 0) > ($t_0 | 0);
    $246 = $n_0 * 15 & -1;
    $247 = $pp + ($246 << 2) | 0;
    if ($245) {
      label = 75;
      break;
    } else {
      label = 76;
      break;
    }
   case 75:
    $249 = Math_imul($p_1, $n_0);
    $250 = $ap + ($249 << 2) | 0;
    $251 = Math_imul($q_1, $n_0);
    $252 = $bp + ($251 << 2) | 0;
    $253 = ___gmpn_mul($247, $250, $s_0, $252, $t_0) | 0;
    label = 77;
    break;
   case 76:
    $255 = Math_imul($q_1, $n_0);
    $256 = $bp + ($255 << 2) | 0;
    $257 = Math_imul($p_1, $n_0);
    $258 = $ap + ($257 << 2) | 0;
    $259 = ___gmpn_mul($247, $256, $t_0, $258, $s_0) | 0;
    label = 77;
    break;
   case 77:
    $261 = $t_0 + $s_0 | 0;
    ___gmpn_toom_interpolate_16pts($pp, $172, $147, $120, $scratch, $n_0, $261, $half_0, $71);
    return;
  }
}
function ___gmpn_toom8_sqr($pp, $ap, $an, $scratch) {
  $pp = $pp | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $_sum = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $_sum563 = 0, $15 = 0, $17 = 0, $19 = 0, $_sum611 = 0, $20 = 0, $22 = 0, $23 = 0, $_sum613 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $_sum564 = 0, $34 = 0, $35 = 0, $_sum565 = 0, $36 = 0, $38 = 0, $40 = 0, $_sum604 = 0, $41 = 0, $42 = 0, $_sum605 = 0, $43 = 0, $45 = 0, $46 = 0, $_sum608 = 0, $47 = 0, $49 = 0, $_sum609 = 0, $50 = 0, $52 = 0, $_sum610 = 0, $53 = 0, $55 = 0, $_sum566 = 0, $56 = 0, $57 = 0, $59 = 0, $_sum567 = 0, $60 = 0, $61 = 0, $_sum568 = 0, $62 = 0, $64 = 0, $66 = 0, $_sum597 = 0, $67 = 0, $68 = 0, $_sum598 = 0, $69 = 0, $71 = 0, $72 = 0, $_sum601 = 0, $73 = 0, $75 = 0, $_sum602 = 0, $76 = 0, $78 = 0, $_sum603 = 0, $79 = 0, $81 = 0, $_sum569 = 0, $82 = 0, $83 = 0, $85 = 0, $_sum570 = 0, $86 = 0, $87 = 0, $_sum571 = 0, $88 = 0, $90 = 0, $92 = 0, $_sum590 = 0, $93 = 0, $94 = 0, $_sum591 = 0, $95 = 0, $97 = 0, $98 = 0, $_sum594 = 0, $99 = 0, $101 = 0, $_sum595 = 0, $102 = 0, $104 = 0, $_sum596 = 0, $105 = 0, $107 = 0, $_sum572 = 0, $108 = 0, $109 = 0, $111 = 0, $_sum573 = 0, $112 = 0, $113 = 0, $115 = 0, $117 = 0, $_sum587 = 0, $118 = 0, $119 = 0, $121 = 0, $122 = 0, $_sum589 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $130 = 0, $132 = 0, $_sum574 = 0, $133 = 0, $134 = 0, $136 = 0, $138 = 0, $_sum584 = 0, $139 = 0, $140 = 0, $142 = 0, $143 = 0, $_sum586 = 0, $144 = 0, $146 = 0, $148 = 0, $150 = 0, $151 = 0, $153 = 0, $_sum575 = 0, $154 = 0, $156 = 0, $158 = 0, $_sum581 = 0, $159 = 0, $161 = 0, $162 = 0, $_sum583 = 0, $163 = 0, $167 = 0, $169 = 0, $_sum576 = 0, $170 = 0, $172 = 0, $174 = 0, $_sum578 = 0, $175 = 0, $177 = 0, $178 = 0, $_sum580 = 0, $179 = 0, $183 = 0, $184 = 0, $_sum577 = 0, $185 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $an - 1 | 0;
    $2 = $1 >> 3;
    $3 = $2 + 1 | 0;
    $4 = $3 * 7 & -1;
    $5 = $an - $4 | 0;
    $6 = $3 * 13 & -1;
    $_sum = $6 + 2 | 0;
    $7 = $pp + ($_sum << 2) | 0;
    $8 = $3 * 11 & -1;
    $9 = $pp + ($8 << 2) | 0;
    $10 = ___gmpn_toom_eval_pm2rexp($7, $9, 7, $ap, $3, $5, 3, $pp) | 0;
    $11 = $2 + 2 | 0;
    $12 = ($11 | 0) > 119;
    if ($12) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $14 = $3 * 12 & -1;
    $_sum563 = $14 + 4 | 0;
    $15 = $scratch + ($_sum563 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $9, $11, $15);
    ___gmpn_toom2_sqr($scratch, $7, $11, $15);
    label = 8;
    break;
   case 3:
    $17 = ($11 | 0) > 399;
    if ($17) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $19 = $3 * 12 & -1;
    $_sum611 = $19 + 4 | 0;
    $20 = $scratch + ($_sum611 << 2) | 0;
    ___gmpn_toom3_sqr($pp, $9, $11, $20);
    ___gmpn_toom3_sqr($scratch, $7, $11, $20);
    label = 8;
    break;
   case 5:
    $22 = ($11 | 0) > 449;
    $23 = $3 * 12 & -1;
    $_sum613 = $23 + 4 | 0;
    $24 = $scratch + ($_sum613 << 2) | 0;
    if ($22) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    ___gmpn_toom6_sqr($pp, $9, $11, $24);
    ___gmpn_toom6_sqr($scratch, $7, $11, $24);
    label = 8;
    break;
   case 7:
    ___gmpn_toom8_sqr($pp, $9, $11, $24);
    ___gmpn_toom8_sqr($scratch, $7, $11, $24);
    label = 8;
    break;
   case 8:
    $28 = $3 << 1;
    $29 = $28 | 1;
    $30 = $29 + 1 | 0;
    ___gmpn_toom_couple_handling($scratch, $30, $pp, 0, $3, 3, 0);
    $31 = ___gmpn_toom_eval_pm2rexp($7, $9, 7, $ap, $3, $5, 2, $pp) | 0;
    if ($12) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $33 = $3 * 12 & -1;
    $_sum564 = $33 + 4 | 0;
    $34 = $scratch + ($_sum564 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $9, $11, $34);
    $35 = $3 * 3 & -1;
    $_sum565 = $35 + 1 | 0;
    $36 = $scratch + ($_sum565 << 2) | 0;
    ___gmpn_toom2_sqr($36, $7, $11, $34);
    label = 15;
    break;
   case 10:
    $38 = ($11 | 0) > 399;
    if ($38) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $40 = $3 * 12 & -1;
    $_sum604 = $40 + 4 | 0;
    $41 = $scratch + ($_sum604 << 2) | 0;
    ___gmpn_toom3_sqr($pp, $9, $11, $41);
    $42 = $3 * 3 & -1;
    $_sum605 = $42 + 1 | 0;
    $43 = $scratch + ($_sum605 << 2) | 0;
    ___gmpn_toom3_sqr($43, $7, $11, $41);
    label = 15;
    break;
   case 12:
    $45 = ($11 | 0) > 449;
    $46 = $3 * 12 & -1;
    $_sum608 = $46 + 4 | 0;
    $47 = $scratch + ($_sum608 << 2) | 0;
    if ($45) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    ___gmpn_toom6_sqr($pp, $9, $11, $47);
    $49 = $3 * 3 & -1;
    $_sum609 = $49 + 1 | 0;
    $50 = $scratch + ($_sum609 << 2) | 0;
    ___gmpn_toom6_sqr($50, $7, $11, $47);
    label = 15;
    break;
   case 14:
    ___gmpn_toom8_sqr($pp, $9, $11, $47);
    $52 = $3 * 3 & -1;
    $_sum610 = $52 + 1 | 0;
    $53 = $scratch + ($_sum610 << 2) | 0;
    ___gmpn_toom8_sqr($53, $7, $11, $47);
    label = 15;
    break;
   case 15:
    $55 = $3 * 3 & -1;
    $_sum566 = $55 + 1 | 0;
    $56 = $scratch + ($_sum566 << 2) | 0;
    ___gmpn_toom_couple_handling($56, $29, $pp, 0, $3, 2, 0);
    $57 = ___gmpn_toom_eval_pm2($7, $9, 7, $ap, $3, $5, $pp) | 0;
    if ($12) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $59 = $3 * 12 & -1;
    $_sum567 = $59 + 4 | 0;
    $60 = $scratch + ($_sum567 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $9, $11, $60);
    $61 = $3 * 6 & -1;
    $_sum568 = $61 + 2 | 0;
    $62 = $scratch + ($_sum568 << 2) | 0;
    ___gmpn_toom2_sqr($62, $7, $11, $60);
    label = 22;
    break;
   case 17:
    $64 = ($11 | 0) > 399;
    if ($64) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $66 = $3 * 12 & -1;
    $_sum597 = $66 + 4 | 0;
    $67 = $scratch + ($_sum597 << 2) | 0;
    ___gmpn_toom3_sqr($pp, $9, $11, $67);
    $68 = $3 * 6 & -1;
    $_sum598 = $68 + 2 | 0;
    $69 = $scratch + ($_sum598 << 2) | 0;
    ___gmpn_toom3_sqr($69, $7, $11, $67);
    label = 22;
    break;
   case 19:
    $71 = ($11 | 0) > 449;
    $72 = $3 * 12 & -1;
    $_sum601 = $72 + 4 | 0;
    $73 = $scratch + ($_sum601 << 2) | 0;
    if ($71) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    ___gmpn_toom6_sqr($pp, $9, $11, $73);
    $75 = $3 * 6 & -1;
    $_sum602 = $75 + 2 | 0;
    $76 = $scratch + ($_sum602 << 2) | 0;
    ___gmpn_toom6_sqr($76, $7, $11, $73);
    label = 22;
    break;
   case 21:
    ___gmpn_toom8_sqr($pp, $9, $11, $73);
    $78 = $3 * 6 & -1;
    $_sum603 = $78 + 2 | 0;
    $79 = $scratch + ($_sum603 << 2) | 0;
    ___gmpn_toom8_sqr($79, $7, $11, $73);
    label = 22;
    break;
   case 22:
    $81 = $3 * 6 & -1;
    $_sum569 = $81 + 2 | 0;
    $82 = $scratch + ($_sum569 << 2) | 0;
    ___gmpn_toom_couple_handling($82, $29, $pp, 0, $3, 1, 2);
    $83 = ___gmpn_toom_eval_pm2exp($7, $9, 7, $ap, $3, $5, 3, $pp) | 0;
    if ($12) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $85 = $3 * 12 & -1;
    $_sum570 = $85 + 4 | 0;
    $86 = $scratch + ($_sum570 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $9, $11, $86);
    $87 = $3 * 9 & -1;
    $_sum571 = $87 + 3 | 0;
    $88 = $scratch + ($_sum571 << 2) | 0;
    ___gmpn_toom2_sqr($88, $7, $11, $86);
    label = 29;
    break;
   case 24:
    $90 = ($11 | 0) > 399;
    if ($90) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $92 = $3 * 12 & -1;
    $_sum590 = $92 + 4 | 0;
    $93 = $scratch + ($_sum590 << 2) | 0;
    ___gmpn_toom3_sqr($pp, $9, $11, $93);
    $94 = $3 * 9 & -1;
    $_sum591 = $94 + 3 | 0;
    $95 = $scratch + ($_sum591 << 2) | 0;
    ___gmpn_toom3_sqr($95, $7, $11, $93);
    label = 29;
    break;
   case 26:
    $97 = ($11 | 0) > 449;
    $98 = $3 * 12 & -1;
    $_sum594 = $98 + 4 | 0;
    $99 = $scratch + ($_sum594 << 2) | 0;
    if ($97) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    ___gmpn_toom6_sqr($pp, $9, $11, $99);
    $101 = $3 * 9 & -1;
    $_sum595 = $101 + 3 | 0;
    $102 = $scratch + ($_sum595 << 2) | 0;
    ___gmpn_toom6_sqr($102, $7, $11, $99);
    label = 29;
    break;
   case 28:
    ___gmpn_toom8_sqr($pp, $9, $11, $99);
    $104 = $3 * 9 & -1;
    $_sum596 = $104 + 3 | 0;
    $105 = $scratch + ($_sum596 << 2) | 0;
    ___gmpn_toom8_sqr($105, $7, $11, $99);
    label = 29;
    break;
   case 29:
    $107 = $3 * 9 & -1;
    $_sum572 = $107 + 3 | 0;
    $108 = $scratch + ($_sum572 << 2) | 0;
    ___gmpn_toom_couple_handling($108, $30, $pp, 0, $3, 3, 6);
    $109 = ___gmpn_toom_eval_pm2rexp($7, $9, 7, $ap, $3, $5, 1, $pp) | 0;
    if ($12) {
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    $111 = $3 * 12 & -1;
    $_sum573 = $111 + 4 | 0;
    $112 = $scratch + ($_sum573 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $9, $11, $112);
    $113 = $pp + ($55 << 2) | 0;
    ___gmpn_toom2_sqr($113, $7, $11, $112);
    label = 36;
    break;
   case 31:
    $115 = ($11 | 0) > 399;
    if ($115) {
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $117 = $3 * 12 & -1;
    $_sum587 = $117 + 4 | 0;
    $118 = $scratch + ($_sum587 << 2) | 0;
    ___gmpn_toom3_sqr($pp, $9, $11, $118);
    $119 = $pp + ($55 << 2) | 0;
    ___gmpn_toom3_sqr($119, $7, $11, $118);
    label = 36;
    break;
   case 33:
    $121 = ($11 | 0) > 449;
    $122 = $3 * 12 & -1;
    $_sum589 = $122 + 4 | 0;
    $123 = $scratch + ($_sum589 << 2) | 0;
    if ($121) {
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    ___gmpn_toom6_sqr($pp, $9, $11, $123);
    $125 = $pp + ($55 << 2) | 0;
    ___gmpn_toom6_sqr($125, $7, $11, $123);
    label = 36;
    break;
   case 35:
    ___gmpn_toom8_sqr($pp, $9, $11, $123);
    $127 = $pp + ($55 << 2) | 0;
    ___gmpn_toom8_sqr($127, $7, $11, $123);
    label = 36;
    break;
   case 36:
    $129 = $pp + ($55 << 2) | 0;
    ___gmpn_toom_couple_handling($129, $29, $pp, 0, $3, 1, 0);
    $130 = ___gmpn_toom_eval_pm1($7, $9, 7, $ap, $3, $5, $pp) | 0;
    if ($12) {
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    $132 = $3 * 12 & -1;
    $_sum574 = $132 + 4 | 0;
    $133 = $scratch + ($_sum574 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $9, $11, $133);
    $134 = $pp + ($4 << 2) | 0;
    ___gmpn_toom2_sqr($134, $7, $11, $133);
    label = 43;
    break;
   case 38:
    $136 = ($11 | 0) > 399;
    if ($136) {
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    $138 = $3 * 12 & -1;
    $_sum584 = $138 + 4 | 0;
    $139 = $scratch + ($_sum584 << 2) | 0;
    ___gmpn_toom3_sqr($pp, $9, $11, $139);
    $140 = $pp + ($4 << 2) | 0;
    ___gmpn_toom3_sqr($140, $7, $11, $139);
    label = 43;
    break;
   case 40:
    $142 = ($11 | 0) > 449;
    $143 = $3 * 12 & -1;
    $_sum586 = $143 + 4 | 0;
    $144 = $scratch + ($_sum586 << 2) | 0;
    if ($142) {
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    ___gmpn_toom6_sqr($pp, $9, $11, $144);
    $146 = $pp + ($4 << 2) | 0;
    ___gmpn_toom6_sqr($146, $7, $11, $144);
    label = 43;
    break;
   case 42:
    ___gmpn_toom8_sqr($pp, $9, $11, $144);
    $148 = $pp + ($4 << 2) | 0;
    ___gmpn_toom8_sqr($148, $7, $11, $144);
    label = 43;
    break;
   case 43:
    $150 = $pp + ($4 << 2) | 0;
    ___gmpn_toom_couple_handling($150, $29, $pp, 0, $3, 0, 0);
    $151 = ___gmpn_toom_eval_pm2exp($7, $9, 7, $ap, $3, $5, 2, $pp) | 0;
    if ($12) {
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    $153 = $3 * 12 & -1;
    $_sum575 = $153 + 4 | 0;
    $154 = $scratch + ($_sum575 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $9, $11, $154);
    ___gmpn_toom2_sqr($9, $7, $11, $154);
    label = 50;
    break;
   case 45:
    $156 = ($11 | 0) > 399;
    if ($156) {
      label = 47;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    $158 = $3 * 12 & -1;
    $_sum581 = $158 + 4 | 0;
    $159 = $scratch + ($_sum581 << 2) | 0;
    ___gmpn_toom3_sqr($pp, $9, $11, $159);
    ___gmpn_toom3_sqr($9, $7, $11, $159);
    label = 50;
    break;
   case 47:
    $161 = ($11 | 0) > 449;
    $162 = $3 * 12 & -1;
    $_sum583 = $162 + 4 | 0;
    $163 = $scratch + ($_sum583 << 2) | 0;
    if ($161) {
      label = 49;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    ___gmpn_toom6_sqr($pp, $9, $11, $163);
    ___gmpn_toom6_sqr($9, $7, $11, $163);
    label = 50;
    break;
   case 49:
    ___gmpn_toom8_sqr($pp, $9, $11, $163);
    ___gmpn_toom8_sqr($9, $7, $11, $163);
    label = 50;
    break;
   case 50:
    ___gmpn_toom_couple_handling($9, $29, $pp, 0, $3, 2, 4);
    $167 = ($3 | 0) > 119;
    if ($167) {
      label = 52;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    $169 = $3 * 12 & -1;
    $_sum576 = $169 + 4 | 0;
    $170 = $scratch + ($_sum576 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $ap, $3, $170);
    label = 57;
    break;
   case 52:
    $172 = ($3 | 0) > 399;
    if ($172) {
      label = 54;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    $174 = $3 * 12 & -1;
    $_sum578 = $174 + 4 | 0;
    $175 = $scratch + ($_sum578 << 2) | 0;
    ___gmpn_toom3_sqr($pp, $ap, $3, $175);
    label = 57;
    break;
   case 54:
    $177 = ($3 | 0) > 449;
    $178 = $3 * 12 & -1;
    $_sum580 = $178 + 4 | 0;
    $179 = $scratch + ($_sum580 << 2) | 0;
    if ($177) {
      label = 56;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    ___gmpn_toom6_sqr($pp, $ap, $3, $179);
    label = 57;
    break;
   case 56:
    ___gmpn_toom8_sqr($pp, $ap, $3, $179);
    label = 57;
    break;
   case 57:
    $183 = $5 << 1;
    $184 = $3 * 12 & -1;
    $_sum577 = $184 + 4 | 0;
    $185 = $scratch + ($_sum577 << 2) | 0;
    ___gmpn_toom_interpolate_16pts($pp, $108, $82, $56, $scratch, $3, $183, 0, $185);
    return;
  }
}
function ___gmpn_toom_couple_handling($pp, $n, $np, $nsign, $off, $ps, $ns) {
  $pp = $pp | 0;
  $n = $n | 0;
  $np = $np | 0;
  $nsign = $nsign | 0;
  $off = $off | 0;
  $ps = $ps | 0;
  $ns = $ns | 0;
  var $1 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $_sum = 0, $22 = 0, $23 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($nsign | 0) == 0;
    if ($1) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = ___gmpn_sub_n($np, $pp, $np, $n) | 0;
    $4 = ___gmpn_rshift($np, $np, $n, 1) | 0;
    label = 4;
    break;
   case 3:
    $6 = ___gmpn_add_n($np, $pp, $np, $n) | 0;
    $7 = ___gmpn_rshift($np, $np, $n, 1) | 0;
    label = 4;
    break;
   case 4:
    $9 = ___gmpn_sub_n($pp, $pp, $np, $n) | 0;
    $10 = ($ps | 0) > 0;
    if ($10) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $12 = ___gmpn_rshift($pp, $pp, $n, $ps) | 0;
    label = 6;
    break;
   case 6:
    $14 = ($ns | 0) > 0;
    if ($14) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $16 = ___gmpn_rshift($np, $np, $n, $ns) | 0;
    label = 8;
    break;
   case 8:
    $18 = $pp + ($off << 2) | 0;
    $19 = $n - $off | 0;
    $20 = ___gmpn_add_n($18, $18, $np, $19) | 0;
    $21 = $pp + ($n << 2) | 0;
    HEAP32[$21 >> 2] = $20;
    $_sum = $n - $off | 0;
    $22 = $np + ($_sum << 2) | 0;
    $23 = ___gmpn_add_1($21, $22, $off, $20) | 0;
    return;
  }
}
function _mpn_zero_p313($ap, $n) {
  $ap = $ap | 0;
  $n = $n | 0;
  var $i_0_in = 0, $i_0 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $i_0_in = $n;
    label = 2;
    break;
   case 2:
    $i_0 = $i_0_in - 1 | 0;
    $2 = ($i_0_in | 0) > 0;
    if ($2) {
      label = 3;
      break;
    } else {
      $_0 = 1;
      label = 4;
      break;
    }
   case 3:
    $4 = $ap + ($i_0 << 2) | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($5 | 0) == 0;
    if ($6) {
      $i_0_in = $i_0;
      label = 2;
      break;
    } else {
      $_0 = 0;
      label = 4;
      break;
    }
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_toom2_sqr($pp, $ap, $an, $scratch) {
  $pp = $pp | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $scevgep = 0, $scevgep111 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $_sum = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $uadd$0 = 0, $uadd$1 = 0, $60 = 0, $61 = 0, $__p_0 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $uadd105$0 = 0, $uadd105$1 = 0, $71 = 0, $72 = 0, $__p2_0 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $__p4_0 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $an >> 1;
    $2 = $an - $1 | 0;
    $3 = ($1 | 0) == ($2 | 0);
    if ($3) {
      label = 2;
      break;
    } else {
      label = 5;
      break;
    }
   case 2:
    $5 = $ap + ($2 << 2) | 0;
    $6 = ___gmpn_cmp($ap, $5, $2) | 0;
    $7 = ($6 | 0) < 0;
    if ($7) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $9 = ___gmpn_sub_n($pp, $5, $ap, $2) | 0;
    label = 10;
    break;
   case 4:
    $11 = ___gmpn_sub_n($pp, $ap, $5, $2) | 0;
    label = 10;
    break;
   case 5:
    $13 = $ap + ($1 << 2) | 0;
    $14 = $2 - $1 | 0;
    $15 = _mpn_zero_p313($13, $14) | 0;
    $16 = ($15 | 0) == 0;
    if ($16) {
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $18 = $ap + ($2 << 2) | 0;
    $19 = ___gmpn_cmp($ap, $18, $1) | 0;
    $20 = ($19 | 0) < 0;
    if ($20) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $22 = ___gmpn_sub_n($pp, $18, $ap, $1) | 0;
    if ($3) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $24 = $ap + ($2 << 2) | 0;
    $25 = ___gmpn_sub($pp, $ap, $2, $24, $1) | 0;
    label = 10;
    break;
   case 9:
    $scevgep = $pp + ($1 << 2) | 0;
    $scevgep111 = $scevgep;
    $26 = $1 << 1;
    $27 = $an - $26 | 0;
    $28 = $27 << 2;
    _memset($scevgep111 | 0, 0, $28 | 0);
    label = 10;
    break;
   case 10:
    $30 = ($2 | 0) > 49;
    if ($30) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    ___gmpn_sqr_basecase($scratch, $pp, $2);
    label = 13;
    break;
   case 12:
    $33 = $2 << 1;
    $34 = $scratch + ($33 << 2) | 0;
    ___gmpn_toom2_sqr($scratch, $pp, $2, $34);
    label = 13;
    break;
   case 13:
    $36 = ($1 | 0) > 49;
    $37 = $2 << 1;
    $38 = $pp + ($37 << 2) | 0;
    $39 = $ap + ($2 << 2) | 0;
    if ($36) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    ___gmpn_sqr_basecase($38, $39, $1);
    label = 16;
    break;
   case 15:
    $42 = $scratch + ($37 << 2) | 0;
    ___gmpn_toom2_sqr($38, $39, $1, $42);
    label = 16;
    break;
   case 16:
    if ($30) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    ___gmpn_sqr_basecase($pp, $ap, $2);
    label = 19;
    break;
   case 18:
    $46 = $scratch + ($37 << 2) | 0;
    ___gmpn_toom2_sqr($pp, $ap, $2, $46);
    label = 19;
    break;
   case 19:
    $48 = $pp + ($2 << 2) | 0;
    $49 = ___gmpn_add_n($38, $48, $38, $2) | 0;
    $50 = ___gmpn_add_n($48, $38, $pp, $2) | 0;
    $51 = $50 + $49 | 0;
    $_sum = $37 + $2 | 0;
    $52 = $pp + ($_sum << 2) | 0;
    $53 = $1 << 1;
    $54 = $53 - $2 | 0;
    $55 = ___gmpn_add($38, $38, $2, $52, $54) | 0;
    $56 = $55 + $49 | 0;
    $57 = ___gmpn_sub_n($48, $48, $scratch, $37) | 0;
    $58 = $56 - $57 | 0;
    $59 = HEAP32[$38 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($59 | 0, $51 | 0) | 0;
    $uadd$1 = tempRet0;
    $60 = $uadd$0;
    HEAP32[$38 >> 2] = $60;
    $61 = $uadd$1;
    if ($61) {
      $__p_0 = $38;
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    $62 = $__p_0 + 4 | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    $64 = $63 + 1 | 0;
    HEAP32[$62 >> 2] = $64;
    $65 = ($64 | 0) == 0;
    if ($65) {
      $__p_0 = $62;
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $66 = $58 >>> 0 < 3;
    $67 = $2 * 3 & -1;
    $68 = $pp + ($67 << 2) | 0;
    if ($66) {
      label = 22;
      break;
    } else {
      $__p4_0 = $68;
      label = 24;
      break;
    }
   case 22:
    $70 = HEAP32[$68 >> 2] | 0;
    $uadd105$0 = _llvm_uadd_with_overflow_i32($70 | 0, $58 | 0) | 0;
    $uadd105$1 = tempRet0;
    $71 = $uadd105$0;
    HEAP32[$68 >> 2] = $71;
    $72 = $uadd105$1;
    if ($72) {
      $__p2_0 = $68;
      label = 23;
      break;
    } else {
      label = 25;
      break;
    }
   case 23:
    $73 = $__p2_0 + 4 | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    $75 = $74 + 1 | 0;
    HEAP32[$73 >> 2] = $75;
    $76 = ($75 | 0) == 0;
    if ($76) {
      $__p2_0 = $73;
      label = 23;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    $77 = $__p4_0 + 4 | 0;
    $78 = HEAP32[$__p4_0 >> 2] | 0;
    $79 = $78 - 1 | 0;
    HEAP32[$__p4_0 >> 2] = $79;
    $80 = ($78 | 0) == 0;
    if ($80) {
      $__p4_0 = $77;
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    return;
  }
}
function ___gmpn_toom3_sqr($pp, $ap, $an, $scratch) {
  $pp = $pp | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_sum = 0, $6 = 0, $_sum139 = 0, $7 = 0, $_sum140 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $_sum141 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $_sum159 = 0, $21 = 0, $23 = 0, $24 = 0, $_sum142 = 0, $25 = 0, $27 = 0, $28 = 0, $_sum157 = 0, $30 = 0, $_sum158 = 0, $31 = 0, $32 = 0, $33 = 0, $cy_0 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $_sum143 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $_sum156 = 0, $48 = 0, $_sum144145 = 0, $50 = 0, $_sum153154162 = 0, $52 = 0, $53 = 0, $_sum155163 = 0, $54 = 0, $_sum153154 = 0, $56 = 0, $57 = 0, $_sum155 = 0, $58 = 0, $60 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $_sum152 = 0, $67 = 0, $71 = 0, $72 = 0, $_sum146147 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $79 = 0, $80 = 0, $_sum151 = 0, $81 = 0, $85 = 0, $88 = 0, $89 = 0, $_sum150 = 0, $90 = 0, $_sum148149 = 0, $94 = 0, $95 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $an + 2 | 0;
    $2 = ($1 >>> 0) / 3 >>> 0;
    $3 = $2 << 1;
    $4 = $an - $3 | 0;
    $5 = $2 << 2;
    $_sum = $5 + 4 | 0;
    $6 = $scratch + ($_sum << 2) | 0;
    $_sum139 = $3 + 2 | 0;
    $7 = $scratch + ($_sum139 << 2) | 0;
    $_sum140 = $2 + 1 | 0;
    $8 = $pp + ($_sum140 << 2) | 0;
    $9 = $ap + ($3 << 2) | 0;
    $10 = ___gmpn_add($scratch, $ap, $2, $9, $4) | 0;
    $11 = $ap + ($2 << 2) | 0;
    $12 = ___gmpn_add_n($6, $scratch, $11, $2) | 0;
    $13 = $12 + $10 | 0;
    $_sum141 = $_sum + $2 | 0;
    $14 = $scratch + ($_sum141 << 2) | 0;
    HEAP32[$14 >> 2] = $13;
    $15 = ($10 | 0) == 0;
    if ($15) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $17 = ___gmpn_cmp($scratch, $11, $2) | 0;
    $18 = ($17 | 0) < 0;
    if ($18) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $20 = ___gmpn_sub_n($7, $11, $scratch, $2) | 0;
    $_sum159 = $_sum139 + $2 | 0;
    $21 = $scratch + ($_sum159 << 2) | 0;
    HEAP32[$21 >> 2] = 0;
    label = 5;
    break;
   case 4:
    $23 = ___gmpn_sub_n($7, $scratch, $11, $2) | 0;
    $24 = $10 - $23 | 0;
    $_sum142 = $_sum139 + $2 | 0;
    $25 = $scratch + ($_sum142 << 2) | 0;
    HEAP32[$25 >> 2] = $24;
    label = 5;
    break;
   case 5:
    $27 = ___gmpn_add_n($8, $9, $6, $4) | 0;
    $28 = ($4 | 0) == ($2 | 0);
    if ($28) {
      $cy_0 = $27;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $_sum157 = $4 + $_sum140 | 0;
    $30 = $pp + ($_sum157 << 2) | 0;
    $_sum158 = $_sum + $4 | 0;
    $31 = $scratch + ($_sum158 << 2) | 0;
    $32 = $2 - $4 | 0;
    $33 = ___gmpn_add_1($30, $31, $32, $27) | 0;
    $cy_0 = $33;
    label = 7;
    break;
   case 7:
    $35 = HEAP32[$14 >> 2] | 0;
    $36 = $35 + $cy_0 | 0;
    $37 = $36 << 1;
    $38 = ___gmpn_lshift($8, $8, $2, 1) | 0;
    $39 = $37 + $38 | 0;
    $40 = ___gmpn_sub_n($8, $8, $ap, $2) | 0;
    $41 = $39 - $40 | 0;
    $_sum143 = $_sum140 + $2 | 0;
    $42 = $pp + ($_sum143 << 2) | 0;
    HEAP32[$42 >> 2] = $41;
    $43 = $2 + 1 | 0;
    $44 = ($43 | 0) > 49;
    if ($44) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $46 = ($43 | 0) > 119;
    $47 = $2 * 5 & -1;
    $_sum156 = $47 + 5 | 0;
    $48 = $scratch + ($_sum156 << 2) | 0;
    if ($46) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    ___gmpn_sqr_basecase($scratch, $7, $43);
    $_sum144145 = $3 | 1;
    $50 = $scratch + ($_sum144145 << 2) | 0;
    ___gmpn_sqr_basecase($50, $8, $43);
    label = 12;
    break;
   case 10:
    ___gmpn_toom2_sqr($scratch, $7, $43, $48);
    $_sum153154162 = $3 | 1;
    $52 = $scratch + ($_sum153154162 << 2) | 0;
    $53 = $2 * 5 & -1;
    $_sum155163 = $53 + 5 | 0;
    $54 = $scratch + ($_sum155163 << 2) | 0;
    ___gmpn_toom2_sqr($52, $8, $43, $54);
    label = 12;
    break;
   case 11:
    ___gmpn_toom3_sqr($scratch, $7, $43, $48);
    $_sum153154 = $3 | 1;
    $56 = $scratch + ($_sum153154 << 2) | 0;
    $57 = $2 * 5 & -1;
    $_sum155 = $57 + 5 | 0;
    $58 = $scratch + ($_sum155 << 2) | 0;
    ___gmpn_toom3_sqr($56, $8, $43, $58);
    label = 12;
    break;
   case 12:
    $60 = ($4 | 0) > 49;
    if ($60) {
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $62 = $pp + ($5 << 2) | 0;
    ___gmpn_sqr_basecase($62, $9, $4);
    label = 17;
    break;
   case 14:
    $64 = ($4 | 0) > 119;
    $65 = $pp + ($5 << 2) | 0;
    $66 = $2 * 5 & -1;
    $_sum152 = $66 + 5 | 0;
    $67 = $scratch + ($_sum152 << 2) | 0;
    if ($64) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    ___gmpn_toom2_sqr($65, $9, $4, $67);
    label = 17;
    break;
   case 16:
    ___gmpn_toom3_sqr($65, $9, $4, $67);
    label = 17;
    break;
   case 17:
    $71 = $pp + ($5 << 2) | 0;
    $72 = HEAP32[$71 >> 2] | 0;
    $_sum146147 = $5 | 1;
    $73 = $pp + ($_sum146147 << 2) | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    if ($44) {
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $76 = $pp + ($3 << 2) | 0;
    ___gmpn_sqr_basecase($76, $6, $43);
    label = 22;
    break;
   case 19:
    $78 = ($43 | 0) > 119;
    $79 = $pp + ($3 << 2) | 0;
    $80 = $2 * 5 & -1;
    $_sum151 = $80 + 5 | 0;
    $81 = $scratch + ($_sum151 << 2) | 0;
    if ($78) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    ___gmpn_toom2_sqr($79, $6, $43, $81);
    label = 22;
    break;
   case 21:
    ___gmpn_toom3_sqr($79, $6, $43, $81);
    label = 22;
    break;
   case 22:
    HEAP32[$73 >> 2] = $74;
    $85 = $1 >>> 0 > 149;
    if ($85) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    ___gmpn_sqr_basecase($pp, $ap, $2);
    label = 27;
    break;
   case 24:
    $88 = $1 >>> 0 > 359;
    $89 = $2 * 5 & -1;
    $_sum150 = $89 + 5 | 0;
    $90 = $scratch + ($_sum150 << 2) | 0;
    if ($88) {
      label = 26;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    ___gmpn_toom2_sqr($pp, $ap, $2, $90);
    label = 27;
    break;
   case 26:
    ___gmpn_toom3_sqr($pp, $ap, $2, $90);
    label = 27;
    break;
   case 27:
    $_sum148149 = $3 | 1;
    $94 = $scratch + ($_sum148149 << 2) | 0;
    $95 = $4 << 1;
    ___gmpn_toom_interpolate_5pts($pp, $94, $scratch, $2, $95, 0, $72);
    return;
  }
}
function ___gmpn_toom_eval_dgr3_pm1($xp1, $xm1, $xp, $n, $x3n, $tp) {
  $xp1 = $xp1 | 0;
  $xm1 = $xm1 | 0;
  $xp = $xp | 0;
  $n = $n | 0;
  $x3n = $x3n | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $_lobit = 0, $14 = 0, $16 = 0, $18 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n << 1;
    $2 = $xp + ($1 << 2) | 0;
    $3 = ___gmpn_add_n($xp1, $xp, $2, $n) | 0;
    $4 = $xp1 + ($n << 2) | 0;
    HEAP32[$4 >> 2] = $3;
    $5 = $xp + ($n << 2) | 0;
    $6 = $n * 3 & -1;
    $7 = $xp + ($6 << 2) | 0;
    $8 = ___gmpn_add($tp, $5, $n, $7, $x3n) | 0;
    $9 = $tp + ($n << 2) | 0;
    HEAP32[$9 >> 2] = $8;
    $10 = $n + 1 | 0;
    $11 = ___gmpn_cmp($xp1, $tp, $10) | 0;
    $12 = ($11 | 0) < 0;
    $_lobit = $11 >> 31;
    if ($12) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $14 = ___gmpn_sub_n($xm1, $tp, $xp1, $10) | 0;
    label = 4;
    break;
   case 3:
    $16 = ___gmpn_sub_n($xm1, $xp1, $tp, $10) | 0;
    label = 4;
    break;
   case 4:
    $18 = ___gmpn_add_n($xp1, $xp1, $tp, $10) | 0;
    return $_lobit | 0;
  }
  return 0;
}
function ___gmpn_toom_eval_dgr3_pm2($xp2, $xm2, $xp, $n, $x3n, $tp) {
  $xp2 = $xp2 | 0;
  $xm2 = $xm2 | 0;
  $xp = $xp | 0;
  $n = $n | 0;
  $x3n = $x3n | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $_lobit = 0, $28 = 0, $30 = 0, $32 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n << 1;
    $2 = $xp + ($1 << 2) | 0;
    $3 = ___gmpn_lshift($tp, $2, $n, 2) | 0;
    $4 = ___gmpn_add_n($xp2, $tp, $xp, $n) | 0;
    $5 = $4 + $3 | 0;
    $6 = $xp2 + ($n << 2) | 0;
    HEAP32[$6 >> 2] = $5;
    $7 = $n * 3 & -1;
    $8 = $xp + ($7 << 2) | 0;
    $9 = ___gmpn_lshift($tp, $8, $x3n, 2) | 0;
    $10 = $tp + ($x3n << 2) | 0;
    HEAP32[$10 >> 2] = $9;
    $11 = ($x3n | 0) < ($n | 0);
    $12 = $xp + ($n << 2) | 0;
    if ($11) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $14 = $x3n + 1 | 0;
    $15 = ___gmpn_add($tp, $12, $n, $tp, $14) | 0;
    $16 = $tp + ($n << 2) | 0;
    HEAP32[$16 >> 2] = $15;
    label = 4;
    break;
   case 3:
    $18 = ___gmpn_add_n($tp, $12, $tp, $n) | 0;
    $19 = $tp + ($n << 2) | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $20 + $18 | 0;
    HEAP32[$19 >> 2] = $21;
    label = 4;
    break;
   case 4:
    $23 = $n + 1 | 0;
    $24 = ___gmpn_lshift($tp, $tp, $23, 1) | 0;
    $25 = ___gmpn_cmp($xp2, $tp, $23) | 0;
    $26 = ($25 | 0) < 0;
    $_lobit = $25 >> 31;
    if ($26) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $28 = ___gmpn_sub_n($xm2, $tp, $xp2, $23) | 0;
    label = 7;
    break;
   case 6:
    $30 = ___gmpn_sub_n($xm2, $xp2, $tp, $23) | 0;
    label = 7;
    break;
   case 7:
    $32 = ___gmpn_add_n($xp2, $xp2, $tp, $23) | 0;
    return $_lobit | 0;
  }
  return 0;
}
function ___gmpn_toom_eval_pm1($xp1, $xm1, $k, $xp, $n, $hn, $tp) {
  $xp1 = $xp1 | 0;
  $xm1 = $xm1 | 0;
  $k = $k | 0;
  $xp = $xp | 0;
  $n = $n | 0;
  $hn = $hn | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i_065 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $i_164 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $_lobit = 0, $39 = 0, $41 = 0, $43 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n << 1;
    $2 = $xp + ($1 << 2) | 0;
    $3 = ___gmpn_add_n($xp1, $xp, $2, $n) | 0;
    $4 = $xp1 + ($n << 2) | 0;
    HEAP32[$4 >> 2] = $3;
    $5 = $k >>> 0 > 4;
    if ($5) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $6 = $n + 1 | 0;
    $i_065 = 4;
    label = 3;
    break;
   case 3:
    $8 = Math_imul($i_065, $n);
    $9 = $xp + ($8 << 2) | 0;
    $10 = ___gmpn_add($xp1, $xp1, $6, $9, $n) | 0;
    $11 = $i_065 + 2 | 0;
    $12 = $11 >>> 0 < $k >>> 0;
    if ($12) {
      $i_065 = $11;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $13 = $xp + ($n << 2) | 0;
    $14 = $n * 3 & -1;
    $15 = $xp + ($14 << 2) | 0;
    $16 = ___gmpn_add_n($tp, $13, $15, $n) | 0;
    $17 = $tp + ($n << 2) | 0;
    HEAP32[$17 >> 2] = $16;
    $18 = $k >>> 0 > 5;
    if ($18) {
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $19 = $n + 1 | 0;
    $i_164 = 5;
    label = 6;
    break;
   case 6:
    $21 = Math_imul($i_164, $n);
    $22 = $xp + ($21 << 2) | 0;
    $23 = ___gmpn_add($tp, $tp, $19, $22, $n) | 0;
    $24 = $i_164 + 2 | 0;
    $25 = $24 >>> 0 < $k >>> 0;
    if ($25) {
      $i_164 = $24;
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $26 = $k & 1;
    $27 = ($26 | 0) == 0;
    $28 = $n + 1 | 0;
    $29 = Math_imul($n, $k);
    $30 = $xp + ($29 << 2) | 0;
    if ($27) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $32 = ___gmpn_add($tp, $tp, $28, $30, $hn) | 0;
    label = 10;
    break;
   case 9:
    $34 = ___gmpn_add($xp1, $xp1, $28, $30, $hn) | 0;
    label = 10;
    break;
   case 10:
    $36 = ___gmpn_cmp($xp1, $tp, $28) | 0;
    $37 = ($36 | 0) < 0;
    $_lobit = $36 >> 31;
    if ($37) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $39 = ___gmpn_sub_n($xm1, $tp, $xp1, $28) | 0;
    label = 13;
    break;
   case 12:
    $41 = ___gmpn_sub_n($xm1, $xp1, $tp, $28) | 0;
    label = 13;
    break;
   case 13:
    $43 = ___gmpn_add_n($xp1, $xp1, $tp, $28) | 0;
    return $_lobit | 0;
  }
  return 0;
}
function ___gmpn_toom_eval_pm2($xp2, $xm2, $k, $xp, $n, $hn, $tp) {
  $xp2 = $xp2 | 0;
  $xm2 = $xm2 | 0;
  $k = $k | 0;
  $xp = $xp | 0;
  $n = $n | 0;
  $hn = $hn | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $_sum = 0, $12 = 0, $13 = 0, $14 = 0, $cy_0 = 0, $16 = 0, $17 = 0, $cy_199 = 0, $i_098 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $cy_1_lcssa = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $cy_297 = 0, $i_196 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $cy_2_lcssa = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $55 = 0, $57 = 0, $58 = 0, $_lobit = 0, $60 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = Math_imul($n, $k);
    $2 = $xp + ($1 << 2) | 0;
    $3 = ___gmpn_lshift($xp2, $2, $hn, 2) | 0;
    $4 = $k - 2 | 0;
    $5 = Math_imul($4, $n);
    $6 = $xp + ($5 << 2) | 0;
    $7 = ___gmpn_add_n($xp2, $xp2, $6, $hn) | 0;
    $8 = $7 + $3 | 0;
    $9 = ($hn | 0) == ($n | 0);
    if ($9) {
      $cy_0 = $8;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $11 = $xp2 + ($hn << 2) | 0;
    $_sum = $5 + $hn | 0;
    $12 = $xp + ($_sum << 2) | 0;
    $13 = $n - $hn | 0;
    $14 = ___gmpn_add_1($11, $12, $13, $8) | 0;
    $cy_0 = $14;
    label = 3;
    break;
   case 3:
    $16 = $k - 4 | 0;
    $17 = ($16 | 0) > -1;
    if ($17) {
      $i_098 = $16;
      $cy_199 = $cy_0;
      label = 4;
      break;
    } else {
      $cy_1_lcssa = $cy_0;
      label = 5;
      break;
    }
   case 4:
    $18 = $cy_199 << 2;
    $19 = ___gmpn_lshift($xp2, $xp2, $n, 2) | 0;
    $20 = $19 + $18 | 0;
    $21 = Math_imul($i_098, $n);
    $22 = $xp + ($21 << 2) | 0;
    $23 = ___gmpn_add_n($xp2, $xp2, $22, $n) | 0;
    $24 = $20 + $23 | 0;
    $25 = $i_098 - 2 | 0;
    $26 = ($25 | 0) > -1;
    if ($26) {
      $i_098 = $25;
      $cy_199 = $24;
      label = 4;
      break;
    } else {
      $cy_1_lcssa = $24;
      label = 5;
      break;
    }
   case 5:
    $27 = $xp2 + ($n << 2) | 0;
    HEAP32[$27 >> 2] = $cy_1_lcssa;
    $28 = $k - 1 | 0;
    $29 = Math_imul($28, $n);
    $30 = $xp + ($29 << 2) | 0;
    $31 = ___gmpn_lshift($tp, $30, $n, 2) | 0;
    $32 = $k - 3 | 0;
    $33 = Math_imul($32, $n);
    $34 = $xp + ($33 << 2) | 0;
    $35 = ___gmpn_add_n($tp, $tp, $34, $n) | 0;
    $36 = $35 + $31 | 0;
    $37 = $k - 5 | 0;
    $38 = ($37 | 0) > -1;
    if ($38) {
      $i_196 = $37;
      $cy_297 = $36;
      label = 6;
      break;
    } else {
      $cy_2_lcssa = $36;
      label = 7;
      break;
    }
   case 6:
    $39 = $cy_297 << 2;
    $40 = ___gmpn_lshift($tp, $tp, $n, 2) | 0;
    $41 = $40 + $39 | 0;
    $42 = Math_imul($i_196, $n);
    $43 = $xp + ($42 << 2) | 0;
    $44 = ___gmpn_add_n($tp, $tp, $43, $n) | 0;
    $45 = $41 + $44 | 0;
    $46 = $i_196 - 2 | 0;
    $47 = ($46 | 0) > -1;
    if ($47) {
      $i_196 = $46;
      $cy_297 = $45;
      label = 6;
      break;
    } else {
      $cy_2_lcssa = $45;
      label = 7;
      break;
    }
   case 7:
    $48 = $tp + ($n << 2) | 0;
    HEAP32[$48 >> 2] = $cy_2_lcssa;
    $49 = $28 & 1;
    $50 = ($49 | 0) == 0;
    $51 = $n + 1 | 0;
    if ($50) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $53 = ___gmpn_lshift($tp, $tp, $51, 1) | 0;
    label = 10;
    break;
   case 9:
    $55 = ___gmpn_lshift($xp2, $xp2, $51, 1) | 0;
    label = 10;
    break;
   case 10:
    $57 = ___gmpn_cmp($xp2, $tp, $51) | 0;
    $58 = ($57 | 0) < 0;
    $_lobit = $57 >> 31;
    if ($58) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $60 = ___gmpn_sub_n($xm2, $tp, $xp2, $51) | 0;
    label = 13;
    break;
   case 12:
    $62 = ___gmpn_sub_n($xm2, $xp2, $tp, $51) | 0;
    label = 13;
    break;
   case 13:
    $64 = ___gmpn_add_n($xp2, $xp2, $tp, $51) | 0;
    $65 = $49 - 1 | 0;
    $66 = $_lobit ^ $65;
    return $66 | 0;
  }
  return 0;
}
function ___gmpn_toom_eval_pm2exp($xp2, $xm2, $k, $xp, $n, $hn, $shift, $tp) {
  $xp2 = $xp2 | 0;
  $xm2 = $xm2 | 0;
  $k = $k | 0;
  $xp = $xp | 0;
  $n = $n | 0;
  $hn = $hn | 0;
  $shift = $shift | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i_087 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $i_186 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $51 = 0, $_lobit = 0, $53 = 0, $55 = 0, $57 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n << 1;
    $2 = $xp + ($1 << 2) | 0;
    $3 = $shift << 1;
    $4 = ___gmpn_lshift($tp, $2, $n, $3) | 0;
    $5 = $xp2 + ($n << 2) | 0;
    HEAP32[$5 >> 2] = $4;
    $6 = ___gmpn_add_n($xp2, $xp, $tp, $n) | 0;
    $7 = HEAP32[$5 >> 2] | 0;
    $8 = $7 + $6 | 0;
    HEAP32[$5 >> 2] = $8;
    $9 = $k >>> 0 > 4;
    if ($9) {
      $i_087 = 4;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $10 = Math_imul($i_087, $n);
    $11 = $xp + ($10 << 2) | 0;
    $12 = Math_imul($i_087, $shift);
    $13 = ___gmpn_lshift($tp, $11, $n, $12) | 0;
    $14 = HEAP32[$5 >> 2] | 0;
    $15 = $14 + $13 | 0;
    HEAP32[$5 >> 2] = $15;
    $16 = ___gmpn_add_n($xp2, $xp2, $tp, $n) | 0;
    $17 = HEAP32[$5 >> 2] | 0;
    $18 = $17 + $16 | 0;
    HEAP32[$5 >> 2] = $18;
    $19 = $i_087 + 2 | 0;
    $20 = $19 >>> 0 < $k >>> 0;
    if ($20) {
      $i_087 = $19;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $21 = $xp + ($n << 2) | 0;
    $22 = ___gmpn_lshift($tp, $21, $n, $shift) | 0;
    $23 = $tp + ($n << 2) | 0;
    HEAP32[$23 >> 2] = $22;
    $24 = $k >>> 0 > 3;
    if ($24) {
      $i_186 = 3;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $25 = Math_imul($i_186, $n);
    $26 = $xp + ($25 << 2) | 0;
    $27 = Math_imul($i_186, $shift);
    $28 = ___gmpn_lshift($xm2, $26, $n, $27) | 0;
    $29 = HEAP32[$23 >> 2] | 0;
    $30 = $29 + $28 | 0;
    HEAP32[$23 >> 2] = $30;
    $31 = ___gmpn_add_n($tp, $tp, $xm2, $n) | 0;
    $32 = HEAP32[$23 >> 2] | 0;
    $33 = $32 + $31 | 0;
    HEAP32[$23 >> 2] = $33;
    $34 = $i_186 + 2 | 0;
    $35 = $34 >>> 0 < $k >>> 0;
    if ($35) {
      $i_186 = $34;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $36 = Math_imul($n, $k);
    $37 = $xp + ($36 << 2) | 0;
    $38 = Math_imul($shift, $k);
    $39 = ___gmpn_lshift($xm2, $37, $hn, $38) | 0;
    $40 = $xm2 + ($hn << 2) | 0;
    HEAP32[$40 >> 2] = $39;
    $41 = $k & 1;
    $42 = ($41 | 0) == 0;
    $43 = $n + 1 | 0;
    $44 = $hn + 1 | 0;
    if ($42) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $46 = ___gmpn_add($tp, $tp, $43, $xm2, $44) | 0;
    label = 8;
    break;
   case 7:
    $48 = ___gmpn_add($xp2, $xp2, $43, $xm2, $44) | 0;
    label = 8;
    break;
   case 8:
    $50 = ___gmpn_cmp($xp2, $tp, $43) | 0;
    $51 = ($50 | 0) < 0;
    $_lobit = $50 >> 31;
    if ($51) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $53 = ___gmpn_sub_n($xm2, $tp, $xp2, $43) | 0;
    label = 11;
    break;
   case 10:
    $55 = ___gmpn_sub_n($xm2, $xp2, $tp, $43) | 0;
    label = 11;
    break;
   case 11:
    $57 = ___gmpn_add_n($xp2, $xp2, $tp, $43) | 0;
    return $_lobit | 0;
  }
  return 0;
}
function ___gmpn_toom_eval_pm2rexp($rp, $rm, $q, $ap, $n, $t, $s, $ws) {
  $rp = $rp | 0;
  $rm = $rm | 0;
  $q = $q | 0;
  $ap = $ap | 0;
  $n = $n | 0;
  $t = $t | 0;
  $s = $s | 0;
  $ws = $ws | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $i_078 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $_lobit = 0, $44 = 0, $46 = 0, $48 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = Math_imul($s, $q);
    $2 = ___gmpn_lshift($rp, $ap, $n, $1) | 0;
    $3 = $rp + ($n << 2) | 0;
    HEAP32[$3 >> 2] = $2;
    $4 = $ap + ($n << 2) | 0;
    $5 = $q - 1 | 0;
    $6 = Math_imul($5, $s);
    $7 = ___gmpn_lshift($ws, $4, $n, $6) | 0;
    $8 = $ws + ($n << 2) | 0;
    HEAP32[$8 >> 2] = $7;
    $9 = $q & 1;
    $10 = ($9 | 0) == 0;
    $11 = $n + 1 | 0;
    $12 = Math_imul($n, $q);
    $13 = $ap + ($12 << 2) | 0;
    if ($10) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $15 = ___gmpn_add($ws, $ws, $11, $13, $t) | 0;
    $16 = Math_imul($5, $n);
    $17 = $ap + ($16 << 2) | 0;
    $18 = _DO_mpn_addlsh_n($rp, $17, $n, $s, $rm) | 0;
    $19 = HEAP32[$3 >> 2] | 0;
    $20 = $19 + $18 | 0;
    HEAP32[$3 >> 2] = $20;
    label = 4;
    break;
   case 3:
    $22 = ___gmpn_add($rp, $rp, $11, $13, $t) | 0;
    label = 4;
    break;
   case 4:
    $23 = $5 >>> 0 > 2;
    if ($23) {
      $i_078 = 2;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $24 = Math_imul($i_078, $n);
    $25 = $ap + ($24 << 2) | 0;
    $26 = $q - $i_078 | 0;
    $27 = Math_imul($26, $s);
    $28 = _DO_mpn_addlsh_n($rp, $25, $n, $27, $rm) | 0;
    $29 = HEAP32[$3 >> 2] | 0;
    $30 = $29 + $28 | 0;
    HEAP32[$3 >> 2] = $30;
    $31 = $i_078 | 1;
    $32 = Math_imul($31, $n);
    $33 = $ap + ($32 << 2) | 0;
    $34 = $q - $31 | 0;
    $35 = Math_imul($34, $s);
    $36 = _DO_mpn_addlsh_n($ws, $33, $n, $35, $rm) | 0;
    $37 = HEAP32[$8 >> 2] | 0;
    $38 = $37 + $36 | 0;
    HEAP32[$8 >> 2] = $38;
    $39 = $i_078 + 2 | 0;
    $40 = $39 >>> 0 < $5 >>> 0;
    if ($40) {
      $i_078 = $39;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $41 = ___gmpn_cmp($rp, $ws, $11) | 0;
    $42 = ($41 | 0) < 0;
    $_lobit = $41 >> 31;
    if ($42) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $44 = ___gmpn_sub_n($rm, $ws, $rp, $11) | 0;
    label = 9;
    break;
   case 8:
    $46 = ___gmpn_sub_n($rm, $rp, $ws, $11) | 0;
    label = 9;
    break;
   case 9:
    $48 = ___gmpn_add_n($rp, $rp, $ws, $11) | 0;
    return $_lobit | 0;
  }
  return 0;
}
function _DO_mpn_addlsh_n($dst, $src, $n, $s, $ws) {
  $dst = $dst | 0;
  $src = $src | 0;
  $n = $n | 0;
  $s = $s | 0;
  $ws = $ws | 0;
  var $1 = 0;
  $1 = ___gmpn_lshift($ws, $src, $n, $s) | 0;
  return (___gmpn_add_n($dst, $dst, $ws, $n) | 0) + $1 | 0;
}
function ___gmpn_toom_interpolate_5pts($c, $v2, $vm1, $k, $twor, $sa, $vinf0) {
  $c = $c | 0;
  $v2 = $v2 | 0;
  $vm1 = $vm1 | 0;
  $k = $k | 0;
  $twor = $twor | 0;
  $sa = $sa | 0;
  $vinf0 = $vinf0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $_sum = 0, $4 = 0, $_sum117 = 0, $5 = 0, $_sum118 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $_sum119 = 0, $26 = 0, $27 = 0, $uadd$0 = 0, $uadd$1 = 0, $28 = 0, $29 = 0, $__p_0 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $__p2_0 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $_sum122 = 0, $51 = 0, $52 = 0, $uadd123$0 = 0, $uadd123$1 = 0, $53 = 0, $54 = 0, $__p4_0 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $_sum120 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $__p6_0 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $__p8_0 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $uadd121$0 = 0, $uadd121$1 = 0, $82 = 0, $83 = 0, $__p10_0 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $k << 1;
    $2 = $1 | 1;
    $3 = $c + ($k << 2) | 0;
    $_sum = $k << 1;
    $4 = $c + ($_sum << 2) | 0;
    $_sum117 = $_sum + $k | 0;
    $5 = $c + ($_sum117 << 2) | 0;
    $_sum118 = $_sum117 + $k | 0;
    $6 = $c + ($_sum118 << 2) | 0;
    $7 = ($sa | 0) == 0;
    if ($7) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $9 = ___gmpn_add_n($v2, $v2, $vm1, $2) | 0;
    $10 = ___gmpn_bdiv_dbm1c($v2, $v2, $2, 1431655765, 0) | 0;
    $11 = ___gmpn_add_n($vm1, $4, $vm1, $2) | 0;
    $12 = ___gmpn_rshift($vm1, $vm1, $2, 1) | 0;
    label = 4;
    break;
   case 3:
    $14 = ___gmpn_sub_n($v2, $v2, $vm1, $2) | 0;
    $15 = ___gmpn_bdiv_dbm1c($v2, $v2, $2, 1431655765, 0) | 0;
    $16 = ___gmpn_sub_n($vm1, $4, $vm1, $2) | 0;
    $17 = ___gmpn_rshift($vm1, $vm1, $2, 1) | 0;
    label = 4;
    break;
   case 4:
    $19 = ___gmpn_sub_n($4, $4, $c, $1) | 0;
    $20 = HEAP32[$6 >> 2] | 0;
    $21 = $20 - $19 | 0;
    HEAP32[$6 >> 2] = $21;
    $22 = ___gmpn_sub_n($v2, $v2, $4, $2) | 0;
    $23 = ___gmpn_rshift($v2, $v2, $2, 1) | 0;
    $24 = ___gmpn_sub_n($4, $4, $vm1, $2) | 0;
    $25 = ___gmpn_add_n($3, $3, $vm1, $2) | 0;
    $_sum119 = $_sum117 + 1 | 0;
    $26 = $c + ($_sum119 << 2) | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($27 | 0, $25 | 0) | 0;
    $uadd$1 = tempRet0;
    $28 = $uadd$0;
    HEAP32[$26 >> 2] = $28;
    $29 = $uadd$1;
    if ($29) {
      $__p_0 = $26;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $30 = $__p_0 + 4 | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = $31 + 1 | 0;
    HEAP32[$30 >> 2] = $32;
    $33 = ($32 | 0) == 0;
    if ($33) {
      $__p_0 = $30;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $34 = HEAP32[$6 >> 2] | 0;
    HEAP32[$6 >> 2] = $vinf0;
    $35 = ___gmpn_lshift($vm1, $6, $twor, 1) | 0;
    $36 = ___gmpn_sub_n($v2, $v2, $vm1, $twor) | 0;
    $37 = $36 + $35 | 0;
    $38 = $v2 + ($twor << 2) | 0;
    $39 = HEAP32[$38 >> 2] | 0;
    $40 = $39 - $37 | 0;
    HEAP32[$38 >> 2] = $40;
    $41 = $39 >>> 0 < $37 >>> 0;
    if ($41) {
      $__p2_0 = $38;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $42 = $__p2_0 + 4 | 0;
    $43 = HEAP32[$42 >> 2] | 0;
    $44 = $43 - 1 | 0;
    HEAP32[$42 >> 2] = $44;
    $45 = ($43 | 0) == 0;
    if ($45) {
      $__p2_0 = $42;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $46 = $k + 1 | 0;
    $47 = ($46 | 0) < ($twor | 0);
    $48 = $v2 + ($k << 2) | 0;
    if ($47) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    $50 = ___gmpn_add_n($6, $6, $48, $46) | 0;
    $_sum122 = $_sum117 + $2 | 0;
    $51 = $c + ($_sum122 << 2) | 0;
    $52 = HEAP32[$51 >> 2] | 0;
    $uadd123$0 = _llvm_uadd_with_overflow_i32($52 | 0, $50 | 0) | 0;
    $uadd123$1 = tempRet0;
    $53 = $uadd123$0;
    HEAP32[$51 >> 2] = $53;
    $54 = $uadd123$1;
    if ($54) {
      $__p4_0 = $51;
      label = 10;
      break;
    } else {
      label = 12;
      break;
    }
   case 10:
    $55 = $__p4_0 + 4 | 0;
    $56 = HEAP32[$55 >> 2] | 0;
    $57 = $56 + 1 | 0;
    HEAP32[$55 >> 2] = $57;
    $58 = ($57 | 0) == 0;
    if ($58) {
      $__p4_0 = $55;
      label = 10;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $60 = ___gmpn_add_n($6, $6, $48, $twor) | 0;
    label = 12;
    break;
   case 12:
    $61 = ___gmpn_sub_n($4, $4, $6, $twor) | 0;
    $62 = HEAP32[$6 >> 2] | 0;
    HEAP32[$6 >> 2] = $34;
    $_sum120 = $_sum + $twor | 0;
    $63 = $c + ($_sum120 << 2) | 0;
    $64 = HEAP32[$63 >> 2] | 0;
    $65 = $64 - $61 | 0;
    HEAP32[$63 >> 2] = $65;
    $66 = $64 >>> 0 < $61 >>> 0;
    if ($66) {
      $__p6_0 = $63;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $67 = $__p6_0 + 4 | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    $69 = $68 - 1 | 0;
    HEAP32[$67 >> 2] = $69;
    $70 = ($68 | 0) == 0;
    if ($70) {
      $__p6_0 = $67;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $71 = ___gmpn_sub_n($3, $3, $v2, $k) | 0;
    $72 = HEAP32[$4 >> 2] | 0;
    $73 = $72 - $71 | 0;
    HEAP32[$4 >> 2] = $73;
    $74 = $72 >>> 0 < $71 >>> 0;
    if ($74) {
      $__p8_0 = $4;
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $75 = $__p8_0 + 4 | 0;
    $76 = HEAP32[$75 >> 2] | 0;
    $77 = $76 - 1 | 0;
    HEAP32[$75 >> 2] = $77;
    $78 = ($76 | 0) == 0;
    if ($78) {
      $__p8_0 = $75;
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $79 = ___gmpn_add_n($5, $5, $v2, $k) | 0;
    $80 = HEAP32[$6 >> 2] | 0;
    $81 = $80 + $79 | 0;
    $uadd121$0 = _llvm_uadd_with_overflow_i32($81 | 0, $62 | 0) | 0;
    $uadd121$1 = tempRet0;
    $82 = $uadd121$0;
    HEAP32[$6 >> 2] = $82;
    $83 = $uadd121$1;
    if ($83) {
      $__p10_0 = $6;
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $84 = $__p10_0 + 4 | 0;
    $85 = HEAP32[$84 >> 2] | 0;
    $86 = $85 + 1 | 0;
    HEAP32[$84 >> 2] = $86;
    $87 = ($86 | 0) == 0;
    if ($87) {
      $__p10_0 = $84;
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    return;
  }
}
function ___gmpn_toom_interpolate_6pts($pp, $n, $flags, $w4, $w2, $w1, $w0n) {
  $pp = $pp | 0;
  $n = $n | 0;
  $flags = $flags | 0;
  $w4 = $w4 | 0;
  $w2 = $w2 | 0;
  $w1 = $w1 | 0;
  $w0n = $w0n | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $_sum = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $_sum217 = 0, $41 = 0, $42 = 0, $uadd$0 = 0, $uadd$1 = 0, $43 = 0, $44 = 0, $__p_0 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $__p2_0 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $__p4_0 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $uadd218$0 = 0, $uadd218$1 = 0, $82 = 0, $83 = 0, $__p6_0 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $91 = 0, $92 = 0, $94 = 0, $cy6_0 = 0, $96 = 0, $97 = 0, $98 = 0, $_sum219 = 0, $99 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $106 = 0, $uadd225$0 = 0, $uadd225$1 = 0, $107 = 0, $108 = 0, $__p8_0 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $115 = 0, $116 = 0, $__p10_0 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $_sum222 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $__p12_0 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $_sum223 = 0, $129 = 0, $130 = 0, $uadd224$0 = 0, $uadd224$1 = 0, $131 = 0, $132 = 0, $__p14_0 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $138 = 0, $uadd220$0 = 0, $uadd220$1 = 0, $139 = 0, $140 = 0, $__p16_0 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $_sum221 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $__p18_0 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $flags & 2;
    $2 = ($1 | 0) == 0;
    $3 = $n << 1;
    $4 = $3 | 1;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $6 = ___gmpn_add_n($w2, $w1, $w2, $4) | 0;
    label = 4;
    break;
   case 3:
    $8 = ___gmpn_sub_n($w2, $w1, $w2, $4) | 0;
    label = 4;
    break;
   case 4:
    $10 = ___gmpn_rshift($w2, $w2, $4, 2) | 0;
    $11 = ___gmpn_sub_n($w1, $w1, $pp, $3) | 0;
    $12 = $w1 + ($3 << 2) | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13 - $11 | 0;
    HEAP32[$12 >> 2] = $14;
    $15 = ___gmpn_rshift($w1, $w1, $4, 1) | 0;
    $16 = ___gmpn_sub_n($w1, $w1, $w2, $4) | 0;
    $17 = ___gmpn_rshift($w1, $w1, $4, 1) | 0;
    $18 = $flags & 1;
    $19 = ($18 | 0) == 0;
    $20 = $pp + ($3 << 2) | 0;
    if ($19) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $22 = ___gmpn_add_n($w4, $20, $w4, $4) | 0;
    $23 = ___gmpn_rshift($w4, $w4, $4, 1) | 0;
    label = 7;
    break;
   case 6:
    $25 = ___gmpn_sub_n($w4, $20, $w4, $4) | 0;
    $26 = ___gmpn_rshift($w4, $w4, $4, 1) | 0;
    label = 7;
    break;
   case 7:
    $28 = ___gmpn_sub_n($w2, $w2, $w4, $4) | 0;
    $29 = ___gmpn_bdiv_dbm1c($w2, $w2, $4, 1431655765, 0) | 0;
    $30 = ___gmpn_sub_n($20, $20, $w4, $4) | 0;
    $31 = ___gmpn_sub_n($20, $20, $pp, $3) | 0;
    $_sum = $n << 2;
    $32 = $pp + ($_sum << 2) | 0;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = $33 - $31 | 0;
    HEAP32[$32 >> 2] = $34;
    $35 = ___gmpn_sub_n($w1, $w1, $20, $4) | 0;
    $36 = ___gmpn_bdiv_dbm1c($w1, $w1, $4, 1431655765, 0) | 0;
    $37 = $pp + ($n << 2) | 0;
    $38 = ___gmpn_add_n($37, $37, $w4, $4) | 0;
    $39 = $n * 3 & -1;
    $40 = $pp + ($39 << 2) | 0;
    $_sum217 = $39 + 1 | 0;
    $41 = $pp + ($_sum217 << 2) | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($42 | 0, $38 | 0) | 0;
    $uadd$1 = tempRet0;
    $43 = $uadd$0;
    HEAP32[$41 >> 2] = $43;
    $44 = $uadd$1;
    if ($44) {
      $__p_0 = $41;
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $45 = $__p_0 + 4 | 0;
    $46 = HEAP32[$45 >> 2] | 0;
    $47 = $46 + 1 | 0;
    HEAP32[$45 >> 2] = $47;
    $48 = ($47 | 0) == 0;
    if ($48) {
      $__p_0 = $45;
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $49 = $n * 5 & -1;
    $50 = $pp + ($49 << 2) | 0;
    $51 = ___gmpn_lshift($w4, $50, $w0n, 2) | 0;
    $52 = ___gmpn_sub_n($w2, $w2, $w4, $w0n) | 0;
    $53 = $52 + $51 | 0;
    $54 = $w2 + ($w0n << 2) | 0;
    $55 = HEAP32[$54 >> 2] | 0;
    $56 = $55 - $53 | 0;
    HEAP32[$54 >> 2] = $56;
    $57 = $55 >>> 0 < $53 >>> 0;
    if ($57) {
      $__p2_0 = $54;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $58 = $__p2_0 + 4 | 0;
    $59 = HEAP32[$58 >> 2] | 0;
    $60 = $59 - 1 | 0;
    HEAP32[$58 >> 2] = $60;
    $61 = ($59 | 0) == 0;
    if ($61) {
      $__p2_0 = $58;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $62 = ___gmpn_sub_n($37, $37, $w2, $n) | 0;
    $63 = HEAP32[$20 >> 2] | 0;
    $64 = $63 - $62 | 0;
    HEAP32[$20 >> 2] = $64;
    $65 = $63 >>> 0 < $62 >>> 0;
    if ($65) {
      $__p4_0 = $20;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $66 = $__p4_0 + 4 | 0;
    $67 = HEAP32[$66 >> 2] | 0;
    $68 = $67 - 1 | 0;
    HEAP32[$66 >> 2] = $68;
    $69 = ($67 | 0) == 0;
    if ($69) {
      $__p4_0 = $66;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $70 = HEAP32[$32 >> 2] | 0;
    $71 = ___gmpn_add_n($40, $40, $w2, $n) | 0;
    $72 = $71 + $70 | 0;
    $73 = $w2 + ($3 << 2) | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    $75 = $n << 2;
    $76 = $pp + ($75 << 2) | 0;
    $77 = $w2 + ($n << 2) | 0;
    $78 = ___gmpn_add_n($76, $w1, $77, $n) | 0;
    $79 = $78 + $74 | 0;
    $80 = $w1 + ($n << 2) | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    $uadd218$0 = _llvm_uadd_with_overflow_i32($81 | 0, $79 | 0) | 0;
    $uadd218$1 = tempRet0;
    $82 = $uadd218$0;
    HEAP32[$80 >> 2] = $82;
    $83 = $uadd218$1;
    if ($83) {
      $__p6_0 = $80;
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $84 = $__p6_0 + 4 | 0;
    $85 = HEAP32[$84 >> 2] | 0;
    $86 = $85 + 1 | 0;
    HEAP32[$84 >> 2] = $86;
    $87 = ($86 | 0) == 0;
    if ($87) {
      $__p6_0 = $84;
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $88 = ($w0n | 0) > ($n | 0);
    if ($88) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    $90 = HEAP32[$12 >> 2] | 0;
    $91 = ___gmpn_add_n($50, $50, $80, $n) | 0;
    $92 = $91 + $90 | 0;
    $cy6_0 = $92;
    label = 18;
    break;
   case 17:
    $94 = ___gmpn_add_n($50, $50, $80, $w0n) | 0;
    $cy6_0 = $94;
    label = 18;
    break;
   case 18:
    $96 = $w0n + $n | 0;
    $97 = ___gmpn_sub_n($20, $20, $76, $96) | 0;
    $98 = $49 - 1 | 0;
    $_sum219 = $98 + $w0n | 0;
    $99 = $pp + ($_sum219 << 2) | 0;
    $100 = HEAP32[$99 >> 2] | 0;
    $101 = $100 - 1 | 0;
    HEAP32[$99 >> 2] = 1;
    if ($88) {
      label = 19;
      break;
    } else {
      label = 28;
      break;
    }
   case 19:
    $103 = $72 >>> 0 > $cy6_0 >>> 0;
    $104 = HEAP32[$76 >> 2] | 0;
    if ($103) {
      label = 20;
      break;
    } else {
      label = 22;
      break;
    }
   case 20:
    $106 = $72 - $cy6_0 | 0;
    $uadd225$0 = _llvm_uadd_with_overflow_i32($104 | 0, $106 | 0) | 0;
    $uadd225$1 = tempRet0;
    $107 = $uadd225$0;
    HEAP32[$76 >> 2] = $107;
    $108 = $uadd225$1;
    if ($108) {
      $__p8_0 = $76;
      label = 21;
      break;
    } else {
      label = 24;
      break;
    }
   case 21:
    $109 = $__p8_0 + 4 | 0;
    $110 = HEAP32[$109 >> 2] | 0;
    $111 = $110 + 1 | 0;
    HEAP32[$109 >> 2] = $111;
    $112 = ($111 | 0) == 0;
    if ($112) {
      $__p8_0 = $109;
      label = 21;
      break;
    } else {
      label = 24;
      break;
    }
   case 22:
    $114 = $cy6_0 - $72 | 0;
    $115 = $104 - $114 | 0;
    HEAP32[$76 >> 2] = $115;
    $116 = $104 >>> 0 < $114 >>> 0;
    if ($116) {
      $__p10_0 = $76;
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    $117 = $__p10_0 + 4 | 0;
    $118 = HEAP32[$117 >> 2] | 0;
    $119 = $118 - 1 | 0;
    HEAP32[$117 >> 2] = $119;
    $120 = ($118 | 0) == 0;
    if ($120) {
      $__p10_0 = $117;
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $_sum222 = $39 + $w0n | 0;
    $121 = $pp + ($_sum222 << 2) | 0;
    $122 = HEAP32[$121 >> 2] | 0;
    $123 = $122 - $97 | 0;
    HEAP32[$121 >> 2] = $123;
    $124 = $122 >>> 0 < $97 >>> 0;
    if ($124) {
      $__p12_0 = $121;
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    $125 = $__p12_0 + 4 | 0;
    $126 = HEAP32[$125 >> 2] | 0;
    $127 = $126 - 1 | 0;
    HEAP32[$125 >> 2] = $127;
    $128 = ($126 | 0) == 0;
    if ($128) {
      $__p12_0 = $125;
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    $_sum223 = $49 + $n | 0;
    $129 = $pp + ($_sum223 << 2) | 0;
    $130 = HEAP32[$129 >> 2] | 0;
    $uadd224$0 = _llvm_uadd_with_overflow_i32($130 | 0, $cy6_0 | 0) | 0;
    $uadd224$1 = tempRet0;
    $131 = $uadd224$0;
    HEAP32[$129 >> 2] = $131;
    $132 = $uadd224$1;
    if ($132) {
      $__p14_0 = $129;
      label = 27;
      break;
    } else {
      label = 32;
      break;
    }
   case 27:
    $133 = $__p14_0 + 4 | 0;
    $134 = HEAP32[$133 >> 2] | 0;
    $135 = $134 + 1 | 0;
    HEAP32[$133 >> 2] = $135;
    $136 = ($135 | 0) == 0;
    if ($136) {
      $__p14_0 = $133;
      label = 27;
      break;
    } else {
      label = 32;
      break;
    }
   case 28:
    $138 = HEAP32[$76 >> 2] | 0;
    $uadd220$0 = _llvm_uadd_with_overflow_i32($138 | 0, $72 | 0) | 0;
    $uadd220$1 = tempRet0;
    $139 = $uadd220$0;
    HEAP32[$76 >> 2] = $139;
    $140 = $uadd220$1;
    if ($140) {
      $__p16_0 = $76;
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    $141 = $__p16_0 + 4 | 0;
    $142 = HEAP32[$141 >> 2] | 0;
    $143 = $142 + 1 | 0;
    HEAP32[$141 >> 2] = $143;
    $144 = ($143 | 0) == 0;
    if ($144) {
      $__p16_0 = $141;
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    $_sum221 = $39 + $w0n | 0;
    $145 = $pp + ($_sum221 << 2) | 0;
    $146 = HEAP32[$145 >> 2] | 0;
    $147 = $97 + $cy6_0 | 0;
    $148 = $146 - $147 | 0;
    HEAP32[$145 >> 2] = $148;
    $149 = $146 >>> 0 < $147 >>> 0;
    if ($149) {
      $__p18_0 = $145;
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    $150 = $__p18_0 + 4 | 0;
    $151 = HEAP32[$150 >> 2] | 0;
    $152 = $151 - 1 | 0;
    HEAP32[$150 >> 2] = $152;
    $153 = ($151 | 0) == 0;
    if ($153) {
      $__p18_0 = $150;
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $154 = HEAP32[$99 >> 2] | 0;
    $155 = $101 + $154 | 0;
    HEAP32[$99 >> 2] = $155;
    return;
  }
}
function ___gmpn_toom_interpolate_7pts($rp, $n, $flags, $w1, $w3, $w4, $w5, $w6n, $tp) {
  $rp = $rp | 0;
  $n = $n | 0;
  $flags = $flags | 0;
  $w1 = $w1 | 0;
  $w3 = $w3 | 0;
  $w4 = $w4 | 0;
  $w5 = $w5 | 0;
  $w6n = $w6n | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $_sum = 0, $_sum214 = 0, $51 = 0, $52 = 0, $uadd$0 = 0, $uadd$1 = 0, $53 = 0, $54 = 0, $__p_0 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $_sum215 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $__p2_0 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $__p4_0 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $__p6_0 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $110 = 0, $112 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n << 1;
    $2 = $1 | 1;
    $3 = ___gmpn_add_n($w5, $w5, $w4, $2) | 0;
    $4 = $flags & 1;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $7 = ___gmpn_add_n($w1, $w1, $w4, $2) | 0;
    $8 = ___gmpn_rshift($w1, $w1, $2, 1) | 0;
    label = 4;
    break;
   case 3:
    $10 = ___gmpn_sub_n($w1, $w4, $w1, $2) | 0;
    $11 = ___gmpn_rshift($w1, $w1, $2, 1) | 0;
    label = 4;
    break;
   case 4:
    $13 = ___gmpn_sub($w4, $w4, $2, $rp, $1) | 0;
    $14 = ___gmpn_sub_n($w4, $w4, $w1, $2) | 0;
    $15 = ___gmpn_rshift($w4, $w4, $2, 2) | 0;
    $16 = $n * 6 & -1;
    $17 = $rp + ($16 << 2) | 0;
    $18 = ___gmpn_lshift($tp, $17, $w6n, 4) | 0;
    $19 = $tp + ($w6n << 2) | 0;
    HEAP32[$19 >> 2] = $18;
    $20 = $w6n + 1 | 0;
    $21 = ___gmpn_sub($w4, $w4, $2, $tp, $20) | 0;
    $22 = $flags & 2;
    $23 = ($22 | 0) == 0;
    $24 = $rp + ($1 << 2) | 0;
    if ($23) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $26 = ___gmpn_add_n($w3, $w3, $24, $2) | 0;
    $27 = ___gmpn_rshift($w3, $w3, $2, 1) | 0;
    label = 7;
    break;
   case 6:
    $29 = ___gmpn_sub_n($w3, $24, $w3, $2) | 0;
    $30 = ___gmpn_rshift($w3, $w3, $2, 1) | 0;
    label = 7;
    break;
   case 7:
    $32 = ___gmpn_sub_n($24, $24, $w3, $2) | 0;
    $33 = ___gmpn_submul_1($w5, $24, $2, 65) | 0;
    $34 = ___gmpn_sub($24, $24, $2, $17, $w6n) | 0;
    $35 = ___gmpn_sub($24, $24, $2, $rp, $1) | 0;
    $36 = ___gmpn_addmul_1($w5, $24, $2, 45) | 0;
    $37 = ___gmpn_rshift($w5, $w5, $2, 1) | 0;
    $38 = ___gmpn_sub_n($w4, $w4, $24, $2) | 0;
    $39 = ___gmpn_bdiv_dbm1c($w4, $w4, $2, 1431655765, 0) | 0;
    $40 = ___gmpn_sub_n($24, $24, $w4, $2) | 0;
    $41 = ___gmpn_sub_n($w1, $w5, $w1, $2) | 0;
    $42 = ___gmpn_lshift($tp, $w3, $2, 3) | 0;
    $43 = ___gmpn_sub_n($w5, $w5, $tp, $2) | 0;
    ___gmpn_divexact_1($w5, $w5, $2, 9);
    $44 = ___gmpn_sub_n($w3, $w3, $w5, $2) | 0;
    $45 = ___gmpn_bdiv_dbm1c($w1, $w1, $2, 286331153, 0) | 0;
    $46 = ___gmpn_add_n($w1, $w1, $w5, $2) | 0;
    $47 = ___gmpn_rshift($w1, $w1, $2, 1) | 0;
    $48 = ___gmpn_sub_n($w5, $w5, $w1, $2) | 0;
    $49 = $rp + ($n << 2) | 0;
    $50 = ___gmpn_add_n($49, $49, $w1, $2) | 0;
    $_sum = $n + 1 | 0;
    $_sum214 = $_sum + $1 | 0;
    $51 = $rp + ($_sum214 << 2) | 0;
    $52 = HEAP32[$51 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($52 | 0, $50 | 0) | 0;
    $uadd$1 = tempRet0;
    $53 = $uadd$0;
    HEAP32[$51 >> 2] = $53;
    $54 = $uadd$1;
    if ($54) {
      $__p_0 = $51;
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $55 = $__p_0 + 4 | 0;
    $56 = HEAP32[$55 >> 2] | 0;
    $57 = $56 + 1 | 0;
    HEAP32[$55 >> 2] = $57;
    $58 = ($57 | 0) == 0;
    if ($58) {
      $__p_0 = $55;
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $59 = $n * 3 & -1;
    $60 = $rp + ($59 << 2) | 0;
    $61 = ___gmpn_add_n($60, $60, $w3, $n) | 0;
    $62 = $w3 + ($n << 2) | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    $_sum215 = $n << 2;
    $64 = $rp + ($_sum215 << 2) | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    $66 = $63 + $61 | 0;
    $67 = $66 + $65 | 0;
    HEAP32[$62 >> 2] = $67;
    $68 = HEAP32[$64 >> 2] | 0;
    $69 = $68 + $61 | 0;
    $70 = $67 >>> 0 < $69 >>> 0;
    if ($70) {
      $__p2_0 = $62;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $71 = $__p2_0 + 4 | 0;
    $72 = HEAP32[$71 >> 2] | 0;
    $73 = $72 + 1 | 0;
    HEAP32[$71 >> 2] = $73;
    $74 = ($73 | 0) == 0;
    if ($74) {
      $__p2_0 = $71;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $75 = $n << 2;
    $76 = $rp + ($75 << 2) | 0;
    $77 = ___gmpn_add_n($76, $62, $w4, $n) | 0;
    $78 = $w4 + ($n << 2) | 0;
    $79 = HEAP32[$78 >> 2] | 0;
    $80 = $w3 + ($1 << 2) | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    $82 = $79 + $77 | 0;
    $83 = $82 + $81 | 0;
    HEAP32[$78 >> 2] = $83;
    $84 = HEAP32[$80 >> 2] | 0;
    $85 = $84 + $77 | 0;
    $86 = $83 >>> 0 < $85 >>> 0;
    if ($86) {
      $__p4_0 = $78;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $87 = $__p4_0 + 4 | 0;
    $88 = HEAP32[$87 >> 2] | 0;
    $89 = $88 + 1 | 0;
    HEAP32[$87 >> 2] = $89;
    $90 = ($89 | 0) == 0;
    if ($90) {
      $__p4_0 = $87;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $91 = $n * 5 & -1;
    $92 = $rp + ($91 << 2) | 0;
    $93 = ___gmpn_add_n($92, $78, $w5, $n) | 0;
    $94 = $w5 + ($n << 2) | 0;
    $95 = HEAP32[$94 >> 2] | 0;
    $96 = $w4 + ($1 << 2) | 0;
    $97 = HEAP32[$96 >> 2] | 0;
    $98 = $95 + $93 | 0;
    $99 = $98 + $97 | 0;
    HEAP32[$94 >> 2] = $99;
    $100 = HEAP32[$96 >> 2] | 0;
    $101 = $100 + $93 | 0;
    $102 = $99 >>> 0 < $101 >>> 0;
    if ($102) {
      $__p6_0 = $94;
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $103 = $__p6_0 + 4 | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    $105 = $104 + 1 | 0;
    HEAP32[$103 >> 2] = $105;
    $106 = ($105 | 0) == 0;
    if ($106) {
      $__p6_0 = $103;
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $107 = $n + 1 | 0;
    $108 = ($107 | 0) < ($w6n | 0);
    if ($108) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    $110 = ___gmpn_add($17, $17, $w6n, $94, $107) | 0;
    label = 18;
    break;
   case 17:
    $112 = ___gmpn_add_n($17, $17, $94, $w6n) | 0;
    label = 18;
    break;
   case 18:
    return;
  }
}
function ___gmpn_toom_interpolate_8pts($pp, $n, $r3, $r7, $spt, $ws) {
  $pp = $pp | 0;
  $n = $n | 0;
  $r3 = $r3 | 0;
  $r7 = $r7 | 0;
  $spt = $spt | 0;
  $ws = $ws | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $__p_0 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $_sum = 0, $_sum211 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $__p2_0 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $__p4_0 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $_sum212 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $__p7_0 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $_sum213 = 0, $_sum214 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $__p9_0 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $_sum215 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $__p11_0 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $__p13_0 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $__p15_0 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $uadd$0 = 0, $uadd$1 = 0, $100 = 0, $101 = 0, $__p17_0 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $__p19_0 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $_sum216 = 0, $118 = 0, $119 = 0, $_sum217 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $_sum218 = 0, $126 = 0, $__p21_0 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $uadd219$0 = 0, $uadd219$1 = 0, $133 = 0, $134 = 0, $__p23_0 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $uadd220$0 = 0, $uadd220$1 = 0, $149 = 0, $150 = 0, $__p25_0 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $__p27_0 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n * 3 & -1;
    $2 = $pp + ($1 << 2) | 0;
    $3 = $n * 7 & -1;
    $4 = $pp + ($3 << 2) | 0;
    $5 = $r3 + ($n << 2) | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = HEAP32[$pp >> 2] | 0;
    $8 = $7 >>> 4;
    $9 = $6 - $8 | 0;
    HEAP32[$5 >> 2] = $9;
    $10 = HEAP32[$pp >> 2] | 0;
    $11 = $10 >>> 4;
    $12 = $6 >>> 0 < $11 >>> 0;
    if ($12) {
      $__p_0 = $5;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $13 = $__p_0 + 4 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14 - 1 | 0;
    HEAP32[$13 >> 2] = $15;
    $16 = ($14 | 0) == 0;
    if ($16) {
      $__p_0 = $13;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $17 = $pp + 4 | 0;
    $18 = $n << 1;
    $19 = $18 - 1 | 0;
    $20 = _DO_mpn_sublsh_n($5, $17, $19, 28, $ws) | 0;
    $_sum = $n - 1 | 0;
    $_sum211 = $_sum + $18 | 0;
    $21 = $r3 + ($_sum211 << 2) | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = $22 - $20 | 0;
    HEAP32[$21 >> 2] = $23;
    $24 = $22 >>> 0 < $20 >>> 0;
    if ($24) {
      $__p2_0 = $21;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $25 = $__p2_0 + 4 | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = $26 - 1 | 0;
    HEAP32[$25 >> 2] = $27;
    $28 = ($26 | 0) == 0;
    if ($28) {
      $__p2_0 = $25;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $29 = _DO_mpn_sublsh_n($r3, $4, $spt, 12, $ws) | 0;
    $30 = $r3 + ($spt << 2) | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = $31 - $29 | 0;
    HEAP32[$30 >> 2] = $32;
    $33 = $31 >>> 0 < $29 >>> 0;
    if ($33) {
      $__p4_0 = $30;
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $34 = $__p4_0 + 4 | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    $36 = $35 - 1 | 0;
    HEAP32[$34 >> 2] = $36;
    $37 = ($35 | 0) == 0;
    if ($37) {
      $__p4_0 = $34;
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $_sum212 = $1 + $n | 0;
    $38 = $pp + ($_sum212 << 2) | 0;
    $39 = HEAP32[$38 >> 2] | 0;
    $40 = HEAP32[$pp >> 2] | 0;
    $41 = $40 >>> 2;
    $42 = $39 - $41 | 0;
    HEAP32[$38 >> 2] = $42;
    $43 = HEAP32[$pp >> 2] | 0;
    $44 = $43 >>> 2;
    $45 = $39 >>> 0 < $44 >>> 0;
    if ($45) {
      $__p7_0 = $38;
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $46 = $__p7_0 + 4 | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    $48 = $47 - 1 | 0;
    HEAP32[$46 >> 2] = $48;
    $49 = ($47 | 0) == 0;
    if ($49) {
      $__p7_0 = $46;
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $50 = _DO_mpn_sublsh_n($38, $17, $19, 30, $ws) | 0;
    $_sum213 = $18 - 1 | 0;
    $_sum214 = $_sum213 + $_sum212 | 0;
    $51 = $pp + ($_sum214 << 2) | 0;
    $52 = HEAP32[$51 >> 2] | 0;
    $53 = $52 - $50 | 0;
    HEAP32[$51 >> 2] = $53;
    $54 = $52 >>> 0 < $50 >>> 0;
    if ($54) {
      $__p9_0 = $51;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $55 = $__p9_0 + 4 | 0;
    $56 = HEAP32[$55 >> 2] | 0;
    $57 = $56 - 1 | 0;
    HEAP32[$55 >> 2] = $57;
    $58 = ($56 | 0) == 0;
    if ($58) {
      $__p9_0 = $55;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $59 = _DO_mpn_sublsh_n($2, $4, $spt, 6, $ws) | 0;
    $_sum215 = $1 + $spt | 0;
    $60 = $pp + ($_sum215 << 2) | 0;
    $61 = HEAP32[$60 >> 2] | 0;
    $62 = $61 - $59 | 0;
    HEAP32[$60 >> 2] = $62;
    $63 = $61 >>> 0 < $59 >>> 0;
    if ($63) {
      $__p11_0 = $60;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $64 = $__p11_0 + 4 | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    $66 = $65 - 1 | 0;
    HEAP32[$64 >> 2] = $66;
    $67 = ($65 | 0) == 0;
    if ($67) {
      $__p11_0 = $64;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $68 = $r7 + ($n << 2) | 0;
    $69 = ___gmpn_sub_n($68, $68, $pp, $18) | 0;
    $70 = $r7 + ($1 << 2) | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    $72 = $71 - $69 | 0;
    HEAP32[$70 >> 2] = $72;
    $73 = ___gmpn_sub_n($r7, $r7, $4, $spt) | 0;
    $74 = $r7 + ($spt << 2) | 0;
    $75 = HEAP32[$74 >> 2] | 0;
    $76 = $75 - $73 | 0;
    HEAP32[$74 >> 2] = $76;
    $77 = $75 >>> 0 < $73 >>> 0;
    if ($77) {
      $__p13_0 = $74;
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $78 = $__p13_0 + 4 | 0;
    $79 = HEAP32[$78 >> 2] | 0;
    $80 = $79 - 1 | 0;
    HEAP32[$78 >> 2] = $80;
    $81 = ($79 | 0) == 0;
    if ($81) {
      $__p13_0 = $78;
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $82 = $1 + 1 | 0;
    $83 = ___gmpn_sub_n($r3, $r3, $2, $82) | 0;
    $84 = ___gmpn_rshift($r3, $r3, $82, 2) | 0;
    $85 = ___gmpn_sub_n($2, $2, $r7, $82) | 0;
    $86 = ___gmpn_sub_n($r3, $r3, $2, $82) | 0;
    ___gmpn_divexact_1($r3, $r3, $82, 45);
    $87 = ___gmpn_bdiv_dbm1c($2, $2, $82, 1431655765, 0) | 0;
    $88 = _DO_mpn_sublsh_n($2, $r3, $82, 2, $ws) | 0;
    $89 = $pp + ($n << 2) | 0;
    $90 = ___gmpn_add_n($89, $89, $r7, $n) | 0;
    $91 = ___gmpn_sub_n($89, $89, $2, $n) | 0;
    $92 = $90 - $91 | 0;
    $93 = ($92 | 0) < 0;
    if ($93) {
      $__p15_0 = $68;
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    $94 = $__p15_0 + 4 | 0;
    $95 = HEAP32[$__p15_0 >> 2] | 0;
    $96 = $95 - 1 | 0;
    HEAP32[$__p15_0 >> 2] = $96;
    $97 = ($95 | 0) == 0;
    if ($97) {
      $__p15_0 = $94;
      label = 16;
      break;
    } else {
      label = 19;
      break;
    }
   case 17:
    $99 = HEAP32[$68 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($99 | 0, $92 | 0) | 0;
    $uadd$1 = tempRet0;
    $100 = $uadd$0;
    HEAP32[$68 >> 2] = $100;
    $101 = $uadd$1;
    if ($101) {
      $__p17_0 = $68;
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    $102 = $__p17_0 + 4 | 0;
    $103 = HEAP32[$102 >> 2] | 0;
    $104 = $103 + 1 | 0;
    HEAP32[$102 >> 2] = $104;
    $105 = ($104 | 0) == 0;
    if ($105) {
      $__p17_0 = $102;
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $106 = $pp + ($18 << 2) | 0;
    $107 = ___gmpn_sub_n($106, $68, $38, $n) | 0;
    $108 = $r7 + ($18 << 2) | 0;
    $109 = HEAP32[$108 >> 2] | 0;
    $110 = $109 - $107 | 0;
    HEAP32[$108 >> 2] = $110;
    $111 = $109 >>> 0 < $107 >>> 0;
    if ($111) {
      $__p19_0 = $108;
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    $112 = $__p19_0 + 4 | 0;
    $113 = HEAP32[$112 >> 2] | 0;
    $114 = $113 - 1 | 0;
    HEAP32[$112 >> 2] = $114;
    $115 = ($113 | 0) == 0;
    if ($115) {
      $__p19_0 = $112;
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $116 = $n + 1 | 0;
    $117 = ___gmpn_add_n($2, $2, $108, $116) | 0;
    $_sum216 = $1 + $18 | 0;
    $118 = $pp + ($_sum216 << 2) | 0;
    $119 = ___gmpn_add_n($118, $118, $r3, $n) | 0;
    $_sum217 = $n * 6 & -1;
    $120 = $pp + ($_sum217 << 2) | 0;
    $121 = HEAP32[$120 >> 2] | 0;
    $122 = $121 + $119 | 0;
    HEAP32[$120 >> 2] = $122;
    $123 = ___gmpn_sub_n($2, $2, $118, $116) | 0;
    $124 = $117 - $123 | 0;
    $125 = ($124 | 0) < 0;
    $_sum218 = $_sum212 + 1 | 0;
    $126 = $pp + ($_sum218 << 2) | 0;
    if ($125) {
      $__p21_0 = $126;
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    $127 = $__p21_0 + 4 | 0;
    $128 = HEAP32[$__p21_0 >> 2] | 0;
    $129 = $128 - 1 | 0;
    HEAP32[$__p21_0 >> 2] = $129;
    $130 = ($128 | 0) == 0;
    if ($130) {
      $__p21_0 = $127;
      label = 22;
      break;
    } else {
      label = 25;
      break;
    }
   case 23:
    $132 = HEAP32[$126 >> 2] | 0;
    $uadd219$0 = _llvm_uadd_with_overflow_i32($132 | 0, $124 | 0) | 0;
    $uadd219$1 = tempRet0;
    $133 = $uadd219$0;
    HEAP32[$126 >> 2] = $133;
    $134 = $uadd219$1;
    if ($134) {
      $__p23_0 = $126;
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    $135 = $__p23_0 + 4 | 0;
    $136 = HEAP32[$135 >> 2] | 0;
    $137 = $136 + 1 | 0;
    HEAP32[$135 >> 2] = $137;
    $138 = ($137 | 0) == 0;
    if ($138) {
      $__p23_0 = $135;
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $139 = $n << 2;
    $140 = $pp + ($139 << 2) | 0;
    $141 = $18 | 1;
    $142 = ___gmpn_sub_n($140, $38, $5, $141) | 0;
    $143 = $n * 6 & -1;
    $144 = $pp + ($143 << 2) | 0;
    $145 = HEAP32[$144 >> 2] | 0;
    $146 = ___gmpn_add_1($144, $5, $n, $145) | 0;
    $147 = $r3 + ($18 << 2) | 0;
    $148 = HEAP32[$147 >> 2] | 0;
    $uadd220$0 = _llvm_uadd_with_overflow_i32($148 | 0, $146 | 0) | 0;
    $uadd220$1 = tempRet0;
    $149 = $uadd220$0;
    HEAP32[$147 >> 2] = $149;
    $150 = $uadd220$1;
    if ($150) {
      $__p25_0 = $147;
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    $151 = $__p25_0 + 4 | 0;
    $152 = HEAP32[$151 >> 2] | 0;
    $153 = $152 + 1 | 0;
    HEAP32[$151 >> 2] = $153;
    $154 = ($153 | 0) == 0;
    if ($154) {
      $__p25_0 = $151;
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $155 = ___gmpn_add_n($4, $4, $147, $n) | 0;
    $156 = ($spt | 0) == ($n | 0);
    if ($156) {
      label = 30;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $158 = $n << 3;
    $159 = $pp + ($158 << 2) | 0;
    $160 = HEAP32[$159 >> 2] | 0;
    $161 = $r3 + ($1 << 2) | 0;
    $162 = HEAP32[$161 >> 2] | 0;
    $163 = $160 + $155 | 0;
    $164 = $163 + $162 | 0;
    HEAP32[$159 >> 2] = $164;
    $165 = HEAP32[$161 >> 2] | 0;
    $166 = $165 + $155 | 0;
    $167 = $164 >>> 0 < $166 >>> 0;
    if ($167) {
      $__p27_0 = $159;
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    $168 = $__p27_0 + 4 | 0;
    $169 = HEAP32[$168 >> 2] | 0;
    $170 = $169 + 1 | 0;
    HEAP32[$168 >> 2] = $170;
    $171 = ($170 | 0) == 0;
    if ($171) {
      $__p27_0 = $168;
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    return;
  }
}
function _DO_mpn_sublsh_n($dst, $src, $n, $s, $ws) {
  $dst = $dst | 0;
  $src = $src | 0;
  $n = $n | 0;
  $s = $s | 0;
  $ws = $ws | 0;
  var $1 = 0;
  $1 = ___gmpn_lshift($ws, $src, $n, $s) | 0;
  return (___gmpn_sub_n($dst, $dst, $ws, $n) | 0) + $1 | 0;
}
function ___gmpn_toom_interpolate_12pts($pp, $r1, $r3, $r5, $n, $spt, $half, $wsi) {
  $pp = $pp | 0;
  $r1 = $r1 | 0;
  $r3 = $r3 | 0;
  $r5 = $r5 | 0;
  $n = $n | 0;
  $spt = $spt | 0;
  $half = $half | 0;
  $wsi = $wsi | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $__p_0 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $_sum392 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $__p2_0 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $__p4_0 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $_sum393 = 0, $38 = 0, $39 = 0, $40 = 0, $_sum394 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $__p6_0 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $__p8_0 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $__p11_0 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $_sum395 = 0, $_sum396 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $__p13_0 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $_sum = 0, $80 = 0, $81 = 0, $82 = 0, $_sum381 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $__p16_0 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $_sum382 = 0, $_sum383 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $__p18_0 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $_sum384 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $__p21_0 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $_sum385 = 0, $_sum386 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $__p23_0 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $uadd$0 = 0, $uadd$1 = 0, $172 = 0, $173 = 0, $__p26_0 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $uadd387$0 = 0, $uadd387$1 = 0, $183 = 0, $184 = 0, $__p28_0 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $uadd388$0 = 0, $uadd388$1 = 0, $197 = 0, $198 = 0, $__p30_0 = 0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $uadd389$0 = 0, $uadd389$1 = 0, $209 = 0, $210 = 0, $__p32_0 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $uadd390$0 = 0, $uadd390$1 = 0, $227 = 0, $228 = 0, $__p34_0 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $uadd391$0 = 0, $uadd391$1 = 0, $244 = 0, $245 = 0, $__p36_0 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n * 3 & -1;
    $2 = $1 + 1 | 0;
    $3 = ($half | 0) != 0;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 16;
      break;
    }
   case 2:
    $5 = $n * 11 & -1;
    $6 = $pp + ($5 << 2) | 0;
    $7 = ___gmpn_sub_n($r3, $r3, $6, $spt) | 0;
    $8 = $r3 + ($spt << 2) | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9 - $7 | 0;
    HEAP32[$8 >> 2] = $10;
    $11 = $9 >>> 0 < $7 >>> 0;
    if ($11) {
      $__p_0 = $8;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $12 = $__p_0 + 4 | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13 - 1 | 0;
    HEAP32[$12 >> 2] = $14;
    $15 = ($13 | 0) == 0;
    if ($15) {
      $__p_0 = $12;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $16 = $n * 7 & -1;
    $17 = $pp + ($16 << 2) | 0;
    $18 = _DO_mpn_sublsh_n340($17, $6, $spt, 10, $wsi) | 0;
    $_sum392 = $16 + $spt | 0;
    $19 = $pp + ($_sum392 << 2) | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $20 - $18 | 0;
    HEAP32[$19 >> 2] = $21;
    $22 = $20 >>> 0 < $18 >>> 0;
    if ($22) {
      $__p2_0 = $19;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $23 = $__p2_0 + 4 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $24 - 1 | 0;
    HEAP32[$23 >> 2] = $25;
    $26 = ($24 | 0) == 0;
    if ($26) {
      $__p2_0 = $23;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $27 = HEAP32[$r5 >> 2] | 0;
    $28 = HEAP32[$6 >> 2] | 0;
    $29 = $28 >>> 2;
    $30 = $27 - $29 | 0;
    HEAP32[$r5 >> 2] = $30;
    $31 = HEAP32[$6 >> 2] | 0;
    $32 = $31 >>> 2;
    $33 = $27 >>> 0 < $32 >>> 0;
    if ($33) {
      $__p4_0 = $r5;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $34 = $__p4_0 + 4 | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    $36 = $35 - 1 | 0;
    HEAP32[$34 >> 2] = $36;
    $37 = ($35 | 0) == 0;
    if ($37) {
      $__p4_0 = $34;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $_sum393 = $5 + 1 | 0;
    $38 = $pp + ($_sum393 << 2) | 0;
    $39 = $spt - 1 | 0;
    $40 = _DO_mpn_sublsh_n340($r5, $38, $39, 30, $wsi) | 0;
    $_sum394 = $spt - 1 | 0;
    $41 = $r5 + ($_sum394 << 2) | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    $43 = $42 - $40 | 0;
    HEAP32[$41 >> 2] = $43;
    $44 = $42 >>> 0 < $40 >>> 0;
    if ($44) {
      $__p6_0 = $41;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $45 = $__p6_0 + 4 | 0;
    $46 = HEAP32[$45 >> 2] | 0;
    $47 = $46 - 1 | 0;
    HEAP32[$45 >> 2] = $47;
    $48 = ($46 | 0) == 0;
    if ($48) {
      $__p6_0 = $45;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $49 = _DO_mpn_sublsh_n340($r1, $6, $spt, 20, $wsi) | 0;
    $50 = $r1 + ($spt << 2) | 0;
    $51 = HEAP32[$50 >> 2] | 0;
    $52 = $51 - $49 | 0;
    HEAP32[$50 >> 2] = $52;
    $53 = $51 >>> 0 < $49 >>> 0;
    if ($53) {
      $__p8_0 = $50;
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $54 = $__p8_0 + 4 | 0;
    $55 = HEAP32[$54 >> 2] | 0;
    $56 = $55 - 1 | 0;
    HEAP32[$54 >> 2] = $56;
    $57 = ($55 | 0) == 0;
    if ($57) {
      $__p8_0 = $54;
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $58 = $pp + ($1 << 2) | 0;
    $59 = HEAP32[$58 >> 2] | 0;
    $60 = HEAP32[$6 >> 2] | 0;
    $61 = $60 >>> 4;
    $62 = $59 - $61 | 0;
    HEAP32[$58 >> 2] = $62;
    $63 = HEAP32[$6 >> 2] | 0;
    $64 = $63 >>> 4;
    $65 = $59 >>> 0 < $64 >>> 0;
    if ($65) {
      $__p11_0 = $58;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $66 = $__p11_0 + 4 | 0;
    $67 = HEAP32[$66 >> 2] | 0;
    $68 = $67 - 1 | 0;
    HEAP32[$66 >> 2] = $68;
    $69 = ($67 | 0) == 0;
    if ($69) {
      $__p11_0 = $66;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $70 = _DO_mpn_sublsh_n340($58, $38, $39, 28, $wsi) | 0;
    $_sum395 = $spt - 1 | 0;
    $_sum396 = $_sum395 + $1 | 0;
    $71 = $pp + ($_sum396 << 2) | 0;
    $72 = HEAP32[$71 >> 2] | 0;
    $73 = $72 - $70 | 0;
    HEAP32[$71 >> 2] = $73;
    $74 = $72 >>> 0 < $70 >>> 0;
    if ($74) {
      $__p13_0 = $71;
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $75 = $__p13_0 + 4 | 0;
    $76 = HEAP32[$75 >> 2] | 0;
    $77 = $76 - 1 | 0;
    HEAP32[$75 >> 2] = $77;
    $78 = ($76 | 0) == 0;
    if ($78) {
      $__p13_0 = $75;
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $79 = $pp + ($1 << 2) | 0;
    $_sum = $1 + $n | 0;
    $80 = $pp + ($_sum << 2) | 0;
    $81 = $n << 1;
    $82 = _DO_mpn_sublsh_n340($80, $pp, $81, 20, $wsi) | 0;
    $_sum381 = $n * 6 & -1;
    $83 = $pp + ($_sum381 << 2) | 0;
    $84 = HEAP32[$83 >> 2] | 0;
    $85 = $84 - $82 | 0;
    HEAP32[$83 >> 2] = $85;
    $86 = $r1 + ($n << 2) | 0;
    $87 = HEAP32[$86 >> 2] | 0;
    $88 = HEAP32[$pp >> 2] | 0;
    $89 = $88 >>> 4;
    $90 = $87 - $89 | 0;
    HEAP32[$86 >> 2] = $90;
    $91 = HEAP32[$pp >> 2] | 0;
    $92 = $91 >>> 4;
    $93 = $87 >>> 0 < $92 >>> 0;
    if ($93) {
      $__p16_0 = $86;
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $94 = $__p16_0 + 4 | 0;
    $95 = HEAP32[$94 >> 2] | 0;
    $96 = $95 - 1 | 0;
    HEAP32[$94 >> 2] = $96;
    $97 = ($95 | 0) == 0;
    if ($97) {
      $__p16_0 = $94;
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $98 = $pp + 4 | 0;
    $99 = $81 - 1 | 0;
    $100 = _DO_mpn_sublsh_n340($86, $98, $99, 28, $wsi) | 0;
    $_sum382 = $n - 1 | 0;
    $_sum383 = $_sum382 + $81 | 0;
    $101 = $r1 + ($_sum383 << 2) | 0;
    $102 = HEAP32[$101 >> 2] | 0;
    $103 = $102 - $100 | 0;
    HEAP32[$101 >> 2] = $103;
    $104 = $102 >>> 0 < $100 >>> 0;
    if ($104) {
      $__p18_0 = $101;
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    $105 = $__p18_0 + 4 | 0;
    $106 = HEAP32[$105 >> 2] | 0;
    $107 = $106 - 1 | 0;
    HEAP32[$105 >> 2] = $107;
    $108 = ($106 | 0) == 0;
    if ($108) {
      $__p18_0 = $105;
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $109 = ___gmpn_add_n($wsi, $r1, $79, $2) | 0;
    $110 = ___gmpn_sub_n($79, $79, $r1, $2) | 0;
    $111 = $r5 + ($n << 2) | 0;
    $112 = _DO_mpn_sublsh_n340($111, $pp, $81, 10, $r1) | 0;
    $113 = $r5 + ($1 << 2) | 0;
    $114 = HEAP32[$113 >> 2] | 0;
    $115 = $114 - $112 | 0;
    HEAP32[$113 >> 2] = $115;
    $116 = $n * 7 & -1;
    $117 = $pp + ($116 << 2) | 0;
    $_sum384 = $116 + $n | 0;
    $118 = $pp + ($_sum384 << 2) | 0;
    $119 = HEAP32[$118 >> 2] | 0;
    $120 = HEAP32[$pp >> 2] | 0;
    $121 = $120 >>> 2;
    $122 = $119 - $121 | 0;
    HEAP32[$118 >> 2] = $122;
    $123 = HEAP32[$pp >> 2] | 0;
    $124 = $123 >>> 2;
    $125 = $119 >>> 0 < $124 >>> 0;
    if ($125) {
      $__p21_0 = $118;
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    $126 = $__p21_0 + 4 | 0;
    $127 = HEAP32[$126 >> 2] | 0;
    $128 = $127 - 1 | 0;
    HEAP32[$126 >> 2] = $128;
    $129 = ($127 | 0) == 0;
    if ($129) {
      $__p21_0 = $126;
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $130 = _DO_mpn_sublsh_n340($118, $98, $99, 30, $r1) | 0;
    $_sum385 = $81 - 1 | 0;
    $_sum386 = $_sum385 + $_sum384 | 0;
    $131 = $pp + ($_sum386 << 2) | 0;
    $132 = HEAP32[$131 >> 2] | 0;
    $133 = $132 - $130 | 0;
    HEAP32[$131 >> 2] = $133;
    $134 = $132 >>> 0 < $130 >>> 0;
    if ($134) {
      $__p23_0 = $131;
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    $135 = $__p23_0 + 4 | 0;
    $136 = HEAP32[$135 >> 2] | 0;
    $137 = $136 - 1 | 0;
    HEAP32[$135 >> 2] = $137;
    $138 = ($136 | 0) == 0;
    if ($138) {
      $__p23_0 = $135;
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $139 = ___gmpn_sub_n($r1, $r5, $117, $2) | 0;
    $140 = ___gmpn_add_n($117, $117, $r5, $2) | 0;
    $141 = $r3 + ($n << 2) | 0;
    $142 = ___gmpn_sub_n($141, $141, $pp, $81) | 0;
    $143 = $r3 + ($1 << 2) | 0;
    $144 = HEAP32[$143 >> 2] | 0;
    $145 = $144 - $142 | 0;
    HEAP32[$143 >> 2] = $145;
    $146 = ___gmpn_submul_1($79, $r1, $2, 257) | 0;
    ___gmpn_divexact_1($79, $79, $2, 11340);
    $147 = HEAP32[$83 >> 2] | 0;
    $148 = $147 >>> 0 > 536870911;
    if ($148) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    $150 = $147 | -1073741824;
    HEAP32[$83 >> 2] = $150;
    label = 26;
    break;
   case 26:
    $152 = ___gmpn_addmul_1($r1, $79, $2, 60) | 0;
    $153 = ___gmpn_bdiv_dbm1c($r1, $r1, $2, 16843009, 0) | 0;
    $154 = _DO_mpn_sublsh_n340($117, $r3, $2, 5, $r5) | 0;
    $155 = ___gmpn_submul_1($wsi, $117, $2, 100) | 0;
    $156 = _DO_mpn_sublsh_n340($wsi, $r3, $2, 9, $r5) | 0;
    ___gmpn_divexact_1($wsi, $wsi, $2, 42525);
    $157 = ___gmpn_submul_1($117, $wsi, $2, 225) | 0;
    ___gmpn_divexact_1($117, $117, $2, 36);
    $158 = ___gmpn_sub_n($r3, $r3, $117, $2) | 0;
    $159 = ___gmpn_sub_n($79, $117, $79, $2) | 0;
    $160 = ___gmpn_rshift($79, $79, $2, 1) | 0;
    $161 = ___gmpn_sub_n($117, $117, $79, $2) | 0;
    $162 = ___gmpn_add_n($r1, $r1, $wsi, $2) | 0;
    $163 = ___gmpn_rshift($r1, $r1, $2, 1) | 0;
    $164 = ___gmpn_sub_n($r3, $r3, $wsi, $2) | 0;
    $165 = ___gmpn_sub_n($wsi, $wsi, $r1, $2) | 0;
    $166 = $pp + ($n << 2) | 0;
    $167 = ___gmpn_add_n($166, $166, $r1, $n) | 0;
    $168 = $pp + ($81 << 2) | 0;
    $169 = ___gmpn_add_1($168, $86, $n, $167) | 0;
    $170 = $r1 + ($81 << 2) | 0;
    $171 = HEAP32[$170 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($171 | 0, $169 | 0) | 0;
    $uadd$1 = tempRet0;
    $172 = $uadd$0;
    HEAP32[$170 >> 2] = $172;
    $173 = $uadd$1;
    if ($173) {
      $__p26_0 = $170;
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    $174 = $__p26_0 + 4 | 0;
    $175 = HEAP32[$174 >> 2] | 0;
    $176 = $175 + 1 | 0;
    HEAP32[$174 >> 2] = $176;
    $177 = ($176 | 0) == 0;
    if ($177) {
      $__p26_0 = $174;
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $178 = $r1 + ($1 << 2) | 0;
    $179 = HEAP32[$178 >> 2] | 0;
    $180 = ___gmpn_add_n($79, $79, $170, $n) | 0;
    $181 = $180 + $179 | 0;
    $182 = HEAP32[$80 >> 2] | 0;
    $uadd387$0 = _llvm_uadd_with_overflow_i32($182 | 0, $181 | 0) | 0;
    $uadd387$1 = tempRet0;
    $183 = $uadd387$0;
    HEAP32[$80 >> 2] = $183;
    $184 = $uadd387$1;
    if ($184) {
      $__p28_0 = $80;
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    $185 = $__p28_0 + 4 | 0;
    $186 = HEAP32[$185 >> 2] | 0;
    $187 = $186 + 1 | 0;
    HEAP32[$185 >> 2] = $187;
    $188 = ($187 | 0) == 0;
    if ($188) {
      $__p28_0 = $185;
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    $189 = $n * 5 & -1;
    $190 = $pp + ($189 << 2) | 0;
    $191 = ___gmpn_add_n($190, $190, $r3, $n) | 0;
    $192 = HEAP32[$83 >> 2] | 0;
    $193 = $192 + $191 | 0;
    HEAP32[$83 >> 2] = $193;
    $194 = ___gmpn_add_1($83, $141, $n, $193) | 0;
    $195 = $r3 + ($81 << 2) | 0;
    $196 = HEAP32[$195 >> 2] | 0;
    $uadd388$0 = _llvm_uadd_with_overflow_i32($196 | 0, $194 | 0) | 0;
    $uadd388$1 = tempRet0;
    $197 = $uadd388$0;
    HEAP32[$195 >> 2] = $197;
    $198 = $uadd388$1;
    if ($198) {
      $__p30_0 = $195;
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    $199 = $__p30_0 + 4 | 0;
    $200 = HEAP32[$199 >> 2] | 0;
    $201 = $200 + 1 | 0;
    HEAP32[$199 >> 2] = $201;
    $202 = ($201 | 0) == 0;
    if ($202) {
      $__p30_0 = $199;
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $203 = HEAP32[$143 >> 2] | 0;
    $204 = ___gmpn_add_n($117, $117, $195, $n) | 0;
    $205 = $204 + $203 | 0;
    $206 = $n << 3;
    $207 = $pp + ($206 << 2) | 0;
    $208 = HEAP32[$207 >> 2] | 0;
    $uadd389$0 = _llvm_uadd_with_overflow_i32($208 | 0, $205 | 0) | 0;
    $uadd389$1 = tempRet0;
    $209 = $uadd389$0;
    HEAP32[$207 >> 2] = $209;
    $210 = $uadd389$1;
    if ($210) {
      $__p32_0 = $207;
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    $211 = $__p32_0 + 4 | 0;
    $212 = HEAP32[$211 >> 2] | 0;
    $213 = $212 + 1 | 0;
    HEAP32[$211 >> 2] = $213;
    $214 = ($213 | 0) == 0;
    if ($214) {
      $__p32_0 = $211;
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    $215 = $n * 9 & -1;
    $216 = $pp + ($215 << 2) | 0;
    $217 = ___gmpn_add_n($216, $216, $wsi, $n) | 0;
    $218 = $n * 10 & -1;
    $219 = $pp + ($218 << 2) | 0;
    $220 = HEAP32[$219 >> 2] | 0;
    $221 = $220 + $217 | 0;
    HEAP32[$219 >> 2] = $221;
    $222 = $wsi + ($n << 2) | 0;
    if ($3) {
      label = 35;
      break;
    } else {
      label = 41;
      break;
    }
   case 35:
    $224 = ___gmpn_add_1($219, $222, $n, $221) | 0;
    $225 = $wsi + ($81 << 2) | 0;
    $226 = HEAP32[$225 >> 2] | 0;
    $uadd390$0 = _llvm_uadd_with_overflow_i32($226 | 0, $224 | 0) | 0;
    $uadd390$1 = tempRet0;
    $227 = $uadd390$0;
    HEAP32[$225 >> 2] = $227;
    $228 = $uadd390$1;
    if ($228) {
      $__p34_0 = $225;
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 36:
    $229 = $__p34_0 + 4 | 0;
    $230 = HEAP32[$229 >> 2] | 0;
    $231 = $230 + 1 | 0;
    HEAP32[$229 >> 2] = $231;
    $232 = ($231 | 0) == 0;
    if ($232) {
      $__p34_0 = $229;
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    $233 = ($spt | 0) > ($n | 0);
    if ($233) {
      label = 38;
      break;
    } else {
      label = 40;
      break;
    }
   case 38:
    $235 = $wsi + ($1 << 2) | 0;
    $236 = HEAP32[$235 >> 2] | 0;
    $237 = $n * 11 & -1;
    $238 = $pp + ($237 << 2) | 0;
    $239 = ___gmpn_add_n($238, $238, $225, $n) | 0;
    $240 = $239 + $236 | 0;
    $241 = $n * 12 & -1;
    $242 = $pp + ($241 << 2) | 0;
    $243 = HEAP32[$242 >> 2] | 0;
    $uadd391$0 = _llvm_uadd_with_overflow_i32($243 | 0, $240 | 0) | 0;
    $uadd391$1 = tempRet0;
    $244 = $uadd391$0;
    HEAP32[$242 >> 2] = $244;
    $245 = $uadd391$1;
    if ($245) {
      $__p36_0 = $242;
      label = 39;
      break;
    } else {
      label = 42;
      break;
    }
   case 39:
    $246 = $__p36_0 + 4 | 0;
    $247 = HEAP32[$246 >> 2] | 0;
    $248 = $247 + 1 | 0;
    HEAP32[$246 >> 2] = $248;
    $249 = ($248 | 0) == 0;
    if ($249) {
      $__p36_0 = $246;
      label = 39;
      break;
    } else {
      label = 42;
      break;
    }
   case 40:
    $251 = $n * 11 & -1;
    $252 = $pp + ($251 << 2) | 0;
    $253 = ___gmpn_add_n($252, $252, $225, $spt) | 0;
    label = 42;
    break;
   case 41:
    $255 = ___gmpn_add_1($219, $222, $spt, $221) | 0;
    label = 42;
    break;
   case 42:
    return;
  }
}
function _DO_mpn_sublsh_n340($dst, $src, $n, $s, $ws) {
  $dst = $dst | 0;
  $src = $src | 0;
  $n = $n | 0;
  $s = $s | 0;
  $ws = $ws | 0;
  var $1 = 0;
  $1 = ___gmpn_lshift($ws, $src, $n, $s) | 0;
  return (___gmpn_sub_n($dst, $dst, $ws, $n) | 0) + $1 | 0;
}
function ___gmpn_toom_interpolate_16pts($pp, $r1, $r3, $r5, $r7, $n, $spt, $half, $wsi) {
  $pp = $pp | 0;
  $r1 = $r1 | 0;
  $r3 = $r3 | 0;
  $r5 = $r5 | 0;
  $r7 = $r7 | 0;
  $n = $n | 0;
  $spt = $spt | 0;
  $half = $half | 0;
  $wsi = $wsi | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_sum583 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $__p_0 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $__p2_0 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $__p4_0 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $_sum584 = 0, $39 = 0, $40 = 0, $41 = 0, $_sum585 = 0, $_sum586 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $__p6_0 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $_sum587 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $__p8_0 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $__p11_0 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $_sum588 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $__p13_0 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $_sum589 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $__p16_0 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $__p18_0 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $_sum = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $__p21_0 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $_sum566 = 0, $_sum567 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $__p23_0 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $_sum568 = 0, $144 = 0, $145 = 0, $_sum569 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $__p26_0 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $_sum570 = 0, $_sum571 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $__p28_0 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $_sum572 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $__p31_0 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $_sum573 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $_sum574 = 0, $194 = 0, $195 = 0, $_sum575 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $208 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $uadd$0 = 0, $uadd$1 = 0, $245 = 0, $246 = 0, $__p34_0 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $uadd576$0 = 0, $uadd576$1 = 0, $258 = 0, $259 = 0, $__p36_0 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $uadd577$0 = 0, $uadd577$1 = 0, $273 = 0, $274 = 0, $__p38_0 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $uadd578$0 = 0, $uadd578$1 = 0, $285 = 0, $286 = 0, $__p40_0 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $300 = 0, $uadd579$0 = 0, $uadd579$1 = 0, $301 = 0, $302 = 0, $__p42_0 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $uadd580$0 = 0, $uadd580$1 = 0, $313 = 0, $314 = 0, $__p44_0 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $327 = 0, $328 = 0, $329 = 0, $uadd581$0 = 0, $uadd581$1 = 0, $330 = 0, $331 = 0, $__p46_0 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $338 = 0, $339 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $uadd582$0 = 0, $uadd582$1 = 0, $346 = 0, $347 = 0, $__p48_0 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $353 = 0, $354 = 0, $355 = 0, $357 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n * 3 & -1;
    $2 = $1 + 1 | 0;
    $3 = ($half | 0) != 0;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 21;
      break;
    }
   case 2:
    $5 = $n * 7 & -1;
    $6 = $pp + ($5 << 2) | 0;
    $7 = $n * 15 & -1;
    $8 = $pp + ($7 << 2) | 0;
    $9 = ___gmpn_sub_n($6, $6, $8, $spt) | 0;
    $_sum583 = $5 + $spt | 0;
    $10 = $pp + ($_sum583 << 2) | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $11 - $9 | 0;
    HEAP32[$10 >> 2] = $12;
    $13 = $11 >>> 0 < $9 >>> 0;
    if ($13) {
      $__p_0 = $10;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $14 = $__p_0 + 4 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $15 - 1 | 0;
    HEAP32[$14 >> 2] = $16;
    $17 = ($15 | 0) == 0;
    if ($17) {
      $__p_0 = $14;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $18 = _DO_mpn_sublsh_n343($r3, $8, $spt, 14, $wsi) | 0;
    $19 = $r3 + ($spt << 2) | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $20 - $18 | 0;
    HEAP32[$19 >> 2] = $21;
    $22 = $20 >>> 0 < $18 >>> 0;
    if ($22) {
      $__p2_0 = $19;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $23 = $__p2_0 + 4 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $24 - 1 | 0;
    HEAP32[$23 >> 2] = $25;
    $26 = ($24 | 0) == 0;
    if ($26) {
      $__p2_0 = $23;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $27 = $pp + ($1 << 2) | 0;
    $28 = HEAP32[$27 >> 2] | 0;
    $29 = HEAP32[$8 >> 2] | 0;
    $30 = $29 >>> 2;
    $31 = $28 - $30 | 0;
    HEAP32[$27 >> 2] = $31;
    $32 = HEAP32[$8 >> 2] | 0;
    $33 = $32 >>> 2;
    $34 = $28 >>> 0 < $33 >>> 0;
    if ($34) {
      $__p4_0 = $27;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $35 = $__p4_0 + 4 | 0;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = $36 - 1 | 0;
    HEAP32[$35 >> 2] = $37;
    $38 = ($36 | 0) == 0;
    if ($38) {
      $__p4_0 = $35;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $_sum584 = $7 + 1 | 0;
    $39 = $pp + ($_sum584 << 2) | 0;
    $40 = $spt - 1 | 0;
    $41 = _DO_mpn_sublsh_n343($27, $39, $40, 30, $wsi) | 0;
    $_sum585 = $spt - 1 | 0;
    $_sum586 = $_sum585 + $1 | 0;
    $42 = $pp + ($_sum586 << 2) | 0;
    $43 = HEAP32[$42 >> 2] | 0;
    $44 = $43 - $41 | 0;
    HEAP32[$42 >> 2] = $44;
    $45 = $43 >>> 0 < $41 >>> 0;
    if ($45) {
      $__p6_0 = $42;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $46 = $__p6_0 + 4 | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    $48 = $47 - 1 | 0;
    HEAP32[$46 >> 2] = $48;
    $49 = ($47 | 0) == 0;
    if ($49) {
      $__p6_0 = $46;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $50 = $n * 11 & -1;
    $51 = $pp + ($50 << 2) | 0;
    $52 = _DO_mpn_sublsh_n343($51, $8, $spt, 28, $wsi) | 0;
    $_sum587 = $50 + $spt | 0;
    $53 = $pp + ($_sum587 << 2) | 0;
    $54 = HEAP32[$53 >> 2] | 0;
    $55 = $54 - $52 | 0;
    HEAP32[$53 >> 2] = $55;
    $56 = $54 >>> 0 < $52 >>> 0;
    if ($56) {
      $__p8_0 = $53;
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $57 = $__p8_0 + 4 | 0;
    $58 = HEAP32[$57 >> 2] | 0;
    $59 = $58 - 1 | 0;
    HEAP32[$57 >> 2] = $59;
    $60 = ($58 | 0) == 0;
    if ($60) {
      $__p8_0 = $57;
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $61 = HEAP32[$r5 >> 2] | 0;
    $62 = HEAP32[$8 >> 2] | 0;
    $63 = $62 >>> 4;
    $64 = $61 - $63 | 0;
    HEAP32[$r5 >> 2] = $64;
    $65 = HEAP32[$8 >> 2] | 0;
    $66 = $65 >>> 4;
    $67 = $61 >>> 0 < $66 >>> 0;
    if ($67) {
      $__p11_0 = $r5;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $68 = $__p11_0 + 4 | 0;
    $69 = HEAP32[$68 >> 2] | 0;
    $70 = $69 - 1 | 0;
    HEAP32[$68 >> 2] = $70;
    $71 = ($69 | 0) == 0;
    if ($71) {
      $__p11_0 = $68;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $72 = _DO_mpn_sublsh_n343($r5, $39, $40, 28, $wsi) | 0;
    $_sum588 = $spt - 1 | 0;
    $73 = $r5 + ($_sum588 << 2) | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    $75 = $74 - $72 | 0;
    HEAP32[$73 >> 2] = $75;
    $76 = $74 >>> 0 < $72 >>> 0;
    if ($76) {
      $__p13_0 = $73;
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $77 = $__p13_0 + 4 | 0;
    $78 = HEAP32[$77 >> 2] | 0;
    $79 = $78 - 1 | 0;
    HEAP32[$77 >> 2] = $79;
    $80 = ($78 | 0) == 0;
    if ($80) {
      $__p13_0 = $77;
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $81 = $r1 + 4 | 0;
    $82 = _DO_mpn_sublsh_n343($81, $8, $spt, 10, $wsi) | 0;
    $_sum589 = $spt + 1 | 0;
    $83 = $r1 + ($_sum589 << 2) | 0;
    $84 = $spt ^ -1;
    $85 = $2 + $84 | 0;
    $86 = ___gmpn_sub_1($83, $83, $85, $82) | 0;
    $87 = $r7 + ($2 << 2) | 0;
    $88 = HEAP32[$87 >> 2] | 0;
    HEAP32[$87 >> 2] = 128;
    $89 = HEAP32[$r7 >> 2] | 0;
    $90 = HEAP32[$8 >> 2] | 0;
    $91 = $90 >>> 6;
    $92 = $89 - $91 | 0;
    HEAP32[$r7 >> 2] = $92;
    $93 = HEAP32[$8 >> 2] | 0;
    $94 = $93 >>> 6;
    $95 = $89 >>> 0 < $94 >>> 0;
    if ($95) {
      $__p16_0 = $r7;
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $96 = $__p16_0 + 4 | 0;
    $97 = HEAP32[$96 >> 2] | 0;
    $98 = $97 - 1 | 0;
    HEAP32[$96 >> 2] = $98;
    $99 = ($97 | 0) == 0;
    if ($99) {
      $__p16_0 = $96;
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $100 = _DO_mpn_sublsh_n343($r7, $39, $40, 26, $wsi) | 0;
    $101 = $r7 + ($_sum588 << 2) | 0;
    $102 = HEAP32[$101 >> 2] | 0;
    $103 = $102 - $100 | 0;
    HEAP32[$101 >> 2] = $103;
    $104 = $102 >>> 0 < $100 >>> 0;
    if ($104) {
      $__p18_0 = $101;
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    $105 = $__p18_0 + 4 | 0;
    $106 = HEAP32[$105 >> 2] | 0;
    $107 = $106 - 1 | 0;
    HEAP32[$105 >> 2] = $107;
    $108 = ($106 | 0) == 0;
    if ($108) {
      $__p18_0 = $105;
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    HEAP32[$87 >> 2] = $88;
    label = 21;
    break;
   case 21:
    $110 = $r5 + ($n << 2) | 0;
    $111 = $n << 1;
    $112 = _DO_mpn_sublsh_n343($110, $pp, $111, 28, $wsi) | 0;
    $113 = $r5 + ($1 << 2) | 0;
    $114 = HEAP32[$113 >> 2] | 0;
    $115 = $114 - $112 | 0;
    HEAP32[$113 >> 2] = $115;
    $116 = $n * 11 & -1;
    $117 = $pp + ($116 << 2) | 0;
    $_sum = $116 + $n | 0;
    $118 = $pp + ($_sum << 2) | 0;
    $119 = HEAP32[$118 >> 2] | 0;
    $120 = HEAP32[$pp >> 2] | 0;
    $121 = $120 >>> 4;
    $122 = $119 - $121 | 0;
    HEAP32[$118 >> 2] = $122;
    $123 = HEAP32[$pp >> 2] | 0;
    $124 = $123 >>> 4;
    $125 = $119 >>> 0 < $124 >>> 0;
    if ($125) {
      $__p21_0 = $118;
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    $126 = $__p21_0 + 4 | 0;
    $127 = HEAP32[$126 >> 2] | 0;
    $128 = $127 - 1 | 0;
    HEAP32[$126 >> 2] = $128;
    $129 = ($127 | 0) == 0;
    if ($129) {
      $__p21_0 = $126;
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $130 = $pp + 4 | 0;
    $131 = $111 - 1 | 0;
    $132 = _DO_mpn_sublsh_n343($118, $130, $131, 28, $wsi) | 0;
    $_sum566 = $111 - 1 | 0;
    $_sum567 = $_sum566 + $_sum | 0;
    $133 = $pp + ($_sum567 << 2) | 0;
    $134 = HEAP32[$133 >> 2] | 0;
    $135 = $134 - $132 | 0;
    HEAP32[$133 >> 2] = $135;
    $136 = $134 >>> 0 < $132 >>> 0;
    if ($136) {
      $__p23_0 = $133;
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    $137 = $__p23_0 + 4 | 0;
    $138 = HEAP32[$137 >> 2] | 0;
    $139 = $138 - 1 | 0;
    HEAP32[$137 >> 2] = $139;
    $140 = ($138 | 0) == 0;
    if ($140) {
      $__p23_0 = $137;
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $141 = ___gmpn_sub_n($wsi, $r5, $117, $2) | 0;
    $142 = ___gmpn_add_n($117, $117, $r5, $2) | 0;
    $143 = $pp + ($1 << 2) | 0;
    $_sum568 = $1 + $n | 0;
    $144 = $pp + ($_sum568 << 2) | 0;
    $145 = _DO_mpn_sublsh_n343($144, $pp, $111, 14, $r5) | 0;
    $_sum569 = $n * 6 & -1;
    $146 = $pp + ($_sum569 << 2) | 0;
    $147 = HEAP32[$146 >> 2] | 0;
    $148 = $147 - $145 | 0;
    HEAP32[$146 >> 2] = $148;
    $149 = $r3 + ($n << 2) | 0;
    $150 = HEAP32[$149 >> 2] | 0;
    $151 = HEAP32[$pp >> 2] | 0;
    $152 = $151 >>> 2;
    $153 = $150 - $152 | 0;
    HEAP32[$149 >> 2] = $153;
    $154 = HEAP32[$pp >> 2] | 0;
    $155 = $154 >>> 2;
    $156 = $150 >>> 0 < $155 >>> 0;
    if ($156) {
      $__p26_0 = $149;
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    $157 = $__p26_0 + 4 | 0;
    $158 = HEAP32[$157 >> 2] | 0;
    $159 = $158 - 1 | 0;
    HEAP32[$157 >> 2] = $159;
    $160 = ($158 | 0) == 0;
    if ($160) {
      $__p26_0 = $157;
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $161 = _DO_mpn_sublsh_n343($149, $130, $131, 30, $r5) | 0;
    $_sum570 = $n - 1 | 0;
    $_sum571 = $_sum570 + $111 | 0;
    $162 = $r3 + ($_sum571 << 2) | 0;
    $163 = HEAP32[$162 >> 2] | 0;
    $164 = $163 - $161 | 0;
    HEAP32[$162 >> 2] = $164;
    $165 = $163 >>> 0 < $161 >>> 0;
    if ($165) {
      $__p28_0 = $162;
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    $166 = $__p28_0 + 4 | 0;
    $167 = HEAP32[$166 >> 2] | 0;
    $168 = $167 - 1 | 0;
    HEAP32[$166 >> 2] = $168;
    $169 = ($167 | 0) == 0;
    if ($169) {
      $__p28_0 = $166;
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $170 = ___gmpn_add_n($r5, $r3, $143, $2) | 0;
    $171 = ___gmpn_sub_n($143, $143, $r3, $2) | 0;
    $_sum572 = $n + 1 | 0;
    $172 = $r7 + ($_sum572 << 2) | 0;
    $173 = _DO_mpn_sublsh_n343($172, $pp, $111, 10, $r3) | 0;
    $174 = $r1 + ($n << 2) | 0;
    $175 = HEAP32[$174 >> 2] | 0;
    $176 = HEAP32[$pp >> 2] | 0;
    $177 = $176 >>> 6;
    $178 = $175 - $177 | 0;
    HEAP32[$174 >> 2] = $178;
    $179 = HEAP32[$pp >> 2] | 0;
    $180 = $179 >>> 6;
    $181 = $175 >>> 0 < $180 >>> 0;
    if ($181) {
      $__p31_0 = $174;
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    $182 = $__p31_0 + 4 | 0;
    $183 = HEAP32[$182 >> 2] | 0;
    $184 = $183 - 1 | 0;
    HEAP32[$182 >> 2] = $184;
    $185 = ($183 | 0) == 0;
    if ($185) {
      $__p31_0 = $182;
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    $186 = _DO_mpn_sublsh_n343($174, $130, $131, 26, $r3) | 0;
    $187 = $r1 + ($1 << 2) | 0;
    $_sum573 = $1 - 1 | 0;
    $188 = $r1 + ($_sum573 << 2) | 0;
    $189 = ___gmpn_sub_1($188, $188, 2, $186) | 0;
    $190 = ___gmpn_sub_n($r3, $r7, $r1, $2) | 0;
    $191 = ___gmpn_add_n($r1, $r1, $r7, $2) | 0;
    $192 = $n * 7 & -1;
    $193 = $pp + ($192 << 2) | 0;
    $_sum574 = $192 + $n | 0;
    $194 = $pp + ($_sum574 << 2) | 0;
    $195 = ___gmpn_sub_n($194, $194, $pp, $111) | 0;
    $_sum575 = $n * 10 & -1;
    $196 = $pp + ($_sum575 << 2) | 0;
    $197 = HEAP32[$196 >> 2] | 0;
    $198 = $197 - $195 | 0;
    HEAP32[$196 >> 2] = $198;
    $199 = ___gmpn_submul_1($wsi, $143, $2, 1028) | 0;
    $200 = ___gmpn_submul_1($r3, $wsi, $2, 1300) | 0;
    $201 = ___gmpn_submul_1($r3, $143, $2, 1052688) | 0;
    ___gmpn_divexact_1($r3, $r3, $2, 188513325);
    $202 = ___gmpn_bdiv_dbm1c($r3, $r3, $2, 16843009, 0) | 0;
    $203 = ___gmpn_submul_1($wsi, $r3, $2, 12567555) | 0;
    ___gmpn_divexact_1($wsi, $wsi, $2, 181440);
    $204 = $wsi + ($1 << 2) | 0;
    $205 = HEAP32[$204 >> 2] | 0;
    $206 = $205 >>> 0 > 33554431;
    if ($206) {
      label = 32;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    $208 = $205 | -67108864;
    HEAP32[$204 >> 2] = $208;
    label = 33;
    break;
   case 33:
    $210 = ___gmpn_submul_1($143, $r3, $2, 4095) | 0;
    $211 = ___gmpn_addmul_1($143, $wsi, $2, 240) | 0;
    ___gmpn_divexact_1($143, $143, $2, 1020);
    $212 = HEAP32[$146 >> 2] | 0;
    $213 = $212 >>> 0 > 536870911;
    if ($213) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    $215 = $212 | -1073741824;
    HEAP32[$146 >> 2] = $215;
    label = 35;
    break;
   case 35:
    $217 = _DO_mpn_sublsh_n343($r5, $193, $2, 7, $r7) | 0;
    $218 = _DO_mpn_sublsh_n343($117, $193, $2, 13, $r7) | 0;
    $219 = ___gmpn_submul_1($117, $r5, $2, 400) | 0;
    $220 = _DO_mpn_sublsh_n343($r1, $193, $2, 19, $r7) | 0;
    $221 = ___gmpn_submul_1($r1, $117, $2, 1428) | 0;
    $222 = ___gmpn_submul_1($r1, $r5, $2, 112896) | 0;
    ___gmpn_divexact_1($r1, $r1, $2, 182712915);
    $223 = ___gmpn_bdiv_dbm1c($r1, $r1, $2, 16843009, 0) | 0;
    $224 = ___gmpn_submul_1($117, $r1, $2, 15181425) | 0;
    ___gmpn_divexact_1($117, $117, $2, 680400);
    $225 = ___gmpn_submul_1($r5, $r1, $2, 3969) | 0;
    $226 = ___gmpn_submul_1($r5, $117, $2, 900) | 0;
    ___gmpn_divexact_1($r5, $r5, $2, 144);
    $227 = ___gmpn_sub_n($193, $193, $r1, $2) | 0;
    $228 = ___gmpn_sub_n($193, $193, $r5, $2) | 0;
    $229 = ___gmpn_sub_n($193, $193, $117, $2) | 0;
    $230 = ___gmpn_add_n($143, $117, $143, $2) | 0;
    $231 = ___gmpn_rshift($143, $143, $2, 1) | 0;
    $232 = ___gmpn_sub_n($117, $117, $143, $2) | 0;
    $233 = ___gmpn_sub_n($wsi, $r5, $wsi, $2) | 0;
    $234 = ___gmpn_rshift($wsi, $wsi, $2, 1) | 0;
    $235 = ___gmpn_sub_n($r5, $r5, $wsi, $2) | 0;
    $236 = ___gmpn_add_n($r3, $r1, $r3, $2) | 0;
    $237 = ___gmpn_rshift($r3, $r3, $2, 1) | 0;
    $238 = ___gmpn_sub_n($r1, $r1, $r3, $2) | 0;
    $239 = $pp + ($n << 2) | 0;
    $240 = ___gmpn_add_n($239, $239, $r3, $n) | 0;
    $241 = $pp + ($111 << 2) | 0;
    $242 = ___gmpn_add_1($241, $149, $n, $240) | 0;
    $243 = $r3 + ($111 << 2) | 0;
    $244 = HEAP32[$243 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($244 | 0, $242 | 0) | 0;
    $uadd$1 = tempRet0;
    $245 = $uadd$0;
    HEAP32[$243 >> 2] = $245;
    $246 = $uadd$1;
    if ($246) {
      $__p34_0 = $243;
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 36:
    $247 = $__p34_0 + 4 | 0;
    $248 = HEAP32[$247 >> 2] | 0;
    $249 = $248 + 1 | 0;
    HEAP32[$247 >> 2] = $249;
    $250 = ($249 | 0) == 0;
    if ($250) {
      $__p34_0 = $247;
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    $251 = $r3 + ($1 << 2) | 0;
    $252 = HEAP32[$251 >> 2] | 0;
    $253 = ___gmpn_add_n($143, $143, $243, $n) | 0;
    $254 = $253 + $252 | 0;
    $255 = $n << 2;
    $256 = $pp + ($255 << 2) | 0;
    $257 = HEAP32[$256 >> 2] | 0;
    $uadd576$0 = _llvm_uadd_with_overflow_i32($257 | 0, $254 | 0) | 0;
    $uadd576$1 = tempRet0;
    $258 = $uadd576$0;
    HEAP32[$256 >> 2] = $258;
    $259 = $uadd576$1;
    if ($259) {
      $__p36_0 = $256;
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    $260 = $__p36_0 + 4 | 0;
    $261 = HEAP32[$260 >> 2] | 0;
    $262 = $261 + 1 | 0;
    HEAP32[$260 >> 2] = $262;
    $263 = ($262 | 0) == 0;
    if ($263) {
      $__p36_0 = $260;
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    $264 = $n * 5 & -1;
    $265 = $pp + ($264 << 2) | 0;
    $266 = ___gmpn_add_n($265, $265, $wsi, $n) | 0;
    $267 = HEAP32[$146 >> 2] | 0;
    $268 = $267 + $266 | 0;
    HEAP32[$146 >> 2] = $268;
    $269 = $wsi + ($n << 2) | 0;
    $270 = ___gmpn_add_1($146, $269, $n, $268) | 0;
    $271 = $wsi + ($111 << 2) | 0;
    $272 = HEAP32[$271 >> 2] | 0;
    $uadd577$0 = _llvm_uadd_with_overflow_i32($272 | 0, $270 | 0) | 0;
    $uadd577$1 = tempRet0;
    $273 = $uadd577$0;
    HEAP32[$271 >> 2] = $273;
    $274 = $uadd577$1;
    if ($274) {
      $__p38_0 = $271;
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    $275 = $__p38_0 + 4 | 0;
    $276 = HEAP32[$275 >> 2] | 0;
    $277 = $276 + 1 | 0;
    HEAP32[$275 >> 2] = $277;
    $278 = ($277 | 0) == 0;
    if ($278) {
      $__p38_0 = $275;
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $279 = HEAP32[$204 >> 2] | 0;
    $280 = ___gmpn_add_n($193, $193, $271, $n) | 0;
    $281 = $280 + $279 | 0;
    $282 = $n << 3;
    $283 = $pp + ($282 << 2) | 0;
    $284 = HEAP32[$283 >> 2] | 0;
    $uadd578$0 = _llvm_uadd_with_overflow_i32($284 | 0, $281 | 0) | 0;
    $uadd578$1 = tempRet0;
    $285 = $uadd578$0;
    HEAP32[$283 >> 2] = $285;
    $286 = $uadd578$1;
    if ($286) {
      $__p40_0 = $283;
      label = 42;
      break;
    } else {
      label = 43;
      break;
    }
   case 42:
    $287 = $__p40_0 + 4 | 0;
    $288 = HEAP32[$287 >> 2] | 0;
    $289 = $288 + 1 | 0;
    HEAP32[$287 >> 2] = $289;
    $290 = ($289 | 0) == 0;
    if ($290) {
      $__p40_0 = $287;
      label = 42;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    $291 = $n * 9 & -1;
    $292 = $pp + ($291 << 2) | 0;
    $293 = ___gmpn_add_n($292, $292, $r5, $n) | 0;
    $294 = $n * 10 & -1;
    $295 = $pp + ($294 << 2) | 0;
    $296 = HEAP32[$295 >> 2] | 0;
    $297 = $296 + $293 | 0;
    HEAP32[$295 >> 2] = $297;
    $298 = ___gmpn_add_1($295, $110, $n, $297) | 0;
    $299 = $r5 + ($111 << 2) | 0;
    $300 = HEAP32[$299 >> 2] | 0;
    $uadd579$0 = _llvm_uadd_with_overflow_i32($300 | 0, $298 | 0) | 0;
    $uadd579$1 = tempRet0;
    $301 = $uadd579$0;
    HEAP32[$299 >> 2] = $301;
    $302 = $uadd579$1;
    if ($302) {
      $__p42_0 = $299;
      label = 44;
      break;
    } else {
      label = 45;
      break;
    }
   case 44:
    $303 = $__p42_0 + 4 | 0;
    $304 = HEAP32[$303 >> 2] | 0;
    $305 = $304 + 1 | 0;
    HEAP32[$303 >> 2] = $305;
    $306 = ($305 | 0) == 0;
    if ($306) {
      $__p42_0 = $303;
      label = 44;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    $307 = HEAP32[$113 >> 2] | 0;
    $308 = ___gmpn_add_n($117, $117, $299, $n) | 0;
    $309 = $308 + $307 | 0;
    $310 = $n * 12 & -1;
    $311 = $pp + ($310 << 2) | 0;
    $312 = HEAP32[$311 >> 2] | 0;
    $uadd580$0 = _llvm_uadd_with_overflow_i32($312 | 0, $309 | 0) | 0;
    $uadd580$1 = tempRet0;
    $313 = $uadd580$0;
    HEAP32[$311 >> 2] = $313;
    $314 = $uadd580$1;
    if ($314) {
      $__p44_0 = $311;
      label = 46;
      break;
    } else {
      label = 47;
      break;
    }
   case 46:
    $315 = $__p44_0 + 4 | 0;
    $316 = HEAP32[$315 >> 2] | 0;
    $317 = $316 + 1 | 0;
    HEAP32[$315 >> 2] = $317;
    $318 = ($317 | 0) == 0;
    if ($318) {
      $__p44_0 = $315;
      label = 46;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    $319 = $n * 13 & -1;
    $320 = $pp + ($319 << 2) | 0;
    $321 = ___gmpn_add_n($320, $320, $r1, $n) | 0;
    $322 = $n * 14 & -1;
    $323 = $pp + ($322 << 2) | 0;
    $324 = HEAP32[$323 >> 2] | 0;
    $325 = $324 + $321 | 0;
    HEAP32[$323 >> 2] = $325;
    if ($3) {
      label = 48;
      break;
    } else {
      label = 54;
      break;
    }
   case 48:
    $327 = ___gmpn_add_1($323, $174, $n, $325) | 0;
    $328 = $r1 + ($111 << 2) | 0;
    $329 = HEAP32[$328 >> 2] | 0;
    $uadd581$0 = _llvm_uadd_with_overflow_i32($329 | 0, $327 | 0) | 0;
    $uadd581$1 = tempRet0;
    $330 = $uadd581$0;
    HEAP32[$328 >> 2] = $330;
    $331 = $uadd581$1;
    if ($331) {
      $__p46_0 = $328;
      label = 49;
      break;
    } else {
      label = 50;
      break;
    }
   case 49:
    $332 = $__p46_0 + 4 | 0;
    $333 = HEAP32[$332 >> 2] | 0;
    $334 = $333 + 1 | 0;
    HEAP32[$332 >> 2] = $334;
    $335 = ($334 | 0) == 0;
    if ($335) {
      $__p46_0 = $332;
      label = 49;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    $336 = ($spt | 0) > ($n | 0);
    if ($336) {
      label = 51;
      break;
    } else {
      label = 53;
      break;
    }
   case 51:
    $338 = HEAP32[$187 >> 2] | 0;
    $339 = $n * 15 & -1;
    $340 = $pp + ($339 << 2) | 0;
    $341 = ___gmpn_add_n($340, $340, $328, $n) | 0;
    $342 = $341 + $338 | 0;
    $343 = $n << 4;
    $344 = $pp + ($343 << 2) | 0;
    $345 = HEAP32[$344 >> 2] | 0;
    $uadd582$0 = _llvm_uadd_with_overflow_i32($345 | 0, $342 | 0) | 0;
    $uadd582$1 = tempRet0;
    $346 = $uadd582$0;
    HEAP32[$344 >> 2] = $346;
    $347 = $uadd582$1;
    if ($347) {
      $__p48_0 = $344;
      label = 52;
      break;
    } else {
      label = 55;
      break;
    }
   case 52:
    $348 = $__p48_0 + 4 | 0;
    $349 = HEAP32[$348 >> 2] | 0;
    $350 = $349 + 1 | 0;
    HEAP32[$348 >> 2] = $350;
    $351 = ($350 | 0) == 0;
    if ($351) {
      $__p48_0 = $348;
      label = 52;
      break;
    } else {
      label = 55;
      break;
    }
   case 53:
    $353 = $n * 15 & -1;
    $354 = $pp + ($353 << 2) | 0;
    $355 = ___gmpn_add_n($354, $354, $328, $spt) | 0;
    label = 55;
    break;
   case 54:
    $357 = ___gmpn_add_1($323, $174, $spt, $325) | 0;
    label = 55;
    break;
   case 55:
    return;
  }
}
function _DO_mpn_sublsh_n343($dst, $src, $n, $s, $ws) {
  $dst = $dst | 0;
  $src = $src | 0;
  $n = $n | 0;
  $s = $s | 0;
  $ws = $ws | 0;
  var $1 = 0;
  $1 = ___gmpn_lshift($ws, $src, $n, $s) | 0;
  return (___gmpn_sub_n($dst, $dst, $ws, $n) | 0) + $1 | 0;
}
function ___gmpn_ni_invertappr($ip, $dp, $n, $scratch) {
  $ip = $ip | 0;
  $dp = $dp | 0;
  $n = $n | 0;
  $scratch = $scratch | 0;
  var $sizes = 0, $__tmp_marker = 0, $1 = 0, $sizp_0 = 0, $rn_0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $_sum = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $_sum181 = 0, $26 = 0, $sizp_1 = 0, $rn_1 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $_sum204 = 0, $34 = 0, $_sum205 = 0, $35 = 0, $37 = 0, $_sum206 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $_sum184 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $_sum185 = 0, $47 = 0, $48 = 0, $_sum186 = 0, $49 = 0, $50 = 0, $_sum187 = 0, $_sum188 = 0, $51 = 0, $52 = 0, $uadd$0 = 0, $uadd$1 = 0, $53 = 0, $54 = 0, $__p_0 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $_sum189 = 0, $_sum190 = 0, $59 = 0, $__p2_0 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $__p4_0 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $__p6_0 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $method_0 = 0, $_sum191 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $cy_0 = 0, $87 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $__p8_0 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $__d_0 = 0, $__n_0 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $110 = 0, $uadd192$0 = 0, $uadd192$1 = 0, $111 = 0, $112 = 0, $__p10_0 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $__p12_0 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $124 = 0, $_sum193 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $_sum196 = 0, $133 = 0, $_sum197 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $uadd198$0 = 0, $uadd198$1 = 0, $138 = 0, $139 = 0, $__p14_0 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 104 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $sizes = __stackBase__ | 0;
    $__tmp_marker = __stackBase__ + 96 | 0;
    $1 = $sizes | 0;
    $rn_0 = $n;
    $sizp_0 = $1;
    label = 2;
    break;
   case 2:
    HEAP32[$sizp_0 >> 2] = $rn_0;
    $3 = $rn_0 >> 1;
    $4 = $3 + 1 | 0;
    $5 = $sizp_0 + 4 | 0;
    $6 = ($4 | 0) > 199;
    if ($6) {
      $rn_0 = $4;
      $sizp_0 = $5;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $8 = $3 ^ -1;
    $_sum = $8 + $n | 0;
    $9 = $ip + ($_sum << 2) | 0;
    $10 = $dp + ($_sum << 2) | 0;
    $11 = _mpn_bc_invertappr($9, $10, $4, $scratch) | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    $12 = $n + 1 | 0;
    $13 = ___gmpn_mulmod_bnm1_next_size($12) | 0;
    $14 = $n >> 1;
    $15 = $14 + 1 | 0;
    $16 = _mpn_mulmod_bnm1_itch344($13, $n, $15) | 0;
    $17 = $16 << 2;
    $18 = $17 >>> 0 < 65536;
    if ($18) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $20 = STACKTOP;
    STACKTOP = STACKTOP + $17 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $24 = $20;
    label = 6;
    break;
   case 5:
    $22 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $17) | 0;
    $24 = $22;
    label = 6;
    break;
   case 6:
    $25 = $24;
    $_sum181 = $n + 3 | 0;
    $26 = $scratch + ($_sum181 << 2) | 0;
    $rn_1 = $4;
    $sizp_1 = $5;
    label = 7;
    break;
   case 7:
    $28 = $sizp_1 - 4 | 0;
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = $29 + 1 | 0;
    $31 = ___gmpn_mulmod_bnm1_next_size($30) | 0;
    $32 = $29 + $rn_1 | 0;
    $33 = ($31 | 0) > ($32 | 0);
    $_sum204 = $n - $29 | 0;
    $34 = $dp + ($_sum204 << 2) | 0;
    $_sum205 = $n - $rn_1 | 0;
    $35 = $ip + ($_sum205 << 2) | 0;
    if ($33) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $37 = ___gmpn_mul($26, $34, $29, $35, $rn_1) | 0;
    $_sum206 = $rn_1 + $_sum181 | 0;
    $38 = $scratch + ($_sum206 << 2) | 0;
    $39 = 1 - $rn_1 | 0;
    $40 = $39 + $29 | 0;
    $41 = ___gmpn_add_n($38, $38, $34, $40) | 0;
    $method_0 = 1;
    label = 17;
    break;
   case 9:
    ___gmpn_mulmod_bnm1($26, $31, $34, $29, $35, $rn_1, $25);
    $_sum184 = $rn_1 + $_sum181 | 0;
    $43 = $scratch + ($_sum184 << 2) | 0;
    $44 = $31 - $rn_1 | 0;
    $45 = ___gmpn_add_n($43, $43, $34, $44) | 0;
    $46 = $45 + 1 | 0;
    $_sum185 = $31 + $_sum181 | 0;
    $47 = $scratch + ($_sum185 << 2) | 0;
    HEAP32[$47 >> 2] = $46;
    $48 = $29 - $44 | 0;
    $_sum186 = $n - $48 | 0;
    $49 = $dp + ($_sum186 << 2) | 0;
    $50 = ___gmpn_add_n($26, $26, $49, $48) | 0;
    $_sum187 = $29 + $_sum181 | 0;
    $_sum188 = $_sum187 - $44 | 0;
    $51 = $scratch + ($_sum188 << 2) | 0;
    $52 = HEAP32[$51 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($52 | 0, $50 | 0) | 0;
    $uadd$1 = tempRet0;
    $53 = $uadd$0;
    HEAP32[$51 >> 2] = $53;
    $54 = $uadd$1;
    if ($54) {
      $__p_0 = $51;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $55 = $__p_0 + 4 | 0;
    $56 = HEAP32[$55 >> 2] | 0;
    $57 = $56 + 1 | 0;
    HEAP32[$55 >> 2] = $57;
    $58 = ($57 | 0) == 0;
    if ($58) {
      $__p_0 = $55;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $_sum189 = $_sum184 + $29 | 0;
    $_sum190 = $_sum189 - $31 | 0;
    $59 = $scratch + ($_sum190 << 2) | 0;
    $__p2_0 = $59;
    label = 12;
    break;
   case 12:
    $61 = $__p2_0 + 4 | 0;
    $62 = HEAP32[$__p2_0 >> 2] | 0;
    $63 = $62 - 1 | 0;
    HEAP32[$__p2_0 >> 2] = $63;
    $64 = ($62 | 0) == 0;
    if ($64) {
      $__p2_0 = $61;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $66 = HEAP32[$47 >> 2] | 0;
    $67 = ($66 | 0) == 0;
    if ($67) {
      $__p6_0 = $26;
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $69 = HEAP32[$26 >> 2] | 0;
    $70 = $66 - 1 | 0;
    $71 = $70 + $69 | 0;
    HEAP32[$26 >> 2] = $71;
    $72 = HEAP32[$47 >> 2] | 0;
    $73 = $72 - 1 | 0;
    $74 = $71 >>> 0 < $73 >>> 0;
    if ($74) {
      $__p4_0 = $26;
      label = 15;
      break;
    } else {
      $method_0 = 0;
      label = 17;
      break;
    }
   case 15:
    $75 = $__p4_0 + 4 | 0;
    $76 = HEAP32[$75 >> 2] | 0;
    $77 = $76 + 1 | 0;
    HEAP32[$75 >> 2] = $77;
    $78 = ($77 | 0) == 0;
    if ($78) {
      $__p4_0 = $75;
      label = 15;
      break;
    } else {
      $method_0 = 0;
      label = 17;
      break;
    }
   case 16:
    $79 = $__p6_0 + 4 | 0;
    $80 = HEAP32[$__p6_0 >> 2] | 0;
    $81 = $80 - 1 | 0;
    HEAP32[$__p6_0 >> 2] = $81;
    $82 = ($80 | 0) == 0;
    if ($82) {
      $__p6_0 = $79;
      label = 16;
      break;
    } else {
      $method_0 = 0;
      label = 17;
      break;
    }
   case 17:
    $_sum191 = $29 + $_sum181 | 0;
    $83 = $scratch + ($_sum191 << 2) | 0;
    $84 = HEAP32[$83 >> 2] | 0;
    $85 = $84 >>> 0 < 2;
    if ($85) {
      $cy_0 = 1;
      $86 = $84;
      label = 18;
      break;
    } else {
      $__n_0 = $30;
      $__d_0 = $26;
      label = 24;
      break;
    }
   case 18:
    $87 = ($86 | 0) == 0;
    if ($87) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    $89 = ___gmpn_cmp($26, $34, $29) | 0;
    $90 = ($89 | 0) > 0;
    if ($90) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    $91 = ___gmpn_sub_n($26, $26, $34, $29) | 0;
    $92 = HEAP32[$83 >> 2] | 0;
    $93 = $92 - $91 | 0;
    HEAP32[$83 >> 2] = $93;
    $94 = $cy_0 + 1 | 0;
    $cy_0 = $94;
    $86 = $93;
    label = 18;
    break;
   case 21:
    $96 = HEAP32[$35 >> 2] | 0;
    $97 = $96 - $cy_0 | 0;
    HEAP32[$35 >> 2] = $97;
    $98 = $96 >>> 0 < $cy_0 >>> 0;
    if ($98) {
      $__p8_0 = $35;
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    $99 = $__p8_0 + 4 | 0;
    $100 = HEAP32[$99 >> 2] | 0;
    $101 = $100 - 1 | 0;
    HEAP32[$99 >> 2] = $101;
    $102 = ($100 | 0) == 0;
    if ($102) {
      $__p8_0 = $99;
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $103 = ___gmpn_sub_n($26, $34, $26, $29) | 0;
    label = 30;
    break;
   case 24:
    $104 = $__d_0 + 4 | 0;
    $105 = HEAP32[$__d_0 >> 2] | 0;
    $106 = $105 ^ -1;
    HEAP32[$__d_0 >> 2] = $106;
    $107 = $__n_0 - 1 | 0;
    $108 = ($107 | 0) == 0;
    if ($108) {
      label = 25;
      break;
    } else {
      $__n_0 = $107;
      $__d_0 = $104;
      label = 24;
      break;
    }
   case 25:
    $110 = HEAP32[$26 >> 2] | 0;
    $uadd192$0 = _llvm_uadd_with_overflow_i32($110 | 0, $method_0 | 0) | 0;
    $uadd192$1 = tempRet0;
    $111 = $uadd192$0;
    HEAP32[$26 >> 2] = $111;
    $112 = $uadd192$1;
    if ($112) {
      $__p10_0 = $26;
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    $113 = $__p10_0 + 4 | 0;
    $114 = HEAP32[$113 >> 2] | 0;
    $115 = $114 + 1 | 0;
    HEAP32[$113 >> 2] = $115;
    $116 = ($115 | 0) == 0;
    if ($116) {
      $__p10_0 = $113;
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $117 = HEAP32[$83 >> 2] | 0;
    $118 = ($117 | 0) == 0;
    if ($118) {
      label = 30;
      break;
    } else {
      $__p12_0 = $35;
      label = 28;
      break;
    }
   case 28:
    $119 = $__p12_0 + 4 | 0;
    $120 = HEAP32[$__p12_0 >> 2] | 0;
    $121 = $120 + 1 | 0;
    HEAP32[$__p12_0 >> 2] = $121;
    $122 = ($121 | 0) == 0;
    if ($122) {
      $__p12_0 = $119;
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $124 = ___gmpn_sub_n($26, $26, $34, $29) | 0;
    label = 30;
    break;
   case 30:
    $_sum193 = $_sum191 - $rn_1 | 0;
    $126 = $scratch + ($_sum193 << 2) | 0;
    ___gmpn_mul_n($scratch, $126, $35, $rn_1);
    $127 = $scratch + ($rn_1 << 2) | 0;
    $128 = $rn_1 << 1;
    $129 = $128 - $29 | 0;
    $130 = ___gmpn_add_n($127, $127, $126, $129) | 0;
    $131 = $ip + ($_sum204 << 2) | 0;
    $132 = $rn_1 * 3 & -1;
    $_sum196 = $132 - $29 | 0;
    $133 = $scratch + ($_sum196 << 2) | 0;
    $_sum197 = $rn_1 + $_sum181 | 0;
    $134 = $scratch + ($_sum197 << 2) | 0;
    $135 = $29 - $rn_1 | 0;
    $136 = _mpn_add_nc345($131, $133, $134, $135, $130) | 0;
    $137 = HEAP32[$35 >> 2] | 0;
    $uadd198$0 = _llvm_uadd_with_overflow_i32($137 | 0, $136 | 0) | 0;
    $uadd198$1 = tempRet0;
    $138 = $uadd198$0;
    HEAP32[$35 >> 2] = $138;
    $139 = $uadd198$1;
    if ($139) {
      $__p14_0 = $35;
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    $140 = $__p14_0 + 4 | 0;
    $141 = HEAP32[$140 >> 2] | 0;
    $142 = $141 + 1 | 0;
    HEAP32[$140 >> 2] = $142;
    $143 = ($142 | 0) == 0;
    if ($143) {
      $__p14_0 = $140;
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $144 = ($28 | 0) == ($1 | 0);
    if ($144) {
      label = 33;
      break;
    } else {
      $rn_1 = $29;
      $sizp_1 = $28;
      label = 7;
      break;
    }
   case 33:
    $146 = $29 ^ -1;
    $147 = $132 + $146 | 0;
    $148 = $scratch + ($147 << 2) | 0;
    $149 = HEAP32[$148 >> 2] | 0;
    $150 = $149 >>> 0 > 4294967288;
    $151 = $150 & 1;
    $152 = HEAP32[$__tmp_marker >> 2] | 0;
    $153 = ($152 | 0) == 0;
    if ($153) {
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    ___gmp_tmp_reentrant_free($152);
    label = 35;
    break;
   case 35:
    STACKTOP = __stackBase__;
    return $151 | 0;
  }
  return 0;
}
function _mpn_mulmod_bnm1_itch344($rn, $an, $bn) {
  $rn = $rn | 0;
  $an = $an | 0;
  $bn = $bn | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $rn >> 1;
    $2 = $rn + 4 | 0;
    $3 = ($1 | 0) < ($an | 0);
    if ($3) {
      label = 2;
      break;
    } else {
      $8 = 0;
      label = 3;
      break;
    }
   case 2:
    $5 = ($1 | 0) < ($bn | 0);
    $6 = $5 ? $rn : $1;
    $8 = $6;
    label = 3;
    break;
   case 3:
    $9 = $2 + $8 | 0;
    return $9 | 0;
  }
  return 0;
}
function _mpn_mulmod_bnm1_itch348($rn, $an, $bn) {
  $rn = $rn | 0;
  $an = $an | 0;
  $bn = $bn | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $rn >> 1;
    $2 = $rn + 4 | 0;
    $3 = ($1 | 0) < ($an | 0);
    if ($3) {
      label = 2;
      break;
    } else {
      $8 = 0;
      label = 3;
      break;
    }
   case 2:
    $5 = ($1 | 0) < ($bn | 0);
    $6 = $5 ? $rn : $1;
    $8 = $6;
    label = 3;
    break;
   case 3:
    $9 = $2 + $8 | 0;
    return $9 | 0;
  }
  return 0;
}
function _mpn_bc_invertappr($ip, $dp, $n, $tp) {
  $ip = $ip | 0;
  $dp = $dp | 0;
  $n = $n | 0;
  $tp = $tp | 0;
  var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $uadd172$0 = 0, $uadd172$1 = 0, $16 = 0, $17 = 0, $_not = 0, $18 = 0, $or_cond = 0, $20 = 0, $21 = 0, $__r1_0 = 0, $__q1_0 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $uadd171$0 = 0, $uadd171$1 = 0, $33 = 0, $_not173 = 0, $34 = 0, $35 = 0, $or_cond175 = 0, $__v = 0, $_ = 0, $__q0_0 = 0, $37 = 0, $38 = 0, $_sum = 0, $40 = 0, $41 = 0, $42 = 0, $i_0185 = 0, $_sum170 = 0, $43 = 0, $44 = 0, $45 = 0, $_sum165 = 0, $46 = 0, $__n_0 = 0, $__s_0 = 0, $__d_0 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $uadd169$0 = 0, $uadd169$1 = 0, $73 = 0, $74 = 0, $_not176 = 0, $75 = 0, $or_cond177 = 0, $77 = 0, $78 = 0, $__q14_0 = 0, $__r16_0 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $uadd168$0 = 0, $uadd168$1 = 0, $90 = 0, $_not178 = 0, $91 = 0, $92 = 0, $or_cond180 = 0, $_181_v = 0, $_181 = 0, $__q05_0 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $uadd$0 = 0, $uadd$1 = 0, $101 = 0, $102 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $_p_0 = 0, $_v_0 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $uadd166$0 = 0, $uadd166$1 = 0, $124 = 0, $125 = 0, $126 = 0, $__x3_0 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $uadd167$0 = 0, $uadd167$1 = 0, $132 = 0, $133 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $140 = 0, $or_cond182 = 0, $141 = 0, $_183 = 0, $_v_1 = 0, $143 = 0, $144 = 0, $__p_0 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($n | 0) == 1;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 8;
      break;
    }
   case 2:
    $3 = HEAP32[$dp >> 2] | 0;
    $4 = $3 >>> 16;
    $5 = $3 & 65535;
    $6 = $3 ^ -1;
    $7 = ($6 >>> 0) / ($4 >>> 0) >>> 0;
    $8 = Math_imul($7, $4);
    $9 = $6 - $8 | 0;
    $10 = Math_imul($7, $5);
    $11 = $9 << 16;
    $12 = $11 | 65535;
    $13 = $12 >>> 0 < $10 >>> 0;
    if ($13) {
      label = 3;
      break;
    } else {
      $__q1_0 = $7;
      $__r1_0 = $12;
      label = 5;
      break;
    }
   case 3:
    $15 = $7 - 1 | 0;
    $uadd172$0 = _llvm_uadd_with_overflow_i32($12 | 0, $3 | 0) | 0;
    $uadd172$1 = tempRet0;
    $16 = $uadd172$0;
    $17 = $uadd172$1;
    $_not = $17 ^ 1;
    $18 = $16 >>> 0 < $10 >>> 0;
    $or_cond = $18 & $_not;
    if ($or_cond) {
      label = 4;
      break;
    } else {
      $__q1_0 = $15;
      $__r1_0 = $16;
      label = 5;
      break;
    }
   case 4:
    $20 = $7 - 2 | 0;
    $21 = $16 + $3 | 0;
    $__q1_0 = $20;
    $__r1_0 = $21;
    label = 5;
    break;
   case 5:
    $23 = $__r1_0 - $10 | 0;
    $24 = ($23 >>> 0) / ($4 >>> 0) >>> 0;
    $25 = Math_imul($24, $4);
    $26 = $23 - $25 | 0;
    $27 = Math_imul($24, $5);
    $28 = $26 << 16;
    $29 = $28 | 65535;
    $30 = $29 >>> 0 < $27 >>> 0;
    if ($30) {
      label = 6;
      break;
    } else {
      $__q0_0 = $24;
      label = 7;
      break;
    }
   case 6:
    $32 = HEAP32[$dp >> 2] | 0;
    $uadd171$0 = _llvm_uadd_with_overflow_i32($29 | 0, $32 | 0) | 0;
    $uadd171$1 = tempRet0;
    $33 = $uadd171$1;
    $_not173 = $33 ^ 1;
    $34 = $uadd171$0;
    $35 = $34 >>> 0 < $27 >>> 0;
    $or_cond175 = $35 & $_not173;
    $__v = $or_cond175 ? -2 : -1;
    $_ = $__v + $24 | 0;
    $__q0_0 = $_;
    label = 7;
    break;
   case 7:
    $37 = $__q1_0 << 16;
    $38 = $__q0_0 | $37;
    HEAP32[$ip >> 2] = $38;
    $_0 = 0;
    label = 26;
    break;
   case 8:
    $_sum = $n + 2 | 0;
    $40 = $tp + ($_sum << 2) | 0;
    $41 = $n - 1 | 0;
    $42 = ($n | 0) > 0;
    if ($42) {
      $i_0185 = $41;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $_sum170 = $i_0185 + $_sum | 0;
    $43 = $tp + ($_sum170 << 2) | 0;
    HEAP32[$43 >> 2] = -1;
    $44 = $i_0185 - 1 | 0;
    $45 = ($i_0185 | 0) > 0;
    if ($45) {
      $i_0185 = $44;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $_sum165 = $_sum + $n | 0;
    $46 = $tp + ($_sum165 << 2) | 0;
    $__d_0 = $46;
    $__s_0 = $dp;
    $__n_0 = $n;
    label = 11;
    break;
   case 11:
    $48 = $__s_0 + 4 | 0;
    $49 = HEAP32[$__s_0 >> 2] | 0;
    $50 = $49 ^ -1;
    $51 = $__d_0 + 4 | 0;
    HEAP32[$__d_0 >> 2] = $50;
    $52 = $__n_0 - 1 | 0;
    $53 = ($52 | 0) == 0;
    if ($53) {
      label = 12;
      break;
    } else {
      $__d_0 = $51;
      $__s_0 = $48;
      $__n_0 = $52;
      label = 11;
      break;
    }
   case 12:
    $55 = ($n | 0) == 2;
    if ($55) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $57 = ___gmpn_divrem_2($ip, 0, $40, 4, $dp) | 0;
    $_0 = 0;
    label = 26;
    break;
   case 14:
    $59 = $dp + ($41 << 2) | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    $61 = $60 >>> 16;
    $62 = $60 & 65535;
    $63 = $60 ^ -1;
    $64 = ($63 >>> 0) / ($61 >>> 0) >>> 0;
    $65 = Math_imul($64, $61);
    $66 = $63 - $65 | 0;
    $67 = Math_imul($64, $62);
    $68 = $66 << 16;
    $69 = $68 | 65535;
    $70 = $69 >>> 0 < $67 >>> 0;
    if ($70) {
      label = 15;
      break;
    } else {
      $__r16_0 = $69;
      $__q14_0 = $64;
      label = 17;
      break;
    }
   case 15:
    $72 = $64 - 1 | 0;
    $uadd169$0 = _llvm_uadd_with_overflow_i32($69 | 0, $60 | 0) | 0;
    $uadd169$1 = tempRet0;
    $73 = $uadd169$0;
    $74 = $uadd169$1;
    $_not176 = $74 ^ 1;
    $75 = $73 >>> 0 < $67 >>> 0;
    $or_cond177 = $75 & $_not176;
    if ($or_cond177) {
      label = 16;
      break;
    } else {
      $__r16_0 = $73;
      $__q14_0 = $72;
      label = 17;
      break;
    }
   case 16:
    $77 = $64 - 2 | 0;
    $78 = $73 + $60 | 0;
    $__r16_0 = $78;
    $__q14_0 = $77;
    label = 17;
    break;
   case 17:
    $80 = $__r16_0 - $67 | 0;
    $81 = ($80 >>> 0) / ($61 >>> 0) >>> 0;
    $82 = Math_imul($81, $61);
    $83 = $80 - $82 | 0;
    $84 = Math_imul($81, $62);
    $85 = $83 << 16;
    $86 = $85 | 65535;
    $87 = $86 >>> 0 < $84 >>> 0;
    if ($87) {
      label = 18;
      break;
    } else {
      $__q05_0 = $81;
      label = 19;
      break;
    }
   case 18:
    $89 = HEAP32[$59 >> 2] | 0;
    $uadd168$0 = _llvm_uadd_with_overflow_i32($86 | 0, $89 | 0) | 0;
    $uadd168$1 = tempRet0;
    $90 = $uadd168$1;
    $_not178 = $90 ^ 1;
    $91 = $uadd168$0;
    $92 = $91 >>> 0 < $84 >>> 0;
    $or_cond180 = $92 & $_not178;
    $_181_v = $or_cond180 ? -2 : -1;
    $_181 = $_181_v + $81 | 0;
    $__q05_0 = $_181;
    label = 19;
    break;
   case 19:
    $94 = $__q14_0 << 16;
    $95 = $__q05_0 | $94;
    $96 = HEAP32[$59 >> 2] | 0;
    $97 = Math_imul($96, $95);
    $98 = $n - 2 | 0;
    $99 = $dp + ($98 << 2) | 0;
    $100 = HEAP32[$99 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($97 | 0, $100 | 0) | 0;
    $uadd$1 = tempRet0;
    $101 = $uadd$0;
    $102 = $uadd$1;
    if ($102) {
      label = 20;
      break;
    } else {
      $_v_0 = $95;
      $_p_0 = $101;
      label = 21;
      break;
    }
   case 20:
    $104 = $95 - 1 | 0;
    $105 = $101 >>> 0 >= $96 >>> 0;
    $106 = $105 & 1;
    $107 = -$106 | 0;
    $108 = $101 - $96 | 0;
    $109 = $104 - $106 | 0;
    $110 = $96 & $107;
    $111 = $108 - $110 | 0;
    $_v_0 = $109;
    $_p_0 = $111;
    label = 21;
    break;
   case 21:
    $113 = HEAP32[$99 >> 2] | 0;
    $114 = $113 & 65535;
    $115 = $113 >>> 16;
    $116 = $_v_0 & 65535;
    $117 = $_v_0 >>> 16;
    $118 = Math_imul($114, $116);
    $119 = Math_imul($114, $117);
    $120 = Math_imul($115, $116);
    $121 = Math_imul($115, $117);
    $122 = $118 >>> 16;
    $123 = $122 + $119 | 0;
    $uadd166$0 = _llvm_uadd_with_overflow_i32($123 | 0, $120 | 0) | 0;
    $uadd166$1 = tempRet0;
    $124 = $uadd166$0;
    $125 = $uadd166$1;
    $126 = $121 + 65536 | 0;
    $__x3_0 = $125 ? $126 : $121;
    $127 = $124 >>> 16;
    $128 = $__x3_0 + $127 | 0;
    $129 = $124 << 16;
    $130 = $118 & 65535;
    $131 = $129 | $130;
    $uadd167$0 = _llvm_uadd_with_overflow_i32($_p_0 | 0, $128 | 0) | 0;
    $uadd167$1 = tempRet0;
    $132 = $uadd167$0;
    $133 = $uadd167$1;
    if ($133) {
      label = 22;
      break;
    } else {
      $_v_1 = $_v_0;
      label = 24;
      break;
    }
   case 22:
    $135 = $_v_0 - 1 | 0;
    $136 = HEAP32[$59 >> 2] | 0;
    $137 = $132 >>> 0 < $136 >>> 0;
    if ($137) {
      $_v_1 = $135;
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $139 = $132 >>> 0 <= $136 >>> 0;
    $140 = $131 >>> 0 < $113 >>> 0;
    $or_cond182 = $139 & $140;
    $141 = $_v_0 - 2 | 0;
    $_183 = $or_cond182 ? $135 : $141;
    $_v_1 = $_183;
    label = 24;
    break;
   case 24:
    $143 = $n << 1;
    $144 = ___gmpn_sbpi1_divappr_q($ip, $40, $143, $dp, $n, $_v_1) | 0;
    $__p_0 = $ip;
    label = 25;
    break;
   case 25:
    $146 = $__p_0 + 4 | 0;
    $147 = HEAP32[$__p_0 >> 2] | 0;
    $148 = $147 - 1 | 0;
    HEAP32[$__p_0 >> 2] = $148;
    $149 = ($147 | 0) == 0;
    if ($149) {
      $__p_0 = $146;
      label = 25;
      break;
    } else {
      $_0 = 1;
      label = 26;
      break;
    }
   case 26:
    return $_0 | 0;
  }
  return 0;
}
function _mpn_add_nc345($rp, $up, $vp, $n, $ci) {
  $rp = $rp | 0;
  $up = $up | 0;
  $vp = $vp | 0;
  $n = $n | 0;
  $ci = $ci | 0;
  var $1 = 0;
  $1 = ___gmpn_add_n($rp, $up, $vp, $n) | 0;
  return (___gmpn_add_1($rp, $rp, $n, $ci) | 0) + $1 | 0;
}
function ___gmpn_invertappr($ip, $dp, $n, $scratch) {
  $ip = $ip | 0;
  $dp = $dp | 0;
  $n = $n | 0;
  $scratch = $scratch | 0;
  var $__tmp_marker = 0, $1 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, $11 = 0, $12 = 0, $_0 = 0, $14 = 0, $16 = 0, $18 = 0, $res_0 = 0, $20 = 0, $21 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    $1 = ($scratch | 0) == 0;
    if ($1) {
      label = 2;
      break;
    } else {
      $_0 = $scratch;
      label = 6;
      break;
    }
   case 2:
    $3 = $n * 12 & -1;
    $4 = $3 + 8 | 0;
    $5 = $4 >>> 0 < 65536;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $7 = STACKTOP;
    STACKTOP = STACKTOP + $4 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $11 = $7;
    label = 5;
    break;
   case 4:
    $9 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $4) | 0;
    $11 = $9;
    label = 5;
    break;
   case 5:
    $12 = $11;
    $_0 = $12;
    label = 6;
    break;
   case 6:
    $14 = ($n | 0) > 199;
    if ($14) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $16 = _mpn_bc_invertappr($ip, $dp, $n, $_0) | 0;
    $res_0 = $16;
    label = 9;
    break;
   case 8:
    $18 = ___gmpn_ni_invertappr($ip, $dp, $n, $_0) | 0;
    $res_0 = $18;
    label = 9;
    break;
   case 9:
    $20 = HEAP32[$__tmp_marker >> 2] | 0;
    $21 = ($20 | 0) == 0;
    if ($21) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    ___gmp_tmp_reentrant_free($20);
    label = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return $res_0 | 0;
  }
  return 0;
}
function ___gmpn_binvert_itch($n) {
  $n = $n | 0;
  var $1 = 0;
  $1 = ___gmpn_mulmod_bnm1_next_size($n) | 0;
  return (_mpn_mulmod_bnm1_itch348($1, $n, $n + 1 >> 1) | 0) + $1 | 0;
}
function ___gmpn_binvert($rp, $up, $n, $scratch) {
  $rp = $rp | 0;
  $up = $up | 0;
  $n = $n | 0;
  $scratch = $scratch | 0;
  var $scratch61 = 0, $sizes = 0, $1 = 0, $2 = 0, $rn_056 = 0, $sizp_055 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $rn_0_lcssa = 0, $sizp_0_lcssa = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $rn_153 = 0, $sizp_152 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $scratch61 = $scratch;
    $sizes = STACKTOP;
    STACKTOP = STACKTOP + 92 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $1 = $sizes | 0;
    $2 = ($n | 0) > 299;
    if ($2) {
      $sizp_055 = $1;
      $rn_056 = $n;
      label = 2;
      break;
    } else {
      $sizp_0_lcssa = $1;
      $rn_0_lcssa = $n;
      label = 3;
      break;
    }
   case 2:
    $3 = $sizp_055 + 4 | 0;
    HEAP32[$sizp_055 >> 2] = $rn_056;
    $4 = $rn_056 + 1 | 0;
    $5 = $4 >> 1;
    $6 = ($5 | 0) > 299;
    if ($6) {
      $sizp_055 = $3;
      $rn_056 = $5;
      label = 2;
      break;
    } else {
      $sizp_0_lcssa = $3;
      $rn_0_lcssa = $5;
      label = 3;
      break;
    }
   case 3:
    $7 = ($rn_0_lcssa | 0) == 0;
    if ($7) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $8 = $rn_0_lcssa << 2;
    _memset($scratch61 | 0, 0, $8 | 0);
    label = 5;
    break;
   case 5:
    HEAP32[$scratch >> 2] = 1;
    $10 = HEAP32[$up >> 2] | 0;
    $11 = $10 >>> 1;
    $12 = $11 & 127;
    $13 = $12 + 15720 | 0;
    $14 = HEAP8[$13] | 0;
    $15 = $14 & 255;
    $16 = $15 << 1;
    $17 = Math_imul($15, $10);
    $18 = Math_imul($17, $15);
    $19 = $16 - $18 | 0;
    $20 = $19 << 1;
    $21 = Math_imul($19, $10);
    $22 = Math_imul($21, $19);
    $23 = ($rn_0_lcssa | 0) > 179;
    $24 = $22 - $20 | 0;
    if ($23) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    ___gmpn_sbpi1_bdiv_q($rp, $scratch, $rn_0_lcssa, $up, $rn_0_lcssa, $24);
    label = 8;
    break;
   case 7:
    ___gmpn_dcpi1_bdiv_q($rp, $scratch, $rn_0_lcssa, $up, $rn_0_lcssa, $24);
    label = 8;
    break;
   case 8:
    $27 = ($rn_0_lcssa | 0) < ($n | 0);
    if ($27) {
      $sizp_152 = $sizp_0_lcssa;
      $rn_153 = $rn_0_lcssa;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $28 = $sizp_152 - 4 | 0;
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = ___gmpn_mulmod_bnm1_next_size($29) | 0;
    $31 = $scratch + ($30 << 2) | 0;
    ___gmpn_mulmod_bnm1($scratch, $30, $up, $29, $rp, $rn_153, $31);
    $32 = $29 + $rn_153 | 0;
    $33 = $32 - $30 | 0;
    $34 = ___gmpn_sub_1($31, $scratch, $33, 1) | 0;
    $35 = $rp + ($rn_153 << 2) | 0;
    $36 = $scratch + ($rn_153 << 2) | 0;
    $37 = $29 - $rn_153 | 0;
    ___gmpn_mullo_n($35, $rp, $36, $37);
    $38 = ___gmpn_neg($35, $35, $37) | 0;
    $39 = ($29 | 0) < ($n | 0);
    if ($39) {
      $sizp_152 = $28;
      $rn_153 = $29;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpn_bc_mulmod_bnm1($rp, $ap, $bp, $rn, $tp) {
  $rp = $rp | 0;
  $ap = $ap | 0;
  $bp = $bp | 0;
  $rn = $rn | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $uadd$0 = 0, $uadd$1 = 0, $4 = 0, $5 = 0, $__p_0 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    ___gmpn_mul_n($tp, $ap, $bp, $rn);
    $1 = $tp + ($rn << 2) | 0;
    $2 = ___gmpn_add_n($rp, $tp, $1, $rn) | 0;
    $3 = HEAP32[$rp >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($3 | 0, $2 | 0) | 0;
    $uadd$1 = tempRet0;
    $4 = $uadd$0;
    HEAP32[$rp >> 2] = $4;
    $5 = $uadd$1;
    if ($5) {
      $__p_0 = $rp;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $6 = $__p_0 + 4 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $7 + 1 | 0;
    HEAP32[$6 >> 2] = $8;
    $9 = ($8 | 0) == 0;
    if ($9) {
      $__p_0 = $6;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    return;
  }
}
function ___gmpn_mulmod_bnm1($rp, $rn, $ap, $an, $bp, $bn, $tp) {
  $rp = $rp | 0;
  $rn = $rn | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $bp = $bp | 0;
  $bn = $bn | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $or_cond = 0, $5 = 0, $7 = 0, $8 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $uadd$0 = 0, $uadd$1 = 0, $17 = 0, $18 = 0, $__p_0 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $uadd261$0 = 0, $uadd261$1 = 0, $32 = 0, $33 = 0, $__p3_0 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $uadd262$0 = 0, $uadd262$1 = 0, $45 = 0, $46 = 0, $__p5_0 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $so_0 = 0, $bnm_0 = 0, $bm1_0 = 0, $55 = 0, $_sum258 = 0, $56 = 0, $57 = 0, $_sum259 = 0, $58 = 0, $59 = 0, $uadd260$0 = 0, $uadd260$1 = 0, $60 = 0, $61 = 0, $__p7_0 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $ap1_0 = 0, $anp_0 = 0, $69 = 0, $71 = 0, $_sum252 = 0, $_sum253 = 0, $_sum254 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $_sum255 = 0, $77 = 0, $78 = 0, $uadd256$0 = 0, $uadd256$1 = 0, $79 = 0, $80 = 0, $__p9_0 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $_sum257 = 0, $85 = 0, $86 = 0, $87 = 0, $bp1_0 = 0, $bnp_0 = 0, $89 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $mask_0268 = 0, $k_0267 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $k_0_lcssa = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $uadd251$0 = 0, $uadd251$1 = 0, $115 = 0, $116 = 0, $__p11_0 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $uadd247$0 = 0, $uadd247$1 = 0, $137 = 0, $138 = 0, $__p13_0 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $_sum = 0, $_sum248 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $__p15_0 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $rn & 1;
    $2 = ($1 | 0) == 0;
    $3 = ($rn | 0) > 15;
    $or_cond = $2 & $3;
    if ($or_cond) {
      label = 8;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = ($bn | 0) < ($rn | 0);
    if ($5) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    $7 = $bn + $an | 0;
    $8 = ($7 | 0) > ($rn | 0);
    if ($8) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $10 = ___gmpn_mul($rp, $ap, $an, $bp, $bn) | 0;
    label = 39;
    break;
   case 5:
    $12 = ___gmpn_mul($tp, $ap, $an, $bp, $bn) | 0;
    $13 = $tp + ($rn << 2) | 0;
    $14 = $7 - $rn | 0;
    $15 = ___gmpn_add($rp, $tp, $rn, $13, $14) | 0;
    $16 = HEAP32[$rp >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($16 | 0, $15 | 0) | 0;
    $uadd$1 = tempRet0;
    $17 = $uadd$0;
    HEAP32[$rp >> 2] = $17;
    $18 = $uadd$1;
    if ($18) {
      $__p_0 = $rp;
      label = 6;
      break;
    } else {
      label = 39;
      break;
    }
   case 6:
    $19 = $__p_0 + 4 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $20 + 1 | 0;
    HEAP32[$19 >> 2] = $21;
    $22 = ($21 | 0) == 0;
    if ($22) {
      $__p_0 = $19;
      label = 6;
      break;
    } else {
      label = 39;
      break;
    }
   case 7:
    ___gmpn_bc_mulmod_bnm1($rp, $ap, $bp, $rn, $tp);
    label = 39;
    break;
   case 8:
    $25 = $rn >> 1;
    $26 = ($25 | 0) < ($an | 0);
    if ($26) {
      label = 9;
      break;
    } else {
      label = 19;
      break;
    }
   case 9:
    $28 = $ap + ($25 << 2) | 0;
    $29 = $an - $25 | 0;
    $30 = ___gmpn_add($tp, $ap, $25, $28, $29) | 0;
    $31 = HEAP32[$tp >> 2] | 0;
    $uadd261$0 = _llvm_uadd_with_overflow_i32($31 | 0, $30 | 0) | 0;
    $uadd261$1 = tempRet0;
    $32 = $uadd261$0;
    HEAP32[$tp >> 2] = $32;
    $33 = $uadd261$1;
    if ($33) {
      $__p3_0 = $tp;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $34 = $__p3_0 + 4 | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    $36 = $35 + 1 | 0;
    HEAP32[$34 >> 2] = $36;
    $37 = ($36 | 0) == 0;
    if ($37) {
      $__p3_0 = $34;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $38 = ($25 | 0) < ($bn | 0);
    $39 = $tp + ($25 << 2) | 0;
    if ($38) {
      label = 12;
      break;
    } else {
      $bm1_0 = $bp;
      $bnm_0 = $bn;
      $so_0 = $39;
      label = 15;
      break;
    }
   case 12:
    $41 = $bp + ($25 << 2) | 0;
    $42 = $bn - $25 | 0;
    $43 = ___gmpn_add($39, $bp, $25, $41, $42) | 0;
    $44 = HEAP32[$39 >> 2] | 0;
    $uadd262$0 = _llvm_uadd_with_overflow_i32($44 | 0, $43 | 0) | 0;
    $uadd262$1 = tempRet0;
    $45 = $uadd262$0;
    HEAP32[$39 >> 2] = $45;
    $46 = $uadd262$1;
    if ($46) {
      $__p5_0 = $39;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $47 = $__p5_0 + 4 | 0;
    $48 = HEAP32[$47 >> 2] | 0;
    $49 = $48 + 1 | 0;
    HEAP32[$47 >> 2] = $49;
    $50 = ($49 | 0) == 0;
    if ($50) {
      $__p5_0 = $47;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $51 = $25 << 1;
    $52 = $tp + ($51 << 2) | 0;
    $bm1_0 = $39;
    $bnm_0 = $25;
    $so_0 = $52;
    label = 15;
    break;
   case 15:
    ___gmpn_mulmod_bnm1($rp, $25, $tp, $25, $bm1_0, $bnm_0, $so_0);
    if ($26) {
      label = 16;
      break;
    } else {
      $anp_0 = $an;
      $ap1_0 = $ap;
      label = 20;
      break;
    }
   case 16:
    $55 = $25 << 1;
    $_sum258 = $55 + 2 | 0;
    $56 = $tp + ($_sum258 << 2) | 0;
    $57 = ___gmpn_sub($56, $ap, $25, $28, $29) | 0;
    $_sum259 = $_sum258 + $25 | 0;
    $58 = $tp + ($_sum259 << 2) | 0;
    HEAP32[$58 >> 2] = 0;
    $59 = HEAP32[$56 >> 2] | 0;
    $uadd260$0 = _llvm_uadd_with_overflow_i32($59 | 0, $57 | 0) | 0;
    $uadd260$1 = tempRet0;
    $60 = $uadd260$0;
    HEAP32[$56 >> 2] = $60;
    $61 = $uadd260$1;
    if ($61) {
      $__p7_0 = $56;
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $62 = $__p7_0 + 4 | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    $64 = $63 + 1 | 0;
    HEAP32[$62 >> 2] = $64;
    $65 = ($64 | 0) == 0;
    if ($65) {
      $__p7_0 = $62;
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $66 = HEAP32[$58 >> 2] | 0;
    $67 = $66 + $25 | 0;
    $anp_0 = $67;
    $ap1_0 = $56;
    label = 20;
    break;
   case 19:
    ___gmpn_mulmod_bnm1($rp, $25, $ap, $an, $bp, $bn, $tp);
    $anp_0 = $an;
    $ap1_0 = $ap;
    label = 20;
    break;
   case 20:
    $69 = ($25 | 0) < ($bn | 0);
    if ($69) {
      label = 21;
      break;
    } else {
      $bnp_0 = $bn;
      $bp1_0 = $bp;
      label = 24;
      break;
    }
   case 21:
    $71 = $25 << 1;
    $_sum252 = $71 + 2 | 0;
    $_sum253 = $25 + 1 | 0;
    $_sum254 = $_sum253 + $_sum252 | 0;
    $72 = $tp + ($_sum254 << 2) | 0;
    $73 = $bp + ($25 << 2) | 0;
    $74 = $bn - $25 | 0;
    $75 = ___gmpn_sub($72, $bp, $25, $73, $74) | 0;
    $76 = $71 | 1;
    $_sum255 = $_sum252 + $76 | 0;
    $77 = $tp + ($_sum255 << 2) | 0;
    HEAP32[$77 >> 2] = 0;
    $78 = HEAP32[$72 >> 2] | 0;
    $uadd256$0 = _llvm_uadd_with_overflow_i32($78 | 0, $75 | 0) | 0;
    $uadd256$1 = tempRet0;
    $79 = $uadd256$0;
    HEAP32[$72 >> 2] = $79;
    $80 = $uadd256$1;
    if ($80) {
      $__p9_0 = $72;
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    $81 = $__p9_0 + 4 | 0;
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = $82 + 1 | 0;
    HEAP32[$81 >> 2] = $83;
    $84 = ($83 | 0) == 0;
    if ($84) {
      $__p9_0 = $81;
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $_sum257 = $_sum254 + $25 | 0;
    $85 = $tp + ($_sum257 << 2) | 0;
    $86 = HEAP32[$85 >> 2] | 0;
    $87 = $86 + $25 | 0;
    $bnp_0 = $87;
    $bp1_0 = $72;
    label = 24;
    break;
   case 24:
    $89 = ($25 | 0) > 299;
    if ($89) {
      label = 25;
      break;
    } else {
      label = 29;
      break;
    }
   case 25:
    $91 = ___gmpn_fft_best_k($25, 0) | 0;
    $92 = 1 << $91;
    $93 = $92 - 1 | 0;
    $94 = $93 & $25;
    $95 = ($94 | 0) == 0;
    if ($95) {
      $k_0_lcssa = $91;
      label = 27;
      break;
    } else {
      $k_0267 = $91;
      $mask_0268 = $93;
      label = 26;
      break;
    }
   case 26:
    $96 = $k_0267 - 1 | 0;
    $97 = $mask_0268 >> 1;
    $98 = $97 & $25;
    $99 = ($98 | 0) == 0;
    if ($99) {
      $k_0_lcssa = $96;
      label = 27;
      break;
    } else {
      $k_0267 = $96;
      $mask_0268 = $97;
      label = 26;
      break;
    }
   case 27:
    $100 = ($k_0_lcssa | 0) > 3;
    if ($100) {
      label = 28;
      break;
    } else {
      label = 29;
      break;
    }
   case 28:
    $102 = ___gmpn_mul_fft($tp, $25, $ap1_0, $anp_0, $bp1_0, $bnp_0, $k_0_lcssa) | 0;
    $103 = $tp + ($25 << 2) | 0;
    HEAP32[$103 >> 2] = $102;
    label = 33;
    break;
   case 29:
    $104 = ($bp1_0 | 0) == ($bp | 0);
    if ($104) {
      label = 30;
      break;
    } else {
      label = 32;
      break;
    }
   case 30:
    $106 = ___gmpn_mul($tp, $ap1_0, $anp_0, $bp1_0, $bnp_0) | 0;
    $107 = $anp_0 - $25 | 0;
    $108 = $107 + $bnp_0 | 0;
    $109 = ($108 | 0) > ($25 | 0);
    $110 = $109 & 1;
    $111 = $108 - $110 | 0;
    $112 = $tp + ($25 << 2) | 0;
    $113 = ___gmpn_sub($tp, $tp, $25, $112, $111) | 0;
    HEAP32[$112 >> 2] = 0;
    $114 = HEAP32[$tp >> 2] | 0;
    $uadd251$0 = _llvm_uadd_with_overflow_i32($114 | 0, $113 | 0) | 0;
    $uadd251$1 = tempRet0;
    $115 = $uadd251$0;
    HEAP32[$tp >> 2] = $115;
    $116 = $uadd251$1;
    if ($116) {
      $__p11_0 = $tp;
      label = 31;
      break;
    } else {
      label = 33;
      break;
    }
   case 31:
    $117 = $__p11_0 + 4 | 0;
    $118 = HEAP32[$117 >> 2] | 0;
    $119 = $118 + 1 | 0;
    HEAP32[$117 >> 2] = $119;
    $120 = ($119 | 0) == 0;
    if ($120) {
      $__p11_0 = $117;
      label = 31;
      break;
    } else {
      label = 33;
      break;
    }
   case 32:
    _mpn_bc_mulmod_bnp1($tp, $ap1_0, $bp1_0, $25, $tp);
    label = 33;
    break;
   case 33:
    $122 = $tp + ($25 << 2) | 0;
    $123 = HEAP32[$122 >> 2] | 0;
    $124 = ___gmpn_add_n($rp, $rp, $tp, $25) | 0;
    $125 = $124 + $123 | 0;
    $126 = HEAP32[$rp >> 2] | 0;
    $127 = $126 & 1;
    $128 = $125 + $127 | 0;
    $129 = ___gmpn_rshift($rp, $rp, $25, 1) | 0;
    $130 = $128 << 31;
    $131 = $128 >>> 1;
    $132 = $25 - 1 | 0;
    $133 = $rp + ($132 << 2) | 0;
    $134 = HEAP32[$133 >> 2] | 0;
    $135 = $130 | $134;
    HEAP32[$133 >> 2] = $135;
    $136 = HEAP32[$rp >> 2] | 0;
    $uadd247$0 = _llvm_uadd_with_overflow_i32($136 | 0, $131 | 0) | 0;
    $uadd247$1 = tempRet0;
    $137 = $uadd247$0;
    HEAP32[$rp >> 2] = $137;
    $138 = $uadd247$1;
    if ($138) {
      $__p13_0 = $rp;
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    $139 = $__p13_0 + 4 | 0;
    $140 = HEAP32[$139 >> 2] | 0;
    $141 = $140 + 1 | 0;
    HEAP32[$139 >> 2] = $141;
    $142 = ($141 | 0) == 0;
    if ($142) {
      $__p13_0 = $139;
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $143 = $bn + $an | 0;
    $144 = ($143 | 0) < ($rn | 0);
    if ($144) {
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 36:
    $146 = $rp + ($25 << 2) | 0;
    $147 = $143 - $25 | 0;
    $148 = ___gmpn_sub_n($146, $rp, $tp, $147) | 0;
    $149 = HEAP32[$122 >> 2] | 0;
    $_sum = $an - $25 | 0;
    $_sum248 = $_sum + $bn | 0;
    $150 = $tp + ($_sum248 << 2) | 0;
    $151 = $rp + ($_sum248 << 2) | 0;
    $152 = $rn - $143 | 0;
    $153 = _mpn_sub_nc353($150, $151, $150, $152, $148) | 0;
    $154 = $153 + $149 | 0;
    $155 = ___gmpn_sub_1($rp, $rp, $143, $154) | 0;
    label = 39;
    break;
   case 37:
    $157 = HEAP32[$122 >> 2] | 0;
    $158 = $rp + ($25 << 2) | 0;
    $159 = ___gmpn_sub_n($158, $rp, $tp, $25) | 0;
    $160 = $159 + $157 | 0;
    $161 = HEAP32[$rp >> 2] | 0;
    $162 = $161 - $160 | 0;
    HEAP32[$rp >> 2] = $162;
    $163 = $161 >>> 0 < $160 >>> 0;
    if ($163) {
      $__p15_0 = $rp;
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    $164 = $__p15_0 + 4 | 0;
    $165 = HEAP32[$164 >> 2] | 0;
    $166 = $165 - 1 | 0;
    HEAP32[$164 >> 2] = $166;
    $167 = ($165 | 0) == 0;
    if ($167) {
      $__p15_0 = $164;
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    return;
  }
}
function _mpn_bc_mulmod_bnp1($rp, $ap, $bp, $rn, $tp) {
  $rp = $rp | 0;
  $ap = $ap | 0;
  $bp = $bp | 0;
  $rn = $rn | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $uadd$0 = 0, $uadd$1 = 0, $10 = 0, $11 = 0, $__p_0 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $rn + 1 | 0;
    ___gmpn_mul_n($tp, $ap, $bp, $1);
    $2 = $rn << 1;
    $3 = $tp + ($2 << 2) | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $tp + ($rn << 2) | 0;
    $6 = ___gmpn_sub_n($rp, $tp, $5, $rn) | 0;
    $7 = $6 + $4 | 0;
    $8 = $rp + ($rn << 2) | 0;
    HEAP32[$8 >> 2] = 0;
    $9 = HEAP32[$rp >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($9 | 0, $7 | 0) | 0;
    $uadd$1 = tempRet0;
    $10 = $uadd$0;
    HEAP32[$rp >> 2] = $10;
    $11 = $uadd$1;
    if ($11) {
      $__p_0 = $rp;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $12 = $__p_0 + 4 | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13 + 1 | 0;
    HEAP32[$12 >> 2] = $14;
    $15 = ($14 | 0) == 0;
    if ($15) {
      $__p_0 = $12;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    return;
  }
}
function _mpn_sub_nc353($rp, $up, $vp, $n, $ci) {
  $rp = $rp | 0;
  $up = $up | 0;
  $vp = $vp | 0;
  $n = $n | 0;
  $ci = $ci | 0;
  var $1 = 0;
  $1 = ___gmpn_sub_n($rp, $up, $vp, $n) | 0;
  return (___gmpn_sub_1($rp, $rp, $n, $ci) | 0) + $1 | 0;
}
function ___gmpn_mulmod_bnm1_next_size($n) {
  $n = $n | 0;
  var $1 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($n | 0) > 15;
    if ($1) {
      label = 2;
      break;
    } else {
      $_0 = $n;
      label = 9;
      break;
    }
   case 2:
    $3 = ($n | 0) > 60;
    if ($3) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $5 = $n + 1 | 0;
    $6 = $5 & -2;
    $_0 = $6;
    label = 9;
    break;
   case 4:
    $8 = ($n | 0) > 120;
    if ($8) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $10 = $n + 3 | 0;
    $11 = $10 & -4;
    $_0 = $11;
    label = 9;
    break;
   case 6:
    $13 = $n + 1 | 0;
    $14 = $13 >> 1;
    $15 = ($14 | 0) > 299;
    if ($15) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $17 = $n + 7 | 0;
    $18 = $17 & -8;
    $_0 = $18;
    label = 9;
    break;
   case 8:
    $20 = ___gmpn_fft_best_k($14, 0) | 0;
    $21 = ___gmpn_fft_next_size($14, $20) | 0;
    $22 = $21 << 1;
    $_0 = $22;
    label = 9;
    break;
   case 9:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_sqrmod_bnm1($rp, $rn, $ap, $an, $tp) {
  $rp = $rp | 0;
  $rn = $rn | 0;
  $ap = $ap | 0;
  $an = $an | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $or_cond = 0, $5 = 0, $7 = 0, $8 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $uadd$0 = 0, $uadd$1 = 0, $15 = 0, $16 = 0, $__p_0 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $uadd181$0 = 0, $uadd181$1 = 0, $31 = 0, $32 = 0, $__p3_0 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $_sum178 = 0, $40 = 0, $41 = 0, $_sum179 = 0, $42 = 0, $43 = 0, $uadd180$0 = 0, $uadd180$1 = 0, $44 = 0, $45 = 0, $__p5_0 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $ap1_0 = 0, $anp_0 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $mask_0188 = 0, $k_0187 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $k_0_lcssa = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $uadd177$0 = 0, $uadd177$1 = 0, $75 = 0, $76 = 0, $__p7_0 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $uadd175$0 = 0, $uadd175$1 = 0, $97 = 0, $98 = 0, $__p9_0 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $_sum = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $__p11_0 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $rn & 1;
    $2 = ($1 | 0) == 0;
    $3 = ($rn | 0) > 15;
    $or_cond = $2 & $3;
    if ($or_cond) {
      label = 8;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = ($an | 0) < ($rn | 0);
    if ($5) {
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 3:
    $7 = $an << 1;
    $8 = ($7 | 0) > ($rn | 0);
    if ($8) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    ___gmpn_sqr($rp, $ap, $an);
    label = 32;
    break;
   case 5:
    ___gmpn_sqr($tp, $ap, $an);
    $11 = $tp + ($rn << 2) | 0;
    $12 = $7 - $rn | 0;
    $13 = ___gmpn_add($rp, $tp, $rn, $11, $12) | 0;
    $14 = HEAP32[$rp >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($14 | 0, $13 | 0) | 0;
    $uadd$1 = tempRet0;
    $15 = $uadd$0;
    HEAP32[$rp >> 2] = $15;
    $16 = $uadd$1;
    if ($16) {
      $__p_0 = $rp;
      label = 6;
      break;
    } else {
      label = 32;
      break;
    }
   case 6:
    $17 = $__p_0 + 4 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18 + 1 | 0;
    HEAP32[$17 >> 2] = $19;
    $20 = ($19 | 0) == 0;
    if ($20) {
      $__p_0 = $17;
      label = 6;
      break;
    } else {
      label = 32;
      break;
    }
   case 7:
    _mpn_bc_sqrmod_bnm1($rp, $ap, $rn, $tp);
    label = 32;
    break;
   case 8:
    $23 = $rn >> 1;
    $24 = ($23 | 0) < ($an | 0);
    if ($24) {
      label = 9;
      break;
    } else {
      label = 16;
      break;
    }
   case 9:
    $26 = $tp + ($23 << 2) | 0;
    $27 = $ap + ($23 << 2) | 0;
    $28 = $an - $23 | 0;
    $29 = ___gmpn_add($tp, $ap, $23, $27, $28) | 0;
    $30 = HEAP32[$tp >> 2] | 0;
    $uadd181$0 = _llvm_uadd_with_overflow_i32($30 | 0, $29 | 0) | 0;
    $uadd181$1 = tempRet0;
    $31 = $uadd181$0;
    HEAP32[$tp >> 2] = $31;
    $32 = $uadd181$1;
    if ($32) {
      $__p3_0 = $tp;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    ___gmpn_sqrmod_bnm1($rp, $23, $tp, $23, $26);
    label = 13;
    break;
   case 11:
    $33 = $__p3_0 + 4 | 0;
    $34 = HEAP32[$33 >> 2] | 0;
    $35 = $34 + 1 | 0;
    HEAP32[$33 >> 2] = $35;
    $36 = ($35 | 0) == 0;
    if ($36) {
      $__p3_0 = $33;
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    ___gmpn_sqrmod_bnm1($rp, $23, $tp, $23, $26);
    if ($24) {
      label = 13;
      break;
    } else {
      $anp_0 = $an;
      $ap1_0 = $ap;
      label = 17;
      break;
    }
   case 13:
    $39 = $23 << 1;
    $_sum178 = $39 + 2 | 0;
    $40 = $tp + ($_sum178 << 2) | 0;
    $41 = ___gmpn_sub($40, $ap, $23, $27, $28) | 0;
    $_sum179 = $_sum178 + $23 | 0;
    $42 = $tp + ($_sum179 << 2) | 0;
    HEAP32[$42 >> 2] = 0;
    $43 = HEAP32[$40 >> 2] | 0;
    $uadd180$0 = _llvm_uadd_with_overflow_i32($43 | 0, $41 | 0) | 0;
    $uadd180$1 = tempRet0;
    $44 = $uadd180$0;
    HEAP32[$40 >> 2] = $44;
    $45 = $uadd180$1;
    if ($45) {
      $__p5_0 = $40;
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $46 = $__p5_0 + 4 | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    $48 = $47 + 1 | 0;
    HEAP32[$46 >> 2] = $48;
    $49 = ($48 | 0) == 0;
    if ($49) {
      $__p5_0 = $46;
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $50 = HEAP32[$42 >> 2] | 0;
    $51 = $50 + $23 | 0;
    $anp_0 = $51;
    $ap1_0 = $40;
    label = 17;
    break;
   case 16:
    ___gmpn_sqrmod_bnm1($rp, $23, $ap, $an, $tp);
    $anp_0 = $an;
    $ap1_0 = $ap;
    label = 17;
    break;
   case 17:
    $53 = ($23 | 0) > 299;
    if ($53) {
      label = 18;
      break;
    } else {
      label = 22;
      break;
    }
   case 18:
    $55 = ___gmpn_fft_best_k($23, 1) | 0;
    $56 = 1 << $55;
    $57 = $56 - 1 | 0;
    $58 = $57 & $23;
    $59 = ($58 | 0) == 0;
    if ($59) {
      $k_0_lcssa = $55;
      label = 20;
      break;
    } else {
      $k_0187 = $55;
      $mask_0188 = $57;
      label = 19;
      break;
    }
   case 19:
    $60 = $k_0187 - 1 | 0;
    $61 = $mask_0188 >> 1;
    $62 = $61 & $23;
    $63 = ($62 | 0) == 0;
    if ($63) {
      $k_0_lcssa = $60;
      label = 20;
      break;
    } else {
      $k_0187 = $60;
      $mask_0188 = $61;
      label = 19;
      break;
    }
   case 20:
    $64 = ($k_0_lcssa | 0) > 3;
    if ($64) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    $66 = ___gmpn_mul_fft($tp, $23, $ap1_0, $anp_0, $ap1_0, $anp_0, $k_0_lcssa) | 0;
    $67 = $tp + ($23 << 2) | 0;
    HEAP32[$67 >> 2] = $66;
    label = 26;
    break;
   case 22:
    $68 = ($ap1_0 | 0) == ($ap | 0);
    if ($68) {
      label = 23;
      break;
    } else {
      label = 25;
      break;
    }
   case 23:
    ___gmpn_sqr($tp, $ap, $an);
    $70 = $an << 1;
    $71 = $70 - $23 | 0;
    $72 = $tp + ($23 << 2) | 0;
    $73 = ___gmpn_sub($tp, $tp, $23, $72, $71) | 0;
    HEAP32[$72 >> 2] = 0;
    $74 = HEAP32[$tp >> 2] | 0;
    $uadd177$0 = _llvm_uadd_with_overflow_i32($74 | 0, $73 | 0) | 0;
    $uadd177$1 = tempRet0;
    $75 = $uadd177$0;
    HEAP32[$tp >> 2] = $75;
    $76 = $uadd177$1;
    if ($76) {
      $__p7_0 = $tp;
      label = 24;
      break;
    } else {
      label = 26;
      break;
    }
   case 24:
    $77 = $__p7_0 + 4 | 0;
    $78 = HEAP32[$77 >> 2] | 0;
    $79 = $78 + 1 | 0;
    HEAP32[$77 >> 2] = $79;
    $80 = ($79 | 0) == 0;
    if ($80) {
      $__p7_0 = $77;
      label = 24;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    _mpn_bc_sqrmod_bnp1($tp, $ap1_0, $23, $tp);
    label = 26;
    break;
   case 26:
    $82 = $tp + ($23 << 2) | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = ___gmpn_add_n($rp, $rp, $tp, $23) | 0;
    $85 = $84 + $83 | 0;
    $86 = HEAP32[$rp >> 2] | 0;
    $87 = $86 & 1;
    $88 = $85 + $87 | 0;
    $89 = ___gmpn_rshift($rp, $rp, $23, 1) | 0;
    $90 = $88 << 31;
    $91 = $88 >>> 1;
    $92 = $23 - 1 | 0;
    $93 = $rp + ($92 << 2) | 0;
    $94 = HEAP32[$93 >> 2] | 0;
    $95 = $90 | $94;
    HEAP32[$93 >> 2] = $95;
    $96 = HEAP32[$rp >> 2] | 0;
    $uadd175$0 = _llvm_uadd_with_overflow_i32($96 | 0, $91 | 0) | 0;
    $uadd175$1 = tempRet0;
    $97 = $uadd175$0;
    HEAP32[$rp >> 2] = $97;
    $98 = $uadd175$1;
    if ($98) {
      $__p9_0 = $rp;
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    $99 = $__p9_0 + 4 | 0;
    $100 = HEAP32[$99 >> 2] | 0;
    $101 = $100 + 1 | 0;
    HEAP32[$99 >> 2] = $101;
    $102 = ($101 | 0) == 0;
    if ($102) {
      $__p9_0 = $99;
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $103 = $an << 1;
    $104 = ($103 | 0) < ($rn | 0);
    if ($104) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    $106 = $rp + ($23 << 2) | 0;
    $107 = $103 - $23 | 0;
    $108 = ___gmpn_sub_n($106, $rp, $tp, $107) | 0;
    $109 = HEAP32[$82 >> 2] | 0;
    $_sum = $103 - $23 | 0;
    $110 = $tp + ($_sum << 2) | 0;
    $111 = $rp + ($_sum << 2) | 0;
    $112 = $rn - $103 | 0;
    $113 = _mpn_sub_nc358($110, $111, $110, $112, $108) | 0;
    $114 = $113 + $109 | 0;
    $115 = ___gmpn_sub_1($rp, $rp, $103, $114) | 0;
    label = 32;
    break;
   case 30:
    $117 = HEAP32[$82 >> 2] | 0;
    $118 = $rp + ($23 << 2) | 0;
    $119 = ___gmpn_sub_n($118, $rp, $tp, $23) | 0;
    $120 = $119 + $117 | 0;
    $121 = HEAP32[$rp >> 2] | 0;
    $122 = $121 - $120 | 0;
    HEAP32[$rp >> 2] = $122;
    $123 = $121 >>> 0 < $120 >>> 0;
    if ($123) {
      $__p11_0 = $rp;
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 31:
    $124 = $__p11_0 + 4 | 0;
    $125 = HEAP32[$124 >> 2] | 0;
    $126 = $125 - 1 | 0;
    HEAP32[$124 >> 2] = $126;
    $127 = ($125 | 0) == 0;
    if ($127) {
      $__p11_0 = $124;
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    return;
  }
}
function _mpn_bc_sqrmod_bnm1($rp, $ap, $rn, $tp) {
  $rp = $rp | 0;
  $ap = $ap | 0;
  $rn = $rn | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $uadd$0 = 0, $uadd$1 = 0, $4 = 0, $5 = 0, $__p_0 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    ___gmpn_sqr($tp, $ap, $rn);
    $1 = $tp + ($rn << 2) | 0;
    $2 = ___gmpn_add_n($rp, $tp, $1, $rn) | 0;
    $3 = HEAP32[$rp >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($3 | 0, $2 | 0) | 0;
    $uadd$1 = tempRet0;
    $4 = $uadd$0;
    HEAP32[$rp >> 2] = $4;
    $5 = $uadd$1;
    if ($5) {
      $__p_0 = $rp;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $6 = $__p_0 + 4 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $7 + 1 | 0;
    HEAP32[$6 >> 2] = $8;
    $9 = ($8 | 0) == 0;
    if ($9) {
      $__p_0 = $6;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    return;
  }
}
function _mpn_bc_sqrmod_bnp1($rp, $ap, $rn, $tp) {
  $rp = $rp | 0;
  $ap = $ap | 0;
  $rn = $rn | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $uadd$0 = 0, $uadd$1 = 0, $10 = 0, $11 = 0, $__p_0 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $rn + 1 | 0;
    ___gmpn_sqr($tp, $ap, $1);
    $2 = $rn << 1;
    $3 = $tp + ($2 << 2) | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $tp + ($rn << 2) | 0;
    $6 = ___gmpn_sub_n($rp, $tp, $5, $rn) | 0;
    $7 = $6 + $4 | 0;
    $8 = $rp + ($rn << 2) | 0;
    HEAP32[$8 >> 2] = 0;
    $9 = HEAP32[$rp >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($9 | 0, $7 | 0) | 0;
    $uadd$1 = tempRet0;
    $10 = $uadd$0;
    HEAP32[$rp >> 2] = $10;
    $11 = $uadd$1;
    if ($11) {
      $__p_0 = $rp;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $12 = $__p_0 + 4 | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13 + 1 | 0;
    HEAP32[$12 >> 2] = $14;
    $15 = ($14 | 0) == 0;
    if ($15) {
      $__p_0 = $12;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    return;
  }
}
function _mpn_sub_nc358($rp, $up, $vp, $n, $ci) {
  $rp = $rp | 0;
  $up = $up | 0;
  $vp = $vp | 0;
  $n = $n | 0;
  $ci = $ci | 0;
  var $1 = 0;
  $1 = ___gmpn_sub_n($rp, $up, $vp, $n) | 0;
  return (___gmpn_sub_1($rp, $rp, $n, $ci) | 0) + $1 | 0;
}
function ___gmpn_sqrmod_bnm1_next_size($n) {
  $n = $n | 0;
  var $1 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($n | 0) > 15;
    if ($1) {
      label = 2;
      break;
    } else {
      $_0 = $n;
      label = 9;
      break;
    }
   case 2:
    $3 = ($n | 0) > 60;
    if ($3) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $5 = $n + 1 | 0;
    $6 = $5 & -2;
    $_0 = $6;
    label = 9;
    break;
   case 4:
    $8 = ($n | 0) > 120;
    if ($8) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $10 = $n + 3 | 0;
    $11 = $10 & -4;
    $_0 = $11;
    label = 9;
    break;
   case 6:
    $13 = $n + 1 | 0;
    $14 = $13 >> 1;
    $15 = ($14 | 0) > 359;
    if ($15) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $17 = $n + 7 | 0;
    $18 = $17 & -8;
    $_0 = $18;
    label = 9;
    break;
   case 8:
    $20 = ___gmpn_fft_best_k($14, 1) | 0;
    $21 = ___gmpn_fft_next_size($14, $20) | 0;
    $22 = $21 << 1;
    $_0 = $22;
    label = 9;
    break;
   case 9:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_div_qr_2n_pi1($qp, $rp, $np, $nn, $d1, $d0, $di) {
  $qp = $qp | 0;
  $rp = $rp | 0;
  $np = $np | 0;
  $nn = $nn | 0;
  $d1 = $d1 | 0;
  $d0 = $d0 | 0;
  $di = $di | 0;
  var $1 = 0, $2 = 0, $_sum = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $or_cond = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $r0_0 = 0, $r1_0 = 0, $qh_0 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $_0109 = 0, $i_0108 = 0, $r1_1107 = 0, $r0_1106 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $uadd$0 = 0, $uadd$1 = 0, $33 = 0, $34 = 0, $35 = 0, $__x3_0 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $uadd96$0 = 0, $uadd96$1 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $uadd97$0 = 0, $uadd97$1 = 0, $58 = 0, $59 = 0, $60 = 0, $__x39_0 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $_neg103 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $uadd98$0 = 0, $uadd98$1 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $or_cond99 = 0, $90 = 0, $91 = 0, $92 = 0, $sum = 0, $93 = 0, $q_0 = 0, $r0_2 = 0, $r1_2 = 0, $95 = 0, $96 = 0, $97 = 0, $r1_1_lcssa = 0, $r0_1_lcssa = 0, $98 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $nn - 2 | 0;
    $2 = $np + ($1 << 2) | 0;
    $_sum = $nn - 1 | 0;
    $3 = $np + ($_sum << 2) | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = HEAP32[$2 >> 2] | 0;
    $6 = $4 >>> 0 < $d1 >>> 0;
    if ($6) {
      $qh_0 = 0;
      $r1_0 = $4;
      $r0_0 = $5;
      label = 4;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $8 = $4 >>> 0 <= $d1 >>> 0;
    $9 = $5 >>> 0 < $d0 >>> 0;
    $or_cond = $8 & $9;
    if ($or_cond) {
      $qh_0 = 0;
      $r1_0 = $4;
      $r0_0 = $5;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $11 = $5 - $d0 | 0;
    $12 = $4 - $d1 | 0;
    $13 = $9 & 1;
    $14 = $12 - $13 | 0;
    $qh_0 = 1;
    $r1_0 = $14;
    $r0_0 = $11;
    label = 4;
    break;
   case 4:
    $16 = $nn - 3 | 0;
    $17 = ($16 | 0) > -1;
    if ($17) {
      label = 5;
      break;
    } else {
      $r0_1_lcssa = $r0_0;
      $r1_1_lcssa = $r1_0;
      label = 10;
      break;
    }
   case 5:
    $18 = $di & 65535;
    $19 = $di >>> 16;
    $20 = $d0 & 65535;
    $21 = $d0 >>> 16;
    $r0_1106 = $r0_0;
    $r1_1107 = $r1_0;
    $i_0108 = $16;
    $_0109 = $2;
    label = 6;
    break;
   case 6:
    $23 = $_0109 - 4 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $r1_1107 & 65535;
    $26 = $r1_1107 >>> 16;
    $27 = Math_imul($25, $18);
    $28 = Math_imul($25, $19);
    $29 = Math_imul($26, $18);
    $30 = Math_imul($26, $19);
    $31 = $27 >>> 16;
    $32 = $31 + $28 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($32 | 0, $29 | 0) | 0;
    $uadd$1 = tempRet0;
    $33 = $uadd$0;
    $34 = $uadd$1;
    $35 = $30 + 65536 | 0;
    $__x3_0 = $34 ? $35 : $30;
    $36 = $33 >>> 16;
    $37 = $33 << 16;
    $38 = $27 & 65535;
    $39 = $37 | $38;
    $uadd96$0 = _llvm_uadd_with_overflow_i32($39 | 0, $r0_1106 | 0) | 0;
    $uadd96$1 = tempRet0;
    $40 = $uadd96$0;
    $41 = $uadd96$1;
    $42 = $41 & 1;
    $43 = $36 + $r1_1107 | 0;
    $44 = $43 + $__x3_0 | 0;
    $45 = $44 + $42 | 0;
    $46 = Math_imul($45, $d1);
    $47 = $24 - $d0 | 0;
    $48 = $24 >>> 0 < $d0 >>> 0;
    $49 = $48 & 1;
    $50 = $45 & 65535;
    $51 = $45 >>> 16;
    $52 = Math_imul($50, $20);
    $53 = Math_imul($51, $20);
    $54 = Math_imul($50, $21);
    $55 = Math_imul($51, $21);
    $56 = $52 >>> 16;
    $57 = $56 + $53 | 0;
    $uadd97$0 = _llvm_uadd_with_overflow_i32($57 | 0, $54 | 0) | 0;
    $uadd97$1 = tempRet0;
    $58 = $uadd97$0;
    $59 = $uadd97$1;
    $60 = $55 + 65536 | 0;
    $__x39_0 = $59 ? $60 : $55;
    $61 = $58 >>> 16;
    $62 = $58 << 16;
    $63 = $52 & 65535;
    $64 = $63 | $62;
    $65 = $47 - $64 | 0;
    $66 = $47 >>> 0 < $64 >>> 0;
    $67 = $66 & 1;
    $_neg103 = $r0_1106 - $d1 | 0;
    $68 = $_neg103 - $49 | 0;
    $69 = $68 - $61 | 0;
    $70 = $69 - $46 | 0;
    $71 = $70 - $__x39_0 | 0;
    $72 = $71 - $67 | 0;
    $73 = $45 + 1 | 0;
    $74 = $72 >>> 0 >= $40 >>> 0;
    $75 = $74 & 1;
    $76 = -$75 | 0;
    $77 = $73 - $75 | 0;
    $78 = $76 & $d0;
    $uadd98$0 = _llvm_uadd_with_overflow_i32($65 | 0, $78 | 0) | 0;
    $uadd98$1 = tempRet0;
    $79 = $uadd98$0;
    $80 = $76 & $d1;
    $81 = $uadd98$1;
    $82 = $81 & 1;
    $83 = $72 + $82 | 0;
    $84 = $83 + $80 | 0;
    $85 = $84 >>> 0 < $d1 >>> 0;
    if ($85) {
      $r1_2 = $84;
      $r0_2 = $79;
      $q_0 = $77;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $87 = $84 >>> 0 <= $d1 >>> 0;
    $88 = $79 >>> 0 < $d0 >>> 0;
    $or_cond99 = $87 & $88;
    if ($or_cond99) {
      $r1_2 = $84;
      $r0_2 = $79;
      $q_0 = $77;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $90 = $77 + 1 | 0;
    $91 = $79 - $d0 | 0;
    $92 = $88 & 1;
    $sum = $92 + $d1 | 0;
    $93 = $84 - $sum | 0;
    $r1_2 = $93;
    $r0_2 = $91;
    $q_0 = $90;
    label = 9;
    break;
   case 9:
    $95 = $qp + ($i_0108 << 2) | 0;
    HEAP32[$95 >> 2] = $q_0;
    $96 = $i_0108 - 1 | 0;
    $97 = ($i_0108 | 0) > 0;
    if ($97) {
      $r0_1106 = $r0_2;
      $r1_1107 = $r1_2;
      $i_0108 = $96;
      $_0109 = $23;
      label = 6;
      break;
    } else {
      $r0_1_lcssa = $r0_2;
      $r1_1_lcssa = $r1_2;
      label = 10;
      break;
    }
   case 10:
    $98 = $rp + 4 | 0;
    HEAP32[$98 >> 2] = $r1_1_lcssa;
    HEAP32[$rp >> 2] = $r0_1_lcssa;
    return $qh_0 | 0;
  }
  return 0;
}
function ___gmpn_sbpi1_div_qr($qp, $np, $nn, $dp, $dn, $dinv) {
  $qp = $qp | 0;
  $np = $np | 0;
  $nn = $nn | 0;
  $dp = $dp | 0;
  $dn = $dn | 0;
  $dinv = $dinv | 0;
  var $_sum = 0, $1 = 0, $2 = 0, $3 = 0, $_lobit = 0, $_lobit_not = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $_sum133 = 0, $14 = 0, $_sum134 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $_sum139 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $_sum138 = 0, $23 = 0, $_0149 = 0, $_0132148 = 0, $i_0147 = 0, $n1_0146 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $uadd$0 = 0, $uadd$1 = 0, $43 = 0, $44 = 0, $45 = 0, $__x3_0 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $uadd135$0 = 0, $uadd135$1 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $uadd136$0 = 0, $uadd136$1 = 0, $70 = 0, $71 = 0, $72 = 0, $__x38_0 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $_neg143 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $uadd137$0 = 0, $uadd137$1 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $100 = 0, $or_cond = 0, $102 = 0, $103 = 0, $104 = 0, $sum = 0, $105 = 0, $q_0 = 0, $n0_0 = 0, $n1_1 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $q_1 = 0, $n1_2 = 0, $120 = 0, $121 = 0, $122 = 0, $scevgep = 0, $_0132_lcssa = 0, $n1_0_lcssa = 0, $124 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $_sum = $nn - $dn | 0;
    $1 = $np + ($_sum << 2) | 0;
    $2 = ___gmpn_cmp($1, $dp, $dn) | 0;
    $3 = ($2 | 0) > -1;
    $_lobit = $2 >>> 31;
    $_lobit_not = $_lobit ^ 1;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $5 = ___gmpn_sub_n($1, $1, $dp, $dn) | 0;
    label = 3;
    break;
   case 3:
    $7 = $nn - $dn | 0;
    $8 = $dn - 2 | 0;
    $9 = $dn - 1 | 0;
    $10 = $dp + ($9 << 2) | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $dp + ($8 << 2) | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $_sum133 = $nn - 2 | 0;
    $14 = $np + ($_sum133 << 2) | 0;
    $_sum134 = $nn - 1 | 0;
    $15 = $np + ($_sum134 << 2) | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = ($7 | 0) > 0;
    if ($17) {
      label = 4;
      break;
    } else {
      $n1_0_lcssa = $16;
      $_0132_lcssa = $14;
      label = 15;
      break;
    }
   case 4:
    $18 = $qp + ($7 << 2) | 0;
    $_sum139 = 1 - $dn | 0;
    $19 = $dinv & 65535;
    $20 = $dinv >>> 16;
    $21 = $13 & 65535;
    $22 = $13 >>> 16;
    $_sum138 = 1 - $dn | 0;
    $23 = $dn - 2 | 0;
    $n1_0146 = $16;
    $i_0147 = $7;
    $_0132148 = $14;
    $_0149 = $18;
    label = 5;
    break;
   case 5:
    $25 = $_0132148 - 4 | 0;
    $26 = ($n1_0146 | 0) == ($11 | 0);
    if ($26) {
      label = 6;
      break;
    } else {
      label = 8;
      break;
    }
   case 6:
    $28 = HEAP32[$_0132148 >> 2] | 0;
    $29 = ($28 | 0) == ($13 | 0);
    if ($29) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $31 = $_0132148 + ($_sum139 << 2) | 0;
    $32 = ___gmpn_submul_1($31, $dp, $dn, -1) | 0;
    $33 = HEAP32[$_0132148 >> 2] | 0;
    $n1_2 = $33;
    $q_1 = -1;
    label = 13;
    break;
   case 8:
    $35 = $n1_0146 & 65535;
    $36 = $n1_0146 >>> 16;
    $37 = Math_imul($35, $19);
    $38 = Math_imul($35, $20);
    $39 = Math_imul($36, $19);
    $40 = Math_imul($36, $20);
    $41 = $37 >>> 16;
    $42 = $41 + $38 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($42 | 0, $39 | 0) | 0;
    $uadd$1 = tempRet0;
    $43 = $uadd$0;
    $44 = $uadd$1;
    $45 = $40 + 65536 | 0;
    $__x3_0 = $44 ? $45 : $40;
    $46 = $43 >>> 16;
    $47 = $43 << 16;
    $48 = $37 & 65535;
    $49 = $47 | $48;
    $50 = HEAP32[$_0132148 >> 2] | 0;
    $uadd135$0 = _llvm_uadd_with_overflow_i32($49 | 0, $50 | 0) | 0;
    $uadd135$1 = tempRet0;
    $51 = $uadd135$0;
    $52 = $uadd135$1;
    $53 = $52 & 1;
    $54 = $46 + $n1_0146 | 0;
    $55 = $54 + $__x3_0 | 0;
    $56 = $55 + $53 | 0;
    $57 = Math_imul($56, $11);
    $58 = HEAP32[$25 >> 2] | 0;
    $59 = $58 - $13 | 0;
    $60 = $58 >>> 0 < $13 >>> 0;
    $61 = $60 & 1;
    $62 = $56 & 65535;
    $63 = $56 >>> 16;
    $64 = Math_imul($62, $21);
    $65 = Math_imul($63, $21);
    $66 = Math_imul($62, $22);
    $67 = Math_imul($63, $22);
    $68 = $64 >>> 16;
    $69 = $68 + $65 | 0;
    $uadd136$0 = _llvm_uadd_with_overflow_i32($69 | 0, $66 | 0) | 0;
    $uadd136$1 = tempRet0;
    $70 = $uadd136$0;
    $71 = $uadd136$1;
    $72 = $67 + 65536 | 0;
    $__x38_0 = $71 ? $72 : $67;
    $73 = $70 >>> 16;
    $74 = $70 << 16;
    $75 = $64 & 65535;
    $76 = $75 | $74;
    $77 = $59 - $76 | 0;
    $78 = $59 >>> 0 < $76 >>> 0;
    $79 = $78 & 1;
    $_neg143 = $50 - $11 | 0;
    $80 = $_neg143 - $61 | 0;
    $81 = $80 - $57 | 0;
    $82 = $81 - $73 | 0;
    $83 = $82 - $__x38_0 | 0;
    $84 = $83 - $79 | 0;
    $85 = $56 + 1 | 0;
    $86 = $84 >>> 0 >= $51 >>> 0;
    $87 = $86 & 1;
    $88 = -$87 | 0;
    $89 = $85 - $87 | 0;
    $90 = $13 & $88;
    $uadd137$0 = _llvm_uadd_with_overflow_i32($77 | 0, $90 | 0) | 0;
    $uadd137$1 = tempRet0;
    $91 = $uadd137$0;
    $92 = $11 & $88;
    $93 = $uadd137$1;
    $94 = $93 & 1;
    $95 = $84 + $94 | 0;
    $96 = $95 + $92 | 0;
    $97 = $96 >>> 0 < $11 >>> 0;
    if ($97) {
      $n1_1 = $96;
      $n0_0 = $91;
      $q_0 = $89;
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $99 = $96 >>> 0 <= $11 >>> 0;
    $100 = $91 >>> 0 < $13 >>> 0;
    $or_cond = $99 & $100;
    if ($or_cond) {
      $n1_1 = $96;
      $n0_0 = $91;
      $q_0 = $89;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $102 = $89 + 1 | 0;
    $103 = $91 - $13 | 0;
    $104 = $100 & 1;
    $sum = $104 + $11 | 0;
    $105 = $96 - $sum | 0;
    $n1_1 = $105;
    $n0_0 = $103;
    $q_0 = $102;
    label = 11;
    break;
   case 11:
    $107 = $_0132148 + ($_sum138 << 2) | 0;
    $108 = ___gmpn_submul_1($107, $dp, $8, $q_0) | 0;
    $109 = $n0_0 >>> 0 < $108 >>> 0;
    $110 = $109 & 1;
    $111 = $n0_0 - $108 | 0;
    $112 = $n1_1 >>> 0 < $110 >>> 0;
    $113 = $n1_1 - $110 | 0;
    HEAP32[$25 >> 2] = $111;
    if ($112) {
      label = 12;
      break;
    } else {
      $n1_2 = $113;
      $q_1 = $q_0;
      label = 13;
      break;
    }
   case 12:
    $115 = ___gmpn_add_n($107, $107, $dp, $9) | 0;
    $116 = $113 + $11 | 0;
    $117 = $116 + $115 | 0;
    $118 = $q_0 - 1 | 0;
    $n1_2 = $117;
    $q_1 = $118;
    label = 13;
    break;
   case 13:
    $120 = $_0149 - 4 | 0;
    HEAP32[$120 >> 2] = $q_1;
    $121 = $i_0147 - 1 | 0;
    $122 = ($121 | 0) > 0;
    if ($122) {
      $n1_0146 = $n1_2;
      $i_0147 = $121;
      $_0132148 = $25;
      $_0149 = $120;
      label = 5;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $scevgep = $np + ($23 << 2) | 0;
    $n1_0_lcssa = $n1_2;
    $_0132_lcssa = $scevgep;
    label = 15;
    break;
   case 15:
    $124 = $_0132_lcssa + 4 | 0;
    HEAP32[$124 >> 2] = $n1_0_lcssa;
    return $_lobit_not | 0;
  }
  return 0;
}
function ___gmpn_dcpi1_div_qr_n($qp, $np, $dp, $n, $dinv, $tp) {
  $qp = $qp | 0;
  $np = $np | 0;
  $dp = $dp | 0;
  $n = $n | 0;
  $dinv = $dinv | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $qh_0 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $cy_0_ph = 0, $qh_1_ph = 0, $25 = 0, $qh_191 = 0, $cy_090 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $qh_1_lcssa = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $ql_0 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $46 = 0, $cy_1_ph = 0, $47 = 0, $cy_188 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n >> 1;
    $2 = $n - $1 | 0;
    $3 = ($2 | 0) > 49;
    $4 = $qp + ($1 << 2) | 0;
    $5 = $1 << 1;
    $6 = $np + ($5 << 2) | 0;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $8 = $2 << 1;
    $9 = $dp + ($1 << 2) | 0;
    $10 = $dinv | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = ___gmpn_sbpi1_div_qr($4, $6, $8, $9, $2, $11) | 0;
    $qh_0 = $12;
    label = 4;
    break;
   case 3:
    $14 = $dp + ($1 << 2) | 0;
    $15 = ___gmpn_dcpi1_div_qr_n($4, $6, $14, $2, $dinv, $tp) | 0;
    $qh_0 = $15;
    label = 4;
    break;
   case 4:
    $17 = ___gmpn_mul($tp, $4, $2, $dp, $1) | 0;
    $18 = $np + ($1 << 2) | 0;
    $19 = ___gmpn_sub_n($18, $18, $tp, $n) | 0;
    $20 = ($qh_0 | 0) == 0;
    if ($20) {
      $qh_1_ph = 0;
      $cy_0_ph = $19;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $22 = $np + ($n << 2) | 0;
    $23 = ___gmpn_sub_n($22, $22, $dp, $1) | 0;
    $24 = $23 + $19 | 0;
    $qh_1_ph = $qh_0;
    $cy_0_ph = $24;
    label = 6;
    break;
   case 6:
    $25 = ($cy_0_ph | 0) == 0;
    if ($25) {
      $qh_1_lcssa = $qh_1_ph;
      label = 8;
      break;
    } else {
      $cy_090 = $cy_0_ph;
      $qh_191 = $qh_1_ph;
      label = 7;
      break;
    }
   case 7:
    $26 = ___gmpn_sub_1($4, $4, $2, 1) | 0;
    $27 = $qh_191 - $26 | 0;
    $28 = ___gmpn_add_n($18, $18, $dp, $n) | 0;
    $29 = $cy_090 - $28 | 0;
    $30 = ($cy_090 | 0) == ($28 | 0);
    if ($30) {
      $qh_1_lcssa = $27;
      label = 8;
      break;
    } else {
      $cy_090 = $29;
      $qh_191 = $27;
      label = 7;
      break;
    }
   case 8:
    $31 = ($1 | 0) > 49;
    $32 = $np + ($2 << 2) | 0;
    $33 = $dp + ($2 << 2) | 0;
    if ($31) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $35 = $dinv | 0;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = ___gmpn_sbpi1_div_qr($qp, $32, $5, $33, $1, $36) | 0;
    $ql_0 = $37;
    label = 11;
    break;
   case 10:
    $39 = ___gmpn_dcpi1_div_qr_n($qp, $32, $33, $1, $dinv, $tp) | 0;
    $ql_0 = $39;
    label = 11;
    break;
   case 11:
    $41 = ___gmpn_mul($tp, $dp, $2, $qp, $1) | 0;
    $42 = ___gmpn_sub_n($np, $np, $tp, $n) | 0;
    $43 = ($ql_0 | 0) == 0;
    if ($43) {
      $cy_1_ph = $42;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $45 = ___gmpn_sub_n($18, $18, $dp, $2) | 0;
    $46 = $45 + $42 | 0;
    $cy_1_ph = $46;
    label = 13;
    break;
   case 13:
    $47 = ($cy_1_ph | 0) == 0;
    if ($47) {
      label = 15;
      break;
    } else {
      $cy_188 = $cy_1_ph;
      label = 14;
      break;
    }
   case 14:
    $48 = ___gmpn_sub_1($qp, $qp, $1, 1) | 0;
    $49 = ___gmpn_add_n($np, $np, $dp, $n) | 0;
    $50 = $cy_188 - $49 | 0;
    $51 = ($cy_188 | 0) == ($49 | 0);
    if ($51) {
      label = 15;
      break;
    } else {
      $cy_188 = $50;
      label = 14;
      break;
    }
   case 15:
    return $qh_1_lcssa | 0;
  }
  return 0;
}
function ___gmpn_sbpi1_divappr_q($qp, $np, $nn, $dp, $dn, $dinv) {
  $qp = $qp | 0;
  $np = $np | 0;
  $nn = $nn | 0;
  $dp = $dp | 0;
  $dn = $dn | 0;
  $dinv = $dinv | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $_0366 = 0, $_0364 = 0, $_sum = 0, $8 = 0, $9 = 0, $10 = 0, $_lobit = 0, $_lobit_not = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $_sum368 = 0, $21 = 0, $_sum369 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $_sum385 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $_sum384 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $smax = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $_0425 = 0, $_0362424 = 0, $i_0423 = 0, $n1_0422 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $uadd380$0 = 0, $uadd380$1 = 0, $58 = 0, $59 = 0, $60 = 0, $__x3_0 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $uadd381$0 = 0, $uadd381$1 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $uadd382$0 = 0, $uadd382$1 = 0, $85 = 0, $86 = 0, $87 = 0, $__x38_0 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $_neg391 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $uadd383$0 = 0, $uadd383$1 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $115 = 0, $or_cond = 0, $117 = 0, $118 = 0, $119 = 0, $sum433 = 0, $120 = 0, $q_0 = 0, $n0_0 = 0, $n1_1 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $q_1 = 0, $n1_2 = 0, $135 = 0, $136 = 0, $137 = 0, $scevgep444 = 0, $scevgep445 = 0, $_0_lcssa = 0, $_0362_lcssa = 0, $n1_0_lcssa = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $scevgep440 = 0, $151 = 0, $152 = 0, $_1415 = 0, $_1363414 = 0, $_1365412 = 0, $_1367410 = 0, $n1_3408 = 0, $flag_0407 = 0, $_sum379 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $162 = 0, $flag_1 = 0, $q_2 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $uadd374$0 = 0, $uadd374$1 = 0, $174 = 0, $175 = 0, $176 = 0, $__x326_0 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $uadd375$0 = 0, $uadd375$1 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $200 = 0, $uadd376$0 = 0, $uadd376$1 = 0, $201 = 0, $202 = 0, $203 = 0, $__x338_0 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $_neg397 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $uadd377$0 = 0, $uadd377$1 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $230 = 0, $231 = 0, $or_cond386 = 0, $233 = 0, $234 = 0, $235 = 0, $sum432 = 0, $236 = 0, $q_3 = 0, $n0_1 = 0, $n1_4 = 0, $_sum378 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $flag_2 = 0, $q_4 = 0, $n1_5 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $scevgep = 0, $scevgep439 = 0, $scevgep441 = 0, $flag_0_lcssa457 = 0, $n1_3_lcssa456 = 0, $_1365_lcssa454 = 0, $_1363_lcssa452 = 0, $_1_lcssa451 = 0, $_lcssa447 = 0, $261 = 0, $262 = 0, $264 = 0, $265 = 0, $267 = 0, $268 = 0, $uadd373$0 = 0, $uadd373$1 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $q_5 = 0, $278 = 0, $n1_3_lcssa455 = 0, $_1363_lcssa453 = 0, $_1_lcssa450 = 0, $_lcssa446 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $uadd$0 = 0, $uadd$1 = 0, $290 = 0, $291 = 0, $292 = 0, $__x356_0 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $uadd370$0 = 0, $uadd370$1 = 0, $298 = 0, $299 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $uadd371$0 = 0, $uadd371$1 = 0, $319 = 0, $320 = 0, $321 = 0, $__x368_0 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $_neg403 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $uadd372$0 = 0, $uadd372$1 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $348 = 0, $349 = 0, $or_cond387 = 0, $351 = 0, $352 = 0, $353 = 0, $sum = 0, $354 = 0, $q_6 = 0, $n0_2 = 0, $n1_6 = 0, $_1_lcssa449 = 0, $_lcssa448 = 0, $q_7 = 0, $n1_7 = 0, $357 = 0, $n1_8 = 0, $_2 = 0, $359 = 0, $360 = 0, $361 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $nn - $dn | 0;
    $2 = $1 + 1 | 0;
    $3 = ($2 | 0) < ($dn | 0);
    if ($3) {
      label = 2;
      break;
    } else {
      $_0364 = $dp;
      $_0366 = $dn;
      label = 3;
      break;
    }
   case 2:
    $5 = $dn - $2 | 0;
    $6 = $dp + ($5 << 2) | 0;
    $_0364 = $6;
    $_0366 = $2;
    label = 3;
    break;
   case 3:
    $_sum = $nn - $_0366 | 0;
    $8 = $np + ($_sum << 2) | 0;
    $9 = ___gmpn_cmp($8, $_0364, $_0366) | 0;
    $10 = ($9 | 0) > -1;
    $_lobit = $9 >>> 31;
    $_lobit_not = $_lobit ^ 1;
    if ($10) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $12 = ___gmpn_sub_n($8, $8, $_0364, $_0366) | 0;
    label = 5;
    break;
   case 5:
    $14 = $qp + ($1 << 2) | 0;
    $15 = $_0366 - 2 | 0;
    $16 = $_0366 - 1 | 0;
    $17 = $_0364 + ($16 << 2) | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $_0364 + ($15 << 2) | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $_sum368 = $nn - 2 | 0;
    $21 = $np + ($_sum368 << 2) | 0;
    $_sum369 = $nn - 1 | 0;
    $22 = $np + ($_sum369 << 2) | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $1 - $_0366 | 0;
    $25 = ($24 | 0) > -1;
    if ($25) {
      label = 6;
      break;
    } else {
      $n1_0_lcssa = $23;
      $_0362_lcssa = $21;
      $_0_lcssa = $14;
      label = 17;
      break;
    }
   case 6:
    $_sum385 = 1 - $_0366 | 0;
    $26 = $dinv & 65535;
    $27 = $dinv >>> 16;
    $28 = $20 & 65535;
    $29 = $20 >>> 16;
    $_sum384 = 1 - $_0366 | 0;
    $30 = $_0366 - 2 | 0;
    $31 = $_0366 + $dn | 0;
    $32 = $31 - 1 | 0;
    $33 = $32 - $nn | 0;
    $34 = ($33 | 0) > -1;
    $smax = $34 ? $33 : -1;
    $35 = $30 - $smax | 0;
    $36 = $_0366 + $dn | 0;
    $37 = $36 - 4 | 0;
    $38 = $37 - $smax | 0;
    $n1_0422 = $23;
    $i_0423 = $24;
    $_0362424 = $21;
    $_0425 = $14;
    label = 7;
    break;
   case 7:
    $40 = $_0362424 - 4 | 0;
    $41 = ($n1_0422 | 0) == ($18 | 0);
    if ($41) {
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 8:
    $43 = HEAP32[$_0362424 >> 2] | 0;
    $44 = ($43 | 0) == ($20 | 0);
    if ($44) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $46 = $_0362424 + ($_sum385 << 2) | 0;
    $47 = ___gmpn_submul_1($46, $_0364, $_0366, -1) | 0;
    $48 = HEAP32[$_0362424 >> 2] | 0;
    $n1_2 = $48;
    $q_1 = -1;
    label = 15;
    break;
   case 10:
    $50 = $n1_0422 & 65535;
    $51 = $n1_0422 >>> 16;
    $52 = Math_imul($50, $26);
    $53 = Math_imul($50, $27);
    $54 = Math_imul($51, $26);
    $55 = Math_imul($51, $27);
    $56 = $52 >>> 16;
    $57 = $56 + $53 | 0;
    $uadd380$0 = _llvm_uadd_with_overflow_i32($57 | 0, $54 | 0) | 0;
    $uadd380$1 = tempRet0;
    $58 = $uadd380$0;
    $59 = $uadd380$1;
    $60 = $55 + 65536 | 0;
    $__x3_0 = $59 ? $60 : $55;
    $61 = $58 >>> 16;
    $62 = $58 << 16;
    $63 = $52 & 65535;
    $64 = $62 | $63;
    $65 = HEAP32[$_0362424 >> 2] | 0;
    $uadd381$0 = _llvm_uadd_with_overflow_i32($64 | 0, $65 | 0) | 0;
    $uadd381$1 = tempRet0;
    $66 = $uadd381$0;
    $67 = $uadd381$1;
    $68 = $67 & 1;
    $69 = $61 + $n1_0422 | 0;
    $70 = $69 + $__x3_0 | 0;
    $71 = $70 + $68 | 0;
    $72 = Math_imul($71, $18);
    $73 = HEAP32[$40 >> 2] | 0;
    $74 = $73 - $20 | 0;
    $75 = $73 >>> 0 < $20 >>> 0;
    $76 = $75 & 1;
    $77 = $71 & 65535;
    $78 = $71 >>> 16;
    $79 = Math_imul($77, $28);
    $80 = Math_imul($78, $28);
    $81 = Math_imul($77, $29);
    $82 = Math_imul($78, $29);
    $83 = $79 >>> 16;
    $84 = $83 + $80 | 0;
    $uadd382$0 = _llvm_uadd_with_overflow_i32($84 | 0, $81 | 0) | 0;
    $uadd382$1 = tempRet0;
    $85 = $uadd382$0;
    $86 = $uadd382$1;
    $87 = $82 + 65536 | 0;
    $__x38_0 = $86 ? $87 : $82;
    $88 = $85 >>> 16;
    $89 = $85 << 16;
    $90 = $79 & 65535;
    $91 = $90 | $89;
    $92 = $74 - $91 | 0;
    $93 = $74 >>> 0 < $91 >>> 0;
    $94 = $93 & 1;
    $_neg391 = $65 - $18 | 0;
    $95 = $_neg391 - $76 | 0;
    $96 = $95 - $72 | 0;
    $97 = $96 - $88 | 0;
    $98 = $97 - $__x38_0 | 0;
    $99 = $98 - $94 | 0;
    $100 = $71 + 1 | 0;
    $101 = $99 >>> 0 >= $66 >>> 0;
    $102 = $101 & 1;
    $103 = -$102 | 0;
    $104 = $100 - $102 | 0;
    $105 = $20 & $103;
    $uadd383$0 = _llvm_uadd_with_overflow_i32($92 | 0, $105 | 0) | 0;
    $uadd383$1 = tempRet0;
    $106 = $uadd383$0;
    $107 = $18 & $103;
    $108 = $uadd383$1;
    $109 = $108 & 1;
    $110 = $99 + $109 | 0;
    $111 = $110 + $107 | 0;
    $112 = $111 >>> 0 < $18 >>> 0;
    if ($112) {
      $n1_1 = $111;
      $n0_0 = $106;
      $q_0 = $104;
      label = 13;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $114 = $111 >>> 0 <= $18 >>> 0;
    $115 = $106 >>> 0 < $20 >>> 0;
    $or_cond = $114 & $115;
    if ($or_cond) {
      $n1_1 = $111;
      $n0_0 = $106;
      $q_0 = $104;
      label = 13;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $117 = $104 + 1 | 0;
    $118 = $106 - $20 | 0;
    $119 = $115 & 1;
    $sum433 = $119 + $18 | 0;
    $120 = $111 - $sum433 | 0;
    $n1_1 = $120;
    $n0_0 = $118;
    $q_0 = $117;
    label = 13;
    break;
   case 13:
    $122 = $_0362424 + ($_sum384 << 2) | 0;
    $123 = ___gmpn_submul_1($122, $_0364, $15, $q_0) | 0;
    $124 = $n0_0 >>> 0 < $123 >>> 0;
    $125 = $124 & 1;
    $126 = $n0_0 - $123 | 0;
    $127 = $n1_1 >>> 0 < $125 >>> 0;
    $128 = $n1_1 - $125 | 0;
    HEAP32[$40 >> 2] = $126;
    if ($127) {
      label = 14;
      break;
    } else {
      $n1_2 = $128;
      $q_1 = $q_0;
      label = 15;
      break;
    }
   case 14:
    $130 = ___gmpn_add_n($122, $122, $_0364, $16) | 0;
    $131 = $128 + $18 | 0;
    $132 = $131 + $130 | 0;
    $133 = $q_0 - 1 | 0;
    $n1_2 = $132;
    $q_1 = $133;
    label = 15;
    break;
   case 15:
    $135 = $_0425 - 4 | 0;
    HEAP32[$135 >> 2] = $q_1;
    $136 = $i_0423 - 1 | 0;
    $137 = ($i_0423 | 0) > 0;
    if ($137) {
      $n1_0422 = $n1_2;
      $i_0423 = $136;
      $_0362424 = $40;
      $_0425 = $135;
      label = 7;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $scevgep444 = $qp + ($35 << 2) | 0;
    $scevgep445 = $np + ($38 << 2) | 0;
    $n1_0_lcssa = $n1_2;
    $_0362_lcssa = $scevgep445;
    $_0_lcssa = $scevgep444;
    label = 17;
    break;
   case 17:
    $139 = ($15 | 0) > -1;
    if ($139) {
      label = 18;
      break;
    } else {
      $_2 = $_0362_lcssa;
      $n1_8 = $n1_0_lcssa;
      label = 42;
      break;
    }
   case 18:
    $140 = ($15 | 0) > 0;
    $141 = $_0362_lcssa - 4 | 0;
    $142 = $n1_0_lcssa >>> 0 >= $18 >>> 0;
    if ($140) {
      label = 19;
      break;
    } else {
      label = 32;
      break;
    }
   case 19:
    $143 = $dinv & 65535;
    $144 = $dinv >>> 16;
    $145 = $20 & 65535;
    $146 = $20 >>> 16;
    $147 = 1 - $_0366 | 0;
    $148 = $_0366 - 2 | 0;
    $149 = 2 - $_0366 | 0;
    $scevgep440 = $_0_lcssa + ($149 << 2) | 0;
    $flag_0407 = -1;
    $n1_3408 = $n1_0_lcssa;
    $_1367410 = $15;
    $_1365412 = $_0364;
    $_1363414 = $_0362_lcssa;
    $_1415 = $_0_lcssa;
    $152 = $141;
    $151 = $142;
    label = 20;
    break;
   case 20:
    if ($151) {
      label = 21;
      break;
    } else {
      label = 25;
      break;
    }
   case 21:
    $_sum379 = $_1367410 ^ -1;
    $154 = $_1363414 + ($_sum379 << 2) | 0;
    $155 = $_1367410 + 2 | 0;
    $156 = ___gmpn_submul_1($154, $_1365412, $155, -1) | 0;
    $157 = ($n1_3408 | 0) == ($156 | 0);
    if ($157) {
      $q_2 = -1;
      $flag_1 = $flag_0407;
      label = 24;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $159 = $156 & $flag_0407;
    $160 = $n1_3408 >>> 0 < $159 >>> 0;
    if ($160) {
      label = 23;
      break;
    } else {
      $q_2 = -1;
      $flag_1 = 0;
      label = 24;
      break;
    }
   case 23:
    $162 = ___gmpn_add_n($154, $154, $_1365412, $155) | 0;
    $q_2 = -2;
    $flag_1 = $flag_0407;
    label = 24;
    break;
   case 24:
    $164 = HEAP32[$_1363414 >> 2] | 0;
    $n1_5 = $164;
    $q_4 = $q_2;
    $flag_2 = $flag_1;
    label = 30;
    break;
   case 25:
    $166 = $n1_3408 & 65535;
    $167 = $n1_3408 >>> 16;
    $168 = Math_imul($166, $143);
    $169 = Math_imul($166, $144);
    $170 = Math_imul($167, $143);
    $171 = Math_imul($167, $144);
    $172 = $168 >>> 16;
    $173 = $172 + $169 | 0;
    $uadd374$0 = _llvm_uadd_with_overflow_i32($173 | 0, $170 | 0) | 0;
    $uadd374$1 = tempRet0;
    $174 = $uadd374$0;
    $175 = $uadd374$1;
    $176 = $171 + 65536 | 0;
    $__x326_0 = $175 ? $176 : $171;
    $177 = $174 >>> 16;
    $178 = $174 << 16;
    $179 = $168 & 65535;
    $180 = $178 | $179;
    $181 = HEAP32[$_1363414 >> 2] | 0;
    $uadd375$0 = _llvm_uadd_with_overflow_i32($180 | 0, $181 | 0) | 0;
    $uadd375$1 = tempRet0;
    $182 = $uadd375$0;
    $183 = $uadd375$1;
    $184 = $183 & 1;
    $185 = $177 + $n1_3408 | 0;
    $186 = $185 + $__x326_0 | 0;
    $187 = $186 + $184 | 0;
    $188 = Math_imul($187, $18);
    $189 = HEAP32[$152 >> 2] | 0;
    $190 = $189 - $20 | 0;
    $191 = $189 >>> 0 < $20 >>> 0;
    $192 = $191 & 1;
    $193 = $187 & 65535;
    $194 = $187 >>> 16;
    $195 = Math_imul($193, $145);
    $196 = Math_imul($194, $145);
    $197 = Math_imul($193, $146);
    $198 = Math_imul($194, $146);
    $199 = $195 >>> 16;
    $200 = $199 + $196 | 0;
    $uadd376$0 = _llvm_uadd_with_overflow_i32($200 | 0, $197 | 0) | 0;
    $uadd376$1 = tempRet0;
    $201 = $uadd376$0;
    $202 = $uadd376$1;
    $203 = $198 + 65536 | 0;
    $__x338_0 = $202 ? $203 : $198;
    $204 = $201 >>> 16;
    $205 = $201 << 16;
    $206 = $195 & 65535;
    $207 = $206 | $205;
    $208 = $190 - $207 | 0;
    $209 = $190 >>> 0 < $207 >>> 0;
    $210 = $209 & 1;
    $_neg397 = $181 - $18 | 0;
    $211 = $_neg397 - $192 | 0;
    $212 = $211 - $188 | 0;
    $213 = $212 - $204 | 0;
    $214 = $213 - $__x338_0 | 0;
    $215 = $214 - $210 | 0;
    $216 = $187 + 1 | 0;
    $217 = $215 >>> 0 >= $182 >>> 0;
    $218 = $217 & 1;
    $219 = -$218 | 0;
    $220 = $216 - $218 | 0;
    $221 = $20 & $219;
    $uadd377$0 = _llvm_uadd_with_overflow_i32($208 | 0, $221 | 0) | 0;
    $uadd377$1 = tempRet0;
    $222 = $uadd377$0;
    $223 = $18 & $219;
    $224 = $uadd377$1;
    $225 = $224 & 1;
    $226 = $215 + $225 | 0;
    $227 = $226 + $223 | 0;
    $228 = $227 >>> 0 < $18 >>> 0;
    if ($228) {
      $n1_4 = $227;
      $n0_1 = $222;
      $q_3 = $220;
      label = 28;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    $230 = $227 >>> 0 <= $18 >>> 0;
    $231 = $222 >>> 0 < $20 >>> 0;
    $or_cond386 = $230 & $231;
    if ($or_cond386) {
      $n1_4 = $227;
      $n0_1 = $222;
      $q_3 = $220;
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $233 = $220 + 1 | 0;
    $234 = $222 - $20 | 0;
    $235 = $231 & 1;
    $sum432 = $235 + $18 | 0;
    $236 = $227 - $sum432 | 0;
    $n1_4 = $236;
    $n0_1 = $234;
    $q_3 = $233;
    label = 28;
    break;
   case 28:
    $_sum378 = $_1367410 ^ -1;
    $238 = $_1363414 + ($_sum378 << 2) | 0;
    $239 = ___gmpn_submul_1($238, $_1365412, $_1367410, $q_3) | 0;
    $240 = $n0_1 >>> 0 < $239 >>> 0;
    $241 = $240 & 1;
    $242 = $n0_1 - $239 | 0;
    $243 = $n1_4 >>> 0 < $241 >>> 0;
    $244 = $n1_4 - $241 | 0;
    HEAP32[$152 >> 2] = $242;
    if ($243) {
      label = 29;
      break;
    } else {
      $n1_5 = $244;
      $q_4 = $q_3;
      $flag_2 = $flag_0407;
      label = 30;
      break;
    }
   case 29:
    $246 = $_1367410 + 1 | 0;
    $247 = ___gmpn_add_n($238, $238, $_1365412, $246) | 0;
    $248 = $244 + $18 | 0;
    $249 = $248 + $247 | 0;
    $250 = $q_3 - 1 | 0;
    $n1_5 = $249;
    $q_4 = $250;
    $flag_2 = $flag_0407;
    label = 30;
    break;
   case 30:
    $252 = $_1415 - 4 | 0;
    HEAP32[$252 >> 2] = $q_4;
    $253 = $_1367410 - 1 | 0;
    $254 = $_1365412 + 4 | 0;
    $255 = ($253 | 0) > 0;
    $256 = $152 - 4 | 0;
    $257 = $flag_2 & $18;
    $258 = $n1_5 >>> 0 >= $257 >>> 0;
    if ($255) {
      $flag_0407 = $flag_2;
      $n1_3408 = $n1_5;
      $_1367410 = $253;
      $_1365412 = $254;
      $_1363414 = $152;
      $_1415 = $252;
      $152 = $256;
      $151 = $258;
      label = 20;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    $scevgep = $_0362_lcssa + ($147 << 2) | 0;
    $scevgep439 = $_0364 + ($148 << 2) | 0;
    $scevgep441 = $_0362_lcssa + ($149 << 2) | 0;
    if ($258) {
      $_lcssa447 = $scevgep;
      $_1_lcssa451 = $scevgep440;
      $_1363_lcssa452 = $scevgep441;
      $_1365_lcssa454 = $scevgep439;
      $n1_3_lcssa456 = $n1_5;
      $flag_0_lcssa457 = $flag_2;
      label = 33;
      break;
    } else {
      $_lcssa446 = $scevgep;
      $_1_lcssa450 = $scevgep440;
      $_1363_lcssa453 = $scevgep441;
      $n1_3_lcssa455 = $n1_5;
      label = 37;
      break;
    }
   case 32:
    if ($142) {
      $_lcssa447 = $141;
      $_1_lcssa451 = $_0_lcssa;
      $_1363_lcssa452 = $_0362_lcssa;
      $_1365_lcssa454 = $_0364;
      $n1_3_lcssa456 = $n1_0_lcssa;
      $flag_0_lcssa457 = -1;
      label = 33;
      break;
    } else {
      $_lcssa446 = $141;
      $_1_lcssa450 = $_0_lcssa;
      $_1363_lcssa453 = $_0362_lcssa;
      $n1_3_lcssa455 = $n1_0_lcssa;
      label = 37;
      break;
    }
   case 33:
    $261 = ___gmpn_submul_1($_lcssa447, $_1365_lcssa454, 2, -1) | 0;
    $262 = ($n1_3_lcssa456 | 0) == ($261 | 0);
    if ($262) {
      $q_5 = -1;
      label = 36;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    $264 = $261 & $flag_0_lcssa457;
    $265 = $n1_3_lcssa456 >>> 0 < $264 >>> 0;
    if ($265) {
      label = 35;
      break;
    } else {
      $q_5 = -1;
      label = 36;
      break;
    }
   case 35:
    $267 = HEAP32[$_lcssa447 >> 2] | 0;
    $268 = HEAP32[$_1365_lcssa454 >> 2] | 0;
    $uadd373$0 = _llvm_uadd_with_overflow_i32($267 | 0, $268 | 0) | 0;
    $uadd373$1 = tempRet0;
    $269 = $uadd373$0;
    $270 = HEAP32[$_1363_lcssa452 >> 2] | 0;
    $271 = $_1365_lcssa454 + 4 | 0;
    $272 = HEAP32[$271 >> 2] | 0;
    $273 = $272 + $270 | 0;
    $274 = $uadd373$1;
    $275 = $274 & 1;
    $276 = $273 + $275 | 0;
    HEAP32[$_1363_lcssa452 >> 2] = $276;
    HEAP32[$_lcssa447 >> 2] = $269;
    $q_5 = -2;
    label = 36;
    break;
   case 36:
    $278 = HEAP32[$_1363_lcssa452 >> 2] | 0;
    $n1_7 = $278;
    $q_7 = $q_5;
    $_lcssa448 = $_lcssa447;
    $_1_lcssa449 = $_1_lcssa451;
    label = 41;
    break;
   case 37:
    $280 = $n1_3_lcssa455 & 65535;
    $281 = $n1_3_lcssa455 >>> 16;
    $282 = $dinv & 65535;
    $283 = $dinv >>> 16;
    $284 = Math_imul($280, $282);
    $285 = Math_imul($280, $283);
    $286 = Math_imul($281, $282);
    $287 = Math_imul($281, $283);
    $288 = $284 >>> 16;
    $289 = $288 + $285 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($289 | 0, $286 | 0) | 0;
    $uadd$1 = tempRet0;
    $290 = $uadd$0;
    $291 = $uadd$1;
    $292 = $287 + 65536 | 0;
    $__x356_0 = $291 ? $292 : $287;
    $293 = $290 >>> 16;
    $294 = $290 << 16;
    $295 = $284 & 65535;
    $296 = $294 | $295;
    $297 = HEAP32[$_1363_lcssa453 >> 2] | 0;
    $uadd370$0 = _llvm_uadd_with_overflow_i32($296 | 0, $297 | 0) | 0;
    $uadd370$1 = tempRet0;
    $298 = $uadd370$0;
    $299 = $uadd370$1;
    $300 = $299 & 1;
    $301 = $293 + $n1_3_lcssa455 | 0;
    $302 = $301 + $__x356_0 | 0;
    $303 = $302 + $300 | 0;
    $304 = Math_imul($303, $18);
    $305 = HEAP32[$_lcssa446 >> 2] | 0;
    $306 = $305 - $20 | 0;
    $307 = $305 >>> 0 < $20 >>> 0;
    $308 = $307 & 1;
    $309 = $20 & 65535;
    $310 = $20 >>> 16;
    $311 = $303 & 65535;
    $312 = $303 >>> 16;
    $313 = Math_imul($311, $309);
    $314 = Math_imul($312, $309);
    $315 = Math_imul($311, $310);
    $316 = Math_imul($312, $310);
    $317 = $313 >>> 16;
    $318 = $317 + $314 | 0;
    $uadd371$0 = _llvm_uadd_with_overflow_i32($318 | 0, $315 | 0) | 0;
    $uadd371$1 = tempRet0;
    $319 = $uadd371$0;
    $320 = $uadd371$1;
    $321 = $316 + 65536 | 0;
    $__x368_0 = $320 ? $321 : $316;
    $322 = $319 >>> 16;
    $323 = $319 << 16;
    $324 = $313 & 65535;
    $325 = $324 | $323;
    $326 = $306 - $325 | 0;
    $327 = $306 >>> 0 < $325 >>> 0;
    $328 = $327 & 1;
    $_neg403 = $297 - $18 | 0;
    $329 = $_neg403 - $308 | 0;
    $330 = $329 - $304 | 0;
    $331 = $330 - $322 | 0;
    $332 = $331 - $__x368_0 | 0;
    $333 = $332 - $328 | 0;
    $334 = $303 + 1 | 0;
    $335 = $333 >>> 0 >= $298 >>> 0;
    $336 = $335 & 1;
    $337 = -$336 | 0;
    $338 = $334 - $336 | 0;
    $339 = $20 & $337;
    $uadd372$0 = _llvm_uadd_with_overflow_i32($326 | 0, $339 | 0) | 0;
    $uadd372$1 = tempRet0;
    $340 = $uadd372$0;
    $341 = $18 & $337;
    $342 = $uadd372$1;
    $343 = $342 & 1;
    $344 = $333 + $343 | 0;
    $345 = $344 + $341 | 0;
    $346 = $345 >>> 0 < $18 >>> 0;
    if ($346) {
      $n1_6 = $345;
      $n0_2 = $340;
      $q_6 = $338;
      label = 40;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    $348 = $345 >>> 0 <= $18 >>> 0;
    $349 = $340 >>> 0 < $20 >>> 0;
    $or_cond387 = $348 & $349;
    if ($or_cond387) {
      $n1_6 = $345;
      $n0_2 = $340;
      $q_6 = $338;
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    $351 = $338 + 1 | 0;
    $352 = $340 - $20 | 0;
    $353 = $349 & 1;
    $sum = $353 + $18 | 0;
    $354 = $345 - $sum | 0;
    $n1_6 = $354;
    $n0_2 = $352;
    $q_6 = $351;
    label = 40;
    break;
   case 40:
    HEAP32[$_1363_lcssa453 >> 2] = $n1_6;
    HEAP32[$_lcssa446 >> 2] = $n0_2;
    $n1_7 = $n1_6;
    $q_7 = $q_6;
    $_lcssa448 = $_lcssa446;
    $_1_lcssa449 = $_1_lcssa450;
    label = 41;
    break;
   case 41:
    $357 = $_1_lcssa449 - 4 | 0;
    HEAP32[$357 >> 2] = $q_7;
    $_2 = $_lcssa448;
    $n1_8 = $n1_7;
    label = 42;
    break;
   case 42:
    $359 = $_2 + 4 | 0;
    $360 = HEAP32[$359 >> 2] | 0;
    $361 = ($360 | 0) == ($n1_8 | 0);
    if ($361) {
      label = 44;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    ___gmp_assert_fail(6168, 185, 8240);
    return 0;
   case 44:
    return $_lobit_not | 0;
  }
  return 0;
}
function ___gmpn_mu_div_qr_choose_in($qn, $dn, $k) {
  $qn = $qn | 0;
  $dn = $dn | 0;
  $k = $k | 0;
  var $1 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $in_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($k | 0) == 0;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 6;
      break;
    }
   case 2:
    $3 = ($qn | 0) > ($dn | 0);
    if ($3) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $5 = $qn - 1 | 0;
    $6 = ($5 | 0) / ($dn | 0) & -1;
    $7 = $6 + 1 | 0;
    $8 = ($5 | 0) / ($7 | 0) & -1;
    $9 = $8 + 1 | 0;
    $in_0 = $9;
    label = 7;
    break;
   case 4:
    $11 = $qn * 3 & -1;
    $12 = ($11 | 0) > ($dn | 0);
    if ($12) {
      label = 5;
      break;
    } else {
      $in_0 = $qn;
      label = 7;
      break;
    }
   case 5:
    $14 = $qn - 1 | 0;
    $15 = ($14 | 0) / 2 & -1;
    $16 = $15 + 1 | 0;
    $in_0 = $16;
    label = 7;
    break;
   case 6:
    $18 = ($dn | 0) < ($qn | 0);
    $19 = $18 ? $dn : $qn;
    $20 = $19 - 1 | 0;
    $21 = ($20 | 0) / ($k | 0) & -1;
    $22 = $21 + 1 | 0;
    $in_0 = $22;
    label = 7;
    break;
   case 7:
    return $in_0 | 0;
  }
  return 0;
}
function _mpn_mulmod_bnm1_itch390($rn, $an, $bn) {
  $rn = $rn | 0;
  $an = $an | 0;
  $bn = $bn | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $rn >> 1;
    $2 = $rn + 4 | 0;
    $3 = ($1 | 0) < ($an | 0);
    if ($3) {
      label = 2;
      break;
    } else {
      $8 = 0;
      label = 3;
      break;
    }
   case 2:
    $5 = ($1 | 0) < ($bn | 0);
    $6 = $5 ? $rn : $1;
    $8 = $6;
    label = 3;
    break;
   case 3:
    $9 = $2 + $8 | 0;
    return $9 | 0;
  }
  return 0;
}
function ___gmpn_dcpi1_div_qr($qp, $np, $nn, $dp, $dn, $dinv) {
  $qp = $qp | 0;
  $np = $np | 0;
  $nn = $nn | 0;
  $dp = $dp | 0;
  $dn = $dn | 0;
  $dinv = $dinv | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $qn_0 = 0, $6 = 0, $7 = 0, $_sum307 = 0, $9 = 0, $_sum308 = 0, $10 = 0, $_sum322 = 0, $12 = 0, $_sum323 = 0, $13 = 0, $14 = 0, $15 = 0, $_lobit = 0, $_lobit_not = 0, $17 = 0, $19 = 0, $_sum325 = 0, $20 = 0, $21 = 0, $_sum326 = 0, $22 = 0, $23 = 0, $_sum327 = 0, $24 = 0, $25 = 0, $_sum328 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $or_cond = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $uadd$0 = 0, $uadd$1 = 0, $45 = 0, $46 = 0, $47 = 0, $__x3_0 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $uadd329$0 = 0, $uadd329$1 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $uadd330$0 = 0, $uadd330$1 = 0, $72 = 0, $73 = 0, $74 = 0, $__x38_0 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $_neg336 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $uadd331$0 = 0, $uadd331$1 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $101 = 0, $102 = 0, $or_cond332 = 0, $104 = 0, $105 = 0, $106 = 0, $sum = 0, $107 = 0, $n0_0 = 0, $n1_0 = 0, $q_0 = 0, $109 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $n1_1 = 0, $q_1 = 0, $qh_0 = 0, $q_2 = 0, $qh_1 = 0, $_sum320 = 0, $131 = 0, $_sum321 = 0, $132 = 0, $133 = 0, $135 = 0, $_sum309 = 0, $136 = 0, $138 = 0, $_sum310 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $_sum319 = 0, $144 = 0, $145 = 0, $qh_2 = 0, $147 = 0, $149 = 0, $150 = 0, $152 = 0, $154 = 0, $_sum314 = 0, $156 = 0, $157 = 0, $158 = 0, $_sum316 = 0, $160 = 0, $161 = 0, $162 = 0, $cy_0_ph = 0, $qh_3_ph = 0, $163 = 0, $qh_3341 = 0, $cy_0340 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $qh_4 = 0, $169 = 0, $170 = 0, $_sum311 = 0, $qn_1 = 0, $_0299 = 0, $_0 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $179 = 0, $_sum = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $qh_5 = 0, $191 = 0, $193 = 0, $194 = 0, $196 = 0, $198 = 0, $200 = 0, $201 = 0, $203 = 0, $204 = 0, $205 = 0, $cy_1_ph = 0, $qh_6_ph = 0, $206 = 0, $qh_6346 = 0, $cy_1345 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $qh_7 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $dn << 2;
    $2 = STACKTOP;
    STACKTOP = STACKTOP + $1 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $3 = $2;
    $4 = $nn - $dn | 0;
    $5 = ($4 | 0) > ($dn | 0);
    if ($5) {
      $qn_0 = $4;
      label = 2;
      break;
    } else {
      label = 31;
      break;
    }
   case 2:
    $6 = $qn_0 - $dn | 0;
    $7 = ($6 | 0) > ($dn | 0);
    if ($7) {
      $qn_0 = $6;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $_sum307 = $4 - $6 | 0;
    $9 = $qp + ($_sum307 << 2) | 0;
    $_sum308 = $nn - $6 | 0;
    $10 = $np + ($_sum308 << 2) | 0;
    if (($6 | 0) == 1) {
      label = 4;
      break;
    } else if (($6 | 0) == 2) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 4:
    $_sum322 = $_sum308 - $dn | 0;
    $12 = $np + ($_sum322 << 2) | 0;
    $_sum323 = $_sum322 + 1 | 0;
    $13 = $np + ($_sum323 << 2) | 0;
    $14 = ___gmpn_cmp($13, $dp, $dn) | 0;
    $15 = ($14 | 0) > -1;
    $_lobit = $14 >>> 31;
    $_lobit_not = $_lobit ^ 1;
    if ($15) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $17 = ___gmpn_sub_n($13, $13, $dp, $dn) | 0;
    label = 6;
    break;
   case 6:
    $19 = HEAP32[$10 >> 2] | 0;
    $_sum325 = $_sum308 - 1 | 0;
    $20 = $np + ($_sum325 << 2) | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    $_sum326 = $_sum308 - 2 | 0;
    $22 = $np + ($_sum326 << 2) | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $_sum327 = $dn - 1 | 0;
    $24 = $dp + ($_sum327 << 2) | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    $_sum328 = $dn - 2 | 0;
    $26 = $dp + ($_sum328 << 2) | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = ($19 | 0) == ($25 | 0);
    $29 = ($21 | 0) == ($27 | 0);
    $or_cond = $28 & $29;
    if ($or_cond) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $31 = ___gmpn_submul_1($12, $dp, $dn, -1) | 0;
    $qh_1 = $_lobit_not;
    $q_2 = -1;
    label = 16;
    break;
   case 8:
    $33 = $dinv | 0;
    $34 = HEAP32[$33 >> 2] | 0;
    $35 = $19 & 65535;
    $36 = $19 >>> 16;
    $37 = $34 & 65535;
    $38 = $34 >>> 16;
    $39 = Math_imul($37, $35);
    $40 = Math_imul($38, $35);
    $41 = Math_imul($37, $36);
    $42 = Math_imul($38, $36);
    $43 = $39 >>> 16;
    $44 = $43 + $40 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($44 | 0, $41 | 0) | 0;
    $uadd$1 = tempRet0;
    $45 = $uadd$0;
    $46 = $uadd$1;
    $47 = $42 + 65536 | 0;
    $__x3_0 = $46 ? $47 : $42;
    $48 = $45 >>> 16;
    $49 = $45 << 16;
    $50 = $39 & 65535;
    $51 = $49 | $50;
    $uadd329$0 = _llvm_uadd_with_overflow_i32($51 | 0, $21 | 0) | 0;
    $uadd329$1 = tempRet0;
    $52 = $uadd329$0;
    $53 = $uadd329$1;
    $54 = $53 & 1;
    $55 = $48 + $19 | 0;
    $56 = $55 + $__x3_0 | 0;
    $57 = $56 + $54 | 0;
    $58 = Math_imul($57, $25);
    $59 = $23 - $27 | 0;
    $60 = $23 >>> 0 < $27 >>> 0;
    $61 = $60 & 1;
    $62 = $27 & 65535;
    $63 = $27 >>> 16;
    $64 = $57 & 65535;
    $65 = $57 >>> 16;
    $66 = Math_imul($64, $62);
    $67 = Math_imul($65, $62);
    $68 = Math_imul($64, $63);
    $69 = Math_imul($65, $63);
    $70 = $66 >>> 16;
    $71 = $70 + $67 | 0;
    $uadd330$0 = _llvm_uadd_with_overflow_i32($71 | 0, $68 | 0) | 0;
    $uadd330$1 = tempRet0;
    $72 = $uadd330$0;
    $73 = $uadd330$1;
    $74 = $69 + 65536 | 0;
    $__x38_0 = $73 ? $74 : $69;
    $75 = $72 >>> 16;
    $76 = $72 << 16;
    $77 = $66 & 65535;
    $78 = $77 | $76;
    $79 = $59 - $78 | 0;
    $80 = $59 >>> 0 < $78 >>> 0;
    $81 = $80 & 1;
    $_neg336 = $21 - $25 | 0;
    $82 = $_neg336 - $61 | 0;
    $83 = $82 - $75 | 0;
    $84 = $83 - $58 | 0;
    $85 = $84 - $__x38_0 | 0;
    $86 = $85 - $81 | 0;
    $87 = $57 + 1 | 0;
    $88 = $86 >>> 0 >= $52 >>> 0;
    $89 = $88 & 1;
    $90 = -$89 | 0;
    $91 = $87 - $89 | 0;
    $92 = $27 & $90;
    $uadd331$0 = _llvm_uadd_with_overflow_i32($79 | 0, $92 | 0) | 0;
    $uadd331$1 = tempRet0;
    $93 = $uadd331$0;
    $94 = $25 & $90;
    $95 = $uadd331$1;
    $96 = $95 & 1;
    $97 = $86 + $96 | 0;
    $98 = $97 + $94 | 0;
    $99 = $98 >>> 0 < $25 >>> 0;
    if ($99) {
      $q_0 = $91;
      $n1_0 = $98;
      $n0_0 = $93;
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $101 = $98 >>> 0 <= $25 >>> 0;
    $102 = $93 >>> 0 < $27 >>> 0;
    $or_cond332 = $101 & $102;
    if ($or_cond332) {
      $q_0 = $91;
      $n1_0 = $98;
      $n0_0 = $93;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $104 = $91 + 1 | 0;
    $105 = $93 - $27 | 0;
    $106 = $102 & 1;
    $sum = $106 + $25 | 0;
    $107 = $98 - $sum | 0;
    $q_0 = $104;
    $n1_0 = $107;
    $n0_0 = $105;
    label = 11;
    break;
   case 11:
    $109 = ($dn | 0) > 2;
    if ($109) {
      label = 12;
      break;
    } else {
      label = 14;
      break;
    }
   case 12:
    $111 = $dn - 2 | 0;
    $112 = ___gmpn_submul_1($12, $dp, $111, $q_0) | 0;
    $113 = $n0_0 >>> 0 < $112 >>> 0;
    $114 = $113 & 1;
    $115 = $n0_0 - $112 | 0;
    $116 = $n1_0 >>> 0 < $114 >>> 0;
    $117 = $n1_0 - $114 | 0;
    HEAP32[$22 >> 2] = $115;
    if ($116) {
      label = 13;
      break;
    } else {
      $qh_0 = $_lobit_not;
      $q_1 = $q_0;
      $n1_1 = $117;
      label = 15;
      break;
    }
   case 13:
    $119 = $dn - 1 | 0;
    $120 = ___gmpn_add_n($12, $12, $dp, $119) | 0;
    $121 = $117 + $25 | 0;
    $122 = $121 + $120 | 0;
    $123 = ($q_0 | 0) == 0;
    $124 = $123 & 1;
    $125 = $_lobit_not - $124 | 0;
    $126 = $q_0 - 1 | 0;
    $qh_0 = $125;
    $q_1 = $126;
    $n1_1 = $122;
    label = 15;
    break;
   case 14:
    HEAP32[$22 >> 2] = $n0_0;
    $qh_0 = $_lobit_not;
    $q_1 = $q_0;
    $n1_1 = $n1_0;
    label = 15;
    break;
   case 15:
    HEAP32[$20 >> 2] = $n1_1;
    $qh_1 = $qh_0;
    $q_2 = $q_1;
    label = 16;
    break;
   case 16:
    HEAP32[$9 >> 2] = $q_2;
    $qh_4 = $qh_1;
    label = 29;
    break;
   case 17:
    $_sum320 = $_sum308 - 2 | 0;
    $131 = $np + ($_sum320 << 2) | 0;
    $_sum321 = $dn - 2 | 0;
    $132 = $dp + ($_sum321 << 2) | 0;
    $133 = ___gmpn_divrem_2($9, 0, $131, 4, $132) | 0;
    $qh_2 = $133;
    label = 21;
    break;
   case 18:
    $135 = ($6 | 0) > 49;
    $_sum309 = $_sum308 - $6 | 0;
    $136 = $np + ($_sum309 << 2) | 0;
    if ($135) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $138 = $6 << 1;
    $_sum310 = $dn - $6 | 0;
    $139 = $dp + ($_sum310 << 2) | 0;
    $140 = $dinv | 0;
    $141 = HEAP32[$140 >> 2] | 0;
    $142 = ___gmpn_sbpi1_div_qr($9, $136, $138, $139, $6, $141) | 0;
    $qh_2 = $142;
    label = 21;
    break;
   case 20:
    $_sum319 = $dn - $6 | 0;
    $144 = $dp + ($_sum319 << 2) | 0;
    $145 = ___gmpn_dcpi1_div_qr_n($9, $136, $144, $6, $dinv, $3) | 0;
    $qh_2 = $145;
    label = 21;
    break;
   case 21:
    $147 = ($6 | 0) == ($dn | 0);
    if ($147) {
      $qh_4 = $qh_2;
      label = 29;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $149 = $dn - $6 | 0;
    $150 = ($6 | 0) > ($149 | 0);
    if ($150) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    $152 = ___gmpn_mul($3, $9, $6, $dp, $149) | 0;
    label = 25;
    break;
   case 24:
    $154 = ___gmpn_mul($3, $dp, $149, $9, $6) | 0;
    label = 25;
    break;
   case 25:
    $_sum314 = $_sum308 - $dn | 0;
    $156 = $np + ($_sum314 << 2) | 0;
    $157 = ___gmpn_sub_n($156, $156, $3, $dn) | 0;
    $158 = ($qh_2 | 0) == 0;
    if ($158) {
      $qh_3_ph = 0;
      $cy_0_ph = $157;
      label = 27;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    $_sum316 = $_sum314 + $6 | 0;
    $160 = $np + ($_sum316 << 2) | 0;
    $161 = ___gmpn_sub_n($160, $160, $dp, $149) | 0;
    $162 = $161 + $157 | 0;
    $qh_3_ph = $qh_2;
    $cy_0_ph = $162;
    label = 27;
    break;
   case 27:
    $163 = ($cy_0_ph | 0) == 0;
    if ($163) {
      $qh_4 = $qh_3_ph;
      label = 29;
      break;
    } else {
      $cy_0340 = $cy_0_ph;
      $qh_3341 = $qh_3_ph;
      label = 28;
      break;
    }
   case 28:
    $164 = ___gmpn_sub_1($9, $9, $6, 1) | 0;
    $165 = $qh_3341 - $164 | 0;
    $166 = ___gmpn_add_n($156, $156, $dp, $dn) | 0;
    $167 = $cy_0340 - $166 | 0;
    $168 = ($cy_0340 | 0) == ($166 | 0);
    if ($168) {
      $qh_4 = $165;
      label = 29;
      break;
    } else {
      $cy_0340 = $167;
      $qh_3341 = $165;
      label = 28;
      break;
    }
   case 29:
    $169 = $4 - $6 | 0;
    $170 = -$dn | 0;
    $_sum311 = $170 << 1;
    $_0 = $9;
    $_0299 = $10;
    $qn_1 = $169;
    label = 30;
    break;
   case 30:
    $172 = $_0 + ($170 << 2) | 0;
    $173 = $_0299 + ($170 << 2) | 0;
    $174 = $_0299 + ($_sum311 << 2) | 0;
    $175 = ___gmpn_dcpi1_div_qr_n($172, $174, $dp, $dn, $dinv, $3) | 0;
    $176 = $qn_1 - $dn | 0;
    $177 = ($176 | 0) > 0;
    if ($177) {
      $_0 = $172;
      $_0299 = $173;
      $qn_1 = $176;
      label = 30;
      break;
    } else {
      $qh_7 = $qh_4;
      label = 42;
      break;
    }
   case 31:
    $179 = ($4 | 0) > 49;
    $_sum = $dn - $4 | 0;
    $180 = $np + ($_sum << 2) | 0;
    if ($179) {
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $182 = $4 << 1;
    $183 = $dp + ($_sum << 2) | 0;
    $184 = $dinv | 0;
    $185 = HEAP32[$184 >> 2] | 0;
    $186 = ___gmpn_sbpi1_div_qr($qp, $180, $182, $183, $4, $185) | 0;
    $qh_5 = $186;
    label = 34;
    break;
   case 33:
    $188 = $dp + ($_sum << 2) | 0;
    $189 = ___gmpn_dcpi1_div_qr_n($qp, $180, $188, $4, $dinv, $3) | 0;
    $qh_5 = $189;
    label = 34;
    break;
   case 34:
    $191 = ($4 | 0) == ($dn | 0);
    if ($191) {
      $qh_7 = $qh_5;
      label = 42;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $193 = $dn - $4 | 0;
    $194 = ($4 | 0) > ($193 | 0);
    if ($194) {
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 36:
    $196 = ___gmpn_mul($3, $qp, $4, $dp, $193) | 0;
    label = 38;
    break;
   case 37:
    $198 = ___gmpn_mul($3, $dp, $193, $qp, $4) | 0;
    label = 38;
    break;
   case 38:
    $200 = ___gmpn_sub_n($np, $np, $3, $dn) | 0;
    $201 = ($qh_5 | 0) == 0;
    if ($201) {
      $qh_6_ph = 0;
      $cy_1_ph = $200;
      label = 40;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    $203 = $np + ($4 << 2) | 0;
    $204 = ___gmpn_sub_n($203, $203, $dp, $193) | 0;
    $205 = $204 + $200 | 0;
    $qh_6_ph = $qh_5;
    $cy_1_ph = $205;
    label = 40;
    break;
   case 40:
    $206 = ($cy_1_ph | 0) == 0;
    if ($206) {
      $qh_7 = $qh_6_ph;
      label = 42;
      break;
    } else {
      $cy_1345 = $cy_1_ph;
      $qh_6346 = $qh_6_ph;
      label = 41;
      break;
    }
   case 41:
    $207 = ___gmpn_sub_1($qp, $qp, $4, 1) | 0;
    $208 = $qh_6346 - $207 | 0;
    $209 = ___gmpn_add_n($np, $np, $dp, $dn) | 0;
    $210 = $cy_1345 - $209 | 0;
    $211 = ($cy_1345 | 0) == ($209 | 0);
    if ($211) {
      $qh_7 = $208;
      label = 42;
      break;
    } else {
      $cy_1345 = $210;
      $qh_6346 = $208;
      label = 41;
      break;
    }
   case 42:
    STACKTOP = __stackBase__;
    return $qh_7 | 0;
  }
  return 0;
}
function ___gmpn_mu_div_qr($qp, $rp, $np, $nn, $dp, $dn, $scratch) {
  $qp = $qp | 0;
  $rp = $rp | 0;
  $np = $np | 0;
  $nn = $nn | 0;
  $dp = $dp | 0;
  $dn = $dn | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $_sum = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $_sum71 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $23 = 0, $cy_0 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $qh_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $nn - $dn | 0;
    $2 = $1 + 100 | 0;
    $3 = ($2 | 0) < ($dn | 0);
    if ($3) {
      label = 2;
      break;
    } else {
      label = 9;
      break;
    }
   case 2:
    $5 = $1 << 1;
    $6 = $5 | 1;
    $_sum = $nn - $6 | 0;
    $7 = $rp + ($_sum << 2) | 0;
    $8 = $np + ($_sum << 2) | 0;
    $9 = $1 + 1 | 0;
    $10 = $1 ^ -1;
    $_sum71 = $10 + $dn | 0;
    $11 = $dp + ($_sum71 << 2) | 0;
    $12 = _mpn_mu_div_qr2($qp, $7, $8, $6, $11, $9, $scratch) | 0;
    $13 = $dn - $9 | 0;
    $14 = ($13 | 0) > ($1 | 0);
    if ($14) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $16 = ___gmpn_mul($scratch, $dp, $13, $qp, $1) | 0;
    label = 5;
    break;
   case 4:
    $18 = ___gmpn_mul($scratch, $qp, $1, $dp, $13) | 0;
    label = 5;
    break;
   case 5:
    $20 = ($12 | 0) == 0;
    if ($20) {
      $cy_0 = 0;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $22 = $scratch + ($1 << 2) | 0;
    $23 = ___gmpn_add_n($22, $22, $dp, $13) | 0;
    $cy_0 = $23;
    label = 7;
    break;
   case 7:
    $25 = $dn - 1 | 0;
    $26 = $scratch + ($25 << 2) | 0;
    HEAP32[$26 >> 2] = $cy_0;
    $27 = $nn - $6 | 0;
    $28 = ___gmpn_sub_n($rp, $np, $scratch, $27) | 0;
    $29 = $scratch + ($_sum << 2) | 0;
    $30 = _mpn_sub_nc387($7, $7, $29, $9, $28) | 0;
    $31 = ($30 | 0) == 0;
    if ($31) {
      $qh_0 = $12;
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $33 = ___gmpn_sub_1($qp, $qp, $1, 1) | 0;
    $34 = $12 - $33 | 0;
    $35 = ___gmpn_add_n($rp, $rp, $dp, $dn) | 0;
    $qh_0 = $34;
    label = 10;
    break;
   case 9:
    $37 = _mpn_mu_div_qr2($qp, $rp, $np, $nn, $dp, $dn, $scratch) | 0;
    $qh_0 = $37;
    label = 10;
    break;
   case 10:
    return $qh_0 | 0;
  }
  return 0;
}
function _mpn_mu_div_qr2($qp, $rp, $np, $nn, $dp, $dn, $scratch) {
  $qp = $qp | 0;
  $rp = $rp | 0;
  $np = $np | 0;
  $nn = $nn | 0;
  $dp = $dp | 0;
  $dn = $dn | 0;
  $scratch = $scratch | 0;
  var $scratch72 = 0, $1 = 0, $2 = 0, $3 = 0, $_sum = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, $_sum55 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $__n_0 = 0, $__dst_0 = 0, $dp_pn = 0, $__x_0 = 0, $__src_0 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $scevgep69 = 0, $__dst_1 = 0, $__x_1 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $__n1_0 = 0, $__dst2_0 = 0, $__src3_0 = 0, $__x4_0 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $scevgep = 0, $__dst2_1 = 0, $__x4_1 = 0, $36 = 0, $37 = 0, $_sum54 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $__n7_0 = 0, $__dst8_0 = 0, $__src9_0 = 0, $__x10_0 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $scevgep71 = 0, $__dst8_1 = 0, $__x10_1 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $scratch72 = $scratch;
    $1 = $nn - $dn | 0;
    $2 = ___gmpn_mu_div_qr_choose_in($1, $dn, 0) | 0;
    $3 = $scratch + ($2 << 2) | 0;
    $_sum = $2 + 1 | 0;
    $4 = $scratch + ($_sum << 2) | 0;
    $5 = ($2 | 0) == ($dn | 0);
    if ($5) {
      label = 2;
      break;
    } else {
      label = 13;
      break;
    }
   case 2:
    $7 = ($2 | 0) != 0;
    if ($7) {
      label = 3;
      break;
    } else {
      label = 21;
      break;
    }
   case 3:
    $9 = $2 - 1 | 0;
    $_sum55 = $2 + 2 | 0;
    $10 = $scratch + ($_sum55 << 2) | 0;
    $11 = HEAP32[$dp >> 2] | 0;
    $12 = ($9 | 0) == 0;
    if ($12) {
      $__x_1 = $11;
      $__dst_1 = $10;
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $13 = $2 << 1;
    $14 = $13 | 1;
    $__x_0 = $11;
    $dp_pn = $dp;
    $__dst_0 = $10;
    $__n_0 = $9;
    label = 5;
    break;
   case 5:
    $__src_0 = $dp_pn + 4 | 0;
    $16 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $17 = HEAP32[$__src_0 >> 2] | 0;
    $18 = $__n_0 - 1 | 0;
    $19 = ($18 | 0) == 0;
    if ($19) {
      label = 6;
      break;
    } else {
      $__x_0 = $17;
      $dp_pn = $__src_0;
      $__dst_0 = $16;
      $__n_0 = $18;
      label = 5;
      break;
    }
   case 6:
    $scevgep69 = $scratch + ($14 << 2) | 0;
    $__x_1 = $17;
    $__dst_1 = $scevgep69;
    label = 7;
    break;
   case 7:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    HEAP32[$4 >> 2] = 1;
    $21 = $2 + 1 | 0;
    $22 = ___gmpn_invertappr($scratch, $4, $21, 0) | 0;
    if ($7) {
      label = 8;
      break;
    } else {
      label = 23;
      break;
    }
   case 8:
    $24 = $scratch + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    if ($12) {
      $__x4_1 = $25;
      $__dst2_1 = $scratch;
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $26 = $scratch + 8 | 0;
    $27 = $2 - 1 | 0;
    $__x4_0 = $25;
    $__src3_0 = $26;
    $__dst2_0 = $scratch;
    $__n1_0 = $9;
    label = 10;
    break;
   case 10:
    $29 = $__dst2_0 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    $30 = $__src3_0 + 4 | 0;
    $31 = HEAP32[$__src3_0 >> 2] | 0;
    $32 = $__n1_0 - 1 | 0;
    $33 = ($32 | 0) == 0;
    if ($33) {
      label = 11;
      break;
    } else {
      $__x4_0 = $31;
      $__src3_0 = $30;
      $__dst2_0 = $29;
      $__n1_0 = $32;
      label = 10;
      break;
    }
   case 11:
    $scevgep = $scratch + ($27 << 2) | 0;
    $__x4_1 = $31;
    $__dst2_1 = $scevgep;
    label = 12;
    break;
   case 12:
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    label = 23;
    break;
   case 13:
    $36 = $2 + 1 | 0;
    $37 = $2 ^ -1;
    $_sum54 = $37 + $dn | 0;
    $38 = $dp + ($_sum54 << 2) | 0;
    $39 = ___gmpn_add_1($4, $38, $36, 1) | 0;
    $40 = ($39 | 0) == 0;
    if ($40) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $42 = ($2 | 0) == 0;
    if ($42) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 15:
    $44 = ___gmpn_invertappr($scratch, $4, $36, 0) | 0;
    $45 = ($2 | 0) == 0;
    if ($45) {
      label = 23;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $47 = $2 - 1 | 0;
    $48 = $scratch + 4 | 0;
    $49 = HEAP32[$48 >> 2] | 0;
    $50 = ($47 | 0) == 0;
    if ($50) {
      $__x10_1 = $49;
      $__dst8_1 = $scratch;
      label = 20;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $51 = $scratch + 8 | 0;
    $52 = $2 - 1 | 0;
    $__x10_0 = $49;
    $__src9_0 = $51;
    $__dst8_0 = $scratch;
    $__n7_0 = $47;
    label = 18;
    break;
   case 18:
    $54 = $__dst8_0 + 4 | 0;
    HEAP32[$__dst8_0 >> 2] = $__x10_0;
    $55 = $__src9_0 + 4 | 0;
    $56 = HEAP32[$__src9_0 >> 2] | 0;
    $57 = $__n7_0 - 1 | 0;
    $58 = ($57 | 0) == 0;
    if ($58) {
      label = 19;
      break;
    } else {
      $__x10_0 = $56;
      $__src9_0 = $55;
      $__dst8_0 = $54;
      $__n7_0 = $57;
      label = 18;
      break;
    }
   case 19:
    $scevgep71 = $scratch + ($52 << 2) | 0;
    $__x10_1 = $56;
    $__dst8_1 = $scevgep71;
    label = 20;
    break;
   case 20:
    HEAP32[$__dst8_1 >> 2] = $__x10_1;
    label = 23;
    break;
   case 21:
    HEAP32[$4 >> 2] = 1;
    $60 = $2 + 1 | 0;
    $61 = ___gmpn_invertappr($scratch, $4, $60, 0) | 0;
    label = 23;
    break;
   case 22:
    $62 = $2 << 2;
    _memset($scratch72 | 0, 0, $62 | 0);
    label = 23;
    break;
   case 23:
    $64 = ___gmpn_preinv_mu_div_qr($qp, $rp, $np, $nn, $dp, $dn, $scratch, $2, $3) | 0;
    return $64 | 0;
  }
  return 0;
}
function _mpn_sub_nc387($rp, $up, $vp, $n, $ci) {
  $rp = $rp | 0;
  $up = $up | 0;
  $vp = $vp | 0;
  $n = $n | 0;
  $ci = $ci | 0;
  var $1 = 0;
  $1 = ___gmpn_sub_n($rp, $up, $vp, $n) | 0;
  return (___gmpn_sub_1($rp, $rp, $n, $ci) | 0) + $1 | 0;
}
function ___gmpn_mu_div_qr_itch($nn, $dn, $mua_k) {
  $nn = $nn | 0;
  $dn = $dn | 0;
  $mua_k = $mua_k | 0;
  var $2 = 0, $4 = 0;
  $2 = ___gmpn_mulmod_bnm1_next_size($dn + 1 | 0) | 0;
  $4 = ___gmpn_mu_div_qr_choose_in($nn - $dn | 0, $dn, $mua_k) | 0;
  return ($4 + $2 | 0) + (_mpn_mulmod_bnm1_itch390($2, $dn, $4) | 0) | 0;
}
function ___gmpn_sbpi1_bdiv_q($qp, $np, $nn, $dp, $dn, $dinv) {
  $qp = $qp | 0;
  $np = $np | 0;
  $nn = $nn | 0;
  $dp = $dp | 0;
  $dn = $dn | 0;
  $dinv = $dinv | 0;
  var $1 = 0, $2 = 0, $3 = 0, $scevgep54 = 0, $scevgep55 = 0, $_0_lcssa = 0, $_037_lcssa = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_045 = 0, $i_044 = 0, $_03743 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $_141 = 0, $i_140 = 0, $_13839 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $scevgep = 0, $_lcssa = 0, $_1_lcssa = 0, $30 = 0, $_sum = 0, $31 = 0, $32 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $nn - $dn | 0;
    $2 = ($1 | 0) > 0;
    if ($2) {
      label = 2;
      break;
    } else {
      $_037_lcssa = $np;
      $_0_lcssa = $qp;
      label = 4;
      break;
    }
   case 2:
    $3 = $nn - $dn | 0;
    $scevgep54 = $np + ($3 << 2) | 0;
    $_03743 = $np;
    $i_044 = $1;
    $_045 = $qp;
    label = 6;
    break;
   case 3:
    $scevgep55 = $qp + ($3 << 2) | 0;
    $_037_lcssa = $scevgep54;
    $_0_lcssa = $scevgep55;
    label = 4;
    break;
   case 4:
    $4 = ($dn | 0) > 1;
    $5 = HEAP32[$_037_lcssa >> 2] | 0;
    $6 = Math_imul($5, $dinv);
    if ($4) {
      label = 5;
      break;
    } else {
      $_1_lcssa = $_0_lcssa;
      $_lcssa = $6;
      label = 9;
      break;
    }
   case 5:
    $7 = $dn - 1 | 0;
    $_13839 = $_037_lcssa;
    $i_140 = $dn;
    $_141 = $_0_lcssa;
    $20 = $6;
    label = 7;
    break;
   case 6:
    $9 = HEAP32[$_03743 >> 2] | 0;
    $10 = Math_imul($9, $dinv);
    $11 = ___gmpn_addmul_1($_03743, $dp, $dn, $10) | 0;
    $12 = $_03743 + ($dn << 2) | 0;
    $13 = ___gmpn_add_1($12, $12, $i_044, $11) | 0;
    $14 = $10 ^ -1;
    HEAP32[$_045 >> 2] = $14;
    $15 = $_045 + 4 | 0;
    $16 = $_03743 + 4 | 0;
    $17 = $i_044 - 1 | 0;
    $18 = ($17 | 0) > 0;
    if ($18) {
      $_03743 = $16;
      $i_044 = $17;
      $_045 = $15;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 7:
    $21 = ___gmpn_addmul_1($_13839, $dp, $i_140, $20) | 0;
    $22 = $20 ^ -1;
    HEAP32[$_141 >> 2] = $22;
    $23 = $_141 + 4 | 0;
    $24 = $_13839 + 4 | 0;
    $25 = $i_140 - 1 | 0;
    $26 = ($25 | 0) > 1;
    $27 = HEAP32[$24 >> 2] | 0;
    $28 = Math_imul($27, $dinv);
    if ($26) {
      $_13839 = $24;
      $i_140 = $25;
      $_141 = $23;
      $20 = $28;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $scevgep = $_0_lcssa + ($7 << 2) | 0;
    $_1_lcssa = $scevgep;
    $_lcssa = $28;
    label = 9;
    break;
   case 9:
    $30 = $_lcssa ^ -1;
    HEAP32[$_1_lcssa >> 2] = $30;
    $_sum = 1 - $nn | 0;
    $31 = $_1_lcssa + ($_sum << 2) | 0;
    $32 = ___gmpn_add_1($31, $31, $nn, 1) | 0;
    return;
  }
}
function ___gmpn_preinv_mu_div_qr($qp, $rp, $np, $nn, $dp, $dn, $ip, $in, $scratch) {
  $qp = $qp | 0;
  $rp = $rp | 0;
  $np = $np | 0;
  $nn = $nn | 0;
  $dp = $dp | 0;
  $dn = $dn | 0;
  $ip = $ip | 0;
  $in = $in | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_lobit = 0, $_lobit_not = 0, $7 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $_sum151 = 0, $14 = 0, $15 = 0, $__n_0 = 0, $__dst_0 = 0, $__src_0 = 0, $__x_0 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $scevgep172 = 0, $__dst_1 = 0, $__x_1 = 0, $24 = 0, $25 = 0, $or_cond = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $scevgep = 0, $_0144165 = 0, $_0145164 = 0, $_0146163 = 0, $_0147162 = 0, $qn_0161 = 0, $33 = 0, $35 = 0, $36 = 0, $_1148 = 0, $_1 = 0, $38 = 0, $39 = 0, $40 = 0, $_sum = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $_sum149 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $_lobit150 = 0, $65 = 0, $68 = 0, $69 = 0, $uadd$0 = 0, $uadd$1 = 0, $70 = 0, $71 = 0, $__p_0 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $84 = 0, $86 = 0, $__n2_0 = 0, $__dst3_0 = 0, $scratch_pn = 0, $__x5_0 = 0, $__src4_0 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $__dst3_1 = 0, $__x5_1 = 0, $92 = 0, $cy_0 = 0, $94 = 0, $95 = 0, $r_0157 = 0, $__p7_0 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $__p9_0 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $nn - $dn | 0;
    $2 = $np + ($1 << 2) | 0;
    $3 = $qp + ($1 << 2) | 0;
    $4 = ___gmpn_cmp($2, $dp, $dn) | 0;
    $5 = ($4 | 0) > -1;
    $_lobit = $4 >>> 31;
    $_lobit_not = $_lobit ^ 1;
    if ($5) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $7 = ___gmpn_sub_n($rp, $2, $dp, $dn) | 0;
    label = 9;
    break;
   case 3:
    $9 = ($dn | 0) == 0;
    if ($9) {
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $11 = $dn - 1 | 0;
    $12 = HEAP32[$2 >> 2] | 0;
    $13 = ($11 | 0) == 0;
    if ($13) {
      $__x_1 = $12;
      $__dst_1 = $rp;
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $_sum151 = $1 + 1 | 0;
    $14 = $np + ($_sum151 << 2) | 0;
    $15 = $dn - 1 | 0;
    $__x_0 = $12;
    $__src_0 = $14;
    $__dst_0 = $rp;
    $__n_0 = $11;
    label = 6;
    break;
   case 6:
    $17 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $18 = $__src_0 + 4 | 0;
    $19 = HEAP32[$__src_0 >> 2] | 0;
    $20 = $__n_0 - 1 | 0;
    $21 = ($20 | 0) == 0;
    if ($21) {
      label = 7;
      break;
    } else {
      $__x_0 = $19;
      $__src_0 = $18;
      $__dst_0 = $17;
      $__n_0 = $20;
      label = 6;
      break;
    }
   case 7:
    $scevgep172 = $rp + ($15 << 2) | 0;
    $__x_1 = $19;
    $__dst_1 = $scevgep172;
    label = 8;
    break;
   case 8:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 9;
    break;
   case 9:
    $24 = ($nn | 0) != ($dn | 0);
    $25 = ($1 | 0) > 0;
    $or_cond = $24 & $25;
    if ($or_cond) {
      label = 10;
      break;
    } else {
      label = 37;
      break;
    }
   case 10:
    $26 = $dn + 1 | 0;
    $27 = $scratch + ($dn << 2) | 0;
    $28 = $scratch + ($dn << 2) | 0;
    $29 = ($dn | 0) == 0;
    $30 = $dn - 1 | 0;
    $31 = ($30 | 0) == 0;
    $scevgep = $rp + ($30 << 2) | 0;
    $qn_0161 = $1;
    $_0147162 = $in;
    $_0146163 = $ip;
    $_0145164 = $2;
    $_0144165 = $3;
    label = 11;
    break;
   case 11:
    $33 = ($qn_0161 | 0) < ($_0147162 | 0);
    if ($33) {
      label = 12;
      break;
    } else {
      $_1 = $_0146163;
      $_1148 = $_0147162;
      label = 13;
      break;
    }
   case 12:
    $35 = $_0147162 - $qn_0161 | 0;
    $36 = $_0146163 + ($35 << 2) | 0;
    $_1 = $36;
    $_1148 = $qn_0161;
    label = 13;
    break;
   case 13:
    $38 = -$_1148 | 0;
    $39 = $_0145164 + ($38 << 2) | 0;
    $40 = $_0144165 + ($38 << 2) | 0;
    $_sum = $dn - $_1148 | 0;
    $41 = $rp + ($_sum << 2) | 0;
    ___gmpn_mul_n($scratch, $41, $_1, $_1148);
    $42 = $scratch + ($_1148 << 2) | 0;
    $43 = ___gmpn_add_n($40, $42, $41, $_1148) | 0;
    $44 = ($43 | 0) == 0;
    if ($44) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    ___gmp_assert_fail(6088, 269, 8224);
    return 0;
   case 15:
    $47 = $qn_0161 - $_1148 | 0;
    $48 = ($_1148 | 0) > 39;
    if ($48) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $50 = ___gmpn_mul($scratch, $dp, $dn, $40, $_1148) | 0;
    label = 22;
    break;
   case 17:
    $52 = ___gmpn_mulmod_bnm1_next_size($26) | 0;
    $53 = $scratch + ($52 << 2) | 0;
    ___gmpn_mulmod_bnm1($scratch, $52, $dp, $dn, $40, $_1148, $53);
    $54 = $_1148 + $dn | 0;
    $55 = $54 - $52 | 0;
    $56 = ($55 | 0) > 0;
    if ($56) {
      label = 18;
      break;
    } else {
      label = 22;
      break;
    }
   case 18:
    $_sum149 = $dn - $55 | 0;
    $58 = $rp + ($_sum149 << 2) | 0;
    $59 = ___gmpn_sub_n($scratch, $scratch, $58, $55) | 0;
    $60 = $scratch + ($55 << 2) | 0;
    $61 = $52 - $55 | 0;
    $62 = ___gmpn_sub_1($60, $60, $61, $59) | 0;
    $63 = $52 - $dn | 0;
    $64 = ___gmpn_cmp($41, $27, $63) | 0;
    $_lobit150 = $64 >>> 31;
    $65 = $_lobit150 >>> 0 < $62 >>> 0;
    if ($65) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    ___gmp_assert_fail(6088, 289, 6992);
    return 0;
   case 20:
    $68 = HEAP32[$scratch >> 2] | 0;
    $69 = $_lobit150 - $62 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($68 | 0, $69 | 0) | 0;
    $uadd$1 = tempRet0;
    $70 = $uadd$0;
    HEAP32[$scratch >> 2] = $70;
    $71 = $uadd$1;
    if ($71) {
      $__p_0 = $scratch;
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    $72 = $__p_0 + 4 | 0;
    $73 = HEAP32[$72 >> 2] | 0;
    $74 = $73 + 1 | 0;
    HEAP32[$72 >> 2] = $74;
    $75 = ($74 | 0) == 0;
    if ($75) {
      $__p_0 = $72;
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $76 = $dn - $_1148 | 0;
    $77 = $rp + ($76 << 2) | 0;
    $78 = HEAP32[$77 >> 2] | 0;
    $79 = HEAP32[$28 >> 2] | 0;
    $80 = $78 - $79 | 0;
    $81 = ($_1148 | 0) == ($dn | 0);
    if ($81) {
      label = 27;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $83 = ___gmpn_sub_n($scratch, $39, $scratch, $_1148) | 0;
    $84 = _mpn_sub_nc387($42, $rp, $42, $76, $83) | 0;
    if ($29) {
      $cy_0 = $84;
      label = 28;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $86 = HEAP32[$scratch >> 2] | 0;
    if ($31) {
      $__x5_1 = $86;
      $__dst3_1 = $rp;
      label = 26;
      break;
    } else {
      $__x5_0 = $86;
      $scratch_pn = $scratch;
      $__dst3_0 = $rp;
      $__n2_0 = $30;
      label = 25;
      break;
    }
   case 25:
    $__src4_0 = $scratch_pn + 4 | 0;
    $87 = $__dst3_0 + 4 | 0;
    HEAP32[$__dst3_0 >> 2] = $__x5_0;
    $88 = HEAP32[$__src4_0 >> 2] | 0;
    $89 = $__n2_0 - 1 | 0;
    $90 = ($89 | 0) == 0;
    if ($90) {
      $__x5_1 = $88;
      $__dst3_1 = $scevgep;
      label = 26;
      break;
    } else {
      $__x5_0 = $88;
      $scratch_pn = $__src4_0;
      $__dst3_0 = $87;
      $__n2_0 = $89;
      label = 25;
      break;
    }
   case 26:
    HEAP32[$__dst3_1 >> 2] = $__x5_1;
    $cy_0 = $84;
    label = 28;
    break;
   case 27:
    $92 = ___gmpn_sub_n($rp, $39, $scratch, $_1148) | 0;
    $cy_0 = $92;
    label = 28;
    break;
   case 28:
    $94 = ($80 | 0) == ($cy_0 | 0);
    if ($94) {
      label = 33;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $95 = $80 - $cy_0 | 0;
    $r_0157 = $95;
    label = 30;
    break;
   case 30:
    $__p7_0 = $40;
    label = 31;
    break;
   case 31:
    $97 = $__p7_0 + 4 | 0;
    $98 = HEAP32[$__p7_0 >> 2] | 0;
    $99 = $98 + 1 | 0;
    HEAP32[$__p7_0 >> 2] = $99;
    $100 = ($99 | 0) == 0;
    if ($100) {
      $__p7_0 = $97;
      label = 31;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $102 = ___gmpn_sub_n($rp, $rp, $dp, $dn) | 0;
    $103 = $r_0157 - $102 | 0;
    $104 = ($r_0157 | 0) == ($102 | 0);
    if ($104) {
      label = 33;
      break;
    } else {
      $r_0157 = $103;
      label = 30;
      break;
    }
   case 33:
    $105 = ___gmpn_cmp($rp, $dp, $dn) | 0;
    $106 = ($105 | 0) > -1;
    if ($106) {
      $__p9_0 = $40;
      label = 34;
      break;
    } else {
      label = 36;
      break;
    }
   case 34:
    $107 = $__p9_0 + 4 | 0;
    $108 = HEAP32[$__p9_0 >> 2] | 0;
    $109 = $108 + 1 | 0;
    HEAP32[$__p9_0 >> 2] = $109;
    $110 = ($109 | 0) == 0;
    if ($110) {
      $__p9_0 = $107;
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $112 = ___gmpn_sub_n($rp, $rp, $dp, $dn) | 0;
    label = 36;
    break;
   case 36:
    $113 = ($47 | 0) > 0;
    if ($113) {
      $qn_0161 = $47;
      $_0147162 = $_1148;
      $_0146163 = $_1;
      $_0145164 = $39;
      $_0144165 = $40;
      label = 11;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    return $_lobit_not | 0;
  }
  return 0;
}
function _mpn_mulmod_bnm1_itch417($rn, $an, $bn) {
  $rn = $rn | 0;
  $an = $an | 0;
  $bn = $bn | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $rn >> 1;
    $2 = $rn + 4 | 0;
    $3 = ($1 | 0) < ($an | 0);
    if ($3) {
      label = 2;
      break;
    } else {
      $8 = 0;
      label = 3;
      break;
    }
   case 2:
    $5 = ($1 | 0) < ($bn | 0);
    $6 = $5 ? $rn : $1;
    $8 = $6;
    label = 3;
    break;
   case 3:
    $9 = $2 + $8 | 0;
    return $9 | 0;
  }
  return 0;
}
function ___gmpn_sbpi1_bdiv_qr($qp, $np, $nn, $dp, $dn, $dinv) {
  $qp = $qp | 0;
  $np = $np | 0;
  $nn = $nn | 0;
  $dp = $dp | 0;
  $dn = $dn | 0;
  $dinv = $dinv | 0;
  var $qn_080 = 0, $1 = 0, $2 = 0, $qn_085 = 0, $_07084 = 0, $_07183 = 0, $ql_082 = 0, $rh_081 = 0, $qn_0_lcssa = 0, $_070_lcssa = 0, $_071_lcssa = 0, $ql_0_lcssa = 0, $rh_0_lcssa = 0, $3 = 0, $i_076 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $exitcond90 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $qn_0 = 0, $16 = 0, $i_174 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $exitcond = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $sum = 0, $31 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $qn_080 = $nn - $dn | 0;
    $1 = ($qn_080 | 0) > ($dn | 0);
    if ($1) {
      label = 2;
      break;
    } else {
      $rh_0_lcssa = 0;
      $ql_0_lcssa = 1;
      $_071_lcssa = $np;
      $_070_lcssa = $qp;
      $qn_0_lcssa = $qn_080;
      label = 4;
      break;
    }
   case 2:
    $2 = ($dn | 0) > 0;
    $rh_081 = 0;
    $ql_082 = 1;
    $_07183 = $np;
    $_07084 = $qp;
    $qn_085 = $qn_080;
    label = 3;
    break;
   case 3:
    if ($2) {
      $i_076 = 0;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $3 = ($qn_0_lcssa | 0) > 0;
    if ($3) {
      $i_174 = 0;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 5:
    $4 = $_07183 + ($i_076 << 2) | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = Math_imul($5, $dinv);
    $7 = ___gmpn_addmul_1($4, $dp, $dn, $6) | 0;
    HEAP32[$4 >> 2] = $7;
    $8 = $6 ^ -1;
    $9 = $_07084 + ($i_076 << 2) | 0;
    HEAP32[$9 >> 2] = $8;
    $10 = $i_076 + 1 | 0;
    $exitcond90 = ($10 | 0) == ($dn | 0);
    if ($exitcond90) {
      label = 6;
      break;
    } else {
      $i_076 = $10;
      label = 5;
      break;
    }
   case 6:
    $11 = $_07183 + ($dn << 2) | 0;
    $12 = ___gmpn_add($11, $11, $qn_085, $_07183, $dn) | 0;
    $13 = $12 + $rh_081 | 0;
    $14 = ___gmpn_add_1($_07084, $_07084, $dn, $ql_082) | 0;
    $15 = $_07084 + ($dn << 2) | 0;
    $qn_0 = $qn_085 - $dn | 0;
    $16 = ($qn_0 | 0) > ($dn | 0);
    if ($16) {
      $rh_081 = $13;
      $ql_082 = $14;
      $_07183 = $11;
      $_07084 = $15;
      $qn_085 = $qn_0;
      label = 3;
      break;
    } else {
      $rh_0_lcssa = $13;
      $ql_0_lcssa = $14;
      $_071_lcssa = $11;
      $_070_lcssa = $15;
      $qn_0_lcssa = $qn_0;
      label = 4;
      break;
    }
   case 7:
    $17 = $_071_lcssa + ($i_174 << 2) | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = Math_imul($18, $dinv);
    $20 = ___gmpn_addmul_1($17, $dp, $dn, $19) | 0;
    HEAP32[$17 >> 2] = $20;
    $21 = $19 ^ -1;
    $22 = $_070_lcssa + ($i_174 << 2) | 0;
    HEAP32[$22 >> 2] = $21;
    $23 = $i_174 + 1 | 0;
    $exitcond = ($23 | 0) == ($qn_0_lcssa | 0);
    if ($exitcond) {
      label = 8;
      break;
    } else {
      $i_174 = $23;
      label = 7;
      break;
    }
   case 8:
    $24 = $_071_lcssa + ($dn << 2) | 0;
    $25 = ___gmpn_add_n($24, $24, $_071_lcssa, $qn_0_lcssa) | 0;
    $26 = ___gmpn_add_1($_070_lcssa, $_070_lcssa, $qn_0_lcssa, $ql_0_lcssa) | 0;
    $27 = ($26 | 0) == 0;
    if ($27) {
      label = 9;
      break;
    } else {
      $_0 = 0;
      label = 10;
      break;
    }
   case 9:
    $29 = $_071_lcssa + ($qn_0_lcssa << 2) | 0;
    $30 = ___gmpn_sub_n($29, $29, $dp, $dn) | 0;
    $sum = $25 + $rh_0_lcssa | 0;
    $31 = $30 - $sum | 0;
    $_0 = $31;
    label = 10;
    break;
   case 10:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_dcpi1_bdiv_q_n($qp, $np, $dp, $n, $dinv, $tp) {
  $qp = $qp | 0;
  $np = $np | 0;
  $dp = $dp | 0;
  $n = $n | 0;
  $dinv = $dinv | 0;
  $tp = $tp | 0;
  var $1 = 0, $_048 = 0, $_04247 = 0, $_04346 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $sum = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $_0_lcssa = 0, $_042_lcssa = 0, $_043_lcssa = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($n | 0) > 179;
    if ($1) {
      $_04346 = $n;
      $_04247 = $np;
      $_048 = $qp;
      label = 2;
      break;
    } else {
      $_043_lcssa = $n;
      $_042_lcssa = $np;
      $_0_lcssa = $qp;
      label = 5;
      break;
    }
   case 2:
    $2 = $_04346 >> 1;
    $3 = $_04346 - $2 | 0;
    $4 = ___gmpn_dcpi1_bdiv_qr_n($_048, $_04247, $dp, $2, $dinv, $tp) | 0;
    $5 = $dp + ($3 << 2) | 0;
    ___gmpn_mullo_n($tp, $_048, $5, $2);
    $6 = $_04247 + ($3 << 2) | 0;
    $7 = ___gmpn_sub_n($6, $6, $tp, $2) | 0;
    $8 = ($2 | 0) < ($3 | 0);
    if ($8) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $10 = $_04247 + ($2 << 2) | 0;
    $11 = $dp + ($2 << 2) | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ___gmpn_submul_1($10, $_048, $2, $12) | 0;
    $14 = $_04346 - 1 | 0;
    $15 = $_04247 + ($14 << 2) | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $sum = $13 + $4 | 0;
    $17 = $16 - $sum | 0;
    HEAP32[$15 >> 2] = $17;
    label = 4;
    break;
   case 4:
    $19 = $_048 + ($2 << 2) | 0;
    $20 = $_04247 + ($2 << 2) | 0;
    $21 = ($3 | 0) > 179;
    if ($21) {
      $_04346 = $3;
      $_04247 = $20;
      $_048 = $19;
      label = 2;
      break;
    } else {
      $_043_lcssa = $3;
      $_042_lcssa = $20;
      $_0_lcssa = $19;
      label = 5;
      break;
    }
   case 5:
    ___gmpn_sbpi1_bdiv_q($_0_lcssa, $_042_lcssa, $_043_lcssa, $dp, $_043_lcssa, $dinv);
    return;
  }
}
function ___gmpn_dcpi1_bdiv_q($qp, $np, $nn, $dp, $dn, $dinv) {
  $qp = $qp | 0;
  $np = $np | 0;
  $nn = $nn | 0;
  $dp = $dp | 0;
  $dn = $dn | 0;
  $dinv = $dinv | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $qn_0 = 0, $5 = 0, $6 = 0, $8 = 0, $10 = 0, $11 = 0, $13 = 0, $cy_0 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $uadd$0 = 0, $uadd$1 = 0, $27 = 0, $28 = 0, $__p_0 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $cy_1 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $_098 = 0, $_09497 = 0, $qn_196 = 0, $cy_295 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $_0_lcssa = 0, $_094_lcssa = 0, $48 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $dn << 2;
    $2 = STACKTOP;
    STACKTOP = STACKTOP + $1 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $3 = $2;
    $4 = ($nn | 0) > ($dn | 0);
    if ($4) {
      $qn_0 = $nn;
      label = 2;
      break;
    } else {
      label = 16;
      break;
    }
   case 2:
    $5 = $qn_0 - $dn | 0;
    $6 = ($5 | 0) > ($dn | 0);
    if ($6) {
      $qn_0 = $5;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $8 = ($5 | 0) > 49;
    if ($8) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $10 = $5 << 1;
    $11 = ___gmpn_sbpi1_bdiv_qr($qp, $np, $10, $dp, $5, $dinv) | 0;
    $cy_0 = $11;
    label = 6;
    break;
   case 5:
    $13 = ___gmpn_dcpi1_bdiv_qr_n($qp, $np, $dp, $5, $dinv, $3) | 0;
    $cy_0 = $13;
    label = 6;
    break;
   case 6:
    $15 = ($5 | 0) == ($dn | 0);
    if ($15) {
      $cy_1 = $cy_0;
      label = 13;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $17 = $dn - $5 | 0;
    $18 = ($5 | 0) > ($17 | 0);
    $19 = $dp + ($5 << 2) | 0;
    if ($18) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $21 = ___gmpn_mul($3, $qp, $5, $19, $17) | 0;
    label = 10;
    break;
   case 9:
    $23 = ___gmpn_mul($3, $19, $17, $qp, $5) | 0;
    label = 10;
    break;
   case 10:
    $25 = $3 + ($5 << 2) | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($26 | 0, $cy_0 | 0) | 0;
    $uadd$1 = tempRet0;
    $27 = $uadd$0;
    HEAP32[$25 >> 2] = $27;
    $28 = $uadd$1;
    if ($28) {
      $__p_0 = $25;
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $29 = $__p_0 + 4 | 0;
    $30 = HEAP32[$29 >> 2] | 0;
    $31 = $30 + 1 | 0;
    HEAP32[$29 >> 2] = $31;
    $32 = ($31 | 0) == 0;
    if ($32) {
      $__p_0 = $29;
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $33 = $np + ($5 << 2) | 0;
    $34 = $nn - $5 | 0;
    $35 = ___gmpn_sub($33, $33, $34, $3, $dn) | 0;
    $cy_1 = 0;
    label = 13;
    break;
   case 13:
    $37 = $np + ($5 << 2) | 0;
    $38 = $qp + ($5 << 2) | 0;
    $39 = $nn - $5 | 0;
    $40 = ($39 | 0) > ($dn | 0);
    if ($40) {
      $cy_295 = $cy_1;
      $qn_196 = $39;
      $_09497 = $37;
      $_098 = $38;
      label = 14;
      break;
    } else {
      $_094_lcssa = $37;
      $_0_lcssa = $38;
      label = 15;
      break;
    }
   case 14:
    $41 = $_09497 + ($dn << 2) | 0;
    $42 = $qn_196 - $dn | 0;
    $43 = ___gmpn_sub_1($41, $41, $42, $cy_295) | 0;
    $44 = ___gmpn_dcpi1_bdiv_qr_n($_098, $_09497, $dp, $dn, $dinv, $3) | 0;
    $45 = $_098 + ($dn << 2) | 0;
    $46 = ($42 | 0) > ($dn | 0);
    if ($46) {
      $cy_295 = $44;
      $qn_196 = $42;
      $_09497 = $41;
      $_098 = $45;
      label = 14;
      break;
    } else {
      $_094_lcssa = $41;
      $_0_lcssa = $45;
      label = 15;
      break;
    }
   case 15:
    ___gmpn_dcpi1_bdiv_q_n($_0_lcssa, $_094_lcssa, $dp, $dn, $dinv, $3);
    label = 19;
    break;
   case 16:
    $48 = ($nn | 0) > 179;
    if ($48) {
      label = 18;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    ___gmpn_sbpi1_bdiv_q($qp, $np, $nn, $dp, $nn, $dinv);
    label = 19;
    break;
   case 18:
    ___gmpn_dcpi1_bdiv_q_n($qp, $np, $dp, $nn, $dinv, $3);
    label = 19;
    break;
   case 19:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpn_dcpi1_bdiv_qr_n($qp, $np, $dp, $n, $dinv, $tp) {
  $qp = $qp | 0;
  $np = $np | 0;
  $dp = $dp | 0;
  $n = $n | 0;
  $dinv = $dinv | 0;
  $tp = $tp | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $cy_0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $uadd$0 = 0, $uadd$1 = 0, $14 = 0, $15 = 0, $__p_0 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $cy_1 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $uadd66$0 = 0, $uadd66$1 = 0, $35 = 0, $36 = 0, $__p2_0 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n >> 1;
    $2 = $n - $1 | 0;
    $3 = ($1 | 0) > 49;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = $1 << 1;
    $6 = ___gmpn_sbpi1_bdiv_qr($qp, $np, $5, $dp, $1, $dinv) | 0;
    $cy_0 = $6;
    label = 4;
    break;
   case 3:
    $8 = ___gmpn_dcpi1_bdiv_qr_n($qp, $np, $dp, $1, $dinv, $tp) | 0;
    $cy_0 = $8;
    label = 4;
    break;
   case 4:
    $10 = $dp + ($1 << 2) | 0;
    $11 = ___gmpn_mul($tp, $10, $2, $qp, $1) | 0;
    $12 = $tp + ($1 << 2) | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($13 | 0, $cy_0 | 0) | 0;
    $uadd$1 = tempRet0;
    $14 = $uadd$0;
    HEAP32[$12 >> 2] = $14;
    $15 = $uadd$1;
    if ($15) {
      $__p_0 = $12;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $16 = $__p_0 + 4 | 0;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = $17 + 1 | 0;
    HEAP32[$16 >> 2] = $18;
    $19 = ($18 | 0) == 0;
    if ($19) {
      $__p_0 = $16;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $20 = $np + ($1 << 2) | 0;
    $21 = $2 + $n | 0;
    $22 = ___gmpn_sub($20, $20, $21, $tp, $n) | 0;
    $23 = ($2 | 0) > 49;
    $24 = $qp + ($1 << 2) | 0;
    if ($23) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $26 = $2 << 1;
    $27 = ___gmpn_sbpi1_bdiv_qr($24, $20, $26, $dp, $2, $dinv) | 0;
    $cy_1 = $27;
    label = 9;
    break;
   case 8:
    $29 = ___gmpn_dcpi1_bdiv_qr_n($24, $20, $dp, $2, $dinv, $tp) | 0;
    $cy_1 = $29;
    label = 9;
    break;
   case 9:
    $31 = $dp + ($2 << 2) | 0;
    $32 = ___gmpn_mul($tp, $24, $2, $31, $1) | 0;
    $33 = $tp + ($2 << 2) | 0;
    $34 = HEAP32[$33 >> 2] | 0;
    $uadd66$0 = _llvm_uadd_with_overflow_i32($34 | 0, $cy_1 | 0) | 0;
    $uadd66$1 = tempRet0;
    $35 = $uadd66$0;
    HEAP32[$33 >> 2] = $35;
    $36 = $uadd66$1;
    if ($36) {
      $__p2_0 = $33;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $37 = $__p2_0 + 4 | 0;
    $38 = HEAP32[$37 >> 2] | 0;
    $39 = $38 + 1 | 0;
    HEAP32[$37 >> 2] = $39;
    $40 = ($39 | 0) == 0;
    if ($40) {
      $__p2_0 = $37;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $41 = $np + ($n << 2) | 0;
    $42 = ___gmpn_sub_n($41, $41, $tp, $n) | 0;
    $43 = $42 + $22 | 0;
    return $43 | 0;
  }
  return 0;
}
function ___gmpn_mu_bdiv_q($qp, $np, $nn, $dp, $dn, $scratch) {
  $qp = $qp | 0;
  $np = $np | 0;
  $nn = $nn | 0;
  $dp = $dp | 0;
  $dn = $dn | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $__n_0 = 0, $__dst_0 = 0, $np_pn = 0, $__x_0 = 0, $__src_0 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $scevgep = 0, $__dst_1 = 0, $__x_1 = 0, $22 = 0, $qn_0284 = 0, $23 = 0, $24 = 0, $_sum274 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $factor = 0, $_sum269 = 0, $29 = 0, $_sum270 = 0, $30 = 0, $_sum271 = 0, $_sum272 = 0, $31 = 0, $32 = 0, $_sum273 = 0, $33 = 0, $_sum266 = 0, $34 = 0, $qn_0288 = 0, $_0287 = 0, $_0252286 = 0, $cy_0285 = 0, $37 = 0, $39 = 0, $_sum275 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $_sum276 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $__p_0 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $__p3_0 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $cy_1 = 0, $63 = 0, $64 = 0, $qn_0 = 0, $65 = 0, $qn_0_lcssa = 0, $_0_lcssa = 0, $_0252_lcssa = 0, $cy_0_lcssa = 0, $_sum255 = 0, $67 = 0, $68 = 0, $70 = 0, $_sum263 = 0, $71 = 0, $_sum264 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $_sum265 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $__p5_0 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $_sum259 = 0, $89 = 0, $_sum260 = 0, $_sum261 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $_sum262 = 0, $96 = 0, $__p7_0 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $cy_2 = 0, $102 = 0, $factor278 = 0, $_sum258 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $115 = 0, $_sum253 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $121 = 0, $_lobit = 0, $_sum254 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $__p9_0 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $_sum = 0, $131 = 0, $132 = 0, $133 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($nn | 0) > ($dn | 0);
    if ($1) {
      label = 2;
      break;
    } else {
      label = 29;
      break;
    }
   case 2:
    $3 = $nn - 1 | 0;
    $4 = ($3 | 0) / ($dn | 0) & -1;
    $5 = $4 + 1 | 0;
    $6 = ($3 | 0) / ($5 | 0) & -1;
    $7 = $6 + 1 | 0;
    $8 = $scratch + ($7 << 2) | 0;
    ___gmpn_binvert($scratch, $dp, $7, $8);
    $9 = ($dn | 0) == 0;
    if ($9) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $11 = $dn - 1 | 0;
    $12 = HEAP32[$np >> 2] | 0;
    $13 = ($11 | 0) == 0;
    if ($13) {
      $__x_1 = $12;
      $__dst_1 = $8;
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $14 = $6 + $dn | 0;
    $__x_0 = $12;
    $np_pn = $np;
    $__dst_0 = $8;
    $__n_0 = $11;
    label = 5;
    break;
   case 5:
    $__src_0 = $np_pn + 4 | 0;
    $16 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $17 = HEAP32[$__src_0 >> 2] | 0;
    $18 = $__n_0 - 1 | 0;
    $19 = ($18 | 0) == 0;
    if ($19) {
      label = 6;
      break;
    } else {
      $__x_0 = $17;
      $np_pn = $__src_0;
      $__dst_0 = $16;
      $__n_0 = $18;
      label = 5;
      break;
    }
   case 6:
    $scevgep = $scratch + ($14 << 2) | 0;
    $__x_1 = $17;
    $__dst_1 = $scevgep;
    label = 7;
    break;
   case 7:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 8;
    break;
   case 8:
    $22 = $np + ($dn << 2) | 0;
    ___gmpn_mullo_n($qp, $8, $scratch, $7);
    $qn_0284 = $nn - $7 | 0;
    $23 = ($qn_0284 | 0) > ($7 | 0);
    $24 = ($7 | 0) > 39;
    if ($23) {
      label = 9;
      break;
    } else {
      $cy_0_lcssa = 0;
      $_0252_lcssa = $22;
      $_0_lcssa = $qp;
      $qn_0_lcssa = $qn_0284;
      label = 19;
      break;
    }
   case 9:
    $_sum274 = $7 + $dn | 0;
    $25 = $scratch + ($_sum274 << 2) | 0;
    $26 = $7 + $dn | 0;
    $27 = ($7 | 0) == ($dn | 0);
    $28 = $scratch + ($dn << 2) | 0;
    $factor = $dn << 1;
    $_sum269 = $factor + $7 | 0;
    $29 = $scratch + ($_sum269 << 2) | 0;
    $_sum270 = $7 << 1;
    $30 = $scratch + ($_sum270 << 2) | 0;
    $_sum271 = $7 + $dn | 0;
    $_sum272 = $_sum271 + $7 | 0;
    $31 = $scratch + ($_sum272 << 2) | 0;
    $32 = $dn - $7 | 0;
    $_sum273 = $_sum271 + $dn | 0;
    $33 = $scratch + ($_sum273 << 2) | 0;
    $_sum266 = $7 + $dn | 0;
    $34 = $scratch + ($_sum266 << 2) | 0;
    $cy_0285 = 0;
    $_0252286 = $22;
    $_0287 = $qp;
    $qn_0288 = $qn_0284;
    label = 10;
    break;
   case 10:
    if ($24) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $37 = ___gmpn_mul($34, $dp, $dn, $_0287, $7) | 0;
    label = 15;
    break;
   case 12:
    $39 = ___gmpn_mulmod_bnm1_next_size($dn) | 0;
    $_sum275 = $39 + $_sum274 | 0;
    $40 = $scratch + ($_sum275 << 2) | 0;
    ___gmpn_mulmod_bnm1($25, $39, $dp, $dn, $_0287, $7, $40);
    $41 = $26 - $39 | 0;
    $42 = ($41 | 0) > 0;
    if ($42) {
      label = 13;
      break;
    } else {
      label = 15;
      break;
    }
   case 13:
    $44 = ___gmpn_sub_n($40, $25, $8, $41) | 0;
    $_sum276 = $41 + $_sum274 | 0;
    $45 = $scratch + ($_sum276 << 2) | 0;
    $46 = HEAP32[$45 >> 2] | 0;
    $47 = $46 - $44 | 0;
    HEAP32[$45 >> 2] = $47;
    $48 = $46 >>> 0 < $44 >>> 0;
    if ($48) {
      $__p_0 = $45;
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $49 = $__p_0 + 4 | 0;
    $50 = HEAP32[$49 >> 2] | 0;
    $51 = $50 - 1 | 0;
    HEAP32[$49 >> 2] = $51;
    $52 = ($50 | 0) == 0;
    if ($52) {
      $__p_0 = $49;
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $53 = $_0287 + ($7 << 2) | 0;
    if ($27) {
      $cy_1 = $cy_0285;
      label = 18;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $55 = ___gmpn_sub_n($8, $30, $31, $32) | 0;
    $56 = $55 + $cy_0285 | 0;
    $57 = ($56 | 0) == 2;
    if ($57) {
      $__p3_0 = $33;
      label = 17;
      break;
    } else {
      $cy_1 = $56;
      label = 18;
      break;
    }
   case 17:
    $59 = $__p3_0 + 4 | 0;
    $60 = HEAP32[$__p3_0 >> 2] | 0;
    $61 = $60 + 1 | 0;
    HEAP32[$__p3_0 >> 2] = $61;
    $62 = ($61 | 0) == 0;
    if ($62) {
      $__p3_0 = $59;
      label = 17;
      break;
    } else {
      $cy_1 = 1;
      label = 18;
      break;
    }
   case 18:
    $63 = _mpn_sub_nc416($28, $_0252286, $29, $7, $cy_1) | 0;
    $64 = $_0252286 + ($7 << 2) | 0;
    ___gmpn_mullo_n($53, $8, $scratch, $7);
    $qn_0 = $qn_0288 - $7 | 0;
    $65 = ($qn_0 | 0) > ($7 | 0);
    if ($65) {
      $cy_0285 = $63;
      $_0252286 = $64;
      $_0287 = $53;
      $qn_0288 = $qn_0;
      label = 10;
      break;
    } else {
      $cy_0_lcssa = $63;
      $_0252_lcssa = $64;
      $_0_lcssa = $53;
      $qn_0_lcssa = $qn_0;
      label = 19;
      break;
    }
   case 19:
    if ($24) {
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $_sum255 = $7 + $dn | 0;
    $67 = $scratch + ($_sum255 << 2) | 0;
    $68 = ___gmpn_mul($67, $dp, $dn, $_0_lcssa, $7) | 0;
    label = 24;
    break;
   case 21:
    $70 = ___gmpn_mulmod_bnm1_next_size($dn) | 0;
    $_sum263 = $7 + $dn | 0;
    $71 = $scratch + ($_sum263 << 2) | 0;
    $_sum264 = $70 + $_sum263 | 0;
    $72 = $scratch + ($_sum264 << 2) | 0;
    ___gmpn_mulmod_bnm1($71, $70, $dp, $dn, $_0_lcssa, $7, $72);
    $73 = $7 + $dn | 0;
    $74 = $73 - $70 | 0;
    $75 = ($74 | 0) > 0;
    if ($75) {
      label = 22;
      break;
    } else {
      label = 24;
      break;
    }
   case 22:
    $77 = ___gmpn_sub_n($72, $71, $8, $74) | 0;
    $_sum265 = $74 + $_sum263 | 0;
    $78 = $scratch + ($_sum265 << 2) | 0;
    $79 = HEAP32[$78 >> 2] | 0;
    $80 = $79 - $77 | 0;
    HEAP32[$78 >> 2] = $80;
    $81 = $79 >>> 0 < $77 >>> 0;
    if ($81) {
      $__p5_0 = $78;
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    $82 = $__p5_0 + 4 | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = $83 - 1 | 0;
    HEAP32[$82 >> 2] = $84;
    $85 = ($83 | 0) == 0;
    if ($85) {
      $__p5_0 = $82;
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $86 = $_0_lcssa + ($7 << 2) | 0;
    $87 = ($7 | 0) == ($dn | 0);
    if ($87) {
      $cy_2 = $cy_0_lcssa;
      label = 28;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    $_sum259 = $7 << 1;
    $89 = $scratch + ($_sum259 << 2) | 0;
    $_sum260 = $7 + $dn | 0;
    $_sum261 = $_sum260 + $7 | 0;
    $90 = $scratch + ($_sum261 << 2) | 0;
    $91 = $dn - $7 | 0;
    $92 = ___gmpn_sub_n($8, $89, $90, $91) | 0;
    $93 = $92 + $cy_0_lcssa | 0;
    $94 = ($93 | 0) == 2;
    if ($94) {
      label = 26;
      break;
    } else {
      $cy_2 = $93;
      label = 28;
      break;
    }
   case 26:
    $_sum262 = $_sum260 + $dn | 0;
    $96 = $scratch + ($_sum262 << 2) | 0;
    $__p7_0 = $96;
    label = 27;
    break;
   case 27:
    $98 = $__p7_0 + 4 | 0;
    $99 = HEAP32[$__p7_0 >> 2] | 0;
    $100 = $99 + 1 | 0;
    HEAP32[$__p7_0 >> 2] = $100;
    $101 = ($100 | 0) == 0;
    if ($101) {
      $__p7_0 = $98;
      label = 27;
      break;
    } else {
      $cy_2 = 1;
      label = 28;
      break;
    }
   case 28:
    $102 = $scratch + ($dn << 2) | 0;
    $factor278 = $dn << 1;
    $_sum258 = $factor278 + $7 | 0;
    $103 = $scratch + ($_sum258 << 2) | 0;
    $104 = $7 - $dn | 0;
    $105 = $104 + $qn_0_lcssa | 0;
    $106 = _mpn_sub_nc416($102, $_0252_lcssa, $103, $105, $cy_2) | 0;
    ___gmpn_mullo_n($86, $8, $scratch, $qn_0_lcssa);
    label = 35;
    break;
   case 29:
    $108 = $nn >> 1;
    $109 = $nn - $108 | 0;
    $110 = $scratch + ($109 << 2) | 0;
    ___gmpn_binvert($scratch, $dp, $109, $110);
    ___gmpn_mullo_n($qp, $np, $scratch, $109);
    $111 = ($109 | 0) > 39;
    if ($111) {
      label = 31;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    $113 = ___gmpn_mul($110, $dp, $nn, $qp, $109) | 0;
    label = 34;
    break;
   case 31:
    $115 = ___gmpn_mulmod_bnm1_next_size($nn) | 0;
    $_sum253 = $115 + $109 | 0;
    $116 = $scratch + ($_sum253 << 2) | 0;
    ___gmpn_mulmod_bnm1($110, $115, $dp, $nn, $qp, $109, $116);
    $117 = $109 + $nn | 0;
    $118 = $117 - $115 | 0;
    $119 = ($118 | 0) > 0;
    if ($119) {
      label = 32;
      break;
    } else {
      label = 34;
      break;
    }
   case 32:
    $121 = ___gmpn_cmp($110, $np, $118) | 0;
    $_lobit = $121 >>> 31;
    $_sum254 = $118 + $109 | 0;
    $122 = $scratch + ($_sum254 << 2) | 0;
    $123 = HEAP32[$122 >> 2] | 0;
    $124 = $123 - $_lobit | 0;
    HEAP32[$122 >> 2] = $124;
    $125 = $123 >>> 0 < $_lobit >>> 0;
    if ($125) {
      $__p9_0 = $122;
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    $126 = $__p9_0 + 4 | 0;
    $127 = HEAP32[$126 >> 2] | 0;
    $128 = $127 - 1 | 0;
    HEAP32[$126 >> 2] = $128;
    $129 = ($127 | 0) == 0;
    if ($129) {
      $__p9_0 = $126;
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    $130 = $np + ($109 << 2) | 0;
    $_sum = $109 << 1;
    $131 = $scratch + ($_sum << 2) | 0;
    $132 = ___gmpn_sub_n($110, $130, $131, $108) | 0;
    $133 = $qp + ($109 << 2) | 0;
    ___gmpn_mullo_n($133, $110, $scratch, $108);
    label = 35;
    break;
   case 35:
    return;
  }
}
function _mpn_sub_nc416($rp, $up, $vp, $n, $ci) {
  $rp = $rp | 0;
  $up = $up | 0;
  $vp = $vp | 0;
  $n = $n | 0;
  $ci = $ci | 0;
  var $1 = 0;
  $1 = ___gmpn_sub_n($rp, $up, $vp, $n) | 0;
  return (___gmpn_sub_1($rp, $rp, $n, $ci) | 0) + $1 | 0;
}
function ___gmpn_mu_bdiv_q_itch($nn, $dn) {
  $nn = $nn | 0;
  $dn = $dn | 0;
  var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $12 = 0, $13 = 0, $tn_0 = 0, $itch_out_0 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $tn_1 = 0, $itch_out_1 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($nn | 0) > ($dn | 0);
    if ($1) {
      label = 2;
      break;
    } else {
      label = 6;
      break;
    }
   case 2:
    $3 = $nn - 1 | 0;
    $4 = ($3 | 0) / ($dn | 0) & -1;
    $5 = $4 + 1 | 0;
    $6 = ($3 | 0) / ($5 | 0) & -1;
    $7 = $6 + 1 | 0;
    $8 = ($7 | 0) > 39;
    if ($8) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $10 = $7 + $dn | 0;
    $itch_out_0 = 0;
    $tn_0 = $10;
    label = 5;
    break;
   case 4:
    $12 = ___gmpn_mulmod_bnm1_next_size($dn) | 0;
    $13 = _mpn_mulmod_bnm1_itch417($12, $dn, $7) | 0;
    $itch_out_0 = $13;
    $tn_0 = $12;
    label = 5;
    break;
   case 5:
    $15 = ___gmpn_binvert_itch($7) | 0;
    $16 = $tn_0 + $dn | 0;
    $17 = $16 + $itch_out_0 | 0;
    $18 = ($17 | 0) > ($15 | 0);
    $19 = $18 ? $17 : $15;
    $20 = $19 + $7 | 0;
    $_0 = $20;
    label = 10;
    break;
   case 6:
    $22 = $nn >> 1;
    $23 = $nn - $22 | 0;
    $24 = ($23 | 0) > 39;
    if ($24) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $26 = $23 + $nn | 0;
    $itch_out_1 = 0;
    $tn_1 = $26;
    label = 9;
    break;
   case 8:
    $28 = ___gmpn_mulmod_bnm1_next_size($nn) | 0;
    $29 = _mpn_mulmod_bnm1_itch417($28, $nn, $23) | 0;
    $itch_out_1 = $29;
    $tn_1 = $28;
    label = 9;
    break;
   case 9:
    $31 = ___gmpn_binvert_itch($23) | 0;
    $32 = $itch_out_1 + $tn_1 | 0;
    $33 = ($32 | 0) > ($31 | 0);
    $34 = $33 ? $32 : $31;
    $35 = $34 + $23 | 0;
    $_0 = $35;
    label = 10;
    break;
   case 10:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_bdiv_q($qp, $np, $nn, $dp, $dn, $tp) {
  $qp = $qp | 0;
  $np = $np | 0;
  $nn = $nn | 0;
  $dp = $dp | 0;
  $dn = $dn | 0;
  $tp = $tp | 0;
  var $1 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__x_0 = 0, $np_pn = 0, $__dst_0 = 0, $__n_0 = 0, $__src_0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $scevgep63 = 0, $__x_1 = 0, $__dst_1 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $__n2_0 = 0, $__dst3_0 = 0, $np_pn55 = 0, $__x5_0 = 0, $__src4_0 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $scevgep = 0, $__dst3_1 = 0, $__x5_1 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($dn | 0) > 179;
    if ($1) {
      label = 9;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = ($nn | 0) == 0;
    if ($3) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $5 = $nn - 1 | 0;
    $6 = HEAP32[$np >> 2] | 0;
    $7 = ($5 | 0) == 0;
    if ($7) {
      $__dst_1 = $tp;
      $__x_1 = $6;
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $8 = $nn - 1 | 0;
    $__n_0 = $5;
    $__dst_0 = $tp;
    $np_pn = $np;
    $__x_0 = $6;
    label = 5;
    break;
   case 5:
    $__src_0 = $np_pn + 4 | 0;
    $10 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $11 = HEAP32[$__src_0 >> 2] | 0;
    $12 = $__n_0 - 1 | 0;
    $13 = ($12 | 0) == 0;
    if ($13) {
      label = 6;
      break;
    } else {
      $__n_0 = $12;
      $__dst_0 = $10;
      $np_pn = $__src_0;
      $__x_0 = $11;
      label = 5;
      break;
    }
   case 6:
    $scevgep63 = $tp + ($8 << 2) | 0;
    $__dst_1 = $scevgep63;
    $__x_1 = $11;
    label = 7;
    break;
   case 7:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    label = 8;
    break;
   case 8:
    $16 = HEAP32[$dp >> 2] | 0;
    $17 = $16 >>> 1;
    $18 = $17 & 127;
    $19 = $18 + 15720 | 0;
    $20 = HEAP8[$19] | 0;
    $21 = $20 & 255;
    $22 = $21 << 1;
    $23 = Math_imul($21, $16);
    $24 = Math_imul($23, $21);
    $25 = $22 - $24 | 0;
    $26 = $25 << 1;
    $27 = Math_imul($25, $16);
    $28 = Math_imul($27, $25);
    $29 = $28 - $26 | 0;
    ___gmpn_sbpi1_bdiv_q($qp, $tp, $nn, $dp, $dn, $29);
    label = 18;
    break;
   case 9:
    $31 = ($dn | 0) > 1999;
    if ($31) {
      label = 17;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $33 = ($nn | 0) == 0;
    if ($33) {
      label = 16;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $35 = $nn - 1 | 0;
    $36 = HEAP32[$np >> 2] | 0;
    $37 = ($35 | 0) == 0;
    if ($37) {
      $__x5_1 = $36;
      $__dst3_1 = $tp;
      label = 15;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $38 = $nn - 1 | 0;
    $__x5_0 = $36;
    $np_pn55 = $np;
    $__dst3_0 = $tp;
    $__n2_0 = $35;
    label = 13;
    break;
   case 13:
    $__src4_0 = $np_pn55 + 4 | 0;
    $40 = $__dst3_0 + 4 | 0;
    HEAP32[$__dst3_0 >> 2] = $__x5_0;
    $41 = HEAP32[$__src4_0 >> 2] | 0;
    $42 = $__n2_0 - 1 | 0;
    $43 = ($42 | 0) == 0;
    if ($43) {
      label = 14;
      break;
    } else {
      $__x5_0 = $41;
      $np_pn55 = $__src4_0;
      $__dst3_0 = $40;
      $__n2_0 = $42;
      label = 13;
      break;
    }
   case 14:
    $scevgep = $tp + ($38 << 2) | 0;
    $__x5_1 = $41;
    $__dst3_1 = $scevgep;
    label = 15;
    break;
   case 15:
    HEAP32[$__dst3_1 >> 2] = $__x5_1;
    label = 16;
    break;
   case 16:
    $46 = HEAP32[$dp >> 2] | 0;
    $47 = $46 >>> 1;
    $48 = $47 & 127;
    $49 = $48 + 15720 | 0;
    $50 = HEAP8[$49] | 0;
    $51 = $50 & 255;
    $52 = $51 << 1;
    $53 = Math_imul($51, $46);
    $54 = Math_imul($53, $51);
    $55 = $52 - $54 | 0;
    $56 = $55 << 1;
    $57 = Math_imul($55, $46);
    $58 = Math_imul($57, $55);
    $59 = $58 - $56 | 0;
    ___gmpn_dcpi1_bdiv_q($qp, $tp, $nn, $dp, $dn, $59);
    label = 18;
    break;
   case 17:
    ___gmpn_mu_bdiv_q($qp, $np, $nn, $dp, $dn, $tp);
    label = 18;
    break;
   case 18:
    return;
  }
}
function ___gmpn_bdiv_q_itch($nn, $dn) {
  $nn = $nn | 0;
  $dn = $dn | 0;
  var $1 = 0, $3 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($dn | 0) > 1999;
    if ($1) {
      label = 2;
      break;
    } else {
      $_0 = $nn;
      label = 3;
      break;
    }
   case 2:
    $3 = ___gmpn_mu_bdiv_q_itch($nn, $dn) | 0;
    $_0 = $3;
    label = 3;
    break;
   case 3:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_divexact($qp, $np, $nn, $dp, $dn) {
  $qp = $qp | 0;
  $np = $np | 0;
  $nn = $nn | 0;
  $dp = $dp | 0;
  $dn = $dn | 0;
  var $__tmp_marker = 0, $1 = 0, $2 = 0, $_056 = 0, $_04855 = 0, $_04954 = 0, $_05153 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_lcssa = 0, $_0_lcssa = 0, $_048_lcssa = 0, $_049_lcssa = 0, $_051_lcssa = 0, $9 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $__ctz_x_0 = 0, $__ctz_c_0 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $__ctz_x_1 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $shift_0 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $_150 = 0, $_1 = 0, $64 = 0, $__051 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    $1 = HEAP32[$dp >> 2] | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      $_05153 = $dn;
      $_04954 = $dp;
      $_04855 = $nn;
      $_056 = $np;
      label = 2;
      break;
    } else {
      $_051_lcssa = $dn;
      $_049_lcssa = $dp;
      $_048_lcssa = $nn;
      $_0_lcssa = $np;
      $_lcssa = $1;
      label = 3;
      break;
    }
   case 2:
    $3 = $_04954 + 4 | 0;
    $4 = $_056 + 4 | 0;
    $5 = $_05153 - 1 | 0;
    $6 = $_04855 - 1 | 0;
    $7 = HEAP32[$3 >> 2] | 0;
    $8 = ($7 | 0) == 0;
    if ($8) {
      $_05153 = $5;
      $_04954 = $3;
      $_04855 = $6;
      $_056 = $4;
      label = 2;
      break;
    } else {
      $_051_lcssa = $5;
      $_049_lcssa = $3;
      $_048_lcssa = $6;
      $_0_lcssa = $4;
      $_lcssa = $7;
      label = 3;
      break;
    }
   case 3:
    $9 = ($_051_lcssa | 0) == 1;
    if ($9) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    ___gmpn_divexact_1($qp, $_0_lcssa, $_048_lcssa, $_lcssa);
    label = 23;
    break;
   case 5:
    HEAP32[$__tmp_marker >> 2] = 0;
    $12 = 1 - $_051_lcssa | 0;
    $13 = $12 + $_048_lcssa | 0;
    $14 = HEAP32[$_049_lcssa >> 2] | 0;
    $15 = $14 & 255;
    $16 = ($15 | 0) == 0;
    if ($16) {
      $__ctz_c_0 = 6;
      $__ctz_x_0 = $14;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $18 = -$14 | 0;
    $19 = $14 & $18;
    $20 = $19 + 9696 | 0;
    $21 = HEAP8[$20] | 0;
    $22 = $21 & 255;
    $23 = $22 - 2 | 0;
    $shift_0 = $23;
    label = 10;
    break;
   case 7:
    $24 = ($__ctz_c_0 | 0) < 30;
    if ($24) {
      label = 8;
      break;
    } else {
      $__ctz_x_1 = $__ctz_x_0;
      label = 9;
      break;
    }
   case 8:
    $26 = $__ctz_x_0 >>> 8;
    $27 = $26 & 255;
    $28 = ($27 | 0) == 0;
    $29 = $__ctz_c_0 + 8 | 0;
    if ($28) {
      $__ctz_c_0 = $29;
      $__ctz_x_0 = $26;
      label = 7;
      break;
    } else {
      $__ctz_x_1 = $26;
      label = 9;
      break;
    }
   case 9:
    $31 = -$__ctz_x_1 | 0;
    $32 = $__ctz_x_1 & $31;
    $33 = $32 + 9696 | 0;
    $34 = HEAP8[$33] | 0;
    $35 = $34 & 255;
    $36 = $35 + $__ctz_c_0 | 0;
    $shift_0 = $36;
    label = 10;
    break;
   case 10:
    $38 = ($shift_0 | 0) == 0;
    if ($38) {
      $_1 = $_0_lcssa;
      $_150 = $_049_lcssa;
      label = 18;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $40 = ($_051_lcssa | 0) > ($13 | 0);
    $41 = $13 + 1 | 0;
    $42 = $40 ? $41 : $_051_lcssa;
    $43 = $42 << 2;
    $44 = $43 >>> 0 < 65536;
    if ($44) {
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $46 = STACKTOP;
    STACKTOP = STACKTOP + $43 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $50 = $46;
    label = 14;
    break;
   case 13:
    $48 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $43) | 0;
    $50 = $48;
    label = 14;
    break;
   case 14:
    $51 = $50;
    $52 = ___gmpn_rshift($51, $_049_lcssa, $42, $shift_0) | 0;
    $53 = $41 << 2;
    $54 = $53 >>> 0 < 65536;
    if ($54) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $56 = STACKTOP;
    STACKTOP = STACKTOP + $53 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $60 = $56;
    label = 17;
    break;
   case 16:
    $58 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $53) | 0;
    $60 = $58;
    label = 17;
    break;
   case 17:
    $61 = $60;
    $62 = ___gmpn_rshift($61, $_0_lcssa, $41, $shift_0) | 0;
    $_1 = $61;
    $_150 = $51;
    label = 18;
    break;
   case 18:
    $64 = ($_051_lcssa | 0) > ($13 | 0);
    $__051 = $64 ? $13 : $_051_lcssa;
    $65 = ___gmpn_bdiv_q_itch($13, $__051) | 0;
    $66 = $65 << 2;
    $67 = $66 >>> 0 < 65536;
    if ($67) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    $69 = STACKTOP;
    STACKTOP = STACKTOP + $66 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $73 = $69;
    label = 21;
    break;
   case 20:
    $71 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $66) | 0;
    $73 = $71;
    label = 21;
    break;
   case 21:
    $74 = $73;
    ___gmpn_bdiv_q($qp, $_1, $13, $_150, $__051, $74);
    $75 = HEAP32[$__tmp_marker >> 2] | 0;
    $76 = ($75 | 0) == 0;
    if ($76) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    ___gmp_tmp_reentrant_free($75);
    label = 23;
    break;
   case 23:
    STACKTOP = __stackBase__;
    return;
  }
}
function _mpn_mulmod_bnm1_itch435($rn, $an, $bn) {
  $rn = $rn | 0;
  $an = $an | 0;
  $bn = $bn | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $rn >> 1;
    $2 = $rn + 4 | 0;
    $3 = ($1 | 0) < ($an | 0);
    if ($3) {
      label = 2;
      break;
    } else {
      $8 = 0;
      label = 3;
      break;
    }
   case 2:
    $5 = ($1 | 0) < ($bn | 0);
    $6 = $5 ? $rn : $1;
    $8 = $6;
    label = 3;
    break;
   case 3:
    $9 = $2 + $8 | 0;
    return $9 | 0;
  }
  return 0;
}
function _win_size($eb) {
  $eb = $eb | 0;
  var $k_0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $k_0 = 1;
    label = 2;
    break;
   case 2:
    $2 = 608 + ($k_0 << 2) | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $3 >>> 0 < $eb >>> 0;
    $5 = $k_0 + 1 | 0;
    if ($4) {
      $k_0 = $5;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    return $k_0 | 0;
  }
  return 0;
}
function _getbits($p, $bi, $nbits) {
  $p = $p | 0;
  $bi = $bi | 0;
  $nbits = $nbits | 0;
  var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $r_0 = 0, $23 = 0, $24 = 0, $25 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $bi >>> 0 < $nbits >>> 0;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $3 = HEAP32[$p >> 2] | 0;
    $4 = 1 << $bi;
    $5 = $4 - 1 | 0;
    $6 = $3 & $5;
    $_0 = $6;
    label = 6;
    break;
   case 3:
    $8 = $bi - $nbits | 0;
    $9 = $8 >>> 5;
    $10 = $8 & 31;
    $11 = $p + ($9 << 2) | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 >>> ($10 >>> 0);
    $14 = 32 - $10 | 0;
    $15 = ($14 | 0) < ($nbits | 0);
    if ($15) {
      label = 4;
      break;
    } else {
      $r_0 = $13;
      label = 5;
      break;
    }
   case 4:
    $17 = $9 + 1 | 0;
    $18 = $p + ($17 << 2) | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $19 << $14;
    $21 = $20 + $13 | 0;
    $r_0 = $21;
    label = 5;
    break;
   case 5:
    $23 = 1 << $nbits;
    $24 = $23 - 1 | 0;
    $25 = $r_0 & $24;
    $_0 = $25;
    label = 6;
    break;
   case 6:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_bdiv_dbm1c($qp, $ap, $n, $bd, $h) {
  $qp = $qp | 0;
  $ap = $ap | 0;
  $n = $n | 0;
  $bd = $bd | 0;
  $h = $h | 0;
  var $1 = 0, $2 = 0, $3 = 0, $_030 = 0, $i_029 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $uadd$0 = 0, $uadd$1 = 0, $15 = 0, $16 = 0, $17 = 0, $__x3_0 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $sum = 0, $26 = 0, $27 = 0, $28 = 0, $exitcond = 0, $_0_lcssa = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($n | 0) > 0;
    if ($1) {
      label = 2;
      break;
    } else {
      $_0_lcssa = $h;
      label = 4;
      break;
    }
   case 2:
    $2 = $bd & 65535;
    $3 = $bd >>> 16;
    $i_029 = 0;
    $_030 = $h;
    label = 3;
    break;
   case 3:
    $5 = $ap + ($i_029 << 2) | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6 & 65535;
    $8 = $6 >>> 16;
    $9 = Math_imul($7, $2);
    $10 = Math_imul($7, $3);
    $11 = Math_imul($8, $2);
    $12 = Math_imul($8, $3);
    $13 = $9 >>> 16;
    $14 = $13 + $10 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($14 | 0, $11 | 0) | 0;
    $uadd$1 = tempRet0;
    $15 = $uadd$0;
    $16 = $uadd$1;
    $17 = $12 + 65536 | 0;
    $__x3_0 = $16 ? $17 : $12;
    $18 = $15 >>> 16;
    $19 = $15 << 16;
    $20 = $9 & 65535;
    $21 = $19 | $20;
    $22 = $_030 >>> 0 < $21 >>> 0;
    $23 = $22 & 1;
    $24 = $_030 - $21 | 0;
    $25 = $qp + ($i_029 << 2) | 0;
    HEAP32[$25 >> 2] = $24;
    $sum = $__x3_0 + $18 | 0;
    $26 = $24 - $sum | 0;
    $27 = $26 - $23 | 0;
    $28 = $i_029 + 1 | 0;
    $exitcond = ($28 | 0) == ($n | 0);
    if ($exitcond) {
      $_0_lcssa = $27;
      label = 4;
      break;
    } else {
      $i_029 = $28;
      $_030 = $27;
      label = 3;
      break;
    }
   case 4:
    return $_0_lcssa | 0;
  }
  return 0;
}
function ___gmpn_redc_1($rp, $up, $mp, $n, $invm) {
  $rp = $rp | 0;
  $up = $up | 0;
  $mp = $mp | 0;
  $n = $n | 0;
  $invm = $invm | 0;
  var $1 = 0, $j_0_in16 = 0, $_015 = 0, $j_0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $scevgep = 0, $_0_lcssa = 0, $8 = 0, $9 = 0, $10 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($n | 0) > 0;
    if ($1) {
      $_015 = $up;
      $j_0_in16 = $n;
      label = 2;
      break;
    } else {
      $_0_lcssa = $up;
      label = 4;
      break;
    }
   case 2:
    $j_0 = $j_0_in16 - 1 | 0;
    $2 = HEAP32[$_015 >> 2] | 0;
    $3 = Math_imul($2, $invm);
    $4 = ___gmpn_addmul_1($_015, $mp, $n, $3) | 0;
    HEAP32[$_015 >> 2] = $4;
    $5 = $_015 + 4 | 0;
    $6 = ($j_0 | 0) > 0;
    if ($6) {
      $_015 = $5;
      $j_0_in16 = $j_0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $scevgep = $up + ($n << 2) | 0;
    $_0_lcssa = $scevgep;
    label = 4;
    break;
   case 4:
    $8 = -$n | 0;
    $9 = $_0_lcssa + ($8 << 2) | 0;
    $10 = ___gmpn_add_n($rp, $_0_lcssa, $9, $n) | 0;
    return $10 | 0;
  }
  return 0;
}
function ___gmpn_powm($rp, $bp, $bn, $ep, $en, $mp, $n, $tp) {
  $rp = $rp | 0;
  $bp = $bp | 0;
  $bn = $bn | 0;
  $ep = $ep | 0;
  $en = $en | 0;
  $mp = $mp | 0;
  $n = $n | 0;
  $tp = $tp | 0;
  var $ip = 0, $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $mip_0 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $57 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $69 = 0, $i_0349 = 0, $70 = 0, $i_0351 = 0, $this_pp_0350 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $i_0 = 0, $76 = 0, $78 = 0, $80 = 0, $81 = 0, $82 = 0, $ebi_0 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $__ctz_x_0 = 0, $__ctz_c_0 = 0, $92 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $__ctz_x_1 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $cnt_0 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $_sum = 0, $116 = 0, $117 = 0, $__n2_0 = 0, $__dst_0 = 0, $__src_0 = 0, $__x_0 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $scevgep359 = 0, $__dst_1 = 0, $__x_1 = 0, $125 = 0, $126 = 0, $ebi_2 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $140 = 0, $142 = 0, $144 = 0, $145 = 0, $146 = 0, $this_windowsize_0 = 0, $ebi_3 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $__ctz_x4_0 = 0, $__ctz_c5_0 = 0, $156 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $__ctz_x4_1 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $cnt_1 = 0, $170 = 0, $171 = 0, $this_windowsize_1 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $179 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $191 = 0, $193 = 0, $ebi_5 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $203 = 0, $204 = 0, $205 = 0, $207 = 0, $209 = 0, $211 = 0, $212 = 0, $213 = 0, $this_windowsize_2 = 0, $ebi_6 = 0, $214 = 0, $215 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $__ctz_x9_0 = 0, $__ctz_c10_0 = 0, $223 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $__ctz_x9_1 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $cnt_2 = 0, $237 = 0, $238 = 0, $this_windowsize_3 = 0, $240 = 0, $241 = 0, $242 = 0, $244 = 0, $246 = 0, $247 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $257 = 0, $258 = 0, $ebi_8 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $268 = 0, $270 = 0, $271 = 0, $272 = 0, $this_windowsize_4 = 0, $ebi_9 = 0, $273 = 0, $274 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $281 = 0, $__ctz_x13_0 = 0, $__ctz_c14_0 = 0, $282 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $__ctz_x13_1 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $cnt_3 = 0, $296 = 0, $297 = 0, $this_windowsize_5 = 0, $299 = 0, $300 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $__n15_0 = 0, $__dst16_0 = 0, $rp_pn = 0, $__x18_0 = 0, $__src17_0 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $scevgep354 = 0, $scevgep = 0, $scevgep352 = 0, $318 = 0, $320 = 0, $321 = 0, $322 = 0, $324 = 0, $327 = 0, $328 = 0, $330 = 0, $332 = 0, $333 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $ip = __stackBase__ | 0;
    $__tmp_marker = __stackBase__ + 8 | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    $1 = $en - 1 | 0;
    $2 = $ep + ($1 << 2) | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $3 >>> 0 < 65536;
    if ($4) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $6 = $3 >>> 0 < 256;
    $7 = $6 ? 1 : 9;
    $12 = $7;
    label = 4;
    break;
   case 3:
    $9 = $3 >>> 0 < 16777216;
    $10 = $9 ? 17 : 25;
    $12 = $10;
    label = 4;
    break;
   case 4:
    $13 = $3 >>> ($12 >>> 0);
    $14 = $13 + 9696 | 0;
    $15 = HEAP8[$14] | 0;
    $16 = $15 & 255;
    $17 = $en << 5;
    $18 = $17 - 33 | 0;
    $19 = $18 + $12 | 0;
    $20 = $19 + $16 | 0;
    $21 = _win_size($20) | 0;
    $22 = ($n | 0) > 99;
    if ($22) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $24 = $ip | 0;
    $25 = HEAP32[$mp >> 2] | 0;
    $26 = $25 >>> 1;
    $27 = $26 & 127;
    $28 = $27 + 15720 | 0;
    $29 = HEAP8[$28] | 0;
    $30 = $29 & 255;
    $31 = $30 << 1;
    $32 = Math_imul($30, $25);
    $33 = Math_imul($32, $30);
    $34 = $31 - $33 | 0;
    $35 = $34 << 1;
    $36 = Math_imul($34, $25);
    $37 = Math_imul($36, $34);
    $38 = $37 - $35 | 0;
    HEAP32[$24 >> 2] = $38;
    $mip_0 = $24;
    label = 10;
    break;
   case 6:
    $40 = $n << 2;
    $41 = $40 >>> 0 < 65536;
    if ($41) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $43 = STACKTOP;
    STACKTOP = STACKTOP + $40 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $47 = $43;
    label = 9;
    break;
   case 8:
    $45 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $40) | 0;
    $47 = $45;
    label = 9;
    break;
   case 9:
    $48 = $47;
    ___gmpn_binvert($48, $mp, $n, $tp);
    $mip_0 = $48;
    label = 10;
    break;
   case 10:
    $50 = $21 - 1 | 0;
    $51 = $n << $50;
    $52 = $51 << 2;
    $53 = $52 >>> 0 < 65536;
    if ($53) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $55 = STACKTOP;
    STACKTOP = STACKTOP + $52 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $59 = $55;
    label = 13;
    break;
   case 12:
    $57 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $52) | 0;
    $59 = $57;
    label = 13;
    break;
   case 13:
    $60 = $59;
    _redcify($60, $bp, $bn, $mp, $n);
    ___gmpn_sqr($tp, $60, $n);
    if ($22) {
      label = 16;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $62 = HEAP32[$mip_0 >> 2] | 0;
    $63 = ___gmpn_redc_1($rp, $tp, $mp, $n, $62) | 0;
    $64 = ($63 | 0) == 0;
    if ($64) {
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $66 = ___gmpn_sub_n($rp, $rp, $mp, $n) | 0;
    label = 17;
    break;
   case 16:
    ___gmpn_redc_n($rp, $tp, $mp, $n, $mip_0);
    label = 17;
    break;
   case 17:
    $69 = 1 << $50;
    $i_0349 = $69 - 1 | 0;
    $70 = ($i_0349 | 0) > 0;
    if ($70) {
      $this_pp_0350 = $60;
      $i_0351 = $i_0349;
      label = 18;
      break;
    } else {
      label = 23;
      break;
    }
   case 18:
    ___gmpn_mul_n($tp, $this_pp_0350, $rp, $n);
    $71 = $this_pp_0350 + ($n << 2) | 0;
    if ($22) {
      label = 22;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $73 = HEAP32[$mip_0 >> 2] | 0;
    $74 = ___gmpn_redc_1($71, $tp, $mp, $n, $73) | 0;
    $75 = ($74 | 0) == 0;
    if ($75) {
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    $i_0 = $i_0351 - 1 | 0;
    $76 = ($i_0 | 0) > 0;
    if ($76) {
      $this_pp_0350 = $71;
      $i_0351 = $i_0;
      label = 18;
      break;
    } else {
      label = 23;
      break;
    }
   case 21:
    $78 = ___gmpn_sub_n($71, $71, $mp, $n) | 0;
    label = 20;
    break;
   case 22:
    ___gmpn_redc_n($71, $tp, $mp, $n, $mip_0);
    label = 20;
    break;
   case 23:
    $80 = _getbits($ep, $20, $21) | 0;
    $81 = $20 >>> 0 < $21 >>> 0;
    $82 = $20 - $21 | 0;
    $ebi_0 = $81 ? 0 : $82;
    $83 = $80 & 255;
    $84 = ($83 | 0) == 0;
    if ($84) {
      $__ctz_c_0 = 6;
      $__ctz_x_0 = $80;
      label = 25;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $86 = -$80 | 0;
    $87 = $80 & $86;
    $88 = $87 + 9696 | 0;
    $89 = HEAP8[$88] | 0;
    $90 = $89 & 255;
    $91 = $90 - 2 | 0;
    $cnt_0 = $91;
    label = 28;
    break;
   case 25:
    $92 = ($__ctz_c_0 | 0) < 30;
    if ($92) {
      label = 26;
      break;
    } else {
      $__ctz_x_1 = $__ctz_x_0;
      label = 27;
      break;
    }
   case 26:
    $94 = $__ctz_x_0 >>> 8;
    $95 = $94 & 255;
    $96 = ($95 | 0) == 0;
    $97 = $__ctz_c_0 + 8 | 0;
    if ($96) {
      $__ctz_c_0 = $97;
      $__ctz_x_0 = $94;
      label = 25;
      break;
    } else {
      $__ctz_x_1 = $94;
      label = 27;
      break;
    }
   case 27:
    $99 = -$__ctz_x_1 | 0;
    $100 = $__ctz_x_1 & $99;
    $101 = $100 + 9696 | 0;
    $102 = HEAP8[$101] | 0;
    $103 = $102 & 255;
    $104 = $103 + $__ctz_c_0 | 0;
    $cnt_0 = $104;
    label = 28;
    break;
   case 28:
    $106 = $cnt_0 + $ebi_0 | 0;
    $107 = ($n | 0) != 0;
    if ($107) {
      label = 29;
      break;
    } else {
      label = 34;
      break;
    }
   case 29:
    $109 = $80 >>> ($cnt_0 >>> 0);
    $110 = $n - 1 | 0;
    $111 = $109 >>> 1;
    $112 = Math_imul($111, $n);
    $113 = $60 + ($112 << 2) | 0;
    $114 = HEAP32[$113 >> 2] | 0;
    $115 = ($110 | 0) == 0;
    if ($115) {
      $__x_1 = $114;
      $__dst_1 = $rp;
      label = 33;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    $_sum = $112 + 1 | 0;
    $116 = $60 + ($_sum << 2) | 0;
    $117 = $n - 1 | 0;
    $__x_0 = $114;
    $__src_0 = $116;
    $__dst_0 = $rp;
    $__n2_0 = $110;
    label = 31;
    break;
   case 31:
    $119 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $120 = $__src_0 + 4 | 0;
    $121 = HEAP32[$__src_0 >> 2] | 0;
    $122 = $__n2_0 - 1 | 0;
    $123 = ($122 | 0) == 0;
    if ($123) {
      label = 32;
      break;
    } else {
      $__x_0 = $121;
      $__src_0 = $120;
      $__dst_0 = $119;
      $__n2_0 = $122;
      label = 31;
      break;
    }
   case 32:
    $scevgep359 = $rp + ($117 << 2) | 0;
    $__x_1 = $121;
    $__dst_1 = $scevgep359;
    label = 33;
    break;
   case 33:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    $125 = ($n | 0) > 29;
    if ($125) {
      label = 51;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    $126 = ($106 | 0) == 0;
    if ($126) {
      label = 80;
      break;
    } else {
      $ebi_2 = $106;
      label = 35;
      break;
    }
   case 35:
    $127 = $ebi_2 - 1 | 0;
    $128 = $127 >>> 5;
    $129 = $ep + ($128 << 2) | 0;
    $130 = HEAP32[$129 >> 2] | 0;
    $131 = $127 & 31;
    $132 = 1 << $131;
    $133 = $132 & $130;
    $134 = ($133 | 0) == 0;
    if ($134) {
      label = 36;
      break;
    } else {
      label = 39;
      break;
    }
   case 36:
    ___gmpn_sqr_basecase($tp, $rp, $n);
    $136 = HEAP32[$mip_0 >> 2] | 0;
    $137 = ___gmpn_redc_1($rp, $tp, $mp, $n, $136) | 0;
    $138 = ($137 | 0) == 0;
    if ($138) {
      label = 38;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    $140 = ___gmpn_sub_n($rp, $rp, $mp, $n) | 0;
    label = 38;
    break;
   case 38:
    $142 = ($127 | 0) == 0;
    if ($142) {
      label = 80;
      break;
    } else {
      $ebi_2 = $127;
      label = 35;
      break;
    }
   case 39:
    $144 = _getbits($ep, $ebi_2, $21) | 0;
    $145 = $ebi_2 >>> 0 < $21 >>> 0;
    $146 = $ebi_2 - $21 | 0;
    $this_windowsize_0 = $145 ? $ebi_2 : $21;
    $ebi_3 = $145 ? 0 : $146;
    $147 = $144 & 255;
    $148 = ($147 | 0) == 0;
    if ($148) {
      $__ctz_c5_0 = 6;
      $__ctz_x4_0 = $144;
      label = 41;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    $150 = -$144 | 0;
    $151 = $144 & $150;
    $152 = $151 + 9696 | 0;
    $153 = HEAP8[$152] | 0;
    $154 = $153 & 255;
    $155 = $154 - 2 | 0;
    $cnt_1 = $155;
    label = 44;
    break;
   case 41:
    $156 = ($__ctz_c5_0 | 0) < 30;
    if ($156) {
      label = 42;
      break;
    } else {
      $__ctz_x4_1 = $__ctz_x4_0;
      label = 43;
      break;
    }
   case 42:
    $158 = $__ctz_x4_0 >>> 8;
    $159 = $158 & 255;
    $160 = ($159 | 0) == 0;
    $161 = $__ctz_c5_0 + 8 | 0;
    if ($160) {
      $__ctz_c5_0 = $161;
      $__ctz_x4_0 = $158;
      label = 41;
      break;
    } else {
      $__ctz_x4_1 = $158;
      label = 43;
      break;
    }
   case 43:
    $163 = -$__ctz_x4_1 | 0;
    $164 = $__ctz_x4_1 & $163;
    $165 = $164 + 9696 | 0;
    $166 = HEAP8[$165] | 0;
    $167 = $166 & 255;
    $168 = $167 + $__ctz_c5_0 | 0;
    $cnt_1 = $168;
    label = 44;
    break;
   case 44:
    $170 = $this_windowsize_0 - $cnt_1 | 0;
    $171 = $cnt_1 + $ebi_3 | 0;
    $this_windowsize_1 = $170;
    label = 45;
    break;
   case 45:
    ___gmpn_sqr_basecase($tp, $rp, $n);
    $173 = HEAP32[$mip_0 >> 2] | 0;
    $174 = ___gmpn_redc_1($rp, $tp, $mp, $n, $173) | 0;
    $175 = ($174 | 0) == 0;
    if ($175) {
      label = 47;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    $177 = ___gmpn_sub_n($rp, $rp, $mp, $n) | 0;
    label = 47;
    break;
   case 47:
    $179 = $this_windowsize_1 - 1 | 0;
    $180 = ($179 | 0) == 0;
    if ($180) {
      label = 48;
      break;
    } else {
      $this_windowsize_1 = $179;
      label = 45;
      break;
    }
   case 48:
    $182 = $144 >>> ($cnt_1 >>> 0);
    $183 = $182 >>> 1;
    $184 = Math_imul($183, $n);
    $185 = $60 + ($184 << 2) | 0;
    ___gmpn_mul_basecase($tp, $rp, $n, $185, $n);
    $186 = HEAP32[$mip_0 >> 2] | 0;
    $187 = ___gmpn_redc_1($rp, $tp, $mp, $n, $186) | 0;
    $188 = ($187 | 0) == 0;
    if ($188) {
      label = 50;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    $190 = ___gmpn_sub_n($rp, $rp, $mp, $n) | 0;
    label = 50;
    break;
   case 50:
    $191 = ($171 | 0) == 0;
    if ($191) {
      label = 80;
      break;
    } else {
      $ebi_2 = $171;
      label = 35;
      break;
    }
   case 51:
    $193 = ($106 | 0) == 0;
    if ($22) {
      label = 53;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    if ($193) {
      label = 80;
      break;
    } else {
      $ebi_5 = $106;
      label = 54;
      break;
    }
   case 53:
    if ($193) {
      label = 80;
      break;
    } else {
      $ebi_8 = $106;
      label = 70;
      break;
    }
   case 54:
    $194 = $ebi_5 - 1 | 0;
    $195 = $194 >>> 5;
    $196 = $ep + ($195 << 2) | 0;
    $197 = HEAP32[$196 >> 2] | 0;
    $198 = $194 & 31;
    $199 = 1 << $198;
    $200 = $199 & $197;
    $201 = ($200 | 0) == 0;
    if ($201) {
      label = 55;
      break;
    } else {
      label = 58;
      break;
    }
   case 55:
    ___gmpn_sqr($tp, $rp, $n);
    $203 = HEAP32[$mip_0 >> 2] | 0;
    $204 = ___gmpn_redc_1($rp, $tp, $mp, $n, $203) | 0;
    $205 = ($204 | 0) == 0;
    if ($205) {
      label = 57;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    $207 = ___gmpn_sub_n($rp, $rp, $mp, $n) | 0;
    label = 57;
    break;
   case 57:
    $209 = ($194 | 0) == 0;
    if ($209) {
      label = 80;
      break;
    } else {
      $ebi_5 = $194;
      label = 54;
      break;
    }
   case 58:
    $211 = _getbits($ep, $ebi_5, $21) | 0;
    $212 = $ebi_5 >>> 0 < $21 >>> 0;
    $213 = $ebi_5 - $21 | 0;
    $this_windowsize_2 = $212 ? $ebi_5 : $21;
    $ebi_6 = $212 ? 0 : $213;
    $214 = $211 & 255;
    $215 = ($214 | 0) == 0;
    if ($215) {
      $__ctz_c10_0 = 6;
      $__ctz_x9_0 = $211;
      label = 60;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    $217 = -$211 | 0;
    $218 = $211 & $217;
    $219 = $218 + 9696 | 0;
    $220 = HEAP8[$219] | 0;
    $221 = $220 & 255;
    $222 = $221 - 2 | 0;
    $cnt_2 = $222;
    label = 63;
    break;
   case 60:
    $223 = ($__ctz_c10_0 | 0) < 30;
    if ($223) {
      label = 61;
      break;
    } else {
      $__ctz_x9_1 = $__ctz_x9_0;
      label = 62;
      break;
    }
   case 61:
    $225 = $__ctz_x9_0 >>> 8;
    $226 = $225 & 255;
    $227 = ($226 | 0) == 0;
    $228 = $__ctz_c10_0 + 8 | 0;
    if ($227) {
      $__ctz_c10_0 = $228;
      $__ctz_x9_0 = $225;
      label = 60;
      break;
    } else {
      $__ctz_x9_1 = $225;
      label = 62;
      break;
    }
   case 62:
    $230 = -$__ctz_x9_1 | 0;
    $231 = $__ctz_x9_1 & $230;
    $232 = $231 + 9696 | 0;
    $233 = HEAP8[$232] | 0;
    $234 = $233 & 255;
    $235 = $234 + $__ctz_c10_0 | 0;
    $cnt_2 = $235;
    label = 63;
    break;
   case 63:
    $237 = $this_windowsize_2 - $cnt_2 | 0;
    $238 = $cnt_2 + $ebi_6 | 0;
    $this_windowsize_3 = $237;
    label = 64;
    break;
   case 64:
    ___gmpn_sqr($tp, $rp, $n);
    $240 = HEAP32[$mip_0 >> 2] | 0;
    $241 = ___gmpn_redc_1($rp, $tp, $mp, $n, $240) | 0;
    $242 = ($241 | 0) == 0;
    if ($242) {
      label = 66;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    $244 = ___gmpn_sub_n($rp, $rp, $mp, $n) | 0;
    label = 66;
    break;
   case 66:
    $246 = $this_windowsize_3 - 1 | 0;
    $247 = ($246 | 0) == 0;
    if ($247) {
      label = 67;
      break;
    } else {
      $this_windowsize_3 = $246;
      label = 64;
      break;
    }
   case 67:
    $249 = $211 >>> ($cnt_2 >>> 0);
    $250 = $249 >>> 1;
    $251 = Math_imul($250, $n);
    $252 = $60 + ($251 << 2) | 0;
    ___gmpn_mul_n($tp, $rp, $252, $n);
    $253 = HEAP32[$mip_0 >> 2] | 0;
    $254 = ___gmpn_redc_1($rp, $tp, $mp, $n, $253) | 0;
    $255 = ($254 | 0) == 0;
    if ($255) {
      label = 69;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    $257 = ___gmpn_sub_n($rp, $rp, $mp, $n) | 0;
    label = 69;
    break;
   case 69:
    $258 = ($238 | 0) == 0;
    if ($258) {
      label = 80;
      break;
    } else {
      $ebi_5 = $238;
      label = 54;
      break;
    }
   case 70:
    $259 = $ebi_8 - 1 | 0;
    $260 = $259 >>> 5;
    $261 = $ep + ($260 << 2) | 0;
    $262 = HEAP32[$261 >> 2] | 0;
    $263 = $259 & 31;
    $264 = 1 << $263;
    $265 = $264 & $262;
    $266 = ($265 | 0) == 0;
    if ($266) {
      label = 71;
      break;
    } else {
      label = 72;
      break;
    }
   case 71:
    ___gmpn_sqr($tp, $rp, $n);
    ___gmpn_redc_n($rp, $tp, $mp, $n, $mip_0);
    $268 = ($259 | 0) == 0;
    if ($268) {
      label = 80;
      break;
    } else {
      $ebi_8 = $259;
      label = 70;
      break;
    }
   case 72:
    $270 = _getbits($ep, $ebi_8, $21) | 0;
    $271 = $ebi_8 >>> 0 < $21 >>> 0;
    $272 = $ebi_8 - $21 | 0;
    $this_windowsize_4 = $271 ? $ebi_8 : $21;
    $ebi_9 = $271 ? 0 : $272;
    $273 = $270 & 255;
    $274 = ($273 | 0) == 0;
    if ($274) {
      $__ctz_c14_0 = 6;
      $__ctz_x13_0 = $270;
      label = 74;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    $276 = -$270 | 0;
    $277 = $270 & $276;
    $278 = $277 + 9696 | 0;
    $279 = HEAP8[$278] | 0;
    $280 = $279 & 255;
    $281 = $280 - 2 | 0;
    $cnt_3 = $281;
    label = 77;
    break;
   case 74:
    $282 = ($__ctz_c14_0 | 0) < 30;
    if ($282) {
      label = 75;
      break;
    } else {
      $__ctz_x13_1 = $__ctz_x13_0;
      label = 76;
      break;
    }
   case 75:
    $284 = $__ctz_x13_0 >>> 8;
    $285 = $284 & 255;
    $286 = ($285 | 0) == 0;
    $287 = $__ctz_c14_0 + 8 | 0;
    if ($286) {
      $__ctz_c14_0 = $287;
      $__ctz_x13_0 = $284;
      label = 74;
      break;
    } else {
      $__ctz_x13_1 = $284;
      label = 76;
      break;
    }
   case 76:
    $289 = -$__ctz_x13_1 | 0;
    $290 = $__ctz_x13_1 & $289;
    $291 = $290 + 9696 | 0;
    $292 = HEAP8[$291] | 0;
    $293 = $292 & 255;
    $294 = $293 + $__ctz_c14_0 | 0;
    $cnt_3 = $294;
    label = 77;
    break;
   case 77:
    $296 = $this_windowsize_4 - $cnt_3 | 0;
    $297 = $cnt_3 + $ebi_9 | 0;
    $this_windowsize_5 = $296;
    label = 78;
    break;
   case 78:
    ___gmpn_sqr($tp, $rp, $n);
    ___gmpn_redc_n($rp, $tp, $mp, $n, $mip_0);
    $299 = $this_windowsize_5 - 1 | 0;
    $300 = ($299 | 0) == 0;
    if ($300) {
      label = 79;
      break;
    } else {
      $this_windowsize_5 = $299;
      label = 78;
      break;
    }
   case 79:
    $302 = $270 >>> ($cnt_3 >>> 0);
    $303 = $302 >>> 1;
    $304 = Math_imul($303, $n);
    $305 = $60 + ($304 << 2) | 0;
    ___gmpn_mul_n($tp, $rp, $305, $n);
    ___gmpn_redc_n($rp, $tp, $mp, $n, $mip_0);
    $306 = ($297 | 0) == 0;
    if ($306) {
      label = 80;
      break;
    } else {
      $ebi_8 = $297;
      label = 70;
      break;
    }
   case 80:
    if ($107) {
      label = 81;
      break;
    } else {
      label = 87;
      break;
    }
   case 81:
    $308 = $n - 1 | 0;
    $309 = HEAP32[$rp >> 2] | 0;
    $310 = ($308 | 0) == 0;
    if ($310) {
      label = 83;
      break;
    } else {
      label = 82;
      break;
    }
   case 82:
    $311 = $n - 1 | 0;
    $__x18_0 = $309;
    $rp_pn = $rp;
    $__dst16_0 = $tp;
    $__n15_0 = $308;
    label = 84;
    break;
   case 83:
    HEAP32[$tp >> 2] = $309;
    label = 86;
    break;
   case 84:
    $__src17_0 = $rp_pn + 4 | 0;
    $313 = $__dst16_0 + 4 | 0;
    HEAP32[$__dst16_0 >> 2] = $__x18_0;
    $314 = HEAP32[$__src17_0 >> 2] | 0;
    $315 = $__n15_0 - 1 | 0;
    $316 = ($315 | 0) == 0;
    if ($316) {
      label = 85;
      break;
    } else {
      $__x18_0 = $314;
      $rp_pn = $__src17_0;
      $__dst16_0 = $313;
      $__n15_0 = $315;
      label = 84;
      break;
    }
   case 85:
    $scevgep354 = $tp + ($311 << 2) | 0;
    HEAP32[$scevgep354 >> 2] = $314;
    if ($107) {
      label = 86;
      break;
    } else {
      label = 87;
      break;
    }
   case 86:
    $scevgep = $tp + ($n << 2) | 0;
    $scevgep352 = $scevgep;
    $318 = $n << 2;
    _memset($scevgep352 | 0, 0, $318 | 0);
    label = 87;
    break;
   case 87:
    if ($22) {
      label = 90;
      break;
    } else {
      label = 88;
      break;
    }
   case 88:
    $320 = HEAP32[$mip_0 >> 2] | 0;
    $321 = ___gmpn_redc_1($rp, $tp, $mp, $n, $320) | 0;
    $322 = ($321 | 0) == 0;
    if ($322) {
      label = 91;
      break;
    } else {
      label = 89;
      break;
    }
   case 89:
    $324 = ___gmpn_sub_n($rp, $rp, $mp, $n) | 0;
    label = 91;
    break;
   case 90:
    ___gmpn_redc_n($rp, $tp, $mp, $n, $mip_0);
    label = 91;
    break;
   case 91:
    $327 = ___gmpn_cmp($rp, $mp, $n) | 0;
    $328 = ($327 | 0) > -1;
    if ($328) {
      label = 92;
      break;
    } else {
      label = 93;
      break;
    }
   case 92:
    $330 = ___gmpn_sub_n($rp, $rp, $mp, $n) | 0;
    label = 93;
    break;
   case 93:
    $332 = HEAP32[$__tmp_marker >> 2] | 0;
    $333 = ($332 | 0) == 0;
    if ($333) {
      label = 95;
      break;
    } else {
      label = 94;
      break;
    }
   case 94:
    ___gmp_tmp_reentrant_free($332);
    label = 95;
    break;
   case 95:
    STACKTOP = __stackBase__;
    return;
  }
}
function _redcify($rp, $up, $un, $mp, $n) {
  $rp = $rp | 0;
  $up = $up | 0;
  $un = $un | 0;
  $mp = $mp | 0;
  $n = $n | 0;
  var $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $scevgep = 0, $__n1_0 = 0, $__dst2_0 = 0, $up_pn = 0, $__x_0 = 0, $__src_0 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $scevgep27 = 0, $__dst2_1 = 0, $__x_1 = 0, $41 = 0, $42 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    $1 = $n + $un | 0;
    $2 = $1 << 2;
    $3 = $2 >>> 0 < 65536;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $5 = STACKTOP;
    STACKTOP = STACKTOP + $2 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $9 = $5;
    label = 4;
    break;
   case 3:
    $7 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $2) | 0;
    $9 = $7;
    label = 4;
    break;
   case 4:
    $10 = $9;
    $11 = $un << 2;
    $12 = $11 + 4 | 0;
    $13 = $12 >>> 0 < 65536;
    if ($13) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $15 = STACKTOP;
    STACKTOP = STACKTOP + $12 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $19 = $15;
    label = 7;
    break;
   case 6:
    $17 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $12) | 0;
    $19 = $17;
    label = 7;
    break;
   case 7:
    $20 = $19;
    $21 = ($n | 0) == 0;
    if ($21) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $22 = $n << 2;
    _memset($9 | 0, 0, $22 | 0);
    label = 9;
    break;
   case 9:
    $24 = ($un | 0) == 0;
    if ($24) {
      label = 15;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $26 = $un - 1 | 0;
    $27 = $10 + ($n << 2) | 0;
    $28 = HEAP32[$up >> 2] | 0;
    $29 = ($26 | 0) == 0;
    if ($29) {
      $__x_1 = $28;
      $__dst2_1 = $27;
      label = 14;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $30 = $n << 2;
    $31 = $un << 2;
    $32 = $30 + $31 | 0;
    $33 = $32 - 4 | 0;
    $scevgep = $9 + $33 | 0;
    $__x_0 = $28;
    $up_pn = $up;
    $__dst2_0 = $27;
    $__n1_0 = $26;
    label = 12;
    break;
   case 12:
    $__src_0 = $up_pn + 4 | 0;
    $35 = $__dst2_0 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x_0;
    $36 = HEAP32[$__src_0 >> 2] | 0;
    $37 = $__n1_0 - 1 | 0;
    $38 = ($37 | 0) == 0;
    if ($38) {
      label = 13;
      break;
    } else {
      $__x_0 = $36;
      $up_pn = $__src_0;
      $__dst2_0 = $35;
      $__n1_0 = $37;
      label = 12;
      break;
    }
   case 13:
    $scevgep27 = $scevgep;
    $__x_1 = $36;
    $__dst2_1 = $scevgep27;
    label = 14;
    break;
   case 14:
    HEAP32[$__dst2_1 >> 2] = $__x_1;
    label = 15;
    break;
   case 15:
    ___gmpn_tdiv_qr($20, $rp, 0, $10, $1, $mp, $n);
    $41 = HEAP32[$__tmp_marker >> 2] | 0;
    $42 = ($41 | 0) == 0;
    if ($42) {
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    ___gmp_tmp_reentrant_free($41);
    label = 17;
    break;
   case 17:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmpn_redc_n($rp, $up, $mp, $n, $ip) {
  $rp = $rp | 0;
  $up = $up | 0;
  $mp = $mp | 0;
  $n = $n | 0;
  $ip = $ip | 0;
  var $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $_sum = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $_sum49 = 0, $_sum50 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $__p_0 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $_sum51 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $37 = 0, $38 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    $1 = ___gmpn_mulmod_bnm1_next_size($n) | 0;
    $2 = $1 + $n | 0;
    $3 = _mpn_mulmod_bnm1_itch435($1, $n, $n) | 0;
    $4 = $2 + $3 | 0;
    $5 = $4 << 2;
    $6 = $5 >>> 0 < 65536;
    if ($6) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $8 = STACKTOP;
    STACKTOP = STACKTOP + $5 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $12 = $8;
    label = 4;
    break;
   case 3:
    $10 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $5) | 0;
    $12 = $10;
    label = 4;
    break;
   case 4:
    $13 = $12;
    ___gmpn_mullo_n($13, $up, $ip, $n);
    $14 = $13 + ($n << 2) | 0;
    $_sum = $1 + $n | 0;
    $15 = $13 + ($_sum << 2) | 0;
    ___gmpn_mulmod_bnm1($14, $1, $13, $n, $mp, $n, $15);
    $16 = $n << 1;
    $17 = ($16 | 0) > ($1 | 0);
    if ($17) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    ___gmp_assert_fail(5952, 60, 8112);
   case 6:
    $20 = $16 - $1 | 0;
    $21 = ___gmpn_sub_n($15, $14, $up, $20) | 0;
    $_sum49 = $16 + $n | 0;
    $_sum50 = $_sum49 - $1 | 0;
    $22 = $13 + ($_sum50 << 2) | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $23 - $21 | 0;
    HEAP32[$22 >> 2] = $24;
    $25 = $23 >>> 0 < $21 >>> 0;
    if ($25) {
      $__p_0 = $22;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $26 = $__p_0 + 4 | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = $27 - 1 | 0;
    HEAP32[$26 >> 2] = $28;
    $29 = ($27 | 0) == 0;
    if ($29) {
      $__p_0 = $26;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $30 = $up + ($n << 2) | 0;
    $_sum51 = $n << 1;
    $31 = $13 + ($_sum51 << 2) | 0;
    $32 = ___gmpn_sub_n($rp, $30, $31, $n) | 0;
    $33 = ($32 | 0) == 0;
    if ($33) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $35 = ___gmpn_add_n($rp, $rp, $mp, $n) | 0;
    label = 10;
    break;
   case 10:
    $37 = HEAP32[$__tmp_marker >> 2] | 0;
    $38 = ($37 | 0) == 0;
    if ($38) {
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    ___gmp_tmp_reentrant_free($37);
    label = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
  }
}
function _win_size441($eb) {
  $eb = $eb | 0;
  var $k_0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $k_0 = 0;
    label = 2;
    break;
   case 2:
    $2 = 560 + ($k_0 << 2) | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $3 >>> 0 < $eb >>> 0;
    $5 = $k_0 + 1 | 0;
    if ($4) {
      $k_0 = $5;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    return $k_0 | 0;
  }
  return 0;
}
function _getbits442($p, $bi, $nbits) {
  $p = $p | 0;
  $bi = $bi | 0;
  $nbits = $nbits | 0;
  var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $r_0 = 0, $23 = 0, $24 = 0, $25 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $bi >>> 0 < $nbits >>> 0;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $3 = HEAP32[$p >> 2] | 0;
    $4 = 1 << $bi;
    $5 = $4 - 1 | 0;
    $6 = $3 & $5;
    $_0 = $6;
    label = 6;
    break;
   case 3:
    $8 = $bi - $nbits | 0;
    $9 = $8 >>> 5;
    $10 = $8 & 31;
    $11 = $p + ($9 << 2) | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 >>> ($10 >>> 0);
    $14 = 32 - $10 | 0;
    $15 = ($14 | 0) < ($nbits | 0);
    if ($15) {
      label = 4;
      break;
    } else {
      $r_0 = $13;
      label = 5;
      break;
    }
   case 4:
    $17 = $9 + 1 | 0;
    $18 = $p + ($17 << 2) | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $19 << $14;
    $21 = $20 + $13 | 0;
    $r_0 = $21;
    label = 5;
    break;
   case 5:
    $23 = 1 << $nbits;
    $24 = $23 - 1 | 0;
    $25 = $r_0 & $24;
    $_0 = $25;
    label = 6;
    break;
   case 6:
    return $_0 | 0;
  }
  return 0;
}
function ___gmpn_powlo($rp, $bp, $ep, $en, $n, $tp) {
  $rp = $rp | 0;
  $bp = $bp | 0;
  $ep = $ep | 0;
  $en = $en | 0;
  $n = $n | 0;
  $tp = $tp | 0;
  var $__tmp_marker = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $scevgep179 = 0, $__n_0 = 0, $__dst_0 = 0, $bp_pn = 0, $__x_0 = 0, $__src_0 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $scevgep179180 = 0, $__dst_1 = 0, $__x_1 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $__n1_0 = 0, $__dst2_0 = 0, $tp_pn135 = 0, $__x4_0 = 0, $__src3_0 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $scevgep177 = 0, $__dst2_1 = 0, $__x4_1 = 0, $64 = 0, $65 = 0, $i_0157 = 0, $66 = 0, $i_0159 = 0, $this_pp_0158 = 0, $67 = 0, $i_0 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $ebi_0 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $__ctz_x_0 = 0, $__ctz_c_0 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $__ctz_x_1 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $cnt_0 = 0, $95 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $_sum = 0, $104 = 0, $105 = 0, $__n5_0 = 0, $__dst6_0 = 0, $__src7_0 = 0, $__x8_0 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $scevgep175 = 0, $__dst6_1 = 0, $__x8_1 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $scevgep = 0, $scevgep171 = 0, $scevgep173 = 0, $ebi_2 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $130 = 0, $__n9_0 = 0, $__dst10_0 = 0, $tp_pn134 = 0, $__x12_0 = 0, $__src11_0 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $__dst10_1 = 0, $__x12_1 = 0, $136 = 0, $138 = 0, $139 = 0, $140 = 0, $this_windowsize_0 = 0, $ebi_3 = 0, $141 = 0, $142 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $__ctz_x13_0 = 0, $__ctz_c14_0 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $__ctz_x13_1 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $cnt_1 = 0, $164 = 0, $165 = 0, $this_windowsize_1 = 0, $168 = 0, $__n15_0 = 0, $__dst16_0 = 0, $tp_pn133 = 0, $__x18_0 = 0, $__src17_0 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $__dst16_1 = 0, $__x18_1 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $182 = 0, $__n19_0 = 0, $__dst20_0 = 0, $tp_pn = 0, $__x22_0 = 0, $__src21_0 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $__dst20_1 = 0, $__x22_1 = 0, $187 = 0, $188 = 0, $189 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $__tmp_marker = __stackBase__ | 0;
    HEAP32[$__tmp_marker >> 2] = 0;
    $1 = $en - 1 | 0;
    $2 = $ep + ($1 << 2) | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $3 >>> 0 < 65536;
    if ($4) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $6 = $3 >>> 0 < 256;
    $7 = $6 ? 1 : 9;
    $12 = $7;
    label = 4;
    break;
   case 3:
    $9 = $3 >>> 0 < 16777216;
    $10 = $9 ? 17 : 25;
    $12 = $10;
    label = 4;
    break;
   case 4:
    $13 = $3 >>> ($12 >>> 0);
    $14 = $13 + 9696 | 0;
    $15 = HEAP8[$14] | 0;
    $16 = $15 & 255;
    $17 = $en << 5;
    $18 = $17 - 33 | 0;
    $19 = $18 + $12 | 0;
    $20 = $19 + $16 | 0;
    $21 = _win_size441($20) | 0;
    $22 = $21 - 1 | 0;
    $23 = $n << $22;
    $24 = $23 + $n | 0;
    $25 = $24 << 2;
    $26 = $25 >>> 0 < 65536;
    if ($26) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $28 = STACKTOP;
    STACKTOP = STACKTOP + $25 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $32 = $28;
    label = 7;
    break;
   case 6:
    $30 = ___gmp_tmp_reentrant_alloc($__tmp_marker, $25) | 0;
    $32 = $30;
    label = 7;
    break;
   case 7:
    $33 = $32;
    $34 = ($n | 0) != 0;
    if ($34) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $35 = $n << 1;
    $36 = $tp + ($35 << 2) | 0;
    ___gmpn_sqr($tp, $bp, $n);
    $64 = $36;
    label = 19;
    break;
   case 9:
    $38 = $n - 1 | 0;
    $39 = HEAP32[$bp >> 2] | 0;
    $40 = ($38 | 0) == 0;
    if ($40) {
      $__x_1 = $39;
      $__dst_1 = $33;
      label = 13;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $41 = $n << 2;
    $42 = $41 - 4 | 0;
    $scevgep179 = $32 + $42 | 0;
    $__x_0 = $39;
    $bp_pn = $bp;
    $__dst_0 = $33;
    $__n_0 = $38;
    label = 11;
    break;
   case 11:
    $__src_0 = $bp_pn + 4 | 0;
    $44 = $__dst_0 + 4 | 0;
    HEAP32[$__dst_0 >> 2] = $__x_0;
    $45 = HEAP32[$__src_0 >> 2] | 0;
    $46 = $__n_0 - 1 | 0;
    $47 = ($46 | 0) == 0;
    if ($47) {
      label = 12;
      break;
    } else {
      $__x_0 = $45;
      $bp_pn = $__src_0;
      $__dst_0 = $44;
      $__n_0 = $46;
      label = 11;
      break;
    }
   case 12:
    $scevgep179180 = $scevgep179;
    $__x_1 = $45;
    $__dst_1 = $scevgep179180;
    label = 13;
    break;
   case 13:
    HEAP32[$__dst_1 >> 2] = $__x_1;
    $49 = $n << 1;
    $50 = $tp + ($49 << 2) | 0;
    ___gmpn_sqr($tp, $bp, $n);
    if ($34) {
      label = 14;
      break;
    } else {
      $64 = $50;
      label = 19;
      break;
    }
   case 14:
    $52 = $n - 1 | 0;
    $53 = HEAP32[$tp >> 2] | 0;
    $54 = ($52 | 0) == 0;
    if ($54) {
      $__x4_1 = $53;
      $__dst2_1 = $50;
      label = 18;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $55 = $n * 3 & -1;
    $56 = $55 - 1 | 0;
    $__x4_0 = $53;
    $tp_pn135 = $tp;
    $__dst2_0 = $50;
    $__n1_0 = $52;
    label = 16;
    break;
   case 16:
    $__src3_0 = $tp_pn135 + 4 | 0;
    $58 = $__dst2_0 + 4 | 0;
    HEAP32[$__dst2_0 >> 2] = $__x4_0;
    $59 = HEAP32[$__src3_0 >> 2] | 0;
    $60 = $__n1_0 - 1 | 0;
    $61 = ($60 | 0) == 0;
    if ($61) {
      label = 17;
      break;
    } else {
      $__x4_0 = $59;
      $tp_pn135 = $__src3_0;
      $__dst2_0 = $58;
      $__n1_0 = $60;
      label = 16;
      break;
    }
   case 17:
    $scevgep177 = $tp + ($56 << 2) | 0;
    $__x4_1 = $59;
    $__dst2_1 = $scevgep177;
    label = 18;
    break;
   case 18:
    HEAP32[$__dst2_1 >> 2] = $__x4_1;
    $64 = $50;
    label = 19;
    break;
   case 19:
    $65 = 1 << $22;
    $i_0157 = $65 - 1 | 0;
    $66 = ($i_0157 | 0) > 0;
    if ($66) {
      $this_pp_0158 = $33;
      $i_0159 = $i_0157;
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    $67 = $this_pp_0158 + ($n << 2) | 0;
    ___gmpn_mullo_n($67, $this_pp_0158, $64, $n);
    $i_0 = $i_0159 - 1 | 0;
    $68 = ($i_0 | 0) > 0;
    if ($68) {
      $this_pp_0158 = $67;
      $i_0159 = $i_0;
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $69 = _getbits442($ep, $20, $21) | 0;
    $70 = $20 >>> 0 < $21 >>> 0;
    $71 = $20 - $21 | 0;
    $ebi_0 = $70 ? 0 : $71;
    $72 = $69 & 255;
    $73 = ($72 | 0) == 0;
    if ($73) {
      $__ctz_c_0 = 6;
      $__ctz_x_0 = $69;
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $75 = -$69 | 0;
    $76 = $69 & $75;
    $77 = $76 + 9696 | 0;
    $78 = HEAP8[$77] | 0;
    $79 = $78 & 255;
    $80 = $79 - 2 | 0;
    $cnt_0 = $80;
    label = 26;
    break;
   case 23:
    $81 = ($__ctz_c_0 | 0) < 30;
    if ($81) {
      label = 24;
      break;
    } else {
      $__ctz_x_1 = $__ctz_x_0;
      label = 25;
      break;
    }
   case 24:
    $83 = $__ctz_x_0 >>> 8;
    $84 = $83 & 255;
    $85 = ($84 | 0) == 0;
    $86 = $__ctz_c_0 + 8 | 0;
    if ($85) {
      $__ctz_c_0 = $86;
      $__ctz_x_0 = $83;
      label = 23;
      break;
    } else {
      $__ctz_x_1 = $83;
      label = 25;
      break;
    }
   case 25:
    $88 = -$__ctz_x_1 | 0;
    $89 = $__ctz_x_1 & $88;
    $90 = $89 + 9696 | 0;
    $91 = HEAP8[$90] | 0;
    $92 = $91 & 255;
    $93 = $92 + $__ctz_c_0 | 0;
    $cnt_0 = $93;
    label = 26;
    break;
   case 26:
    $95 = $cnt_0 + $ebi_0 | 0;
    if ($34) {
      label = 27;
      break;
    } else {
      label = 32;
      break;
    }
   case 27:
    $97 = $69 >>> ($cnt_0 >>> 0);
    $98 = $n - 1 | 0;
    $99 = $97 >>> 1;
    $100 = Math_imul($99, $n);
    $101 = $33 + ($100 << 2) | 0;
    $102 = HEAP32[$101 >> 2] | 0;
    $103 = ($98 | 0) == 0;
    if ($103) {
      $__x8_1 = $102;
      $__dst6_1 = $rp;
      label = 31;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $_sum = $100 + 1 | 0;
    $104 = $33 + ($_sum << 2) | 0;
    $105 = $n - 1 | 0;
    $__x8_0 = $102;
    $__src7_0 = $104;
    $__dst6_0 = $rp;
    $__n5_0 = $98;
    label = 29;
    break;
   case 29:
    $107 = $__dst6_0 + 4 | 0;
    HEAP32[$__dst6_0 >> 2] = $__x8_0;
    $108 = $__src7_0 + 4 | 0;
    $109 = HEAP32[$__src7_0 >> 2] | 0;
    $110 = $__n5_0 - 1 | 0;
    $111 = ($110 | 0) == 0;
    if ($111) {
      label = 30;
      break;
    } else {
      $__x8_0 = $109;
      $__src7_0 = $108;
      $__dst6_0 = $107;
      $__n5_0 = $110;
      label = 29;
      break;
    }
   case 30:
    $scevgep175 = $rp + ($105 << 2) | 0;
    $__x8_1 = $109;
    $__dst6_1 = $scevgep175;
    label = 31;
    break;
   case 31:
    HEAP32[$__dst6_1 >> 2] = $__x8_1;
    label = 32;
    break;
   case 32:
    $113 = ($95 | 0) == 0;
    if ($113) {
      label = 56;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $114 = $n - 1 | 0;
    $115 = ($114 | 0) == 0;
    $116 = $n - 1 | 0;
    $117 = ($116 | 0) == 0;
    $118 = $n - 1 | 0;
    $119 = ($118 | 0) == 0;
    $scevgep = $rp + ($118 << 2) | 0;
    $scevgep171 = $rp + ($118 << 2) | 0;
    $scevgep173 = $rp + ($118 << 2) | 0;
    $ebi_2 = $95;
    label = 34;
    break;
   case 34:
    $120 = $ebi_2 - 1 | 0;
    $121 = $120 >>> 5;
    $122 = $ep + ($121 << 2) | 0;
    $123 = HEAP32[$122 >> 2] | 0;
    $124 = $120 & 31;
    $125 = 1 << $124;
    $126 = $125 & $123;
    $127 = ($126 | 0) == 0;
    if ($127) {
      label = 35;
      break;
    } else {
      label = 40;
      break;
    }
   case 35:
    ___gmpn_sqr($tp, $rp, $n);
    if ($34) {
      label = 36;
      break;
    } else {
      label = 39;
      break;
    }
   case 36:
    $130 = HEAP32[$tp >> 2] | 0;
    if ($115) {
      $__x12_1 = $130;
      $__dst10_1 = $rp;
      label = 38;
      break;
    } else {
      $__x12_0 = $130;
      $tp_pn134 = $tp;
      $__dst10_0 = $rp;
      $__n9_0 = $114;
      label = 37;
      break;
    }
   case 37:
    $__src11_0 = $tp_pn134 + 4 | 0;
    $131 = $__dst10_0 + 4 | 0;
    HEAP32[$__dst10_0 >> 2] = $__x12_0;
    $132 = HEAP32[$__src11_0 >> 2] | 0;
    $133 = $__n9_0 - 1 | 0;
    $134 = ($133 | 0) == 0;
    if ($134) {
      $__x12_1 = $132;
      $__dst10_1 = $scevgep;
      label = 38;
      break;
    } else {
      $__x12_0 = $132;
      $tp_pn134 = $__src11_0;
      $__dst10_0 = $131;
      $__n9_0 = $133;
      label = 37;
      break;
    }
   case 38:
    HEAP32[$__dst10_1 >> 2] = $__x12_1;
    label = 39;
    break;
   case 39:
    $136 = ($120 | 0) == 0;
    if ($136) {
      label = 56;
      break;
    } else {
      $ebi_2 = $120;
      label = 34;
      break;
    }
   case 40:
    $138 = _getbits442($ep, $ebi_2, $21) | 0;
    $139 = $ebi_2 >>> 0 < $21 >>> 0;
    $140 = $ebi_2 - $21 | 0;
    $this_windowsize_0 = $139 ? $ebi_2 : $21;
    $ebi_3 = $139 ? 0 : $140;
    $141 = $138 & 255;
    $142 = ($141 | 0) == 0;
    if ($142) {
      $__ctz_c14_0 = 6;
      $__ctz_x13_0 = $138;
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $144 = -$138 | 0;
    $145 = $138 & $144;
    $146 = $145 + 9696 | 0;
    $147 = HEAP8[$146] | 0;
    $148 = $147 & 255;
    $149 = $148 - 2 | 0;
    $cnt_1 = $149;
    label = 45;
    break;
   case 42:
    $150 = ($__ctz_c14_0 | 0) < 30;
    if ($150) {
      label = 43;
      break;
    } else {
      $__ctz_x13_1 = $__ctz_x13_0;
      label = 44;
      break;
    }
   case 43:
    $152 = $__ctz_x13_0 >>> 8;
    $153 = $152 & 255;
    $154 = ($153 | 0) == 0;
    $155 = $__ctz_c14_0 + 8 | 0;
    if ($154) {
      $__ctz_c14_0 = $155;
      $__ctz_x13_0 = $152;
      label = 42;
      break;
    } else {
      $__ctz_x13_1 = $152;
      label = 44;
      break;
    }
   case 44:
    $157 = -$__ctz_x13_1 | 0;
    $158 = $__ctz_x13_1 & $157;
    $159 = $158 + 9696 | 0;
    $160 = HEAP8[$159] | 0;
    $161 = $160 & 255;
    $162 = $161 + $__ctz_c14_0 | 0;
    $cnt_1 = $162;
    label = 45;
    break;
   case 45:
    $164 = $this_windowsize_0 - $cnt_1 | 0;
    $165 = $cnt_1 + $ebi_3 | 0;
    $this_windowsize_1 = $164;
    label = 46;
    break;
   case 46:
    ___gmpn_sqr($tp, $rp, $n);
    if ($34) {
      label = 47;
      break;
    } else {
      label = 50;
      break;
    }
   case 47:
    $168 = HEAP32[$tp >> 2] | 0;
    if ($117) {
      $__x18_1 = $168;
      $__dst16_1 = $rp;
      label = 49;
      break;
    } else {
      $__x18_0 = $168;
      $tp_pn133 = $tp;
      $__dst16_0 = $rp;
      $__n15_0 = $116;
      label = 48;
      break;
    }
   case 48:
    $__src17_0 = $tp_pn133 + 4 | 0;
    $169 = $__dst16_0 + 4 | 0;
    HEAP32[$__dst16_0 >> 2] = $__x18_0;
    $170 = HEAP32[$__src17_0 >> 2] | 0;
    $171 = $__n15_0 - 1 | 0;
    $172 = ($171 | 0) == 0;
    if ($172) {
      $__x18_1 = $170;
      $__dst16_1 = $scevgep171;
      label = 49;
      break;
    } else {
      $__x18_0 = $170;
      $tp_pn133 = $__src17_0;
      $__dst16_0 = $169;
      $__n15_0 = $171;
      label = 48;
      break;
    }
   case 49:
    HEAP32[$__dst16_1 >> 2] = $__x18_1;
    label = 50;
    break;
   case 50:
    $174 = $this_windowsize_1 - 1 | 0;
    $175 = ($174 | 0) == 0;
    if ($175) {
      label = 51;
      break;
    } else {
      $this_windowsize_1 = $174;
      label = 46;
      break;
    }
   case 51:
    $177 = $138 >>> ($cnt_1 >>> 0);
    $178 = $177 >>> 1;
    $179 = Math_imul($178, $n);
    $180 = $33 + ($179 << 2) | 0;
    ___gmpn_mullo_n($tp, $rp, $180, $n);
    if ($34) {
      label = 52;
      break;
    } else {
      label = 55;
      break;
    }
   case 52:
    $182 = HEAP32[$tp >> 2] | 0;
    if ($119) {
      $__x22_1 = $182;
      $__dst20_1 = $rp;
      label = 54;
      break;
    } else {
      $__x22_0 = $182;
      $tp_pn = $tp;
      $__dst20_0 = $rp;
      $__n19_0 = $118;
      label = 53;
      break;
    }
   case 53:
    $__src21_0 = $tp_pn + 4 | 0;
    $183 = $__dst20_0 + 4 | 0;
    HEAP32[$__dst20_0 >> 2] = $__x22_0;
    $184 = HEAP32[$__src21_0 >> 2] | 0;
    $185 = $__n19_0 - 1 | 0;
    $186 = ($185 | 0) == 0;
    if ($186) {
      $__x22_1 = $184;
      $__dst20_1 = $scevgep173;
      label = 54;
      break;
    } else {
      $__x22_0 = $184;
      $tp_pn = $__src21_0;
      $__dst20_0 = $183;
      $__n19_0 = $185;
      label = 53;
      break;
    }
   case 54:
    HEAP32[$__dst20_1 >> 2] = $__x22_1;
    label = 55;
    break;
   case 55:
    $187 = ($165 | 0) == 0;
    if ($187) {
      label = 56;
      break;
    } else {
      $ebi_2 = $165;
      label = 34;
      break;
    }
   case 56:
    $188 = HEAP32[$__tmp_marker >> 2] | 0;
    $189 = ($188 | 0) == 0;
    if ($189) {
      label = 58;
      break;
    } else {
      label = 57;
      break;
    }
   case 57:
    ___gmp_tmp_reentrant_free($188);
    label = 58;
    break;
   case 58:
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmp_doprnt($funs, $data, $orig_fmt, $orig_ap) {
  $funs = $funs | 0;
  $data = $data | 0;
  $orig_fmt = $orig_fmt | 0;
  $orig_ap = $orig_ap | 0;
  var $1 = 0, $ap = 0, $this_ap = 0, $last_ap = 0, $param = 0, $z = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $last_fmt_0199 = 0, $retval_0198 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $_in = 0, $39 = 0, $fmt_1182 = 0, $type_0181 = 0, $value_0180 = 0, $seen_precision_0179 = 0, $40 = 0, $storemerge123 = 0, $storemerge = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $retval_1 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $abs_xsize_0 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $93 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $100 = 0, $retval_2 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $122 = 0, $retval_3 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $retval_4 = 0, $gmp_str_0 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $140 = 0, $143 = 0, $144 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $retval_5 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $165 = 0, $retval_0_be = 0, $last_fmt_0_be = 0, $fmt_0_be = 0, $166 = 0, $167 = 0, $170 = 0, $171 = 0, $176 = 0, $178 = 0, $181 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $retval_6 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $195 = 0, $197 = 0, $199 = 0, $201 = 0, $202 = 0, $204$0 = 0, $204$1 = 0, $205 = 0, $st$0$0 = 0, $st$1$1 = 0, $207 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $222 = 0, $224 = 0, $226 = 0, $228 = 0, $scevgep = 0, $229 = 0, $230 = 0, $234 = 0, $235 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $251 = 0, $n7_0 = 0, $254 = 0, $256 = 0, $258 = 0, $259 = 0, $seen_precision_0_be = 0, $value_0_be = 0, $type_0_be = 0, $fmt_1_be = 0, $262 = 0, $263 = 0, $264 = 0, $fchar_0 = 0, $n8_0 = 0, $fmt_2 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $272 = 0, $isdigittmp = 0, $isdigit = 0, $last_fmt_0_lcssa = 0, $retval_0_lcssa = 0, $273 = 0, $274 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $282 = 0, $retval_7 = 0, $284 = 0, $285 = 0, $286 = 0, $288 = 0, $289 = 0, $retval_8 = 0, $291 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 96 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = __stackBase__ | 0;
    $ap = __stackBase__ + 8 | 0;
    $this_ap = __stackBase__ + 16 | 0;
    $last_ap = __stackBase__ + 24 | 0;
    $param = __stackBase__ + 32 | 0;
    $z = __stackBase__ + 80 | 0;
    HEAP32[$1 >> 2] = $orig_ap;
    $2 = $ap;
    $3 = $1;
    _llvm_va_copy($2 | 0, $3 | 0);
    $4 = _strlen($orig_fmt | 0) | 0;
    $5 = $4 + 1 | 0;
    $6 = HEAP32[3962] | 0;
    $7 = FUNCTION_TABLE_ii[$6 & 1023]($5) | 0;
    $8 = _strcpy($7 | 0, $orig_fmt | 0) | 0;
    $9 = $last_ap;
    _llvm_va_copy($9 | 0, $2 | 0);
    $10 = _strchr($7 | 0, 37) | 0;
    $11 = ($10 | 0) == 0;
    if ($11) {
      $retval_0_lcssa = 0;
      $last_fmt_0_lcssa = $7;
      label = 98;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $12 = $this_ap;
    $13 = $param + 44 | 0;
    $14 = $param | 0;
    $15 = $param + 4 | 0;
    $16 = $param + 8 | 0;
    $17 = $param + 12 | 0;
    $18 = $param + 16 | 0;
    $19 = $param + 20 | 0;
    $20 = $param + 24 | 0;
    $21 = $param + 28 | 0;
    $22 = $param + 32 | 0;
    $23 = $param + 36 | 0;
    $24 = $param + 40 | 0;
    $25 = $funs | 0;
    $26 = $z | 0;
    $27 = $z + 8 | 0;
    $28 = $z + 4 | 0;
    $29 = $funs | 0;
    $30 = $funs | 0;
    $31 = $funs | 0;
    $32 = $funs | 0;
    $retval_0198 = 0;
    $last_fmt_0199 = $7;
    $34 = $10;
    label = 3;
    break;
   case 3:
    _llvm_va_copy($12 | 0, $2 | 0);
    $35 = $34 + 1 | 0;
    HEAP32[$14 >> 2] = 10;
    HEAP32[$15 >> 2] = 0;
    HEAP32[$16 >> 2] = 5816;
    HEAP32[$17 >> 2] = 0;
    HEAP8[$18] = 32;
    HEAP32[$19 >> 2] = 2;
    HEAP32[$20 >> 2] = 6;
    HEAP32[$21 >> 2] = 2;
    HEAP32[$22 >> 2] = 0;
    HEAP32[$23 >> 2] = 1;
    HEAP8[$24] = 0;
    HEAP32[$13 >> 2] = 0;
    $36 = $34 + 2 | 0;
    $37 = HEAP8[$35] | 0;
    $38 = $37 << 24 >> 24 == 0;
    if ($38) {
      $fmt_0_be = $36;
      $last_fmt_0_be = $last_fmt_0199;
      $retval_0_be = $retval_0198;
      label = 47;
      break;
    } else {
      $seen_precision_0179 = 0;
      $value_0180 = $13;
      $type_0181 = 0;
      $fmt_1182 = $35;
      $39 = $36;
      $_in = $37;
      label = 4;
      break;
    }
   case 4:
    $40 = $_in << 24 >> 24;
    if (($40 | 0) == 97) {
      label = 5;
      break;
    } else if (($40 | 0) == 65) {
      $storemerge = 6960;
      $storemerge123 = -16;
      label = 6;
      break;
    } else if (($40 | 0) == 99) {
      label = 9;
      break;
    } else if (($40 | 0) == 100 | ($40 | 0) == 105 | ($40 | 0) == 117) {
      label = 10;
      break;
    } else if (($40 | 0) == 69) {
      label = 37;
      break;
    } else if (($40 | 0) == 101) {
      label = 38;
      break;
    } else if (($40 | 0) == 102) {
      label = 50;
      break;
    } else if (($40 | 0) == 70 | ($40 | 0) == 106 | ($40 | 0) == 76 | ($40 | 0) == 78 | ($40 | 0) == 113 | ($40 | 0) == 81 | ($40 | 0) == 116 | ($40 | 0) == 122 | ($40 | 0) == 90) {
      label = 51;
      break;
    } else if (($40 | 0) == 71) {
      label = 52;
      break;
    } else if (($40 | 0) == 103) {
      label = 53;
      break;
    } else if (($40 | 0) == 104) {
      label = 54;
      break;
    } else if (($40 | 0) == 108) {
      label = 55;
      break;
    } else if (($40 | 0) == 77) {
      label = 56;
      break;
    } else if (($40 | 0) == 110) {
      label = 57;
      break;
    } else if (($40 | 0) == 111) {
      label = 77;
      break;
    } else if (($40 | 0) == 112 | ($40 | 0) == 115) {
      label = 78;
      break;
    } else if (($40 | 0) == 120) {
      label = 79;
      break;
    } else if (($40 | 0) == 88) {
      label = 80;
      break;
    } else if (($40 | 0) == 35) {
      label = 81;
      break;
    } else if (($40 | 0) == 43 | ($40 | 0) == 32) {
      label = 82;
      break;
    } else if (($40 | 0) == 45) {
      label = 83;
      break;
    } else if (($40 | 0) == 46) {
      label = 84;
      break;
    } else if (($40 | 0) == 42) {
      label = 85;
      break;
    } else if (($40 | 0) == 48) {
      label = 90;
      break;
    } else if (($40 | 0) == 39) {
      $fmt_1_be = $39;
      $type_0_be = $type_0181;
      $value_0_be = $value_0180;
      $seen_precision_0_be = $seen_precision_0179;
      label = 94;
      break;
    } else if (($40 | 0) == 57 | ($40 | 0) == 56 | ($40 | 0) == 49 | ($40 | 0) == 50 | ($40 | 0) == 51 | ($40 | 0) == 52 | ($40 | 0) == 53 | ($40 | 0) == 54 | ($40 | 0) == 55) {
      $fmt_2 = $39;
      $n8_0 = 0;
      $fchar_0 = $40;
      label = 95;
      break;
    } else {
      $fmt_0_be = $39;
      $last_fmt_0_be = $last_fmt_0199;
      $retval_0_be = $retval_0198;
      label = 47;
      break;
    }
   case 5:
    $storemerge = 8048;
    $storemerge123 = 16;
    label = 6;
    break;
   case 6:
    HEAP32[$14 >> 2] = $storemerge123;
    HEAP32[$16 >> 2] = $storemerge;
    HEAP32[$15 >> 2] = 2;
    HEAP32[$17 >> 2] = 1;
    $42 = ($seen_precision_0179 | 0) == 0;
    if ($42) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    HEAP32[$20 >> 2] = -1;
    label = 8;
    break;
   case 8:
    HEAP32[$21 >> 2] = 1;
    HEAP32[$23 >> 2] = 1;
    label = 41;
    break;
   case 9:
    $46 = HEAP32[$ap >> 2] | 0;
    $47 = $46 + 4 | 0;
    HEAP32[$ap >> 2] = $47;
    $fmt_0_be = $39;
    $last_fmt_0_be = $last_fmt_0199;
    $retval_0_be = $retval_0198;
    label = 47;
    break;
   case 10:
    $48 = ($seen_precision_0179 | 0) == 0;
    if ($48) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    HEAP32[$20 >> 2] = -1;
    label = 12;
    break;
   case 12:
    if (($type_0181 | 0) == 106) {
      label = 13;
      break;
    } else if (($type_0181 | 0) == 108) {
      label = 14;
      break;
    } else if (($type_0181 | 0) == 76) {
      label = 15;
      break;
    } else if (($type_0181 | 0) == 78) {
      label = 16;
      break;
    } else if (($type_0181 | 0) == 113) {
      label = 23;
      break;
    } else if (($type_0181 | 0) == 81) {
      label = 24;
      break;
    } else if (($type_0181 | 0) == 116) {
      label = 28;
      break;
    } else if (($type_0181 | 0) == 122) {
      label = 29;
      break;
    } else if (($type_0181 | 0) == 90) {
      label = 30;
      break;
    } else {
      label = 36;
      break;
    }
   case 13:
    $52 = HEAP32[$ap >> 2] | 0;
    $53 = $52 + 8 | 0;
    HEAP32[$ap >> 2] = $53;
    $fmt_0_be = $39;
    $last_fmt_0_be = $last_fmt_0199;
    $retval_0_be = $retval_0198;
    label = 47;
    break;
   case 14:
    $55 = HEAP32[$ap >> 2] | 0;
    $56 = $55 + 4 | 0;
    HEAP32[$ap >> 2] = $56;
    $fmt_0_be = $39;
    $last_fmt_0_be = $last_fmt_0199;
    $retval_0_be = $retval_0198;
    label = 47;
    break;
   case 15:
    ___gmp_assert_fail(6296, 285, 5896);
    return 0;
   case 16:
    $59 = ($34 | 0) == ($last_fmt_0199 | 0);
    if ($59) {
      $retval_1 = $retval_0198;
      label = 19;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    HEAP8[$34] = 0;
    $61 = HEAP32[$29 >> 2] | 0;
    $62 = HEAP32[$last_ap >> 2] | 0;
    $63 = FUNCTION_TABLE_iiii[$61 & 1023]($data, $last_fmt_0199, $62) | 0;
    $64 = ($63 | 0) == -1;
    if ($64) {
      label = 104;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $66 = $63 + $retval_0198 | 0;
    $retval_1 = $66;
    label = 19;
    break;
   case 19:
    $68 = HEAP32[$ap >> 2] | 0;
    $69 = $68;
    $70 = $68 + 4 | 0;
    HEAP32[$ap >> 2] = $70;
    $71 = HEAP32[$69 >> 2] | 0;
    HEAP32[$27 >> 2] = $71;
    $72 = HEAP32[$ap >> 2] | 0;
    $73 = $72;
    $74 = $72 + 4 | 0;
    HEAP32[$ap >> 2] = $74;
    $75 = HEAP32[$73 >> 2] | 0;
    $76 = ($75 | 0) > -1;
    $77 = -$75 | 0;
    $78 = $76 ? $75 : $77;
    $abs_xsize_0 = $78;
    label = 20;
    break;
   case 20:
    $80 = ($abs_xsize_0 | 0) > 0;
    if ($80) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    $82 = $abs_xsize_0 - 1 | 0;
    $83 = $71 + ($82 << 2) | 0;
    $84 = HEAP32[$83 >> 2] | 0;
    $85 = ($84 | 0) == 0;
    if ($85) {
      $abs_xsize_0 = $82;
      label = 20;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $87 = -$abs_xsize_0 | 0;
    $88 = $76 ? $abs_xsize_0 : $87;
    HEAP32[$28 >> 2] = $88;
    $89 = HEAP32[$14 >> 2] | 0;
    $90 = ___gmpz_get_str(0, $89, $26) | 0;
    $gmp_str_0 = $90;
    $retval_4 = $retval_1;
    label = 34;
    break;
   case 23:
    ___gmp_assert_fail(6296, 312, 5544);
    return 0;
   case 24:
    $93 = ($34 | 0) == ($last_fmt_0199 | 0);
    if ($93) {
      $retval_2 = $retval_0198;
      label = 27;
      break;
    } else {
      label = 25;
      break;
    }
   case 25:
    HEAP8[$34] = 0;
    $95 = HEAP32[$30 >> 2] | 0;
    $96 = HEAP32[$last_ap >> 2] | 0;
    $97 = FUNCTION_TABLE_iiii[$95 & 1023]($data, $last_fmt_0199, $96) | 0;
    $98 = ($97 | 0) == -1;
    if ($98) {
      label = 104;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    $100 = $97 + $retval_0198 | 0;
    $retval_2 = $100;
    label = 27;
    break;
   case 27:
    $102 = HEAP32[$14 >> 2] | 0;
    $103 = HEAP32[$ap >> 2] | 0;
    $104 = $103;
    $105 = $103 + 4 | 0;
    HEAP32[$ap >> 2] = $105;
    $106 = HEAP32[$104 >> 2] | 0;
    $107 = ___gmpq_get_str(0, $102, $106) | 0;
    $gmp_str_0 = $107;
    $retval_4 = $retval_2;
    label = 34;
    break;
   case 28:
    $109 = HEAP32[$ap >> 2] | 0;
    $110 = $109 + 4 | 0;
    HEAP32[$ap >> 2] = $110;
    $fmt_0_be = $39;
    $last_fmt_0_be = $last_fmt_0199;
    $retval_0_be = $retval_0198;
    label = 47;
    break;
   case 29:
    $112 = HEAP32[$ap >> 2] | 0;
    $113 = $112 + 4 | 0;
    HEAP32[$ap >> 2] = $113;
    $fmt_0_be = $39;
    $last_fmt_0_be = $last_fmt_0199;
    $retval_0_be = $retval_0198;
    label = 47;
    break;
   case 30:
    $115 = ($34 | 0) == ($last_fmt_0199 | 0);
    if ($115) {
      $retval_3 = $retval_0198;
      label = 33;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    HEAP8[$34] = 0;
    $117 = HEAP32[$31 >> 2] | 0;
    $118 = HEAP32[$last_ap >> 2] | 0;
    $119 = FUNCTION_TABLE_iiii[$117 & 1023]($data, $last_fmt_0199, $118) | 0;
    $120 = ($119 | 0) == -1;
    if ($120) {
      label = 104;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $122 = $119 + $retval_0198 | 0;
    $retval_3 = $122;
    label = 33;
    break;
   case 33:
    $124 = HEAP32[$14 >> 2] | 0;
    $125 = HEAP32[$ap >> 2] | 0;
    $126 = $125;
    $127 = $125 + 4 | 0;
    HEAP32[$ap >> 2] = $127;
    $128 = HEAP32[$126 >> 2] | 0;
    $129 = ___gmpz_get_str(0, $124, $128) | 0;
    $gmp_str_0 = $129;
    $retval_4 = $retval_3;
    label = 34;
    break;
   case 34:
    $131 = ___gmp_doprnt_integer($funs, $data, $param, $gmp_str_0) | 0;
    $132 = HEAP32[3802] | 0;
    $133 = _strlen($gmp_str_0 | 0) | 0;
    $134 = $133 + 1 | 0;
    FUNCTION_TABLE_vii[$132 & 1023]($gmp_str_0, $134);
    $135 = ($131 | 0) == -1;
    if ($135) {
      label = 104;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $137 = $131 + $retval_4 | 0;
    _llvm_va_copy($9 | 0, $2 | 0);
    $fmt_0_be = $39;
    $last_fmt_0_be = $39;
    $retval_0_be = $137;
    label = 47;
    break;
   case 36:
    $139 = HEAP32[$ap >> 2] | 0;
    $140 = $139 + 4 | 0;
    HEAP32[$ap >> 2] = $140;
    $fmt_0_be = $39;
    $last_fmt_0_be = $last_fmt_0199;
    $retval_0_be = $retval_0198;
    label = 47;
    break;
   case 37:
    HEAP32[$14 >> 2] = -10;
    HEAP32[$16 >> 2] = 5416;
    label = 38;
    break;
   case 38:
    HEAP32[$15 >> 2] = 2;
    label = 39;
    break;
   case 39:
    $143 = HEAP32[$21 >> 2] | 0;
    $144 = ($143 | 0) == 3;
    if ($144) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    HEAP32[$22 >> 2] = 1;
    HEAP32[$23 >> 2] = 1;
    label = 41;
    break;
   case 41:
    if (($type_0181 | 0) == 70) {
      label = 42;
      break;
    } else if (($type_0181 | 0) == 76) {
      label = 48;
      break;
    } else {
      label = 49;
      break;
    }
   case 42:
    $148 = ($34 | 0) == ($last_fmt_0199 | 0);
    if ($148) {
      $retval_5 = $retval_0198;
      label = 45;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    HEAP8[$34] = 0;
    $150 = HEAP32[$25 >> 2] | 0;
    $151 = HEAP32[$last_ap >> 2] | 0;
    $152 = FUNCTION_TABLE_iiii[$150 & 1023]($data, $last_fmt_0199, $151) | 0;
    $153 = ($152 | 0) == -1;
    if ($153) {
      label = 104;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    $155 = $152 + $retval_0198 | 0;
    $retval_5 = $155;
    label = 45;
    break;
   case 45:
    $157 = _nl_langinfo(50) | 0;
    $158 = HEAP32[$ap >> 2] | 0;
    $159 = $158;
    $160 = $158 + 4 | 0;
    HEAP32[$ap >> 2] = $160;
    $161 = HEAP32[$159 >> 2] | 0;
    $162 = ___gmp_doprnt_mpf2($funs, $data, $param, $157, $161) | 0;
    $163 = ($162 | 0) == -1;
    if ($163) {
      label = 104;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    $165 = $162 + $retval_5 | 0;
    _llvm_va_copy($9 | 0, $2 | 0);
    $fmt_0_be = $39;
    $last_fmt_0_be = $39;
    $retval_0_be = $165;
    label = 47;
    break;
   case 47:
    $166 = _strchr($fmt_0_be | 0, 37) | 0;
    $167 = ($166 | 0) == 0;
    if ($167) {
      $retval_0_lcssa = $retval_0_be;
      $last_fmt_0_lcssa = $last_fmt_0_be;
      label = 98;
      break;
    } else {
      $retval_0198 = $retval_0_be;
      $last_fmt_0199 = $last_fmt_0_be;
      $34 = $166;
      label = 3;
      break;
    }
   case 48:
    ___gmp_assert_fail(6296, 378, 5152);
    return 0;
   case 49:
    $170 = HEAP32[$ap >> 2] | 0;
    $171 = $170 + 8 | 0;
    HEAP32[$ap >> 2] = $171;
    $fmt_0_be = $39;
    $last_fmt_0_be = $last_fmt_0199;
    $retval_0_be = $retval_0198;
    label = 47;
    break;
   case 50:
    HEAP32[$15 >> 2] = 1;
    label = 39;
    break;
   case 51:
    $fmt_1_be = $39;
    $type_0_be = $40;
    $value_0_be = $value_0180;
    $seen_precision_0_be = $seen_precision_0179;
    label = 94;
    break;
   case 52:
    HEAP32[$14 >> 2] = -10;
    HEAP32[$16 >> 2] = 5416;
    label = 53;
    break;
   case 53:
    HEAP32[$15 >> 2] = 3;
    HEAP32[$23 >> 2] = 0;
    label = 39;
    break;
   case 54:
    $176 = ($type_0181 | 0) == 104;
    if ($176) {
      $fmt_1_be = $39;
      $type_0_be = 72;
      $value_0_be = $value_0180;
      $seen_precision_0_be = $seen_precision_0179;
      label = 94;
      break;
    } else {
      label = 51;
      break;
    }
   case 55:
    $178 = ($type_0181 | 0) == 108;
    if ($178) {
      $fmt_1_be = $39;
      $type_0_be = 76;
      $value_0_be = $value_0180;
      $seen_precision_0_be = $seen_precision_0179;
      label = 94;
      break;
    } else {
      label = 51;
      break;
    }
   case 56:
    HEAP8[$fmt_1182] = 108;
    $fmt_1_be = $39;
    $type_0_be = 108;
    $value_0_be = $value_0180;
    $seen_precision_0_be = $seen_precision_0179;
    label = 94;
    break;
   case 57:
    $181 = ($34 | 0) == ($last_fmt_0199 | 0);
    if ($181) {
      $retval_6 = $retval_0198;
      label = 60;
      break;
    } else {
      label = 58;
      break;
    }
   case 58:
    HEAP8[$34] = 0;
    $183 = HEAP32[$32 >> 2] | 0;
    $184 = HEAP32[$last_ap >> 2] | 0;
    $185 = FUNCTION_TABLE_iiii[$183 & 1023]($data, $last_fmt_0199, $184) | 0;
    $186 = ($185 | 0) == -1;
    if ($186) {
      label = 104;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    $188 = $185 + $retval_0198 | 0;
    $retval_6 = $188;
    label = 60;
    break;
   case 60:
    $190 = HEAP32[$ap >> 2] | 0;
    $191 = $190;
    $192 = $190 + 4 | 0;
    HEAP32[$ap >> 2] = $192;
    $193 = HEAP32[$191 >> 2] | 0;
    if (($type_0181 | 0) == 0) {
      label = 61;
      break;
    } else if (($type_0181 | 0) == 70) {
      label = 62;
      break;
    } else if (($type_0181 | 0) == 72) {
      label = 63;
      break;
    } else if (($type_0181 | 0) == 104) {
      label = 64;
      break;
    } else if (($type_0181 | 0) == 106) {
      label = 65;
      break;
    } else if (($type_0181 | 0) == 108) {
      label = 66;
      break;
    } else if (($type_0181 | 0) == 113) {
      label = 67;
      break;
    } else if (($type_0181 | 0) == 76) {
      label = 68;
      break;
    } else if (($type_0181 | 0) == 78) {
      label = 69;
      break;
    } else if (($type_0181 | 0) == 81) {
      label = 71;
      break;
    } else if (($type_0181 | 0) == 116) {
      label = 72;
      break;
    } else if (($type_0181 | 0) == 122) {
      label = 73;
      break;
    } else if (($type_0181 | 0) == 90) {
      label = 74;
      break;
    } else {
      label = 76;
      break;
    }
   case 61:
    $195 = $193;
    HEAP32[$195 >> 2] = $retval_6;
    label = 76;
    break;
   case 62:
    $197 = $193;
    ___gmpf_set_si($197, $retval_6);
    label = 76;
    break;
   case 63:
    $199 = $retval_6 & 255;
    HEAP8[$193] = $199;
    label = 76;
    break;
   case 64:
    $201 = $retval_6 & 65535;
    $202 = $193;
    HEAP16[$202 >> 1] = $201;
    label = 76;
    break;
   case 65:
    $204$0 = $retval_6;
    $204$1 = ($retval_6 | 0) < 0 ? -1 : 0;
    $205 = $193;
    $st$0$0 = $205 | 0;
    HEAP32[$st$0$0 >> 2] = $204$0;
    $st$1$1 = $205 + 4 | 0;
    HEAP32[$st$1$1 >> 2] = $204$1;
    label = 76;
    break;
   case 66:
    $207 = $193;
    HEAP32[$207 >> 2] = $retval_6;
    label = 76;
    break;
   case 67:
    ___gmp_assert_fail(6296, 464, 5544);
    return 0;
   case 68:
    ___gmp_assert_fail(6296, 469, 5896);
    return 0;
   case 69:
    $211 = $192;
    $212 = $190 + 8 | 0;
    HEAP32[$ap >> 2] = $212;
    $213 = HEAP32[$211 >> 2] | 0;
    $214 = ($213 | 0) == 0;
    if ($214) {
      label = 76;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    $216 = -$213 | 0;
    $217 = ($213 | 0) > -1;
    $218 = $217 ? $213 : $216;
    $219 = $193;
    HEAP32[$219 >> 2] = $retval_6;
    $220 = ($218 | 0) == 1;
    if ($220) {
      label = 76;
      break;
    } else {
      label = 75;
      break;
    }
   case 71:
    $222 = $193;
    ___gmpq_set_si($222, $retval_6, 1);
    label = 76;
    break;
   case 72:
    $224 = $193;
    HEAP32[$224 >> 2] = $retval_6;
    label = 76;
    break;
   case 73:
    $226 = $193;
    HEAP32[$226 >> 2] = $retval_6;
    label = 76;
    break;
   case 74:
    $228 = $193;
    ___gmpz_set_si($228, $retval_6);
    label = 76;
    break;
   case 75:
    $scevgep = $193 + 4 | 0;
    $229 = $218 << 2;
    $230 = $229 - 4 | 0;
    _memset($scevgep | 0, 0, $230 | 0);
    label = 76;
    break;
   case 76:
    _llvm_va_copy($9 | 0, $2 | 0);
    $fmt_0_be = $39;
    $last_fmt_0_be = $39;
    $retval_0_be = $retval_6;
    label = 47;
    break;
   case 77:
    HEAP32[$14 >> 2] = 8;
    label = 10;
    break;
   case 78:
    $234 = HEAP32[$ap >> 2] | 0;
    $235 = $234 + 4 | 0;
    HEAP32[$ap >> 2] = $235;
    $fmt_0_be = $39;
    $last_fmt_0_be = $last_fmt_0199;
    $retval_0_be = $retval_0198;
    label = 47;
    break;
   case 79:
    HEAP32[$14 >> 2] = 16;
    label = 10;
    break;
   case 80:
    HEAP32[$14 >> 2] = -16;
    label = 10;
    break;
   case 81:
    HEAP32[$21 >> 2] = 3;
    $fmt_1_be = $39;
    $type_0_be = $type_0181;
    $value_0_be = $value_0180;
    $seen_precision_0_be = $seen_precision_0179;
    label = 94;
    break;
   case 82:
    HEAP8[$24] = $_in;
    $fmt_1_be = $39;
    $type_0_be = $type_0181;
    $value_0_be = $value_0180;
    $seen_precision_0_be = $seen_precision_0179;
    label = 94;
    break;
   case 83:
    HEAP32[$19 >> 2] = 1;
    $fmt_1_be = $39;
    $type_0_be = $type_0181;
    $value_0_be = $value_0180;
    $seen_precision_0_be = $seen_precision_0179;
    label = 94;
    break;
   case 84:
    HEAP32[$20 >> 2] = -1;
    $fmt_1_be = $39;
    $type_0_be = $type_0181;
    $value_0_be = $20;
    $seen_precision_0_be = 1;
    label = 94;
    break;
   case 85:
    $243 = HEAP32[$ap >> 2] | 0;
    $244 = $243;
    $245 = $243 + 4 | 0;
    HEAP32[$ap >> 2] = $245;
    $246 = HEAP32[$244 >> 2] | 0;
    $247 = ($value_0180 | 0) == ($13 | 0);
    $248 = ($246 | 0) < 0;
    if ($247) {
      label = 86;
      break;
    } else {
      label = 89;
      break;
    }
   case 86:
    if ($248) {
      label = 87;
      break;
    } else {
      $n7_0 = $246;
      label = 88;
      break;
    }
   case 87:
    HEAP32[$19 >> 2] = 1;
    $251 = -$246 | 0;
    $n7_0 = $251;
    label = 88;
    break;
   case 88:
    HEAP32[$13 >> 2] = $n7_0;
    $fmt_1_be = $39;
    $type_0_be = $type_0181;
    $value_0_be = $value_0180;
    $seen_precision_0_be = $seen_precision_0179;
    label = 94;
    break;
   case 89:
    $254 = $248 ? 0 : $246;
    HEAP32[$20 >> 2] = $254;
    $fmt_1_be = $39;
    $type_0_be = $type_0181;
    $value_0_be = $value_0180;
    $seen_precision_0_be = $seen_precision_0179;
    label = 94;
    break;
   case 90:
    $256 = ($value_0180 | 0) == ($13 | 0);
    if ($256) {
      label = 91;
      break;
    } else {
      label = 93;
      break;
    }
   case 91:
    HEAP8[$18] = 48;
    $258 = HEAP32[$19 >> 2] | 0;
    $259 = ($258 | 0) == 2;
    if ($259) {
      label = 92;
      break;
    } else {
      $fmt_1_be = $39;
      $type_0_be = $type_0181;
      $value_0_be = $value_0180;
      $seen_precision_0_be = $seen_precision_0179;
      label = 94;
      break;
    }
   case 92:
    HEAP32[$19 >> 2] = 3;
    $fmt_1_be = $39;
    $type_0_be = $type_0181;
    $value_0_be = $value_0180;
    $seen_precision_0_be = $seen_precision_0179;
    label = 94;
    break;
   case 93:
    HEAP32[$value_0180 >> 2] = 0;
    $fmt_1_be = $39;
    $type_0_be = $type_0181;
    $value_0_be = $value_0180;
    $seen_precision_0_be = $seen_precision_0179;
    label = 94;
    break;
   case 94:
    $262 = $fmt_1_be + 1 | 0;
    $263 = HEAP8[$fmt_1_be] | 0;
    $264 = $263 << 24 >> 24 == 0;
    if ($264) {
      $fmt_0_be = $262;
      $last_fmt_0_be = $last_fmt_0199;
      $retval_0_be = $retval_0198;
      label = 47;
      break;
    } else {
      $seen_precision_0179 = $seen_precision_0_be;
      $value_0180 = $value_0_be;
      $type_0181 = $type_0_be;
      $fmt_1182 = $fmt_1_be;
      $39 = $262;
      $_in = $263;
      label = 4;
      break;
    }
   case 95:
    $265 = $n8_0 * 10 & -1;
    $266 = $fchar_0 - 48 | 0;
    $267 = $266 + $265 | 0;
    $268 = HEAP8[$fmt_2] | 0;
    $269 = $268 << 24 >> 24;
    $270 = $268 << 24 >> 24 > -1;
    if ($270) {
      label = 96;
      break;
    } else {
      label = 97;
      break;
    }
   case 96:
    $272 = $fmt_2 + 1 | 0;
    $isdigittmp = $269 - 48 | 0;
    $isdigit = $isdigittmp >>> 0 < 10;
    if ($isdigit) {
      $fmt_2 = $272;
      $n8_0 = $267;
      $fchar_0 = $269;
      label = 95;
      break;
    } else {
      label = 97;
      break;
    }
   case 97:
    HEAP32[$value_0180 >> 2] = $267;
    $fmt_1_be = $fmt_2;
    $type_0_be = $type_0181;
    $value_0_be = $value_0180;
    $seen_precision_0_be = $seen_precision_0179;
    label = 94;
    break;
   case 98:
    $273 = HEAP8[$last_fmt_0_lcssa] | 0;
    $274 = $273 << 24 >> 24 == 0;
    if ($274) {
      $retval_7 = $retval_0_lcssa;
      label = 101;
      break;
    } else {
      label = 99;
      break;
    }
   case 99:
    $276 = $funs | 0;
    $277 = HEAP32[$276 >> 2] | 0;
    $278 = HEAP32[$last_ap >> 2] | 0;
    $279 = FUNCTION_TABLE_iiii[$277 & 1023]($data, $last_fmt_0_lcssa, $278) | 0;
    $280 = ($279 | 0) == -1;
    if ($280) {
      label = 104;
      break;
    } else {
      label = 100;
      break;
    }
   case 100:
    $282 = $279 + $retval_0_lcssa | 0;
    $retval_7 = $282;
    label = 101;
    break;
   case 101:
    $284 = $funs + 12 | 0;
    $285 = HEAP32[$284 >> 2] | 0;
    $286 = ($285 | 0) == 0;
    if ($286) {
      $retval_8 = $retval_7;
      label = 103;
      break;
    } else {
      label = 102;
      break;
    }
   case 102:
    $288 = FUNCTION_TABLE_ii[$285 & 1023]($data) | 0;
    $289 = ($288 | 0) == -1;
    if ($289) {
      label = 104;
      break;
    } else {
      $retval_8 = $retval_7;
      label = 103;
      break;
    }
   case 103:
    $291 = HEAP32[3802] | 0;
    FUNCTION_TABLE_vii[$291 & 1023]($7, $5);
    STACKTOP = __stackBase__;
    return $retval_8 | 0;
   case 104:
    $retval_8 = -1;
    label = 103;
    break;
  }
  return 0;
}
function ___gmp_doprnt_mpf2($funs, $data, $p, $point, $f) {
  $funs = $funs | 0;
  $data = $data | 0;
  $p = $p | 0;
  $point = $point | 0;
  $f = $f | 0;
  var $exp = 0, $exponent = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $uadd$0 = 0, $uadd$1 = 0, $30 = 0, $31 = 0, $32 = 0, $__x3_0 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $_lobit = 0, $_lobit_not = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $ndigits_0 = 0, $prec_0 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $s_0 = 0, $sign_0_in = 0, $len_0 = 0, $sign_0 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $79 = 0, $80 = 0, $_ = 0, $prec_1 = 0, $82 = 0, $83 = 0, $84 = 0, $87 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $isdigittmp = 0, $isdigit = 0, $97 = 0, $99 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $_sink = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $len_1 = 0, $111 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $isdigittmp199 = 0, $isdigit200 = 0, $119 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $_sink1 = 0, $127 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $len_2 = 0, $135 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $len_3 = 0, $141 = 0, $len_4_ph_ph = 0, $prec_2_ph_ph = 0, $_pr_pr = 0, $_pr = 0, $len_4_ph = 0, $prec_2_ph = 0, $144 = 0, $prec_2203 = 0, $len_4202 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $153 = 0, $155 = 0, $156 = 0, $_195 = 0, $prec_3 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $expval_0 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $181 = 0, $182 = 0, $183 = 0, $185 = 0, $186 = 0, $187 = 0, $fraclen_1 = 0, $fraczeros_1 = 0, $intzeros_1 = 0, $intlen_1 = 0, $explen_0 = 0, $prec_4 = 0, $189 = 0, $190 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $sum = 0, $_op = 0, $_196_neg = 0, $_neg204 = 0, $196 = 0, $197 = 0, $198 = 0, $preczeros_0 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $205 = 0, $206 = 0, $208 = 0, $210 = 0, $211 = 0, $212 = 0, $214 = 0, $215 = 0, $217 = 0, $showbase_0 = 0, $showbaselen_0 = 0, $222 = 0, $223 = 0, $sum218 = 0, $sum219 = 0, $sum220 = 0, $sum221 = 0, $sum222 = 0, $sum223 = 0, $sum224 = 0, $sum225 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $_197 = 0, $228 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $retval_0 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $244 = 0, $retval_1 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $253 = 0, $retval_2 = 0, $255 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $265 = 0, $retval_3 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $272 = 0, $273 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $280 = 0, $retval_4 = 0, $282 = 0, $284 = 0, $285 = 0, $286 = 0, $288 = 0, $retval_5 = 0, $290 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $297 = 0, $retval_6 = 0, $299 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $306 = 0, $retval_7 = 0, $308 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $315 = 0, $retval_8 = 0, $317 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $324 = 0, $retval_9 = 0, $326 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $_198 = 0, $retval_10 = 0, $337 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $exp = __stackBase__ | 0;
    $exponent = __stackBase__ + 8 | 0;
    $1 = $p + 24 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) < 0;
    $4 = $p + 4 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $7 = ($5 | 0) == 3;
    if ($7) {
      label = 3;
      break;
    } else {
      $prec_0 = $2;
      $ndigits_0 = 0;
      label = 8;
      break;
    }
   case 3:
    $9 = $f | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = 9836 + ($10 * 20 & -1) | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $p | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = ($14 | 0) > -1;
    $16 = -$14 | 0;
    $17 = $15 ? $14 : $16;
    $18 = $17 << 5;
    $19 = $18 - 32 | 0;
    $20 = $12 & 65535;
    $21 = $12 >>> 16;
    $22 = $19 & 65504;
    $23 = $19 >>> 16;
    $24 = Math_imul($22, $20);
    $25 = Math_imul($23, $20);
    $26 = Math_imul($22, $21);
    $27 = Math_imul($23, $21);
    $28 = $24 >>> 16;
    $29 = $28 + $25 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($29 | 0, $26 | 0) | 0;
    $uadd$1 = tempRet0;
    $30 = $uadd$0;
    $31 = $uadd$1;
    $32 = $27 + 65536 | 0;
    $__x3_0 = $31 ? $32 : $27;
    $33 = $30 >>> 16;
    $34 = $33 + 2 | 0;
    $35 = $34 + $__x3_0 | 0;
    $prec_0 = $35;
    $ndigits_0 = 0;
    label = 8;
    break;
   case 4:
    if (($5 | 0) == 1) {
      label = 5;
      break;
    } else if (($5 | 0) == 2) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 5:
    $38 = $2 + 3 | 0;
    $39 = $f + 8 | 0;
    $40 = HEAP32[$39 >> 2] | 0;
    $41 = $p | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    $43 = ($42 | 0) > -1;
    $44 = -$42 | 0;
    $45 = $43 ? $42 : $44;
    $46 = 9832 + ($45 * 20 & -1) | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    $_lobit = $40 >>> 31;
    $_lobit_not = $_lobit ^ 1;
    $48 = $47 + $_lobit_not | 0;
    $49 = Math_imul($48, $40);
    $50 = $38 + $49 | 0;
    $51 = ($50 | 0) > 1;
    $52 = $51 ? $50 : 1;
    $prec_0 = $2;
    $ndigits_0 = $52;
    label = 8;
    break;
   case 6:
    $54 = $2 + 1 | 0;
    $prec_0 = $2;
    $ndigits_0 = $54;
    label = 8;
    break;
   case 7:
    $56 = ($2 | 0) > 1;
    $57 = $56 ? $2 : 1;
    $prec_0 = $2;
    $ndigits_0 = $57;
    label = 8;
    break;
   case 8:
    $59 = $p | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    $61 = ___gmpf_get_str(0, $exp, $60, $ndigits_0, $f) | 0;
    $62 = _strlen($61 | 0) | 0;
    $63 = $62 + 1 | 0;
    $64 = $p + 40 | 0;
    $65 = HEAP8[$64] | 0;
    $66 = HEAP8[$61] | 0;
    $67 = $66 << 24 >> 24 == 45;
    if ($67) {
      label = 9;
      break;
    } else {
      $len_0 = $62;
      $sign_0_in = $65;
      $s_0 = $61;
      label = 10;
      break;
    }
   case 9:
    $69 = $61 + 1 | 0;
    $70 = $62 - 1 | 0;
    $len_0 = $70;
    $sign_0_in = 45;
    $s_0 = $69;
    label = 10;
    break;
   case 10:
    $sign_0 = $sign_0_in << 24 >> 24;
    $72 = $sign_0_in << 24 >> 24 != 0;
    $73 = $72 & 1;
    $74 = HEAP32[$4 >> 2] | 0;
    if (($74 | 0) == 1) {
      label = 11;
      break;
    } else if (($74 | 0) == 2) {
      label = 35;
      break;
    } else {
      label = 38;
      break;
    }
   case 11:
    $76 = ($prec_0 | 0) < 0;
    if ($76) {
      label = 12;
      break;
    } else {
      $prec_1 = $prec_0;
      label = 13;
      break;
    }
   case 12:
    $78 = HEAP32[$exp >> 2] | 0;
    $79 = $len_0 - $78 | 0;
    $80 = ($79 | 0) < 0;
    $_ = $80 ? 0 : $79;
    $prec_1 = $_;
    label = 13;
    break;
   case 13:
    $82 = HEAP32[$exp >> 2] | 0;
    $83 = $82 + $prec_1 | 0;
    $84 = ($83 | 0) < 0;
    if ($84) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    HEAP32[$exp >> 2] = 0;
    $145 = 0;
    $len_4202 = 0;
    $prec_2203 = $prec_1;
    label = 33;
    break;
   case 15:
    $87 = ($len_0 | 0) > ($83 | 0);
    if ($87) {
      label = 16;
      break;
    } else {
      $prec_2_ph_ph = $prec_1;
      $len_4_ph_ph = $len_0;
      label = 31;
      break;
    }
   case 16:
    $89 = HEAP32[$59 >> 2] | 0;
    $90 = ($89 | 0) > -1;
    $91 = $90 ? 5776 : 8008;
    $92 = -$89 | 0;
    $93 = $90 ? $89 : $92;
    $94 = $s_0 + $83 | 0;
    $95 = HEAP8[$94] | 0;
    $96 = $95 << 24 >> 24;
    $isdigittmp = $96 - 48 | 0;
    $isdigit = $isdigittmp >>> 0 < 10;
    $97 = $95 << 24 >> 24;
    if ($isdigit) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $99 = $97 - 48 | 0;
    $107 = $99;
    label = 19;
    break;
   case 18:
    $101 = _islower($97 | 0) | 0;
    $102 = ($101 | 0) != 0;
    $103 = HEAP8[$94] | 0;
    $104 = $103 << 24 >> 24;
    $_sink = $102 ? -87 : -55;
    $105 = $_sink + $104 | 0;
    $107 = $105;
    label = 19;
    break;
   case 19:
    $108 = $93 + 1 | 0;
    $109 = ($108 | 0) / 2 & -1;
    $110 = ($107 | 0) < ($109 | 0);
    if ($110) {
      $len_2 = $83;
      label = 27;
      break;
    } else {
      $len_1 = $83;
      label = 20;
      break;
    }
   case 20:
    $111 = ($len_1 | 0) == 0;
    if ($111) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    HEAP8[$s_0] = 49;
    $112 = HEAP32[$exp >> 2] | 0;
    $113 = $112 + 1 | 0;
    HEAP32[$exp >> 2] = $113;
    $prec_2_ph = $prec_1;
    $len_4_ph = 1;
    $_pr = $113;
    label = 32;
    break;
   case 22:
    $115 = $len_1 - 1 | 0;
    $116 = $s_0 + $115 | 0;
    $117 = HEAP8[$116] | 0;
    $118 = $117 << 24 >> 24;
    $isdigittmp199 = $118 - 48 | 0;
    $isdigit200 = $isdigittmp199 >>> 0 < 10;
    $119 = $117 << 24 >> 24;
    if ($isdigit200) {
      label = 23;
      break;
    } else {
      label = 24;
      break;
    }
   case 23:
    $121 = $119 - 48 | 0;
    $129 = $121;
    label = 25;
    break;
   case 24:
    $123 = _islower($119 | 0) | 0;
    $124 = ($123 | 0) != 0;
    $125 = HEAP8[$116] | 0;
    $126 = $125 << 24 >> 24;
    $_sink1 = $124 ? -87 : -55;
    $127 = $_sink1 + $126 | 0;
    $129 = $127;
    label = 25;
    break;
   case 25:
    $130 = $129 + 1 | 0;
    $131 = ($130 | 0) == ($93 | 0);
    if ($131) {
      $len_1 = $115;
      label = 20;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    $133 = $91 + $130 | 0;
    $134 = HEAP8[$133] | 0;
    HEAP8[$116] = $134;
    $len_3 = $len_1;
    label = 29;
    break;
   case 27:
    $135 = ($len_2 | 0) > 0;
    if ($135) {
      label = 28;
      break;
    } else {
      $len_3 = $len_2;
      label = 29;
      break;
    }
   case 28:
    $137 = $len_2 - 1 | 0;
    $138 = $s_0 + $137 | 0;
    $139 = HEAP8[$138] | 0;
    $140 = $139 << 24 >> 24 == 48;
    if ($140) {
      $len_2 = $137;
      label = 27;
      break;
    } else {
      $prec_2_ph_ph = $prec_1;
      $len_4_ph_ph = $len_2;
      label = 31;
      break;
    }
   case 29:
    $141 = ($len_3 | 0) == 0;
    if ($141) {
      label = 30;
      break;
    } else {
      $prec_2_ph_ph = $prec_1;
      $len_4_ph_ph = $len_3;
      label = 31;
      break;
    }
   case 30:
    HEAP32[$exp >> 2] = 0;
    $145 = 0;
    $len_4202 = 0;
    $prec_2203 = $prec_1;
    label = 33;
    break;
   case 31:
    $_pr_pr = HEAP32[$exp >> 2] | 0;
    $prec_2_ph = $prec_2_ph_ph;
    $len_4_ph = $len_4_ph_ph;
    $_pr = $_pr_pr;
    label = 32;
    break;
   case 32:
    $144 = ($_pr | 0) < 1;
    if ($144) {
      $145 = $_pr;
      $len_4202 = $len_4_ph;
      $prec_2203 = $prec_2_ph;
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    $146 = -$145 | 0;
    $prec_4 = $prec_2203;
    $explen_0 = 0;
    $intlen_1 = 0;
    $intzeros_1 = 1;
    $fraczeros_1 = $146;
    $fraclen_1 = $len_4202;
    label = 40;
    break;
   case 34:
    $148 = ($len_4_ph | 0) < ($_pr | 0);
    $149 = $148 ? $len_4_ph : $_pr;
    $150 = $_pr - $149 | 0;
    $151 = $len_4_ph - $149 | 0;
    $prec_4 = $prec_2_ph;
    $explen_0 = 0;
    $intlen_1 = $149;
    $intzeros_1 = $150;
    $fraczeros_1 = 0;
    $fraclen_1 = $151;
    label = 40;
    break;
   case 35:
    $153 = ($prec_0 | 0) < 0;
    if ($153) {
      label = 36;
      break;
    } else {
      $prec_3 = $prec_0;
      label = 37;
      break;
    }
   case 36:
    $155 = $len_0 - 1 | 0;
    $156 = ($155 | 0) < 0;
    $_195 = $156 ? 0 : $155;
    $prec_3 = $_195;
    label = 37;
    break;
   case 37:
    $158 = ($len_0 | 0) > 1;
    $159 = $158 ? 1 : $len_0;
    $160 = ($159 | 0) == 0;
    $161 = $160 & 1;
    $162 = $len_0 - $159 | 0;
    $163 = HEAP32[$exp >> 2] | 0;
    $164 = $163 - $159 | 0;
    $165 = $p + 12 | 0;
    $166 = HEAP32[$165 >> 2] | 0;
    $167 = ($166 | 0) == 0;
    $168 = $164 << 2;
    $expval_0 = $167 ? $164 : $168;
    $169 = ($expval_0 | 0) > -1;
    $170 = $expval_0 >> 31;
    $171 = $170 & 2;
    $172 = $171 + 43 | 0;
    $173 = -$expval_0 | 0;
    $174 = $169 ? $expval_0 : $173;
    $175 = $exponent | 0;
    $176 = $p + 8 | 0;
    $177 = HEAP32[$176 >> 2] | 0;
    $178 = $172 & 47;
    $179 = _snprintf($175 | 0, 42, $177 | 0, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $178, HEAP32[tempInt + 8 >> 2] = $174, tempInt) | 0) | 0;
    $prec_4 = $prec_3;
    $explen_0 = $179;
    $intlen_1 = $159;
    $intzeros_1 = $161;
    $fraczeros_1 = 0;
    $fraclen_1 = $162;
    label = 40;
    break;
   case 38:
    $181 = HEAP32[$exp >> 2] | 0;
    $182 = $181 - 1 | 0;
    $183 = ($182 | 0) < -4;
    if ($183) {
      $prec_3 = $prec_0;
      label = 37;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    $185 = ($prec_0 | 0) < 1;
    $186 = $185 ? 1 : $prec_0;
    $187 = ($182 | 0) < ($186 | 0);
    if ($187) {
      $prec_2_ph_ph = $prec_0;
      $len_4_ph_ph = $len_0;
      label = 31;
      break;
    } else {
      $prec_3 = $prec_0;
      label = 37;
      break;
    }
   case 40:
    $189 = $p + 36 | 0;
    $190 = HEAP32[$189 >> 2] | 0;
    $191 = ($190 | 0) == 0;
    if ($191) {
      $preczeros_0 = 0;
      label = 42;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $193 = HEAP32[$4 >> 2] | 0;
    $194 = ($193 | 0) == 3;
    $195 = $intlen_1 + $intzeros_1 | 0;
    $sum = $fraczeros_1 + $fraclen_1 | 0;
    $_op = -$195 | 0;
    $_196_neg = $194 ? $_op : 0;
    $_neg204 = $prec_4 - $sum | 0;
    $196 = $_neg204 + $_196_neg | 0;
    $197 = ($196 | 0) < 0;
    $198 = $197 ? 0 : $196;
    $preczeros_0 = $198;
    label = 42;
    break;
   case 42:
    $200 = -$preczeros_0 | 0;
    $201 = $fraczeros_1 + $fraclen_1 | 0;
    $202 = ($201 | 0) == ($200 | 0);
    if ($202) {
      label = 43;
      break;
    } else {
      label = 44;
      break;
    }
   case 43:
    $204 = $p + 32 | 0;
    $205 = HEAP32[$204 >> 2] | 0;
    $206 = ($205 | 0) == 0;
    if ($206) {
      $210 = 0;
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    $208 = _strlen($point | 0) | 0;
    $210 = $208;
    label = 45;
    break;
   case 45:
    $211 = $p + 28 | 0;
    $212 = HEAP32[$211 >> 2] | 0;
    if (($212 | 0) == 3) {
      label = 46;
      break;
    } else if (($212 | 0) == 1) {
      label = 47;
      break;
    } else {
      $showbaselen_0 = 0;
      $showbase_0 = 0;
      label = 51;
      break;
    }
   case 46:
    $214 = $intlen_1 | $fraclen_1;
    $215 = ($214 | 0) == 0;
    if ($215) {
      $showbaselen_0 = 0;
      $showbase_0 = 0;
      label = 51;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    $217 = HEAP32[$59 >> 2] | 0;
    if (($217 | 0) == 16) {
      label = 48;
      break;
    } else if (($217 | 0) == (-16 | 0)) {
      label = 49;
      break;
    } else if (($217 | 0) == 8) {
      label = 50;
      break;
    } else {
      $showbaselen_0 = 0;
      $showbase_0 = 0;
      label = 51;
      break;
    }
   case 48:
    $showbaselen_0 = 2;
    $showbase_0 = 6952;
    label = 51;
    break;
   case 49:
    $showbaselen_0 = 2;
    $showbase_0 = 6288;
    label = 51;
    break;
   case 50:
    $showbaselen_0 = 1;
    $showbase_0 = 5888;
    label = 51;
    break;
   case 51:
    $222 = $p + 44 | 0;
    $223 = HEAP32[$222 >> 2] | 0;
    $sum218 = $fraclen_1 + $73 | 0;
    $sum219 = $sum218 + $fraczeros_1 | 0;
    $sum220 = $sum219 + $intzeros_1 | 0;
    $sum221 = $sum220 + $intlen_1 | 0;
    $sum222 = $sum221 + $explen_0 | 0;
    $sum223 = $sum222 + $preczeros_0 | 0;
    $sum224 = $sum223 + $210 | 0;
    $sum225 = $sum224 + $showbaselen_0 | 0;
    $224 = $223 - $sum225 | 0;
    $225 = $p + 20 | 0;
    $226 = HEAP32[$225 >> 2] | 0;
    $227 = ($224 | 0) < 1;
    $_197 = $227 ? 0 : $226;
    $228 = ($_197 | 0) == 2;
    if ($228) {
      label = 52;
      break;
    } else {
      $retval_0 = 0;
      label = 53;
      break;
    }
   case 52:
    $230 = $funs + 8 | 0;
    $231 = HEAP32[$230 >> 2] | 0;
    $232 = $p + 16 | 0;
    $233 = HEAP8[$232] | 0;
    $234 = $233 << 24 >> 24;
    $235 = FUNCTION_TABLE_iiii[$231 & 1023]($data, $234, $224) | 0;
    $236 = ($235 | 0) == -1;
    if ($236) {
      $retval_10 = -1;
      label = 83;
      break;
    } else {
      $retval_0 = $235;
      label = 53;
      break;
    }
   case 53:
    if ($72) {
      label = 54;
      break;
    } else {
      $retval_1 = $retval_0;
      label = 56;
      break;
    }
   case 54:
    $239 = $funs + 8 | 0;
    $240 = HEAP32[$239 >> 2] | 0;
    $241 = FUNCTION_TABLE_iiii[$240 & 1023]($data, $sign_0, 1) | 0;
    $242 = ($241 | 0) == -1;
    if ($242) {
      $retval_10 = -1;
      label = 83;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    $244 = $241 + $retval_0 | 0;
    $retval_1 = $244;
    label = 56;
    break;
   case 56:
    $246 = ($showbaselen_0 | 0) == 0;
    if ($246) {
      $retval_2 = $retval_1;
      label = 59;
      break;
    } else {
      label = 57;
      break;
    }
   case 57:
    $248 = $funs + 4 | 0;
    $249 = HEAP32[$248 >> 2] | 0;
    $250 = FUNCTION_TABLE_iiii[$249 & 1023]($data, $showbase_0, $showbaselen_0) | 0;
    $251 = ($250 | 0) == -1;
    if ($251) {
      $retval_10 = -1;
      label = 83;
      break;
    } else {
      label = 58;
      break;
    }
   case 58:
    $253 = $250 + $retval_1 | 0;
    $retval_2 = $253;
    label = 59;
    break;
   case 59:
    $255 = ($_197 | 0) == 3;
    if ($255) {
      label = 60;
      break;
    } else {
      $retval_3 = $retval_2;
      label = 62;
      break;
    }
   case 60:
    $257 = $funs + 8 | 0;
    $258 = HEAP32[$257 >> 2] | 0;
    $259 = $p + 16 | 0;
    $260 = HEAP8[$259] | 0;
    $261 = $260 << 24 >> 24;
    $262 = FUNCTION_TABLE_iiii[$258 & 1023]($data, $261, $224) | 0;
    $263 = ($262 | 0) == -1;
    if ($263) {
      $retval_10 = -1;
      label = 83;
      break;
    } else {
      label = 61;
      break;
    }
   case 61:
    $265 = $262 + $retval_2 | 0;
    $retval_3 = $265;
    label = 62;
    break;
   case 62:
    $267 = $funs + 4 | 0;
    $268 = HEAP32[$267 >> 2] | 0;
    $269 = FUNCTION_TABLE_iiii[$268 & 1023]($data, $s_0, $intlen_1) | 0;
    $270 = ($269 | 0) == -1;
    if ($270) {
      $retval_10 = -1;
      label = 83;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    $272 = $269 + $retval_3 | 0;
    $273 = ($intzeros_1 | 0) == 0;
    if ($273) {
      $retval_4 = $272;
      label = 66;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    $275 = $funs + 8 | 0;
    $276 = HEAP32[$275 >> 2] | 0;
    $277 = FUNCTION_TABLE_iiii[$276 & 1023]($data, 48, $intzeros_1) | 0;
    $278 = ($277 | 0) == -1;
    if ($278) {
      $retval_10 = -1;
      label = 83;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    $280 = $277 + $272 | 0;
    $retval_4 = $280;
    label = 66;
    break;
   case 66:
    $282 = ($210 | 0) == 0;
    if ($282) {
      $retval_5 = $retval_4;
      label = 69;
      break;
    } else {
      label = 67;
      break;
    }
   case 67:
    $284 = HEAP32[$267 >> 2] | 0;
    $285 = FUNCTION_TABLE_iiii[$284 & 1023]($data, $point, $210) | 0;
    $286 = ($285 | 0) == -1;
    if ($286) {
      $retval_10 = -1;
      label = 83;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    $288 = $285 + $retval_4 | 0;
    $retval_5 = $288;
    label = 69;
    break;
   case 69:
    $290 = ($fraczeros_1 | 0) == 0;
    if ($290) {
      $retval_6 = $retval_5;
      label = 72;
      break;
    } else {
      label = 70;
      break;
    }
   case 70:
    $292 = $funs + 8 | 0;
    $293 = HEAP32[$292 >> 2] | 0;
    $294 = FUNCTION_TABLE_iiii[$293 & 1023]($data, 48, $fraczeros_1) | 0;
    $295 = ($294 | 0) == -1;
    if ($295) {
      $retval_10 = -1;
      label = 83;
      break;
    } else {
      label = 71;
      break;
    }
   case 71:
    $297 = $294 + $retval_5 | 0;
    $retval_6 = $297;
    label = 72;
    break;
   case 72:
    $299 = ($fraclen_1 | 0) == 0;
    if ($299) {
      $retval_7 = $retval_6;
      label = 75;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    $301 = HEAP32[$267 >> 2] | 0;
    $302 = $s_0 + $intlen_1 | 0;
    $303 = FUNCTION_TABLE_iiii[$301 & 1023]($data, $302, $fraclen_1) | 0;
    $304 = ($303 | 0) == -1;
    if ($304) {
      $retval_10 = -1;
      label = 83;
      break;
    } else {
      label = 74;
      break;
    }
   case 74:
    $306 = $303 + $retval_6 | 0;
    $retval_7 = $306;
    label = 75;
    break;
   case 75:
    $308 = ($preczeros_0 | 0) == 0;
    if ($308) {
      $retval_8 = $retval_7;
      label = 78;
      break;
    } else {
      label = 76;
      break;
    }
   case 76:
    $310 = $funs + 8 | 0;
    $311 = HEAP32[$310 >> 2] | 0;
    $312 = FUNCTION_TABLE_iiii[$311 & 1023]($data, 48, $preczeros_0) | 0;
    $313 = ($312 | 0) == -1;
    if ($313) {
      $retval_10 = -1;
      label = 83;
      break;
    } else {
      label = 77;
      break;
    }
   case 77:
    $315 = $312 + $retval_7 | 0;
    $retval_8 = $315;
    label = 78;
    break;
   case 78:
    $317 = ($explen_0 | 0) == 0;
    if ($317) {
      $retval_9 = $retval_8;
      label = 81;
      break;
    } else {
      label = 79;
      break;
    }
   case 79:
    $319 = HEAP32[$267 >> 2] | 0;
    $320 = $exponent | 0;
    $321 = FUNCTION_TABLE_iiii[$319 & 1023]($data, $320, $explen_0) | 0;
    $322 = ($321 | 0) == -1;
    if ($322) {
      $retval_10 = -1;
      label = 83;
      break;
    } else {
      label = 80;
      break;
    }
   case 80:
    $324 = $321 + $retval_8 | 0;
    $retval_9 = $324;
    label = 81;
    break;
   case 81:
    $326 = ($_197 | 0) == 1;
    if ($326) {
      label = 82;
      break;
    } else {
      $retval_10 = $retval_9;
      label = 83;
      break;
    }
   case 82:
    $328 = $funs + 8 | 0;
    $329 = HEAP32[$328 >> 2] | 0;
    $330 = $p + 16 | 0;
    $331 = HEAP8[$330] | 0;
    $332 = $331 << 24 >> 24;
    $333 = FUNCTION_TABLE_iiii[$329 & 1023]($data, $332, $224) | 0;
    $334 = ($333 | 0) == -1;
    $335 = $333 + $retval_9 | 0;
    $_198 = $334 ? -1 : $335;
    $retval_10 = $_198;
    label = 83;
    break;
   case 83:
    $337 = HEAP32[3802] | 0;
    FUNCTION_TABLE_vii[$337 & 1023]($61, $63);
    STACKTOP = __stackBase__;
    return $retval_10 | 0;
  }
  return 0;
}
function ___gmp_doprnt_integer($funs, $data, $p, $s) {
  $funs = $funs | 0;
  $data = $data | 0;
  $p = $p | 0;
  $s = $s | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_ = 0, $_s = 0, $sign_0 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $__s = 0, $_1 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $showbase_0 = 0, $showbaselen_0 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $den_showbaselen_0_ph = 0, $_pr = 0, $38 = 0, $40 = 0, $41 = 0, $_showbaselen_0 = 0, $den_showbaselen_087 = 0, $showbaselen_1 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $_85 = 0, $46 = 0, $47 = 0, $48 = 0, $sum = 0, $sum93 = 0, $_neg91 = 0, $_neg92 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $justify_0 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $retval_0 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $retval_1 = 0, $71 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $retval_2 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $retval_3 = 0, $89 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $retval_4 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $slen_0 = 0, $retval_5 = 0, $_2 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $127 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $_86 = 0, $retval_6 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p + 40 | 0;
    $2 = HEAP8[$1] | 0;
    $3 = HEAP8[$s] | 0;
    $4 = $3 << 24 >> 24 == 45;
    $5 = $s + 1 | 0;
    $_ = $4 ? 45 : $2;
    $_s = $4 ? $5 : $s;
    $sign_0 = $_ << 24 >> 24;
    $6 = $_ << 24 >> 24 != 0;
    $7 = $6 & 1;
    $8 = HEAP8[$_s] | 0;
    $9 = $8 << 24 >> 24 == 48;
    if ($9) {
      label = 2;
      break;
    } else {
      $_1 = $_s;
      label = 3;
      break;
    }
   case 2:
    $11 = $p + 24 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($12 | 0) == 0;
    $14 = $_s + 1 | 0;
    $__s = $13 ? $14 : $_s;
    $_1 = $__s;
    label = 3;
    break;
   case 3:
    $16 = _strlen($_1 | 0) | 0;
    $17 = _strchr($_1 | 0, 47) | 0;
    $18 = $p + 28 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = ($19 | 0) == 2;
    if ($20) {
      $showbaselen_0 = 0;
      $showbase_0 = 0;
      label = 8;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $22 = $p | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    if (($23 | 0) == 16) {
      label = 5;
      break;
    } else if (($23 | 0) == (-16 | 0)) {
      label = 6;
      break;
    } else if (($23 | 0) == 8) {
      label = 7;
      break;
    } else {
      $showbaselen_0 = 0;
      $showbase_0 = 0;
      label = 8;
      break;
    }
   case 5:
    $showbaselen_0 = 2;
    $showbase_0 = 5712;
    label = 8;
    break;
   case 6:
    $showbaselen_0 = 2;
    $showbase_0 = 8e3;
    label = 8;
    break;
   case 7:
    $showbaselen_0 = 1;
    $showbase_0 = 6944;
    label = 8;
    break;
   case 8:
    $28 = ($17 | 0) == 0;
    if ($28) {
      label = 11;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $30 = HEAP32[$18 >> 2] | 0;
    $31 = ($30 | 0) == 3;
    if ($31) {
      label = 10;
      break;
    } else {
      $showbaselen_1 = $showbaselen_0;
      $den_showbaselen_087 = $showbaselen_0;
      label = 14;
      break;
    }
   case 10:
    $33 = $17 + 1 | 0;
    $34 = HEAP8[$33] | 0;
    $35 = $34 << 24 >> 24 == 48;
    if ($35) {
      label = 11;
      break;
    } else {
      $den_showbaselen_0_ph = $showbaselen_0;
      label = 12;
      break;
    }
   case 11:
    $den_showbaselen_0_ph = 0;
    label = 12;
    break;
   case 12:
    $_pr = HEAP32[$18 >> 2] | 0;
    $38 = ($_pr | 0) == 3;
    if ($38) {
      label = 13;
      break;
    } else {
      $showbaselen_1 = $showbaselen_0;
      $den_showbaselen_087 = $den_showbaselen_0_ph;
      label = 14;
      break;
    }
   case 13:
    $40 = HEAP8[$_1] | 0;
    $41 = $40 << 24 >> 24 == 48;
    $_showbaselen_0 = $41 ? 0 : $showbaselen_0;
    $showbaselen_1 = $_showbaselen_0;
    $den_showbaselen_087 = $den_showbaselen_0_ph;
    label = 14;
    break;
   case 14:
    $42 = $p + 24 | 0;
    $43 = HEAP32[$42 >> 2] | 0;
    $44 = $43 - $16 | 0;
    $45 = ($44 | 0) < 0;
    $_85 = $45 ? 0 : $44;
    $46 = $p + 44 | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    $48 = _strlen($_1 | 0) | 0;
    $sum = $den_showbaselen_087 + $7 | 0;
    $sum93 = $sum + $showbaselen_1 | 0;
    $_neg91 = $47 - $sum93 | 0;
    $_neg92 = $_neg91 - $48 | 0;
    $49 = $_neg92 - $_85 | 0;
    $50 = $p + 20 | 0;
    $51 = HEAP32[$50 >> 2] | 0;
    $52 = ($49 | 0) < 1;
    $justify_0 = $52 ? 0 : $51;
    $53 = ($justify_0 | 0) == 2;
    if ($53) {
      label = 15;
      break;
    } else {
      $retval_0 = 0;
      label = 16;
      break;
    }
   case 15:
    $55 = $funs + 8 | 0;
    $56 = HEAP32[$55 >> 2] | 0;
    $57 = $p + 16 | 0;
    $58 = HEAP8[$57] | 0;
    $59 = $58 << 24 >> 24;
    $60 = FUNCTION_TABLE_iiii[$56 & 1023]($data, $59, $49) | 0;
    $61 = ($60 | 0) == -1;
    if ($61) {
      $retval_6 = -1;
      label = 35;
      break;
    } else {
      $retval_0 = $60;
      label = 16;
      break;
    }
   case 16:
    if ($6) {
      label = 17;
      break;
    } else {
      $retval_1 = $retval_0;
      label = 19;
      break;
    }
   case 17:
    $64 = $funs + 8 | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    $66 = FUNCTION_TABLE_iiii[$65 & 1023]($data, $sign_0, $7) | 0;
    $67 = ($66 | 0) == -1;
    if ($67) {
      $retval_6 = -1;
      label = 35;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $69 = $66 + $retval_0 | 0;
    $retval_1 = $69;
    label = 19;
    break;
   case 19:
    $71 = ($showbaselen_1 | 0) == 0;
    if ($71) {
      $retval_2 = $retval_1;
      label = 22;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $73 = $funs + 4 | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    $75 = FUNCTION_TABLE_iiii[$74 & 1023]($data, $showbase_0, $showbaselen_1) | 0;
    $76 = ($75 | 0) == -1;
    if ($76) {
      $retval_6 = -1;
      label = 35;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $78 = $75 + $retval_1 | 0;
    $retval_2 = $78;
    label = 22;
    break;
   case 22:
    $80 = ($_85 | 0) == 0;
    if ($80) {
      $retval_3 = $retval_2;
      label = 25;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $82 = $funs + 8 | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = FUNCTION_TABLE_iiii[$83 & 1023]($data, 48, $_85) | 0;
    $85 = ($84 | 0) == -1;
    if ($85) {
      $retval_6 = -1;
      label = 35;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $87 = $84 + $retval_2 | 0;
    $retval_3 = $87;
    label = 25;
    break;
   case 25:
    $89 = ($justify_0 | 0) == 3;
    if ($89) {
      label = 26;
      break;
    } else {
      $retval_4 = $retval_3;
      label = 28;
      break;
    }
   case 26:
    $91 = $funs + 8 | 0;
    $92 = HEAP32[$91 >> 2] | 0;
    $93 = $p + 16 | 0;
    $94 = HEAP8[$93] | 0;
    $95 = $94 << 24 >> 24;
    $96 = FUNCTION_TABLE_iiii[$92 & 1023]($data, $95, $49) | 0;
    $97 = ($96 | 0) == -1;
    if ($97) {
      $retval_6 = -1;
      label = 35;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $99 = $96 + $retval_3 | 0;
    $retval_4 = $99;
    label = 28;
    break;
   case 28:
    $101 = ($den_showbaselen_087 | 0) == 0;
    if ($101) {
      $_2 = $_1;
      $retval_5 = $retval_4;
      $slen_0 = $16;
      label = 32;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    $103 = $17 + 1 | 0;
    $104 = $103;
    $105 = $_1;
    $106 = $104 - $105 | 0;
    $107 = $funs + 4 | 0;
    $108 = HEAP32[$107 >> 2] | 0;
    $109 = FUNCTION_TABLE_iiii[$108 & 1023]($data, $_1, $106) | 0;
    $110 = ($109 | 0) == -1;
    if ($110) {
      $retval_6 = -1;
      label = 35;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    $112 = HEAP32[$107 >> 2] | 0;
    $113 = FUNCTION_TABLE_iiii[$112 & 1023]($data, $showbase_0, $den_showbaselen_087) | 0;
    $114 = ($113 | 0) == -1;
    if ($114) {
      $retval_6 = -1;
      label = 35;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    $116 = $_1 + $106 | 0;
    $117 = $16 - $106 | 0;
    $118 = $109 + $retval_4 | 0;
    $119 = $118 + $113 | 0;
    $_2 = $116;
    $retval_5 = $119;
    $slen_0 = $117;
    label = 32;
    break;
   case 32:
    $121 = $funs + 4 | 0;
    $122 = HEAP32[$121 >> 2] | 0;
    $123 = FUNCTION_TABLE_iiii[$122 & 1023]($data, $_2, $slen_0) | 0;
    $124 = ($123 | 0) == -1;
    if ($124) {
      $retval_6 = -1;
      label = 35;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $126 = $123 + $retval_5 | 0;
    $127 = ($justify_0 | 0) == 1;
    if ($127) {
      label = 34;
      break;
    } else {
      $retval_6 = $126;
      label = 35;
      break;
    }
   case 34:
    $129 = $funs + 8 | 0;
    $130 = HEAP32[$129 >> 2] | 0;
    $131 = $p + 16 | 0;
    $132 = HEAP8[$131] | 0;
    $133 = $132 << 24 >> 24;
    $134 = FUNCTION_TABLE_iiii[$130 & 1023]($data, $133, $49) | 0;
    $135 = ($134 | 0) == -1;
    $136 = $134 + $126 | 0;
    $_86 = $135 ? -1 : $136;
    return $_86 | 0;
   case 35:
    return $retval_6 | 0;
  }
  return 0;
}
function ___gmp_fprintf($fp, $fmt, varrp) {
  $fp = $fp | 0;
  $fmt = $fmt | 0;
  varrp = varrp | 0;
  var $ap = 0, $1 = 0, $4 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $ap = __stackBase__ | 0;
  $1 = $ap;
  HEAP32[$1 >> 2] = varrp;
  HEAP32[$1 + 4 >> 2] = 0;
  $4 = ___gmp_doprnt(15216, $fp, $fmt, HEAP32[$ap >> 2] | 0) | 0;
  STACKTOP = __stackBase__;
  return $4 | 0;
}
function _gmp_fprintf_memory($fp, $str, $len) {
  $fp = $fp | 0;
  $str = $str | 0;
  $len = $len | 0;
  return _fwrite($str | 0, 1, $len | 0, $fp | 0) | 0;
}
function _gmp_fprintf_reps($fp, $c, $reps) {
  $fp = $fp | 0;
  $c = $c | 0;
  $reps = $reps | 0;
  var $buf = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i_0 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 256 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $buf = __stackBase__ | 0;
    $1 = $buf | 0;
    $2 = $c & 255;
    $3 = $reps >>> 0 < 256;
    $4 = $3 ? $reps : 256;
    _memset($1 | 0, $2 | 0, $4 | 0);
    $i_0 = $reps;
    label = 2;
    break;
   case 2:
    $6 = ($i_0 | 0) > 0;
    if ($6) {
      label = 3;
      break;
    } else {
      $_0 = $reps;
      label = 4;
      break;
    }
   case 3:
    $8 = $i_0 >>> 0 < 256;
    $9 = $8 ? $i_0 : 256;
    $10 = _fwrite($1 | 0, 1, $9 | 0, $fp | 0) | 0;
    $11 = ($10 | 0) == -1;
    $12 = $i_0 - 256 | 0;
    if ($11) {
      $_0 = -1;
      label = 4;
      break;
    } else {
      $i_0 = $12;
      label = 2;
      break;
    }
   case 4:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function ___gmp_snprintf($buf, $size, $fmt, varrp) {
  $buf = $buf | 0;
  $size = $size | 0;
  $fmt = $fmt | 0;
  varrp = varrp | 0;
  var $d = 0, $ap = 0, $1 = 0, $6 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $d = __stackBase__ | 0;
  $ap = __stackBase__ + 8 | 0;
  $1 = $ap;
  HEAP32[$1 >> 2] = varrp;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$d >> 2] = $buf;
  HEAP32[$d + 4 >> 2] = $size;
  $6 = ___gmp_doprnt(14976, $d, $fmt, HEAP32[$ap >> 2] | 0) | 0;
  STACKTOP = __stackBase__;
  return $6 | 0;
}
function _gmp_snprintf_format($d, $fmt, $orig_ap) {
  $d = $d | 0;
  $fmt = $fmt | 0;
  $orig_ap = $orig_ap | 0;
  var $1 = 0, $ap = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $_ = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $alloc_0_ph = 0, $24 = 0, $25 = 0, $alloc_0 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $or_cond = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = __stackBase__ | 0;
    $ap = __stackBase__ + 8 | 0;
    HEAP32[$1 >> 2] = $orig_ap;
    $2 = $d + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($3 | 0) > 1;
    if ($4) {
      label = 2;
      break;
    } else {
      $alloc_0_ph = 128;
      label = 4;
      break;
    }
   case 2:
    $6 = $ap;
    $7 = $1;
    _llvm_va_copy($6 | 0, $7 | 0);
    $8 = $d | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = HEAP32[$ap >> 2] | 0;
    $11 = _vsnprintf($9 | 0, $3 | 0, $fmt | 0, $10 | 0) | 0;
    $12 = ($11 | 0) == -1;
    $13 = $3 - 1 | 0;
    $_ = $12 ? $13 : $11;
    $14 = ($_ | 0) < ($13 | 0);
    $15 = $14 ? $_ : $13;
    $16 = HEAP32[$2 >> 2] | 0;
    $17 = $16 - $15 | 0;
    HEAP32[$2 >> 2] = $17;
    $18 = HEAP32[$8 >> 2] | 0;
    $19 = $18 + $15 | 0;
    HEAP32[$8 >> 2] = $19;
    $20 = ($_ | 0) == ($13 | 0);
    if ($20) {
      label = 3;
      break;
    } else {
      $_0 = $_;
      label = 6;
      break;
    }
   case 3:
    $22 = ($_ | 0) < 128;
    $23 = $22 ? 128 : $_;
    $alloc_0_ph = $23;
    label = 4;
    break;
   case 4:
    $24 = $ap;
    $25 = $1;
    $alloc_0 = $alloc_0_ph;
    label = 5;
    break;
   case 5:
    $26 = $alloc_0 << 1;
    $27 = HEAP32[3962] | 0;
    $28 = FUNCTION_TABLE_ii[$27 & 1023]($26) | 0;
    _llvm_va_copy($24 | 0, $25 | 0);
    $29 = HEAP32[$ap >> 2] | 0;
    $30 = _vsnprintf($28 | 0, $26 | 0, $fmt | 0, $29 | 0) | 0;
    $31 = HEAP32[3802] | 0;
    FUNCTION_TABLE_vii[$31 & 1023]($28, $26);
    $32 = $26 - 1 | 0;
    $33 = ($30 | 0) == ($32 | 0);
    $34 = ($30 | 0) == -1;
    $or_cond = $33 | $34;
    if ($or_cond) {
      $alloc_0 = $26;
      label = 5;
      break;
    } else {
      $_0 = $30;
      label = 6;
      break;
    }
   case 6:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _gmp_snprintf_memory($d, $str, $len) {
  $d = $d | 0;
  $str = $str | 0;
  $len = $len | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $_len = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $d + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 >>> 0 > 1;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $5 = $2 - 1 | 0;
    $6 = $5 >>> 0 < $len >>> 0;
    $_len = $6 ? $5 : $len;
    $7 = $d | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    _memcpy($8 | 0, $str | 0, $_len);
    $9 = HEAP32[$7 >> 2] | 0;
    $10 = $9 + $_len | 0;
    HEAP32[$7 >> 2] = $10;
    $11 = HEAP32[$1 >> 2] | 0;
    $12 = $11 - $_len | 0;
    HEAP32[$1 >> 2] = $12;
    label = 3;
    break;
   case 3:
    return $len | 0;
  }
  return 0;
}
function _generic_item_count($e) {
  $e = $e | 0;
  return 0;
}
function _generic_item($e, $i) {
  $e = $e | 0;
  $i = $i | 0;
  return 0;
}
function _gmp_snprintf_final($d) {
  $d = $d | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $d + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) == 0;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = $d | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    HEAP8[$6] = 0;
    label = 3;
    break;
   case 3:
    return 0;
  }
  return 0;
}
function ___gmp_mt_recalc_buffer($mt) {
  $mt = $mt | 0;
  var $kk_029 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $exitcond30 = 0, $kk_128 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $exitcond = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $kk_029 = 0;
    label = 2;
    break;
   case 2:
    $2 = $mt + ($kk_029 << 2) | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $3 & -2147483648;
    $5 = $kk_029 + 1 | 0;
    $6 = $mt + ($5 << 2) | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $7 & 2147483646;
    $9 = $8 | $4;
    $10 = $kk_029 + 397 | 0;
    $11 = $mt + ($10 << 2) | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $9 >>> 1;
    $14 = $13 ^ $12;
    $15 = $7 & 1;
    $16 = ($15 | 0) != 0;
    $17 = $16 ? -1727483681 : 0;
    $18 = $14 ^ $17;
    HEAP32[$2 >> 2] = $18;
    $exitcond30 = ($5 | 0) == 227;
    if ($exitcond30) {
      $kk_128 = 227;
      label = 3;
      break;
    } else {
      $kk_029 = $5;
      label = 2;
      break;
    }
   case 3:
    $19 = $mt + ($kk_128 << 2) | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $20 & -2147483648;
    $22 = $kk_128 + 1 | 0;
    $23 = $mt + ($22 << 2) | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $24 & 2147483646;
    $26 = $25 | $21;
    $27 = $kk_128 - 227 | 0;
    $28 = $mt + ($27 << 2) | 0;
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = $26 >>> 1;
    $31 = $30 ^ $29;
    $32 = $24 & 1;
    $33 = ($32 | 0) != 0;
    $34 = $33 ? -1727483681 : 0;
    $35 = $31 ^ $34;
    HEAP32[$19 >> 2] = $35;
    $exitcond = ($22 | 0) == 623;
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $kk_128 = $22;
      label = 3;
      break;
    }
   case 4:
    $36 = $mt + 2492 | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    $38 = $37 & -2147483648;
    $39 = HEAP32[$mt >> 2] | 0;
    $40 = $39 & 2147483646;
    $41 = $40 | $38;
    $42 = $mt + 1584 | 0;
    $43 = HEAP32[$42 >> 2] | 0;
    $44 = $41 >>> 1;
    $45 = $44 ^ $43;
    $46 = $39 & 1;
    $47 = ($46 | 0) != 0;
    $48 = $47 ? -1727483681 : 0;
    $49 = $45 ^ $48;
    HEAP32[$36 >> 2] = $49;
    return;
  }
}
function _mpz_is0($z) {
  $z = $z | 0;
  return (HEAP32[$z + 4 >> 2] | 0) == 0 & 1 | 0;
}
function _default_element_snprint($s, $n, $e) {
  $s = $s | 0;
  $n = $n | 0;
  $e = $e | 0;
  var $1 = 0, $4 = 0, $6 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($n | 0) == 1;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    HEAP8[$s] = 48;
    label = 5;
    break;
   case 3:
    $4 = $n >>> 0 > 1;
    if ($4) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    HEAP8[$s] = 63;
    $6 = $s + 1 | 0;
    HEAP8[$6] = 0;
    label = 5;
    break;
   case 5:
    return 1;
  }
  return 0;
}
function _gmp_snprintf_reps($d, $c, $reps) {
  $d = $d | 0;
  $c = $c | 0;
  $reps = $reps | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $_reps = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $d + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 >>> 0 > 1;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $5 = $2 - 1 | 0;
    $6 = $5 >>> 0 < $reps >>> 0;
    $_reps = $6 ? $5 : $reps;
    $7 = $d | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $c & 255;
    _memset($8 | 0, $9 | 0, $_reps | 0);
    $10 = HEAP32[$7 >> 2] | 0;
    $11 = $10 + $_reps | 0;
    HEAP32[$7 >> 2] = $11;
    $12 = HEAP32[$1 >> 2] | 0;
    $13 = $12 - $_reps | 0;
    HEAP32[$1 >> 2] = $13;
    label = 3;
    break;
   case 3:
    return $reps | 0;
  }
  return 0;
}
function ___gmp_randinit_default($rstate) {
  $rstate = $rstate | 0;
  ___gmp_randinit_mt($rstate);
  return;
}
function ___gmp_randget_mt($rstate, $dest, $nbits) {
  $rstate = $rstate | 0;
  $dest = $dest | 0;
  $nbits = $nbits | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i_035 = 0, $7 = 0, $8 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $rstate + 8 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 2496 | 0;
    $4 = $nbits >>> 5;
    $5 = $nbits & 31;
    $6 = ($4 | 0) == 0;
    if ($6) {
      label = 5;
      break;
    } else {
      $i_035 = 0;
      label = 2;
      break;
    }
   case 2:
    $7 = HEAP32[$3 >> 2] | 0;
    $8 = ($7 | 0) > 623;
    if ($8) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    ___gmp_mt_recalc_buffer($2);
    HEAP32[$3 >> 2] = 0;
    label = 4;
    break;
   case 4:
    $11 = HEAP32[$3 >> 2] | 0;
    $12 = $11 + 1 | 0;
    HEAP32[$3 >> 2] = $12;
    $13 = $2 + ($11 << 2) | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14 >>> 11;
    $16 = $15 ^ $14;
    $17 = $16 << 7;
    $18 = $17 & -1658038656;
    $19 = $18 ^ $16;
    $20 = $19 << 15;
    $21 = $20 & -272236544;
    $22 = $21 ^ $19;
    $23 = $22 >>> 18;
    $24 = $23 ^ $22;
    $25 = $dest + ($i_035 << 2) | 0;
    HEAP32[$25 >> 2] = $24;
    $26 = $i_035 + 1 | 0;
    $27 = ($26 | 0) < ($4 | 0);
    if ($27) {
      $i_035 = $26;
      label = 2;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $28 = ($5 | 0) == 0;
    if ($28) {
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $30 = HEAP32[$3 >> 2] | 0;
    $31 = ($30 | 0) > 623;
    if ($31) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    ___gmp_mt_recalc_buffer($2);
    HEAP32[$3 >> 2] = 0;
    label = 8;
    break;
   case 8:
    $34 = HEAP32[$3 >> 2] | 0;
    $35 = $34 + 1 | 0;
    HEAP32[$3 >> 2] = $35;
    $36 = $2 + ($34 << 2) | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    $38 = $37 >>> 11;
    $39 = $38 ^ $37;
    $40 = $39 << 7;
    $41 = $40 & -1658038656;
    $42 = $41 ^ $39;
    $43 = $42 << 15;
    $44 = $43 & -272236544;
    $45 = $44 ^ $42;
    $46 = $45 >>> 18;
    $47 = $46 ^ $45;
    $48 = -1 << $5;
    $49 = $48 ^ -1;
    $50 = $47 & $49;
    $51 = $dest + ($4 << 2) | 0;
    HEAP32[$51 >> 2] = $50;
    label = 9;
    break;
   case 9:
    return;
  }
}
function ___gmp_randclear_mt($rstate) {
  $rstate = $rstate | 0;
  FUNCTION_TABLE_vii[HEAP32[3802] & 1023](HEAP32[$rstate + 8 >> 2] | 0, HEAP32[$rstate >> 2] << 2);
  return;
}
function ___gmp_randiset_mt($dst, $src) {
  $dst = $dst | 0;
  $src = $src | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i_010 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $exitcond = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $dst + 16 | 0;
    HEAP32[$1 >> 2] = 15856;
    $2 = HEAP32[3962] | 0;
    $3 = FUNCTION_TABLE_ii[$2 & 1023](2500) | 0;
    $4 = $3;
    $5 = $dst + 8 | 0;
    HEAP32[$5 >> 2] = $4;
    $6 = $dst | 0;
    HEAP32[$6 >> 2] = 625;
    $7 = $src + 8 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $3;
    $i_010 = 0;
    label = 2;
    break;
   case 2:
    $11 = $8 + ($i_010 << 2) | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $9 + ($i_010 << 2) | 0;
    HEAP32[$13 >> 2] = $12;
    $14 = $i_010 + 1 | 0;
    $exitcond = ($14 | 0) == 624;
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_010 = $14;
      label = 2;
      break;
    }
   case 3:
    $16 = $8 + 2496 | 0;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = $3 + 2496 | 0;
    $19 = $18;
    HEAP32[$19 >> 2] = $17;
    return;
  }
}
function ___gmp_randinit_mt_noseed($dst) {
  $dst = $dst | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i_08 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $exitcond = 0, $14 = 0, $15 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $dst + 16 | 0;
    HEAP32[$1 >> 2] = 15856;
    $2 = HEAP32[3962] | 0;
    $3 = FUNCTION_TABLE_ii[$2 & 1023](2500) | 0;
    $4 = $3;
    $5 = $dst + 8 | 0;
    HEAP32[$5 >> 2] = $4;
    $6 = $dst | 0;
    HEAP32[$6 >> 2] = 625;
    $7 = $3;
    $i_08 = 0;
    label = 2;
    break;
   case 2:
    $9 = 1504 + ($i_08 << 2) | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $7 + ($i_08 << 2) | 0;
    HEAP32[$11 >> 2] = $10;
    $12 = $i_08 + 1 | 0;
    $exitcond = ($12 | 0) == 624;
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_08 = $12;
      label = 2;
      break;
    }
   case 3:
    $14 = $3 + 2496 | 0;
    $15 = $14;
    HEAP32[$15 >> 2] = 128;
    return;
  }
}
function ___gmp_randinit_mt($rstate) {
  $rstate = $rstate | 0;
  ___gmp_randinit_mt_noseed($rstate);
  HEAP32[$rstate + 16 >> 2] = 15872;
  return;
}
function _randseed_mt($rstate, $seed) {
  $rstate = $rstate | 0;
  $seed = $seed | 0;
  var $cnt = 0, $mod = 0, $seed1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $_pr = 0, $17 = 0, $19 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $cnt = __stackBase__ | 0;
    $mod = __stackBase__ + 8 | 0;
    $seed1 = __stackBase__ + 24 | 0;
    $1 = $rstate + 8 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $mod | 0;
    ___gmpz_init($3);
    $4 = $seed1 | 0;
    ___gmpz_init($4);
    ___gmpz_set_ui($3, 0);
    ___gmpz_setbit($3, 19937);
    ___gmpz_sub_ui($3, $3, 20027);
    ___gmpz_mod($4, $seed, $3);
    ___gmpz_add_ui($4, $4, 2);
    _mangle_seed($4, $4);
    $5 = ___gmpz_tstbit($4, 19936) | 0;
    $6 = ($5 | 0) != 0;
    $7 = $6 ? -2147483648 : 0;
    HEAP32[$2 >> 2] = $7;
    ___gmpz_clrbit($4, 19936);
    $8 = $2 + 4 | 0;
    $9 = $8;
    $10 = ___gmpz_export($9, $cnt, -1, 4, 0, 0, $4) | 0;
    $11 = HEAP32[$cnt >> 2] | 0;
    $12 = $11 + 1 | 0;
    HEAP32[$cnt >> 2] = $12;
    $13 = $12 >>> 0 < 624;
    if ($13) {
      $14 = $12;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $15 = $14 + 1 | 0;
    HEAP32[$cnt >> 2] = $15;
    $16 = $2 + ($14 << 2) | 0;
    HEAP32[$16 >> 2] = 0;
    $_pr = HEAP32[$cnt >> 2] | 0;
    $17 = $_pr >>> 0 < 624;
    if ($17) {
      $14 = $_pr;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    ___gmpz_clear($3);
    ___gmpz_clear($4);
    ___gmp_mt_recalc_buffer($2);
    ___gmp_mt_recalc_buffer($2);
    ___gmp_mt_recalc_buffer($2);
    $19 = $2 + 2496 | 0;
    HEAP32[$19 >> 2] = 128;
    STACKTOP = __stackBase__;
    return;
  }
}
function _mangle_seed($r, $b_orig) {
  $r = $r | 0;
  $b_orig = $b_orig | 0;
  var $t = 0, $b = 0, $1 = 0, $2 = 0, $3 = 0, $e_0 = 0, $bit_0 = 0, $5 = 0, $e_1_ph = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $16 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $t = __stackBase__ | 0;
    $b = __stackBase__ + 16 | 0;
    $1 = $t | 0;
    ___gmpz_init($1);
    $2 = $b | 0;
    ___gmpz_init_set($2, $b_orig);
    ___gmpz_set($r, $2);
    $3 = $t + 4 | 0;
    $bit_0 = 536870912;
    $e_0 = 1074888996;
    label = 2;
    break;
   case 2:
    ___gmpz_mul($r, $r, $r);
    $5 = $bit_0 ^ -1;
    $e_1_ph = $e_0;
    label = 3;
    break;
   case 3:
    ___gmpz_tdiv_q_2exp($1, $r, 19937);
    $6 = HEAP32[$3 >> 2] | 0;
    $7 = ($6 | 0) == 0;
    if ($7) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    ___gmpz_tdiv_r_2exp($r, $r, 19937);
    ___gmpz_addmul_ui($r, $1, 20023);
    ___gmpz_tdiv_q_2exp($1, $r, 19937);
    $8 = HEAP32[$3 >> 2] | 0;
    $9 = ($8 | 0) == 0;
    if ($9) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 5:
    $10 = $e_1_ph & $bit_0;
    $11 = ($10 | 0) == 0;
    if ($11) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $13 = $e_1_ph & $5;
    ___gmpz_mul($r, $r, $2);
    $e_1_ph = $13;
    label = 3;
    break;
   case 7:
    $15 = $bit_0 >>> 1;
    $16 = ($15 | 0) == 0;
    if ($16) {
      label = 8;
      break;
    } else {
      $bit_0 = $15;
      $e_0 = $e_1_ph;
      label = 2;
      break;
    }
   case 8:
    ___gmpz_clear($1);
    ___gmpz_clear($2);
    STACKTOP = __stackBase__;
    return;
  }
}
function ___gmp_randseed($rstate, $seed) {
  $rstate = $rstate | 0;
  $seed = $seed | 0;
  FUNCTION_TABLE_vii[HEAP32[HEAP32[$rstate + 16 >> 2] >> 2] & 1023]($rstate, $seed);
  return;
}
function ___gmp_randseed_ui($rstate, $seed) {
  $rstate = $rstate | 0;
  $seed = $seed | 0;
  var $zseed = 0, $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $zseed = __stackBase__ | 0;
  $1 = __stackBase__ + 16 | 0;
  HEAP32[$1 >> 2] = $seed;
  HEAP32[$zseed + 8 >> 2] = $1;
  HEAP32[$zseed + 4 >> 2] = (HEAP32[$1 >> 2] | 0) != 0 & 1;
  ___gmp_randseed($rstate, $zseed | 0);
  STACKTOP = __stackBase__;
  return;
}
function _element_set1165($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 28 >> 2] & 1023]($e);
  return;
}
function _element_init166($e, $f) {
  $e = $e | 0;
  $f = $f | 0;
  HEAP32[$e >> 2] = $f;
  FUNCTION_TABLE_vi[HEAP32[$f + 4 >> 2] & 1023]($e);
  return;
}
function _element_mul167($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 48 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_set168($e, $a) {
  $e = $e | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 20 >> 2] & 1023]($e, $a);
  return;
}
function _element_clear169($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 8 >> 2] & 1023]($e);
  return;
}
function _field_gen_nqr($f) {
  $f = $f | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP32[230] | 0;
    $2 = FUNCTION_TABLE_ii[$1 & 1023](8) | 0;
    $3 = $2;
    $4 = $f + 208 | 0;
    HEAP32[$4 >> 2] = $3;
    _element_init166($3, $f);
    label = 2;
    break;
   case 2:
    $6 = HEAP32[$4 >> 2] | 0;
    _element_random170($6);
    $7 = HEAP32[$4 >> 2] | 0;
    $8 = _element_is_sqr($7) | 0;
    $9 = ($8 | 0) == 0;
    if ($9) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _element_random170($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 128 >> 2] & 1023]($e);
  return;
}
function _element_is_sqr($a) {
  $a = $a | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$a >> 2] | 0) + 52 >> 2] & 1023]($a) | 0;
}
function _field_get_nqr($f) {
  $f = $f | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $f + 208 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) == 0;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _field_gen_nqr($f);
    label = 3;
    break;
   case 3:
    $6 = HEAP32[$1 >> 2] | 0;
    return $6 | 0;
  }
  return 0;
}
function _field_out_info($out, $f) {
  $out = $out | 0;
  $f = $f | 0;
  FUNCTION_TABLE_vii[HEAP32[$f + 176 >> 2] & 1023]($out, $f);
  return;
}
function _field_init($f) {
  $f = $f | 0;
  HEAP32[$f + 208 >> 2] = 0;
  ___gmpz_init($f + 196 | 0);
  HEAP32[$f >> 2] = 722;
  HEAP32[$f + 176 >> 2] = 84;
  HEAP32[$f + 108 >> 2] = 294;
  HEAP32[$f + 96 >> 2] = 170;
  HEAP32[$f + 112 >> 2] = 748;
  HEAP32[$f + 84 >> 2] = 10;
  HEAP32[$f + 88 >> 2] = 46;
  HEAP32[$f + 148 >> 2] = 96;
  HEAP32[$f + 44 >> 2] = 704;
  HEAP32[$f + 92 >> 2] = 730;
  HEAP32[$f + 80 >> 2] = 182;
  HEAP32[$f + 172 >> 2] = 154;
  HEAP32[$f + 12 >> 2] = 108;
  HEAP32[$f + 16 >> 2] = 118;
  HEAP32[$f + 128 >> 2] = 690;
  HEAP32[$f + 76 >> 2] = 26;
  HEAP32[$f + 136 >> 2] = 248;
  HEAP32[$f + 140 >> 2] = 250;
  HEAP32[$f + 60 >> 2] = 396;
  HEAP32[$f + 64 >> 2] = 760;
  HEAP32[$f + 68 >> 2] = 190;
  HEAP32[$f + 72 >> 2] = 192;
  HEAP32[$f + 116 >> 2] = 726;
  HEAP32[$f + 180 >> 2] = 28;
  HEAP32[$f + 184 >> 2] = 554;
  HEAP32[$f + 188 >> 2] = 474;
  HEAP32[$f + 168 >> 2] = 234;
  HEAP32[$f + 32 >> 2] = 14;
  HEAP32[$f + 192 >> 2] = 0;
  return;
}
function _warn_field_clear($f) {
  $f = $f | 0;
  var __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  _pbc_warn(7240, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $f, tempInt) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _generic_out_info($out, $f) {
  $out = $out | 0;
  $f = $f | 0;
  var __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  _element_fprintf($out, 8808, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $f, HEAP32[tempInt + 8 >> 2] = $f + 196 | 0, tempInt) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _generic_halve($r, $a) {
  $r = $r | 0;
  $a = $a | 0;
  var $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $1 = __stackBase__ | 0;
  _element_init166($1, HEAP32[$r >> 2] | 0);
  _element_set_si177($1, 2);
  _element_invert171($1, $1);
  _element_mul167($r, $a, $1);
  _element_clear169($1);
  STACKTOP = __stackBase__;
  return;
}
function _generic_double($r, $a) {
  $r = $r | 0;
  $a = $a | 0;
  _element_add174($r, $a, $a);
  return;
}
function _generic_square($r, $a) {
  $r = $r | 0;
  $a = $a | 0;
  _element_mul167($r, $a, $a);
  return;
}
function _generic_mul_mpz($r, $a, $z) {
  $r = $r | 0;
  $a = $a | 0;
  $z = $z | 0;
  var $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $1 = __stackBase__ | 0;
  _element_init166($1, HEAP32[$r >> 2] | 0);
  _element_set_mpz($1, $z);
  _element_mul167($r, $a, $1);
  _element_clear169($1);
  STACKTOP = __stackBase__;
  return;
}
function _generic_mul_si($r, $a, $n) {
  $r = $r | 0;
  $a = $a | 0;
  $n = $n | 0;
  var $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $1 = __stackBase__ | 0;
  _element_init166($1, HEAP32[$r >> 2] | 0);
  _element_set_si177($1, $n);
  _element_mul167($r, $a, $1);
  _element_clear169($1);
  STACKTOP = __stackBase__;
  return;
}
function _generic_cmp($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($a | 0) == ($b | 0);
    if ($1) {
      $_0 = 0;
      label = 4;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = _element_length_in_bytes175($a) | 0;
    $4 = _element_length_in_bytes175($b) | 0;
    $5 = ($3 | 0) == ($4 | 0);
    if ($5) {
      label = 3;
      break;
    } else {
      $_0 = 1;
      label = 4;
      break;
    }
   case 3:
    $7 = HEAP32[230] | 0;
    $8 = FUNCTION_TABLE_ii[$7 & 1023]($3) | 0;
    $9 = HEAP32[230] | 0;
    $10 = FUNCTION_TABLE_ii[$9 & 1023]($3) | 0;
    _element_to_bytes176($8, $a);
    _element_to_bytes176($10, $b);
    $11 = _memcmp($8 | 0, $10 | 0, $3 | 0) | 0;
    $12 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$12 & 1023]($8);
    $13 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$13 & 1023]($10);
    $_0 = $11;
    label = 4;
    break;
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function _generic_sub($c, $a, $b) {
  $c = $c | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $tmp = 0, $1 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $tmp = __stackBase__ | 0;
    $1 = ($c | 0) == ($a | 0);
    if ($1) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _element_neg($c, $b);
    _element_add174($c, $c, $a);
    label = 4;
    break;
   case 3:
    $4 = $tmp | 0;
    $5 = $a | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    _element_init166($4, $6);
    _element_neg($4, $b);
    _element_add174($c, $4, $a);
    _element_clear169($4);
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return;
  }
}
function _generic_div($c, $a, $b) {
  $c = $c | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $tmp = 0, $1 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $tmp = __stackBase__ | 0;
    $1 = ($c | 0) == ($a | 0);
    if ($1) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _element_invert171($c, $b);
    _element_mul167($c, $c, $a);
    label = 4;
    break;
   case 3:
    $4 = $tmp | 0;
    $5 = $a | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    _element_init166($4, $6);
    _element_invert171($4, $b);
    _element_mul167($c, $4, $a);
    _element_clear169($4);
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return;
  }
}
function _generic_add_ui($c, $a, $b) {
  $c = $c | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $4 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $1 = __stackBase__ | 0;
  _element_init166($1, HEAP32[$c >> 2] | 0);
  $4 = __stackBase__ + 8 | 0;
  ___gmpz_init($4);
  ___gmpz_set_ui($4, $b);
  _element_set_mpz($1, $4);
  _element_add174($c, $a, $1);
  ___gmpz_clear($4);
  _element_clear169($1);
  STACKTOP = __stackBase__;
  return;
}
function _zero_to_mpz($z, $a) {
  $z = $z | 0;
  $a = $a | 0;
  ___gmpz_set_ui($z, 0);
  return;
}
function _zero_set_mpz($a, $z) {
  $a = $a | 0;
  $z = $z | 0;
  _element_set0173($a);
  return;
}
function _generic_set_multiz($a, $m) {
  $a = $a | 0;
  $m = $m | 0;
  var $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $1 = __stackBase__ | 0;
  ___gmpz_init($1);
  _multiz_to_mpz($1, $m);
  _element_set_mpz($a, $1);
  ___gmpz_clear($1);
  STACKTOP = __stackBase__;
  return;
}
function _zero_random($a) {
  $a = $a | 0;
  _element_set0173($a);
  return;
}
function _generic_set_si($a, $si) {
  $a = $a | 0;
  $si = $si | 0;
  var $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $1 = __stackBase__ | 0;
  ___gmpz_init($1);
  ___gmpz_set_si($1, $si);
  _element_set_mpz($a, $1);
  ___gmpz_clear($1);
  STACKTOP = __stackBase__;
  return;
}
function _generic_is1($a) {
  $a = $a | 0;
  var $1 = 0, $4 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $1 = __stackBase__ | 0;
  _element_init166($1, HEAP32[$a >> 2] | 0);
  _element_set1165($1);
  $4 = _element_cmp($a, $1) | 0;
  _element_clear169($1);
  STACKTOP = __stackBase__;
  return $4 | 0;
}
function _generic_is0($a) {
  $a = $a | 0;
  var $1 = 0, $4 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $1 = __stackBase__ | 0;
  _element_init166($1, HEAP32[$a >> 2] | 0);
  $4 = _element_cmp($a, $1) | 0;
  _element_clear169($1);
  STACKTOP = __stackBase__;
  return $4 | 0;
}
function _generic_get_x($e) {
  $e = $e | 0;
  return _element_item($e, 0) | 0;
}
function _generic_get_y($e) {
  $e = $e | 0;
  return _element_item($e, 1) | 0;
}
function _generic_pow_mpz($x, $a, $n) {
  $x = $x | 0;
  $a = $a | 0;
  $n = $n | 0;
  var $1 = 0, $2 = 0, $5 = 0, $6 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _mpz_is0($n) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _element_set1165($x);
    label = 4;
    break;
   case 3:
    $5 = _optimal_pow_window_size($n) | 0;
    $6 = _build_pow_window($a, $5) | 0;
    _element_pow_wind($x, $n, $5, $6);
    _clear_pow_window($5, $6);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _default_element_pp_init($p, $in) {
  $p = $p | 0;
  $in = $in | 0;
  HEAP32[$p + 4 >> 2] = _element_build_base_table($in, ___gmpz_sizeinbase((HEAP32[$in >> 2] | 0) + 196 | 0, 2) | 0) | 0;
  return;
}
function _default_element_pp_clear($p) {
  $p = $p | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $i_011 = 0, $15 = 0, $16 = 0, $j_010 = 0, $17 = 0, $18 = 0, $exitcond = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = 1 << $4;
    $6 = $2 + 12 | 0;
    $7 = $6;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $2 + 8 | 0;
    $10 = $9;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = ($11 | 0) > 0;
    if ($12) {
      label = 2;
      break;
    } else {
      label = 6;
      break;
    }
   case 2:
    $13 = ($5 | 0) > 0;
    $i_011 = 0;
    label = 3;
    break;
   case 3:
    $15 = $8 + ($i_011 << 2) | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    if ($13) {
      $j_010 = 0;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $17 = $16 + ($j_010 << 3) | 0;
    _element_clear169($17);
    $18 = $j_010 + 1 | 0;
    $exitcond = ($18 | 0) == ($5 | 0);
    if ($exitcond) {
      label = 5;
      break;
    } else {
      $j_010 = $18;
      label = 4;
      break;
    }
   case 5:
    $19 = HEAP32[232] | 0;
    $20 = $16;
    FUNCTION_TABLE_vi[$19 & 1023]($20);
    $21 = $i_011 + 1 | 0;
    $22 = HEAP32[$10 >> 2] | 0;
    $23 = ($21 | 0) < ($22 | 0);
    if ($23) {
      $i_011 = $21;
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $24 = HEAP32[232] | 0;
    $25 = $8;
    FUNCTION_TABLE_vi[$24 & 1023]($25);
    $26 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$26 & 1023]($2);
    return;
  }
}
function _default_element_pp_pow($out, $power, $p) {
  $out = $out | 0;
  $power = $power | 0;
  $p = $p | 0;
  _element_pow_base_table($out, $power, HEAP32[$p + 4 >> 2] | 0);
  return;
}
function _default_element_set_str($e, $s, $base) {
  $e = $e | 0;
  $s = $s | 0;
  $base = $base | 0;
  _element_set0173($e);
  return 0;
}
function _field_clear($f) {
  $f = $f | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $f + 208 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) == 0;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _element_clear169($2);
    $5 = HEAP32[232] | 0;
    $6 = HEAP32[$1 >> 2] | 0;
    $7 = $6;
    FUNCTION_TABLE_vi[$5 & 1023]($7);
    label = 3;
    break;
   case 3:
    $9 = $f + 196 | 0;
    ___gmpz_clear($9);
    $10 = $f | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    FUNCTION_TABLE_vi[$11 & 1023]($f);
    return;
  }
}
function _pbc_mpz_out_raw_n($data, $n, $z) {
  $data = $data | 0;
  $n = $n | 0;
  $z = $z | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $z + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) == 0;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = ___gmpz_sizeinbase($z, 2) | 0;
    $6 = $5 + 7 | 0;
    $7 = $6 >>> 3;
    $8 = $n - $7 | 0;
    $9 = $data + $8 | 0;
    $10 = ___gmpz_export($9, 0, 1, 1, 1, 0, $z) | 0;
    _memset($data | 0, 0, $8 | 0);
    label = 4;
    break;
   case 3:
    _memset($data | 0, 0, $n | 0);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _pbc_mpz_from_hash($z, $limit, $data, $len) {
  $z = $z | 0;
  $limit = $limit | 0;
  $data = $data | 0;
  $len = $len | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i_0 = 0, $counter_0 = 0, $6 = 0, $7 = 0, $len_ = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ___gmpz_sizeinbase($limit, 2) | 0;
    $2 = $1 + 7 | 0;
    $3 = $2 >>> 3;
    $4 = STACKTOP;
    STACKTOP = STACKTOP + $3 | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $counter_0 = 0;
    $i_0 = 0;
    label = 2;
    break;
   case 2:
    $6 = $3 - $i_0 | 0;
    $7 = $6 >>> 0 > $len >>> 0;
    $len_ = $7 ? $len : $6;
    $8 = $4 + $i_0 | 0;
    _memcpy($8 | 0, $data | 0, $len_);
    $9 = $len_ + $i_0 | 0;
    if ($7) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $11 = $4 + $9 | 0;
    HEAP8[$11] = $counter_0;
    $12 = $counter_0 + 1 & 255;
    $13 = $9 + 1 | 0;
    $14 = ($13 | 0) == ($3 | 0);
    if ($14) {
      label = 4;
      break;
    } else {
      $counter_0 = $12;
      $i_0 = $13;
      label = 2;
      break;
    }
   case 4:
    ___gmpz_import($z, $3, 1, 1, 1, 0, $4);
    $16 = ___gmpz_cmp($z, $limit) | 0;
    $17 = ($16 | 0) > 0;
    if ($17) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    ___gmpz_tdiv_q_2exp($z, $z, 1);
    $18 = ___gmpz_cmp($z, $limit) | 0;
    $19 = ($18 | 0) > 0;
    if ($19) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_tonelli($x, $a) {
  $x = $x | 0;
  $a = $a | 0;
  var $e = 0, $t = 0, $t0 = 0, $ginv = 0, $e0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $i_015 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $exitcond = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $e = __stackBase__ | 0;
    $t = __stackBase__ + 16 | 0;
    $t0 = __stackBase__ + 32 | 0;
    $ginv = __stackBase__ + 48 | 0;
    $e0 = __stackBase__ + 56 | 0;
    $1 = $t | 0;
    ___gmpz_init($1);
    $2 = $e | 0;
    ___gmpz_init($2);
    $3 = $t0 | 0;
    ___gmpz_init($3);
    $4 = $ginv | 0;
    $5 = $a | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    _element_init166($4, $6);
    $7 = $e0 | 0;
    $8 = HEAP32[$5 >> 2] | 0;
    _element_init166($7, $8);
    $9 = HEAP32[$5 >> 2] | 0;
    $10 = _field_get_nqr($9) | 0;
    _element_invert171($4, $10);
    $11 = HEAP32[$5 >> 2] | 0;
    $12 = $11 + 196 | 0;
    ___gmpz_sub_ui($1, $12, 1);
    $13 = ___gmpz_scan1($1, 0) | 0;
    ___gmpz_tdiv_q_2exp($1, $1, $13);
    ___gmpz_set_ui($2, 0);
    $14 = ($13 | 0) < 2;
    if ($14) {
      label = 6;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $15 = $13 + 1 | 0;
    $i_015 = 2;
    label = 3;
    break;
   case 3:
    $17 = HEAP32[$5 >> 2] | 0;
    $18 = $17 + 196 | 0;
    ___gmpz_sub_ui($3, $18, 1);
    ___gmpz_tdiv_q_2exp($3, $3, $i_015);
    _element_pow_mpz172($7, $4, $2);
    _element_mul167($7, $7, $a);
    _element_pow_mpz172($7, $7, $3);
    $19 = _element_is1($7) | 0;
    $20 = ($19 | 0) == 0;
    if ($20) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $22 = $i_015 - 1 | 0;
    ___gmpz_setbit($2, $22);
    label = 5;
    break;
   case 5:
    $24 = $i_015 + 1 | 0;
    $exitcond = ($24 | 0) == ($15 | 0);
    if ($exitcond) {
      label = 6;
      break;
    } else {
      $i_015 = $24;
      label = 3;
      break;
    }
   case 6:
    _element_pow_mpz172($7, $4, $2);
    _element_mul167($7, $7, $a);
    ___gmpz_add_ui($1, $1, 1);
    ___gmpz_tdiv_q_2exp($1, $1, 1);
    ___gmpz_tdiv_q_2exp($2, $2, 1);
    _element_pow_mpz172($7, $7, $1);
    _element_pow_mpz172($x, $10, $2);
    _element_mul167($x, $x, $7);
    ___gmpz_clear($1);
    ___gmpz_clear($2);
    ___gmpz_clear($3);
    _element_clear169($4);
    _element_clear169($7);
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_invert171($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 120 >> 2] & 1023]($n, $a);
  return;
}
function _element_pow_mpz172($x, $a, $n) {
  $x = $x | 0;
  $a = $a | 0;
  $n = $n | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$x >> 2] | 0) + 116 >> 2] & 1023]($x, $a, $n);
  return;
}
function _element_is1($n) {
  $n = $n | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$n >> 2] | 0) + 136 >> 2] & 1023]($n) | 0;
}
function _pbc_mpz_set_str($z, $s, $base) {
  $z = $z | 0;
  $s = $s | 0;
  $base = $base | 0;
  var $1 = 0, $base_off = 0, $3 = 0, $b_0_ph = 0, $4 = 0, $5 = 0, $6 = 0, $i_027 = 0, $7 = 0, $8 = 0, $9 = 0, $i_0_be = 0, $10 = 0, $11 = 0, $12 = 0, $isdigittmp = 0, $isdigit = 0, $15 = 0, $_off = 0, $17 = 0, $19 = 0, $_off26 = 0, $21 = 0, $23 = 0, $j_0 = 0, $25 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    ___gmpz_set_ui($z, 0);
    $1 = ($base | 0) == 0;
    if ($1) {
      $b_0_ph = 10;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $base_off = $base - 2 | 0;
    $3 = $base_off >>> 0 > 34;
    if ($3) {
      $_0 = 0;
      label = 14;
      break;
    } else {
      $b_0_ph = $base;
      label = 3;
      break;
    }
   case 3:
    $4 = HEAP8[$s] | 0;
    $5 = $4 << 24 >> 24 == 0;
    if ($5) {
      $_0 = 0;
      label = 14;
      break;
    } else {
      $i_027 = 0;
      $6 = $4;
      label = 4;
      break;
    }
   case 4:
    $7 = $6 << 24 >> 24;
    $8 = _isspace($7 | 0) | 0;
    $9 = ($8 | 0) == 0;
    if ($9) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $i_0_be = $i_027 + 1 | 0;
    $10 = $s + $i_0_be | 0;
    $11 = HEAP8[$10] | 0;
    $12 = $11 << 24 >> 24 == 0;
    if ($12) {
      $_0 = $i_0_be;
      label = 14;
      break;
    } else {
      $i_027 = $i_0_be;
      $6 = $11;
      label = 4;
      break;
    }
   case 6:
    $isdigittmp = $7 - 48 | 0;
    $isdigit = $isdigittmp >>> 0 < 10;
    if ($isdigit) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $15 = $7 - 48 | 0;
    $j_0 = $15;
    label = 12;
    break;
   case 8:
    $_off = $6 - 65 & 255;
    $17 = ($_off & 255) < 26;
    if ($17) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $19 = $7 - 65 | 0;
    $j_0 = $19;
    label = 12;
    break;
   case 10:
    $_off26 = $6 - 97 & 255;
    $21 = ($_off26 & 255) < 26;
    if ($21) {
      label = 11;
      break;
    } else {
      $_0 = $i_027;
      label = 14;
      break;
    }
   case 11:
    $23 = $7 - 97 | 0;
    $j_0 = $23;
    label = 12;
    break;
   case 12:
    $25 = ($j_0 | 0) < ($b_0_ph | 0);
    if ($25) {
      label = 13;
      break;
    } else {
      $_0 = $i_027;
      label = 14;
      break;
    }
   case 13:
    ___gmpz_mul_ui($z, $z, $b_0_ph);
    ___gmpz_add_ui($z, $z, $j_0);
    label = 5;
    break;
   case 14:
    return $_0 | 0;
  }
  return 0;
}
function _element_multi_double($n, $a, $m) {
  $n = $n | 0;
  $a = $a | 0;
  $m = $m | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i_016 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $exitcond = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP32[230] | 0;
    $2 = $m << 2;
    $3 = FUNCTION_TABLE_ii[$1 & 1023]($2) | 0;
    $4 = $3;
    $5 = HEAP32[230] | 0;
    $6 = FUNCTION_TABLE_ii[$5 & 1023]($2) | 0;
    $7 = $6;
    $8 = ($m | 0) > 0;
    if ($8) {
      $i_016 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $9 = $n + ($i_016 << 3) | 0;
    $10 = $4 + ($i_016 << 2) | 0;
    HEAP32[$10 >> 2] = $9;
    $11 = $a + ($i_016 << 3) | 0;
    $12 = $7 + ($i_016 << 2) | 0;
    HEAP32[$12 >> 2] = $11;
    $13 = $i_016 + 1 | 0;
    $exitcond = ($13 | 0) == ($m | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_016 = $13;
      label = 2;
      break;
    }
   case 3:
    $14 = $n | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $15 + 100 | 0;
    $17 = HEAP32[$16 >> 2] | 0;
    FUNCTION_TABLE_viii[$17 & 1023]($4, $7, $m);
    $18 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$18 & 1023]($3);
    $19 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$19 & 1023]($6);
    return;
  }
}
function _element_multi_add($n, $a, $b, $m) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  $m = $m | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $i_022 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $exitcond = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $m << 2;
    $2 = HEAP32[230] | 0;
    $3 = FUNCTION_TABLE_ii[$2 & 1023]($1) | 0;
    $4 = $3;
    $5 = HEAP32[230] | 0;
    $6 = FUNCTION_TABLE_ii[$5 & 1023]($1) | 0;
    $7 = $6;
    $8 = HEAP32[230] | 0;
    $9 = FUNCTION_TABLE_ii[$8 & 1023]($1) | 0;
    $10 = $9;
    $11 = ($m | 0) > 0;
    if ($11) {
      $i_022 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $12 = $n + ($i_022 << 3) | 0;
    $13 = $4 + ($i_022 << 2) | 0;
    HEAP32[$13 >> 2] = $12;
    $14 = $a + ($i_022 << 3) | 0;
    $15 = $7 + ($i_022 << 2) | 0;
    HEAP32[$15 >> 2] = $14;
    $16 = $b + ($i_022 << 3) | 0;
    $17 = $10 + ($i_022 << 2) | 0;
    HEAP32[$17 >> 2] = $16;
    $18 = $i_022 + 1 | 0;
    $exitcond = ($18 | 0) == ($m | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_022 = $18;
      label = 2;
      break;
    }
   case 3:
    $19 = $n | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $20 + 104 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    FUNCTION_TABLE_viiii[$22 & 1023]($4, $7, $10, $m);
    $23 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$23 & 1023]($3);
    $24 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$24 & 1023]($6);
    $25 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$25 & 1023]($9);
    return;
  }
}
function _element_set0173($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 24 >> 2] & 1023]($e);
  return;
}
function _element_pow_base_table($x, $power, $base_table) {
  $x = $x | 0;
  $power = $power | 0;
  $base_table = $base_table | 0;
  var $result = 0, $n = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $row_020 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $word_019 = 0, $s_018 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $exitcond = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $result = __stackBase__ | 0;
    $n = __stackBase__ + 8 | 0;
    $1 = $n | 0;
    ___gmpz_init_set($1, $power);
    $2 = $n + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($3 | 0) == 0;
    if ($4) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _element_set1165($x);
    label = 14;
    break;
   case 3:
    $7 = $x | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $8 + 196 | 0;
    $10 = ___gmpz_cmp($1, $9) | 0;
    $11 = ($10 | 0) > 0;
    if ($11) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    ___gmpz_mod($1, $1, $9);
    label = 5;
    break;
   case 5:
    $14 = $result | 0;
    $15 = HEAP32[$7 >> 2] | 0;
    _element_init166($14, $15);
    _element_set1165($14);
    $16 = ___gmpz_sizeinbase($1, 2) | 0;
    $17 = $base_table | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = ($16 >>> 0) / ($18 >>> 0) >>> 0;
    $20 = $19 + 1 | 0;
    $21 = ($20 | 0) > 0;
    if ($21) {
      label = 6;
      break;
    } else {
      label = 13;
      break;
    }
   case 6:
    $22 = $base_table + 12 | 0;
    $23 = ($16 >>> 0) / ($18 >>> 0) >>> 0;
    $24 = $23 + 1 | 0;
    $row_020 = 0;
    label = 7;
    break;
   case 7:
    $25 = HEAP32[$17 >> 2] | 0;
    $26 = ($25 | 0) > 0;
    if ($26) {
      label = 8;
      break;
    } else {
      label = 12;
      break;
    }
   case 8:
    $27 = HEAP32[$17 >> 2] | 0;
    $s_018 = 0;
    $word_019 = 0;
    $29 = $25;
    label = 9;
    break;
   case 9:
    $30 = Math_imul($29, $row_020);
    $31 = $30 + $s_018 | 0;
    $32 = ___gmpz_tstbit($1, $31) | 0;
    $33 = $32 << $s_018;
    $34 = $33 | $word_019;
    $35 = $s_018 + 1 | 0;
    $36 = ($35 | 0) < ($27 | 0);
    if ($36) {
      $s_018 = $35;
      $word_019 = $34;
      $29 = $27;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $37 = ($34 | 0) > 0;
    if ($37) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    $39 = HEAP32[$22 >> 2] | 0;
    $40 = $39 + ($row_020 << 2) | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    $42 = $41 + ($34 << 3) | 0;
    _element_mul167($14, $14, $42);
    label = 12;
    break;
   case 12:
    $43 = $row_020 + 1 | 0;
    $exitcond = ($43 | 0) == ($24 | 0);
    if ($exitcond) {
      label = 13;
      break;
    } else {
      $row_020 = $43;
      label = 7;
      break;
    }
   case 13:
    _element_set168($x, $14);
    _element_clear169($14);
    ___gmpz_clear($1);
    label = 14;
    break;
   case 14:
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_build_base_table($a, $bits) {
  $a = $a | 0;
  $bits = $bits | 0;
  var $multiplier = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $i_02 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $j_01 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $exitcond = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $multiplier = __stackBase__ | 0;
    $1 = HEAP32[230] | 0;
    $2 = FUNCTION_TABLE_ii[$1 & 1023](16) | 0;
    $3 = ($bits | 0) / 5 & -1;
    $4 = $3 + 1 | 0;
    $5 = $2 + 8 | 0;
    $6 = $5;
    HEAP32[$6 >> 2] = $4;
    $7 = $2;
    HEAP32[$7 >> 2] = 5;
    $8 = $2 + 4 | 0;
    $9 = $8;
    HEAP32[$9 >> 2] = $bits;
    $10 = HEAP32[230] | 0;
    $11 = HEAP32[$6 >> 2] | 0;
    $12 = $11 << 2;
    $13 = FUNCTION_TABLE_ii[$10 & 1023]($12) | 0;
    $14 = $13;
    $15 = $2 + 12 | 0;
    $16 = $15;
    HEAP32[$16 >> 2] = $14;
    $17 = $multiplier | 0;
    $18 = $a | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    _element_init166($17, $19);
    _element_set168($17, $a);
    $20 = HEAP32[$6 >> 2] | 0;
    $21 = ($20 | 0) > 0;
    if ($21) {
      $i_02 = 0;
      label = 2;
      break;
    } else {
      label = 5;
      break;
    }
   case 2:
    $22 = HEAP32[230] | 0;
    $23 = FUNCTION_TABLE_ii[$22 & 1023](256) | 0;
    $24 = $23;
    $25 = $23;
    $26 = HEAP32[$18 >> 2] | 0;
    _element_init166($25, $26);
    _element_set1165($25);
    $j_01 = 1;
    label = 3;
    break;
   case 3:
    $28 = $24 + ($j_01 << 3) | 0;
    $29 = HEAP32[$18 >> 2] | 0;
    _element_init166($28, $29);
    $30 = $j_01 - 1 | 0;
    $31 = $24 + ($30 << 3) | 0;
    _element_mul167($28, $17, $31);
    $32 = $j_01 + 1 | 0;
    $exitcond = ($32 | 0) == 32;
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $j_01 = $32;
      label = 3;
      break;
    }
   case 4:
    $34 = $23 + 248 | 0;
    $35 = $34;
    _element_mul167($17, $17, $35);
    $36 = HEAP32[$16 >> 2] | 0;
    $37 = $36 + ($i_02 << 2) | 0;
    HEAP32[$37 >> 2] = $24;
    $38 = $i_02 + 1 | 0;
    $39 = HEAP32[$6 >> 2] | 0;
    $40 = ($38 | 0) < ($39 | 0);
    if ($40) {
      $i_02 = $38;
      label = 2;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _element_clear169($17);
    STACKTOP = __stackBase__;
    return $2 | 0;
  }
  return 0;
}
function _optimal_pow_window_size($n) {
  $n = $n | 0;
  var $1 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ___gmpz_sizeinbase($n, 2) | 0;
    $2 = ($1 | 0) > 9065;
    if ($2) {
      $15 = 8;
      label = 7;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $4 = ($1 | 0) > 3529;
    if ($4) {
      $15 = 7;
      label = 7;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $6 = ($1 | 0) > 1324;
    if ($6) {
      $15 = 6;
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $8 = ($1 | 0) > 474;
    if ($8) {
      $15 = 5;
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $10 = ($1 | 0) > 157;
    if ($10) {
      $15 = 4;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $12 = ($1 | 0) > 47;
    $13 = $12 ? 3 : 2;
    $15 = $13;
    label = 7;
    break;
   case 7:
    return $15 | 0;
  }
  return 0;
}
function _build_pow_window($a, $k) {
  $a = $a | 0;
  $k = $k | 0;
  var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $s_016 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $exitcond = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($k | 0) < 1;
    if ($1) {
      $_0 = 0;
      label = 4;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = 1 << $k;
    $4 = HEAP32[230] | 0;
    $5 = $3 << 3;
    $6 = FUNCTION_TABLE_ii[$4 & 1023]($5) | 0;
    $7 = $6;
    $8 = $6;
    $9 = $a | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    _element_init166($8, $10);
    _element_set1165($8);
    $11 = ($3 | 0) > 1;
    if ($11) {
      $s_016 = 1;
      label = 3;
      break;
    } else {
      $_0 = $7;
      label = 4;
      break;
    }
   case 3:
    $12 = $7 + ($s_016 << 3) | 0;
    $13 = HEAP32[$9 >> 2] | 0;
    _element_init166($12, $13);
    $14 = $s_016 - 1 | 0;
    $15 = $7 + ($14 << 3) | 0;
    _element_mul167($12, $15, $a);
    $16 = $s_016 + 1 | 0;
    $exitcond = ($16 | 0) == ($3 | 0);
    if ($exitcond) {
      $_0 = $7;
      label = 4;
      break;
    } else {
      $s_016 = $16;
      label = 3;
      break;
    }
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function _element_pow_wind($x, $n, $k, $a_lookup) {
  $x = $x | 0;
  $n = $n | 0;
  $k = $k | 0;
  $a_lookup = $a_lookup | 0;
  var $result = 0, $1 = 0, $2 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s_0_in_ph = 0, $inword_0_ph = 0, $word_0_ph = 0, $wbits_0_ph = 0, $10 = 0, $_not = 0, $s_0_in = 0, $s_0 = 0, $12 = 0, $14 = 0, $15 = 0, $or_cond16 = 0, $18 = 0, $19 = 0, $20 = 0, $inword_1 = 0, $word_1 = 0, $wbits_1 = 0, $22 = 0, $23 = 0, $or_cond17 = 0, $25 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $result = __stackBase__ | 0;
    $1 = $n + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) == 0;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _element_set1165($x);
    label = 12;
    break;
   case 3:
    $6 = $result | 0;
    $7 = $x | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    _element_init166($6, $8);
    _element_set1165($6);
    $9 = ___gmpz_sizeinbase($n, 2) | 0;
    $wbits_0_ph = 0;
    $word_0_ph = 0;
    $inword_0_ph = 0;
    $s_0_in_ph = $9;
    label = 4;
    break;
   case 4:
    $10 = ($inword_0_ph | 0) != 0;
    $_not = $10 ^ 1;
    $s_0_in = $s_0_in_ph;
    label = 5;
    break;
   case 5:
    $s_0 = $s_0_in - 1 | 0;
    $12 = ($s_0 | 0) > -1;
    if ($12) {
      label = 6;
      break;
    } else {
      label = 11;
      break;
    }
   case 6:
    _element_square($6, $6);
    $14 = ___gmpz_tstbit($n, $s_0) | 0;
    $15 = ($14 | 0) == 0;
    $or_cond16 = $15 & $_not;
    if ($or_cond16) {
      $s_0_in = $s_0;
      label = 5;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    if ($10) {
      label = 8;
      break;
    } else {
      $wbits_1 = 1;
      $word_1 = 1;
      $inword_1 = 1;
      label = 9;
      break;
    }
   case 8:
    $18 = $word_0_ph << 1;
    $19 = $14 + $18 | 0;
    $20 = $wbits_0_ph + 1 | 0;
    $wbits_1 = $20;
    $word_1 = $19;
    $inword_1 = $inword_0_ph;
    label = 9;
    break;
   case 9:
    $22 = ($wbits_1 | 0) == ($k | 0);
    $23 = ($s_0 | 0) == 0;
    $or_cond17 = $22 | $23;
    if ($or_cond17) {
      label = 10;
      break;
    } else {
      $wbits_0_ph = $wbits_1;
      $word_0_ph = $word_1;
      $inword_0_ph = $inword_1;
      $s_0_in_ph = $s_0;
      label = 4;
      break;
    }
   case 10:
    $25 = $a_lookup + ($word_1 << 3) | 0;
    _element_mul167($6, $6, $25);
    $wbits_0_ph = $wbits_1;
    $word_0_ph = $word_1;
    $inword_0_ph = 0;
    $s_0_in_ph = $s_0;
    label = 4;
    break;
   case 11:
    _element_set168($x, $6);
    _element_clear169($6);
    label = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
  }
}
function _clear_pow_window($k, $lookup) {
  $k = $k | 0;
  $lookup = $lookup | 0;
  var $1 = 0, $2 = 0, $s_05 = 0, $3 = 0, $4 = 0, $exitcond = 0, $5 = 0, $6 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = 1 << $k;
    $2 = ($1 | 0) > 0;
    if ($2) {
      $s_05 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $3 = $lookup + ($s_05 << 3) | 0;
    _element_clear169($3);
    $4 = $s_05 + 1 | 0;
    $exitcond = ($4 | 0) == ($1 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $s_05 = $4;
      label = 2;
      break;
    }
   case 3:
    $5 = HEAP32[232] | 0;
    $6 = $lookup;
    FUNCTION_TABLE_vi[$5 & 1023]($6);
    return;
  }
}
function _element_square($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 112 >> 2] & 1023]($n, $a);
  return;
}
function _element_item($e, $i) {
  $e = $e | 0;
  $i = $i | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$e >> 2] | 0) + 64 >> 2] & 1023]($e, $i) | 0;
}
function _element_cmp($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$a >> 2] | 0) + 148 >> 2] & 1023]($a, $b) | 0;
}
function _element_set_mpz($e, $z) {
  $e = $e | 0;
  $z = $z | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 12 >> 2] & 1023]($e, $z);
  return;
}
function _element_add174($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 40 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_neg($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 124 >> 2] & 1023]($n, $a);
  return;
}
function _element_length_in_bytes175($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 164 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) < 0;
    if ($5) {
      label = 2;
      break;
    } else {
      $_0 = $4;
      label = 3;
      break;
    }
   case 2:
    $7 = $2 + 160 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = FUNCTION_TABLE_ii[$8 & 1023]($e) | 0;
    $_0 = $9;
    label = 3;
    break;
   case 3:
    return $_0 | 0;
  }
  return 0;
}
function _element_to_bytes176($data, $e) {
  $data = $data | 0;
  $e = $e | 0;
  FUNCTION_TABLE_iii[HEAP32[(HEAP32[$e >> 2] | 0) + 152 >> 2] & 1023]($data, $e);
  return;
}
function _element_set_si177($e, $i) {
  $e = $e | 0;
  $i = $i | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 76 >> 2] & 1023]($e, $i);
  return;
}
function _field_init_naive_fp($f, $prime) {
  $f = $f | 0;
  $prime = $prime | 0;
  _field_init($f);
  HEAP32[$f + 4 >> 2] = 620;
  HEAP32[$f + 8 >> 2] = 288;
  HEAP32[$f + 76 >> 2] = 600;
  HEAP32[$f + 12 >> 2] = 344;
  HEAP32[$f + 36 >> 2] = 236;
  HEAP32[$f + 168 >> 2] = 434;
  HEAP32[$f + 32 >> 2] = 88;
  HEAP32[$f + 144 >> 2] = ((HEAP32[$prime + 4 >> 2] | 0) != 0 & 1 & HEAP32[HEAP32[$prime + 8 >> 2] >> 2] | 0) != 0 ? 580 : 528;
  HEAP32[$f + 40 >> 2] = 80;
  HEAP32[$f + 44 >> 2] = 614;
  HEAP32[$f + 20 >> 2] = 218;
  HEAP32[$f + 112 >> 2] = 638;
  HEAP32[$f + 96 >> 2] = 382;
  HEAP32[$f + 108 >> 2] = 186;
  HEAP32[$f + 48 >> 2] = 492;
  HEAP32[$f + 84 >> 2] = 740;
  HEAP32[$f + 88 >> 2] = 378;
  HEAP32[$f + 116 >> 2] = 180;
  HEAP32[$f + 124 >> 2] = 342;
  HEAP32[$f + 148 >> 2] = 764;
  HEAP32[$f + 120 >> 2] = 498;
  HEAP32[$f + 128 >> 2] = 130;
  HEAP32[$f + 132 >> 2] = 776;
  HEAP32[$f + 136 >> 2] = 366;
  HEAP32[$f + 140 >> 2] = 368;
  HEAP32[$f + 24 >> 2] = 212;
  HEAP32[$f + 28 >> 2] = 214;
  HEAP32[$f + 52 >> 2] = 484;
  HEAP32[$f + 56 >> 2] = 8;
  HEAP32[$f >> 2] = 510;
  HEAP32[$f + 152 >> 2] = 428;
  HEAP32[$f + 156 >> 2] = 796;
  HEAP32[$f + 172 >> 2] = 282;
  HEAP32[$f + 176 >> 2] = 508;
  ___gmpz_set($f + 196 | 0, $prime);
  HEAP32[$f + 212 >> 2] = 0;
  HEAP32[$f + 164 >> 2] = ((___gmpz_sizeinbase($prime, 2) | 0) + 7 | 0) >>> 3;
  return;
}
function _zp_init($e) {
  $e = $e | 0;
  var $2 = 0;
  $2 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](12) | 0;
  HEAP32[$e + 4 >> 2] = $2;
  ___gmpz_init($2);
  return;
}
function _zp_clear($e) {
  $e = $e | 0;
  var $1 = 0;
  $1 = $e + 4 | 0;
  ___gmpz_clear(HEAP32[$1 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$1 >> 2] | 0);
  return;
}
function _zp_set_si($e, $op) {
  $e = $e | 0;
  $op = $op | 0;
  var $1 = 0, $5 = 0;
  $1 = $e + 4 | 0;
  ___gmpz_set_si(HEAP32[$1 >> 2] | 0, $op);
  $5 = HEAP32[$1 >> 2] | 0;
  ___gmpz_mod($5, $5, (HEAP32[$e >> 2] | 0) + 196 | 0);
  return;
}
function _zp_set_mpz($e, $z) {
  $e = $e | 0;
  $z = $z | 0;
  var $1 = 0, $5 = 0;
  $1 = $e + 4 | 0;
  ___gmpz_set(HEAP32[$1 >> 2] | 0, $z);
  $5 = HEAP32[$1 >> 2] | 0;
  ___gmpz_mod($5, $5, (HEAP32[$e >> 2] | 0) + 196 | 0);
  return;
}
function _zp_out_str($stream, $base, $e) {
  $stream = $stream | 0;
  $base = $base | 0;
  $e = $e | 0;
  return ___gmpz_out_str($stream, $base, HEAP32[$e + 4 >> 2] | 0) | 0;
}
function _zp_snprint($s, $n, $e) {
  $s = $s | 0;
  $n = $n | 0;
  $e = $e | 0;
  var $3 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $3 = ___gmp_snprintf($s, $n, 7792, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = HEAP32[$e + 4 >> 2] | 0, tempInt) | 0) | 0;
  STACKTOP = __stackBase__;
  return $3 | 0;
}
function _zp_set_str($e, $s, $base) {
  $e = $e | 0;
  $s = $s | 0;
  $base = $base | 0;
  var $1 = 0, $4 = 0, $6 = 0;
  $1 = $e + 4 | 0;
  $4 = _pbc_mpz_set_str(HEAP32[$1 >> 2] | 0, $s, $base) | 0;
  $6 = HEAP32[$1 >> 2] | 0;
  ___gmpz_mod($6, $6, (HEAP32[$e >> 2] | 0) + 196 | 0);
  return $4 | 0;
}
function _zp_sgn_odd($a) {
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = _mpz_is07($3) | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 2;
      break;
    } else {
      $20 = 0;
      label = 3;
      break;
    }
   case 2:
    $7 = $2 + 4 | 0;
    $8 = $7;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ($9 | 0) != 0;
    $11 = $10 & 1;
    $12 = $2 + 8 | 0;
    $13 = $12;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $11 & $15;
    $17 = ($16 | 0) != 0;
    $18 = $17 ? 1 : -1;
    $20 = $18;
    label = 3;
    break;
   case 3:
    return $20 | 0;
  }
  return 0;
}
function _zp_sgn_even($a) {
  $a = $a | 0;
  var $z = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $res_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z = __stackBase__ | 0;
    $1 = $z | 0;
    ___gmpz_init($1);
    $2 = $a + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $3;
    $5 = _mpz_is07($4) | 0;
    $6 = ($5 | 0) == 0;
    if ($6) {
      label = 2;
      break;
    } else {
      $res_0 = 0;
      label = 3;
      break;
    }
   case 2:
    ___gmpz_add($1, $4, $4);
    $8 = $a | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9 + 196 | 0;
    $11 = ___gmpz_cmp($1, $10) | 0;
    $res_0 = $11;
    label = 3;
    break;
   case 3:
    ___gmpz_clear($1);
    STACKTOP = __stackBase__;
    return $res_0 | 0;
  }
  return 0;
}
function _zp_add($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = $a + 4 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $5;
    $7 = $b + 4 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $8;
    ___gmpz_add($3, $6, $9);
    $10 = HEAP32[$1 >> 2] | 0;
    $11 = $10;
    $12 = $n | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13 + 196 | 0;
    $15 = ___gmpz_cmp($11, $14) | 0;
    $16 = ($15 | 0) > -1;
    if ($16) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    ___gmpz_sub($11, $11, $14);
    label = 3;
    break;
   case 3:
    return;
  }
}
function _zp_sub($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = $a + 4 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $5;
    $7 = $b + 4 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $8;
    ___gmpz_sub($3, $6, $9);
    $10 = HEAP32[$1 >> 2] | 0;
    $11 = $10 + 4 | 0;
    $12 = $11;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ($13 | 0) < 0;
    if ($14) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $16 = $10;
    $17 = $n | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18 + 196 | 0;
    ___gmpz_add($16, $16, $19);
    label = 3;
    break;
   case 3:
    return;
  }
}
function _zp_set($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  ___gmpz_set(HEAP32[$n + 4 >> 2] | 0, HEAP32[$a + 4 >> 2] | 0);
  return;
}
function _zp_square($c, $a) {
  $c = $c | 0;
  $a = $a | 0;
  ___gmpz_powm_ui(HEAP32[$c + 4 >> 2] | 0, HEAP32[$a + 4 >> 2] | 0, 2, (HEAP32[$c >> 2] | 0) + 196 | 0);
  return;
}
function _zp_double($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = $a + 4 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $5;
    ___gmpz_mul_2exp($3, $6, 1);
    $7 = HEAP32[$1 >> 2] | 0;
    $8 = $7;
    $9 = $n | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $10 + 196 | 0;
    $12 = ___gmpz_cmp($8, $11) | 0;
    $13 = ($12 | 0) > -1;
    if ($13) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    ___gmpz_sub($8, $8, $11);
    label = 3;
    break;
   case 3:
    return;
  }
}
function _zp_field_clear($f) {
  $f = $f | 0;
  return;
}
function _mpz_is07($z) {
  $z = $z | 0;
  return (HEAP32[$z + 4 >> 2] | 0) == 0 & 1 | 0;
}
function _zp_halve($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = $2 + 4 | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) != 0;
    $8 = $7 & 1;
    $9 = $2 + 8 | 0;
    $10 = $9;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $8 & $12;
    $14 = ($13 | 0) == 0;
    $15 = $n + 4 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $16;
    if ($14) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $19 = $a | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $20 + 196 | 0;
    ___gmpz_add($17, $3, $21);
    $22 = HEAP32[$15 >> 2] | 0;
    $23 = $22;
    ___gmpz_tdiv_q_2exp($23, $23, 1);
    label = 4;
    break;
   case 3:
    ___gmpz_tdiv_q_2exp($17, $3, 1);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _zp_mul($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $11 = 0;
  $1 = $n + 4 | 0;
  ___gmpz_mul(HEAP32[$1 >> 2] | 0, HEAP32[$a + 4 >> 2] | 0, HEAP32[$b + 4 >> 2] | 0);
  $11 = HEAP32[$1 >> 2] | 0;
  ___gmpz_mod($11, $11, (HEAP32[$n >> 2] | 0) + 196 | 0);
  return;
}
function _zp_mul_mpz($n, $a, $z) {
  $n = $n | 0;
  $a = $a | 0;
  $z = $z | 0;
  var $1 = 0, $8 = 0;
  $1 = $n + 4 | 0;
  ___gmpz_mul(HEAP32[$1 >> 2] | 0, HEAP32[$a + 4 >> 2] | 0, $z);
  $8 = HEAP32[$1 >> 2] | 0;
  ___gmpz_mod($8, $8, (HEAP32[$n >> 2] | 0) + 196 | 0);
  return;
}
function _zp_mul_si($n, $a, $z) {
  $n = $n | 0;
  $a = $a | 0;
  $z = $z | 0;
  var $1 = 0, $8 = 0;
  $1 = $n + 4 | 0;
  ___gmpz_mul_si(HEAP32[$1 >> 2] | 0, HEAP32[$a + 4 >> 2] | 0, $z);
  $8 = HEAP32[$1 >> 2] | 0;
  ___gmpz_mod($8, $8, (HEAP32[$n >> 2] | 0) + 196 | 0);
  return;
}
function _zp_pow_mpz($n, $a, $z) {
  $n = $n | 0;
  $a = $a | 0;
  $z = $z | 0;
  ___gmpz_powm(HEAP32[$n + 4 >> 2] | 0, HEAP32[$a + 4 >> 2] | 0, $z, (HEAP32[$n >> 2] | 0) + 196 | 0);
  return;
}
function _zp_neg($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $11 = 0, $12 = 0, $13 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = _mpz_is07($3) | 0;
    $5 = ($4 | 0) == 0;
    $6 = $n + 4 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $7;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    ___gmpz_set_ui($8, 0);
    label = 4;
    break;
   case 3:
    $11 = $n | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 + 196 | 0;
    ___gmpz_sub($8, $13, $3);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _zp_cmp($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  return ___gmpz_cmp(HEAP32[$a + 4 >> 2] | 0, HEAP32[$b + 4 >> 2] | 0) | 0;
}
function _zp_invert($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  ___gmpz_invert(HEAP32[$n + 4 >> 2] | 0, HEAP32[$a + 4 >> 2] | 0, (HEAP32[$n >> 2] | 0) + 196 | 0);
  return;
}
function _zp_random($n) {
  $n = $n | 0;
  _pbc_mpz_random(HEAP32[$n + 4 >> 2] | 0, (HEAP32[$n >> 2] | 0) + 196 | 0);
  return;
}
function _zp_from_hash($n, $data, $len) {
  $n = $n | 0;
  $data = $data | 0;
  $len = $len | 0;
  _pbc_mpz_from_hash(HEAP32[$n + 4 >> 2] | 0, (HEAP32[$n >> 2] | 0) + 196 | 0, $data, $len);
  return;
}
function _zp_is1($n) {
  $n = $n | 0;
  return (___gmpz_cmp_ui(HEAP32[$n + 4 >> 2] | 0, 1) | 0) == 0 & 1 | 0;
}
function _zp_is0($n) {
  $n = $n | 0;
  return _mpz_is07(HEAP32[$n + 4 >> 2] | 0) | 0;
}
function _zp_set0($e) {
  $e = $e | 0;
  ___gmpz_set_si(HEAP32[$e + 4 >> 2] | 0, 0);
  return;
}
function _zp_set1($e) {
  $e = $e | 0;
  ___gmpz_set_si(HEAP32[$e + 4 >> 2] | 0, 1);
  return;
}
function _zp_is_sqr($a) {
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = _mpz_is07($3) | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 2;
      break;
    } else {
      $_0 = 1;
      label = 3;
      break;
    }
   case 2:
    $7 = $a | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $8 + 196 | 0;
    $10 = ___gmpz_jacobi($3, $9) | 0;
    $11 = ($10 | 0) == 1;
    $12 = $11 & 1;
    $_0 = $12;
    label = 3;
    break;
   case 3:
    return $_0 | 0;
  }
  return 0;
}
function _zp_to_bytes($data, $e) {
  $data = $data | 0;
  $e = $e | 0;
  var $4 = 0;
  $4 = HEAP32[(HEAP32[$e >> 2] | 0) + 164 >> 2] | 0;
  _pbc_mpz_out_raw_n($data, $4, HEAP32[$e + 4 >> 2] | 0);
  return $4 | 0;
}
function _zp_from_bytes($e, $data) {
  $e = $e | 0;
  $data = $data | 0;
  var $7 = 0;
  $7 = HEAP32[(HEAP32[$e >> 2] | 0) + 164 >> 2] | 0;
  ___gmpz_import(HEAP32[$e + 4 >> 2] | 0, $7, 1, 1, 1, 0, $data);
  return $7 | 0;
}
function _zp_to_mpz($z, $a) {
  $z = $z | 0;
  $a = $a | 0;
  ___gmpz_set($z, HEAP32[$a + 4 >> 2] | 0);
  return;
}
function _zp_out_info($out, $f) {
  $out = $out | 0;
  $f = $f | 0;
  var __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  _element_fprintf($out, 5616, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $f + 196 | 0, tempInt) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _field_init_fp($f, $modulus) {
  $f = $f | 0;
  $modulus = $modulus | 0;
  var $1 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ___gmpz_fits_ulong_p($modulus) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _field_init_naive_fp($f, $modulus);
    label = 6;
    break;
   case 3:
    $5 = $modulus + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) != 0;
    $8 = $7 & 1;
    $9 = $modulus + 8 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $8 & $11;
    $13 = ($12 | 0) == 0;
    if ($13) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $15 = HEAP32[246] | 0;
    FUNCTION_TABLE_vii[$15 & 1023]($f, $modulus);
    label = 6;
    break;
   case 5:
    _field_init_faster_fp($f, $modulus);
    label = 6;
    break;
   case 6:
    return;
  }
}
function _field_init_faster_fp($f, $prime) {
  $f = $f | 0;
  $prime = $prime | 0;
  var $43 = 0, $45 = 0, $46 = 0, $47 = 0, $51 = 0;
  _field_init($f);
  HEAP32[$f + 4 >> 2] = 436;
  HEAP32[$f + 8 >> 2] = 90;
  HEAP32[$f + 76 >> 2] = 608;
  HEAP32[$f + 12 >> 2] = 576;
  HEAP32[$f + 36 >> 2] = 442;
  HEAP32[$f + 40 >> 2] = 280;
  HEAP32[$f + 44 >> 2] = 804;
  HEAP32[$f + 20 >> 2] = 786;
  HEAP32[$f + 48 >> 2] = 736;
  HEAP32[$f + 88 >> 2] = 644;
  HEAP32[$f + 112 >> 2] = 656;
  HEAP32[$f + 96 >> 2] = 18;
  HEAP32[$f + 108 >> 2] = 272;
  HEAP32[$f + 116 >> 2] = 364;
  HEAP32[$f + 124 >> 2] = 168;
  HEAP32[$f + 148 >> 2] = 816;
  HEAP32[$f + 144 >> 2] = ((HEAP32[$prime + 4 >> 2] | 0) != 0 & 1 & HEAP32[HEAP32[$prime + 8 >> 2] >> 2] | 0) != 0 ? 504 : 204;
  HEAP32[$f + 120 >> 2] = 44;
  HEAP32[$f + 128 >> 2] = 242;
  HEAP32[$f + 132 >> 2] = 450;
  HEAP32[$f + 136 >> 2] = 830;
  HEAP32[$f + 140 >> 2] = 824;
  HEAP32[$f + 24 >> 2] = 82;
  HEAP32[$f + 28 >> 2] = 102;
  HEAP32[$f + 52 >> 2] = 230;
  HEAP32[$f + 56 >> 2] = 8;
  HEAP32[$f >> 2] = 322;
  HEAP32[$f + 152 >> 2] = 708;
  HEAP32[$f + 156 >> 2] = 400;
  HEAP32[$f + 172 >> 2] = 536;
  HEAP32[$f + 176 >> 2] = 198;
  $43 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](12) | 0;
  HEAP32[$f + 212 >> 2] = $43;
  $45 = ___gmpz_size($prime) | 0;
  $46 = $43;
  HEAP32[$46 >> 2] = $45;
  $47 = $45 << 2;
  HEAP32[$43 + 4 >> 2] = $47;
  $51 = FUNCTION_TABLE_ii[HEAP32[230] & 1023]($47) | 0;
  HEAP32[$43 + 8 >> 2] = $51;
  ___gmpz_export($51, $46, -1, 4, 0, 0, $prime);
  ___gmpz_set($f + 196 | 0, $prime);
  HEAP32[$f + 164 >> 2] = ((___gmpz_sizeinbase($prime, 2) | 0) + 7 | 0) >>> 3;
  return;
}
function _fp_init15($e) {
  $e = $e | 0;
  var $4 = 0, $6 = 0;
  $4 = HEAP32[(HEAP32[$e >> 2] | 0) + 212 >> 2] | 0;
  $6 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](8) | 0;
  HEAP32[$e + 4 >> 2] = $6;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = FUNCTION_TABLE_ii[HEAP32[230] & 1023](HEAP32[$4 + 4 >> 2] | 0) | 0;
  return;
}
function _fp_clear16($e) {
  $e = $e | 0;
  var $1 = 0;
  $1 = $e + 4 | 0;
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$1 >> 2] | 0);
  return;
}
function _fp_set_si17($e, $op) {
  $e = $e | 0;
  $op = $op | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($op | 0) == 0;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $5 = $2;
    HEAP32[$5 >> 2] = 0;
    label = 7;
    break;
   case 3:
    $7 = $e | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $8 + 212 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $10;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($op | 0) < 0;
    $14 = $2 + 4 | 0;
    $15 = $14;
    $16 = HEAP32[$15 >> 2] | 0;
    if ($13) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $18 = $10 + 8 | 0;
    $19 = $18;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = -$op | 0;
    $22 = ___gmpn_sub_1($16, $20, $12, $21) | 0;
    label = 6;
    break;
   case 5:
    HEAP32[$16 >> 2] = $op;
    $24 = HEAP32[$15 >> 2] | 0;
    $25 = $24 + 4 | 0;
    $26 = $25;
    $27 = $12 << 2;
    $28 = $27 - 4 | 0;
    _memset($26 | 0, 0, $28 | 0);
    label = 6;
    break;
   case 6:
    $30 = $2;
    HEAP32[$30 >> 2] = 2;
    label = 7;
    break;
   case 7:
    return;
  }
}
function _fp_set_mpz18($e, $z) {
  $e = $e | 0;
  $z = $z | 0;
  var $tmp = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $tmp = __stackBase__ | 0;
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $z + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $7 = $2;
    HEAP32[$7 >> 2] = 0;
    label = 4;
    break;
   case 3:
    $9 = $tmp | 0;
    ___gmpz_init($9);
    $10 = $e | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $11 + 196 | 0;
    ___gmpz_mod($9, $z, $12);
    _from_mpz45($e, $9);
    ___gmpz_clear($9);
    $13 = $2;
    HEAP32[$13 >> 2] = 2;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return;
  }
}
function _fp_out_str19($stream, $base, $e) {
  $stream = $stream | 0;
  $base = $base | 0;
  $e = $e | 0;
  var $1 = 0, $3 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $1 = __stackBase__ | 0;
  ___gmpz_init($1);
  _fp_to_mpz44($1, $e);
  $3 = ___gmpz_out_str($stream, $base, $1) | 0;
  ___gmpz_clear($1);
  STACKTOP = __stackBase__;
  return $3 | 0;
}
function _fp_add20($c, $a, $b) {
  $c = $c | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $b + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $2;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) == 0;
    if ($7) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _fp_set22($c, $b);
    label = 11;
    break;
   case 3:
    $10 = $4;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = ($11 | 0) == 0;
    if ($12) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _fp_set22($c, $a);
    label = 11;
    break;
   case 5:
    $15 = $c + 4 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $a | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18 + 212 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $20;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = $16 + 4 | 0;
    $24 = $23;
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = $2 + 4 | 0;
    $27 = $26;
    $28 = HEAP32[$27 >> 2] | 0;
    $29 = $4 + 4 | 0;
    $30 = $29;
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = ___gmpn_add_n($25, $28, $31, $22) | 0;
    $33 = ($32 | 0) == 0;
    $34 = HEAP32[$24 >> 2] | 0;
    $35 = $20 + 8 | 0;
    $36 = $35;
    $37 = HEAP32[$36 >> 2] | 0;
    if ($33) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $39 = ___gmpn_sub_n($34, $34, $37, $22) | 0;
    $40 = $16;
    HEAP32[$40 >> 2] = 2;
    label = 11;
    break;
   case 7:
    $42 = ___gmpn_cmp($34, $37, $22) | 0;
    $43 = ($42 | 0) == 0;
    $44 = $16;
    if ($43) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    HEAP32[$44 >> 2] = 0;
    label = 11;
    break;
   case 9:
    HEAP32[$44 >> 2] = 2;
    $47 = ($42 | 0) > 0;
    if ($47) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $49 = HEAP32[$24 >> 2] | 0;
    $50 = HEAP32[$36 >> 2] | 0;
    $51 = ___gmpn_sub_n($49, $49, $50, $22) | 0;
    label = 11;
    break;
   case 11:
    return;
  }
}
function _fp_sub21($c, $a, $b) {
  $c = $c | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $b + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $2;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) == 0;
    if ($7) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _fp_neg29($c, $b);
    label = 9;
    break;
   case 3:
    $10 = $4;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = ($11 | 0) == 0;
    if ($12) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _fp_set22($c, $a);
    label = 9;
    break;
   case 5:
    $15 = $c | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $16 + 212 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $c + 4 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = $2 + 4 | 0;
    $24 = $23;
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = $4 + 4 | 0;
    $27 = $26;
    $28 = HEAP32[$27 >> 2] | 0;
    $29 = ___gmpn_cmp($25, $28, $20) | 0;
    $30 = ($29 | 0) == 0;
    $31 = $22;
    if ($30) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    HEAP32[$31 >> 2] = 0;
    label = 9;
    break;
   case 7:
    HEAP32[$31 >> 2] = 2;
    $34 = $22 + 4 | 0;
    $35 = $34;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = HEAP32[$24 >> 2] | 0;
    $38 = HEAP32[$27 >> 2] | 0;
    $39 = ___gmpn_sub_n($36, $37, $38, $20) | 0;
    $40 = ($29 | 0) < 0;
    if ($40) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $42 = HEAP32[$35 >> 2] | 0;
    $43 = $18 + 8 | 0;
    $44 = $43;
    $45 = HEAP32[$44 >> 2] | 0;
    $46 = ___gmpn_add_n($42, $42, $45, $20) | 0;
    label = 9;
    break;
   case 9:
    return;
  }
}
function _fp_set22($c, $a) {
  $c = $c | 0;
  $a = $a | 0;
  var $z1 = 0, $z2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z1 = __stackBase__ | 0;
    $z2 = __stackBase__ + 16 | 0;
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $c + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($a | 0) == ($c | 0);
    if ($5) {
      label = 5;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $7 = $2;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($8 | 0) == 0;
    if ($9) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $11 = $4;
    HEAP32[$11 >> 2] = 0;
    label = 5;
    break;
   case 4:
    $13 = $a | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14 + 212 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $4 + 4 | 0;
    $18 = $17;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $z1 | 0;
    $21 = $z1 + 8 | 0;
    HEAP32[$21 >> 2] = $19;
    $22 = $2 + 4 | 0;
    $23 = $22;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $z2 | 0;
    $26 = $z2 + 8 | 0;
    HEAP32[$26 >> 2] = $24;
    $27 = $16;
    $28 = HEAP32[$27 >> 2] | 0;
    $29 = $z2 | 0;
    HEAP32[$29 >> 2] = $28;
    $30 = $z2 + 4 | 0;
    HEAP32[$30 >> 2] = $28;
    $31 = $z1 | 0;
    HEAP32[$31 >> 2] = $28;
    $32 = $z1 + 4 | 0;
    HEAP32[$32 >> 2] = $28;
    ___gmpz_set($20, $25);
    $33 = $4;
    HEAP32[$33 >> 2] = 2;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _fp_mul23($c, $a, $b) {
  $c = $c | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $b + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $c + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $2;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($8 | 0) == 0;
    if ($9) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $11 = $4;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($12 | 0) == 0;
    if ($13) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $15 = $6;
    HEAP32[$15 >> 2] = 0;
    label = 5;
    break;
   case 4:
    $17 = $c | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18 + 212 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $20;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = $22 << 1;
    $24 = _llvm_stacksave() | 0;
    $25 = STACKTOP;
    STACKTOP = STACKTOP + ($23 * 4 & -1) | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $26 = $22 + 1 | 0;
    $27 = STACKTOP;
    STACKTOP = STACKTOP + ($26 * 4 & -1) | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $28 = $2 + 4 | 0;
    $29 = $28;
    $30 = HEAP32[$29 >> 2] | 0;
    $31 = $4 + 4 | 0;
    $32 = $31;
    $33 = HEAP32[$32 >> 2] | 0;
    ___gmpn_mul_n($25, $30, $33, $22);
    $34 = $6 + 4 | 0;
    $35 = $34;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = $20 + 8 | 0;
    $38 = $37;
    $39 = HEAP32[$38 >> 2] | 0;
    ___gmpn_tdiv_qr($27, $36, 0, $25, $23, $39, $22);
    $40 = $6;
    HEAP32[$40 >> 2] = 2;
    _llvm_stackrestore($24 | 0);
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _fp_mul_si24($c, $a, $op) {
  $c = $c | 0;
  $a = $a | 0;
  $op = $op | 0;
  var $qp = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or_cond = 0, $9 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $ispos = 0, $neg = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $qp = __stackBase__ | 0;
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $c + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $2;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) == 0;
    $8 = ($op | 0) == 0;
    $or_cond = $7 | $8;
    $9 = $4;
    if ($or_cond) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    HEAP32[$9 >> 2] = 0;
    label = 6;
    break;
   case 3:
    HEAP32[$9 >> 2] = 2;
    $12 = $a | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13 + 212 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $15;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = $17 + 1 | 0;
    $19 = _llvm_stacksave() | 0;
    $20 = STACKTOP;
    STACKTOP = STACKTOP + ($18 * 4 & -1) | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $21 = $2 + 4 | 0;
    $22 = $21;
    $23 = HEAP32[$22 >> 2] | 0;
    $ispos = ($op | 0) > -1;
    $neg = -$op | 0;
    $24 = $ispos ? $op : $neg;
    $25 = ___gmpn_mul_1($20, $23, $17, $24) | 0;
    $26 = $20 + ($17 << 2) | 0;
    HEAP32[$26 >> 2] = $25;
    $27 = $qp | 0;
    $28 = $4 + 4 | 0;
    $29 = $28;
    $30 = HEAP32[$29 >> 2] | 0;
    $31 = $15 + 8 | 0;
    $32 = $31;
    $33 = HEAP32[$32 >> 2] | 0;
    ___gmpn_tdiv_qr($27, $30, 0, $20, $18, $33, $17);
    $34 = ($op | 0) < 0;
    if ($34) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _fp_neg29($c, $c);
    label = 5;
    break;
   case 5:
    _llvm_stackrestore($19 | 0);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _fp_square25($c, $a) {
  $c = $c | 0;
  $a = $a | 0;
  var $z1 = 0, $z2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z1 = __stackBase__ | 0;
    $z2 = __stackBase__ + 16 | 0;
    $1 = $c | 0;
    $2 = $a + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $c + 4 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $3;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($7 | 0) == 0;
    $9 = $5;
    if ($8) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    HEAP32[$9 >> 2] = 0;
    label = 8;
    break;
   case 3:
    $12 = HEAP32[$1 >> 2] | 0;
    $13 = $12 + 212 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    HEAP32[$9 >> 2] = 2;
    $15 = $5 + 4 | 0;
    $16 = $15;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = $z1 | 0;
    $19 = $z1 + 8 | 0;
    HEAP32[$19 >> 2] = $17;
    $20 = $14;
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = $z1 | 0;
    HEAP32[$22 >> 2] = $21;
    $23 = $z1 + 4 | 0;
    HEAP32[$23 >> 2] = $21;
    $24 = ($c | 0) == ($a | 0);
    if ($24) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $26 = HEAP32[$1 >> 2] | 0;
    $27 = $26 + 196 | 0;
    ___gmpz_powm_ui($18, $18, 2, $27);
    label = 6;
    break;
   case 5:
    $29 = $3 + 4 | 0;
    $30 = $29;
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = $z2 | 0;
    $33 = $z2 + 8 | 0;
    HEAP32[$33 >> 2] = $31;
    $34 = HEAP32[$20 >> 2] | 0;
    $35 = $z2 | 0;
    HEAP32[$35 >> 2] = $34;
    $36 = $z2 + 4 | 0;
    HEAP32[$36 >> 2] = $34;
    $37 = HEAP32[$1 >> 2] | 0;
    $38 = $37 + 196 | 0;
    ___gmpz_powm_ui($18, $32, 2, $38);
    label = 6;
    break;
   case 6:
    $40 = HEAP32[$20 >> 2] | 0;
    $41 = HEAP32[$23 >> 2] | 0;
    $42 = ($40 | 0) == ($41 | 0);
    if ($42) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $44 = $40 - $41 | 0;
    $45 = HEAP32[$19 >> 2] | 0;
    $46 = $45 + ($41 << 2) | 0;
    $47 = $46;
    $48 = $44 << 2;
    _memset($47 | 0, 0, $48 | 0);
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return;
  }
}
function _fp_double26($c, $a) {
  $c = $c | 0;
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $c + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $2;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) == 0;
    if ($7) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $9 = $4;
    HEAP32[$9 >> 2] = 0;
    label = 9;
    break;
   case 3:
    $11 = $c | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 + 212 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $4 + 4 | 0;
    $18 = $17;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $2 + 4 | 0;
    $21 = $20;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = ___gmpn_lshift($19, $22, $16, 1) | 0;
    $24 = ($23 | 0) == 0;
    if ($24) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $26 = $4;
    HEAP32[$26 >> 2] = 2;
    $27 = HEAP32[$18 >> 2] | 0;
    $28 = $14 + 8 | 0;
    $29 = $28;
    $30 = HEAP32[$29 >> 2] | 0;
    $31 = ___gmpn_sub_n($27, $27, $30, $16) | 0;
    label = 9;
    break;
   case 5:
    $33 = HEAP32[$18 >> 2] | 0;
    $34 = $14 + 8 | 0;
    $35 = $34;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = ___gmpn_cmp($33, $36, $16) | 0;
    $38 = ($37 | 0) == 0;
    $39 = $4;
    if ($38) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    HEAP32[$39 >> 2] = 0;
    label = 9;
    break;
   case 7:
    HEAP32[$39 >> 2] = 2;
    $42 = ($37 | 0) > 0;
    if ($42) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $44 = HEAP32[$18 >> 2] | 0;
    $45 = HEAP32[$35 >> 2] | 0;
    $46 = ___gmpn_sub_n($44, $44, $45, $16) | 0;
    label = 9;
    break;
   case 9:
    return;
  }
}
function _fp_sgn_odd31($a) {
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      $_0 = 0;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $7 = $2 + 4 | 0;
    $8 = $7;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $10 << 1;
    $12 = $11 & 2;
    $13 = $12 - 1 | 0;
    $_0 = $13;
    label = 3;
    break;
   case 3:
    return $_0 | 0;
  }
  return 0;
}
function _fp_is136($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $i_0 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      $_0 = 0;
      label = 5;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $7 = $e | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $8 + 212 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $10;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $2 + 4 | 0;
    $14 = $13;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = ($16 | 0) == 1;
    if ($17) {
      $i_0 = 1;
      label = 3;
      break;
    } else {
      $_0 = 0;
      label = 5;
      break;
    }
   case 3:
    $18 = $i_0 >>> 0 < $12 >>> 0;
    if ($18) {
      label = 4;
      break;
    } else {
      $_0 = 1;
      label = 5;
      break;
    }
   case 4:
    $20 = HEAP32[$14 >> 2] | 0;
    $21 = $20 + ($i_0 << 2) | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = ($22 | 0) == 0;
    $24 = $i_0 + 1 | 0;
    if ($23) {
      $i_0 = $24;
      label = 3;
      break;
    } else {
      $_0 = 0;
      label = 5;
      break;
    }
   case 5:
    return $_0 | 0;
  }
  return 0;
}
function _fp_is037($e) {
  $e = $e | 0;
  return (HEAP32[HEAP32[$e + 4 >> 2] >> 2] | 0) == 0 & 1 | 0;
}
function _fp_set038($e) {
  $e = $e | 0;
  HEAP32[HEAP32[$e + 4 >> 2] >> 2] = 0;
  return;
}
function _fp_halve27($c, $a) {
  $c = $c | 0;
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $phitmp = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $c + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $2;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) == 0;
    if ($7) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $9 = $4;
    HEAP32[$9 >> 2] = 0;
    label = 7;
    break;
   case 3:
    $11 = $c | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 + 212 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $2 + 4 | 0;
    $18 = $17;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $4 + 4 | 0;
    $21 = $20;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = HEAP32[$19 >> 2] | 0;
    $24 = $23 & 1;
    $25 = ($24 | 0) == 0;
    if ($25) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $27 = $14 + 8 | 0;
    $28 = $27;
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = ___gmpn_add_n($22, $19, $29, $16) | 0;
    $phitmp = ($30 | 0) == 0;
    $31 = ___gmpn_rshift($22, $22, $16, 1) | 0;
    if ($phitmp) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _fp_set22($c, $a);
    $32 = ___gmpn_rshift($22, $22, $16, 1) | 0;
    label = 7;
    break;
   case 6:
    $34 = $16 - 1 | 0;
    $35 = $22 + ($34 << 2) | 0;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = $36 | -2147483648;
    HEAP32[$35 >> 2] = $37;
    label = 7;
    break;
   case 7:
    return;
  }
}
function _fp_pow_mpz28($c, $a, $op) {
  $c = $c | 0;
  $a = $a | 0;
  $op = $op | 0;
  var $z = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z = __stackBase__ | 0;
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $c + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $2;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) == 0;
    if ($7) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $9 = $4;
    HEAP32[$9 >> 2] = 0;
    label = 4;
    break;
   case 3:
    $11 = $z | 0;
    ___gmpz_init($11);
    _fp_to_mpz44($11, $a);
    $12 = $a | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13 + 196 | 0;
    ___gmpz_powm($11, $11, $op, $14);
    _from_mpz45($c, $11);
    ___gmpz_clear($11);
    $15 = $4;
    HEAP32[$15 >> 2] = 2;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return;
  }
}
function _fp_neg29($c, $a) {
  $c = $c | 0;
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $c + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $2;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) == 0;
    if ($7) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $9 = $4;
    HEAP32[$9 >> 2] = 0;
    label = 4;
    break;
   case 3:
    $11 = $a | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 + 212 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $4 + 4 | 0;
    $16 = $15;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = $14 + 8 | 0;
    $19 = $18;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $2 + 4 | 0;
    $22 = $21;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $14;
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = ___gmpn_sub_n($17, $20, $23, $25) | 0;
    $27 = $4;
    HEAP32[$27 >> 2] = 2;
    label = 4;
    break;
   case 4:
    return;
  }
}
function _fp_cmp30($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $b + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $2;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) == 0;
    if ($7) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $9 = $4;
    $10 = HEAP32[$9 >> 2] | 0;
    $_0 = $10;
    label = 4;
    break;
   case 3:
    $12 = $a | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13 + 212 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $2 + 4 | 0;
    $17 = $16;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $4 + 4 | 0;
    $20 = $19;
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = $15;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = ___gmpn_cmp($18, $21, $23) | 0;
    $_0 = $24;
    label = 4;
    break;
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function _fp_sgn_even32($a) {
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $_0 = 0, $_1 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $a + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($8 | 0) == 0;
    if ($9) {
      $_1 = 0;
      label = 5;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $11 = $4;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = _llvm_stacksave() | 0;
    $14 = STACKTOP;
    STACKTOP = STACKTOP + ($12 * 4 & -1) | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $15 = $6 + 4 | 0;
    $16 = $15;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = HEAP32[$11 >> 2] | 0;
    $19 = ___gmpn_add_n($14, $17, $17, $18) | 0;
    $20 = ($19 | 0) == 0;
    if ($20) {
      label = 3;
      break;
    } else {
      $_0 = 1;
      label = 4;
      break;
    }
   case 3:
    $22 = $4 + 8 | 0;
    $23 = $22;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = HEAP32[$11 >> 2] | 0;
    $26 = ___gmpn_cmp($14, $24, $25) | 0;
    $_0 = $26;
    label = 4;
    break;
   case 4:
    _llvm_stackrestore($13 | 0);
    $_1 = $_0;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return $_1 | 0;
  }
  return 0;
}
function _fp_invert33($c, $a) {
  $c = $c | 0;
  $a = $a | 0;
  var $2 = 0, $3 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $2 = HEAP32[$c + 4 >> 2] | 0;
  $3 = __stackBase__ | 0;
  ___gmpz_init($3);
  _fp_to_mpz44($3, $a);
  ___gmpz_invert($3, $3, (HEAP32[$a >> 2] | 0) + 196 | 0);
  _from_mpz45($c, $3);
  ___gmpz_clear($3);
  HEAP32[$2 >> 2] = 2;
  STACKTOP = __stackBase__;
  return;
}
function _fp_random34($a) {
  $a = $a | 0;
  var $z = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $13 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z = __stackBase__ | 0;
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $z | 0;
    ___gmpz_init($3);
    $4 = $a | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $5 + 196 | 0;
    _pbc_mpz_random($3, $6);
    $7 = $z + 4 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($8 | 0) == 0;
    if ($9) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _from_mpz45($a, $3);
    $11 = $2;
    HEAP32[$11 >> 2] = 2;
    label = 4;
    break;
   case 3:
    $13 = $2;
    HEAP32[$13 >> 2] = 0;
    label = 4;
    break;
   case 4:
    ___gmpz_clear($3);
    STACKTOP = __stackBase__;
    return;
  }
}
function _fp_from_hash35($a, $data, $len) {
  $a = $a | 0;
  $data = $data | 0;
  $len = $len | 0;
  var $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $1 = __stackBase__ | 0;
  ___gmpz_init($1);
  _pbc_mpz_from_hash($1, (HEAP32[$a >> 2] | 0) + 196 | 0, $data, $len);
  _fp_set_mpz18($a, $1);
  ___gmpz_clear($1);
  STACKTOP = __stackBase__;
  return;
}
function _fp_set139($e) {
  $e = $e | 0;
  var $4 = 0, $6 = 0, $9 = 0;
  $4 = HEAP32[(HEAP32[$e >> 2] | 0) + 212 >> 2] | 0;
  $6 = HEAP32[$e + 4 >> 2] | 0;
  HEAP32[$6 >> 2] = 2;
  $9 = $6 + 4 | 0;
  _memset((HEAP32[$9 >> 2] | 0) + 4 | 0, 0, (HEAP32[$4 + 4 >> 2] | 0) - 4 | 0);
  HEAP32[HEAP32[$9 >> 2] >> 2] = 1;
  return;
}
function _fp_is_sqr40($a) {
  $a = $a | 0;
  var $z = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z = __stackBase__ | 0;
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $z | 0;
    ___gmpz_init($3);
    $4 = $2;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($5 | 0) == 0;
    if ($6) {
      $_0 = 1;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _fp_to_mpz44($3, $a);
    $8 = $a | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9 + 196 | 0;
    $11 = ___gmpz_jacobi($3, $10) | 0;
    $12 = ($11 | 0) == 1;
    $13 = $12 & 1;
    ___gmpz_clear($3);
    $_0 = $13;
    label = 3;
    break;
   case 3:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _fp_field_clear41($f) {
  $f = $f | 0;
  var $2 = 0;
  $2 = HEAP32[$f + 212 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$2 + 8 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023]($2);
  return;
}
function _fp_to_bytes42($data, $a) {
  $data = $data | 0;
  $a = $a | 0;
  var $z = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $12 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z = __stackBase__ | 0;
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $a | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 + 164 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $2;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($8 | 0) == 0;
    if ($9) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _memset($data | 0, 0, $6 | 0);
    label = 4;
    break;
   case 3:
    $12 = $z | 0;
    ___gmpz_init($12);
    _fp_to_mpz44($12, $a);
    _pbc_mpz_out_raw_n($data, $6, $12);
    ___gmpz_clear($12);
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return $6 | 0;
  }
  return 0;
}
function _fp_from_bytes43($a, $data) {
  $a = $a | 0;
  $data = $data | 0;
  var $z = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z = __stackBase__ | 0;
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $z | 0;
    ___gmpz_init($3);
    $4 = $a | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $5 + 164 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    ___gmpz_import($3, $7, 1, 1, 1, 0, $data);
    $8 = $z + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ($9 | 0) == 0;
    $11 = $2;
    if ($10) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    HEAP32[$11 >> 2] = 0;
    label = 4;
    break;
   case 3:
    HEAP32[$11 >> 2] = 2;
    _from_mpz45($a, $3);
    label = 4;
    break;
   case 4:
    ___gmpz_clear($3);
    STACKTOP = __stackBase__;
    return $7 | 0;
  }
  return 0;
}
function _fp_to_mpz44($z, $e) {
  $z = $z | 0;
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    ___gmpz_set_ui($z, 0);
    label = 4;
    break;
   case 3:
    $8 = $e | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9 + 212 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $11;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $2 + 4 | 0;
    $15 = $14;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $16;
    ___gmpz_import($z, $13, -1, 4, 0, 0, $17);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _fp_out_info($str, $f) {
  $str = $str | 0;
  $f = $f | 0;
  var __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  _element_fprintf($str, 8512, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $f + 196 | 0, tempInt) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _from_mpz45($e, $z) {
  $e = $e | 0;
  $z = $z | 0;
  var $count = 0, $4 = 0, $8 = 0, $13 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $count = __stackBase__ | 0;
  $4 = HEAP32[(HEAP32[$e >> 2] | 0) + 212 >> 2] | 0;
  $8 = (HEAP32[$e + 4 >> 2] | 0) + 4 | 0;
  ___gmpz_export(HEAP32[$8 >> 2] | 0, $count, -1, 4, 0, 0, $z);
  $13 = HEAP32[$count >> 2] | 0;
  _memset((HEAP32[$8 >> 2] | 0) + ($13 << 2) | 0, 0, (HEAP32[$4 >> 2] | 0) - $13 << 2 | 0);
  STACKTOP = __stackBase__;
  return;
}
function _field_init_mont_fp($f, $prime) {
  $f = $f | 0;
  $prime = $prime | 0;
  var $33 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $41 = 0, $51 = 0, $57 = 0, $63 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  _field_init($f);
  HEAP32[$f + 4 >> 2] = 502;
  HEAP32[$f + 8 >> 2] = 216;
  HEAP32[$f + 76 >> 2] = 494;
  HEAP32[$f + 12 >> 2] = 666;
  HEAP32[$f + 36 >> 2] = 548;
  HEAP32[$f + 168 >> 2] = 414;
  HEAP32[$f + 32 >> 2] = 274;
  HEAP32[$f + 40 >> 2] = 416;
  HEAP32[$f + 44 >> 2] = 116;
  HEAP32[$f + 20 >> 2] = 460;
  HEAP32[$f + 48 >> 2] = 754;
  HEAP32[$f + 96 >> 2] = 256;
  HEAP32[$f + 108 >> 2] = 418;
  HEAP32[$f + 116 >> 2] = 446;
  HEAP32[$f + 124 >> 2] = 278;
  HEAP32[$f + 144 >> 2] = 178;
  HEAP32[$f + 148 >> 2] = 674;
  HEAP32[$f + 120 >> 2] = 744;
  HEAP32[$f + 128 >> 2] = 624;
  HEAP32[$f + 132 >> 2] = 588;
  HEAP32[$f + 136 >> 2] = 124;
  HEAP32[$f + 140 >> 2] = 490;
  HEAP32[$f + 24 >> 2] = 768;
  HEAP32[$f + 28 >> 2] = 832;
  HEAP32[$f + 52 >> 2] = 464;
  HEAP32[$f + 56 >> 2] = 8;
  HEAP32[$f >> 2] = 98;
  HEAP32[$f + 152 >> 2] = 110;
  HEAP32[$f + 156 >> 2] = 680;
  HEAP32[$f + 172 >> 2] = 662;
  HEAP32[$f + 176 >> 2] = 756;
  $33 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](24) | 0;
  HEAP32[$f + 212 >> 2] = $33;
  $35 = ___gmpz_size($prime) | 0;
  $36 = $33;
  HEAP32[$36 >> 2] = $35;
  $37 = $35 << 2;
  $39 = $33 + 4 | 0;
  HEAP32[$39 >> 2] = $37;
  $41 = FUNCTION_TABLE_ii[HEAP32[230] & 1023]($37) | 0;
  HEAP32[$33 + 8 >> 2] = $41;
  ___gmpz_export($41, $36, -1, 4, 0, 0, $prime);
  ___gmpz_set($f + 196 | 0, $prime);
  HEAP32[$f + 164 >> 2] = ((___gmpz_sizeinbase($prime, 2) | 0) + 7 | 0) >>> 3;
  $51 = __stackBase__ | 0;
  ___gmpz_init($51);
  $57 = $33 + 16 | 0;
  HEAP32[$57 >> 2] = FUNCTION_TABLE_ii[HEAP32[230] & 1023](HEAP32[$39 >> 2] | 0) | 0;
  $63 = $33 + 20 | 0;
  HEAP32[$63 >> 2] = FUNCTION_TABLE_ii[HEAP32[230] & 1023](HEAP32[$39 >> 2] | 0) | 0;
  ___gmpz_setbit($51, HEAP32[$39 >> 2] << 3);
  ___gmpz_mod($51, $51, $prime);
  _set_limbs(HEAP32[$57 >> 2] | 0, $51, HEAP32[$36 >> 2] | 0);
  ___gmpz_powm_ui($51, $51, 3, $prime);
  _set_limbs(HEAP32[$63 >> 2] | 0, $51, HEAP32[$36 >> 2] | 0);
  ___gmpz_set_ui($51, 0);
  ___gmpz_setbit($51, HEAP32[$39 >> 2] << 3);
  ___gmpz_invert($51, $prime, $51);
  HEAP32[$33 + 12 >> 2] = -(___gmpz_get_ui($51) | 0) | 0;
  ___gmpz_clear($51);
  STACKTOP = __stackBase__;
  return;
}
function _fp_init50($e) {
  $e = $e | 0;
  var $4 = 0, $6 = 0;
  $4 = HEAP32[(HEAP32[$e >> 2] | 0) + 212 >> 2] | 0;
  $6 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](8) | 0;
  HEAP32[$e + 4 >> 2] = $6;
  HEAP8[$6] = 0;
  HEAP32[$6 + 4 >> 2] = FUNCTION_TABLE_ii[HEAP32[230] & 1023](HEAP32[$4 + 4 >> 2] | 0) | 0;
  return;
}
function _fp_clear51($e) {
  $e = $e | 0;
  var $1 = 0;
  $1 = $e + 4 | 0;
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$1 >> 2] | 0);
  return;
}
function _fp_set_si52($e, $op) {
  $e = $e | 0;
  $op = $op | 0;
  var $tmp = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $storemerge = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $tmp = __stackBase__ | 0;
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($op | 0) == 0;
    if ($7) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    HEAP8[$6] = 0;
    label = 6;
    break;
   case 3:
    $10 = $tmp | 0;
    ___gmpz_init($10);
    ___gmpz_set_si($10, $op);
    $11 = $4 + 4 | 0;
    $12 = $11;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13 << 3;
    ___gmpz_mul_2exp($10, $10, $14);
    $15 = HEAP32[$1 >> 2] | 0;
    $16 = $15 + 196 | 0;
    ___gmpz_mod($10, $10, $16);
    $17 = $tmp + 4 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = ($18 | 0) == 0;
    if ($19) {
      $storemerge = 0;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $21 = $6 + 4 | 0;
    $22 = $21;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $4;
    $25 = HEAP32[$24 >> 2] | 0;
    _set_limbs($23, $10, $25);
    $storemerge = 2;
    label = 5;
    break;
   case 5:
    HEAP8[$6] = $storemerge;
    ___gmpz_clear($10);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _fp_set_mpz53($e, $z) {
  $e = $e | 0;
  $z = $z | 0;
  var $tmp = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $storemerge = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $tmp = __stackBase__ | 0;
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $z + 4 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($8 | 0) == 0;
    if ($9) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    HEAP8[$6] = 0;
    label = 6;
    break;
   case 3:
    $12 = $tmp | 0;
    ___gmpz_init($12);
    $13 = $4 + 4 | 0;
    $14 = $13;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $15 << 3;
    ___gmpz_mul_2exp($12, $z, $16);
    $17 = HEAP32[$1 >> 2] | 0;
    $18 = $17 + 196 | 0;
    ___gmpz_mod($12, $12, $18);
    $19 = $tmp + 4 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = ($20 | 0) == 0;
    if ($21) {
      $storemerge = 0;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $23 = $6 + 4 | 0;
    $24 = $23;
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = $4;
    $27 = HEAP32[$26 >> 2] | 0;
    _set_limbs($25, $12, $27);
    $storemerge = 2;
    label = 5;
    break;
   case 5:
    HEAP8[$6] = $storemerge;
    ___gmpz_clear($12);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _fp_out_str54($stream, $base, $e) {
  $stream = $stream | 0;
  $base = $base | 0;
  $e = $e | 0;
  var $1 = 0, $3 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $1 = __stackBase__ | 0;
  ___gmpz_init($1);
  _fp_to_mpz76($1, $e);
  $3 = ___gmpz_out_str($stream, $base, $1) | 0;
  ___gmpz_clear($1);
  STACKTOP = __stackBase__;
  return $3 | 0;
}
function _fp_snprint($s, $n, $e) {
  $s = $s | 0;
  $n = $n | 0;
  $e = $e | 0;
  var $1 = 0, $2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $1 = __stackBase__ | 0;
  ___gmpz_init($1);
  _fp_to_mpz76($1, $e);
  $2 = ___gmp_snprintf($s, $n, 8056, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $1, tempInt) | 0) | 0;
  ___gmpz_clear($1);
  STACKTOP = __stackBase__;
  return $2 | 0;
}
function _fp_set_str($e, $s, $base) {
  $e = $e | 0;
  $s = $s | 0;
  $base = $base | 0;
  var $1 = 0, $2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $1 = __stackBase__ | 0;
  ___gmpz_init($1);
  $2 = _pbc_mpz_set_str($1, $s, $base) | 0;
  ___gmpz_mod($1, $1, (HEAP32[$e >> 2] | 0) + 196 | 0);
  _fp_set_mpz53($e, $1);
  ___gmpz_clear($1);
  STACKTOP = __stackBase__;
  return $2 | 0;
}
function _fp_add55($c, $a, $b) {
  $c = $c | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $43 = 0, $45 = 0, $46 = 0, $47 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $b + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = HEAP8[$2] | 0;
    $6 = $5 << 24 >> 24 == 0;
    if ($6) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _fp_set57($c, $b);
    label = 11;
    break;
   case 3:
    $9 = HEAP8[$4] | 0;
    $10 = $9 << 24 >> 24 == 0;
    if ($10) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _fp_set57($c, $a);
    label = 11;
    break;
   case 5:
    $13 = $c + 4 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $a | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $16 + 212 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $14 + 4 | 0;
    $22 = $21;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $2 + 4 | 0;
    $25 = $24;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = $4 + 4 | 0;
    $28 = $27;
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = ___gmpn_add_n($23, $26, $29, $20) | 0;
    $31 = ($30 | 0) == 0;
    $32 = HEAP32[$22 >> 2] | 0;
    $33 = $18 + 8 | 0;
    $34 = $33;
    $35 = HEAP32[$34 >> 2] | 0;
    if ($31) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $37 = ___gmpn_sub_n($32, $32, $35, $20) | 0;
    HEAP8[$14] = 2;
    label = 11;
    break;
   case 7:
    $39 = ___gmpn_cmp($32, $35, $20) | 0;
    $40 = ($39 | 0) == 0;
    if ($40) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    HEAP8[$14] = 0;
    label = 11;
    break;
   case 9:
    HEAP8[$14] = 2;
    $43 = ($39 | 0) > 0;
    if ($43) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $45 = HEAP32[$22 >> 2] | 0;
    $46 = HEAP32[$34 >> 2] | 0;
    $47 = ___gmpn_sub_n($45, $45, $46, $20) | 0;
    label = 11;
    break;
   case 11:
    return;
  }
}
function _fp_sub56($c, $a, $b) {
  $c = $c | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $b + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = HEAP8[$2] | 0;
    $6 = $5 << 24 >> 24 == 0;
    if ($6) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _fp_neg62($c, $b);
    label = 9;
    break;
   case 3:
    $9 = HEAP8[$4] | 0;
    $10 = $9 << 24 >> 24 == 0;
    if ($10) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _fp_set57($c, $a);
    label = 9;
    break;
   case 5:
    $13 = $c | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14 + 212 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $16;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $c + 4 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $2 + 4 | 0;
    $22 = $21;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $4 + 4 | 0;
    $25 = $24;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = ___gmpn_cmp($23, $26, $18) | 0;
    $28 = ($27 | 0) == 0;
    if ($28) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    HEAP8[$20] = 0;
    label = 9;
    break;
   case 7:
    HEAP8[$20] = 2;
    $31 = $20 + 4 | 0;
    $32 = $31;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = HEAP32[$22 >> 2] | 0;
    $35 = HEAP32[$25 >> 2] | 0;
    $36 = ___gmpn_sub_n($33, $34, $35, $18) | 0;
    $37 = ($27 | 0) < 0;
    if ($37) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $39 = HEAP32[$32 >> 2] | 0;
    $40 = $16 + 8 | 0;
    $41 = $40;
    $42 = HEAP32[$41 >> 2] | 0;
    $43 = ___gmpn_add_n($39, $39, $42, $18) | 0;
    label = 9;
    break;
   case 9:
    return;
  }
}
function _fp_is069($e) {
  $e = $e | 0;
  return (HEAP8[HEAP32[$e + 4 >> 2] | 0] | 0) == 0 & 1 | 0;
}
function _fp_set070($e) {
  $e = $e | 0;
  HEAP8[HEAP32[$e + 4 >> 2] | 0] = 0;
  return;
}
function _darray_at($a, $i) {
  $a = $a | 0;
  $i = $i | 0;
  return HEAP32[(HEAP32[$a >> 2] | 0) + ($i << 2) >> 2] | 0;
}
function _mpz_is082($z) {
  $z = $z | 0;
  return (HEAP32[$z + 4 >> 2] | 0) == 0 & 1 | 0;
}
function _multiz_is_z($m) {
  $m = $m | 0;
  return (HEAP8[$m | 0] | 0) == 0 & 1 | 0;
}
function _darray_count($a) {
  $a = $a | 0;
  return HEAP32[$a + 4 >> 2] | 0;
}
function _fp_set57($c, $a) {
  $c = $c | 0;
  $a = $a | 0;
  var $z1 = 0, $z2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z1 = __stackBase__ | 0;
    $z2 = __stackBase__ + 16 | 0;
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $c + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($a | 0) == ($c | 0);
    if ($5) {
      label = 5;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $7 = HEAP8[$2] | 0;
    $8 = $7 << 24 >> 24 == 0;
    if ($8) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP8[$4] = 0;
    label = 5;
    break;
   case 4:
    $11 = $a | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 + 212 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $4 + 4 | 0;
    $16 = $15;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = $z1 | 0;
    $19 = $z1 + 8 | 0;
    HEAP32[$19 >> 2] = $17;
    $20 = $2 + 4 | 0;
    $21 = $20;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = $z2 | 0;
    $24 = $z2 + 8 | 0;
    HEAP32[$24 >> 2] = $22;
    $25 = $14;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = $z2 | 0;
    HEAP32[$27 >> 2] = $26;
    $28 = $z2 + 4 | 0;
    HEAP32[$28 >> 2] = $26;
    $29 = $z1 | 0;
    HEAP32[$29 >> 2] = $26;
    $30 = $z1 + 4 | 0;
    HEAP32[$30 >> 2] = $26;
    ___gmpz_set($18, $23);
    HEAP8[$4] = 2;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return;
  }
}
function _fp_mul58($c, $a, $b) {
  $c = $c | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $storemerge = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $b + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $c + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = HEAP8[$2] | 0;
    $8 = $7 << 24 >> 24 == 0;
    if ($8) {
      $storemerge = 0;
      label = 4;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $10 = HEAP8[$4] | 0;
    $11 = $10 << 24 >> 24 == 0;
    if ($11) {
      $storemerge = 0;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $13 = $c | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14 + 212 | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $16;
    $18 = $6 + 4 | 0;
    $19 = $18;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $2 + 4 | 0;
    $22 = $21;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $4 + 4 | 0;
    $25 = $24;
    $26 = HEAP32[$25 >> 2] | 0;
    _mont_mul($20, $23, $26, $17);
    $storemerge = 2;
    label = 4;
    break;
   case 4:
    HEAP8[$6] = $storemerge;
    return;
  }
}
function _fp_double59($c, $a) {
  $c = $c | 0;
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $c + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = HEAP8[$2] | 0;
    $6 = $5 << 24 >> 24 == 0;
    if ($6) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    HEAP8[$4] = 0;
    label = 9;
    break;
   case 3:
    $9 = $c | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $10 + 212 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $4 + 4 | 0;
    $16 = $15;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = $2 + 4 | 0;
    $19 = $18;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = ___gmpn_lshift($17, $20, $14, 1) | 0;
    $22 = ($21 | 0) == 0;
    if ($22) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    HEAP8[$4] = 2;
    $24 = HEAP32[$16 >> 2] | 0;
    $25 = $12 + 8 | 0;
    $26 = $25;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = ___gmpn_sub_n($24, $24, $27, $14) | 0;
    label = 9;
    break;
   case 5:
    $30 = HEAP32[$16 >> 2] | 0;
    $31 = $12 + 8 | 0;
    $32 = $31;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = ___gmpn_cmp($30, $33, $14) | 0;
    $35 = ($34 | 0) == 0;
    if ($35) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    HEAP8[$4] = 0;
    label = 9;
    break;
   case 7:
    HEAP8[$4] = 2;
    $38 = ($34 | 0) > 0;
    if ($38) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $40 = HEAP32[$16 >> 2] | 0;
    $41 = HEAP32[$32 >> 2] | 0;
    $42 = ___gmpn_sub_n($40, $40, $41, $14) | 0;
    label = 9;
    break;
   case 9:
    return;
  }
}
function _fp_halve60($c, $a) {
  $c = $c | 0;
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $phitmp = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $c + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = HEAP8[$2] | 0;
    $6 = $5 << 24 >> 24 == 0;
    if ($6) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    HEAP8[$4] = 0;
    label = 7;
    break;
   case 3:
    $9 = $c | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $10 + 212 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $2 + 4 | 0;
    $16 = $15;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = $4 + 4 | 0;
    $19 = $18;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = HEAP32[$17 >> 2] | 0;
    $22 = $21 & 1;
    $23 = ($22 | 0) == 0;
    if ($23) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $25 = $12 + 8 | 0;
    $26 = $25;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = ___gmpn_add_n($20, $17, $27, $14) | 0;
    $phitmp = ($28 | 0) == 0;
    $29 = ___gmpn_rshift($20, $20, $14, 1) | 0;
    if ($phitmp) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _fp_set57($c, $a);
    $30 = ___gmpn_rshift($20, $20, $14, 1) | 0;
    label = 7;
    break;
   case 6:
    $32 = $14 - 1 | 0;
    $33 = $20 + ($32 << 2) | 0;
    $34 = HEAP32[$33 >> 2] | 0;
    $35 = $34 | -2147483648;
    HEAP32[$33 >> 2] = $35;
    label = 7;
    break;
   case 7:
    return;
  }
}
function _fp_pow_mpz61($c, $a, $op) {
  $c = $c | 0;
  $a = $a | 0;
  $op = $op | 0;
  var $z = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $storemerge = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z = __stackBase__ | 0;
    $1 = $a | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $a + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $c + 4 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = HEAP8[$6] | 0;
    $10 = $9 << 24 >> 24 == 0;
    if ($10) {
      $storemerge = 0;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $12 = $z | 0;
    ___gmpz_init($12);
    _fp_to_mpz76($12, $a);
    $13 = HEAP32[$1 >> 2] | 0;
    $14 = $13 + 196 | 0;
    ___gmpz_powm($12, $12, $op, $14);
    $15 = $4 + 4 | 0;
    $16 = $15;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = $17 << 3;
    ___gmpz_mul_2exp($12, $12, $18);
    $19 = HEAP32[$1 >> 2] | 0;
    $20 = $19 + 196 | 0;
    ___gmpz_mod($12, $12, $20);
    $21 = $8 + 4 | 0;
    $22 = $21;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $4;
    $25 = HEAP32[$24 >> 2] | 0;
    _set_limbs($23, $12, $25);
    ___gmpz_clear($12);
    $storemerge = 2;
    label = 3;
    break;
   case 3:
    HEAP8[$8] = $storemerge;
    STACKTOP = __stackBase__;
    return;
  }
}
function _fp_neg62($c, $a) {
  $c = $c | 0;
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $storemerge = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $c + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = HEAP8[$2] | 0;
    $6 = $5 << 24 >> 24 == 0;
    if ($6) {
      $storemerge = 0;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $8 = $a | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9 + 212 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $4 + 4 | 0;
    $13 = $12;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $11 + 8 | 0;
    $16 = $15;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = $2 + 4 | 0;
    $19 = $18;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $11;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = ___gmpn_sub_n($14, $17, $20, $22) | 0;
    $storemerge = 2;
    label = 3;
    break;
   case 3:
    HEAP8[$4] = $storemerge;
    return;
  }
}
function _fp_sgn_odd63($a) {
  $a = $a | 0;
  var $z = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z = __stackBase__ | 0;
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = HEAP8[$2] | 0;
    $4 = $3 << 24 >> 24 == 0;
    if ($4) {
      $_0 = 0;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $6 = $z | 0;
    ___gmpz_init($6);
    _fp_to_mpz76($6, $a);
    $7 = $z + 4 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($8 | 0) != 0;
    $10 = $9 & 1;
    $11 = $z + 8 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $10 & $13;
    $15 = ($14 | 0) != 0;
    $16 = $15 ? 1 : -1;
    ___gmpz_clear($6);
    $_0 = $16;
    label = 3;
    break;
   case 3:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _fp_cmp64($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $b + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = HEAP8[$2] | 0;
    $6 = $5 << 24 >> 24 == 0;
    if ($6) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $8 = HEAP8[$4] | 0;
    $9 = $8 << 24 >> 24;
    $_0 = $9;
    label = 4;
    break;
   case 3:
    $11 = $a | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12 + 212 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $2 + 4 | 0;
    $16 = $15;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = $4 + 4 | 0;
    $19 = $18;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $14;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = ___gmpn_cmp($17, $20, $22) | 0;
    $_0 = $23;
    label = 4;
    break;
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function _fp_invert65($c, $a) {
  $c = $c | 0;
  $a = $a | 0;
  var $2 = 0, $4 = 0, $5 = 0, $8 = 0, $10 = 0, $12 = 0, $13 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $2 = HEAP32[$a + 4 >> 2] | 0;
  $4 = HEAP32[$c + 4 >> 2] | 0;
  $5 = $a | 0;
  $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 212 >> 2] | 0;
  $10 = $8;
  $12 = STACKTOP;
  STACKTOP = STACKTOP + ((HEAP32[$10 >> 2] | 0) * 4 & -1) | 0;
  STACKTOP = STACKTOP + 7 >> 3 << 3;
  $13 = __stackBase__ | 0;
  ___gmpz_init($13);
  ___gmpz_import($13, HEAP32[$10 >> 2] | 0, -1, 4, 0, 0, HEAP32[$2 + 4 >> 2] | 0);
  ___gmpz_invert($13, $13, (HEAP32[$5 >> 2] | 0) + 196 | 0);
  _set_limbs($12, $13, HEAP32[$10 >> 2] | 0);
  _mont_mul(HEAP32[$4 + 4 >> 2] | 0, $12, HEAP32[$8 + 20 >> 2] | 0, $8);
  HEAP8[$4] = 2;
  ___gmpz_clear($13);
  STACKTOP = __stackBase__;
  return;
}
function _fp_random66($a) {
  $a = $a | 0;
  var $z = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $storemerge = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z = __stackBase__ | 0;
    $1 = $a | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $a + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $z | 0;
    ___gmpz_init($7);
    $8 = HEAP32[$1 >> 2] | 0;
    $9 = $8 + 196 | 0;
    _pbc_mpz_random($7, $9);
    $10 = $z + 4 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = ($11 | 0) == 0;
    if ($12) {
      $storemerge = 0;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $14 = $4 + 4 | 0;
    $15 = $14;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $16 << 3;
    ___gmpz_mul_2exp($7, $7, $17);
    $18 = HEAP32[$1 >> 2] | 0;
    $19 = $18 + 196 | 0;
    ___gmpz_mod($7, $7, $19);
    $20 = $6 + 4 | 0;
    $21 = $20;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = $4;
    $24 = HEAP32[$23 >> 2] | 0;
    _set_limbs($22, $7, $24);
    $storemerge = 2;
    label = 3;
    break;
   case 3:
    HEAP8[$6] = $storemerge;
    ___gmpz_clear($7);
    STACKTOP = __stackBase__;
    return;
  }
}
function _fp_from_hash67($a, $data, $len) {
  $a = $a | 0;
  $data = $data | 0;
  $len = $len | 0;
  var $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $1 = __stackBase__ | 0;
  ___gmpz_init($1);
  _pbc_mpz_from_hash($1, (HEAP32[$a >> 2] | 0) + 196 | 0, $data, $len);
  _fp_set_mpz53($a, $1);
  ___gmpz_clear($1);
  STACKTOP = __stackBase__;
  return;
}
function _fp_is168($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = HEAP8[$2] | 0;
    $4 = $3 << 24 >> 24 == 0;
    if ($4) {
      $_0 = 0;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $6 = $e | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $7 + 212 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $2 + 4 | 0;
    $11 = $10;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $9 + 16 | 0;
    $14 = $13;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $9;
    $17 = HEAP32[$16 >> 2] | 0;
    $18 = ___gmpn_cmp($12, $15, $17) | 0;
    $19 = ($18 | 0) == 0;
    $20 = $19 & 1;
    $_0 = $20;
    label = 3;
    break;
   case 3:
    return $_0 | 0;
  }
  return 0;
}
function _fp_set171($e) {
  $e = $e | 0;
  var $4 = 0, $6 = 0;
  $4 = HEAP32[(HEAP32[$e >> 2] | 0) + 212 >> 2] | 0;
  $6 = HEAP32[$e + 4 >> 2] | 0;
  HEAP8[$6] = 2;
  _memcpy(HEAP32[$6 + 4 >> 2] | 0, HEAP32[$4 + 16 >> 2] | 0, HEAP32[$4 + 4 >> 2] | 0);
  return;
}
function _fp_is_sqr72($a) {
  $a = $a | 0;
  var $z = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z = __stackBase__ | 0;
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $z | 0;
    ___gmpz_init($3);
    $4 = HEAP8[$2] | 0;
    $5 = $4 << 24 >> 24 == 0;
    if ($5) {
      $_0 = 1;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _fp_to_mpz76($3, $a);
    $7 = $a | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $8 + 196 | 0;
    $10 = ___gmpz_jacobi($3, $9) | 0;
    $11 = ($10 | 0) == 1;
    $12 = $11 & 1;
    ___gmpz_clear($3);
    $_0 = $12;
    label = 3;
    break;
   case 3:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _fp_field_clear73($f) {
  $f = $f | 0;
  var $2 = 0;
  $2 = HEAP32[$f + 212 >> 2] | 0;
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$2 + 8 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$2 + 16 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$2 + 20 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023]($2);
  return;
}
function _fp_to_bytes74($data, $a) {
  $data = $data | 0;
  $a = $a | 0;
  var $4 = 0, $5 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $4 = HEAP32[(HEAP32[$a >> 2] | 0) + 164 >> 2] | 0;
  $5 = __stackBase__ | 0;
  ___gmpz_init($5);
  _fp_to_mpz76($5, $a);
  _pbc_mpz_out_raw_n($data, $4, $5);
  ___gmpz_clear($5);
  STACKTOP = __stackBase__;
  return $4 | 0;
}
function _fp_from_bytes75($a, $data) {
  $a = $a | 0;
  $data = $data | 0;
  var $z = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z = __stackBase__ | 0;
    $1 = $a | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $a + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $z | 0;
    ___gmpz_init($7);
    $8 = HEAP32[$1 >> 2] | 0;
    $9 = $8 + 164 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    ___gmpz_import($7, $10, 1, 1, 1, 0, $data);
    $11 = $z + 4 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($12 | 0) == 0;
    if ($13) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    HEAP8[$6] = 0;
    label = 4;
    break;
   case 3:
    HEAP8[$6] = 2;
    $16 = $4 + 4 | 0;
    $17 = $16;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18 << 3;
    ___gmpz_mul_2exp($7, $7, $19);
    $20 = HEAP32[$1 >> 2] | 0;
    $21 = $20 + 196 | 0;
    ___gmpz_mod($7, $7, $21);
    $22 = $6 + 4 | 0;
    $23 = $22;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $4;
    $26 = HEAP32[$25 >> 2] | 0;
    _set_limbs($24, $7, $26);
    label = 4;
    break;
   case 4:
    ___gmpz_clear($7);
    STACKTOP = __stackBase__;
    return $10 | 0;
  }
  return 0;
}
function _fp_to_mpz76($z, $e) {
  $z = $z | 0;
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $storemerge = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = HEAP8[$2] | 0;
    $4 = $3 << 24 >> 24 == 0;
    if ($4) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    ___gmpz_set_ui($z, 0);
    label = 6;
    break;
   case 3:
    $7 = $e | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $8 + 212 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $10;
    $12 = $10;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13 << 1;
    $15 = _llvm_stacksave() | 0;
    $16 = STACKTOP;
    STACKTOP = STACKTOP + ($14 * 4 & -1) | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $17 = $16;
    $18 = $2 + 4 | 0;
    $19 = $18;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $20;
    $22 = HEAP32[$12 >> 2] | 0;
    $23 = $22 << 2;
    _memcpy($17 | 0, $21 | 0, $23);
    $24 = HEAP32[$12 >> 2] | 0;
    $25 = $16 + ($24 << 2) | 0;
    $26 = $25;
    $27 = $24 << 2;
    _memset($26 | 0, 0, $27 | 0);
    $28 = HEAP32[$12 >> 2] | 0;
    $29 = ___gmpz_realloc($z, $28) | 0;
    $30 = $z + 8 | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    _mont_reduce($31, $16, $11);
    $32 = HEAP32[$12 >> 2] | 0;
    $33 = $z + 4 | 0;
    $storemerge = $32;
    label = 4;
    break;
   case 4:
    HEAP32[$33 >> 2] = $storemerge;
    $35 = $storemerge - 1 | 0;
    $36 = HEAP32[$30 >> 2] | 0;
    $37 = $36 + ($35 << 2) | 0;
    $38 = HEAP32[$37 >> 2] | 0;
    $39 = ($38 | 0) == 0;
    if ($39) {
      $storemerge = $35;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _llvm_stackrestore($15 | 0);
    label = 6;
    break;
   case 6:
    STACKTOP = __stackBase__;
    return;
  }
}
function _fp_out_info77($out, $f) {
  $out = $out | 0;
  $f = $f | 0;
  var __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  _element_fprintf($out, 5832, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $f + 196 | 0, tempInt) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _set_limbs($dst, $z, $n) {
  $dst = $dst | 0;
  $z = $z | 0;
  $n = $n | 0;
  var $count = 0, $3 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $count = __stackBase__ | 0;
  ___gmpz_export($dst, $count, -1, 4, 0, 0, $z);
  $3 = HEAP32[$count >> 2] | 0;
  _memset($dst + ($3 << 2) | 0, 0, $n - $3 << 2 | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mont_reduce($x, $y, $p) {
  $x = $x | 0;
  $y = $y | 0;
  $p = $p | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $i_032 = 0, $flag_031 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $exitcond = 0, $phitmp = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) == 0;
    if ($3) {
      label = 5;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $4 = $p + 12 | 0;
    $5 = $p + 8 | 0;
    $flag_031 = 0;
    $i_032 = 0;
    label = 3;
    break;
   case 3:
    $7 = $y + ($i_032 << 2) | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = HEAP32[$4 >> 2] | 0;
    $10 = Math_imul($9, $8);
    $11 = HEAP32[$5 >> 2] | 0;
    $12 = ___gmpn_addmul_1($7, $11, $2, $10) | 0;
    $13 = $i_032 + $2 | 0;
    $14 = $y + ($13 << 2) | 0;
    $15 = $2 - $i_032 | 0;
    $16 = ___gmpn_add_1($14, $14, $15, $12) | 0;
    $17 = $16 + $flag_031 | 0;
    $18 = $i_032 + 1 | 0;
    $exitcond = ($18 | 0) == ($2 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $flag_031 = $17;
      $i_032 = $18;
      label = 3;
      break;
    }
   case 4:
    $phitmp = ($17 | 0) == 0;
    if ($phitmp) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $20 = $y + ($2 << 2) | 0;
    $21 = $p + 8 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = ___gmpn_cmp($20, $22, $2) | 0;
    $24 = ($23 | 0) > -1;
    if ($24) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $26 = $y + ($2 << 2) | 0;
    $27 = $p + 8 | 0;
    $28 = HEAP32[$27 >> 2] | 0;
    $29 = ___gmpn_sub_n($x, $26, $28, $2) | 0;
    label = 8;
    break;
   case 7:
    $31 = $x;
    $32 = $20;
    $33 = $2 << 2;
    _memcpy($31 | 0, $32 | 0, $33);
    label = 8;
    break;
   case 8:
    return;
  }
}
function _mont_mul($c, $a, $b, $p) {
  $c = $c | 0;
  $a = $a | 0;
  $b = $b | 0;
  $p = $p | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $i_050 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $exitcond = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $60 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 << 1;
    $4 = $3 | 1;
    $5 = STACKTOP;
    STACKTOP = STACKTOP + ($4 * 4 & -1) | 0;
    STACKTOP = STACKTOP + 7 >> 3 << 3;
    $6 = HEAP32[$a >> 2] | 0;
    $7 = HEAP32[$b >> 2] | 0;
    $8 = Math_imul($7, $6);
    $9 = $p + 12 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = Math_imul($8, $10);
    $12 = ___gmpn_mul_1($5, $b, $2, $6) | 0;
    $13 = $5 + ($2 << 2) | 0;
    HEAP32[$13 >> 2] = $12;
    $14 = $p + 8 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = ___gmpn_addmul_1($5, $15, $2, $11) | 0;
    $17 = HEAP32[$13 >> 2] | 0;
    $18 = $17 + $16 | 0;
    HEAP32[$13 >> 2] = $18;
    $19 = $18 >>> 0 < $12 >>> 0;
    $20 = $19 & 1;
    $21 = $2 + 1 | 0;
    $22 = $5 + ($21 << 2) | 0;
    HEAP32[$22 >> 2] = $20;
    $23 = $2 >>> 0 > 1;
    if ($23) {
      $i_050 = 1;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $24 = $5 + ($i_050 << 2) | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = $a + ($i_050 << 2) | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = HEAP32[$b >> 2] | 0;
    $29 = Math_imul($28, $27);
    $30 = $29 + $25 | 0;
    $31 = HEAP32[$9 >> 2] | 0;
    $32 = Math_imul($30, $31);
    $33 = ___gmpn_addmul_1($24, $b, $2, $27) | 0;
    $34 = $i_050 + $2 | 0;
    $35 = $5 + ($34 << 2) | 0;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = $36 + $33 | 0;
    HEAP32[$35 >> 2] = $37;
    $38 = HEAP32[$14 >> 2] | 0;
    $39 = ___gmpn_addmul_1($24, $38, $2, $32) | 0;
    $40 = HEAP32[$35 >> 2] | 0;
    $41 = $40 + $39 | 0;
    HEAP32[$35 >> 2] = $41;
    $42 = $41 >>> 0 < $37 >>> 0;
    $43 = $42 & 1;
    $44 = $34 + 1 | 0;
    $45 = $5 + ($44 << 2) | 0;
    HEAP32[$45 >> 2] = $43;
    $46 = $i_050 + 1 | 0;
    $exitcond = ($46 | 0) == ($2 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_050 = $46;
      label = 2;
      break;
    }
   case 3:
    $47 = $5 + ($3 << 2) | 0;
    $48 = HEAP32[$47 >> 2] | 0;
    $49 = ($48 | 0) == 0;
    if ($49) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $51 = HEAP32[$14 >> 2] | 0;
    $52 = ___gmpn_cmp($13, $51, $2) | 0;
    $53 = ($52 | 0) > -1;
    if ($53) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $55 = HEAP32[$14 >> 2] | 0;
    $56 = ___gmpn_sub_n($c, $13, $55, $2) | 0;
    label = 7;
    break;
   case 6:
    $58 = $c;
    $59 = $13;
    $60 = $2 << 2;
    _memcpy($58 | 0, $59 | 0, $60);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _multiz_to_mpz($z, $ep) {
  $z = $z | 0;
  $ep = $ep | 0;
  var $1 = 0, $2 = 0, $3 = 0, $_04 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_0_lcssa = 0, $10 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $ep | 0;
    $2 = HEAP8[$1] | 0;
    $3 = $2 << 24 >> 24 == 1;
    if ($3) {
      $_04 = $ep;
      label = 2;
      break;
    } else {
      $_0_lcssa = $ep;
      label = 3;
      break;
    }
   case 2:
    $4 = $_04 + 4 | 0;
    $5 = $4;
    $6 = _darray_at($5, 0) | 0;
    $7 = $6;
    $8 = HEAP8[$6] | 0;
    $9 = $8 << 24 >> 24 == 1;
    if ($9) {
      $_04 = $7;
      label = 2;
      break;
    } else {
      $_0_lcssa = $7;
      label = 3;
      break;
    }
   case 3:
    $10 = $_0_lcssa + 4 | 0;
    ___gmpz_set($z, $10);
    return;
  }
}
function _multiz_is0($m) {
  $m = $m | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $m | 0;
    $2 = HEAP8[$1] | 0;
    $3 = $2 << 24 >> 24 == 0;
    if ($3) {
      label = 2;
      break;
    } else {
      $9 = 0;
      label = 3;
      break;
    }
   case 2:
    $5 = $m + 4 | 0;
    $6 = _mpz_is082($5) | 0;
    $7 = ($6 | 0) != 0;
    $9 = $7;
    label = 3;
    break;
   case 3:
    $10 = $9 & 1;
    return $10 | 0;
  }
  return 0;
}
function _multiz_count($m) {
  $m = $m | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $m | 0;
    $2 = HEAP8[$1] | 0;
    $3 = $2 << 24 >> 24 == 1;
    if ($3) {
      label = 2;
      break;
    } else {
      $_0 = -1;
      label = 3;
      break;
    }
   case 2:
    $5 = $m + 4 | 0;
    $6 = $5;
    $7 = _darray_count($6) | 0;
    $_0 = $7;
    label = 3;
    break;
   case 3:
    return $_0 | 0;
  }
  return 0;
}
function _multiz_at($m, $i) {
  $m = $m | 0;
  $i = $i | 0;
  return _darray_at($m + 4 | 0, $i) | 0;
}
function _element_set106($e, $a) {
  $e = $e | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 20 >> 2] & 1023]($e, $a);
  return;
}
function _element_set0107($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 24 >> 2] & 1023]($e);
  return;
}
function _field_clear_fq($f) {
  $f = $f | 0;
  return;
}
function _fq_item_count($e) {
  $e = $e | 0;
  return 2;
}
function _fq_item($e, $i) {
  $e = $e | 0;
  $i = $i | 0;
  var $1 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    if (($i | 0) == 0) {
      label = 2;
      break;
    } else if (($i | 0) == 1) {
      label = 3;
      break;
    } else {
      $_0 = 0;
      label = 4;
      break;
    }
   case 2:
    $4 = $2;
    $_0 = $4;
    label = 4;
    break;
   case 3:
    $6 = $2 + 8 | 0;
    $7 = $6;
    $_0 = $7;
    label = 4;
    break;
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function _fq_get_x($a) {
  $a = $a | 0;
  return HEAP32[$a + 4 >> 2] | 0;
}
function _fq_get_y($a) {
  $a = $a | 0;
  return (HEAP32[$a + 4 >> 2] | 0) + 8 | 0;
}
function _field_init_quadratic($f, $fbase) {
  $f = $f | 0;
  $fbase = $fbase | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $f;
    _field_init($1);
    $2 = $f | 0;
    HEAP32[$2 >> 2] = 24;
    $3 = $fbase;
    $4 = $f + 212 | 0;
    HEAP32[$4 >> 2] = $3;
    $5 = $f + 4 | 0;
    HEAP32[$5 >> 2] = 478;
    $6 = $f + 8 | 0;
    HEAP32[$6 >> 2] = 298;
    $7 = $f + 76 | 0;
    HEAP32[$7 >> 2] = 746;
    $8 = $f + 12 | 0;
    HEAP32[$8 >> 2] = 202;
    $9 = $f + 172 | 0;
    HEAP32[$9 >> 2] = 68;
    $10 = $f + 36 | 0;
    HEAP32[$10 >> 2] = 210;
    $11 = $f + 168 | 0;
    HEAP32[$11 >> 2] = 50;
    $12 = $f + 16 | 0;
    HEAP32[$12 >> 2] = 738;
    $13 = $f + 32 | 0;
    HEAP32[$13 >> 2] = 590;
    $14 = $f + 144 | 0;
    HEAP32[$14 >> 2] = 700;
    $15 = $f + 40 | 0;
    HEAP32[$15 >> 2] = 56;
    $16 = $f + 44 | 0;
    HEAP32[$16 >> 2] = 500;
    $17 = $f + 20 | 0;
    HEAP32[$17 >> 2] = 100;
    $18 = $f + 48 | 0;
    HEAP32[$18 >> 2] = 734;
    $19 = $f + 84 | 0;
    HEAP32[$19 >> 2] = 380;
    $20 = $f + 88 | 0;
    HEAP32[$20 >> 2] = 286;
    $21 = $f + 112 | 0;
    HEAP32[$21 >> 2] = 438;
    $22 = $f + 96 | 0;
    HEAP32[$22 >> 2] = 196;
    $23 = $f + 124 | 0;
    HEAP32[$23 >> 2] = 658;
    $24 = $f + 148 | 0;
    HEAP32[$24 >> 2] = 646;
    $25 = $f + 120 | 0;
    HEAP32[$25 >> 2] = 526;
    $26 = $f + 128 | 0;
    HEAP32[$26 >> 2] = 628;
    $27 = $f + 132 | 0;
    HEAP32[$27 >> 2] = 22;
    $28 = $f + 136 | 0;
    HEAP32[$28 >> 2] = 134;
    $29 = $f + 140 | 0;
    HEAP32[$29 >> 2] = 132;
    $30 = $f + 24 | 0;
    HEAP32[$30 >> 2] = 334;
    $31 = $f + 28 | 0;
    HEAP32[$31 >> 2] = 332;
    $32 = $f + 52 | 0;
    HEAP32[$32 >> 2] = 136;
    $33 = $f + 56 | 0;
    HEAP32[$33 >> 2] = 264;
    $34 = $f + 152 | 0;
    HEAP32[$34 >> 2] = 634;
    $35 = $f + 156 | 0;
    HEAP32[$35 >> 2] = 664;
    $36 = $f + 176 | 0;
    HEAP32[$36 >> 2] = 226;
    $37 = $f + 60 | 0;
    HEAP32[$37 >> 2] = 340;
    $38 = $f + 64 | 0;
    HEAP32[$38 >> 2] = 544;
    $39 = $f + 68 | 0;
    HEAP32[$39 >> 2] = 148;
    $40 = $f + 72 | 0;
    HEAP32[$40 >> 2] = 146;
    $41 = $f + 196 | 0;
    $42 = $fbase + 196 | 0;
    ___gmpz_mul($41, $42, $42);
    $43 = $fbase + 164 | 0;
    $44 = HEAP32[$43 >> 2] | 0;
    $45 = ($44 | 0) < 0;
    if ($45) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $47 = $f + 160 | 0;
    HEAP32[$47 >> 2] = 698;
    $48 = $f + 164 | 0;
    HEAP32[$48 >> 2] = -1;
    label = 4;
    break;
   case 3:
    $50 = $44 << 1;
    $51 = $f + 164 | 0;
    HEAP32[$51 >> 2] = $50;
    label = 4;
    break;
   case 4:
    return;
  }
}
function _fq_init($e) {
  $e = $e | 0;
  var $2 = 0, $8 = 0;
  $2 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](16) | 0;
  HEAP32[$e + 4 >> 2] = $2;
  $8 = HEAP32[(HEAP32[$e >> 2] | 0) + 212 >> 2] | 0;
  _element_init108($2, $8);
  _element_init108($2 + 8 | 0, $8);
  return;
}
function _fq_clear($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0;
  $1 = $e + 4 | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  _element_clear116($2);
  _element_clear116($2 + 8 | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$1 >> 2] | 0);
  return;
}
function _fq_set_si($e, $i) {
  $e = $e | 0;
  $i = $i | 0;
  var $2 = 0;
  $2 = HEAP32[$e + 4 >> 2] | 0;
  _element_set_si111($2, $i);
  _element_set0107($2 + 8 | 0);
  return;
}
function _fq_set_mpz($e, $z) {
  $e = $e | 0;
  $z = $z | 0;
  var $2 = 0;
  $2 = HEAP32[$e + 4 >> 2] | 0;
  _element_set_mpz125($2, $z);
  _element_set0107($2 + 8 | 0);
  return;
}
function _fq_to_mpz($z, $e) {
  $z = $z | 0;
  $e = $e | 0;
  _element_to_mpz124($z, HEAP32[$e + 4 >> 2] | 0);
  return;
}
function _fq_out_str($stream, $base, $e) {
  $stream = $stream | 0;
  $base = $base | 0;
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $_ = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $stream;
    $4 = _fputc(91, $3 | 0) | 0;
    $5 = ($4 | 0) == -1;
    if ($5) {
      label = 6;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $7 = $2;
    $8 = _element_out_str($stream, $base, $7) | 0;
    $9 = ($8 | 0) == 0;
    if ($9) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $11 = _fputs(6688, $stream | 0) | 0;
    $12 = ($11 | 0) == -1;
    if ($12) {
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $14 = $2 + 8 | 0;
    $15 = $14;
    $16 = _element_out_str($stream, $base, $15) | 0;
    $17 = ($16 | 0) == 0;
    if ($17) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $19 = _fputc(93, $3 | 0) | 0;
    $20 = ($19 | 0) == -1;
    $21 = $16 + $8 | 0;
    $_ = $20 ? 0 : $21;
    return $_ | 0;
   case 6:
    return 0;
  }
  return 0;
}
function _fq_snprint($s, $n, $e) {
  $s = $s | 0;
  $n = $n | 0;
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $_ = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $_46 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $_47 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $_48 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $_49 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = _snprintf($s | 0, $n | 0, 7352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
    $4 = ($3 | 0) < 0;
    if ($4) {
      $_0 = $3;
      label = 6;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $6 = $3 >>> 0 < $n >>> 0;
    $7 = $n - $3 | 0;
    $_ = $6 ? $7 : 0;
    $8 = $s + $3 | 0;
    $9 = $2;
    $10 = _element_snprint($8, $_, $9) | 0;
    $11 = ($10 | 0) < 0;
    if ($11) {
      $_0 = $10;
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $13 = $10 + $3 | 0;
    $14 = $13 >>> 0 < $n >>> 0;
    $15 = $n - $13 | 0;
    $_46 = $14 ? $15 : 0;
    $16 = $s + $13 | 0;
    $17 = _snprintf($16 | 0, $_46 | 0, 6688, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
    $18 = ($17 | 0) < 0;
    if ($18) {
      $_0 = $17;
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $20 = $17 + $13 | 0;
    $21 = $20 >>> 0 < $n >>> 0;
    $22 = $n - $20 | 0;
    $_47 = $21 ? $22 : 0;
    $23 = $s + $20 | 0;
    $24 = $2 + 8 | 0;
    $25 = $24;
    $26 = _element_snprint($23, $_47, $25) | 0;
    $27 = ($26 | 0) < 0;
    if ($27) {
      $_0 = $26;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $29 = $26 + $20 | 0;
    $30 = $29 >>> 0 < $n >>> 0;
    $31 = $n - $29 | 0;
    $_48 = $30 ? $31 : 0;
    $32 = $s + $29 | 0;
    $33 = _snprintf($32 | 0, $_48 | 0, 6080, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
    $34 = ($33 | 0) < 0;
    $35 = $34 ? 0 : $29;
    $_49 = $35 + $33 | 0;
    STACKTOP = __stackBase__;
    return $_49 | 0;
   case 6:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _fq_set_multiz($e, $m) {
  $e = $e | 0;
  $m = $m | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = _multiz_is_z($m) | 0;
    $4 = ($3 | 0) == 0;
    $5 = $2;
    if ($4) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _element_set_multiz($5, $m);
    $7 = $2 + 8 | 0;
    $8 = $7;
    _element_set0107($8);
    label = 6;
    break;
   case 3:
    $10 = _multiz_at($m, 0) | 0;
    _element_set_multiz($5, $10);
    $11 = _multiz_count($m) | 0;
    $12 = ($11 | 0) < 2;
    $13 = $2 + 8 | 0;
    $14 = $13;
    if ($12) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _element_set0107($14);
    label = 6;
    break;
   case 5:
    $17 = _multiz_at($m, 1) | 0;
    _element_set_multiz($14, $17);
    label = 6;
    break;
   case 6:
    return;
  }
}
function _fq_set_str($e, $s, $base) {
  $e = $e | 0;
  $s = $s | 0;
  $base = $base | 0;
  var $cp_0 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $_sum = 0, $18 = 0, $cp_1 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $_sum19 = 0, $35 = 0, $36 = 0, $37 = 0, $_sum20 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    _element_set0107($e);
    $cp_0 = $s;
    label = 2;
    break;
   case 2:
    $2 = HEAP8[$cp_0] | 0;
    $3 = $2 << 24 >> 24 == 0;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $4 = $cp_0 + 1 | 0;
    $10 = $4;
    label = 5;
    break;
   case 4:
    $6 = $2 << 24 >> 24;
    $7 = _isspace($6 | 0) | 0;
    $8 = ($7 | 0) == 0;
    $9 = $cp_0 + 1 | 0;
    if ($8) {
      $10 = $9;
      label = 5;
      break;
    } else {
      $cp_0 = $9;
      label = 2;
      break;
    }
   case 5:
    $11 = HEAP8[$cp_0] | 0;
    $12 = $11 << 24 >> 24 == 91;
    if ($12) {
      label = 6;
      break;
    } else {
      $_0 = 0;
      label = 13;
      break;
    }
   case 6:
    $14 = $e + 4 | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $15;
    $17 = _element_set_str($16, $10, $base) | 0;
    $_sum = $17 + 1 | 0;
    $18 = $cp_0 + $_sum | 0;
    $cp_1 = $18;
    label = 7;
    break;
   case 7:
    $20 = HEAP8[$cp_1] | 0;
    $21 = $20 << 24 >> 24 == 0;
    if ($21) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $22 = $cp_1 + 1 | 0;
    $28 = $22;
    label = 10;
    break;
   case 9:
    $24 = $20 << 24 >> 24;
    $25 = _isspace($24 | 0) | 0;
    $26 = ($25 | 0) == 0;
    $27 = $cp_1 + 1 | 0;
    if ($26) {
      $28 = $27;
      label = 10;
      break;
    } else {
      $cp_1 = $27;
      label = 7;
      break;
    }
   case 10:
    $29 = HEAP8[$cp_1] | 0;
    $30 = $29 << 24 >> 24 == 44;
    if ($30) {
      label = 11;
      break;
    } else {
      $_0 = 0;
      label = 13;
      break;
    }
   case 11:
    $32 = $15 + 8 | 0;
    $33 = $32;
    $34 = _element_set_str($33, $28, $base) | 0;
    $_sum19 = $34 + 1 | 0;
    $35 = $cp_1 + $_sum19 | 0;
    $36 = HEAP8[$35] | 0;
    $37 = $36 << 24 >> 24 == 93;
    if ($37) {
      label = 12;
      break;
    } else {
      $_0 = 0;
      label = 13;
      break;
    }
   case 12:
    $_sum20 = $34 + 2 | 0;
    $39 = $cp_1 + $_sum20 | 0;
    $40 = $39;
    $41 = $s;
    $42 = $40 - $41 | 0;
    $_0 = $42;
    label = 13;
    break;
   case 13:
    return $_0 | 0;
  }
  return 0;
}
function _fq_sign($n) {
  $n = $n | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = _element_sign($3) | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 2;
      break;
    } else {
      $_0 = $4;
      label = 3;
      break;
    }
   case 2:
    $7 = $2 + 8 | 0;
    $8 = $7;
    $9 = _element_sign($8) | 0;
    $_0 = $9;
    label = 3;
    break;
   case 3:
    return $_0 | 0;
  }
  return 0;
}
function _fq_add($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $2 = 0, $4 = 0, $6 = 0;
  $2 = HEAP32[$a + 4 >> 2] | 0;
  $4 = HEAP32[$b + 4 >> 2] | 0;
  $6 = HEAP32[$n + 4 >> 2] | 0;
  _element_add110($6, $2, $4);
  _element_add110($6 + 8 | 0, $2 + 8 | 0, $4 + 8 | 0);
  return;
}
function _fq_sub($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $2 = 0, $4 = 0, $6 = 0;
  $2 = HEAP32[$a + 4 >> 2] | 0;
  $4 = HEAP32[$b + 4 >> 2] | 0;
  $6 = HEAP32[$n + 4 >> 2] | 0;
  _element_sub115($6, $2, $4);
  _element_sub115($6 + 8 | 0, $2 + 8 | 0, $4 + 8 | 0);
  return;
}
function _fq_set($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  var $2 = 0, $4 = 0;
  $2 = HEAP32[$a + 4 >> 2] | 0;
  $4 = HEAP32[$n + 4 >> 2] | 0;
  _element_set106($4, $2);
  _element_set106($4 + 8 | 0, $2 + 8 | 0);
  return;
}
function _fq_mul($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $e0 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $e0 = __stackBase__ | 0;
  $2 = HEAP32[$a + 4 >> 2] | 0;
  $4 = HEAP32[$b + 4 >> 2] | 0;
  $6 = HEAP32[$n + 4 >> 2] | 0;
  $9 = _fq_nqr(HEAP32[$n >> 2] | 0) | 0;
  $10 = $e0 | 0;
  $11 = $2;
  _element_init108($10, HEAP32[$2 >> 2] | 0);
  $14 = __stackBase__ + 8 | 0;
  $15 = $e0 | 0;
  _element_init108($14, HEAP32[$15 >> 2] | 0);
  $17 = __stackBase__ + 16 | 0;
  _element_init108($17, HEAP32[$15 >> 2] | 0);
  $20 = $2 + 8 | 0;
  _element_add110($10, $11, $20);
  $21 = $4;
  $23 = $4 + 8 | 0;
  _element_add110($14, $21, $23);
  _element_mul113($17, $10, $14);
  _element_mul113($10, $11, $21);
  _element_mul113($14, $20, $23);
  $24 = $6;
  _element_mul113($24, $14, $9);
  _element_add110($24, $24, $10);
  _element_sub115($17, $17, $10);
  _element_sub115($6 + 8 | 0, $17, $14);
  _element_clear116($10);
  _element_clear116($14);
  _element_clear116($17);
  STACKTOP = __stackBase__;
  return;
}
function _fq_mul_mpz($n, $a, $z) {
  $n = $n | 0;
  $a = $a | 0;
  $z = $z | 0;
  var $2 = 0, $4 = 0;
  $2 = HEAP32[$a + 4 >> 2] | 0;
  $4 = HEAP32[$n + 4 >> 2] | 0;
  _element_mul_mpz($4, $2, $z);
  _element_mul_mpz($4 + 8 | 0, $2 + 8 | 0, $z);
  return;
}
function _fq_mul_si($n, $a, $z) {
  $n = $n | 0;
  $a = $a | 0;
  $z = $z | 0;
  var $2 = 0, $4 = 0;
  $2 = HEAP32[$a + 4 >> 2] | 0;
  $4 = HEAP32[$n + 4 >> 2] | 0;
  _element_mul_si($4, $2, $z);
  _element_mul_si($4 + 8 | 0, $2 + 8 | 0, $z);
  return;
}
function _fq_square($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  var $e0 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $12 = 0, $16 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $e0 = __stackBase__ | 0;
  $2 = HEAP32[$a + 4 >> 2] | 0;
  $4 = HEAP32[$n + 4 >> 2] | 0;
  $7 = _fq_nqr(HEAP32[$n >> 2] | 0) | 0;
  $8 = $e0 | 0;
  $9 = $2;
  _element_init108($8, HEAP32[$2 >> 2] | 0);
  $12 = __stackBase__ + 8 | 0;
  _element_init108($12, HEAP32[$e0 >> 2] | 0);
  _element_square109($8, $9);
  $16 = $2 + 8 | 0;
  _element_square109($12, $16);
  _element_mul113($12, $12, $7);
  _element_add110($8, $8, $12);
  _element_mul113($12, $9, $16);
  _element_double($12, $12);
  _element_set106($4, $8);
  _element_set106($4 + 8 | 0, $12);
  _element_clear116($8);
  _element_clear116($12);
  STACKTOP = __stackBase__;
  return;
}
function _fq_double($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  var $2 = 0, $4 = 0;
  $2 = HEAP32[$a + 4 >> 2] | 0;
  $4 = HEAP32[$n + 4 >> 2] | 0;
  _element_double($4, $2);
  _element_double($4 + 8 | 0, $2 + 8 | 0);
  return;
}
function _fq_neg($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  var $2 = 0, $4 = 0;
  $2 = HEAP32[$a + 4 >> 2] | 0;
  $4 = HEAP32[$n + 4 >> 2] | 0;
  _element_neg117($4, $2);
  _element_neg117($4 + 8 | 0, $2 + 8 | 0);
  return;
}
function _fq_cmp($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $b + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $2;
    $6 = $4;
    $7 = _element_cmp123($5, $6) | 0;
    $8 = ($7 | 0) == 0;
    if ($8) {
      label = 2;
      break;
    } else {
      $17 = 1;
      label = 3;
      break;
    }
   case 2:
    $10 = $2 + 8 | 0;
    $11 = $10;
    $12 = $4 + 8 | 0;
    $13 = $12;
    $14 = _element_cmp123($11, $13) | 0;
    $15 = ($14 | 0) != 0;
    $17 = $15;
    label = 3;
    break;
   case 3:
    $18 = $17 & 1;
    return $18 | 0;
  }
  return 0;
}
function _fq_invert($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  var $e0 = 0, $2 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $12 = 0, $16 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $e0 = __stackBase__ | 0;
  $2 = HEAP32[$a + 4 >> 2] | 0;
  $4 = HEAP32[$n + 4 >> 2] | 0;
  $7 = _fq_nqr(HEAP32[$n >> 2] | 0) | 0;
  $8 = $e0 | 0;
  $9 = $2;
  _element_init108($8, HEAP32[$2 >> 2] | 0);
  $12 = __stackBase__ + 8 | 0;
  _element_init108($12, HEAP32[$e0 >> 2] | 0);
  _element_square109($8, $9);
  $16 = $2 + 8 | 0;
  _element_square109($12, $16);
  _element_mul113($12, $12, $7);
  _element_sub115($8, $8, $12);
  _element_invert112($8, $8);
  _element_mul113($4, $9, $8);
  _element_neg117($8, $8);
  _element_mul113($4 + 8 | 0, $16, $8);
  _element_clear116($8);
  _element_clear116($12);
  STACKTOP = __stackBase__;
  return;
}
function _fq_random($e) {
  $e = $e | 0;
  var $2 = 0;
  $2 = HEAP32[$e + 4 >> 2] | 0;
  _element_random122($2);
  _element_random122($2 + 8 | 0);
  return;
}
function _fq_from_hash($n, $data, $len) {
  $n = $n | 0;
  $data = $data | 0;
  $len = $len | 0;
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$n + 4 >> 2] | 0;
  $3 = ($len | 0) / 2 & -1;
  _element_from_hash183($2, $data, $3);
  _element_from_hash183($2 + 8 | 0, $data + $3 | 0, $len - $3 | 0);
  return;
}
function _fq_is1($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = _element_is1121($3) | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      $12 = 0;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $7 = $2 + 8 | 0;
    $8 = $7;
    $9 = _element_is0182($8) | 0;
    $10 = ($9 | 0) != 0;
    $12 = $10;
    label = 3;
    break;
   case 3:
    $13 = $12 & 1;
    return $13 | 0;
  }
  return 0;
}
function _fq_is0($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = _element_is0182($3) | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      $12 = 0;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $7 = $2 + 8 | 0;
    $8 = $7;
    $9 = _element_is0182($8) | 0;
    $10 = ($9 | 0) != 0;
    $12 = $10;
    label = 3;
    break;
   case 3:
    $13 = $12 & 1;
    return $13 | 0;
  }
  return 0;
}
function _fq_set0($e) {
  $e = $e | 0;
  var $2 = 0;
  $2 = HEAP32[$e + 4 >> 2] | 0;
  _element_set0107($2);
  _element_set0107($2 + 8 | 0);
  return;
}
function _fq_set1($e) {
  $e = $e | 0;
  var $2 = 0;
  $2 = HEAP32[$e + 4 >> 2] | 0;
  _element_set1120($2);
  _element_set0107($2 + 8 | 0);
  return;
}
function _fq_is_sqr($e) {
  $e = $e | 0;
  var $e0 = 0, $2 = 0, $5 = 0, $6 = 0, $10 = 0, $15 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $e0 = __stackBase__ | 0;
  $2 = HEAP32[$e + 4 >> 2] | 0;
  $5 = _fq_nqr(HEAP32[$e >> 2] | 0) | 0;
  $6 = $e0 | 0;
  _element_init108($6, HEAP32[$2 >> 2] | 0);
  $10 = __stackBase__ + 8 | 0;
  _element_init108($10, HEAP32[$e0 >> 2] | 0);
  _element_square109($6, $2);
  _element_square109($10, $2 + 8 | 0);
  _element_mul113($10, $10, $5);
  _element_sub115($6, $6, $10);
  $15 = _element_is_sqr114($6) | 0;
  _element_clear116($6);
  _element_clear116($10);
  STACKTOP = __stackBase__;
  return $15 | 0;
}
function _fq_sqrt($n, $e) {
  $n = $n | 0;
  $e = $e | 0;
  var $e0 = 0, $e1 = 0, $e2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $e0 = __stackBase__ | 0;
    $e1 = __stackBase__ + 8 | 0;
    $e2 = __stackBase__ + 16 | 0;
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $n + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $n | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = _fq_nqr($6) | 0;
    $8 = $e0 | 0;
    $9 = $2;
    $10 = $2;
    $11 = HEAP32[$10 >> 2] | 0;
    _element_init108($8, $11);
    $12 = $e1 | 0;
    $13 = $e0 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    _element_init108($12, $14);
    $15 = $e2 | 0;
    $16 = HEAP32[$13 >> 2] | 0;
    _element_init108($15, $16);
    _element_square109($8, $9);
    $17 = $2 + 8 | 0;
    $18 = $17;
    _element_square109($12, $18);
    _element_mul113($12, $12, $7);
    _element_sub115($8, $8, $12);
    _element_sqrt($8, $8);
    _element_add110($12, $9, $8);
    _element_set_si111($15, 2);
    _element_invert112($15, $15);
    _element_mul113($12, $12, $15);
    $19 = _element_is_sqr114($12) | 0;
    $20 = ($19 | 0) == 0;
    if ($20) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _element_sub115($12, $12, $8);
    label = 3;
    break;
   case 3:
    _element_sqrt($8, $12);
    _element_add110($12, $8, $8);
    _element_invert112($12, $12);
    $23 = $4 + 8 | 0;
    $24 = $23;
    _element_mul113($24, $18, $12);
    $25 = $4;
    _element_set106($25, $8);
    _element_clear116($8);
    _element_clear116($12);
    _element_clear116($15);
    STACKTOP = __stackBase__;
    return;
  }
}
function _fq_to_bytes($data, $e) {
  $data = $data | 0;
  $e = $e | 0;
  var $2 = 0, $4 = 0;
  $2 = HEAP32[$e + 4 >> 2] | 0;
  $4 = _element_to_bytes119($data, $2) | 0;
  return (_element_to_bytes119($data + $4 | 0, $2 + 8 | 0) | 0) + $4 | 0;
}
function _fq_from_bytes($e, $data) {
  $e = $e | 0;
  $data = $data | 0;
  var $2 = 0, $4 = 0;
  $2 = HEAP32[$e + 4 >> 2] | 0;
  $4 = _element_from_bytes181($2, $data) | 0;
  return (_element_from_bytes181($2 + 8 | 0, $data + $4 | 0) | 0) + $4 | 0;
}
function _fq_out_info($out, $f) {
  $out = $out | 0;
  $f = $f | 0;
  var $2 = 0, $3 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $2 = HEAP32[$f + 212 >> 2] | 0;
  $3 = _fq_nqr($f) | 0;
  _element_fprintf($out, 8960, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $3, tempInt) | 0);
  _field_out_info($out, $2);
  STACKTOP = __stackBase__;
  return;
}
function _fq_length_in_bytes($e) {
  $e = $e | 0;
  var $2 = 0, $4 = 0;
  $2 = HEAP32[$e + 4 >> 2] | 0;
  $4 = _element_length_in_bytes118($2) | 0;
  return (_element_length_in_bytes118($2 + 8 | 0) | 0) + $4 | 0;
}
function _field_clear_fi($f) {
  $f = $f | 0;
  return;
}
function _field_init_fi($f, $fbase) {
  $f = $f | 0;
  $fbase = $fbase | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $f;
    _field_init($1);
    $2 = $f | 0;
    HEAP32[$2 >> 2] = 552;
    $3 = $fbase;
    $4 = $f + 212 | 0;
    HEAP32[$4 >> 2] = $3;
    $5 = $f + 4 | 0;
    HEAP32[$5 >> 2] = 478;
    $6 = $f + 8 | 0;
    HEAP32[$6 >> 2] = 298;
    $7 = $f + 76 | 0;
    HEAP32[$7 >> 2] = 746;
    $8 = $f + 12 | 0;
    HEAP32[$8 >> 2] = 202;
    $9 = $f + 172 | 0;
    HEAP32[$9 >> 2] = 68;
    $10 = $f + 36 | 0;
    HEAP32[$10 >> 2] = 210;
    $11 = $f + 168 | 0;
    HEAP32[$11 >> 2] = 50;
    $12 = $f + 16 | 0;
    HEAP32[$12 >> 2] = 738;
    $13 = $f + 32 | 0;
    HEAP32[$13 >> 2] = 590;
    $14 = $f + 144 | 0;
    HEAP32[$14 >> 2] = 700;
    $15 = $f + 40 | 0;
    HEAP32[$15 >> 2] = 56;
    $16 = $f + 44 | 0;
    HEAP32[$16 >> 2] = 500;
    $17 = $f + 20 | 0;
    HEAP32[$17 >> 2] = 100;
    $18 = $f + 48 | 0;
    HEAP32[$18 >> 2] = 34;
    $19 = $f + 84 | 0;
    HEAP32[$19 >> 2] = 380;
    $20 = $f + 88 | 0;
    HEAP32[$20 >> 2] = 286;
    $21 = $f + 112 | 0;
    HEAP32[$21 >> 2] = 304;
    $22 = $f + 96 | 0;
    HEAP32[$22 >> 2] = 196;
    $23 = $f + 124 | 0;
    HEAP32[$23 >> 2] = 658;
    $24 = $f + 148 | 0;
    HEAP32[$24 >> 2] = 646;
    $25 = $f + 120 | 0;
    HEAP32[$25 >> 2] = 470;
    $26 = $f + 128 | 0;
    HEAP32[$26 >> 2] = 628;
    $27 = $f + 132 | 0;
    HEAP32[$27 >> 2] = 22;
    $28 = $f + 136 | 0;
    HEAP32[$28 >> 2] = 134;
    $29 = $f + 140 | 0;
    HEAP32[$29 >> 2] = 132;
    $30 = $f + 24 | 0;
    HEAP32[$30 >> 2] = 334;
    $31 = $f + 28 | 0;
    HEAP32[$31 >> 2] = 332;
    $32 = $f + 52 | 0;
    HEAP32[$32 >> 2] = 164;
    $33 = $f + 56 | 0;
    HEAP32[$33 >> 2] = 174;
    $34 = $f + 152 | 0;
    HEAP32[$34 >> 2] = 634;
    $35 = $f + 156 | 0;
    HEAP32[$35 >> 2] = 664;
    $36 = $f + 176 | 0;
    HEAP32[$36 >> 2] = 654;
    $37 = $f + 60 | 0;
    HEAP32[$37 >> 2] = 340;
    $38 = $f + 64 | 0;
    HEAP32[$38 >> 2] = 544;
    $39 = $f + 68 | 0;
    HEAP32[$39 >> 2] = 148;
    $40 = $f + 72 | 0;
    HEAP32[$40 >> 2] = 146;
    $41 = $f + 196 | 0;
    $42 = $fbase + 196 | 0;
    ___gmpz_mul($41, $42, $42);
    $43 = $fbase + 164 | 0;
    $44 = HEAP32[$43 >> 2] | 0;
    $45 = ($44 | 0) < 0;
    if ($45) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $47 = $f + 160 | 0;
    HEAP32[$47 >> 2] = 698;
    $48 = $f + 164 | 0;
    HEAP32[$48 >> 2] = -1;
    label = 4;
    break;
   case 3:
    $50 = $44 << 1;
    $51 = $f + 164 | 0;
    HEAP32[$51 >> 2] = $50;
    label = 4;
    break;
   case 4:
    return;
  }
}
function _fi_mul($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $e0 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $20 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $e0 = __stackBase__ | 0;
  $2 = HEAP32[$a + 4 >> 2] | 0;
  $4 = HEAP32[$b + 4 >> 2] | 0;
  $6 = HEAP32[$n + 4 >> 2] | 0;
  $7 = $e0 | 0;
  $8 = $2;
  _element_init108($7, HEAP32[$2 >> 2] | 0);
  $11 = __stackBase__ + 8 | 0;
  $12 = $e0 | 0;
  _element_init108($11, HEAP32[$12 >> 2] | 0);
  $14 = __stackBase__ + 16 | 0;
  _element_init108($14, HEAP32[$12 >> 2] | 0);
  $17 = $2 + 8 | 0;
  _element_add110($7, $8, $17);
  $18 = $4;
  $20 = $4 + 8 | 0;
  _element_add110($11, $18, $20);
  _element_mul113($14, $7, $11);
  _element_mul113($7, $8, $18);
  _element_sub115($14, $14, $7);
  _element_mul113($11, $17, $20);
  _element_sub115($6, $7, $11);
  _element_sub115($6 + 8 | 0, $14, $11);
  _element_clear116($7);
  _element_clear116($11);
  _element_clear116($14);
  STACKTOP = __stackBase__;
  return;
}
function _fi_square($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  var $e0 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $13 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $e0 = __stackBase__ | 0;
  $2 = HEAP32[$a + 4 >> 2] | 0;
  $4 = HEAP32[$n + 4 >> 2] | 0;
  $5 = $e0 | 0;
  $6 = $2;
  _element_init108($5, HEAP32[$2 >> 2] | 0);
  $9 = __stackBase__ + 8 | 0;
  _element_init108($9, HEAP32[$e0 >> 2] | 0);
  $13 = $2 + 8 | 0;
  _element_add110($5, $6, $13);
  _element_sub115($9, $6, $13);
  _element_mul113($5, $5, $9);
  _element_mul113($9, $6, $13);
  _element_add110($9, $9, $9);
  _element_set106($4, $5);
  _element_set106($4 + 8 | 0, $9);
  _element_clear116($5);
  _element_clear116($9);
  STACKTOP = __stackBase__;
  return;
}
function _fi_invert($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  var $e0 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $13 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $e0 = __stackBase__ | 0;
  $2 = HEAP32[$a + 4 >> 2] | 0;
  $4 = HEAP32[$n + 4 >> 2] | 0;
  $5 = $e0 | 0;
  $6 = $2;
  _element_init108($5, HEAP32[$2 >> 2] | 0);
  $9 = __stackBase__ + 8 | 0;
  _element_init108($9, HEAP32[$e0 >> 2] | 0);
  _element_square109($5, $6);
  $13 = $2 + 8 | 0;
  _element_square109($9, $13);
  _element_add110($5, $5, $9);
  _element_invert112($5, $5);
  _element_mul113($4, $6, $5);
  _element_neg117($5, $5);
  _element_mul113($4 + 8 | 0, $13, $5);
  _element_clear116($5);
  _element_clear116($9);
  STACKTOP = __stackBase__;
  return;
}
function _fi_is_sqr($e) {
  $e = $e | 0;
  var $e0 = 0, $2 = 0, $3 = 0, $7 = 0, $12 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $e0 = __stackBase__ | 0;
  $2 = HEAP32[$e + 4 >> 2] | 0;
  $3 = $e0 | 0;
  _element_init108($3, HEAP32[$2 >> 2] | 0);
  $7 = __stackBase__ + 8 | 0;
  _element_init108($7, HEAP32[$e0 >> 2] | 0);
  _element_square109($3, $2);
  _element_square109($7, $2 + 8 | 0);
  _element_add110($3, $3, $7);
  $12 = _element_is_sqr114($3) | 0;
  _element_clear116($3);
  _element_clear116($7);
  STACKTOP = __stackBase__;
  return $12 | 0;
}
function _fi_sqrt($n, $e) {
  $n = $n | 0;
  $e = $e | 0;
  var $e0 = 0, $e1 = 0, $e2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $e0 = __stackBase__ | 0;
    $e1 = __stackBase__ + 8 | 0;
    $e2 = __stackBase__ + 16 | 0;
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $n + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e0 | 0;
    $6 = $2;
    $7 = $2;
    $8 = HEAP32[$7 >> 2] | 0;
    _element_init108($5, $8);
    $9 = $e1 | 0;
    $10 = $e0 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    _element_init108($9, $11);
    $12 = $e2 | 0;
    $13 = HEAP32[$10 >> 2] | 0;
    _element_init108($12, $13);
    _element_square109($5, $6);
    $14 = $2 + 8 | 0;
    $15 = $14;
    _element_square109($9, $15);
    _element_add110($5, $5, $9);
    _element_sqrt($5, $5);
    _element_add110($9, $6, $5);
    _element_set_si111($12, 2);
    _element_invert112($12, $12);
    _element_mul113($9, $9, $12);
    $16 = _element_is_sqr114($9) | 0;
    $17 = ($16 | 0) == 0;
    if ($17) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _element_sub115($9, $9, $5);
    label = 3;
    break;
   case 3:
    _element_sqrt($5, $9);
    _element_add110($9, $5, $5);
    _element_invert112($9, $9);
    $20 = $4 + 8 | 0;
    $21 = $20;
    _element_mul113($21, $15, $9);
    $22 = $4;
    _element_set106($22, $5);
    _element_clear116($5);
    _element_clear116($9);
    _element_clear116($12);
    STACKTOP = __stackBase__;
    return;
  }
}
function _fi_out_info($out, $f) {
  $out = $out | 0;
  $f = $f | 0;
  var $2 = 0;
  $2 = HEAP32[$f + 212 >> 2] | 0;
  _fwrite(9168, 31, 1, $out | 0);
  _field_out_info($out, $2);
  return;
}
function _element_init108($e, $f) {
  $e = $e | 0;
  $f = $f | 0;
  HEAP32[$e >> 2] = $f;
  FUNCTION_TABLE_vi[HEAP32[$f + 4 >> 2] & 1023]($e);
  return;
}
function _element_square109($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 112 >> 2] & 1023]($n, $a);
  return;
}
function _element_add110($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 40 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_sqrt($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$a >> 2] | 0) + 56 >> 2] & 1023]($a, $b);
  return;
}
function _element_set_si111($e, $i) {
  $e = $e | 0;
  $i = $i | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 76 >> 2] & 1023]($e, $i);
  return;
}
function _element_invert112($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 120 >> 2] & 1023]($n, $a);
  return;
}
function _element_mul113($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 48 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_is_sqr114($a) {
  $a = $a | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$a >> 2] | 0) + 52 >> 2] & 1023]($a) | 0;
}
function _element_sub115($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 44 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_clear116($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 8 >> 2] & 1023]($e);
  return;
}
function _element_neg117($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 124 >> 2] & 1023]($n, $a);
  return;
}
function _element_length_in_bytes118($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 164 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) < 0;
    if ($5) {
      label = 2;
      break;
    } else {
      $_0 = $4;
      label = 3;
      break;
    }
   case 2:
    $7 = $2 + 160 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = FUNCTION_TABLE_ii[$8 & 1023]($e) | 0;
    $_0 = $9;
    label = 3;
    break;
   case 3:
    return $_0 | 0;
  }
  return 0;
}
function _fq_nqr($f) {
  $f = $f | 0;
  return _field_get_nqr(HEAP32[$f + 212 >> 2] | 0) | 0;
}
function _element_from_bytes181($e, $data) {
  $e = $e | 0;
  $data = $data | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$e >> 2] | 0) + 156 >> 2] & 1023]($e, $data) | 0;
}
function _element_to_bytes119($data, $e) {
  $data = $data | 0;
  $e = $e | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$e >> 2] | 0) + 152 >> 2] & 1023]($data, $e) | 0;
}
function _element_set1120($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 28 >> 2] & 1023]($e);
  return;
}
function _element_is0182($n) {
  $n = $n | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$n >> 2] | 0) + 140 >> 2] & 1023]($n) | 0;
}
function _element_is1121($n) {
  $n = $n | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$n >> 2] | 0) + 136 >> 2] & 1023]($n) | 0;
}
function _element_from_hash183($e, $data, $len) {
  $e = $e | 0;
  $data = $data | 0;
  $len = $len | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$e >> 2] | 0) + 132 >> 2] & 1023]($e, $data, $len);
  return;
}
function _element_random122($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 128 >> 2] & 1023]($e);
  return;
}
function _element_cmp123($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$a >> 2] | 0) + 148 >> 2] & 1023]($a, $b) | 0;
}
function _element_double($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 96 >> 2] & 1023]($n, $a);
  return;
}
function _element_mul_si($n, $a, $z) {
  $n = $n | 0;
  $a = $a | 0;
  $z = $z | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 88 >> 2] & 1023]($n, $a, $z);
  return;
}
function _element_mul_mpz($n, $a, $z) {
  $n = $n | 0;
  $a = $a | 0;
  $z = $z | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 84 >> 2] & 1023]($n, $a, $z);
  return;
}
function _element_sign($a) {
  $a = $a | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$a >> 2] | 0) + 144 >> 2] & 1023]($a) | 0;
}
function _element_set_str($e, $s, $base) {
  $e = $e | 0;
  $s = $s | 0;
  $base = $base | 0;
  return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$e >> 2] | 0) + 32 >> 2] & 1023]($e, $s, $base) | 0;
}
function _element_set_multiz($e, $m) {
  $e = $e | 0;
  $m = $m | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 16 >> 2] & 1023]($e, $m);
  return;
}
function _element_snprint($s, $n, $e) {
  $s = $s | 0;
  $n = $n | 0;
  $e = $e | 0;
  return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$e >> 2] | 0) + 168 >> 2] & 1023]($s, $n, $e) | 0;
}
function _element_out_str($stream, $base, $e) {
  $stream = $stream | 0;
  $base = $base | 0;
  $e = $e | 0;
  return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$e >> 2] | 0) + 36 >> 2] & 1023]($stream, $base, $e) | 0;
}
function _element_to_mpz124($z, $e) {
  $z = $z | 0;
  $e = $e | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 172 >> 2] & 1023]($z, $e);
  return;
}
function _element_set_mpz125($e, $z) {
  $e = $e | 0;
  $z = $z | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 12 >> 2] & 1023]($e, $z);
  return;
}
function _field_init_poly($f, $base_field) {
  $f = $f | 0;
  $base_field = $base_field | 0;
  var $2 = 0;
  _field_init($f);
  $2 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](8) | 0;
  HEAP32[$f + 212 >> 2] = $2;
  HEAP32[$2 >> 2] = $base_field;
  HEAP32[$2 + 4 >> 2] = 398;
  HEAP32[$f >> 2] = 570;
  HEAP32[$f + 4 >> 2] = 374;
  HEAP32[$f + 8 >> 2] = 348;
  HEAP32[$f + 76 >> 2] = 762;
  HEAP32[$f + 16 >> 2] = 114;
  HEAP32[$f + 12 >> 2] = 794;
  HEAP32[$f + 172 >> 2] = 432;
  HEAP32[$f + 36 >> 2] = 688;
  HEAP32[$f + 168 >> 2] = 60;
  HEAP32[$f + 20 >> 2] = 668;
  HEAP32[$f + 144 >> 2] = 310;
  HEAP32[$f + 40 >> 2] = 572;
  HEAP32[$f + 96 >> 2] = 532;
  HEAP32[$f + 140 >> 2] = 812;
  HEAP32[$f + 136 >> 2] = 810;
  HEAP32[$f + 24 >> 2] = 772;
  HEAP32[$f + 28 >> 2] = 774;
  HEAP32[$f + 44 >> 2] = 254;
  HEAP32[$f + 124 >> 2] = 788;
  HEAP32[$f + 48 >> 2] = 488;
  HEAP32[$f + 84 >> 2] = 386;
  HEAP32[$f + 88 >> 2] = 518;
  HEAP32[$f + 148 >> 2] = 406;
  HEAP32[$f + 176 >> 2] = 252;
  HEAP32[$f + 60 >> 2] = 520;
  HEAP32[$f + 64 >> 2] = 410;
  HEAP32[$f + 152 >> 2] = 172;
  HEAP32[$f + 156 >> 2] = 126;
  HEAP32[$f + 164 >> 2] = -1;
  HEAP32[$f + 160 >> 2] = 540;
  return;
}
function _element_field_to_poly($f, $g) {
  $f = $f | 0;
  $g = $g | 0;
  _poly_alloc($f, 1);
  _element_set133(_poly_coeff($f, 0) | 0, $g);
  _poly_remove_leading_zeroes($f);
  return;
}
function _field_clear_poly($f) {
  $f = $f | 0;
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$f + 212 >> 2] | 0);
  return;
}
function _poly_init($e) {
  $e = $e | 0;
  var $2 = 0;
  $2 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](12) | 0;
  HEAP32[$e + 4 >> 2] = $2;
  _darray_init($2);
  return;
}
function _poly_clear($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0;
  $1 = $e + 4 | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  _poly_alloc($e, 0);
  _darray_clear($2);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$1 >> 2] | 0);
  return;
}
function _poly_set_si($e, $op) {
  $e = $e | 0;
  $op = $op | 0;
  var $2 = 0;
  $2 = HEAP32[$e + 4 >> 2] | 0;
  _poly_alloc($e, 1);
  _element_set_si143(HEAP32[HEAP32[$2 >> 2] >> 2] | 0, $op);
  _poly_remove_leading_zeroes($e);
  return;
}
function _poly_set_multiz($e, $op) {
  $e = $e | 0;
  $op = $op | 0;
  var $z = 0, $1 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $i_012 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $exitcond = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z = __stackBase__ | 0;
    $1 = _multiz_is_z($op) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $4 = $z | 0;
    ___gmpz_init($4);
    _multiz_to_mpz($4, $op);
    _poly_set_mpz($e, $4);
    ___gmpz_clear($4);
    label = 7;
    break;
   case 3:
    $6 = $e + 4 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = _multiz_count($op) | 0;
    _poly_alloc($e, $8);
    $9 = ($8 | 0) > 0;
    if ($9) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $10 = $7;
    $i_012 = 0;
    label = 5;
    break;
   case 5:
    $12 = HEAP32[$10 >> 2] | 0;
    $13 = $12 + ($i_012 << 2) | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14;
    $16 = _multiz_at($op, $i_012) | 0;
    _element_set_multiz159($15, $16);
    $17 = $i_012 + 1 | 0;
    $exitcond = ($17 | 0) == ($8 | 0);
    if ($exitcond) {
      label = 6;
      break;
    } else {
      $i_012 = $17;
      label = 5;
      break;
    }
   case 6:
    _poly_remove_leading_zeroes($e);
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return;
  }
}
function _poly_set_mpz($e, $op) {
  $e = $e | 0;
  $op = $op | 0;
  var $2 = 0;
  $2 = HEAP32[$e + 4 >> 2] | 0;
  _poly_alloc($e, 1);
  _element_set_mpz162(HEAP32[HEAP32[$2 >> 2] >> 2] | 0, $op);
  _poly_remove_leading_zeroes($e);
  return;
}
function _poly_to_mpz($z, $e) {
  $z = $z | 0;
  $e = $e | 0;
  var $1 = 0, $2 = 0, $5 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _poly_coeff_count($e) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    ___gmpz_set_ui($z, 0);
    label = 4;
    break;
   case 3:
    $5 = _poly_coeff($e, 0) | 0;
    _element_to_mpz156($z, $5);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _poly_out_str($stream, $base, $e) {
  $stream = $stream | 0;
  $base = $base | 0;
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $result_016 = 0, $i_015 = 0, $6 = 0, $8 = 0, $9 = 0, $11 = 0, $result_1 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $result_0_lcssa = 0, $20 = 0, $21 = 0, $_result_0 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _poly_coeff_count($e) | 0;
    $2 = $stream;
    $3 = _fputc(91, $2 | 0) | 0;
    $4 = ($3 | 0) == -1;
    if ($4) {
      $_0 = 0;
      label = 9;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = ($1 | 0) > 0;
    if ($5) {
      $i_015 = 0;
      $result_016 = 2;
      label = 3;
      break;
    } else {
      $result_0_lcssa = 2;
      label = 8;
      break;
    }
   case 3:
    $6 = ($i_015 | 0) == 0;
    if ($6) {
      $result_1 = $result_016;
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $8 = _fputs(5408, $stream | 0) | 0;
    $9 = ($8 | 0) == -1;
    if ($9) {
      $_0 = 0;
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $11 = $result_016 + 2 | 0;
    $result_1 = $11;
    label = 6;
    break;
   case 6:
    $13 = _poly_coeff($e, $i_015) | 0;
    $14 = _element_out_str161($stream, $base, $13) | 0;
    $15 = ($14 | 0) == 0;
    if ($15) {
      $_0 = 0;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $17 = $14 + $result_1 | 0;
    $18 = $i_015 + 1 | 0;
    $19 = ($18 | 0) < ($1 | 0);
    if ($19) {
      $i_015 = $18;
      $result_016 = $17;
      label = 3;
      break;
    } else {
      $result_0_lcssa = $17;
      label = 8;
      break;
    }
   case 8:
    $20 = _fputc(93, $2 | 0) | 0;
    $21 = ($20 | 0) == -1;
    $_result_0 = $21 ? 0 : $result_0_lcssa;
    $_0 = $_result_0;
    label = 9;
    break;
   case 9:
    return $_0 | 0;
  }
  return 0;
}
function _poly_snprint($s, $size, $e) {
  $s = $s | 0;
  $size = $size | 0;
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $_ = 0, $7 = 0, $left_046 = 0, $result_045 = 0, $i_044 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $_39 = 0, $result_1 = 0, $left_1 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $_40 = 0, $26 = 0, $27 = 0, $left_0_lcssa = 0, $result_0_lcssa = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $_41 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _poly_coeff_count($e) | 0;
    $2 = _snprintf($s | 0, $size | 0, 5640, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
    $3 = ($2 | 0) < 0;
    if ($3) {
      $_0 = $2;
      label = 9;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = $2 >>> 0 < $size >>> 0;
    $6 = $size - $2 | 0;
    $_ = $5 ? $6 : 0;
    $7 = ($1 | 0) > 0;
    if ($7) {
      $i_044 = 0;
      $result_045 = $2;
      $left_046 = $_;
      label = 3;
      break;
    } else {
      $result_0_lcssa = $2;
      $left_0_lcssa = $_;
      label = 8;
      break;
    }
   case 3:
    $8 = ($i_044 | 0) == 0;
    if ($8) {
      $left_1 = $left_046;
      $result_1 = $result_045;
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $10 = $s + $result_045 | 0;
    $11 = _snprintf($10 | 0, $left_046 | 0, 5408, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
    $12 = ($11 | 0) < 0;
    if ($12) {
      $_0 = $11;
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $14 = $11 + $result_045 | 0;
    $15 = $14 >>> 0 < $size >>> 0;
    $16 = $size - $14 | 0;
    $_39 = $15 ? $16 : 0;
    $left_1 = $_39;
    $result_1 = $14;
    label = 6;
    break;
   case 6:
    $18 = $s + $result_1 | 0;
    $19 = _poly_coeff($e, $i_044) | 0;
    $20 = _element_snprint160($18, $left_1, $19) | 0;
    $21 = ($20 | 0) < 0;
    if ($21) {
      $_0 = $20;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $23 = $20 + $result_1 | 0;
    $24 = $23 >>> 0 < $size >>> 0;
    $25 = $size - $23 | 0;
    $_40 = $24 ? $25 : 0;
    $26 = $i_044 + 1 | 0;
    $27 = ($26 | 0) < ($1 | 0);
    if ($27) {
      $i_044 = $26;
      $result_045 = $23;
      $left_046 = $_40;
      label = 3;
      break;
    } else {
      $result_0_lcssa = $23;
      $left_0_lcssa = $_40;
      label = 8;
      break;
    }
   case 8:
    $28 = $s + $result_0_lcssa | 0;
    $29 = _snprintf($28 | 0, $left_0_lcssa | 0, 5144, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
    $30 = ($29 | 0) < 0;
    $31 = $30 ? 0 : $result_0_lcssa;
    $_41 = $31 + $29 | 0;
    STACKTOP = __stackBase__;
    return $_41 | 0;
   case 9:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _poly_set($dst, $src) {
  $dst = $dst | 0;
  $src = $src | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $i_08 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $src + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $dst + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $2 + 4 | 0;
    $6 = $5;
    $7 = HEAP32[$6 >> 2] | 0;
    _poly_alloc($dst, $7);
    $8 = HEAP32[$6 >> 2] | 0;
    $9 = ($8 | 0) > 0;
    if ($9) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $10 = $4;
    $11 = $2;
    $i_08 = 0;
    label = 3;
    break;
   case 3:
    $13 = HEAP32[$10 >> 2] | 0;
    $14 = $13 + ($i_08 << 2) | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    $16 = $15;
    $17 = HEAP32[$11 >> 2] | 0;
    $18 = $17 + ($i_08 << 2) | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $19;
    _element_set133($16, $20);
    $21 = $i_08 + 1 | 0;
    $22 = HEAP32[$6 >> 2] | 0;
    $23 = ($21 | 0) < ($22 | 0);
    if ($23) {
      $i_08 = $21;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    return;
  }
}
function _poly_sgn($f) {
  $f = $f | 0;
  var $1 = 0, $i_0 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $res_1 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _poly_coeff_count($f) | 0;
    $i_0 = 0;
    label = 2;
    break;
   case 2:
    $3 = ($i_0 | 0) < ($1 | 0);
    if ($3) {
      label = 3;
      break;
    } else {
      $res_1 = 0;
      label = 4;
      break;
    }
   case 3:
    $5 = _poly_coeff($f, $i_0) | 0;
    $6 = _element_sgn($5) | 0;
    $7 = ($6 | 0) == 0;
    $8 = $i_0 + 1 | 0;
    if ($7) {
      $i_0 = $8;
      label = 2;
      break;
    } else {
      $res_1 = $6;
      label = 4;
      break;
    }
   case 4:
    return $res_1 | 0;
  }
  return 0;
}
function _poly_add($sum, $f, $g) {
  $sum = $sum | 0;
  $f = $f | 0;
  $g = $g | 0;
  var $1 = 0, $2 = 0, $3 = 0, $_ = 0, $_22 = 0, $f_g = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $smax = 0, $8 = 0, $i_0_lcssa = 0, $9 = 0, $i_024 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $exitcond = 0, $i_123 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _poly_coeff_count($f) | 0;
    $2 = _poly_coeff_count($g) | 0;
    $3 = ($1 | 0) > ($2 | 0);
    $_ = $3 ? $2 : $1;
    $_22 = $3 ? $1 : $2;
    $f_g = $3 ? $f : $g;
    _poly_alloc($sum, $_22);
    $4 = ($_ | 0) > 0;
    if ($4) {
      label = 2;
      break;
    } else {
      $i_0_lcssa = 0;
      label = 3;
      break;
    }
   case 2:
    $5 = $2 ^ -1;
    $6 = $1 ^ -1;
    $7 = ($5 | 0) > ($6 | 0);
    $smax = $7 ? $5 : $6;
    $8 = $smax ^ -1;
    $i_024 = 0;
    label = 4;
    break;
   case 3:
    $9 = ($i_0_lcssa | 0) < ($_22 | 0);
    if ($9) {
      $i_123 = $i_0_lcssa;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $11 = _poly_coeff($sum, $i_024) | 0;
    $12 = _poly_coeff($f, $i_024) | 0;
    $13 = _poly_coeff($g, $i_024) | 0;
    _element_add144($11, $12, $13);
    $14 = $i_024 + 1 | 0;
    $exitcond = ($14 | 0) == ($8 | 0);
    if ($exitcond) {
      $i_0_lcssa = $8;
      label = 3;
      break;
    } else {
      $i_024 = $14;
      label = 4;
      break;
    }
   case 5:
    $15 = _poly_coeff($sum, $i_123) | 0;
    $16 = _poly_coeff($f_g, $i_123) | 0;
    _element_set133($15, $16);
    $17 = $i_123 + 1 | 0;
    $18 = ($17 | 0) < ($_22 | 0);
    if ($18) {
      $i_123 = $17;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _poly_remove_leading_zeroes($sum);
    return;
  }
}
function _poly_is0($e) {
  $e = $e | 0;
  return (HEAP32[(HEAP32[$e + 4 >> 2] | 0) + 4 >> 2] | 0) == 0 & 1 | 0;
}
function _poly_coeff_count($e) {
  $e = $e | 0;
  return HEAP32[(HEAP32[$e + 4 >> 2] | 0) + 4 >> 2] | 0;
}
function _poly_coeff($e, $n) {
  $e = $e | 0;
  $n = $n | 0;
  return HEAP32[(HEAP32[HEAP32[$e + 4 >> 2] >> 2] | 0) + ($n << 2) >> 2] | 0;
}
function _polymod_field_degree($f) {
  $f = $f | 0;
  return HEAP32[(HEAP32[$f + 212 >> 2] | 0) + 8 >> 2] | 0;
}
function _poly_double($f, $g) {
  $f = $f | 0;
  $g = $g | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $i_08 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $f + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $g + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 + 4 | 0;
    $6 = $5;
    $7 = HEAP32[$6 >> 2] | 0;
    _poly_alloc($f, $7);
    $8 = ($7 | 0) > 0;
    if ($8) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $9 = $2;
    $10 = $4;
    $i_08 = 0;
    label = 3;
    break;
   case 3:
    $12 = HEAP32[$9 >> 2] | 0;
    $13 = $12 + ($i_08 << 2) | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14;
    $16 = HEAP32[$10 >> 2] | 0;
    $17 = $16 + ($i_08 << 2) | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18;
    _element_double157($15, $19);
    $20 = $i_08 + 1 | 0;
    $exitcond = ($20 | 0) == ($7 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_08 = $20;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _poly_is1($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 4 | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($5 | 0) == 1;
    if ($6) {
      label = 2;
      break;
    } else {
      $_0 = 0;
      label = 3;
      break;
    }
   case 2:
    $8 = $2;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $10;
    $12 = _element_is1151($11) | 0;
    $_0 = $12;
    label = 3;
    break;
   case 3:
    return $_0 | 0;
  }
  return 0;
}
function _poly_set0($e) {
  $e = $e | 0;
  _poly_alloc($e, 0);
  return;
}
function _poly_set1($e) {
  $e = $e | 0;
  var $2 = 0;
  $2 = HEAP32[$e + 4 >> 2] | 0;
  _poly_alloc($e, 1);
  _element_set1136(HEAP32[HEAP32[$2 >> 2] >> 2] | 0);
  return;
}
function _poly_sub($diff, $f, $g) {
  $diff = $diff | 0;
  $f = $f | 0;
  $g = $g | 0;
  var $1 = 0, $2 = 0, $3 = 0, $_ = 0, $_25 = 0, $f_g = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $smax = 0, $8 = 0, $i_0_lcssa = 0, $9 = 0, $10 = 0, $i_027 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $exitcond = 0, $i_126 = 0, $17 = 0, $18 = 0, $22 = 0, $23 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _poly_coeff_count($f) | 0;
    $2 = _poly_coeff_count($g) | 0;
    $3 = ($1 | 0) > ($2 | 0);
    $_ = $3 ? $2 : $1;
    $_25 = $3 ? $1 : $2;
    $f_g = $3 ? $f : $g;
    _poly_alloc($diff, $_25);
    $4 = ($_ | 0) > 0;
    if ($4) {
      label = 2;
      break;
    } else {
      $i_0_lcssa = 0;
      label = 3;
      break;
    }
   case 2:
    $5 = $2 ^ -1;
    $6 = $1 ^ -1;
    $7 = ($5 | 0) > ($6 | 0);
    $smax = $7 ? $5 : $6;
    $8 = $smax ^ -1;
    $i_027 = 0;
    label = 5;
    break;
   case 3:
    $9 = ($i_0_lcssa | 0) < ($_25 | 0);
    if ($9) {
      label = 4;
      break;
    } else {
      label = 10;
      break;
    }
   case 4:
    $10 = ($f_g | 0) == ($f | 0);
    $i_126 = $i_0_lcssa;
    label = 6;
    break;
   case 5:
    $12 = _poly_coeff($diff, $i_027) | 0;
    $13 = _poly_coeff($f, $i_027) | 0;
    $14 = _poly_coeff($g, $i_027) | 0;
    _element_sub141($12, $13, $14);
    $15 = $i_027 + 1 | 0;
    $exitcond = ($15 | 0) == ($8 | 0);
    if ($exitcond) {
      $i_0_lcssa = $8;
      label = 3;
      break;
    } else {
      $i_027 = $15;
      label = 5;
      break;
    }
   case 6:
    $17 = _poly_coeff($diff, $i_126) | 0;
    $18 = _poly_coeff($f_g, $i_126) | 0;
    if ($10) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _element_set133($17, $18);
    label = 9;
    break;
   case 8:
    _element_neg145($17, $18);
    label = 9;
    break;
   case 9:
    $22 = $i_126 + 1 | 0;
    $23 = ($22 | 0) < ($_25 | 0);
    if ($23) {
      $i_126 = $22;
      label = 6;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _poly_remove_leading_zeroes($diff);
    return;
  }
}
function _poly_neg($f, $g) {
  $f = $f | 0;
  $g = $g | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $i_08 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $f + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $g + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 + 4 | 0;
    $6 = $5;
    $7 = HEAP32[$6 >> 2] | 0;
    _poly_alloc($f, $7);
    $8 = ($7 | 0) > 0;
    if ($8) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $9 = $2;
    $10 = $4;
    $i_08 = 0;
    label = 3;
    break;
   case 3:
    $12 = HEAP32[$9 >> 2] | 0;
    $13 = $12 + ($i_08 << 2) | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14;
    $16 = HEAP32[$10 >> 2] | 0;
    $17 = $16 + ($i_08 << 2) | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18;
    _element_neg145($15, $19);
    $20 = $i_08 + 1 | 0;
    $exitcond = ($20 | 0) == ($7 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_08 = $20;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _poly_mul($r, $f, $g) {
  $r = $r | 0;
  $f = $f | 0;
  $g = $g | 0;
  var $prod = 0, $e0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $or_cond = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $i_026 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $j_025 = 0, $38 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $exitcond = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $prod = __stackBase__ | 0;
    $e0 = __stackBase__ + 8 | 0;
    $1 = $f + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $g + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $r | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $2 + 4 | 0;
    $8 = $7;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $4 + 4 | 0;
    $11 = $10;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($9 | 0) == 0;
    $14 = ($12 | 0) == 0;
    $or_cond = $13 | $14;
    if ($or_cond) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _element_set0135($r);
    label = 12;
    break;
   case 3:
    $17 = $6 + 212 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $prod | 0;
    _element_init139($19, $6);
    $20 = $prod + 4 | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = $9 - 1 | 0;
    $23 = $22 + $12 | 0;
    _poly_alloc($19, $23);
    $24 = $e0 | 0;
    $25 = $18;
    $26 = HEAP32[$25 >> 2] | 0;
    _element_init139($24, $26);
    $27 = ($23 | 0) > 0;
    if ($27) {
      label = 4;
      break;
    } else {
      label = 11;
      break;
    }
   case 4:
    $28 = $21;
    $29 = $2;
    $30 = $4;
    $31 = $9 + $12 | 0;
    $32 = $31 - 1 | 0;
    $i_026 = 0;
    label = 5;
    break;
   case 5:
    $33 = HEAP32[$28 >> 2] | 0;
    $34 = $33 + ($i_026 << 2) | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    $36 = $35;
    _element_set0135($36);
    $j_025 = 0;
    label = 6;
    break;
   case 6:
    $38 = ($j_025 | 0) < ($9 | 0);
    if ($38) {
      label = 7;
      break;
    } else {
      label = 9;
      break;
    }
   case 7:
    $40 = $i_026 - $j_025 | 0;
    $41 = ($40 | 0) < ($12 | 0);
    if ($41) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $43 = HEAP32[$29 >> 2] | 0;
    $44 = $43 + ($j_025 << 2) | 0;
    $45 = HEAP32[$44 >> 2] | 0;
    $46 = $45;
    $47 = HEAP32[$30 >> 2] | 0;
    $48 = $47 + ($40 << 2) | 0;
    $49 = HEAP32[$48 >> 2] | 0;
    $50 = $49;
    _element_mul137($24, $46, $50);
    _element_add144($36, $36, $24);
    label = 9;
    break;
   case 9:
    $52 = $j_025 + 1 | 0;
    $53 = ($52 | 0) > ($i_026 | 0);
    if ($53) {
      label = 10;
      break;
    } else {
      $j_025 = $52;
      label = 6;
      break;
    }
   case 10:
    $54 = $i_026 + 1 | 0;
    $exitcond = ($54 | 0) == ($32 | 0);
    if ($exitcond) {
      label = 11;
      break;
    } else {
      $i_026 = $54;
      label = 5;
      break;
    }
   case 11:
    _poly_remove_leading_zeroes($19);
    _element_set133($r, $19);
    _element_clear142($24);
    _element_clear142($19);
    label = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
  }
}
function _poly_mul_mpz($f, $g, $z) {
  $f = $f | 0;
  $g = $g | 0;
  $z = $z | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $i_09 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $f + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $g + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 + 4 | 0;
    $6 = $5;
    $7 = HEAP32[$6 >> 2] | 0;
    _poly_alloc($f, $7);
    $8 = ($7 | 0) > 0;
    if ($8) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $9 = $2;
    $10 = $4;
    $i_09 = 0;
    label = 3;
    break;
   case 3:
    $12 = HEAP32[$9 >> 2] | 0;
    $13 = $12 + ($i_09 << 2) | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14;
    $16 = HEAP32[$10 >> 2] | 0;
    $17 = $16 + ($i_09 << 2) | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18;
    _element_mul_mpz154($15, $19, $z);
    $20 = $i_09 + 1 | 0;
    $exitcond = ($20 | 0) == ($7 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_09 = $20;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _poly_mul_si($f, $g, $z) {
  $f = $f | 0;
  $g = $g | 0;
  $z = $z | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $i_09 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $f + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $g + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 + 4 | 0;
    $6 = $5;
    $7 = HEAP32[$6 >> 2] | 0;
    _poly_alloc($f, $7);
    $8 = ($7 | 0) > 0;
    if ($8) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $9 = $2;
    $10 = $4;
    $i_09 = 0;
    label = 3;
    break;
   case 3:
    $12 = HEAP32[$9 >> 2] | 0;
    $13 = $12 + ($i_09 << 2) | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14;
    $16 = HEAP32[$10 >> 2] | 0;
    $17 = $16 + ($i_09 << 2) | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18;
    _element_mul_si153($15, $19, $z);
    $20 = $i_09 + 1 | 0;
    $exitcond = ($20 | 0) == ($7 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_09 = $20;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _poly_cmp($f, $g) {
  $f = $f | 0;
  $g = $g | 0;
  var $1 = 0, $2 = 0, $3 = 0, $i_0 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _poly_coeff_count($f) | 0;
    $2 = _poly_coeff_count($g) | 0;
    $3 = ($1 | 0) == ($2 | 0);
    if ($3) {
      $i_0 = 0;
      label = 2;
      break;
    } else {
      $_0 = 1;
      label = 4;
      break;
    }
   case 2:
    $4 = ($i_0 | 0) < ($1 | 0);
    if ($4) {
      label = 3;
      break;
    } else {
      $_0 = 0;
      label = 4;
      break;
    }
   case 3:
    $6 = _poly_coeff($f, $i_0) | 0;
    $7 = _poly_coeff($g, $i_0) | 0;
    $8 = _element_cmp150($6, $7) | 0;
    $9 = ($8 | 0) == 0;
    $10 = $i_0 + 1 | 0;
    if ($9) {
      $i_0 = $10;
      label = 2;
      break;
    } else {
      $_0 = 1;
      label = 4;
      break;
    }
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function _poly_out_info($str, $f) {
  $str = $str | 0;
  $f = $f | 0;
  var $2 = 0;
  $2 = HEAP32[$f + 212 >> 2] | 0;
  _fwrite(4592, 21, 1, $str | 0);
  _field_out_info($str, HEAP32[$2 >> 2] | 0);
  return;
}
function _poly_to_bytes($buf, $p) {
  $buf = $buf | 0;
  $p = $p | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i_011 = 0, $result_010 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $exitcond = 0, $result_0_lcssa = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _poly_coeff_count($p) | 0;
    $2 = $1 & 255;
    HEAP8[$buf] = $2;
    $3 = $1 >>> 8;
    $4 = $3 & 255;
    $5 = $buf + 1 | 0;
    HEAP8[$5] = $4;
    $6 = ($1 | 0) > 0;
    if ($6) {
      $result_010 = 2;
      $i_011 = 0;
      label = 2;
      break;
    } else {
      $result_0_lcssa = 2;
      label = 3;
      break;
    }
   case 2:
    $7 = $buf + $result_010 | 0;
    $8 = _poly_coeff($p, $i_011) | 0;
    $9 = _element_to_bytes149($7, $8) | 0;
    $10 = $9 + $result_010 | 0;
    $11 = $i_011 + 1 | 0;
    $exitcond = ($11 | 0) == ($1 | 0);
    if ($exitcond) {
      $result_0_lcssa = $10;
      label = 3;
      break;
    } else {
      $result_010 = $10;
      $i_011 = $11;
      label = 2;
      break;
    }
   case 3:
    return $result_0_lcssa | 0;
  }
  return 0;
}
function _poly_from_bytes($p, $buf) {
  $p = $p | 0;
  $buf = $buf | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i_011 = 0, $result_010 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $result_0_lcssa = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP8[$buf] | 0;
    $2 = $1 & 255;
    $3 = $buf + 1 | 0;
    $4 = HEAP8[$3] | 0;
    $5 = $4 & 255;
    $6 = $5 << 8;
    $7 = $6 | $2;
    _poly_alloc($p, $7);
    $8 = ($7 | 0) == 0;
    if ($8) {
      $result_0_lcssa = 2;
      label = 3;
      break;
    } else {
      $result_010 = 2;
      $i_011 = 0;
      label = 2;
      break;
    }
   case 2:
    $9 = _poly_coeff($p, $i_011) | 0;
    $10 = $buf + $result_010 | 0;
    $11 = _element_from_bytes148($9, $10) | 0;
    $12 = $11 + $result_010 | 0;
    $13 = $i_011 + 1 | 0;
    $14 = ($13 | 0) < ($7 | 0);
    if ($14) {
      $result_010 = $12;
      $i_011 = $13;
      label = 2;
      break;
    } else {
      $result_0_lcssa = $12;
      label = 3;
      break;
    }
   case 3:
    return $result_0_lcssa | 0;
  }
  return 0;
}
function _poly_length_in_bytes($p) {
  $p = $p | 0;
  var $1 = 0, $2 = 0, $i_06 = 0, $result_05 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $exitcond = 0, $result_0_lcssa = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _poly_coeff_count($p) | 0;
    $2 = ($1 | 0) > 0;
    if ($2) {
      $result_05 = 2;
      $i_06 = 0;
      label = 2;
      break;
    } else {
      $result_0_lcssa = 2;
      label = 3;
      break;
    }
   case 2:
    $3 = _poly_coeff($p, $i_06) | 0;
    $4 = _element_length_in_bytes147($3) | 0;
    $5 = $4 + $result_05 | 0;
    $6 = $i_06 + 1 | 0;
    $exitcond = ($6 | 0) == ($1 | 0);
    if ($exitcond) {
      $result_0_lcssa = $5;
      label = 3;
      break;
    } else {
      $result_05 = $5;
      $i_06 = $6;
      label = 2;
      break;
    }
   case 3:
    return $result_0_lcssa | 0;
  }
  return 0;
}
function _poly_alloc($e, $n) {
  $e = $e | 0;
  $n = $n | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $k_015 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $exitcond = 0, $k_114 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = $2 + 4 | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) < ($n | 0);
    if ($7) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $8 = $e | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9 + 212 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $11;
    $k_015 = $6;
    label = 4;
    break;
   case 3:
    $13 = ($6 | 0) > ($n | 0);
    if ($13) {
      $k_114 = $6;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $15 = HEAP32[230] | 0;
    $16 = FUNCTION_TABLE_ii[$15 & 1023](8) | 0;
    $17 = $16;
    $18 = HEAP32[$12 >> 2] | 0;
    _element_init139($17, $18);
    _darray_append($3, $16);
    $19 = $k_015 + 1 | 0;
    $exitcond = ($19 | 0) == ($n | 0);
    if ($exitcond) {
      label = 6;
      break;
    } else {
      $k_015 = $19;
      label = 4;
      break;
    }
   case 5:
    $20 = $k_114 - 1 | 0;
    $21 = _darray_at163($3, $20) | 0;
    $22 = $21;
    _element_clear142($22);
    $23 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$23 & 1023]($21);
    _darray_remove_last($3);
    $24 = ($20 | 0) > ($n | 0);
    if ($24) {
      $k_114 = $20;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    return;
  }
}
function _element_set133($e, $a) {
  $e = $e | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 20 >> 2] & 1023]($e, $a);
  return;
}
function _element_is0134($n) {
  $n = $n | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$n >> 2] | 0) + 140 >> 2] & 1023]($n) | 0;
}
function _poly_remove_leading_zeroes($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $n_08_in = 0, $n_08 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = $2 + 4 | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $2;
    $8 = ($6 | 0) > 0;
    if ($8) {
      $n_08_in = $6;
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $n_08 = $n_08_in - 1 | 0;
    $9 = HEAP32[$7 >> 2] | 0;
    $10 = $9 + ($n_08 << 2) | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $11;
    $13 = _element_is0134($12) | 0;
    $14 = ($13 | 0) == 0;
    if ($14) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _element_clear142($12);
    $16 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$16 & 1023]($11);
    _darray_remove_last($3);
    $17 = ($n_08 | 0) > 0;
    if ($17) {
      $n_08_in = $n_08;
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    return;
  }
}
function _element_set0135($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 24 >> 2] & 1023]($e);
  return;
}
function _poly_set_coeff1($e, $n) {
  $e = $e | 0;
  $n = $n | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 4 | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $n + 1 | 0;
    $7 = ($5 | 0) < ($6 | 0);
    if ($7) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _poly_alloc($e, $6);
    label = 3;
    break;
   case 3:
    $10 = $2;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $11 + ($n << 2) | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $13;
    _element_set1136($14);
    return;
  }
}
function _element_set1136($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 28 >> 2] & 1023]($e);
  return;
}
function _poly_const_mul($res, $a, $poly) {
  $res = $res | 0;
  $a = $a | 0;
  $poly = $poly | 0;
  var $1 = 0, $2 = 0, $i_09 = 0, $3 = 0, $4 = 0, $5 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _poly_coeff_count($poly) | 0;
    _poly_alloc($res, $1);
    $2 = ($1 | 0) > 0;
    if ($2) {
      $i_09 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $3 = _poly_coeff($res, $i_09) | 0;
    $4 = _poly_coeff($poly, $i_09) | 0;
    _element_mul137($3, $a, $4);
    $5 = $i_09 + 1 | 0;
    $exitcond = ($5 | 0) == ($1 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_09 = $5;
      label = 2;
      break;
    }
   case 3:
    _poly_remove_leading_zeroes($res);
    return;
  }
}
function _element_mul137($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 48 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_random138($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 128 >> 2] & 1023]($e);
  return;
}
function _field_init_polymod($f, $poly) {
  $f = $f | 0;
  $poly = $poly | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $poly | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    _field_init($f);
    $5 = HEAP32[230] | 0;
    $6 = FUNCTION_TABLE_ii[$5 & 1023](24) | 0;
    $7 = $f + 212 | 0;
    HEAP32[$7 >> 2] = $6;
    $8 = $4;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $6;
    HEAP32[$10 >> 2] = $9;
    $11 = $6 + 4 | 0;
    $12 = $11;
    HEAP32[$12 >> 2] = 398;
    $13 = $6 + 12 | 0;
    $14 = $13;
    $15 = HEAP32[$1 >> 2] | 0;
    _element_init139($14, $15);
    _element_set133($14, $poly);
    $16 = _poly_degree($14) | 0;
    $17 = $6 + 8 | 0;
    $18 = $17;
    HEAP32[$18 >> 2] = $16;
    $19 = $f | 0;
    HEAP32[$19 >> 2] = 750;
    $20 = $f + 4 | 0;
    HEAP32[$20 >> 2] = 78;
    $21 = $f + 8 | 0;
    HEAP32[$21 >> 2] = 472;
    $22 = $f + 76 | 0;
    HEAP32[$22 >> 2] = 4;
    $23 = $f + 12 | 0;
    HEAP32[$23 >> 2] = 404;
    $24 = $f + 36 | 0;
    HEAP32[$24 >> 2] = 2;
    $25 = $f + 168 | 0;
    HEAP32[$25 >> 2] = 706;
    $26 = $f + 16 | 0;
    HEAP32[$26 >> 2] = 530;
    $27 = $f + 32 | 0;
    HEAP32[$27 >> 2] = 564;
    $28 = $f + 20 | 0;
    HEAP32[$28 >> 2] = 784;
    $29 = $f + 144 | 0;
    HEAP32[$29 >> 2] = 308;
    $30 = $f + 40 | 0;
    HEAP32[$30 >> 2] = 522;
    $31 = $f + 96 | 0;
    HEAP32[$31 >> 2] = 128;
    $32 = $f + 44 | 0;
    HEAP32[$32 >> 2] = 12;
    $33 = $f + 124 | 0;
    HEAP32[$33 >> 2] = 480;
    $34 = $f + 140 | 0;
    HEAP32[$34 >> 2] = 792;
    $35 = $f + 136 | 0;
    HEAP32[$35 >> 2] = 618;
    $36 = $f + 24 | 0;
    HEAP32[$36 >> 2] = 74;
    $37 = $f + 28 | 0;
    HEAP32[$37 >> 2] = 72;
    $38 = $f + 148 | 0;
    HEAP32[$38 >> 2] = 560;
    $39 = $f + 172 | 0;
    HEAP32[$39 >> 2] = 758;
    $40 = $f + 60 | 0;
    HEAP32[$40 >> 2] = 452;
    $41 = $f + 64 | 0;
    HEAP32[$41 >> 2] = 592;
    if (($16 | 0) == 3) {
      label = 2;
      break;
    } else if (($16 | 0) == 6) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $43 = $f + 48 | 0;
    HEAP32[$43 >> 2] = 350;
    $44 = $f + 112 | 0;
    HEAP32[$44 >> 2] = 422;
    label = 5;
    break;
   case 3:
    $46 = $f + 48 | 0;
    HEAP32[$46 >> 2] = 346;
    $47 = $f + 112 | 0;
    HEAP32[$47 >> 2] = 266;
    label = 5;
    break;
   case 4:
    $49 = $f + 48 | 0;
    HEAP32[$49 >> 2] = 594;
    $50 = $f + 112 | 0;
    HEAP32[$50 >> 2] = 266;
    label = 5;
    break;
   case 5:
    $52 = $f + 84 | 0;
    HEAP32[$52 >> 2] = 430;
    $53 = $f + 88 | 0;
    HEAP32[$53 >> 2] = 636;
    $54 = $f + 128 | 0;
    HEAP32[$54 >> 2] = 682;
    $55 = $f + 132 | 0;
    HEAP32[$55 >> 2] = 292;
    $56 = $f + 120 | 0;
    HEAP32[$56 >> 2] = 270;
    $57 = $f + 52 | 0;
    HEAP32[$57 >> 2] = 184;
    $58 = $f + 56 | 0;
    HEAP32[$58 >> 2] = 62;
    $59 = $f + 152 | 0;
    HEAP32[$59 >> 2] = 782;
    $60 = $f + 156 | 0;
    HEAP32[$60 >> 2] = 610;
    $61 = $f + 176 | 0;
    HEAP32[$61 >> 2] = 402;
    $62 = HEAP32[$8 >> 2] | 0;
    $63 = $62 + 164 | 0;
    $64 = HEAP32[$63 >> 2] | 0;
    $65 = ($64 | 0) < 0;
    if ($65) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $67 = $f + 164 | 0;
    HEAP32[$67 >> 2] = -1;
    $68 = $f + 160 | 0;
    HEAP32[$68 >> 2] = 54;
    label = 8;
    break;
   case 7:
    $70 = _poly_degree($poly) | 0;
    $71 = Math_imul($70, $64);
    $72 = $f + 164 | 0;
    HEAP32[$72 >> 2] = $71;
    label = 8;
    break;
   case 8:
    $74 = $f + 196 | 0;
    $75 = HEAP32[$10 >> 2] | 0;
    $76 = $75 + 196 | 0;
    ___gmpz_pow_ui($74, $76, $16);
    $77 = HEAP32[230] | 0;
    $78 = $16 << 3;
    $79 = FUNCTION_TABLE_ii[$77 & 1023]($78) | 0;
    $80 = $79;
    $81 = $6 + 20 | 0;
    $82 = $81;
    HEAP32[$82 >> 2] = $80;
    _compute_x_powers($f, $poly);
    return;
  }
}
function _element_init139($e, $f) {
  $e = $e | 0;
  $f = $f | 0;
  HEAP32[$e >> 2] = $f;
  FUNCTION_TABLE_vi[HEAP32[$f + 4 >> 2] & 1023]($e);
  return;
}
function _poly_degree($f) {
  $f = $f | 0;
  return (_element_item_count($f) | 0) - 1 | 0;
}
function _field_clear_polymod($f) {
  $f = $f | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i_07 = 0, $10 = 0, $11 = 0, $12 = 0, $exitcond = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $f + 212 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 8 | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($5 | 0) > 0;
    if ($6) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $7 = $2 + 20 | 0;
    $8 = $7;
    $i_07 = 0;
    label = 3;
    break;
   case 3:
    $10 = HEAP32[$8 >> 2] | 0;
    $11 = $10 + ($i_07 << 3) | 0;
    _element_clear142($11);
    $12 = $i_07 + 1 | 0;
    $exitcond = ($12 | 0) == ($5 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_07 = $12;
      label = 3;
      break;
    }
   case 4:
    $13 = HEAP32[232] | 0;
    $14 = $2 + 20 | 0;
    $15 = $14;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $16;
    FUNCTION_TABLE_vi[$13 & 1023]($17);
    $18 = $2 + 12 | 0;
    $19 = $18;
    _element_clear142($19);
    $20 = HEAP32[232] | 0;
    $21 = HEAP32[$1 >> 2] | 0;
    FUNCTION_TABLE_vi[$20 & 1023]($21);
    return;
  }
}
function _polymod_init($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $i_06 = 0, $16 = 0, $17 = 0, $18 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 + 8 | 0;
    $6 = $5;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = HEAP32[230] | 0;
    $9 = $7 << 3;
    $10 = FUNCTION_TABLE_ii[$8 & 1023]($9) | 0;
    $11 = $e + 4 | 0;
    HEAP32[$11 >> 2] = $10;
    $12 = $10;
    $13 = ($7 | 0) > 0;
    if ($13) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $14 = $4;
    $i_06 = 0;
    label = 3;
    break;
   case 3:
    $16 = $12 + ($i_06 << 3) | 0;
    $17 = HEAP32[$14 >> 2] | 0;
    _element_init139($16, $17);
    $18 = $i_06 + 1 | 0;
    $exitcond = ($18 | 0) == ($7 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_06 = $18;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _polymod_clear($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $i_05 = 0, $12 = 0, $13 = 0, $exitcond = 0, $14 = 0, $15 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = ($10 | 0) > 0;
    if ($11) {
      $i_05 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $12 = $7 + ($i_05 << 3) | 0;
    _element_clear142($12);
    $13 = $i_05 + 1 | 0;
    $exitcond = ($13 | 0) == ($10 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_05 = $13;
      label = 2;
      break;
    }
   case 3:
    $14 = HEAP32[232] | 0;
    $15 = HEAP32[$5 >> 2] | 0;
    FUNCTION_TABLE_vi[$14 & 1023]($15);
    return;
  }
}
function _polymod_set_si($e, $x) {
  $e = $e | 0;
  $x = $x | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $i_06 = 0, $13 = 0, $14 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $6;
    _element_set_si143($11, $x);
    $12 = ($10 | 0) > 1;
    if ($12) {
      $i_06 = 1;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $13 = $7 + ($i_06 << 3) | 0;
    _element_set0135($13);
    $14 = $i_06 + 1 | 0;
    $exitcond = ($14 | 0) == ($10 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_06 = $14;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _polymod_set_mpz($e, $z) {
  $e = $e | 0;
  $z = $z | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $i_06 = 0, $13 = 0, $14 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $6;
    _element_set_mpz162($11, $z);
    $12 = ($10 | 0) > 1;
    if ($12) {
      $i_06 = 1;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $13 = $7 + ($i_06 << 3) | 0;
    _element_set0135($13);
    $14 = $i_06 + 1 | 0;
    $exitcond = ($14 | 0) == ($10 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_06 = $14;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _polymod_coeff_count($e) {
  $e = $e | 0;
  return HEAP32[(HEAP32[(HEAP32[$e >> 2] | 0) + 212 >> 2] | 0) + 8 >> 2] | 0;
}
function _polymod_coeff($e, $i) {
  $e = $e | 0;
  $i = $i | 0;
  return (HEAP32[$e + 4 >> 2] | 0) + ($i << 3) | 0;
}
function _polymod_out_str($stream, $base, $e) {
  $stream = $stream | 0;
  $base = $base | 0;
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $i_016 = 0, $result_015 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $result_1 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $result_0_lcssa = 0, $29 = 0, $30 = 0, $_result_0 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $stream;
    $12 = _fputc(91, $11 | 0) | 0;
    $13 = ($12 | 0) == -1;
    if ($13) {
      $_0 = 0;
      label = 9;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $14 = ($10 | 0) > 0;
    if ($14) {
      $result_015 = 2;
      $i_016 = 0;
      label = 3;
      break;
    } else {
      $result_0_lcssa = 2;
      label = 8;
      break;
    }
   case 3:
    $15 = ($i_016 | 0) == 0;
    if ($15) {
      $result_1 = $result_015;
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $17 = _fputs(5408, $stream | 0) | 0;
    $18 = ($17 | 0) == -1;
    if ($18) {
      $_0 = 0;
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $20 = $result_015 + 2 | 0;
    $result_1 = $20;
    label = 6;
    break;
   case 6:
    $22 = $7 + ($i_016 << 3) | 0;
    $23 = _element_out_str161($stream, $base, $22) | 0;
    $24 = ($23 | 0) == 0;
    if ($24) {
      $_0 = 0;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $26 = $23 + $result_1 | 0;
    $27 = $i_016 + 1 | 0;
    $28 = ($27 | 0) < ($10 | 0);
    if ($28) {
      $result_015 = $26;
      $i_016 = $27;
      label = 3;
      break;
    } else {
      $result_0_lcssa = $26;
      label = 8;
      break;
    }
   case 8:
    $29 = _fputc(93, $11 | 0) | 0;
    $30 = ($29 | 0) == -1;
    $_result_0 = $30 ? 0 : $result_0_lcssa;
    $_0 = $_result_0;
    label = 9;
    break;
   case 9:
    return $_0 | 0;
  }
  return 0;
}
function _polymod_snprint($s, $size, $e) {
  $s = $s | 0;
  $size = $size | 0;
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $_ = 0, $16 = 0, $left_046 = 0, $result_045 = 0, $i_044 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $_39 = 0, $result_1 = 0, $left_1 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $_40 = 0, $35 = 0, $36 = 0, $left_0_lcssa = 0, $result_0_lcssa = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $_41 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = _snprintf($s | 0, $size | 0, 5640, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
    $12 = ($11 | 0) < 0;
    if ($12) {
      $_0 = $11;
      label = 9;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $14 = $11 >>> 0 < $size >>> 0;
    $15 = $size - $11 | 0;
    $_ = $14 ? $15 : 0;
    $16 = ($10 | 0) > 0;
    if ($16) {
      $i_044 = 0;
      $result_045 = $11;
      $left_046 = $_;
      label = 3;
      break;
    } else {
      $result_0_lcssa = $11;
      $left_0_lcssa = $_;
      label = 8;
      break;
    }
   case 3:
    $17 = ($i_044 | 0) == 0;
    if ($17) {
      $left_1 = $left_046;
      $result_1 = $result_045;
      label = 6;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $19 = $s + $result_045 | 0;
    $20 = _snprintf($19 | 0, $left_046 | 0, 5408, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
    $21 = ($20 | 0) < 0;
    if ($21) {
      $_0 = $20;
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $23 = $20 + $result_045 | 0;
    $24 = $23 >>> 0 < $size >>> 0;
    $25 = $size - $23 | 0;
    $_39 = $24 ? $25 : 0;
    $left_1 = $_39;
    $result_1 = $23;
    label = 6;
    break;
   case 6:
    $27 = $s + $result_1 | 0;
    $28 = $7 + ($i_044 << 3) | 0;
    $29 = _element_snprint160($27, $left_1, $28) | 0;
    $30 = ($29 | 0) < 0;
    if ($30) {
      $_0 = $29;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $32 = $29 + $result_1 | 0;
    $33 = $32 >>> 0 < $size >>> 0;
    $34 = $size - $32 | 0;
    $_40 = $33 ? $34 : 0;
    $35 = $i_044 + 1 | 0;
    $36 = ($35 | 0) < ($10 | 0);
    if ($36) {
      $i_044 = $35;
      $result_045 = $32;
      $left_046 = $_40;
      label = 3;
      break;
    } else {
      $result_0_lcssa = $32;
      $left_0_lcssa = $_40;
      label = 8;
      break;
    }
   case 8:
    $37 = $s + $result_0_lcssa | 0;
    $38 = _snprintf($37 | 0, $left_0_lcssa | 0, 5144, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
    $39 = ($38 | 0) < 0;
    $40 = $39 ? 0 : $result_0_lcssa;
    $_41 = $40 + $38 | 0;
    STACKTOP = __stackBase__;
    return $_41 | 0;
   case 9:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _polymod_set_multiz($e, $m) {
  $e = $e | 0;
  $m = $m | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $i_018 = 0, $16 = 0, $17 = 0, $exitcond20 = 0, $19 = 0, $20 = 0, $i_116 = 0, $21 = 0, $22 = 0, $25 = 0, $27 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = _multiz_is_z($m) | 0;
    $12 = ($11 | 0) == 0;
    if ($12) {
      label = 4;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $14 = $6;
    _element_set_multiz159($14, $m);
    $15 = ($10 | 0) > 1;
    if ($15) {
      $i_018 = 1;
      label = 3;
      break;
    } else {
      label = 9;
      break;
    }
   case 3:
    $16 = $7 + ($i_018 << 3) | 0;
    _element_set0135($16);
    $17 = $i_018 + 1 | 0;
    $exitcond20 = ($17 | 0) == ($10 | 0);
    if ($exitcond20) {
      label = 9;
      break;
    } else {
      $i_018 = $17;
      label = 3;
      break;
    }
   case 4:
    $19 = _multiz_count($m) | 0;
    $20 = ($10 | 0) > 0;
    if ($20) {
      $i_116 = 0;
      label = 5;
      break;
    } else {
      label = 9;
      break;
    }
   case 5:
    $21 = ($i_116 | 0) < ($19 | 0);
    $22 = $7 + ($i_116 << 3) | 0;
    if ($21) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _element_set0135($22);
    label = 8;
    break;
   case 7:
    $25 = _multiz_at($m, $i_116) | 0;
    _element_set_multiz159($22, $25);
    label = 8;
    break;
   case 8:
    $27 = $i_116 + 1 | 0;
    $exitcond = ($27 | 0) == ($10 | 0);
    if ($exitcond) {
      label = 9;
      break;
    } else {
      $i_116 = $27;
      label = 5;
      break;
    }
   case 9:
    return;
  }
}
function _polymod_set_str($e, $s, $base) {
  $e = $e | 0;
  $s = $s | 0;
  $base = $base | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $cp_0 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $cp_123 = 0, $i_022 = 0, $26 = 0, $27 = 0, $28 = 0, $cp_2 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $cp_3 = 0, $43 = 0, $44 = 0, $cp_1_lcssa = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    _element_set0135($e);
    $cp_0 = $s;
    label = 2;
    break;
   case 2:
    $12 = HEAP8[$cp_0] | 0;
    $13 = $12 << 24 >> 24 == 0;
    if ($13) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $14 = $cp_0 + 1 | 0;
    $20 = $14;
    label = 5;
    break;
   case 4:
    $16 = $12 << 24 >> 24;
    $17 = _isspace($16 | 0) | 0;
    $18 = ($17 | 0) == 0;
    $19 = $cp_0 + 1 | 0;
    if ($18) {
      $20 = $19;
      label = 5;
      break;
    } else {
      $cp_0 = $19;
      label = 2;
      break;
    }
   case 5:
    $21 = HEAP8[$cp_0] | 0;
    $22 = $21 << 24 >> 24 == 91;
    if ($22) {
      label = 6;
      break;
    } else {
      $_0 = 0;
      label = 16;
      break;
    }
   case 6:
    $23 = ($10 | 0) > 0;
    if ($23) {
      label = 7;
      break;
    } else {
      $cp_1_lcssa = $20;
      label = 14;
      break;
    }
   case 7:
    $24 = $10 - 1 | 0;
    $i_022 = 0;
    $cp_123 = $20;
    label = 8;
    break;
   case 8:
    $26 = $7 + ($i_022 << 3) | 0;
    $27 = _element_set_str158($26, $cp_123, $base) | 0;
    $28 = $cp_123 + $27 | 0;
    $cp_2 = $28;
    label = 9;
    break;
   case 9:
    $30 = HEAP8[$cp_2] | 0;
    $31 = $30 << 24 >> 24 == 0;
    if ($31) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $33 = $30 << 24 >> 24;
    $34 = _isspace($33 | 0) | 0;
    $35 = ($34 | 0) == 0;
    $36 = $cp_2 + 1 | 0;
    if ($35) {
      label = 11;
      break;
    } else {
      $cp_2 = $36;
      label = 9;
      break;
    }
   case 11:
    $37 = ($i_022 | 0) < ($24 | 0);
    if ($37) {
      label = 12;
      break;
    } else {
      $cp_3 = $cp_2;
      label = 13;
      break;
    }
   case 12:
    $39 = $cp_2 + 1 | 0;
    $40 = HEAP8[$cp_2] | 0;
    $41 = $40 << 24 >> 24 == 44;
    if ($41) {
      $cp_3 = $39;
      label = 13;
      break;
    } else {
      $_0 = 0;
      label = 16;
      break;
    }
   case 13:
    $43 = $i_022 + 1 | 0;
    $44 = ($43 | 0) < ($10 | 0);
    if ($44) {
      $i_022 = $43;
      $cp_123 = $cp_3;
      label = 8;
      break;
    } else {
      $cp_1_lcssa = $cp_3;
      label = 14;
      break;
    }
   case 14:
    $45 = HEAP8[$cp_1_lcssa] | 0;
    $46 = $45 << 24 >> 24 == 93;
    if ($46) {
      label = 15;
      break;
    } else {
      $_0 = 0;
      label = 16;
      break;
    }
   case 15:
    $48 = $cp_1_lcssa + 1 | 0;
    $49 = $48;
    $50 = $s;
    $51 = $49 - $50 | 0;
    $_0 = $51;
    label = 16;
    break;
   case 16:
    return $_0 | 0;
  }
  return 0;
}
function _polymod_set($e, $f) {
  $e = $e | 0;
  $f = $f | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $i_06 = 0, $15 = 0, $16 = 0, $17 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $f + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9;
    $11 = $4 + 8 | 0;
    $12 = $11;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ($13 | 0) > 0;
    if ($14) {
      $i_06 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $15 = $7 + ($i_06 << 3) | 0;
    $16 = $10 + ($i_06 << 3) | 0;
    _element_set133($15, $16);
    $17 = $i_06 + 1 | 0;
    $exitcond = ($17 | 0) == ($13 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_06 = $17;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _polymod_sgn($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $i_0 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $res_1 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $i_0 = 0;
    label = 2;
    break;
   case 2:
    $12 = ($i_0 | 0) < ($10 | 0);
    if ($12) {
      label = 3;
      break;
    } else {
      $res_1 = 0;
      label = 4;
      break;
    }
   case 3:
    $14 = $7 + ($i_0 << 3) | 0;
    $15 = _element_sgn($14) | 0;
    $16 = ($15 | 0) == 0;
    $17 = $i_0 + 1 | 0;
    if ($16) {
      $i_0 = $17;
      label = 2;
      break;
    } else {
      $res_1 = $15;
      label = 4;
      break;
    }
   case 4:
    return $res_1 | 0;
  }
  return 0;
}
function _polymod_add($r, $e, $f) {
  $r = $r | 0;
  $e = $e | 0;
  $f = $f | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $i_08 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $r | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $r + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $e + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9;
    $11 = $f + 4 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12;
    $14 = $4 + 8 | 0;
    $15 = $14;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = ($16 | 0) > 0;
    if ($17) {
      $i_08 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $18 = $7 + ($i_08 << 3) | 0;
    $19 = $10 + ($i_08 << 3) | 0;
    $20 = $13 + ($i_08 << 3) | 0;
    _element_add144($18, $19, $20);
    $21 = $i_08 + 1 | 0;
    $exitcond = ($21 | 0) == ($16 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_08 = $21;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _polymod_double($r, $f) {
  $r = $r | 0;
  $f = $f | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $i_06 = 0, $15 = 0, $16 = 0, $17 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $r | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $r + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $f + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9;
    $11 = $4 + 8 | 0;
    $12 = $11;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ($13 | 0) > 0;
    if ($14) {
      $i_06 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $15 = $7 + ($i_06 << 3) | 0;
    $16 = $10 + ($i_06 << 3) | 0;
    _element_double157($15, $16);
    $17 = $i_06 + 1 | 0;
    $exitcond = ($17 | 0) == ($13 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_06 = $17;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _polymod_sub($r, $e, $f) {
  $r = $r | 0;
  $e = $e | 0;
  $f = $f | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $i_08 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $r | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $r + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $e + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9;
    $11 = $f + 4 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12;
    $14 = $4 + 8 | 0;
    $15 = $14;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = ($16 | 0) > 0;
    if ($17) {
      $i_08 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $18 = $7 + ($i_08 << 3) | 0;
    $19 = $10 + ($i_08 << 3) | 0;
    $20 = $13 + ($i_08 << 3) | 0;
    _element_sub141($18, $19, $20);
    $21 = $i_08 + 1 | 0;
    $exitcond = ($21 | 0) == ($16 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_08 = $21;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _polymod_neg($e, $f) {
  $e = $e | 0;
  $f = $f | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $i_06 = 0, $15 = 0, $16 = 0, $17 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $f + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9;
    $11 = $4 + 8 | 0;
    $12 = $11;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ($13 | 0) > 0;
    if ($14) {
      $i_06 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $15 = $7 + ($i_06 << 3) | 0;
    $16 = $10 + ($i_06 << 3) | 0;
    _element_neg145($15, $16);
    $17 = $i_06 + 1 | 0;
    $exitcond = ($17 | 0) == ($13 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_06 = $17;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _polymod_is0($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $i_0 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $i_0 = 0;
    label = 2;
    break;
   case 2:
    $12 = ($i_0 | 0) < ($10 | 0);
    if ($12) {
      label = 3;
      break;
    } else {
      $_0 = 1;
      label = 4;
      break;
    }
   case 3:
    $14 = $7 + ($i_0 << 3) | 0;
    $15 = _element_is0134($14) | 0;
    $16 = ($15 | 0) == 0;
    $17 = $i_0 + 1 | 0;
    if ($16) {
      $_0 = 0;
      label = 4;
      break;
    } else {
      $i_0 = $17;
      label = 2;
      break;
    }
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function _polymod_is1($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $i_0 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $6;
    $12 = _element_is1151($11) | 0;
    $13 = ($12 | 0) == 0;
    if ($13) {
      $_0 = 0;
      label = 4;
      break;
    } else {
      $i_0 = 1;
      label = 2;
      break;
    }
   case 2:
    $14 = ($i_0 | 0) < ($10 | 0);
    if ($14) {
      label = 3;
      break;
    } else {
      $_0 = 1;
      label = 4;
      break;
    }
   case 3:
    $16 = $7 + ($i_0 << 3) | 0;
    $17 = _element_is0134($16) | 0;
    $18 = ($17 | 0) == 0;
    $19 = $i_0 + 1 | 0;
    if ($18) {
      $_0 = 0;
      label = 4;
      break;
    } else {
      $i_0 = $19;
      label = 2;
      break;
    }
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function _polymod_set0($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $i_04 = 0, $12 = 0, $13 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = ($10 | 0) > 0;
    if ($11) {
      $i_04 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $12 = $7 + ($i_04 << 3) | 0;
    _element_set0135($12);
    $13 = $i_04 + 1 | 0;
    $exitcond = ($13 | 0) == ($10 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_04 = $13;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _polymod_set1($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $i_05 = 0, $13 = 0, $14 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $6;
    _element_set1136($11);
    $12 = ($10 | 0) > 1;
    if ($12) {
      $i_05 = 1;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $13 = $7 + ($i_05 << 3) | 0;
    _element_set0135($13);
    $14 = $i_05 + 1 | 0;
    $exitcond = ($14 | 0) == ($10 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_05 = $14;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _polymod_cmp($f, $g) {
  $f = $f | 0;
  $g = $g | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $i_0 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $f | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $f + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $g + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9;
    $11 = $4 + 8 | 0;
    $12 = $11;
    $13 = HEAP32[$12 >> 2] | 0;
    $i_0 = 0;
    label = 2;
    break;
   case 2:
    $15 = ($i_0 | 0) < ($13 | 0);
    if ($15) {
      label = 3;
      break;
    } else {
      $_0 = 0;
      label = 4;
      break;
    }
   case 3:
    $17 = $7 + ($i_0 << 3) | 0;
    $18 = $10 + ($i_0 << 3) | 0;
    $19 = _element_cmp150($17, $18) | 0;
    $20 = ($19 | 0) == 0;
    $21 = $i_0 + 1 | 0;
    if ($20) {
      $i_0 = $21;
      label = 2;
      break;
    } else {
      $_0 = 1;
      label = 4;
      break;
    }
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function _polymod_to_mpz($z, $e) {
  $z = $z | 0;
  $e = $e | 0;
  _element_to_mpz156($z, _polymod_coeff($e, 0) | 0);
  return;
}
function _polymod_mul_degree3($res, $e, $f) {
  $res = $res | 0;
  $e = $e | 0;
  $f = $f | 0;
  var $p0 = 0, $2 = 0, $4 = 0, $7 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $24 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $p0 = __stackBase__ + 16 | 0;
  $2 = HEAP32[$res >> 2] | 0;
  $4 = HEAP32[$2 + 212 >> 2] | 0;
  $7 = HEAP32[$res + 4 >> 2] | 0;
  $10 = HEAP32[$e + 4 >> 2] | 0;
  $13 = HEAP32[$f + 4 >> 2] | 0;
  $14 = $p0 | 0;
  _element_init139($14, $2);
  $15 = __stackBase__ | 0;
  $16 = $4;
  _element_init139($15, HEAP32[$16 >> 2] | 0);
  $18 = __stackBase__ + 8 | 0;
  _element_init139($18, HEAP32[$16 >> 2] | 0);
  _kar_poly_2($7, $15, $18, $10, $13, HEAP32[$p0 + 4 >> 2] | 0);
  $24 = $4 + 20 | 0;
  _polymod_const_mul($14, $15, HEAP32[$24 >> 2] | 0);
  _element_add144($res, $res, $14);
  _polymod_const_mul($14, $18, (HEAP32[$24 >> 2] | 0) + 8 | 0);
  _element_add144($res, $res, $14);
  _element_clear142($14);
  _element_clear142($15);
  _element_clear142($18);
  STACKTOP = __stackBase__;
  return;
}
function _polymod_square_degree3($res, $e) {
  $res = $res | 0;
  $e = $e | 0;
  var $p0 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $31 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $p0 = __stackBase__ | 0;
  $2 = HEAP32[$res + 4 >> 2] | 0;
  $4 = HEAP32[$e + 4 >> 2] | 0;
  $6 = HEAP32[$res >> 2] | 0;
  $8 = HEAP32[$6 + 212 >> 2] | 0;
  $9 = $p0 | 0;
  _element_init139($9, $6);
  $10 = __stackBase__ + 8 | 0;
  $11 = $8;
  _element_init139($10, HEAP32[$11 >> 2] | 0);
  $13 = __stackBase__ + 16 | 0;
  _element_init139($13, HEAP32[$11 >> 2] | 0);
  $16 = HEAP32[$p0 + 4 >> 2] | 0;
  $17 = $16;
  $19 = $16 + 8 | 0;
  $20 = $4;
  $22 = $4 + 8 | 0;
  _element_mul137($17, $20, $22);
  $24 = $4 + 16 | 0;
  _element_mul137($19, $20, $24);
  _element_square155($2, $20);
  _element_mul137($13, $22, $24);
  _element_square155($10, $24);
  $27 = $2 + 16 | 0;
  _element_square155($27, $22);
  _element_add144($2 + 8 | 0, $17, $17);
  _element_add144($19, $19, $19);
  _element_add144($27, $27, $19);
  $31 = $8 + 20 | 0;
  _polymod_const_mul($9, $10, (HEAP32[$31 >> 2] | 0) + 8 | 0);
  _element_add144($res, $res, $9);
  _element_add144($13, $13, $13);
  _polymod_const_mul($9, $13, HEAP32[$31 >> 2] | 0);
  _element_add144($res, $res, $9);
  _element_clear142($9);
  _element_clear142($10);
  _element_clear142($13);
  STACKTOP = __stackBase__;
  return;
}
function _polymod_mul_degree6($res, $e, $f) {
  $res = $res | 0;
  $e = $e | 0;
  $f = $f | 0;
  var $p0 = 0, $p1 = 0, $p2 = 0, $p3 = 0, $1 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $11 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $37 = 0, $43 = 0, $48 = 0, $52 = 0, $58 = 0, $64 = 0, $66 = 0, $67 = 0, $71 = 0, $73 = 0, $77 = 0, $79 = 0, $88 = 0, $91 = 0, $95 = 0, $99 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  $p0 = __stackBase__ | 0;
  $p1 = __stackBase__ + 8 | 0;
  $p2 = __stackBase__ + 16 | 0;
  $p3 = __stackBase__ + 24 | 0;
  $1 = $res | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  $4 = HEAP32[$2 + 212 >> 2] | 0;
  $6 = HEAP32[$res + 4 >> 2] | 0;
  $8 = HEAP32[$e + 4 >> 2] | 0;
  $11 = HEAP32[$f + 4 >> 2] | 0;
  $13 = $8 + 24 | 0;
  $15 = $11 + 24 | 0;
  $17 = $p0 | 0;
  _element_init139($17, $2);
  $18 = $p1 | 0;
  _element_init139($18, HEAP32[$1 >> 2] | 0);
  $20 = $p2 | 0;
  _element_init139($20, HEAP32[$1 >> 2] | 0);
  $22 = $p3 | 0;
  _element_init139($22, HEAP32[$1 >> 2] | 0);
  $25 = HEAP32[$p0 + 4 >> 2] | 0;
  $26 = $25;
  $28 = HEAP32[$p1 + 4 >> 2] | 0;
  $29 = $28;
  $31 = HEAP32[$p2 + 4 >> 2] | 0;
  $33 = $25;
  _element_add144($33, $8, $13);
  $37 = $25 + 8 | 0;
  _element_add144($37, $8 + 8 | 0, $8 + 32 | 0);
  $43 = $25 + 16 | 0;
  _element_add144($43, $8 + 16 | 0, $8 + 40 | 0);
  $48 = $28;
  _element_add144($48, $11, $15);
  $52 = $28 + 8 | 0;
  _element_add144($52, $11 + 8 | 0, $11 + 32 | 0);
  $58 = $28 + 16 | 0;
  _element_add144($58, $11 + 16 | 0, $11 + 40 | 0);
  $64 = $31 + 24 | 0;
  $66 = $31 + 32 | 0;
  $67 = $p3 + 4 | 0;
  _kar_poly_2($31, $64, $66, $26, $29, HEAP32[$67 >> 2] | 0);
  $71 = $25 + 24 | 0;
  $73 = $25 + 32 | 0;
  _kar_poly_2($26, $71, $73, $8, $11, HEAP32[$67 >> 2] | 0);
  $77 = $28 + 24 | 0;
  $79 = $28 + 32 | 0;
  _kar_poly_2($29, $77, $79, $13, $15, HEAP32[$67 >> 2] | 0);
  _element_set133($6, $33);
  _element_set133($6 + 8 | 0, $37);
  _element_set133($6 + 16 | 0, $43);
  $88 = $6 + 24 | 0;
  _element_sub141($88, $71, $33);
  _element_sub141($88, $88, $48);
  _element_add144($88, $88, $31);
  $91 = $6 + 32 | 0;
  _element_sub141($91, $73, $37);
  _element_sub141($91, $91, $52);
  _element_add144($91, $91, $31 + 8 | 0);
  $95 = $6 + 40 | 0;
  _element_sub141($95, $31 + 16 | 0, $43);
  _element_sub141($95, $95, $58);
  _element_sub141($33, $64, $71);
  _element_sub141($33, $33, $77);
  _element_add144($33, $33, $48);
  _element_sub141($37, $66, $73);
  _element_sub141($37, $37, $79);
  _element_add144($37, $37, $52);
  $99 = $4 + 20 | 0;
  _polymod_const_mul($22, $33, HEAP32[$99 >> 2] | 0);
  _element_add144($res, $res, $22);
  _polymod_const_mul($22, $37, (HEAP32[$99 >> 2] | 0) + 8 | 0);
  _element_add144($res, $res, $22);
  _polymod_const_mul($22, $58, (HEAP32[$99 >> 2] | 0) + 16 | 0);
  _element_add144($res, $res, $22);
  _polymod_const_mul($22, $77, (HEAP32[$99 >> 2] | 0) + 24 | 0);
  _element_add144($res, $res, $22);
  _polymod_const_mul($22, $79, (HEAP32[$99 >> 2] | 0) + 32 | 0);
  _element_add144($res, $res, $22);
  _element_clear142($17);
  _element_clear142($18);
  _element_clear142($20);
  _element_clear142($22);
  STACKTOP = __stackBase__;
  return;
}
function _poly_base_field($f) {
  $f = $f | 0;
  return HEAP32[HEAP32[(HEAP32[$f >> 2] | 0) + 212 >> 2] >> 2] | 0;
}
function _polymod_square($res, $e) {
  $res = $res | 0;
  $e = $e | 0;
  var $prod = 0, $p0 = 0, $c0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $i_076 = 0, $20 = 0, $21 = 0, $22 = 0, $exitcond83 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $indvars_iv_next = 0, $exitcond82 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $indvars_iv = 0, $i_172 = 0, $38 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $j_066 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $exitcond80 = 0, $j_0_lcssa = 0, $54 = 0, $55 = 0, $j_170 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $exitcond81 = 0, $i_265 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $exitcond = 0, $66 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $prod = __stackBase__ | 0;
    $p0 = __stackBase__ + 8 | 0;
    $c0 = __stackBase__ + 16 | 0;
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = $res | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $5 + 212 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $7 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = HEAP32[230] | 0;
    $12 = $10 - 1 | 0;
    $13 = $12 << 3;
    $14 = FUNCTION_TABLE_ii[$11 & 1023]($13) | 0;
    $15 = $14;
    $16 = ($12 | 0) > 0;
    if ($16) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $17 = $7;
    $18 = $10 - 1 | 0;
    $i_076 = 0;
    label = 3;
    break;
   case 3:
    $20 = $15 + ($i_076 << 3) | 0;
    $21 = HEAP32[$17 >> 2] | 0;
    _element_init139($20, $21);
    _element_set0135($20);
    $22 = $i_076 + 1 | 0;
    $exitcond83 = ($22 | 0) == ($18 | 0);
    if ($exitcond83) {
      label = 4;
      break;
    } else {
      $i_076 = $22;
      label = 3;
      break;
    }
   case 4:
    $23 = $prod | 0;
    $24 = HEAP32[$4 >> 2] | 0;
    _element_init139($23, $24);
    $25 = $prod + 4 | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = $26;
    $28 = $p0 | 0;
    $29 = HEAP32[$4 >> 2] | 0;
    _element_init139($28, $29);
    $30 = $c0 | 0;
    $31 = $7;
    $32 = HEAP32[$31 >> 2] | 0;
    _element_init139($30, $32);
    $33 = ($10 | 0) > 0;
    if ($33) {
      $i_172 = 0;
      $indvars_iv = $10;
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $indvars_iv_next = $indvars_iv - 1 | 0;
    $exitcond82 = ($47 | 0) == ($10 | 0);
    if ($exitcond82) {
      label = 6;
      break;
    } else {
      $i_172 = $47;
      $indvars_iv = $indvars_iv_next;
      label = 8;
      break;
    }
   case 6:
    $34 = ($12 | 0) > 0;
    if ($34) {
      label = 7;
      break;
    } else {
      label = 17;
      break;
    }
   case 7:
    $35 = $7 + 20 | 0;
    $36 = $35;
    $37 = $10 - 1 | 0;
    $i_265 = 0;
    label = 16;
    break;
   case 8:
    $38 = $i_172 << 1;
    $39 = $3 + ($i_172 << 3) | 0;
    _element_square155($30, $39);
    $40 = ($38 | 0) < ($10 | 0);
    if ($40) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $42 = $27 + ($38 << 3) | 0;
    _element_add144($42, $42, $30);
    label = 11;
    break;
   case 10:
    $44 = $38 - $10 | 0;
    $45 = $15 + ($44 << 3) | 0;
    _element_add144($45, $45, $30);
    label = 11;
    break;
   case 11:
    $47 = $i_172 + 1 | 0;
    $48 = $10 - $i_172 | 0;
    $49 = ($47 | 0) < ($48 | 0);
    if ($49) {
      $j_066 = $47;
      label = 12;
      break;
    } else {
      $j_0_lcssa = $47;
      label = 13;
      break;
    }
   case 12:
    $50 = $3 + ($j_066 << 3) | 0;
    _element_mul137($30, $39, $50);
    _element_add144($30, $30, $30);
    $51 = $j_066 + $i_172 | 0;
    $52 = $27 + ($51 << 3) | 0;
    _element_add144($52, $52, $30);
    $53 = $j_066 + 1 | 0;
    $exitcond80 = ($53 | 0) == ($indvars_iv | 0);
    if ($exitcond80) {
      $j_0_lcssa = $indvars_iv;
      label = 13;
      break;
    } else {
      $j_066 = $53;
      label = 12;
      break;
    }
   case 13:
    $54 = ($j_0_lcssa | 0) < ($10 | 0);
    if ($54) {
      label = 14;
      break;
    } else {
      label = 5;
      break;
    }
   case 14:
    $55 = $i_172 - $10 | 0;
    $j_170 = $j_0_lcssa;
    label = 15;
    break;
   case 15:
    $57 = $3 + ($j_170 << 3) | 0;
    _element_mul137($30, $39, $57);
    _element_add144($30, $30, $30);
    $58 = $55 + $j_170 | 0;
    $59 = $15 + ($58 << 3) | 0;
    _element_add144($59, $59, $30);
    $60 = $j_170 + 1 | 0;
    $exitcond81 = ($60 | 0) == ($10 | 0);
    if ($exitcond81) {
      label = 5;
      break;
    } else {
      $j_170 = $60;
      label = 15;
      break;
    }
   case 16:
    $62 = $15 + ($i_265 << 3) | 0;
    $63 = HEAP32[$36 >> 2] | 0;
    $64 = $63 + ($i_265 << 3) | 0;
    _polymod_const_mul($28, $62, $64);
    _element_add144($23, $23, $28);
    _element_clear142($62);
    $65 = $i_265 + 1 | 0;
    $exitcond = ($65 | 0) == ($37 | 0);
    if ($exitcond) {
      label = 17;
      break;
    } else {
      $i_265 = $65;
      label = 16;
      break;
    }
   case 17:
    $66 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$66 & 1023]($14);
    _element_set133($res, $23);
    _element_clear142($23);
    _element_clear142($28);
    _element_clear142($30);
    STACKTOP = __stackBase__;
    return;
  }
}
function _polymod_mul($res, $e, $f) {
  $res = $res | 0;
  $e = $e | 0;
  $f = $f | 0;
  var $prod = 0, $p0 = 0, $c0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $i_060 = 0, $23 = 0, $24 = 0, $25 = 0, $exitcond67 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $indvars_iv = 0, $i_156 = 0, $41 = 0, $42 = 0, $43 = 0, $j_050 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $exitcond64 = 0, $j_0_lcssa = 0, $49 = 0, $50 = 0, $j_153 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $exitcond65 = 0, $56 = 0, $indvars_iv_next = 0, $exitcond66 = 0, $i_249 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $exitcond = 0, $62 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $prod = __stackBase__ | 0;
    $p0 = __stackBase__ + 8 | 0;
    $c0 = __stackBase__ + 16 | 0;
    $1 = $res | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 + 8 | 0;
    $6 = $5;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $e + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9;
    $11 = $f + 4 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12;
    $14 = HEAP32[230] | 0;
    $15 = $7 - 1 | 0;
    $16 = $15 << 3;
    $17 = FUNCTION_TABLE_ii[$14 & 1023]($16) | 0;
    $18 = $17;
    $19 = ($15 | 0) > 0;
    if ($19) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $20 = $4;
    $21 = $7 - 1 | 0;
    $i_060 = 0;
    label = 3;
    break;
   case 3:
    $23 = $18 + ($i_060 << 3) | 0;
    $24 = HEAP32[$20 >> 2] | 0;
    _element_init139($23, $24);
    _element_set0135($23);
    $25 = $i_060 + 1 | 0;
    $exitcond67 = ($25 | 0) == ($21 | 0);
    if ($exitcond67) {
      label = 4;
      break;
    } else {
      $i_060 = $25;
      label = 3;
      break;
    }
   case 4:
    $26 = $prod | 0;
    $27 = HEAP32[$1 >> 2] | 0;
    _element_init139($26, $27);
    $28 = $prod + 4 | 0;
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = $29;
    $31 = $p0 | 0;
    $32 = HEAP32[$1 >> 2] | 0;
    _element_init139($31, $32);
    $33 = $c0 | 0;
    $34 = $4;
    $35 = HEAP32[$34 >> 2] | 0;
    _element_init139($33, $35);
    $36 = ($7 | 0) > 0;
    if ($36) {
      $i_156 = 0;
      $indvars_iv = $7;
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $37 = ($15 | 0) > 0;
    if ($37) {
      label = 6;
      break;
    } else {
      label = 15;
      break;
    }
   case 6:
    $38 = $4 + 20 | 0;
    $39 = $38;
    $40 = $7 - 1 | 0;
    $i_249 = 0;
    label = 14;
    break;
   case 7:
    $41 = $7 - $i_156 | 0;
    $42 = ($41 | 0) > 0;
    if ($42) {
      label = 8;
      break;
    } else {
      $j_0_lcssa = 0;
      label = 10;
      break;
    }
   case 8:
    $43 = $10 + ($i_156 << 3) | 0;
    $j_050 = 0;
    label = 9;
    break;
   case 9:
    $45 = $13 + ($j_050 << 3) | 0;
    _element_mul137($33, $43, $45);
    $46 = $j_050 + $i_156 | 0;
    $47 = $30 + ($46 << 3) | 0;
    _element_add144($47, $47, $33);
    $48 = $j_050 + 1 | 0;
    $exitcond64 = ($48 | 0) == ($indvars_iv | 0);
    if ($exitcond64) {
      $j_0_lcssa = $indvars_iv;
      label = 10;
      break;
    } else {
      $j_050 = $48;
      label = 9;
      break;
    }
   case 10:
    $49 = ($j_0_lcssa | 0) < ($7 | 0);
    if ($49) {
      label = 11;
      break;
    } else {
      label = 13;
      break;
    }
   case 11:
    $50 = $10 + ($i_156 << 3) | 0;
    $j_153 = $j_0_lcssa;
    label = 12;
    break;
   case 12:
    $52 = $13 + ($j_153 << 3) | 0;
    _element_mul137($33, $50, $52);
    $53 = $j_153 - $41 | 0;
    $54 = $18 + ($53 << 3) | 0;
    _element_add144($54, $54, $33);
    $55 = $j_153 + 1 | 0;
    $exitcond65 = ($55 | 0) == ($7 | 0);
    if ($exitcond65) {
      label = 13;
      break;
    } else {
      $j_153 = $55;
      label = 12;
      break;
    }
   case 13:
    $56 = $i_156 + 1 | 0;
    $indvars_iv_next = $indvars_iv - 1 | 0;
    $exitcond66 = ($56 | 0) == ($7 | 0);
    if ($exitcond66) {
      label = 5;
      break;
    } else {
      $i_156 = $56;
      $indvars_iv = $indvars_iv_next;
      label = 7;
      break;
    }
   case 14:
    $58 = $18 + ($i_249 << 3) | 0;
    $59 = HEAP32[$39 >> 2] | 0;
    $60 = $59 + ($i_249 << 3) | 0;
    _polymod_const_mul($31, $58, $60);
    _element_add144($26, $26, $31);
    _element_clear142($58);
    $61 = $i_249 + 1 | 0;
    $exitcond = ($61 | 0) == ($40 | 0);
    if ($exitcond) {
      label = 15;
      break;
    } else {
      $i_249 = $61;
      label = 14;
      break;
    }
   case 15:
    $62 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$62 & 1023]($17);
    _element_set133($res, $26);
    _element_clear142($26);
    _element_clear142($31);
    _element_clear142($33);
    STACKTOP = __stackBase__;
    return;
  }
}
function _polymod_mul_mpz($e, $f, $z) {
  $e = $e | 0;
  $f = $f | 0;
  $z = $z | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $i_07 = 0, $15 = 0, $16 = 0, $17 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $f + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9;
    $11 = $4 + 8 | 0;
    $12 = $11;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ($13 | 0) > 0;
    if ($14) {
      $i_07 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $15 = $7 + ($i_07 << 3) | 0;
    $16 = $10 + ($i_07 << 3) | 0;
    _element_mul_mpz154($15, $16, $z);
    $17 = $i_07 + 1 | 0;
    $exitcond = ($17 | 0) == ($13 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_07 = $17;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _polymod_mul_si($e, $f, $z) {
  $e = $e | 0;
  $f = $f | 0;
  $z = $z | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $i_07 = 0, $15 = 0, $16 = 0, $17 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $f + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9;
    $11 = $4 + 8 | 0;
    $12 = $11;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = ($13 | 0) > 0;
    if ($14) {
      $i_07 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $15 = $7 + ($i_07 << 3) | 0;
    $16 = $10 + ($i_07 << 3) | 0;
    _element_mul_si153($15, $16, $z);
    $17 = $i_07 + 1 | 0;
    $exitcond = ($17 | 0) == ($13 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_07 = $17;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _polymod_random($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i_04 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = $e | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = _polymod_field_degree($5) | 0;
    $7 = ($6 | 0) > 0;
    if ($7) {
      $i_04 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $8 = $3 + ($i_04 << 3) | 0;
    _element_random138($8);
    $9 = $i_04 + 1 | 0;
    $exitcond = ($9 | 0) == ($6 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_04 = $9;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _polymod_from_hash($e, $data, $len) {
  $e = $e | 0;
  $data = $data | 0;
  $len = $len | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i_06 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = $e | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = _polymod_field_degree($5) | 0;
    $7 = ($6 | 0) > 0;
    if ($7) {
      $i_06 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $8 = $3 + ($i_06 << 3) | 0;
    _element_from_hash152($8, $data, $len);
    $9 = $i_06 + 1 | 0;
    $exitcond = ($9 | 0) == ($6 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_06 = $9;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _polymod_invert($r, $e) {
  $r = $r | 0;
  $e = $e | 0;
  var $5 = 0, $7 = 0, $8 = 0, $10 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $5 = (HEAP32[(HEAP32[$r >> 2] | 0) + 212 >> 2] | 0) + 12 | 0;
  $7 = __stackBase__ | 0;
  $8 = $5;
  _element_init139($7, HEAP32[$8 >> 2] | 0);
  $10 = __stackBase__ + 8 | 0;
  _element_init139($10, HEAP32[$8 >> 2] | 0);
  _polymod_to_poly($7, $e);
  _poly_invert($10, $7, $5);
  _poly_to_polymod_truncate($r, $10);
  _element_clear142($7);
  _element_clear142($10);
  STACKTOP = __stackBase__;
  return;
}
function _polymod_is_sqr($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $4 = 0, $7 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $1 = __stackBase__ + 16 | 0;
  $2 = $e | 0;
  _element_init139($1, HEAP32[$2 >> 2] | 0);
  $4 = __stackBase__ | 0;
  ___gmpz_init($4);
  ___gmpz_sub_ui($4, (HEAP32[$2 >> 2] | 0) + 196 | 0, 1);
  ___gmpz_divexact_ui($4, $4, 2);
  _element_pow_mpz140($1, $e, $4);
  $7 = _element_is1151($1) | 0;
  _element_clear142($1);
  ___gmpz_clear($4);
  STACKTOP = __stackBase__;
  return $7 | 0;
}
function _polymod_sqrt($res, $a) {
  $res = $res | 0;
  $a = $a | 0;
  var $kx = 0, $f = 0, $r = 0, $s = 0, $e0 = 0, $z = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $i_025 = 0, $21 = 0, $i_026 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $i_0 = 0, $30 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 264 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $kx = __stackBase__ | 0;
    $f = __stackBase__ + 216 | 0;
    $r = __stackBase__ + 224 | 0;
    $s = __stackBase__ + 232 | 0;
    $e0 = __stackBase__ + 240 | 0;
    $z = __stackBase__ + 248 | 0;
    $1 = $kx | 0;
    $2 = $a | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    _field_init_poly($1, $3);
    $4 = $z | 0;
    ___gmpz_init($4);
    $5 = $f | 0;
    _element_init139($5, $1);
    $6 = $r | 0;
    _element_init139($6, $1);
    $7 = $s | 0;
    _element_init139($7, $1);
    $8 = $e0 | 0;
    $9 = HEAP32[$2 >> 2] | 0;
    _element_init139($8, $9);
    _poly_alloc($5, 3);
    $10 = _poly_coeff($5, 2) | 0;
    _element_set1136($10);
    $11 = _poly_coeff($5, 0) | 0;
    _element_neg145($11, $a);
    $12 = HEAP32[$2 >> 2] | 0;
    $13 = $12 + 196 | 0;
    ___gmpz_sub_ui($4, $13, 1);
    ___gmpz_divexact_ui($4, $4, 2);
    label = 2;
    break;
   case 2:
    _poly_alloc($6, 2);
    $14 = _poly_coeff($6, 1) | 0;
    _element_set1136($14);
    $15 = _poly_coeff($6, 0) | 0;
    _element_random138($15);
    _element_mul137($8, $15, $15);
    $16 = _element_cmp150($8, $a) | 0;
    $17 = ($16 | 0) == 0;
    if ($17) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _element_set133($res, $15);
    label = 14;
    break;
   case 4:
    _element_set1136($7);
    $20 = ___gmpz_sizeinbase($4, 2) | 0;
    $i_025 = $20 - 1 | 0;
    $21 = ($i_025 | 0) > -1;
    if ($21) {
      $i_026 = $i_025;
      label = 5;
      break;
    } else {
      label = 11;
      break;
    }
   case 5:
    _element_mul137($7, $7, $7);
    $22 = _poly_degree($7) | 0;
    $23 = ($22 | 0) == 2;
    if ($23) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $25 = _poly_coeff($7, 0) | 0;
    $26 = _poly_coeff($7, 2) | 0;
    _element_mul137($8, $26, $a);
    _element_add144($25, $25, $8);
    _poly_alloc($7, 2);
    _poly_remove_leading_zeroes($7);
    label = 7;
    break;
   case 7:
    $28 = ___gmpz_tstbit($4, $i_026) | 0;
    $29 = ($28 | 0) == 0;
    if ($29) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $i_0 = $i_026 - 1 | 0;
    $30 = ($i_0 | 0) > -1;
    if ($30) {
      $i_026 = $i_0;
      label = 5;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    _element_mul137($7, $7, $6);
    $32 = _poly_degree($7) | 0;
    $33 = ($32 | 0) == 2;
    if ($33) {
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 10:
    $35 = _poly_coeff($7, 0) | 0;
    $36 = _poly_coeff($7, 2) | 0;
    _element_mul137($8, $36, $a);
    _element_add144($35, $35, $8);
    _poly_alloc($7, 2);
    _poly_remove_leading_zeroes($7);
    label = 8;
    break;
   case 11:
    $37 = _poly_degree($7) | 0;
    $38 = ($37 | 0) < 1;
    if ($38) {
      label = 2;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    _element_set1136($8);
    $40 = _poly_coeff($7, 0) | 0;
    $41 = _poly_coeff($7, 1) | 0;
    _element_add144($40, $40, $8);
    _element_invert146($8, $41);
    _element_mul137($8, $8, $40);
    _element_mul137($41, $8, $8);
    $42 = _element_cmp150($41, $a) | 0;
    $43 = ($42 | 0) == 0;
    if ($43) {
      label = 13;
      break;
    } else {
      label = 2;
      break;
    }
   case 13:
    _element_set133($res, $8);
    label = 14;
    break;
   case 14:
    ___gmpz_clear($4);
    _element_clear142($5);
    _element_clear142($6);
    _element_clear142($7);
    _element_clear142($8);
    _field_clear($1);
    STACKTOP = __stackBase__;
    return;
  }
}
function _polymod_to_bytes($data, $f) {
  $data = $data | 0;
  $f = $f | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $len_08 = 0, $i_07 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $exitcond = 0, $len_0_lcssa = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $f | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $f + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = ($10 | 0) > 0;
    if ($11) {
      $i_07 = 0;
      $len_08 = 0;
      label = 2;
      break;
    } else {
      $len_0_lcssa = 0;
      label = 3;
      break;
    }
   case 2:
    $12 = $data + $len_08 | 0;
    $13 = $7 + ($i_07 << 3) | 0;
    $14 = _element_to_bytes149($12, $13) | 0;
    $15 = $14 + $len_08 | 0;
    $16 = $i_07 + 1 | 0;
    $exitcond = ($16 | 0) == ($10 | 0);
    if ($exitcond) {
      $len_0_lcssa = $15;
      label = 3;
      break;
    } else {
      $i_07 = $16;
      $len_08 = $15;
      label = 2;
      break;
    }
   case 3:
    return $len_0_lcssa | 0;
  }
  return 0;
}
function _polymod_from_bytes($f, $data) {
  $f = $f | 0;
  $data = $data | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $len_08 = 0, $i_07 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $exitcond = 0, $len_0_lcssa = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $f | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $f + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = ($10 | 0) > 0;
    if ($11) {
      $i_07 = 0;
      $len_08 = 0;
      label = 2;
      break;
    } else {
      $len_0_lcssa = 0;
      label = 3;
      break;
    }
   case 2:
    $12 = $7 + ($i_07 << 3) | 0;
    $13 = $data + $len_08 | 0;
    $14 = _element_from_bytes148($12, $13) | 0;
    $15 = $14 + $len_08 | 0;
    $16 = $i_07 + 1 | 0;
    $exitcond = ($16 | 0) == ($10 | 0);
    if ($exitcond) {
      $len_0_lcssa = $15;
      label = 3;
      break;
    } else {
      $i_07 = $16;
      $len_08 = $15;
      label = 2;
      break;
    }
   case 3:
    return $len_0_lcssa | 0;
  }
  return 0;
}
function _polymod_out_info($str, $f) {
  $str = $str | 0;
  $f = $f | 0;
  var $2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $2 = HEAP32[$f + 212 >> 2] | 0;
  _element_fprintf($str, 6024, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $2 + 12 | 0, tempInt) | 0);
  _field_out_info($str, HEAP32[$2 >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _polymod_length_in_bytes($f) {
  $f = $f | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $res_06 = 0, $i_05 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $exitcond = 0, $res_0_lcssa = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $f | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $f + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = ($10 | 0) > 0;
    if ($11) {
      $i_05 = 0;
      $res_06 = 0;
      label = 2;
      break;
    } else {
      $res_0_lcssa = 0;
      label = 3;
      break;
    }
   case 2:
    $12 = $7 + ($i_05 << 3) | 0;
    $13 = _element_length_in_bytes147($12) | 0;
    $14 = $13 + $res_06 | 0;
    $15 = $i_05 + 1 | 0;
    $exitcond = ($15 | 0) == ($10 | 0);
    if ($exitcond) {
      $res_0_lcssa = $14;
      label = 3;
      break;
    } else {
      $i_05 = $15;
      $res_06 = $14;
      label = 2;
      break;
    }
   case 3:
    return $res_0_lcssa | 0;
  }
  return 0;
}
function _compute_x_powers($field, $poly) {
  $field = $field | 0;
  $poly = $poly | 0;
  var $p0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $i_034 = 0, $11 = 0, $12 = 0, $exitcond39 = 0, $13 = 0, $14 = 0, $15 = 0, $i_130 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $j_029 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $exitcond = 0, $30 = 0, $31 = 0, $exitcond38 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $p0 = __stackBase__ | 0;
    $1 = $field + 212 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 8 | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $2 + 20 | 0;
    $7 = $6;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $p0 | 0;
    _element_init139($9, $field);
    $10 = ($5 | 0) > 0;
    if ($10) {
      $i_034 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $11 = $8 + ($i_034 << 3) | 0;
    _element_init139($11, $field);
    $12 = $i_034 + 1 | 0;
    $exitcond39 = ($12 | 0) == ($5 | 0);
    if ($exitcond39) {
      label = 3;
      break;
    } else {
      $i_034 = $12;
      label = 2;
      break;
    }
   case 3:
    $13 = $8 | 0;
    _poly_to_polymod_truncate($13, $poly);
    _element_neg145($13, $13);
    $14 = ($5 | 0) > 1;
    if ($14) {
      label = 4;
      break;
    } else {
      label = 8;
      break;
    }
   case 4:
    $15 = $5 - 1 | 0;
    $i_130 = 1;
    label = 5;
    break;
   case 5:
    $17 = $i_130 - 1 | 0;
    $18 = $8 + ($17 << 3) + 4 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $19;
    $21 = $8 + ($i_130 << 3) | 0;
    $22 = $8 + ($i_130 << 3) + 4 | 0;
    $23 = HEAP32[$22 >> 2] | 0;
    $24 = $23;
    $25 = $23;
    _element_set0135($25);
    $j_029 = 1;
    label = 6;
    break;
   case 6:
    $26 = $24 + ($j_029 << 3) | 0;
    $27 = $j_029 - 1 | 0;
    $28 = $20 + ($27 << 3) | 0;
    _element_set133($26, $28);
    $29 = $j_029 + 1 | 0;
    $exitcond = ($29 | 0) == ($5 | 0);
    if ($exitcond) {
      label = 7;
      break;
    } else {
      $j_029 = $29;
      label = 6;
      break;
    }
   case 7:
    $30 = $20 + ($15 << 3) | 0;
    _polymod_const_mul($9, $30, $13);
    _element_add144($21, $21, $9);
    $31 = $i_130 + 1 | 0;
    $exitcond38 = ($31 | 0) == ($5 | 0);
    if ($exitcond38) {
      label = 8;
      break;
    } else {
      $i_130 = $31;
      label = 5;
      break;
    }
   case 8:
    _element_clear142($9);
    STACKTOP = __stackBase__;
    return;
  }
}
function _polymod_const_mul($res, $a, $e) {
  $res = $res | 0;
  $a = $a | 0;
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $i_07 = 0, $11 = 0, $12 = 0, $13 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = $res + 4 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $5;
    $7 = $e | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = _polymod_field_degree($8) | 0;
    $10 = ($9 | 0) > 0;
    if ($10) {
      $i_07 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $11 = $6 + ($i_07 << 3) | 0;
    $12 = $3 + ($i_07 << 3) | 0;
    _element_mul137($11, $12, $a);
    $13 = $i_07 + 1 | 0;
    $exitcond = ($13 | 0) == ($9 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_07 = $13;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _element_pow_mpz140($x, $a, $n) {
  $x = $x | 0;
  $a = $a | 0;
  $n = $n | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$x >> 2] | 0) + 116 >> 2] & 1023]($x, $a, $n);
  return;
}
function _element_sub141($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 44 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_clear142($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 8 >> 2] & 1023]($e);
  return;
}
function _element_field_to_polymod($f, $g) {
  $f = $f | 0;
  $g = $g | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $i_06 = 0, $13 = 0, $14 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $f | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $f + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $6;
    _element_set133($11, $g);
    $12 = ($10 | 0) > 1;
    if ($12) {
      $i_06 = 1;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $13 = $7 + ($i_06 << 3) | 0;
    _element_set0135($13);
    $14 = $i_06 + 1 | 0;
    $exitcond = ($14 | 0) == ($10 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_06 = $14;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _polymod_to_poly($f, $e) {
  $f = $f | 0;
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $i_08 = 0, $12 = 0, $13 = 0, $14 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 8 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    _poly_alloc($f, $10);
    $11 = ($10 | 0) > 0;
    if ($11) {
      $i_08 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $12 = _poly_coeff($f, $i_08) | 0;
    $13 = $7 + ($i_08 << 3) | 0;
    _element_set133($12, $13);
    $14 = $i_08 + 1 | 0;
    $exitcond = ($14 | 0) == ($10 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_08 = $14;
      label = 2;
      break;
    }
   case 3:
    _poly_remove_leading_zeroes($f);
    return;
  }
}
function _element_set_si143($e, $i) {
  $e = $e | 0;
  $i = $i | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 76 >> 2] & 1023]($e, $i);
  return;
}
function _poly_to_polymod_truncate($e, $f) {
  $e = $e | 0;
  $f = $f | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $_ = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $smax = 0, $17 = 0, $i_0_lcssa = 0, $18 = 0, $19 = 0, $i_015 = 0, $21 = 0, $22 = 0, $23 = 0, $exitcond = 0, $i_114 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = _poly_coeff_count($f) | 0;
    $9 = $4 + 8 | 0;
    $10 = $9;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = ($8 | 0) > ($11 | 0);
    $_ = $12 ? $11 : $8;
    $13 = ($_ | 0) > 0;
    if ($13) {
      label = 2;
      break;
    } else {
      $i_0_lcssa = 0;
      label = 3;
      break;
    }
   case 2:
    $14 = $8 ^ -1;
    $15 = $11 ^ -1;
    $16 = ($14 | 0) > ($15 | 0);
    $smax = $16 ? $14 : $15;
    $17 = $smax ^ -1;
    $i_015 = 0;
    label = 4;
    break;
   case 3:
    $18 = HEAP32[$10 >> 2] | 0;
    $19 = ($i_0_lcssa | 0) < ($18 | 0);
    if ($19) {
      $i_114 = $i_0_lcssa;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $21 = $7 + ($i_015 << 3) | 0;
    $22 = _poly_coeff($f, $i_015) | 0;
    _element_set133($21, $22);
    $23 = $i_015 + 1 | 0;
    $exitcond = ($23 | 0) == ($17 | 0);
    if ($exitcond) {
      $i_0_lcssa = $17;
      label = 3;
      break;
    } else {
      $i_015 = $23;
      label = 4;
      break;
    }
   case 5:
    $24 = $7 + ($i_114 << 3) | 0;
    _element_set0135($24);
    $25 = $i_114 + 1 | 0;
    $26 = HEAP32[$10 >> 2] | 0;
    $27 = ($25 | 0) < ($26 | 0);
    if ($27) {
      $i_114 = $25;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    return;
  }
}
function _element_add144($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 40 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_neg145($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 124 >> 2] & 1023]($n, $a);
  return;
}
function _element_invert146($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 120 >> 2] & 1023]($n, $a);
  return;
}
function _pbc_random_set_function($fun, $data) {
  $fun = $fun | 0;
  $data = $data | 0;
  HEAP32[1006] = $fun;
  HEAP32[1004] = $data;
  HEAP8[896] = 1;
  return;
}
function _darray_at163($a, $i) {
  $a = $a | 0;
  $i = $i | 0;
  return HEAP32[(HEAP32[$a >> 2] | 0) + ($i << 2) >> 2] | 0;
}
function _darray_remove_last($a) {
  $a = $a | 0;
  var $1 = 0;
  $1 = $a + 4 | 0;
  HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) - 1 | 0;
  return;
}
function _element_length_in_bytes147($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 164 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) < 0;
    if ($5) {
      label = 2;
      break;
    } else {
      $_0 = $4;
      label = 3;
      break;
    }
   case 2:
    $7 = $2 + 160 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = FUNCTION_TABLE_ii[$8 & 1023]($e) | 0;
    $_0 = $9;
    label = 3;
    break;
   case 3:
    return $_0 | 0;
  }
  return 0;
}
function _element_from_bytes148($e, $data) {
  $e = $e | 0;
  $data = $data | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$e >> 2] | 0) + 156 >> 2] & 1023]($e, $data) | 0;
}
function _element_to_bytes149($data, $e) {
  $data = $data | 0;
  $e = $e | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$e >> 2] | 0) + 152 >> 2] & 1023]($data, $e) | 0;
}
function _element_cmp150($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$a >> 2] | 0) + 148 >> 2] & 1023]($a, $b) | 0;
}
function _element_is1151($n) {
  $n = $n | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$n >> 2] | 0) + 136 >> 2] & 1023]($n) | 0;
}
function _poly_invert($res, $f, $m) {
  $res = $res | 0;
  $f = $f | 0;
  $m = $m | 0;
  var $q = 0, $r0 = 0, $r1 = 0, $r2 = 0, $b0 = 0, $b1 = 0, $b2 = 0, $inv = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $q = __stackBase__ | 0;
    $r0 = __stackBase__ + 8 | 0;
    $r1 = __stackBase__ + 16 | 0;
    $r2 = __stackBase__ + 24 | 0;
    $b0 = __stackBase__ + 32 | 0;
    $b1 = __stackBase__ + 40 | 0;
    $b2 = __stackBase__ + 48 | 0;
    $inv = __stackBase__ + 56 | 0;
    $1 = $b0 | 0;
    $2 = $res | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    _element_init139($1, $3);
    $4 = $b1 | 0;
    $5 = HEAP32[$2 >> 2] | 0;
    _element_init139($4, $5);
    $6 = $b2 | 0;
    $7 = HEAP32[$2 >> 2] | 0;
    _element_init139($6, $7);
    $8 = $q | 0;
    $9 = HEAP32[$2 >> 2] | 0;
    _element_init139($8, $9);
    $10 = $r0 | 0;
    $11 = HEAP32[$2 >> 2] | 0;
    _element_init139($10, $11);
    $12 = $r1 | 0;
    $13 = HEAP32[$2 >> 2] | 0;
    _element_init139($12, $13);
    $14 = $r2 | 0;
    $15 = HEAP32[$2 >> 2] | 0;
    _element_init139($14, $15);
    $16 = $inv | 0;
    $17 = _poly_base_field($res) | 0;
    _element_init139($16, $17);
    _element_set0135($1);
    _element_set1136($4);
    _element_set133($10, $m);
    _element_set133($12, $f);
    _poly_div($8, $14, $10, $12);
    $18 = _element_is0134($14) | 0;
    $19 = ($18 | 0) == 0;
    if ($19) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _element_mul137($6, $4, $8);
    _element_sub141($6, $1, $6);
    _element_set133($1, $4);
    _element_set133($4, $6);
    _element_set133($10, $12);
    _element_set133($12, $14);
    _poly_div($8, $14, $10, $12);
    $20 = _element_is0134($14) | 0;
    $21 = ($20 | 0) == 0;
    if ($21) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $22 = _poly_coeff($12, 0) | 0;
    _element_invert146($16, $22);
    _poly_const_mul($res, $16, $4);
    _element_clear142($16);
    _element_clear142($8);
    _element_clear142($10);
    _element_clear142($12);
    _element_clear142($14);
    _element_clear142($1);
    _element_clear142($4);
    _element_clear142($6);
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_from_hash152($e, $data, $len) {
  $e = $e | 0;
  $data = $data | 0;
  $len = $len | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$e >> 2] | 0) + 132 >> 2] & 1023]($e, $data, $len);
  return;
}
function _element_mul_si153($n, $a, $z) {
  $n = $n | 0;
  $a = $a | 0;
  $z = $z | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 88 >> 2] & 1023]($n, $a, $z);
  return;
}
function _element_mul_mpz154($n, $a, $z) {
  $n = $n | 0;
  $a = $a | 0;
  $z = $z | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 84 >> 2] & 1023]($n, $a, $z);
  return;
}
function _element_square155($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 112 >> 2] & 1023]($n, $a);
  return;
}
function _kar_poly_2($dst, $c3, $c4, $s1, $s2, $scratch) {
  $dst = $dst | 0;
  $c3 = $c3 | 0;
  $c4 = $c4 | 0;
  $s1 = $s1 | 0;
  $s2 = $s2 | 0;
  $scratch = $scratch | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $1 = $scratch | 0;
  $2 = $scratch + 8 | 0;
  $3 = $scratch + 16 | 0;
  $4 = $s1 | 0;
  $5 = $s1 + 8 | 0;
  _element_add144($c3, $4, $5);
  $6 = $s2 | 0;
  $7 = $s2 + 8 | 0;
  _element_add144($c4, $6, $7);
  _element_mul137($3, $c3, $c4);
  $8 = $s1 + 16 | 0;
  _element_add144($c3, $4, $8);
  $9 = $s2 + 16 | 0;
  _element_add144($c4, $6, $9);
  _element_mul137($2, $c3, $c4);
  _element_add144($c3, $5, $8);
  _element_add144($c4, $7, $9);
  _element_mul137($1, $c3, $c4);
  $10 = $dst + 8 | 0;
  _element_mul137($10, $5, $7);
  $11 = $dst | 0;
  _element_mul137($11, $4, $6);
  _element_mul137($c4, $8, $9);
  _element_add144($c3, $10, $c4);
  _element_sub141($c3, $1, $c3);
  $12 = $dst + 16 | 0;
  _element_add144($12, $c4, $11);
  _element_sub141($2, $2, $12);
  _element_add144($12, $10, $2);
  _element_sub141($3, $3, $11);
  _element_sub141($10, $3, $10);
  return;
}
function _element_to_mpz156($z, $e) {
  $z = $z | 0;
  $e = $e | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 172 >> 2] & 1023]($z, $e);
  return;
}
function _element_double157($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 96 >> 2] & 1023]($n, $a);
  return;
}
function _element_sgn($a) {
  $a = $a | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$a >> 2] | 0) + 144 >> 2] & 1023]($a) | 0;
}
function _element_set_str158($e, $s, $base) {
  $e = $e | 0;
  $s = $s | 0;
  $base = $base | 0;
  return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$e >> 2] | 0) + 32 >> 2] & 1023]($e, $s, $base) | 0;
}
function _element_set_multiz159($e, $m) {
  $e = $e | 0;
  $m = $m | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 16 >> 2] & 1023]($e, $m);
  return;
}
function _element_snprint160($s, $n, $e) {
  $s = $s | 0;
  $n = $n | 0;
  $e = $e | 0;
  return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$e >> 2] | 0) + 168 >> 2] & 1023]($s, $n, $e) | 0;
}
function _element_out_str161($stream, $base, $e) {
  $stream = $stream | 0;
  $base = $base | 0;
  $e = $e | 0;
  return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$e >> 2] | 0) + 36 >> 2] & 1023]($stream, $base, $e) | 0;
}
function _element_set_mpz162($e, $z) {
  $e = $e | 0;
  $z = $z | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 12 >> 2] & 1023]($e, $z);
  return;
}
function _element_item_count($e) {
  $e = $e | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$e >> 2] | 0) + 60 >> 2] & 1023]($e) | 0;
}
function _pbc_mpz_random($z, $limit) {
  $z = $z | 0;
  $limit = $limit | 0;
  var $_b = 0, $3 = 0, $4 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $_b = HEAP8[896] | 0;
    if ($_b) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _pbc_init_random();
    label = 3;
    break;
   case 3:
    $3 = HEAP32[1006] | 0;
    $4 = HEAP32[1004] | 0;
    FUNCTION_TABLE_viii[$3 & 1023]($z, $limit, $4);
    return;
  }
}
function _pbc_random_set_deterministic($seed) {
  $seed = $seed | 0;
  _get_rs();
  ___gmp_randseed_ui(1416, $seed);
  _pbc_random_set_function(390, 0);
  return;
}
function _get_rs() {
  var $_b = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $_b = HEAP8[1408] | 0;
    if ($_b) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    ___gmp_randinit_default(1416);
    HEAP8[1408] = 1;
    label = 3;
    break;
   case 3:
    return;
  }
}
function _deterministic_mpz_random($z, $limit, $data) {
  $z = $z | 0;
  $limit = $limit | 0;
  $data = $data | 0;
  _get_rs();
  ___gmpz_urandomm($z, 1416, $limit);
  return;
}
function _pbc_random_set_file($filename) {
  $filename = $filename | 0;
  _pbc_random_set_function(160, $filename);
  return;
}
function _file_mpz_random($r, $limit, $data) {
  $r = $r | 0;
  $limit = $limit | 0;
  $data = $data | 0;
  var $z = 0, $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z = __stackBase__ | 0;
    $1 = $z | 0;
    ___gmpz_init($1);
    $2 = _fopen($data | 0, 7680) | 0;
    $3 = ($2 | 0) == 0;
    if ($3) {
      label = 9;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = ___gmpz_sizeinbase($limit, 2) | 0;
    $6 = $5 + 7 | 0;
    $7 = ($6 | 0) / 8 & -1;
    $8 = ($5 | 0) % 8;
    $9 = HEAP32[230] | 0;
    $10 = FUNCTION_TABLE_ii[$9 & 1023]($7) | 0;
    $11 = ($8 | 0) == 0;
    $12 = 1 << $8;
    label = 3;
    break;
   case 3:
    $14 = _fread($10 | 0, 1, $7 | 0, $2 | 0) | 0;
    $15 = ($14 | 0) == 0;
    if ($15) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _pbc_warn(8752, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    label = 9;
    break;
   case 5:
    if ($11) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $19 = HEAP8[$10] | 0;
    $20 = $19 & 255;
    $21 = ($20 | 0) % ($12 | 0);
    $22 = $21 & 255;
    HEAP8[$10] = $22;
    label = 7;
    break;
   case 7:
    ___gmpz_import($1, $7, 1, 1, 0, 0, $10);
    $24 = ___gmpz_cmp($1, $limit) | 0;
    $25 = ($24 | 0) < 0;
    if ($25) {
      label = 8;
      break;
    } else {
      label = 3;
      break;
    }
   case 8:
    $27 = _fclose($2 | 0) | 0;
    ___gmpz_set($r, $1);
    ___gmpz_clear($1);
    $28 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$28 & 1023]($10);
    label = 9;
    break;
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _pbc_init_random() {
  var $1 = 0, $2 = 0, $5 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _fopen(7664, 8744) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _pbc_warn(7160, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    _pbc_random_set_deterministic(0);
    label = 4;
    break;
   case 3:
    _pbc_random_set_file(7664);
    $5 = _fclose($1 | 0) | 0;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return;
  }
}
function _darray_init($a) {
  $a = $a | 0;
  var $1 = 0;
  $1 = $a + 8 | 0;
  HEAP32[$1 >> 2] = 8;
  HEAP32[$a + 4 >> 2] = 0;
  HEAP32[$a >> 2] = FUNCTION_TABLE_ii[HEAP32[230] & 1023](HEAP32[$1 >> 2] << 2) | 0;
  return;
}
function _darray_append($a, $p) {
  $a = $a | 0;
  $p = $p | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $storemerge = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $a + 8 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($2 | 0) == ($4 | 0);
    if ($5) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $7 = ($4 | 0) == 0;
    $8 = $4 << 1;
    $storemerge = $7 ? 8 : $8;
    HEAP32[$3 >> 2] = $storemerge;
    $9 = HEAP32[226] | 0;
    $10 = $a | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $11;
    $13 = $storemerge << 2;
    $14 = FUNCTION_TABLE_iii[$9 & 1023]($12, $13) | 0;
    $15 = $14;
    HEAP32[$10 >> 2] = $15;
    label = 3;
    break;
   case 3:
    $17 = HEAP32[$1 >> 2] | 0;
    $18 = $a | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $19 + ($17 << 2) | 0;
    HEAP32[$20 >> 2] = $p;
    $21 = HEAP32[$1 >> 2] | 0;
    $22 = $21 + 1 | 0;
    HEAP32[$1 >> 2] = $22;
    return;
  }
}
function _darray_clear($a) {
  $a = $a | 0;
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$a >> 2] | 0);
  HEAP32[$a + 8 >> 2] = 0;
  HEAP32[$a + 4 >> 2] = 0;
  return;
}
function _darray_forall($a, $func) {
  $a = $a | 0;
  $func = $func | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i_05 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > 0;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $4 = $a | 0;
    $i_05 = 0;
    label = 3;
    break;
   case 3:
    $6 = HEAP32[$4 >> 2] | 0;
    $7 = $6 + ($i_05 << 2) | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    FUNCTION_TABLE_vi[$func & 1023]($8);
    $9 = $i_05 + 1 | 0;
    $exitcond = ($9 | 0) == ($2 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_05 = $9;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _symtab_init($t) {
  $t = $t | 0;
  _darray_init($t | 0);
  return;
}
function _symtab_clear($t) {
  $t = $t | 0;
  var $1 = 0;
  $1 = $t | 0;
  _darray_forall($1, 358);
  _darray_clear($1);
  return;
}
function _clear($data) {
  $data = $data | 0;
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$data >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023]($data);
  return;
}
function _symtab_put($t, $data, $key) {
  $t = $t | 0;
  $data = $data | 0;
  $key = $key | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i_0 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $e_0_in = 0, $21 = 0, $22 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $t | 0;
    $2 = $t + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $t | 0;
    $i_0 = 0;
    label = 2;
    break;
   case 2:
    $6 = ($i_0 | 0) < ($3 | 0);
    if ($6) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $8 = HEAP32[$4 >> 2] | 0;
    $9 = $8 + ($i_0 << 2) | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $10;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = _strcmp($12 | 0, $key | 0) | 0;
    $14 = ($13 | 0) == 0;
    $15 = $i_0 + 1 | 0;
    if ($14) {
      $e_0_in = $10;
      label = 5;
      break;
    } else {
      $i_0 = $15;
      label = 2;
      break;
    }
   case 4:
    $17 = HEAP32[230] | 0;
    $18 = FUNCTION_TABLE_ii[$17 & 1023](8) | 0;
    $19 = _pbc_strdup($key) | 0;
    $20 = $18;
    HEAP32[$20 >> 2] = $19;
    _darray_append($1, $18);
    $e_0_in = $18;
    label = 5;
    break;
   case 5:
    $21 = $e_0_in + 4 | 0;
    $22 = $21;
    HEAP32[$22 >> 2] = $data;
    return;
  }
}
function _symtab_has($t, $key) {
  $t = $t | 0;
  $key = $key | 0;
  var $1 = 0, $2 = 0, $3 = 0, $i_0 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $t + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $t | 0;
    $i_0 = 0;
    label = 2;
    break;
   case 2:
    $5 = ($i_0 | 0) < ($2 | 0);
    if ($5) {
      label = 3;
      break;
    } else {
      $_0 = 0;
      label = 4;
      break;
    }
   case 3:
    $7 = HEAP32[$3 >> 2] | 0;
    $8 = $7 + ($i_0 << 2) | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = _strcmp($11 | 0, $key | 0) | 0;
    $13 = ($12 | 0) == 0;
    $14 = $i_0 + 1 | 0;
    if ($13) {
      $_0 = 1;
      label = 4;
      break;
    } else {
      $i_0 = $14;
      label = 2;
      break;
    }
   case 4:
    return $_0 | 0;
  }
  return 0;
}
function _symtab_at($t, $key) {
  $t = $t | 0;
  $key = $key | 0;
  var $1 = 0, $2 = 0, $3 = 0, $i_0 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $t + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $t | 0;
    $i_0 = 0;
    label = 2;
    break;
   case 2:
    $5 = ($i_0 | 0) < ($2 | 0);
    if ($5) {
      label = 3;
      break;
    } else {
      $_0 = 0;
      label = 5;
      break;
    }
   case 3:
    $7 = HEAP32[$3 >> 2] | 0;
    $8 = $7 + ($i_0 << 2) | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = _strcmp($11 | 0, $key | 0) | 0;
    $13 = ($12 | 0) == 0;
    $14 = $i_0 + 1 | 0;
    if ($13) {
      label = 4;
      break;
    } else {
      $i_0 = $14;
      label = 2;
      break;
    }
   case 4:
    $16 = $9 + 4 | 0;
    $17 = $16;
    $18 = HEAP32[$17 >> 2] | 0;
    $_0 = $18;
    label = 5;
    break;
   case 5:
    return $_0 | 0;
  }
  return 0;
}
function _symtab_forall_data($t, $func) {
  $t = $t | 0;
  $func = $func | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i_05 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $t + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) > 0;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $4 = $t | 0;
    $i_05 = 0;
    label = 3;
    break;
   case 3:
    $6 = HEAP32[$4 >> 2] | 0;
    $7 = $6 + ($i_05 << 2) | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $8 + 4 | 0;
    $10 = $9;
    $11 = HEAP32[$10 >> 2] | 0;
    FUNCTION_TABLE_vi[$func & 1023]($11);
    $12 = $i_05 + 1 | 0;
    $exitcond = ($12 | 0) == ($2 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_05 = $12;
      label = 3;
      break;
    }
   case 4:
    return;
  }
}
function _out($format, varrp) {
  $format = $format | 0;
  varrp = varrp | 0;
  var $params = 0, $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $params = __stackBase__ | 0;
    $1 = HEAP32[228] | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $4 = $params;
    HEAP32[$4 >> 2] = varrp;
    HEAP32[$4 + 4 >> 2] = 0;
    $5 = HEAP32[_stderr >> 2] | 0;
    $6 = _vfprintf($5 | 0, $format | 0, $4 | 0) | 0;
    label = 3;
    break;
   case 3:
    STACKTOP = __stackBase__;
    return;
  }
}
function _report($prefix, $err, $params) {
  $prefix = $prefix | 0;
  $err = $err | 0;
  $params = $params | 0;
  var $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 1024 | 0;
  $1 = __stackBase__ | 0;
  _element_vsnprintf($1, 1024, $err, $params);
  _out(4584, (tempInt = STACKTOP, STACKTOP = STACKTOP + 16 | 0, HEAP32[tempInt >> 2] = $prefix, HEAP32[tempInt + 8 >> 2] = $1, tempInt) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _pbc_warn($err, varrp) {
  $err = $err | 0;
  varrp = varrp | 0;
  var $params = 0, $2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $params = __stackBase__ | 0;
  $2 = $params;
  HEAP32[$2 >> 2] = varrp;
  HEAP32[$2 + 4 >> 2] = 0;
  _report(5392, $err, $params | 0);
  STACKTOP = __stackBase__;
  return;
}
function _pbc_error($err, varrp) {
  $err = $err | 0;
  varrp = varrp | 0;
  var $params = 0, $2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $params = __stackBase__ | 0;
  $2 = $params;
  HEAP32[$2 >> 2] = varrp;
  HEAP32[$2 + 4 >> 2] = 0;
  _report(5136, $err, $params | 0);
  STACKTOP = __stackBase__;
  return;
}
function _default_pbc_free($ptr) {
  $ptr = $ptr | 0;
  _free($ptr);
  return;
}
function _pbc_strdup($s) {
  $s = $s | 0;
  var $1 = 0, $4 = 0;
  $1 = _strlen($s | 0) | 0;
  $4 = FUNCTION_TABLE_ii[HEAP32[230] & 1023]($1 + 1 | 0) | 0;
  _strcpy($4 | 0, $s | 0);
  return $4 | 0;
}
function _element_vfprintf($stream, $format, $ap) {
  $stream = $stream | 0;
  $format = $format | 0;
  $ap = $ap | 0;
  return _do_print(258, 476, 260, $stream, $format, $ap) | 0;
}
function _do_print($strcb, $fstrcb, $elcb, $data, $format, $ap) {
  $strcb = $strcb | 0;
  $fstrcb = $fstrcb | 0;
  $elcb = $elcb | 0;
  $data = $data | 0;
  $format = $format | 0;
  $ap = $ap | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $count_0_ph73 = 0, $start_0_ph72 = 0, $count_0_ph71 = 0, $start_0_ph65 = 0, $7 = 0, $8 = 0, $9 = 0, $_38 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $22 = 0, $c_0_ph = 0, $found_0_ph = 0, $count_1_ph = 0, $c_0 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $memchr = 0, $33 = 0, $35 = 0, $36 = 0, $_ = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $c_0_ph_be = 0, $_pn = 0, $count_1_ph_be = 0, $count_2 = 0, $43 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _pbc_strdup($format) | 0;
    $2 = _strchr($1 | 0, 37) | 0;
    $3 = ($2 | 0) == 0;
    if ($3) {
      $start_0_ph65 = $1;
      $count_0_ph71 = 0;
      label = 4;
      break;
    } else {
      $start_0_ph72 = $1;
      $count_0_ph73 = 0;
      $6 = $2;
      label = 3;
      break;
    }
   case 2:
    $4 = _strchr($24 | 0, 37) | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      $start_0_ph65 = $24;
      $count_0_ph71 = $count_1_ph;
      label = 4;
      break;
    } else {
      $start_0_ph72 = $24;
      $count_0_ph73 = $count_1_ph;
      $6 = $4;
      label = 3;
      break;
    }
   case 3:
    $11 = $6;
    label = 5;
    break;
   case 4:
    $7 = FUNCTION_TABLE_iii[$strcb & 1023]($data, $start_0_ph65) | 0;
    $8 = ($7 | 0) < 0;
    $9 = $7 + $count_0_ph71 | 0;
    $_38 = $8 ? -1 : $9;
    $count_2 = $_38;
    label = 17;
    break;
   case 5:
    $12 = $11 + 1 | 0;
    $13 = HEAP8[$12] | 0;
    if (($13 << 24 >> 24 | 0) == 37) {
      label = 6;
      break;
    } else if (($13 << 24 >> 24 | 0) == 0) {
      $count_2 = $count_0_ph73;
      label = 17;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $15 = $11 + 2 | 0;
    $16 = _strchr($15 | 0, 37) | 0;
    $17 = ($16 | 0) == 0;
    if ($17) {
      $start_0_ph65 = $start_0_ph72;
      $count_0_ph71 = $count_0_ph73;
      label = 4;
      break;
    } else {
      $11 = $16;
      label = 5;
      break;
    }
   case 7:
    HEAP8[$11] = 0;
    $19 = FUNCTION_TABLE_iii[$strcb & 1023]($data, $start_0_ph72) | 0;
    $20 = ($19 | 0) < 0;
    if ($20) {
      $count_2 = -1;
      label = 17;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $22 = $19 + $count_0_ph73 | 0;
    HEAP8[$11] = 37;
    $count_1_ph = $22;
    $found_0_ph = 1;
    $c_0_ph = $11;
    label = 9;
    break;
   case 9:
    $c_0 = $c_0_ph;
    label = 10;
    break;
   case 10:
    $24 = $c_0 + 1 | 0;
    if ($found_0_ph) {
      label = 11;
      break;
    } else {
      label = 2;
      break;
    }
   case 11:
    $26 = HEAP8[$24] | 0;
    $27 = $26 << 24 >> 24;
    if (($27 | 0) == 66) {
      label = 12;
      break;
    } else if (($27 | 0) == 0) {
      $count_2 = $count_1_ph;
      label = 17;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $29 = (tempInt = HEAP32[$ap + 4 >> 2] | 0, HEAP32[$ap + 4 >> 2] = tempInt + 8, HEAP32[(HEAP32[$ap >> 2] | 0) + tempInt >> 2] | 0);
    $30 = FUNCTION_TABLE_iii[$elcb & 1023]($data, $29) | 0;
    $31 = ($30 | 0) < 0;
    if ($31) {
      $count_2 = -1;
      label = 17;
      break;
    } else {
      $_pn = $30;
      $c_0_ph_be = $24;
      label = 16;
      break;
    }
   case 13:
    $memchr = _memchr(8544, $27 | 0, 21) | 0;
    $33 = ($memchr | 0) == 0;
    if ($33) {
      $c_0 = $24;
      label = 10;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $35 = $26 << 24 >> 24 == 90;
    $36 = $c_0 + 2 | 0;
    $_ = $35 ? $36 : $24;
    $37 = $_ + 1 | 0;
    $38 = HEAP8[$37] | 0;
    HEAP8[$37] = 0;
    $39 = (tempInt = HEAP32[$ap + 4 >> 2] | 0, HEAP32[$ap + 4 >> 2] = tempInt + 8, HEAP32[(HEAP32[$ap >> 2] | 0) + tempInt >> 2] | 0);
    $40 = FUNCTION_TABLE_iiii[$fstrcb & 1023]($data, $11, $39) | 0;
    $41 = ($40 | 0) < 0;
    if ($41) {
      $count_2 = -1;
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    HEAP8[$37] = $38;
    $_pn = $40;
    $c_0_ph_be = $_;
    label = 16;
    break;
   case 16:
    $count_1_ph_be = $_pn + $count_1_ph | 0;
    $count_1_ph = $count_1_ph_be;
    $found_0_ph = 0;
    $c_0_ph = $c_0_ph_be;
    label = 9;
    break;
   case 17:
    $43 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$43 & 1023]($1);
    return $count_2 | 0;
  }
  return 0;
}
function _string_cb($file, $s) {
  $file = $file | 0;
  $s = $s | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $file;
    $2 = _fputs($s | 0, $1 | 0) | 0;
    $3 = ($2 | 0) == -1;
    if ($3) {
      $_0 = -1;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = _strlen($s | 0) | 0;
    $_0 = $5;
    label = 3;
    break;
   case 3:
    return $_0 | 0;
  }
  return 0;
}
function _format_cb($file, $fstring, $ptr) {
  $file = $file | 0;
  $fstring = $fstring | 0;
  $ptr = $ptr | 0;
  var $2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $2 = ___gmp_fprintf($file, $fstring, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $ptr, tempInt) | 0) | 0;
  STACKTOP = __stackBase__;
  return $2 | 0;
}
function _element_cb($file, $e) {
  $file = $file | 0;
  $e = $e | 0;
  return _element_out_str222($file, $e) | 0;
}
function _element_fprintf($stream, $format, varrp) {
  $stream = $stream | 0;
  $format = $format | 0;
  varrp = varrp | 0;
  var $ap = 0, $2 = 0, $3 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $ap = __stackBase__ | 0;
  $2 = $ap;
  HEAP32[$2 >> 2] = varrp;
  HEAP32[$2 + 4 >> 2] = 0;
  $3 = _element_vfprintf($stream, $format, $ap | 0) | 0;
  STACKTOP = __stackBase__;
  return $3 | 0;
}
function _element_vsnprintf($buf, $size, $fmt, $ap) {
  $buf = $buf | 0;
  $size = $size | 0;
  $fmt = $fmt | 0;
  $ap = $ap | 0;
  var $info = 0, $4 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $info = __stackBase__ | 0;
  HEAP32[$info >> 2] = $buf;
  HEAP32[$info + 4 >> 2] = $size;
  HEAP32[$info + 8 >> 2] = $size;
  $4 = $info + 12 | 0;
  HEAP32[$4 >> 2] = 0;
  _do_print(140, 678, 454, $info, $fmt, $ap);
  STACKTOP = __stackBase__;
  return HEAP32[$4 >> 2] | 0;
}
function _string_cbv($data, $s) {
  $data = $data | 0;
  $s = $s | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $data;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $data + 12 | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $2 + $5 | 0;
    $7 = $data + 8 | 0;
    $8 = $7;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = _snprintf($6 | 0, $9 | 0, 7272, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $s, tempInt) | 0) | 0;
    $11 = ($10 | 0) < 0;
    if ($11) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $13 = $data;
    _next($13, $10);
    label = 3;
    break;
   case 3:
    STACKTOP = __stackBase__;
    return $10 | 0;
  }
  return 0;
}
function _poly_div($quot, $rem, $a, $b) {
  $quot = $quot | 0;
  $rem = $rem | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $q = 0, $r = 0, $binv = 0, $e0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $k_035 = 0, $m_034 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $i_033 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $exitcond = 0, $51 = 0, $52 = 0, $53 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $q = __stackBase__ | 0;
    $r = __stackBase__ + 8 | 0;
    $binv = __stackBase__ + 16 | 0;
    $e0 = __stackBase__ + 24 | 0;
    $1 = $a | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = _element_is0134($b) | 0;
    $6 = ($5 | 0) == 0;
    if ($6) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _pbc_die(6616, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
   case 3:
    $9 = _poly_degree($b) | 0;
    $10 = _poly_degree($a) | 0;
    $11 = ($9 | 0) > ($10 | 0);
    if ($11) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _element_set133($rem, $a);
    _element_set0135($quot);
    label = 11;
    break;
   case 5:
    $14 = $r | 0;
    $15 = HEAP32[$1 >> 2] | 0;
    _element_init139($14, $15);
    $16 = $q | 0;
    $17 = HEAP32[$1 >> 2] | 0;
    _element_init139($16, $17);
    $18 = $binv | 0;
    $19 = $4;
    $20 = HEAP32[$19 >> 2] | 0;
    _element_init139($18, $20);
    $21 = $e0 | 0;
    $22 = HEAP32[$19 >> 2] | 0;
    _element_init139($21, $22);
    $23 = $q + 4 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $r + 4 | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    _element_set133($14, $a);
    $27 = $10 - $9 | 0;
    $28 = $27 + 1 | 0;
    _poly_alloc($16, $28);
    $29 = _poly_coeff($b, $9) | 0;
    _element_invert146($18, $29);
    $30 = ($27 | 0) > -1;
    if ($30) {
      label = 6;
      break;
    } else {
      label = 10;
      break;
    }
   case 6:
    $31 = $24;
    $32 = $26;
    $33 = ($9 | 0) < 0;
    $34 = $9 + 1 | 0;
    $m_034 = $10;
    $k_035 = $27;
    label = 7;
    break;
   case 7:
    $36 = HEAP32[$31 >> 2] | 0;
    $37 = $36 + ($k_035 << 2) | 0;
    $38 = HEAP32[$37 >> 2] | 0;
    $39 = $38;
    $40 = HEAP32[$32 >> 2] | 0;
    $41 = $40 + ($m_034 << 2) | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    $43 = $42;
    _element_mul137($39, $18, $43);
    if ($33) {
      label = 9;
      break;
    } else {
      $i_033 = 0;
      label = 8;
      break;
    }
   case 8:
    $44 = _poly_coeff($b, $i_033) | 0;
    _element_mul137($21, $39, $44);
    $45 = $i_033 + $k_035 | 0;
    $46 = HEAP32[$32 >> 2] | 0;
    $47 = $46 + ($45 << 2) | 0;
    $48 = HEAP32[$47 >> 2] | 0;
    $49 = $48;
    _element_sub141($49, $49, $21);
    $50 = $i_033 + 1 | 0;
    $exitcond = ($50 | 0) == ($34 | 0);
    if ($exitcond) {
      label = 9;
      break;
    } else {
      $i_033 = $50;
      label = 8;
      break;
    }
   case 9:
    $51 = $k_035 - 1 | 0;
    $52 = $m_034 - 1 | 0;
    $53 = ($k_035 | 0) > 0;
    if ($53) {
      $m_034 = $52;
      $k_035 = $51;
      label = 7;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _poly_remove_leading_zeroes($14);
    _element_set133($quot, $16);
    _element_set133($rem, $14);
    _element_clear142($16);
    _element_clear142($14);
    _element_clear142($21);
    _element_clear142($18);
    label = 11;
    break;
   case 11:
    STACKTOP = __stackBase__;
    return;
  }
}
function _pbc_die($err, varrp) {
  $err = $err | 0;
  varrp = varrp | 0;
  var $params = 0, $2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $params = __stackBase__ | 0;
  $2 = $params;
  HEAP32[$2 >> 2] = varrp;
  HEAP32[$2 + 4 >> 2] = 0;
  _report(6008, $err, $params | 0);
  _exit(128);
}
function _default_pbc_malloc($size) {
  $size = $size | 0;
  var $1 = 0, $2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _malloc($size) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _pbc_die(7120, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    return 0;
   case 3:
    STACKTOP = __stackBase__;
    return $1 | 0;
  }
  return 0;
}
function _default_pbc_realloc($ptr, $size) {
  $ptr = $ptr | 0;
  $size = $size | 0;
  var $1 = 0, $2 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _realloc($ptr, $size) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _pbc_die(8568, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    return 0;
   case 3:
    STACKTOP = __stackBase__;
    return $1 | 0;
  }
  return 0;
}
function _next($p, $status) {
  $p = $p | 0;
  $status = $status | 0;
  var $1 = 0, $3 = 0, $5 = 0;
  $1 = $p + 12 | 0;
  $3 = (HEAP32[$1 >> 2] | 0) + $status | 0;
  HEAP32[$1 >> 2] = $3;
  $5 = HEAP32[$p + 4 >> 2] | 0;
  HEAP32[$p + 8 >> 2] = $3 >>> 0 < $5 >>> 0 ? $5 - $3 | 0 : 0;
  return;
}
function _field_curve_use_random_solvefory($f) {
  $f = $f | 0;
  HEAP32[$f + 128 >> 2] = 246;
  return;
}
function _curve_set1($x) {
  $x = $x | 0;
  HEAP32[HEAP32[$x + 4 >> 2] >> 2] = 1;
  return;
}
function _curve_is1($x) {
  $x = $x | 0;
  return HEAP32[HEAP32[$x + 4 >> 2] >> 2] | 0;
}
function _format_cbv($data, $fstring, $ptr) {
  $data = $data | 0;
  $fstring = $fstring | 0;
  $ptr = $ptr | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $data;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $data + 12 | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $2 + $5 | 0;
    $7 = $data + 8 | 0;
    $8 = $7;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ___gmp_snprintf($6, $9, $fstring, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $ptr, tempInt) | 0) | 0;
    $11 = ($10 | 0) < 0;
    if ($11) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $13 = $data;
    _next($13, $10);
    label = 3;
    break;
   case 3:
    STACKTOP = __stackBase__;
    return $10 | 0;
  }
  return 0;
}
function _element_cbv($data, $e) {
  $data = $data | 0;
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $data;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $data + 12 | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $2 + $5 | 0;
    $7 = $data + 8 | 0;
    $8 = $7;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = _element_snprint221($6, $9, $e) | 0;
    $11 = ($10 | 0) < 0;
    if ($11) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $13 = $data;
    _next($13, $10);
    label = 3;
    break;
   case 3:
    return $10 | 0;
  }
  return 0;
}
function _element_snprint221($s, $n, $e) {
  $s = $s | 0;
  $n = $n | 0;
  $e = $e | 0;
  return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$e >> 2] | 0) + 168 >> 2] & 1023]($s, $n, $e) | 0;
}
function _element_out_str222($stream, $e) {
  $stream = $stream | 0;
  $e = $e | 0;
  return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$e >> 2] | 0) + 36 >> 2] & 1023]($stream, 0, $e) | 0;
}
function _curve_random_solvefory($a) {
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    _curve_random_no_cofac_solvefory($a);
    $5 = $4 + 20 | 0;
    $6 = $5;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($7 | 0) == 0;
    if ($8) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _element_mul_mpz245($a, $a, $7);
    label = 3;
    break;
   case 3:
    return;
  }
}
function _curve_set_gen_no_cofac($a) {
  $a = $a | 0;
  _element_set242($a, (HEAP32[(HEAP32[$a >> 2] | 0) + 212 >> 2] | 0) + 24 | 0);
  return;
}
function _element_set242($e, $a) {
  $e = $e | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 20 >> 2] & 1023]($e, $a);
  return;
}
function _field_init_curve_ab($f, $a, $b, $order, $cofac) {
  $f = $f | 0;
  $a = $a | 0;
  $b = $b | 0;
  $order = $order | 0;
  $cofac = $cofac | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $even_curve_is_sqr_odd_curve_is_sqr = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $80 = 0, $82 = 0, $83 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $f;
    _field_init($1);
    $2 = $f + 196 | 0;
    ___gmpz_set($2, $order);
    $3 = HEAP32[230] | 0;
    $4 = FUNCTION_TABLE_ii[$3 & 1023](44) | 0;
    $5 = $f + 212 | 0;
    HEAP32[$5 >> 2] = $4;
    $6 = $a | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $4;
    HEAP32[$8 >> 2] = $7;
    $9 = $4 + 4 | 0;
    $10 = $9;
    _element_init243($10, $7);
    $11 = $4 + 12 | 0;
    $12 = $11;
    $13 = HEAP32[$8 >> 2] | 0;
    _element_init243($12, $13);
    _element_set242($10, $a);
    _element_set242($12, $b);
    $14 = $f + 4 | 0;
    HEAP32[$14 >> 2] = 584;
    $15 = $f + 8 | 0;
    HEAP32[$15 >> 2] = 486;
    $16 = $f + 120 | 0;
    HEAP32[$16 >> 2] = 720;
    $17 = $f + 124 | 0;
    HEAP32[$17 >> 2] = 720;
    $18 = $f + 96 | 0;
    HEAP32[$18 >> 2] = 152;
    $19 = $f + 112 | 0;
    HEAP32[$19 >> 2] = 152;
    $20 = $f + 100 | 0;
    HEAP32[$20 >> 2] = 444;
    $21 = $f + 48 | 0;
    HEAP32[$21 >> 2] = 482;
    $22 = $f + 40 | 0;
    HEAP32[$22 >> 2] = 482;
    $23 = $f + 104 | 0;
    HEAP32[$23 >> 2] = 818;
    $24 = $f + 84 | 0;
    HEAP32[$24 >> 2] = 144;
    $25 = $f + 148 | 0;
    HEAP32[$25 >> 2] = 800;
    $26 = $f + 28 | 0;
    HEAP32[$26 >> 2] = 302;
    $27 = $f + 24 | 0;
    HEAP32[$27 >> 2] = 302;
    $28 = $f + 136 | 0;
    HEAP32[$28 >> 2] = 458;
    $29 = $f + 140 | 0;
    HEAP32[$29 >> 2] = 458;
    $30 = $f + 144 | 0;
    HEAP32[$30 >> 2] = 138;
    $31 = $f + 20 | 0;
    HEAP32[$31 >> 2] = 828;
    $32 = $f + 128 | 0;
    HEAP32[$32 >> 2] = 338;
    $33 = $f + 132 | 0;
    HEAP32[$33 >> 2] = 290;
    $34 = $f + 36 | 0;
    HEAP32[$34 >> 2] = 20;
    $35 = $f + 168 | 0;
    HEAP32[$35 >> 2] = 606;
    $36 = $f + 16 | 0;
    HEAP32[$36 >> 2] = 70;
    $37 = $f + 32 | 0;
    HEAP32[$37 >> 2] = 468;
    $38 = $f | 0;
    HEAP32[$38 >> 2] = 238;
    $39 = HEAP32[$8 >> 2] | 0;
    $40 = $39 + 164 | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    $42 = ($41 | 0) < 0;
    if ($42) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $44 = $f + 160 | 0;
    HEAP32[$44 >> 2] = 326;
    label = 4;
    break;
   case 3:
    $46 = $41 << 1;
    $47 = $f + 164 | 0;
    HEAP32[$47 >> 2] = $46;
    label = 4;
    break;
   case 4:
    $49 = $f + 152 | 0;
    HEAP32[$49 >> 2] = 702;
    $50 = $f + 156 | 0;
    HEAP32[$50 >> 2] = 516;
    $51 = $f + 176 | 0;
    HEAP32[$51 >> 2] = 412;
    $52 = $f + 60 | 0;
    HEAP32[$52 >> 2] = 578;
    $53 = $f + 64 | 0;
    HEAP32[$53 >> 2] = 622;
    $54 = $f + 68 | 0;
    HEAP32[$54 >> 2] = 556;
    $55 = $f + 72 | 0;
    HEAP32[$55 >> 2] = 558;
    $56 = $order + 4 | 0;
    $57 = HEAP32[$56 >> 2] | 0;
    $58 = ($57 | 0) != 0;
    $59 = $58 & 1;
    $60 = $order + 8 | 0;
    $61 = HEAP32[$60 >> 2] | 0;
    $62 = HEAP32[$61 >> 2] | 0;
    $63 = $59 & $62;
    $64 = ($63 | 0) == 0;
    $65 = $f + 52 | 0;
    $even_curve_is_sqr_odd_curve_is_sqr = $64 ? 112 : 598;
    HEAP32[$65 >> 2] = $even_curve_is_sqr_odd_curve_is_sqr;
    $66 = $4 + 24 | 0;
    $67 = $66;
    _element_init243($67, $f);
    $68 = $4 + 32 | 0;
    $69 = $68;
    _element_init243($69, $f);
    _curve_random_no_cofac_solvefory($67);
    $70 = ($cofac | 0) == 0;
    if ($70) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $72 = HEAP32[230] | 0;
    $73 = FUNCTION_TABLE_ii[$72 & 1023](12) | 0;
    $74 = $73;
    $75 = $4 + 20 | 0;
    $76 = $75;
    HEAP32[$76 >> 2] = $74;
    ___gmpz_init($74);
    $77 = HEAP32[$76 >> 2] | 0;
    ___gmpz_set($77, $cofac);
    _element_mul_mpz245($69, $67, $cofac);
    label = 7;
    break;
   case 6:
    $79 = $4 + 20 | 0;
    $80 = $79;
    HEAP32[$80 >> 2] = 0;
    _element_set242($69, $67);
    label = 7;
    break;
   case 7:
    $82 = $4 + 40 | 0;
    $83 = $82;
    HEAP32[$83 >> 2] = 0;
    return;
  }
}
function _element_init243($e, $f) {
  $e = $e | 0;
  $f = $f | 0;
  HEAP32[$e >> 2] = $f;
  FUNCTION_TABLE_vi[HEAP32[$f + 4 >> 2] & 1023]($e);
  return;
}
function _curve_init($e) {
  $e = $e | 0;
  var $4 = 0, $6 = 0, $10 = 0;
  $4 = HEAP32[(HEAP32[$e >> 2] | 0) + 212 >> 2] | 0;
  $6 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](20) | 0;
  HEAP32[$e + 4 >> 2] = $6;
  $10 = $4;
  _element_init243($6 + 4 | 0, HEAP32[$10 >> 2] | 0);
  _element_init243($6 + 12 | 0, HEAP32[$10 >> 2] | 0);
  HEAP32[$6 >> 2] = 1;
  return;
}
function _curve_clear($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0;
  $1 = $e + 4 | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  _element_clear251($2 + 4 | 0);
  _element_clear251($2 + 12 | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$1 >> 2] | 0);
  return;
}
function _curve_invert($c, $a) {
  $c = $c | 0;
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $c + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $a + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) == 0;
    $8 = $2;
    if ($7) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    HEAP32[$8 >> 2] = 1;
    label = 4;
    break;
   case 3:
    HEAP32[$8 >> 2] = 0;
    $11 = $2 + 4 | 0;
    $12 = $11;
    $13 = $4 + 4 | 0;
    $14 = $13;
    _element_set242($12, $14);
    $15 = $2 + 12 | 0;
    $16 = $15;
    $17 = $4 + 12 | 0;
    $18 = $17;
    _element_neg249($16, $18);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _curve_double($c, $a) {
  $c = $c | 0;
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $c + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $a + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9;
    $11 = $9;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($12 | 0) == 0;
    if ($13) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $15 = $6;
    HEAP32[$15 >> 2] = 1;
    label = 6;
    break;
   case 3:
    $17 = $9 + 12 | 0;
    $18 = $17;
    $19 = _element_is0262($18) | 0;
    $20 = ($19 | 0) == 0;
    if ($20) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $22 = $6;
    HEAP32[$22 >> 2] = 1;
    label = 6;
    break;
   case 5:
    $24 = $4 + 4 | 0;
    $25 = $24;
    _double_no_check($7, $10, $25);
    label = 6;
    break;
   case 6:
    return;
  }
}
function _multi_double($c, $a, $n) {
  $c = $c | 0;
  $a = $a | 0;
  $n = $n | 0;
  var $e0 = 0, $e1 = 0, $e2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $i_079 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $exitcond84 = 0, $i_176 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $58 = 0, $exitcond83 = 0, $59 = 0, $60 = 0, $61 = 0, $i_272 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $i_368 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $exitcond82 = 0, $100 = 0, $i_467 = 0, $101 = 0, $102 = 0, $exitcond = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $e0 = __stackBase__ | 0;
    $e1 = __stackBase__ + 8 | 0;
    $e2 = __stackBase__ + 16 | 0;
    $1 = $n << 3;
    $2 = _malloc($1) | 0;
    $3 = $2;
    $4 = HEAP32[$a >> 2] | 0;
    $5 = $4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6 + 212 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $4 + 4 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $e0 | 0;
    $12 = $10 + 12 | 0;
    $13 = $12;
    $14 = HEAP32[$13 >> 2] | 0;
    _element_init243($11, $14);
    $15 = $e1 | 0;
    $16 = HEAP32[$13 >> 2] | 0;
    _element_init243($15, $16);
    $17 = $e2 | 0;
    $18 = HEAP32[$13 >> 2] | 0;
    _element_init243($17, $18);
    $19 = ($n | 0) > 0;
    if ($19) {
      $i_079 = 0;
      label = 3;
      break;
    } else {
      label = 11;
      break;
    }
   case 2:
    $20 = ($n | 0) > 0;
    if ($20) {
      $i_176 = 0;
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 3:
    $21 = $a + ($i_079 << 2) | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = $22 + 4 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $c + ($i_079 << 2) | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = $26 + 4 | 0;
    $28 = HEAP32[$27 >> 2] | 0;
    $29 = $3 + ($i_079 << 3) | 0;
    $30 = $24 + 12 | 0;
    $31 = $30;
    $32 = HEAP32[$31 >> 2] | 0;
    _element_init243($29, $32);
    $33 = $24;
    $34 = HEAP32[$33 >> 2] | 0;
    $35 = ($34 | 0) == 0;
    if ($35) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $37 = $28;
    HEAP32[$37 >> 2] = 1;
    label = 7;
    break;
   case 5:
    $39 = $30;
    $40 = _element_is0262($39) | 0;
    $41 = ($40 | 0) == 0;
    if ($41) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $43 = $28;
    HEAP32[$43 >> 2] = 1;
    label = 7;
    break;
   case 7:
    $45 = $i_079 + 1 | 0;
    $exitcond84 = ($45 | 0) == ($n | 0);
    if ($exitcond84) {
      label = 2;
      break;
    } else {
      $i_079 = $45;
      label = 3;
      break;
    }
   case 8:
    $46 = $a + ($i_176 << 2) | 0;
    $47 = HEAP32[$46 >> 2] | 0;
    $48 = $47 + 4 | 0;
    $49 = HEAP32[$48 >> 2] | 0;
    $50 = $3 + ($i_176 << 3) | 0;
    $51 = $49 + 12 | 0;
    $52 = $51;
    _element_double275($50, $52);
    $53 = ($i_176 | 0) > 0;
    if ($53) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $55 = $i_176 - 1 | 0;
    $56 = $3 + ($55 << 3) | 0;
    _element_mul252($50, $50, $56);
    label = 10;
    break;
   case 10:
    $58 = $i_176 + 1 | 0;
    $exitcond83 = ($58 | 0) == ($n | 0);
    if ($exitcond83) {
      label = 11;
      break;
    } else {
      $i_176 = $58;
      label = 8;
      break;
    }
   case 11:
    $59 = $n - 1 | 0;
    $60 = $3 + ($59 << 3) | 0;
    _element_invert255($17, $60);
    $61 = ($59 | 0) > 0;
    if ($61) {
      $i_272 = $59;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $62 = $a + ($i_272 << 2) | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    $64 = $63 + 4 | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    $66 = $3 + ($i_272 << 3) | 0;
    $67 = $i_272 - 1 | 0;
    $68 = $3 + ($67 << 3) | 0;
    _element_mul252($66, $68, $17);
    $69 = $65 + 12 | 0;
    $70 = $69;
    _element_mul252($17, $17, $70);
    _element_double275($17, $17);
    $71 = ($67 | 0) > 0;
    if ($71) {
      $i_272 = $67;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $72 = $2;
    _element_set242($72, $17);
    $73 = ($n | 0) > 0;
    if ($73) {
      label = 14;
      break;
    } else {
      label = 18;
      break;
    }
   case 14:
    $74 = $8 + 4 | 0;
    $75 = $74;
    $i_368 = 0;
    label = 15;
    break;
   case 15:
    $77 = $a + ($i_368 << 2) | 0;
    $78 = HEAP32[$77 >> 2] | 0;
    $79 = $78 + 4 | 0;
    $80 = HEAP32[$79 >> 2] | 0;
    $81 = $c + ($i_368 << 2) | 0;
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = $82 + 4 | 0;
    $84 = HEAP32[$83 >> 2] | 0;
    $85 = $84;
    $86 = HEAP32[$85 >> 2] | 0;
    $87 = ($86 | 0) == 0;
    if ($87) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    $89 = $80 + 4 | 0;
    $90 = $89;
    _element_square257($17, $90);
    _element_mul_si274($17, $17);
    _element_add256($17, $17, $75);
    $91 = $3 + ($i_368 << 3) | 0;
    _element_mul252($17, $17, $91);
    _element_double275($15, $90);
    _element_square257($11, $17);
    _element_sub254($11, $11, $15);
    _element_sub254($15, $90, $11);
    _element_mul252($15, $15, $17);
    $92 = $80 + 12 | 0;
    $93 = $92;
    _element_sub254($15, $15, $93);
    $94 = $84 + 4 | 0;
    $95 = $94;
    _element_set242($95, $11);
    $96 = $84 + 12 | 0;
    $97 = $96;
    _element_set242($97, $15);
    HEAP32[$85 >> 2] = 0;
    label = 17;
    break;
   case 17:
    $99 = $i_368 + 1 | 0;
    $exitcond82 = ($99 | 0) == ($n | 0);
    if ($exitcond82) {
      label = 18;
      break;
    } else {
      $i_368 = $99;
      label = 15;
      break;
    }
   case 18:
    _element_clear251($11);
    _element_clear251($15);
    _element_clear251($17);
    $100 = ($n | 0) > 0;
    if ($100) {
      $i_467 = 0;
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    $101 = $3 + ($i_467 << 3) | 0;
    _element_clear251($101);
    $102 = $i_467 + 1 | 0;
    $exitcond = ($102 | 0) == ($n | 0);
    if ($exitcond) {
      label = 20;
      break;
    } else {
      $i_467 = $102;
      label = 19;
      break;
    }
   case 20:
    _free($2);
    STACKTOP = __stackBase__;
    return;
  }
}
function _curve_mul($c, $a, $b) {
  $c = $c | 0;
  $a = $a | 0;
  $b = $b | 0;
  var $lambda = 0, $e0 = 0, $e1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $lambda = __stackBase__ | 0;
    $e0 = __stackBase__ + 8 | 0;
    $e1 = __stackBase__ + 16 | 0;
    $1 = $a | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $c + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $a + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9;
    $11 = $b + 4 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $9;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = ($14 | 0) == 0;
    if ($15) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _curve_set($c, $b);
    label = 12;
    break;
   case 3:
    $18 = $12;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = ($19 | 0) == 0;
    if ($20) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _curve_set($c, $a);
    label = 12;
    break;
   case 5:
    $23 = $9 + 4 | 0;
    $24 = $23;
    $25 = $12 + 4 | 0;
    $26 = $25;
    $27 = _element_cmp264($24, $26) | 0;
    $28 = ($27 | 0) == 0;
    if ($28) {
      label = 6;
      break;
    } else {
      label = 11;
      break;
    }
   case 6:
    $30 = $9 + 12 | 0;
    $31 = $30;
    $32 = $12 + 12 | 0;
    $33 = $32;
    $34 = _element_cmp264($31, $33) | 0;
    $35 = ($34 | 0) == 0;
    if ($35) {
      label = 7;
      break;
    } else {
      label = 10;
      break;
    }
   case 7:
    $37 = _element_is0262($31) | 0;
    $38 = ($37 | 0) == 0;
    if ($38) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $40 = $6;
    HEAP32[$40 >> 2] = 1;
    label = 12;
    break;
   case 9:
    $42 = $4 + 4 | 0;
    $43 = $42;
    _double_no_check($7, $10, $43);
    label = 12;
    break;
   case 10:
    $45 = $6;
    HEAP32[$45 >> 2] = 1;
    label = 12;
    break;
   case 11:
    $47 = $lambda | 0;
    $48 = $4;
    $49 = HEAP32[$48 >> 2] | 0;
    _element_init243($47, $49);
    $50 = $e0 | 0;
    $51 = HEAP32[$48 >> 2] | 0;
    _element_init243($50, $51);
    $52 = $e1 | 0;
    $53 = HEAP32[$48 >> 2] | 0;
    _element_init243($52, $53);
    _element_sub254($50, $26, $24);
    _element_invert255($50, $50);
    $54 = $12 + 12 | 0;
    $55 = $54;
    $56 = $9 + 12 | 0;
    $57 = $56;
    _element_sub254($47, $55, $57);
    _element_mul252($47, $47, $50);
    _element_square257($50, $47);
    _element_sub254($50, $50, $24);
    _element_sub254($50, $50, $26);
    _element_sub254($52, $24, $50);
    _element_mul252($52, $52, $47);
    _element_sub254($52, $52, $57);
    $58 = $6 + 4 | 0;
    $59 = $58;
    _element_set242($59, $50);
    $60 = $6 + 12 | 0;
    $61 = $60;
    _element_set242($61, $52);
    $62 = $6;
    HEAP32[$62 >> 2] = 0;
    _element_clear251($47);
    _element_clear251($50);
    _element_clear251($52);
    label = 12;
    break;
   case 12:
    STACKTOP = __stackBase__;
    return;
  }
}
function _multi_add($c, $a, $b, $n) {
  $c = $c | 0;
  $a = $a | 0;
  $b = $b | 0;
  $n = $n | 0;
  var $e0 = 0, $e1 = 0, $e2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $i_096 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $exitcond101 = 0, $46 = 0, $47 = 0, $48 = 0, $i_192 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $i_288 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $88 = 0, $89 = 0, $90 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $107 = 0, $108 = 0, $110 = 0, $113 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $exitcond100 = 0, $127 = 0, $i_387 = 0, $128 = 0, $129 = 0, $exitcond = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $e0 = __stackBase__ | 0;
    $e1 = __stackBase__ + 8 | 0;
    $e2 = __stackBase__ + 16 | 0;
    $1 = $n << 3;
    $2 = _malloc($1) | 0;
    $3 = $2;
    $4 = HEAP32[$a >> 2] | 0;
    $5 = $4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6 + 212 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = $4 + 4 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = HEAP32[$b >> 2] | 0;
    $12 = $11 + 4 | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = $e0 | 0;
    $15 = $10 + 4 | 0;
    $16 = $15;
    $17 = $15;
    $18 = HEAP32[$17 >> 2] | 0;
    _element_init243($14, $18);
    $19 = $e1 | 0;
    $20 = HEAP32[$17 >> 2] | 0;
    _element_init243($19, $20);
    $21 = $e2 | 0;
    $22 = HEAP32[$17 >> 2] | 0;
    _element_init243($21, $22);
    $23 = $2;
    $24 = HEAP32[$17 >> 2] | 0;
    _element_init243($23, $24);
    $25 = $13 + 4 | 0;
    $26 = $25;
    _element_sub254($23, $26, $16);
    $27 = ($n | 0) > 1;
    if ($27) {
      $i_096 = 1;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $28 = $a + ($i_096 << 2) | 0;
    $29 = HEAP32[$28 >> 2] | 0;
    $30 = $29 + 4 | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = $b + ($i_096 << 2) | 0;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = $33 + 4 | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    $36 = $3 + ($i_096 << 3) | 0;
    $37 = $31 + 4 | 0;
    $38 = $37;
    $39 = $37;
    $40 = HEAP32[$39 >> 2] | 0;
    _element_init243($36, $40);
    $41 = $35 + 4 | 0;
    $42 = $41;
    _element_sub254($36, $42, $38);
    $43 = $i_096 - 1 | 0;
    $44 = $3 + ($43 << 3) | 0;
    _element_mul252($36, $36, $44);
    $45 = $i_096 + 1 | 0;
    $exitcond101 = ($45 | 0) == ($n | 0);
    if ($exitcond101) {
      label = 3;
      break;
    } else {
      $i_096 = $45;
      label = 2;
      break;
    }
   case 3:
    $46 = $n - 1 | 0;
    $47 = $3 + ($46 << 3) | 0;
    _element_invert255($21, $47);
    $48 = ($46 | 0) > 0;
    if ($48) {
      $i_192 = $46;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $49 = $a + ($i_192 << 2) | 0;
    $50 = HEAP32[$49 >> 2] | 0;
    $51 = $50 + 4 | 0;
    $52 = HEAP32[$51 >> 2] | 0;
    $53 = $b + ($i_192 << 2) | 0;
    $54 = HEAP32[$53 >> 2] | 0;
    $55 = $54 + 4 | 0;
    $56 = HEAP32[$55 >> 2] | 0;
    $57 = $3 + ($i_192 << 3) | 0;
    $58 = $i_192 - 1 | 0;
    $59 = $3 + ($58 << 3) | 0;
    _element_mul252($57, $59, $21);
    $60 = $56 + 4 | 0;
    $61 = $60;
    $62 = $52 + 4 | 0;
    $63 = $62;
    _element_sub254($19, $61, $63);
    _element_mul252($21, $21, $19);
    $64 = ($58 | 0) > 0;
    if ($64) {
      $i_192 = $58;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _element_set242($23, $21);
    $65 = ($n | 0) > 0;
    if ($65) {
      label = 6;
      break;
    } else {
      label = 19;
      break;
    }
   case 6:
    $66 = $8 + 4 | 0;
    $67 = $66;
    $i_288 = 0;
    label = 7;
    break;
   case 7:
    $69 = $a + ($i_288 << 2) | 0;
    $70 = HEAP32[$69 >> 2] | 0;
    $71 = $70 + 4 | 0;
    $72 = HEAP32[$71 >> 2] | 0;
    $73 = $72;
    $74 = $b + ($i_288 << 2) | 0;
    $75 = HEAP32[$74 >> 2] | 0;
    $76 = $75 + 4 | 0;
    $77 = HEAP32[$76 >> 2] | 0;
    $78 = $c + ($i_288 << 2) | 0;
    $79 = HEAP32[$78 >> 2] | 0;
    $80 = $79 + 4 | 0;
    $81 = HEAP32[$80 >> 2] | 0;
    $82 = $81;
    $83 = $72;
    $84 = HEAP32[$83 >> 2] | 0;
    $85 = ($84 | 0) == 0;
    if ($85) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _curve_set($79, $75);
    label = 18;
    break;
   case 9:
    $88 = $77;
    $89 = HEAP32[$88 >> 2] | 0;
    $90 = ($89 | 0) == 0;
    if ($90) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    _curve_set($79, $70);
    label = 18;
    break;
   case 11:
    $93 = $72 + 4 | 0;
    $94 = $93;
    $95 = $77 + 4 | 0;
    $96 = $95;
    $97 = _element_cmp264($94, $96) | 0;
    $98 = ($97 | 0) == 0;
    if ($98) {
      label = 12;
      break;
    } else {
      label = 17;
      break;
    }
   case 12:
    $100 = $72 + 12 | 0;
    $101 = $100;
    $102 = $77 + 12 | 0;
    $103 = $102;
    $104 = _element_cmp264($101, $103) | 0;
    $105 = ($104 | 0) == 0;
    if ($105) {
      label = 13;
      break;
    } else {
      label = 16;
      break;
    }
   case 13:
    $107 = _element_is0262($101) | 0;
    $108 = ($107 | 0) == 0;
    if ($108) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $110 = $81;
    HEAP32[$110 >> 2] = 1;
    label = 18;
    break;
   case 15:
    _double_no_check($82, $73, $67);
    label = 18;
    break;
   case 16:
    $113 = $81;
    HEAP32[$113 >> 2] = 1;
    label = 18;
    break;
   case 17:
    $115 = $77 + 12 | 0;
    $116 = $115;
    $117 = $72 + 12 | 0;
    $118 = $117;
    _element_sub254($21, $116, $118);
    $119 = $3 + ($i_288 << 3) | 0;
    _element_mul252($21, $21, $119);
    _element_square257($14, $21);
    _element_sub254($14, $14, $94);
    _element_sub254($14, $14, $96);
    _element_sub254($19, $94, $14);
    _element_mul252($19, $19, $21);
    _element_sub254($19, $19, $118);
    $120 = $81 + 4 | 0;
    $121 = $120;
    _element_set242($121, $14);
    $122 = $81 + 12 | 0;
    $123 = $122;
    _element_set242($123, $19);
    $124 = $81;
    HEAP32[$124 >> 2] = 0;
    label = 18;
    break;
   case 18:
    $126 = $i_288 + 1 | 0;
    $exitcond100 = ($126 | 0) == ($n | 0);
    if ($exitcond100) {
      label = 19;
      break;
    } else {
      $i_288 = $126;
      label = 7;
      break;
    }
   case 19:
    _element_clear251($14);
    _element_clear251($19);
    _element_clear251($21);
    $127 = ($n | 0) > 0;
    if ($127) {
      $i_387 = 0;
      label = 20;
      break;
    } else {
      label = 21;
      break;
    }
   case 20:
    $128 = $3 + ($i_387 << 3) | 0;
    _element_clear251($128);
    $129 = $i_387 + 1 | 0;
    $exitcond = ($129 | 0) == ($n | 0);
    if ($exitcond) {
      label = 21;
      break;
    } else {
      $i_387 = $129;
      label = 20;
      break;
    }
   case 21:
    _free($2);
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_pow_mpz244($x, $a, $n) {
  $x = $x | 0;
  $a = $a | 0;
  $n = $n | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$x >> 2] | 0) + 116 >> 2] & 1023]($x, $a, $n);
  return;
}
function _curve_cmp($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $e = 0, $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $e = __stackBase__ | 0;
    $1 = ($a | 0) == ($b | 0);
    if ($1) {
      $_0 = 0;
      label = 5;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = $a | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 + 212 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6 + 40 | 0;
    $8 = $7;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ($9 | 0) == 0;
    if ($10) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $12 = $e | 0;
    _element_init_same_as272($12, $a);
    _element_div273($12, $a, $b);
    $13 = HEAP32[$8 >> 2] | 0;
    _element_pow_mpz244($12, $12, $13);
    $14 = _element_is1261($12) | 0;
    $15 = ($14 | 0) == 0;
    $16 = $15 & 1;
    _element_clear251($12);
    $_0 = $16;
    label = 5;
    break;
   case 4:
    $18 = $a + 4 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $19;
    $21 = $b + 4 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = $22;
    $24 = _point_cmp($20, $23) | 0;
    $_0 = $24;
    label = 5;
    break;
   case 5:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _odd_curve_is_sqr($e) {
  $e = $e | 0;
  return 1;
}
function _curve_get_x($e) {
  $e = $e | 0;
  return (HEAP32[$e + 4 >> 2] | 0) + 4 | 0;
}
function _curve_get_y($e) {
  $e = $e | 0;
  return (HEAP32[$e + 4 >> 2] | 0) + 12 | 0;
}
function _curve_x_coord($e) {
  $e = $e | 0;
  return (HEAP32[$e + 4 >> 2] | 0) + 4 | 0;
}
function _curve_y_coord($e) {
  $e = $e | 0;
  return (HEAP32[$e + 4 >> 2] | 0) + 12 | 0;
}
function _curve_a_coeff($e) {
  $e = $e | 0;
  return (HEAP32[(HEAP32[$e >> 2] | 0) + 212 >> 2] | 0) + 4 | 0;
}
function _curve_b_coeff($e) {
  $e = $e | 0;
  return (HEAP32[(HEAP32[$e >> 2] | 0) + 212 >> 2] | 0) + 12 | 0;
}
function _curve_sign($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 2;
      break;
    } else {
      $_0 = 0;
      label = 3;
      break;
    }
   case 2:
    $7 = $2 + 12 | 0;
    $8 = $7;
    $9 = _element_sign247($8) | 0;
    $_0 = $9;
    label = 3;
    break;
   case 3:
    return $_0 | 0;
  }
  return 0;
}
function _curve_set($c, $a) {
  $c = $c | 0;
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $c + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $a + 4 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) == 0;
    $8 = $2;
    if ($7) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    HEAP32[$8 >> 2] = 1;
    label = 4;
    break;
   case 3:
    HEAP32[$8 >> 2] = 0;
    $11 = $2 + 4 | 0;
    $12 = $11;
    $13 = $4 + 4 | 0;
    $14 = $13;
    _element_set242($12, $14);
    $15 = $2 + 12 | 0;
    $16 = $15;
    $17 = $4 + 12 | 0;
    $18 = $17;
    _element_set242($16, $18);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _curve_random_pointmul($a) {
  $a = $a | 0;
  var $1 = 0, $4 = 0, $5 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $1 = $a | 0;
  $4 = HEAP32[(HEAP32[$1 >> 2] | 0) + 212 >> 2] | 0;
  $5 = __stackBase__ | 0;
  ___gmpz_init($5);
  _pbc_mpz_random($5, (HEAP32[$1 >> 2] | 0) + 196 | 0);
  _element_mul_mpz245($a, $4 + 32 | 0, $5);
  ___gmpz_clear($5);
  STACKTOP = __stackBase__;
  return;
}
function _curve_from_hash($a, $data, $len) {
  $a = $a | 0;
  $data = $data | 0;
  $len = $len | 0;
  var $t = 0, $t1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $t = __stackBase__ | 0;
    $t1 = __stackBase__ + 8 | 0;
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $a | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 + 212 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $t | 0;
    $8 = $6;
    $9 = HEAP32[$8 >> 2] | 0;
    _element_init243($7, $9);
    $10 = $t1 | 0;
    $11 = HEAP32[$8 >> 2] | 0;
    _element_init243($10, $11);
    $12 = $2;
    HEAP32[$12 >> 2] = 0;
    $13 = $2 + 4 | 0;
    $14 = $13;
    _element_from_hash269($14, $data, $len);
    $15 = $6 + 4 | 0;
    $16 = $15;
    $17 = $6 + 12 | 0;
    $18 = $17;
    label = 2;
    break;
   case 2:
    _element_square257($7, $14);
    _element_add256($7, $7, $16);
    _element_mul252($7, $7, $14);
    _element_add256($7, $7, $18);
    $20 = _element_is_sqr260($7) | 0;
    $21 = ($20 | 0) == 0;
    if ($21) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    _element_square257($14, $14);
    _element_set1270($7);
    _element_add256($14, $14, $7);
    label = 2;
    break;
   case 4:
    $24 = $2 + 12 | 0;
    $25 = $24;
    _element_sqrt258($25, $7);
    $26 = _element_sgn271($25) | 0;
    $27 = ($26 | 0) < 0;
    if ($27) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    _element_neg249($25, $25);
    label = 6;
    break;
   case 6:
    $30 = $6 + 20 | 0;
    $31 = $30;
    $32 = HEAP32[$31 >> 2] | 0;
    $33 = ($32 | 0) == 0;
    if ($33) {
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _element_mul_mpz245($a, $a, $32);
    label = 8;
    break;
   case 8:
    _element_clear251($7);
    _element_clear251($10);
    STACKTOP = __stackBase__;
    return;
  }
}
function _curve_out_str($stream, $base, $a) {
  $stream = $stream | 0;
  $base = $base | 0;
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $not_ = 0, $_ = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) == 0;
    $6 = $stream;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $8 = _fputc(79, $6 | 0) | 0;
    $not_ = ($8 | 0) != -1;
    $_ = $not_ & 1;
    $_0 = $_;
    label = 9;
    break;
   case 3:
    $10 = _fputc(91, $6 | 0) | 0;
    $11 = ($10 | 0) == -1;
    if ($11) {
      $_0 = 0;
      label = 9;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $13 = $2 + 4 | 0;
    $14 = $13;
    $15 = _element_out_str268($stream, $base, $14) | 0;
    $16 = ($15 | 0) == 0;
    if ($16) {
      $_0 = 0;
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $18 = _fputs(5128, $stream | 0) | 0;
    $19 = ($18 | 0) == -1;
    if ($19) {
      $_0 = 0;
      label = 9;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $21 = $2 + 12 | 0;
    $22 = $21;
    $23 = _element_out_str268($stream, $base, $22) | 0;
    $24 = ($23 | 0) == 0;
    if ($24) {
      $_0 = 0;
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $26 = _fputc(93, $6 | 0) | 0;
    $27 = ($26 | 0) == -1;
    if ($27) {
      $_0 = 0;
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $29 = $15 + 4 | 0;
    $30 = $29 + $23 | 0;
    $_0 = $30;
    label = 9;
    break;
   case 9:
    return $_0 | 0;
  }
  return 0;
}
function _curve_snprint($s, $n, $a) {
  $s = $s | 0;
  $n = $n | 0;
  $a = $a | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $_ = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $_49 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $_50 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $_51 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $_52 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $_53 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $a + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $7 = _snprintf($s | 0, $n | 0, 5608, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
    $8 = ($7 | 0) < 0;
    $_ = $8 ? $7 : 1;
    $_0 = $_;
    label = 8;
    break;
   case 3:
    $10 = _snprintf($s | 0, $n | 0, 5384, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
    $11 = ($10 | 0) < 0;
    if ($11) {
      $_0 = $10;
      label = 8;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $13 = $10 >>> 0 < $n >>> 0;
    $14 = $n - $10 | 0;
    $_49 = $13 ? $14 : 0;
    $15 = $s + $10 | 0;
    $16 = $2 + 4 | 0;
    $17 = $16;
    $18 = _element_snprint267($15, $_49, $17) | 0;
    $19 = ($18 | 0) < 0;
    if ($19) {
      $_0 = $18;
      label = 8;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $21 = $18 + $10 | 0;
    $22 = $21 >>> 0 < $n >>> 0;
    $23 = $n - $21 | 0;
    $_50 = $22 ? $23 : 0;
    $24 = $s + $21 | 0;
    $25 = _snprintf($24 | 0, $_50 | 0, 5128, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
    $26 = ($25 | 0) < 0;
    if ($26) {
      $_0 = $25;
      label = 8;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $28 = $25 + $21 | 0;
    $29 = $28 >>> 0 < $n >>> 0;
    $30 = $n - $28 | 0;
    $_51 = $29 ? $30 : 0;
    $31 = $s + $28 | 0;
    $32 = $2 + 12 | 0;
    $33 = $32;
    $34 = _element_snprint267($31, $_51, $33) | 0;
    $35 = ($34 | 0) < 0;
    if ($35) {
      $_0 = $34;
      label = 8;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $37 = $34 + $28 | 0;
    $38 = $37 >>> 0 < $n >>> 0;
    $39 = $n - $37 | 0;
    $_52 = $38 ? $39 : 0;
    $40 = $s + $37 | 0;
    $41 = _snprintf($40 | 0, $_52 | 0, 4544, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0) | 0;
    $42 = ($41 | 0) < 0;
    $43 = $42 ? 0 : $37;
    $_53 = $43 + $41 | 0;
    STACKTOP = __stackBase__;
    return $_53 | 0;
   case 8:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _curve_set_multiz($a, $m) {
  $a = $a | 0;
  $m = $m | 0;
  var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $9 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _multiz_is_z($m) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 5;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $4 = _multiz_is0($m) | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _element_set0263($a);
    label = 8;
    break;
   case 4:
    _pbc_warn(6488, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    label = 8;
    break;
   case 5:
    $9 = _multiz_count($m) | 0;
    $10 = ($9 | 0) < 2;
    if ($10) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    _pbc_warn(5976, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    label = 8;
    break;
   case 7:
    $13 = $a + 4 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $14;
    HEAP32[$15 >> 2] = 0;
    $16 = $14 + 4 | 0;
    $17 = $16;
    $18 = _multiz_at($m, 0) | 0;
    _element_set_multiz266($17, $18);
    $19 = $14 + 12 | 0;
    $20 = $19;
    $21 = _multiz_at($m, 1) | 0;
    _element_set_multiz266($20, $21);
    label = 8;
    break;
   case 8:
    STACKTOP = __stackBase__;
    return;
  }
}
function _curve_set_str($e, $s, $base) {
  $e = $e | 0;
  $s = $s | 0;
  $base = $base | 0;
  var $1 = 0, $2 = 0, $cp_0 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $_pr = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $_sum = 0, $25 = 0, $cp_1 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $_pr29 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $_sum27 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    _element_set0263($e);
    $cp_0 = $s;
    label = 2;
    break;
   case 2:
    $4 = HEAP8[$cp_0] | 0;
    $5 = $4 << 24 >> 24 == 0;
    if ($5) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $7 = $4 << 24 >> 24;
    $8 = _isspace($7 | 0) | 0;
    $9 = ($8 | 0) == 0;
    $10 = $cp_0 + 1 | 0;
    if ($9) {
      label = 4;
      break;
    } else {
      $cp_0 = $10;
      label = 2;
      break;
    }
   case 4:
    $_pr = HEAP8[$cp_0] | 0;
    $11 = $_pr << 24 >> 24 == 79;
    if ($11) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $13 = $cp_0;
    $14 = $s;
    $15 = 1 - $14 | 0;
    $16 = $15 + $13 | 0;
    $_0 = $16;
    label = 15;
    break;
   case 6:
    $17 = $2;
    HEAP32[$17 >> 2] = 0;
    $18 = HEAP8[$cp_0] | 0;
    $19 = $18 << 24 >> 24 == 91;
    if ($19) {
      label = 7;
      break;
    } else {
      $_0 = 0;
      label = 15;
      break;
    }
   case 7:
    $21 = $cp_0 + 1 | 0;
    $22 = $2 + 4 | 0;
    $23 = $22;
    $24 = _element_set_str265($23, $21, $base) | 0;
    $_sum = $24 + 1 | 0;
    $25 = $cp_0 + $_sum | 0;
    $cp_1 = $25;
    label = 8;
    break;
   case 8:
    $27 = HEAP8[$cp_1] | 0;
    $28 = $27 << 24 >> 24 == 0;
    if ($28) {
      $_0 = 0;
      label = 15;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $30 = $27 << 24 >> 24;
    $31 = _isspace($30 | 0) | 0;
    $32 = ($31 | 0) == 0;
    $33 = $cp_1 + 1 | 0;
    if ($32) {
      label = 10;
      break;
    } else {
      $cp_1 = $33;
      label = 8;
      break;
    }
   case 10:
    $_pr29 = HEAP8[$cp_1] | 0;
    $34 = $_pr29 << 24 >> 24 == 44;
    if ($34) {
      label = 11;
      break;
    } else {
      $_0 = 0;
      label = 15;
      break;
    }
   case 11:
    $36 = $cp_1 + 1 | 0;
    $37 = $2 + 12 | 0;
    $38 = $37;
    $39 = _element_set_str265($38, $36, $base) | 0;
    $_sum27 = $39 + 1 | 0;
    $40 = $cp_1 + $_sum27 | 0;
    $41 = HEAP8[$40] | 0;
    $42 = $41 << 24 >> 24 == 93;
    if ($42) {
      label = 12;
      break;
    } else {
      $_0 = 0;
      label = 15;
      break;
    }
   case 12:
    $44 = _curve_is_valid_point($e) | 0;
    $45 = ($44 | 0) == 0;
    if ($45) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    _element_set0263($e);
    $_0 = 0;
    label = 15;
    break;
   case 14:
    $48 = $40;
    $49 = $s;
    $50 = 1 - $49 | 0;
    $51 = $50 + $48 | 0;
    $_0 = $51;
    label = 15;
    break;
   case 15:
    return $_0 | 0;
  }
  return 0;
}
function _field_clear_curve($f) {
  $f = $f | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $f + 212 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 32 | 0;
    $4 = $3;
    _element_clear251($4);
    $5 = $2 + 24 | 0;
    $6 = $5;
    _element_clear251($6);
    $7 = $2 + 20 | 0;
    $8 = $7;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ($9 | 0) == 0;
    if ($10) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    ___gmpz_clear($9);
    $12 = HEAP32[232] | 0;
    $13 = HEAP32[$8 >> 2] | 0;
    $14 = $13;
    FUNCTION_TABLE_vi[$12 & 1023]($14);
    label = 3;
    break;
   case 3:
    $16 = $2 + 40 | 0;
    $17 = $16;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = ($18 | 0) == 0;
    if ($19) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    ___gmpz_clear($18);
    $21 = HEAP32[232] | 0;
    $22 = HEAP32[$17 >> 2] | 0;
    $23 = $22;
    FUNCTION_TABLE_vi[$21 & 1023]($23);
    label = 5;
    break;
   case 5:
    $25 = $2 + 4 | 0;
    $26 = $25;
    _element_clear251($26);
    $27 = $2 + 12 | 0;
    $28 = $27;
    _element_clear251($28);
    $29 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$29 & 1023]($2);
    return;
  }
}
function _curve_length_in_bytes($x) {
  $x = $x | 0;
  var $2 = 0, $5 = 0;
  $2 = HEAP32[$x + 4 >> 2] | 0;
  $5 = _element_length_in_bytes250($2 + 4 | 0) | 0;
  return (_element_length_in_bytes250($2 + 12 | 0) | 0) + $5 | 0;
}
function _curve_to_bytes($data, $e) {
  $data = $data | 0;
  $e = $e | 0;
  var $2 = 0, $5 = 0;
  $2 = HEAP32[$e + 4 >> 2] | 0;
  $5 = _element_to_bytes246($data, $2 + 4 | 0) | 0;
  return (_element_to_bytes246($data + $5 | 0, $2 + 12 | 0) | 0) + $5 | 0;
}
function _curve_from_bytes($e, $data) {
  $e = $e | 0;
  $data = $data | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    HEAP32[$3 >> 2] = 0;
    $4 = $2 + 4 | 0;
    $5 = $4;
    $6 = _element_from_bytes248($5, $data) | 0;
    $7 = $2 + 12 | 0;
    $8 = $7;
    $9 = $data + $6 | 0;
    $10 = _element_from_bytes248($8, $9) | 0;
    $11 = $10 + $6 | 0;
    $12 = _curve_is_valid_point($e) | 0;
    $13 = ($12 | 0) == 0;
    if ($13) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _element_set0263($e);
    label = 3;
    break;
   case 3:
    return $11 | 0;
  }
  return 0;
}
function _curve_out_info($out, $f) {
  $out = $out | 0;
  $f = $f | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $out;
    $2 = _fwrite(7040, 14, 1, $1 | 0) | 0;
    $3 = $f + 164 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $7 = $4 << 3;
    $8 = ($7 | 0) / 2 & -1;
    $9 = _fprintf($1 | 0, 8448, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $8, tempInt) | 0) | 0;
    label = 4;
    break;
   case 3:
    $11 = _fwrite(7088, 15, 1, $1 | 0) | 0;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return;
  }
}
function _curve_item_count($e) {
  $e = $e | 0;
  return ((_element_is0262($e) | 0) == 0 ? 2 : 0) | 0;
}
function _curve_item($e, $i) {
  $e = $e | 0;
  $i = $i | 0;
  var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _element_is0262($e) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      $_0 = 0;
      label = 5;
      break;
    }
   case 2:
    $4 = $e + 4 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    if (($i | 0) == 0) {
      label = 3;
      break;
    } else if (($i | 0) == 1) {
      label = 4;
      break;
    } else {
      $_0 = 0;
      label = 5;
      break;
    }
   case 3:
    $7 = $5 + 4 | 0;
    $8 = $7;
    $_0 = $8;
    label = 5;
    break;
   case 4:
    $10 = $5 + 12 | 0;
    $11 = $10;
    $_0 = $11;
    label = 5;
    break;
   case 5:
    return $_0 | 0;
  }
  return 0;
}
function _even_curve_is_sqr($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $7 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $1 = __stackBase__ | 0;
  ___gmpz_init($1);
  $2 = __stackBase__ + 16 | 0;
  $3 = $e | 0;
  _element_init243($2, HEAP32[$3 >> 2] | 0);
  ___gmpz_sub_ui($1, (HEAP32[$3 >> 2] | 0) + 196 | 0, 1);
  ___gmpz_fdiv_q_2exp($1, $1, 1);
  _element_pow_mpz244($2, $e, $1);
  $7 = _element_is1261($2) | 0;
  ___gmpz_clear($1);
  _element_clear251($2);
  STACKTOP = __stackBase__;
  return $7 | 0;
}
function _curve_random_no_cofac_solvefory($a) {
  $a = $a | 0;
  var $t = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $t = __stackBase__ | 0;
    $1 = $a | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $a + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $t | 0;
    $8 = $4;
    $9 = HEAP32[$8 >> 2] | 0;
    _element_init243($7, $9);
    $10 = $6;
    HEAP32[$10 >> 2] = 0;
    $11 = $6 + 4 | 0;
    $12 = $11;
    $13 = $4 + 4 | 0;
    $14 = $13;
    $15 = $4 + 12 | 0;
    $16 = $15;
    label = 2;
    break;
   case 2:
    _element_random259($12);
    _element_square257($7, $12);
    _element_add256($7, $7, $14);
    _element_mul252($7, $7, $12);
    _element_add256($7, $7, $16);
    $18 = _element_is_sqr260($7) | 0;
    $19 = ($18 | 0) == 0;
    if ($19) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $21 = $6 + 12 | 0;
    $22 = $21;
    _element_sqrt258($22, $7);
    _element_clear251($7);
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_mul_mpz245($n, $a, $z) {
  $n = $n | 0;
  $a = $a | 0;
  $z = $z | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 84 >> 2] & 1023]($n, $a, $z);
  return;
}
function _element_to_bytes246($data, $e) {
  $data = $data | 0;
  $e = $e | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$e >> 2] | 0) + 152 >> 2] & 1023]($data, $e) | 0;
}
function _element_sign247($a) {
  $a = $a | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$a >> 2] | 0) + 144 >> 2] & 1023]($a) | 0;
}
function _element_from_bytes248($e, $data) {
  $e = $e | 0;
  $data = $data | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$e >> 2] | 0) + 156 >> 2] & 1023]($e, $data) | 0;
}
function _element_neg249($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 124 >> 2] & 1023]($n, $a);
  return;
}
function _element_length_in_bytes250($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 164 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) < 0;
    if ($5) {
      label = 2;
      break;
    } else {
      $_0 = $4;
      label = 3;
      break;
    }
   case 2:
    $7 = $2 + 160 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = FUNCTION_TABLE_ii[$8 & 1023]($e) | 0;
    $_0 = $9;
    label = 3;
    break;
   case 3:
    return $_0 | 0;
  }
  return 0;
}
function _field_init_curve_ab_map($cnew, $c, $map, $mapdest, $ordernew, $cofacnew) {
  $cnew = $cnew | 0;
  $c = $c | 0;
  $map = $map | 0;
  $mapdest = $mapdest | 0;
  $ordernew = $ordernew | 0;
  $cofacnew = $cofacnew | 0;
  var $2 = 0, $3 = 0, $4 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $2 = HEAP32[$c + 212 >> 2] | 0;
  $3 = __stackBase__ | 0;
  _element_init243($3, $mapdest);
  $4 = __stackBase__ + 8 | 0;
  _element_init243($4, $mapdest);
  FUNCTION_TABLE_vii[$map & 1023]($3, $2 + 4 | 0);
  FUNCTION_TABLE_vii[$map & 1023]($4, $2 + 12 | 0);
  _field_init_curve_ab($cnew, $3, $4, $ordernew, $cofacnew);
  _element_clear251($3);
  _element_clear251($4);
  STACKTOP = __stackBase__;
  return;
}
function _element_clear251($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 8 >> 2] & 1023]($e);
  return;
}
function _field_reinit_curve_twist($c) {
  $c = $c | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $c + 212 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4;
    $6 = _field_get_nqr($5) | 0;
    $7 = $6;
    $8 = $2 + 4 | 0;
    $9 = $8;
    _element_mul252($9, $9, $7);
    _element_mul252($9, $9, $7);
    $10 = $2 + 12 | 0;
    $11 = $10;
    _element_mul252($11, $11, $7);
    _element_mul252($11, $11, $7);
    _element_mul252($11, $11, $7);
    $12 = $2 + 24 | 0;
    $13 = $12;
    _curve_random_no_cofac_solvefory($13);
    $14 = $2 + 20 | 0;
    $15 = $14;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = ($16 | 0) == 0;
    $18 = $2 + 32 | 0;
    $19 = $18;
    if ($17) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _element_mul_mpz245($19, $13, $16);
    label = 4;
    break;
   case 3:
    _element_set242($19, $13);
    label = 4;
    break;
   case 4:
    return;
  }
}
function _element_mul252($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 48 >> 2] & 1023]($n, $a, $b);
  return;
}
function _field_curve_set_quotient_cmp($c, $quotient_cmp) {
  $c = $c | 0;
  $quotient_cmp = $quotient_cmp | 0;
  var $2 = 0, $5 = 0, $7 = 0;
  $2 = HEAP32[$c + 212 >> 2] | 0;
  $5 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](12) | 0;
  $7 = $2 + 40 | 0;
  HEAP32[$7 >> 2] = $5;
  ___gmpz_init($5);
  ___gmpz_set(HEAP32[$7 >> 2] | 0, $quotient_cmp);
  return;
}
function _element_sub254($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 44 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_invert255($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 120 >> 2] & 1023]($n, $a);
  return;
}
function _element_add256($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 40 >> 2] & 1023]($n, $a, $b);
  return;
}
function _pbc_mpz_trace_n($res, $q, $trace, $n) {
  $res = $res | 0;
  $q = $q | 0;
  $trace = $trace | 0;
  $n = $n | 0;
  var $c0 = 0, $c1 = 0, $c2 = 0, $t0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i_06 = 0, $8 = 0, $exitcond = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $c0 = __stackBase__ | 0;
    $c1 = __stackBase__ + 16 | 0;
    $c2 = __stackBase__ + 32 | 0;
    $t0 = __stackBase__ + 48 | 0;
    $1 = $c0 | 0;
    ___gmpz_init($1);
    $2 = $c1 | 0;
    ___gmpz_init($2);
    $3 = $c2 | 0;
    ___gmpz_init($3);
    $4 = $t0 | 0;
    ___gmpz_init($4);
    ___gmpz_set_ui($3, 2);
    ___gmpz_set($2, $trace);
    $5 = ($n | 0) < 2;
    if ($5) {
      label = 4;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $6 = $n + 1 | 0;
    $i_06 = 2;
    label = 3;
    break;
   case 3:
    ___gmpz_mul($1, $trace, $2);
    ___gmpz_mul($4, $q, $3);
    ___gmpz_sub($1, $1, $4);
    ___gmpz_set($3, $2);
    ___gmpz_set($2, $1);
    $8 = $i_06 + 1 | 0;
    $exitcond = ($8 | 0) == ($6 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_06 = $8;
      label = 3;
      break;
    }
   case 4:
    ___gmpz_set($res, $2);
    ___gmpz_clear($4);
    ___gmpz_clear($3);
    ___gmpz_clear($2);
    ___gmpz_clear($1);
    STACKTOP = __stackBase__;
    return;
  }
}
function _pbc_mpz_curve_order_extn($res, $q, $t, $k) {
  $res = $res | 0;
  $q = $q | 0;
  $t = $t | 0;
  $k = $k | 0;
  var $1 = 0, $2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  $1 = __stackBase__ | 0;
  ___gmpz_init($1);
  $2 = __stackBase__ + 16 | 0;
  ___gmpz_init($2);
  ___gmpz_pow_ui($1, $q, $k);
  ___gmpz_add_ui($1, $1, 1);
  _pbc_mpz_trace_n($2, $q, $t, $k);
  ___gmpz_sub($1, $1, $2);
  ___gmpz_set($res, $1);
  ___gmpz_clear($1);
  ___gmpz_clear($2);
  STACKTOP = __stackBase__;
  return;
}
function _element_square257($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 112 >> 2] & 1023]($n, $a);
  return;
}
function _element_sqrt258($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$a >> 2] | 0) + 56 >> 2] & 1023]($a, $b);
  return;
}
function _element_random259($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 128 >> 2] & 1023]($e);
  return;
}
function _element_is_sqr260($a) {
  $a = $a | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$a >> 2] | 0) + 52 >> 2] & 1023]($a) | 0;
}
function _element_is1261($n) {
  $n = $n | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$n >> 2] | 0) + 136 >> 2] & 1023]($n) | 0;
}
function _element_is0262($n) {
  $n = $n | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$n >> 2] | 0) + 140 >> 2] & 1023]($n) | 0;
}
function _curve_is_valid_point($e) {
  $e = $e | 0;
  var $t0 = 0, $t1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $t0 = __stackBase__ | 0;
    $t1 = __stackBase__ + 8 | 0;
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 212 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $e + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = ($8 | 0) == 0;
    if ($9) {
      label = 2;
      break;
    } else {
      $_0 = 1;
      label = 3;
      break;
    }
   case 2:
    $11 = $t0 | 0;
    $12 = $4;
    $13 = HEAP32[$12 >> 2] | 0;
    _element_init243($11, $13);
    $14 = $t1 | 0;
    $15 = HEAP32[$12 >> 2] | 0;
    _element_init243($14, $15);
    $16 = $6 + 4 | 0;
    $17 = $16;
    _element_square257($11, $17);
    $18 = $4 + 4 | 0;
    $19 = $18;
    _element_add256($11, $11, $19);
    _element_mul252($11, $11, $17);
    $20 = $4 + 12 | 0;
    $21 = $20;
    _element_add256($11, $11, $21);
    $22 = $6 + 12 | 0;
    $23 = $22;
    _element_square257($14, $23);
    $24 = _element_cmp264($11, $14) | 0;
    $25 = ($24 | 0) == 0;
    $26 = $25 & 1;
    _element_clear251($11);
    _element_clear251($14);
    $_0 = $26;
    label = 3;
    break;
   case 3:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _element_set0263($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 24 >> 2] & 1023]($e);
  return;
}
function _element_cmp264($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$a >> 2] | 0) + 148 >> 2] & 1023]($a, $b) | 0;
}
function _default_option_set($pairing, $key, $value) {
  $pairing = $pairing | 0;
  $key = $key | 0;
  $value = $value | 0;
  return;
}
function _default_pp_clear($p) {
  $p = $p | 0;
  return;
}
function _mulg_field_clear($f) {
  $f = $f | 0;
  return;
}
function _default_pp_init($p, $in1, $pairing) {
  $p = $p | 0;
  $in1 = $in1 | 0;
  $pairing = $pairing | 0;
  HEAP32[$p + 4 >> 2] = $in1;
  return;
}
function _element_set_str265($e, $s, $base) {
  $e = $e | 0;
  $s = $s | 0;
  $base = $base | 0;
  return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$e >> 2] | 0) + 32 >> 2] & 1023]($e, $s, $base) | 0;
}
function _element_set_multiz266($e, $m) {
  $e = $e | 0;
  $m = $m | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 16 >> 2] & 1023]($e, $m);
  return;
}
function _element_snprint267($s, $n, $e) {
  $s = $s | 0;
  $n = $n | 0;
  $e = $e | 0;
  return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$e >> 2] | 0) + 168 >> 2] & 1023]($s, $n, $e) | 0;
}
function _element_out_str268($stream, $base, $e) {
  $stream = $stream | 0;
  $base = $base | 0;
  $e = $e | 0;
  return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$e >> 2] | 0) + 36 >> 2] & 1023]($stream, $base, $e) | 0;
}
function _element_from_hash269($e, $data, $len) {
  $e = $e | 0;
  $data = $data | 0;
  $len = $len | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$e >> 2] | 0) + 132 >> 2] & 1023]($e, $data, $len);
  return;
}
function _element_set1270($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 28 >> 2] & 1023]($e);
  return;
}
function _element_sgn271($a) {
  $a = $a | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$a >> 2] | 0) + 144 >> 2] & 1023]($a) | 0;
}
function _element_init_same_as272($e, $e2) {
  $e = $e | 0;
  $e2 = $e2 | 0;
  _element_init243($e, HEAP32[$e2 >> 2] | 0);
  return;
}
function _element_div273($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 92 >> 2] & 1023]($n, $a, $b);
  return;
}
function _point_cmp($p, $q) {
  $p = $p | 0;
  $q = $q | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $_pr = 0, $9 = 0, $10 = 0, $11 = 0, $phitmp = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $_sink = 0, $23 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = ($2 | 0) == 0;
    if ($3) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $5 = $q | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = ($6 | 0) == 0;
    if ($7) {
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $_pr = HEAP32[$1 >> 2] | 0;
    $9 = ($_pr | 0) == 0;
    if ($9) {
      $_sink = 1;
      label = 7;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $10 = $q | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $phitmp = ($11 | 0) == 0;
    $_sink = $phitmp;
    label = 7;
    break;
   case 5:
    $13 = $p + 4 | 0;
    $14 = $q + 4 | 0;
    $15 = _element_cmp264($13, $14) | 0;
    $16 = ($15 | 0) == 0;
    if ($16) {
      label = 6;
      break;
    } else {
      $_sink = 1;
      label = 7;
      break;
    }
   case 6:
    $18 = $p + 12 | 0;
    $19 = $q + 12 | 0;
    $20 = _element_cmp264($18, $19) | 0;
    $21 = ($20 | 0) != 0;
    $_sink = $21;
    label = 7;
    break;
   case 7:
    $23 = $_sink & 1;
    return $23 | 0;
  }
  return 0;
}
function _double_no_check($r, $p, $a) {
  $r = $r | 0;
  $p = $p | 0;
  $a = $a | 0;
  var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $1 = $r + 4 | 0;
  $3 = HEAP32[$1 >> 2] | 0;
  $4 = __stackBase__ | 0;
  _element_init243($4, $3);
  $5 = __stackBase__ + 8 | 0;
  _element_init243($5, $3);
  $6 = __stackBase__ + 16 | 0;
  _element_init243($6, $3);
  $7 = $p + 4 | 0;
  _element_square257($4, $7);
  _element_mul_si274($4, $4);
  _element_add256($4, $4, $a);
  $8 = $p + 12 | 0;
  _element_double275($5, $8);
  _element_invert255($5, $5);
  _element_mul252($4, $4, $5);
  _element_double275($6, $7);
  _element_square257($5, $4);
  _element_sub254($5, $5, $6);
  _element_sub254($6, $7, $5);
  _element_mul252($6, $6, $4);
  _element_sub254($6, $6, $8);
  _element_set242($1, $5);
  _element_set242($r + 12 | 0, $6);
  HEAP32[$r >> 2] = 0;
  _element_clear251($4);
  _element_clear251($5);
  _element_clear251($6);
  STACKTOP = __stackBase__;
  return;
}
function _element_mul_si274($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 88 >> 2] & 1023]($n, $a, 3);
  return;
}
function _element_double275($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 96 >> 2] & 1023]($n, $a);
  return;
}
function _pairing_init_pbc_param($pairing, $p) {
  $pairing = $pairing | 0;
  $p = $p | 0;
  HEAP32[$pairing + 500 >> 2] = 566;
  HEAP32[$pairing + 484 >> 2] = 86;
  HEAP32[$pairing + 488 >> 2] = 296;
  HEAP32[$pairing + 492 >> 2] = 224;
  HEAP32[$pairing + 476 >> 2] = 440;
  HEAP32[$pairing + 464 >> 2] = 728;
  HEAP32[$pairing + 472 >> 2] = 742;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$p >> 2] | 0) + 4 >> 2] & 1023]($pairing, HEAP32[$p + 4 >> 2] | 0);
  HEAP32[(HEAP32[$pairing + 228 >> 2] | 0) + 192 >> 2] = $pairing;
  HEAP32[(HEAP32[$pairing + 232 >> 2] | 0) + 192 >> 2] = $pairing;
  HEAP32[$pairing + 428 >> 2] = $pairing;
  return;
}
function _default_pp_apply($out, $in2, $p) {
  $out = $out | 0;
  $in2 = $in2 | 0;
  $p = $p | 0;
  var $2 = 0;
  $2 = HEAP32[$p >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[$2 + 468 >> 2] & 1023]($out, HEAP32[$p + 4 >> 2] | 0, $in2, $2);
  return;
}
function _generic_is_almost_coddh($a, $b, $c, $d, $pairing) {
  $a = $a | 0;
  $b = $b | 0;
  $c = $c | 0;
  $d = $d | 0;
  $pairing = $pairing | 0;
  var $t0 = 0, $t1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $not_ = 0, $_ = 0, $res_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $t0 = __stackBase__ | 0;
    $t1 = __stackBase__ + 8 | 0;
    $1 = $t0 | 0;
    $2 = $pairing + 236 | 0;
    _element_init300($1, $2);
    $3 = $t1 | 0;
    _element_init300($3, $2);
    _element_pairing($1, $a, $d);
    _element_pairing($3, $b, $c);
    $4 = _element_cmp297($1, $3) | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      $res_0 = 1;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _element_mul285($1, $1, $3);
    $7 = _element_is1281($1) | 0;
    $not_ = ($7 | 0) != 0;
    $_ = $not_ & 1;
    $res_0 = $_;
    label = 3;
    break;
   case 3:
    _element_clear299($1);
    _element_clear299($3);
    STACKTOP = __stackBase__;
    return $res_0 | 0;
  }
  return 0;
}
function _phi_warning($out, $in, $pairing) {
  $out = $out | 0;
  $in = $in | 0;
  $pairing = $pairing | 0;
  _puts(656);
  return;
}
function _generic_prod_pairings($out, $in1, $in2, $n, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $n = $n | 0;
  $pairing = $pairing | 0;
  var $tmp = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i_016 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $exitcond = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $tmp = __stackBase__ | 0;
    $1 = $pairing + 468 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $in1 | 0;
    $4 = $in2 | 0;
    FUNCTION_TABLE_viiii[$2 & 1023]($out, $3, $4, $pairing);
    $5 = $tmp | 0;
    _element_init_same_as301($5, $out);
    $6 = ($n | 0) > 1;
    if ($6) {
      $i_016 = 1;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $7 = HEAP32[$1 >> 2] | 0;
    $8 = $in1 + ($i_016 << 3) | 0;
    $9 = $in2 + ($i_016 << 3) | 0;
    FUNCTION_TABLE_viiii[$7 & 1023]($5, $8, $9, $pairing);
    _element_mul285($out, $out, $5);
    $10 = $i_016 + 1 | 0;
    $exitcond = ($10 | 0) == ($n | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_016 = $10;
      label = 2;
      break;
    }
   case 3:
    _element_clear299($5);
    STACKTOP = __stackBase__;
    return;
  }
}
function _pairing_init_set_buf($pairing, $input, $len) {
  $pairing = $pairing | 0;
  $input = $input | 0;
  $len = $len | 0;
  var $par = 0, $1 = 0, $2 = 0, $3 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $par = __stackBase__ | 0;
    $1 = $par | 0;
    $2 = _pbc_param_init_set_buf($1, $input, $len) | 0;
    $3 = ($2 | 0) == 0;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _pbc_error(6784, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    $_0 = 1;
    label = 4;
    break;
   case 3:
    _pairing_init_pbc_param($pairing, $1);
    _pbc_param_clear($1);
    $_0 = 0;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _pbc_param_clear($p) {
  $p = $p | 0;
  FUNCTION_TABLE_vi[HEAP32[HEAP32[$p >> 2] >> 2] & 1023](HEAP32[$p + 4 >> 2] | 0);
  return;
}
function _pairing_GT_init($pairing, $f) {
  $pairing = $pairing | 0;
  $f = $f | 0;
  var $1 = 0;
  $1 = $pairing + 236 | 0;
  _field_init($1);
  HEAP32[$pairing + 448 >> 2] = $f;
  HEAP32[$f + 192 >> 2] = $pairing;
  ___gmpz_set($pairing + 432 | 0, $pairing | 0);
  HEAP32[$1 >> 2] = 612;
  HEAP32[$pairing + 412 >> 2] = 808;
  HEAP32[$pairing + 240 >> 2] = 352;
  HEAP32[$pairing + 244 >> 2] = 512;
  HEAP32[$pairing + 256 >> 2] = 602;
  HEAP32[$pairing + 384 >> 2] = 300;
  HEAP32[$pairing + 272 >> 2] = 392;
  HEAP32[$pairing + 252 >> 2] = 802;
  HEAP32[$pairing + 268 >> 2] = 200;
  HEAP32[$pairing + 388 >> 2] = 66;
  HEAP32[$pairing + 392 >> 2] = 40;
  HEAP32[$pairing + 396 >> 2] = 550;
  HEAP32[$pairing + 400 >> 2] = HEAP32[$f + 164 >> 2] | 0;
  HEAP32[$pairing + 408 >> 2] = 194;
  HEAP32[$pairing + 404 >> 2] = 220;
  HEAP32[$pairing + 300 >> 2] = 64;
  HEAP32[$pairing + 296 >> 2] = 562;
  HEAP32[$pairing + 260 >> 2] = 506;
  HEAP32[$pairing + 276 >> 2] = 284;
  HEAP32[$pairing + 280 >> 2] = 38;
  HEAP32[$pairing + 320 >> 2] = 156;
  HEAP32[$pairing + 360 >> 2] = 92;
  HEAP32[$pairing + 376 >> 2] = 104;
  HEAP32[$pairing + 264 >> 2] = 506;
  HEAP32[$pairing + 284 >> 2] = 284;
  HEAP32[$pairing + 328 >> 2] = 38;
  HEAP32[$pairing + 352 >> 2] = 156;
  HEAP32[$pairing + 356 >> 2] = 92;
  HEAP32[$pairing + 372 >> 2] = 104;
  HEAP32[$pairing + 416 >> 2] = 42;
  HEAP32[$pairing + 420 >> 2] = 616;
  HEAP32[$pairing + 424 >> 2] = 354;
  HEAP32[$pairing + 364 >> 2] = 188;
  HEAP32[$pairing + 368 >> 2] = 456;
  return;
}
function _gt_out_info($out, $f) {
  $out = $out | 0;
  $f = $f | 0;
  var __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  ___gmp_fprintf($out, 8352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $f + 196 | 0, tempInt) | 0);
  _field_out_info($out, HEAP32[$f + 212 >> 2] | 0);
  STACKTOP = __stackBase__;
  return;
}
function _mulg_init($e) {
  $e = $e | 0;
  var $2 = 0, $3 = 0;
  $2 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](8) | 0;
  $3 = $e + 4 | 0;
  HEAP32[$3 >> 2] = $2;
  _element_init300($2, HEAP32[(HEAP32[$e >> 2] | 0) + 212 >> 2] | 0);
  _element_set1286(HEAP32[$3 >> 2] | 0);
  return;
}
function _mulg_clear($e) {
  $e = $e | 0;
  var $1 = 0;
  $1 = $e + 4 | 0;
  _element_clear299(HEAP32[$1 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$1 >> 2] | 0);
  return;
}
function _mulg_set($x, $a) {
  $x = $x | 0;
  $a = $a | 0;
  _element_set298(HEAP32[$x + 4 >> 2] | 0, HEAP32[$a + 4 >> 2] | 0);
  return;
}
function _mulg_cmp($x, $a) {
  $x = $x | 0;
  $a = $a | 0;
  return _element_cmp297(HEAP32[$x + 4 >> 2] | 0, HEAP32[$a + 4 >> 2] | 0) | 0;
}
function _mulg_out_str($stream, $base, $e) {
  $stream = $stream | 0;
  $base = $base | 0;
  $e = $e | 0;
  return _element_out_str296($stream, $base, HEAP32[$e + 4 >> 2] | 0) | 0;
}
function _mulg_set_multiz($e, $m) {
  $e = $e | 0;
  $m = $m | 0;
  _element_set_multiz295(HEAP32[$e + 4 >> 2] | 0, $m);
  return;
}
function _mulg_set_str($e, $s, $base) {
  $e = $e | 0;
  $s = $s | 0;
  $base = $base | 0;
  return _element_set_str294(HEAP32[$e + 4 >> 2] | 0, $s, $base) | 0;
}
function _mulg_to_bytes($data, $e) {
  $data = $data | 0;
  $e = $e | 0;
  return _element_to_bytes293($data, HEAP32[$e + 4 >> 2] | 0) | 0;
}
function _mulg_from_bytes($e, $data) {
  $e = $e | 0;
  $data = $data | 0;
  return _element_from_bytes292(HEAP32[$e + 4 >> 2] | 0, $data) | 0;
}
function _mulg_length_in_bytes($e) {
  $e = $e | 0;
  return _element_length_in_bytes291(HEAP32[$e + 4 >> 2] | 0) | 0;
}
function _mulg_to_mpz($z, $e) {
  $z = $z | 0;
  $e = $e | 0;
  _element_to_mpz290($z, HEAP32[$e + 4 >> 2] | 0);
  return;
}
function _mulg_snprint($s, $n, $e) {
  $s = $s | 0;
  $n = $n | 0;
  $e = $e | 0;
  return _element_snprint289($s, $n, HEAP32[$e + 4 >> 2] | 0) | 0;
}
function _mulg_item($e, $i) {
  $e = $e | 0;
  $i = $i | 0;
  return _element_item288(HEAP32[$e + 4 >> 2] | 0, $i) | 0;
}
function _mulg_item_count($e) {
  $e = $e | 0;
  return _element_item_count287(HEAP32[$e + 4 >> 2] | 0) | 0;
}
function _mulg_set1($e) {
  $e = $e | 0;
  _element_set1286(HEAP32[$e + 4 >> 2] | 0);
  return;
}
function _mulg_mul($x, $a, $b) {
  $x = $x | 0;
  $a = $a | 0;
  $b = $b | 0;
  _element_mul285(HEAP32[$x + 4 >> 2] | 0, HEAP32[$a + 4 >> 2] | 0, HEAP32[$b + 4 >> 2] | 0);
  return;
}
function _mulg_div($x, $a, $b) {
  $x = $x | 0;
  $a = $a | 0;
  $b = $b | 0;
  _element_div284(HEAP32[$x + 4 >> 2] | 0, HEAP32[$a + 4 >> 2] | 0, HEAP32[$b + 4 >> 2] | 0);
  return;
}
function _mulg_pow_mpz($x, $a, $n) {
  $x = $x | 0;
  $a = $a | 0;
  $n = $n | 0;
  _element_pow_mpz283(HEAP32[$x + 4 >> 2] | 0, HEAP32[$a + 4 >> 2] | 0, $n);
  return;
}
function _mulg_invert($x, $a) {
  $x = $x | 0;
  $a = $a | 0;
  _element_invert282(HEAP32[$x + 4 >> 2] | 0, HEAP32[$a + 4 >> 2] | 0);
  return;
}
function _mulg_is1($x) {
  $x = $x | 0;
  return _element_is1281(HEAP32[$x + 4 >> 2] | 0) | 0;
}
function _mulg_pp_init($p, $in) {
  $p = $p | 0;
  $in = $in | 0;
  var $2 = 0;
  $2 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](8) | 0;
  HEAP32[$p + 4 >> 2] = $2;
  _element_pp_init($2, HEAP32[$in + 4 >> 2] | 0);
  return;
}
function _mulg_pp_clear($p) {
  $p = $p | 0;
  var $1 = 0;
  $1 = $p + 4 | 0;
  _element_pp_clear(HEAP32[$1 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$1 >> 2] | 0);
  return;
}
function _mulg_pp_pow($out, $power, $p) {
  $out = $out | 0;
  $power = $power | 0;
  $p = $p | 0;
  _element_pp_pow(HEAP32[$out + 4 >> 2] | 0, $power, HEAP32[$p + 4 >> 2] | 0);
  return;
}
function _gt_random($e) {
  $e = $e | 0;
  var $4 = 0;
  $4 = HEAP32[(HEAP32[$e >> 2] | 0) + 192 >> 2] | 0;
  _element_random280(HEAP32[$e + 4 >> 2] | 0);
  FUNCTION_TABLE_vi[HEAP32[$4 + 496 >> 2] & 1023]($e);
  return;
}
function _gt_from_hash($e, $data, $len) {
  $e = $e | 0;
  $data = $data | 0;
  $len = $len | 0;
  var $4 = 0;
  $4 = HEAP32[(HEAP32[$e >> 2] | 0) + 192 >> 2] | 0;
  _element_from_hash279(HEAP32[$e + 4 >> 2] | 0, $data, $len);
  FUNCTION_TABLE_vi[HEAP32[$4 + 496 >> 2] & 1023]($e);
  return;
}
function _element_from_hash279($e, $data, $len) {
  $e = $e | 0;
  $data = $data | 0;
  $len = $len | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$e >> 2] | 0) + 132 >> 2] & 1023]($e, $data, $len);
  return;
}
function _element_random280($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 128 >> 2] & 1023]($e);
  return;
}
function _element_pp_pow($out, $power, $p) {
  $out = $out | 0;
  $power = $power | 0;
  $p = $p | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$p >> 2] | 0) + 188 >> 2] & 1023]($out, $power, $p);
  return;
}
function _element_pp_clear($p) {
  $p = $p | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$p >> 2] | 0) + 184 >> 2] & 1023]($p);
  return;
}
function _element_pp_init($p, $in) {
  $p = $p | 0;
  $in = $in | 0;
  var $1 = 0;
  $1 = $in | 0;
  HEAP32[$p >> 2] = HEAP32[$1 >> 2] | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 180 >> 2] & 1023]($p, $in);
  return;
}
function _element_is1281($n) {
  $n = $n | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$n >> 2] | 0) + 136 >> 2] & 1023]($n) | 0;
}
function _element_invert282($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 120 >> 2] & 1023]($n, $a);
  return;
}
function _element_pow_mpz283($x, $a, $n) {
  $x = $x | 0;
  $a = $a | 0;
  $n = $n | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$x >> 2] | 0) + 116 >> 2] & 1023]($x, $a, $n);
  return;
}
function _element_div284($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 92 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_mul285($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 48 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_set1286($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 28 >> 2] & 1023]($e);
  return;
}
function _element_item_count287($e) {
  $e = $e | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$e >> 2] | 0) + 60 >> 2] & 1023]($e) | 0;
}
function _element_item288($e, $i) {
  $e = $e | 0;
  $i = $i | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$e >> 2] | 0) + 64 >> 2] & 1023]($e, $i) | 0;
}
function _element_snprint289($s, $n, $e) {
  $s = $s | 0;
  $n = $n | 0;
  $e = $e | 0;
  return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$e >> 2] | 0) + 168 >> 2] & 1023]($s, $n, $e) | 0;
}
function _element_to_mpz290($z, $e) {
  $z = $z | 0;
  $e = $e | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 172 >> 2] & 1023]($z, $e);
  return;
}
function _element_length_in_bytes291($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $e | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 164 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) < 0;
    if ($5) {
      label = 2;
      break;
    } else {
      $_0 = $4;
      label = 3;
      break;
    }
   case 2:
    $7 = $2 + 160 | 0;
    $8 = HEAP32[$7 >> 2] | 0;
    $9 = FUNCTION_TABLE_ii[$8 & 1023]($e) | 0;
    $_0 = $9;
    label = 3;
    break;
   case 3:
    return $_0 | 0;
  }
  return 0;
}
function _element_from_bytes292($e, $data) {
  $e = $e | 0;
  $data = $data | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$e >> 2] | 0) + 156 >> 2] & 1023]($e, $data) | 0;
}
function _element_to_bytes293($data, $e) {
  $data = $data | 0;
  $e = $e | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$e >> 2] | 0) + 152 >> 2] & 1023]($data, $e) | 0;
}
function _element_set_str294($e, $s, $base) {
  $e = $e | 0;
  $s = $s | 0;
  $base = $base | 0;
  return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$e >> 2] | 0) + 32 >> 2] & 1023]($e, $s, $base) | 0;
}
function _element_set_multiz295($e, $m) {
  $e = $e | 0;
  $m = $m | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 16 >> 2] & 1023]($e, $m);
  return;
}
function _element_out_str296($stream, $base, $e) {
  $stream = $stream | 0;
  $base = $base | 0;
  $e = $e | 0;
  return FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$e >> 2] | 0) + 36 >> 2] & 1023]($stream, $base, $e) | 0;
}
function _element_cmp297($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$a >> 2] | 0) + 148 >> 2] & 1023]($a, $b) | 0;
}
function _element_set298($e, $a) {
  $e = $e | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 20 >> 2] & 1023]($e, $a);
  return;
}
function _element_clear299($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 8 >> 2] & 1023]($e);
  return;
}
function _element_init300($e, $f) {
  $e = $e | 0;
  $f = $f | 0;
  HEAP32[$e >> 2] = $f;
  FUNCTION_TABLE_vi[HEAP32[$f + 4 >> 2] & 1023]($e);
  return;
}
function _element_init_same_as301($e, $e2) {
  $e = $e | 0;
  $e2 = $e2 | 0;
  _element_init300($e, HEAP32[$e2 >> 2] | 0);
  return;
}
function _element_pairing($out, $in1, $in2) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  _pairing_apply190($out, $in1, $in2, HEAP32[(HEAP32[$out >> 2] | 0) + 192 >> 2] | 0);
  return;
}
function _pairing_apply190($out, $in1, $in2, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $pairing = $pairing | 0;
  var $1 = 0, $2 = 0, $5 = 0, $6 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _element_is0302($in1) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _element_set0303($out);
    label = 6;
    break;
   case 3:
    $5 = _element_is0302($in2) | 0;
    $6 = ($5 | 0) == 0;
    if ($6) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _element_set0303($out);
    label = 6;
    break;
   case 5:
    $9 = $pairing + 468 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $out + 4 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = $12;
    FUNCTION_TABLE_viiii[$10 & 1023]($13, $in1, $in2, $pairing);
    label = 6;
    break;
   case 6:
    return;
  }
}
function _element_is0302($n) {
  $n = $n | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$n >> 2] | 0) + 140 >> 2] & 1023]($n) | 0;
}
function _element_set0303($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 24 >> 2] & 1023]($e);
  return;
}
function _param_out_type($stream, $s) {
  $stream = $stream | 0;
  $s = $s | 0;
  var __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  _fprintf($stream | 0, 6472, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $s, tempInt) | 0);
  STACKTOP = __stackBase__;
  return;
}
function _param_out_mpz($stream, $s, $z) {
  $stream = $stream | 0;
  $s = $s | 0;
  $z = $z | 0;
  var $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  $1 = $stream;
  _fprintf($1 | 0, 8320, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $s, tempInt) | 0);
  ___gmpz_out_str($1, 0, $z);
  _fputc(10, $1 | 0);
  STACKTOP = __stackBase__;
  return;
}
function _param_out_int($stream, $s, $i) {
  $stream = $stream | 0;
  $s = $s | 0;
  $i = $i | 0;
  var $1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $1 = __stackBase__ | 0;
  ___gmpz_init($1);
  ___gmpz_set_si($1, $i);
  _param_out_mpz($stream, $s, $1);
  ___gmpz_clear($1);
  STACKTOP = __stackBase__;
  return;
}
function _lookup_mpz($z, $tab, $key) {
  $z = $z | 0;
  $tab = $tab | 0;
  $key = $key | 0;
  var $1 = 0, $2 = 0, $5 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _lookup($tab, $key) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _pbc_error(6368, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $key, tempInt) | 0);
    $_0 = 1;
    label = 4;
    break;
   case 3:
    $5 = ___gmpz_set_str($z, $1, 0) | 0;
    $_0 = 0;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _lookup($tab, $key) {
  $tab = $tab | 0;
  $key = $key | 0;
  var $1 = 0, $2 = 0, $5 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _symtab_has($tab, $key) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _pbc_error(6368, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $key, tempInt) | 0);
    $_0 = 0;
    label = 4;
    break;
   case 3:
    $5 = _symtab_at($tab, $key) | 0;
    $_0 = $5;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _lookup_int($n, $tab, $key) {
  $n = $n | 0;
  $tab = $tab | 0;
  $key = $key | 0;
  var $z = 0, $1 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $z = __stackBase__ | 0;
    $1 = _lookup($tab, $key) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _pbc_error(6368, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $key, tempInt) | 0);
    $_0 = 1;
    label = 4;
    break;
   case 3:
    $5 = $z | 0;
    ___gmpz_init($5);
    $6 = ___gmpz_set_str($5, $1, 0) | 0;
    $7 = ___gmpz_get_si($5) | 0;
    HEAP32[$n >> 2] = $7;
    ___gmpz_clear($5);
    $_0 = 0;
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _token_init($tok) {
  $tok = $tok | 0;
  HEAP32[$tok >> 2] = 0;
  HEAP32[$tok + 4 >> 2] = 0;
  return;
}
function _read_symtab($tab, $input, $limit) {
  $tab = $tab | 0;
  $input = $input | 0;
  $limit = $limit | 0;
  var $tok = 0, $1 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $tok = __stackBase__ | 0;
    $1 = ($limit | 0) == 0;
    if ($1) {
      $5 = 0;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = $input + $limit | 0;
    $5 = $3;
    label = 3;
    break;
   case 3:
    $6 = $tok | 0;
    _token_init($6);
    $7 = _token_get($6, $input, $5) | 0;
    $8 = $tok | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = ($9 | 0) == 4;
    if ($10) {
      label = 4;
      break;
    } else {
      label = 8;
      break;
    }
   case 4:
    $11 = $tok + 4 | 0;
    $13 = $7;
    label = 5;
    break;
   case 5:
    $14 = HEAP32[$11 >> 2] | 0;
    $15 = _pbc_strdup($14) | 0;
    $16 = _token_get($6, $13, $5) | 0;
    $17 = HEAP32[$8 >> 2] | 0;
    $18 = ($17 | 0) == 4;
    if ($18) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $20 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$20 & 1023]($15);
    label = 8;
    break;
   case 7:
    $22 = HEAP32[$11 >> 2] | 0;
    $23 = _pbc_strdup($22) | 0;
    _symtab_put($tab, $23, $15);
    $24 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$24 & 1023]($15);
    $25 = _token_get($6, $16, $5) | 0;
    $26 = HEAP32[$8 >> 2] | 0;
    $27 = ($26 | 0) == 4;
    if ($27) {
      $13 = $25;
      label = 5;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _token_clear($6);
    STACKTOP = __stackBase__;
    return;
  }
}
function _param_set_tab($par, $tab) {
  $par = $par | 0;
  $tab = $tab | 0;
  var $1 = 0, $2 = 0, $i_0 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _lookup($tab, 5968) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 6;
      break;
    } else {
      $i_0 = 0;
      label = 2;
      break;
    }
   case 2:
    $3 = $i_0 >>> 0 < 6;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 6;
      break;
    }
   case 3:
    $5 = 936 + ($i_0 << 3) | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = _strcmp($1 | 0, $6 | 0) | 0;
    $8 = ($7 | 0) == 0;
    $9 = $i_0 + 1 | 0;
    if ($8) {
      label = 4;
      break;
    } else {
      $i_0 = $9;
      label = 2;
      break;
    }
   case 4:
    $11 = 940 + ($i_0 << 3) | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = FUNCTION_TABLE_iii[$12 & 1023]($par, $tab) | 0;
    $14 = ($13 | 0) == 0;
    if ($14) {
      $_0 = 0;
      label = 7;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    _pbc_error(8872, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    $_0 = $13;
    label = 7;
    break;
   case 6:
    _pbc_error(8472, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
    $_0 = 1;
    label = 7;
    break;
   case 7:
    STACKTOP = __stackBase__;
    return $_0 | 0;
  }
  return 0;
}
function _pbc_param_init_set_buf($par, $input, $len) {
  $par = $par | 0;
  $input = $input | 0;
  $len = $len | 0;
  var $1 = 0, $2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $1 = __stackBase__ | 0;
  _symtab_init($1);
  _read_symtab($1, $input, $len);
  $2 = _param_set_tab($par, $1) | 0;
  _symtab_forall_data($1, HEAP32[232] | 0);
  _symtab_clear($1);
  STACKTOP = __stackBase__;
  return $2 | 0;
}
function _token_get($tok, $input, $end) {
  $tok = $tok | 0;
  $input = $input | 0;
  $end = $end | 0;
  var $_not = 0, $1 = 0, $or_cond53 = 0, $_03754 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $memchr = 0, $7 = 0, $_037_be = 0, $8 = 0, $or_cond = 0, $_037_lcssa = 0, $9 = 0, $11 = 0, $_1 = 0, $12 = 0, $or_cond40 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $_2 = 0, $buf_0 = 0, $n_0 = 0, $i_0 = 0, $c_0 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $buf_1 = 0, $n_1 = 0, $37 = 0, $or_cond42 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $memchr38 = 0, $44 = 0, $_3 = 0, $46 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $_not = ($end | 0) == 0;
    $1 = $input >>> 0 < $end >>> 0;
    $or_cond53 = $_not | $1;
    if ($or_cond53) {
      $_03754 = $input;
      label = 2;
      break;
    } else {
      $_037_lcssa = $input;
      label = 5;
      break;
    }
   case 2:
    $2 = HEAP8[$_03754] | 0;
    $3 = $2 << 24 >> 24 == 0;
    if ($3) {
      $_037_lcssa = $_03754;
      label = 5;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $5 = $2 << 24 >> 24;
    $6 = $_03754 + 1 | 0;
    $memchr = _memchr(8328, $5 | 0, 5) | 0;
    $7 = ($memchr | 0) == 0;
    if ($7) {
      label = 6;
      break;
    } else {
      $_037_be = $6;
      label = 4;
      break;
    }
   case 4:
    $8 = $_037_be >>> 0 < $end >>> 0;
    $or_cond = $_not | $8;
    if ($or_cond) {
      $_03754 = $_037_be;
      label = 2;
      break;
    } else {
      $_037_lcssa = $_037_be;
      label = 5;
      break;
    }
   case 5:
    $9 = $tok | 0;
    HEAP32[$9 >> 2] = 5;
    $_0 = $_037_lcssa;
    label = 18;
    break;
   case 6:
    $11 = $2 << 24 >> 24 == 35;
    if ($11) {
      $_1 = $6;
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 7:
    $12 = $_1 >>> 0 < $end >>> 0;
    $or_cond40 = $_not | $12;
    if ($or_cond40) {
      label = 8;
      break;
    } else {
      label = 10;
      break;
    }
   case 8:
    $14 = HEAP8[$_1] | 0;
    $15 = $14 << 24 >> 24 == 0;
    if ($15) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $17 = $_1 + 1 | 0;
    $18 = $14 << 24 >> 24 == 10;
    if ($18) {
      $_037_be = $17;
      label = 4;
      break;
    } else {
      $_1 = $17;
      label = 7;
      break;
    }
   case 10:
    $20 = $tok | 0;
    HEAP32[$20 >> 2] = 5;
    $_0 = $_1;
    label = 18;
    break;
   case 11:
    $22 = $tok | 0;
    HEAP32[$22 >> 2] = 4;
    $23 = HEAP32[232] | 0;
    $24 = $tok + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    FUNCTION_TABLE_vi[$23 & 1023]($25);
    $26 = HEAP32[230] | 0;
    $27 = FUNCTION_TABLE_ii[$26 & 1023](32) | 0;
    $c_0 = $2;
    $i_0 = 0;
    $n_0 = 32;
    $buf_0 = $27;
    $_2 = $6;
    label = 12;
    break;
   case 12:
    $29 = $buf_0 + $i_0 | 0;
    HEAP8[$29] = $c_0;
    $30 = $i_0 + 1 | 0;
    $31 = ($30 | 0) == ($n_0 | 0);
    if ($31) {
      label = 13;
      break;
    } else {
      $n_1 = $n_0;
      $buf_1 = $buf_0;
      label = 14;
      break;
    }
   case 13:
    $33 = $n_0 + 32 | 0;
    $34 = HEAP32[226] | 0;
    $35 = FUNCTION_TABLE_iii[$34 & 1023]($buf_0, $33) | 0;
    $n_1 = $33;
    $buf_1 = $35;
    label = 14;
    break;
   case 14:
    $37 = $_2 >>> 0 < $end >>> 0;
    $or_cond42 = $_not | $37;
    if ($or_cond42) {
      label = 15;
      break;
    } else {
      $_3 = $_2;
      label = 17;
      break;
    }
   case 15:
    $39 = HEAP8[$_2] | 0;
    $40 = $39 << 24 >> 24 == 0;
    if ($40) {
      $_3 = $_2;
      label = 17;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $42 = $39 << 24 >> 24;
    $43 = $_2 + 1 | 0;
    $memchr38 = _memchr(8136, $42 | 0, 8) | 0;
    $44 = ($memchr38 | 0) == 0;
    if ($44) {
      $c_0 = $39;
      $i_0 = $30;
      $n_0 = $n_1;
      $buf_0 = $buf_1;
      $_2 = $43;
      label = 12;
      break;
    } else {
      $_3 = $43;
      label = 17;
      break;
    }
   case 17:
    $46 = $buf_1 + $30 | 0;
    HEAP8[$46] = 0;
    HEAP32[$24 >> 2] = $buf_1;
    $_0 = $_3;
    label = 18;
    break;
   case 18:
    return $_0 | 0;
  }
  return 0;
}
function _token_clear($tok) {
  $tok = $tok | 0;
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$tok + 4 >> 2] | 0);
  return;
}
function _a_pairings_affine($out, $in1, $in2, $n_prod, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $n_prod = $n_prod | 0;
  $pairing = $pairing | 0;
  var $f = 0, $f0 = 0, $f1 = 0, $a = 0, $b = 0, $c = 0, $e0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $i_0130 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $exitcond141 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $i_1126 = 0, $j_0122 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $exitcond139 = 0, $46 = 0, $exitcond140 = 0, $i_1_lcssa = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $j_1115 = 0, $52 = 0, $53 = 0, $54 = 0, $exitcond137 = 0, $j_2119 = 0, $55 = 0, $56 = 0, $57 = 0, $exitcond138 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $i_2111 = 0, $j_3107 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $exitcond135 = 0, $79 = 0, $exitcond136 = 0, $80 = 0, $j_4103 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond134 = 0, $100 = 0, $101 = 0, $j_5102 = 0, $102 = 0, $103 = 0, $104 = 0, $exitcond = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $f = __stackBase__ | 0;
    $f0 = __stackBase__ + 8 | 0;
    $f1 = __stackBase__ + 16 | 0;
    $a = __stackBase__ + 24 | 0;
    $b = __stackBase__ + 32 | 0;
    $c = __stackBase__ + 40 | 0;
    $e0 = __stackBase__ + 48 | 0;
    $1 = $pairing + 504 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $n_prod << 3;
    $4 = _malloc($3) | 0;
    $5 = $4;
    $6 = _malloc($3) | 0;
    $7 = $6;
    $8 = ($n_prod | 0) > 0;
    if ($8) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $9 = $2 + 432 | 0;
    $10 = $9;
    $i_0130 = 0;
    label = 3;
    break;
   case 3:
    $12 = $5 + ($i_0130 << 3) | 0;
    _element_init352($12, $10);
    $13 = $7 + ($i_0130 << 3) | 0;
    _element_init352($13, $10);
    $14 = $in1 + ($i_0130 << 3) | 0;
    _element_set353($12, $14);
    $15 = $i_0130 + 1 | 0;
    $exitcond141 = ($15 | 0) == ($n_prod | 0);
    if ($exitcond141) {
      label = 4;
      break;
    } else {
      $i_0130 = $15;
      label = 3;
      break;
    }
   case 4:
    $16 = $f | 0;
    $17 = $2 + 216 | 0;
    $18 = $17;
    _element_init352($16, $18);
    $19 = $f0 | 0;
    _element_init352($19, $18);
    $20 = $f1 | 0;
    _element_init352($20, $18);
    _element_set1354($16);
    $21 = $a | 0;
    $22 = $2;
    _element_init352($21, $22);
    $23 = $b | 0;
    _element_init352($23, $22);
    $24 = $c | 0;
    _element_init352($24, $22);
    $25 = $e0 | 0;
    _element_init352($25, $22);
    $26 = $2 + 652 | 0;
    $27 = $26;
    $28 = HEAP32[$27 >> 2] | 0;
    $29 = ($28 | 0) > 0;
    if ($29) {
      label = 5;
      break;
    } else {
      $i_1_lcssa = 0;
      label = 9;
      break;
    }
   case 5:
    $30 = ($n_prod | 0) > 0;
    $31 = $4;
    $i_1126 = 0;
    label = 6;
    break;
   case 6:
    _element_square355($16, $16);
    if ($30) {
      $j_0122 = 0;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $33 = $5 + ($j_0122 << 3) | 0;
    $34 = $33;
    $35 = _curve_x_coord($34) | 0;
    $36 = $35;
    $37 = _curve_y_coord($34) | 0;
    $38 = $37;
    $39 = $in2 + ($j_0122 << 3) | 0;
    $40 = $39;
    $41 = _curve_x_coord($40) | 0;
    $42 = $41;
    $43 = _curve_y_coord($40) | 0;
    $44 = $43;
    _compute_abc_tangent($21, $23, $24, $36, $38, $25);
    _a_miller_evalfn($19, $21, $23, $24, $42, $44);
    _element_mul356($16, $16, $19);
    $45 = $j_0122 + 1 | 0;
    $exitcond139 = ($45 | 0) == ($n_prod | 0);
    if ($exitcond139) {
      label = 8;
      break;
    } else {
      $j_0122 = $45;
      label = 7;
      break;
    }
   case 8:
    _element_multi_double($31, $31, $n_prod);
    $46 = $i_1126 + 1 | 0;
    $exitcond140 = ($46 | 0) == ($28 | 0);
    if ($exitcond140) {
      $i_1_lcssa = $28;
      label = 9;
      break;
    } else {
      $i_1126 = $46;
      label = 6;
      break;
    }
   case 9:
    $47 = $2 + 656 | 0;
    $48 = $47;
    $49 = HEAP32[$48 >> 2] | 0;
    $50 = ($49 | 0) < 0;
    $51 = ($n_prod | 0) > 0;
    if ($50) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    if ($51) {
      $j_2119 = 0;
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 11:
    if ($51) {
      $j_1115 = 0;
      label = 12;
      break;
    } else {
      label = 13;
      break;
    }
   case 12:
    $52 = $7 + ($j_1115 << 3) | 0;
    $53 = $5 + ($j_1115 << 3) | 0;
    _element_neg357($52, $53);
    $54 = $j_1115 + 1 | 0;
    $exitcond137 = ($54 | 0) == ($n_prod | 0);
    if ($exitcond137) {
      label = 13;
      break;
    } else {
      $j_1115 = $54;
      label = 12;
      break;
    }
   case 13:
    _element_invert358($20, $16);
    label = 16;
    break;
   case 14:
    $55 = $7 + ($j_2119 << 3) | 0;
    $56 = $5 + ($j_2119 << 3) | 0;
    _element_set353($55, $56);
    $57 = $j_2119 + 1 | 0;
    $exitcond138 = ($57 | 0) == ($n_prod | 0);
    if ($exitcond138) {
      label = 15;
      break;
    } else {
      $j_2119 = $57;
      label = 14;
      break;
    }
   case 15:
    _element_set353($20, $16);
    label = 16;
    break;
   case 16:
    $59 = $2 + 648 | 0;
    $60 = $59;
    $61 = HEAP32[$60 >> 2] | 0;
    $62 = ($i_1_lcssa | 0) < ($61 | 0);
    if ($62) {
      label = 17;
      break;
    } else {
      label = 21;
      break;
    }
   case 17:
    $63 = ($n_prod | 0) > 0;
    $64 = $4;
    $i_2111 = $i_1_lcssa;
    label = 18;
    break;
   case 18:
    _element_square355($16, $16);
    if ($63) {
      $j_3107 = 0;
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    $66 = $5 + ($j_3107 << 3) | 0;
    $67 = $66;
    $68 = _curve_x_coord($67) | 0;
    $69 = $68;
    $70 = _curve_y_coord($67) | 0;
    $71 = $70;
    $72 = $in2 + ($j_3107 << 3) | 0;
    $73 = $72;
    $74 = _curve_x_coord($73) | 0;
    $75 = $74;
    $76 = _curve_y_coord($73) | 0;
    $77 = $76;
    _compute_abc_tangent($21, $23, $24, $69, $71, $25);
    _a_miller_evalfn($19, $21, $23, $24, $75, $77);
    _element_mul356($16, $16, $19);
    $78 = $j_3107 + 1 | 0;
    $exitcond135 = ($78 | 0) == ($n_prod | 0);
    if ($exitcond135) {
      label = 20;
      break;
    } else {
      $j_3107 = $78;
      label = 19;
      break;
    }
   case 20:
    _element_multi_double($64, $64, $n_prod);
    $79 = $i_2111 + 1 | 0;
    $exitcond136 = ($79 | 0) == ($61 | 0);
    if ($exitcond136) {
      label = 21;
      break;
    } else {
      $i_2111 = $79;
      label = 18;
      break;
    }
   case 21:
    _element_mul356($16, $16, $20);
    $80 = ($n_prod | 0) > 0;
    if ($80) {
      $j_4103 = 0;
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    $81 = $5 + ($j_4103 << 3) | 0;
    $82 = $81;
    $83 = _curve_x_coord($82) | 0;
    $84 = $83;
    $85 = _curve_y_coord($82) | 0;
    $86 = $85;
    $87 = $7 + ($j_4103 << 3) | 0;
    $88 = $87;
    $89 = _curve_x_coord($88) | 0;
    $90 = $89;
    $91 = _curve_y_coord($88) | 0;
    $92 = $91;
    $93 = $in2 + ($j_4103 << 3) | 0;
    $94 = $93;
    $95 = _curve_x_coord($94) | 0;
    $96 = $95;
    $97 = _curve_y_coord($94) | 0;
    $98 = $97;
    _compute_abc_line($21, $23, $24, $84, $86, $90, $92, $25);
    _a_miller_evalfn($19, $21, $23, $24, $96, $98);
    _element_mul356($16, $16, $19);
    $99 = $j_4103 + 1 | 0;
    $exitcond134 = ($99 | 0) == ($n_prod | 0);
    if ($exitcond134) {
      label = 23;
      break;
    } else {
      $j_4103 = $99;
      label = 22;
      break;
    }
   case 23:
    $100 = $pairing + 452 | 0;
    _a_tateexp($out, $16, $19, $100);
    _element_clear359($16);
    _element_clear359($19);
    _element_clear359($20);
    $101 = ($n_prod | 0) > 0;
    if ($101) {
      $j_5102 = 0;
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    $102 = $5 + ($j_5102 << 3) | 0;
    _element_clear359($102);
    $103 = $7 + ($j_5102 << 3) | 0;
    _element_clear359($103);
    $104 = $j_5102 + 1 | 0;
    $exitcond = ($104 | 0) == ($n_prod | 0);
    if ($exitcond) {
      label = 25;
      break;
    } else {
      $j_5102 = $104;
      label = 24;
      break;
    }
   case 25:
    _free($4);
    _free($6);
    _element_clear359($21);
    _element_clear359($23);
    _element_clear359($24);
    _element_clear359($25);
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_init352($e, $f) {
  $e = $e | 0;
  $f = $f | 0;
  HEAP32[$e >> 2] = $f;
  FUNCTION_TABLE_vi[HEAP32[$f + 4 >> 2] & 1023]($e);
  return;
}
function _element_set353($e, $a) {
  $e = $e | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 20 >> 2] & 1023]($e, $a);
  return;
}
function _element_set1354($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 28 >> 2] & 1023]($e);
  return;
}
function _element_square355($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 112 >> 2] & 1023]($n, $a);
  return;
}
function _compute_abc_tangent($a, $b, $c, $Vx, $Vy, $e0) {
  $a = $a | 0;
  $b = $b | 0;
  $c = $c | 0;
  $Vx = $Vx | 0;
  $Vy = $Vy | 0;
  $e0 = $e0 | 0;
  _element_square355($a, $Vx);
  _element_add367($e0, $a, $a);
  _element_add367($a, $e0, $a);
  _element_set1354($b);
  _element_add367($a, $a, $b);
  _element_neg357($a, $a);
  _element_double368($b, $Vy);
  _element_mul356($e0, $b, $Vy);
  _element_mul356($c, $a, $Vx);
  _element_add367($c, $c, $e0);
  _element_neg357($c, $c);
  return;
}
function _a_miller_evalfn($out, $a, $b, $c, $Qx, $Qy) {
  $out = $out | 0;
  $a = $a | 0;
  $b = $b | 0;
  $c = $c | 0;
  $Qx = $Qx | 0;
  $Qy = $Qy | 0;
  var $2 = 0;
  _element_mul356(_element_y($out) | 0, $a, $Qx);
  $2 = _element_x($out) | 0;
  _element_sub369($2, $c, _element_y($out) | 0);
  _element_mul356(_element_y($out) | 0, $b, $Qy);
  return;
}
function _element_mul356($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 48 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_neg357($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 124 >> 2] & 1023]($n, $a);
  return;
}
function _element_invert358($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 120 >> 2] & 1023]($n, $a);
  return;
}
function _compute_abc_line($a, $b, $c, $Vx, $Vy, $V1x, $V1y, $e0) {
  $a = $a | 0;
  $b = $b | 0;
  $c = $c | 0;
  $Vx = $Vx | 0;
  $Vy = $Vy | 0;
  $V1x = $V1x | 0;
  $V1y = $V1y | 0;
  $e0 = $e0 | 0;
  _element_sub369($a, $Vy, $V1y);
  _element_sub369($b, $V1x, $Vx);
  _element_mul356($c, $Vx, $V1y);
  _element_mul356($e0, $Vy, $V1x);
  _element_sub369($c, $c, $e0);
  return;
}
function _a_tateexp($out, $in, $temp, $cofactor) {
  $out = $out | 0;
  $in = $in | 0;
  $temp = $temp | 0;
  $cofactor = $cofactor | 0;
  var $1 = 0;
  $1 = _element_y($in) | 0;
  _element_invert358($temp, $in);
  _element_neg357($1, $1);
  _element_mul356($in, $in, $temp);
  _lucas_odd($out, $in, $temp, $cofactor);
  return;
}
function _element_clear359($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 8 >> 2] & 1023]($e);
  return;
}
function _pbc_param_init_a($par, $tab) {
  $par = $par | 0;
  $tab = $tab | 0;
  var $2 = 0, $5 = 0, $9 = 0, $13 = 0, $16 = 0, $20 = 0, $24 = 0;
  _a_param_init($par);
  $2 = HEAP32[$par + 4 >> 2] | 0;
  $5 = _lookup_mpz($2 + 28 | 0, $tab, 6352) | 0;
  $9 = (_lookup_mpz($2 + 16 | 0, $tab, 8296) | 0) + $5 | 0;
  $13 = $9 + (_lookup_mpz($2 + 40 | 0, $tab, 7032) | 0) | 0;
  $16 = $13 + (_lookup_int($2, $tab, 6360) | 0) | 0;
  $20 = $16 + (_lookup_int($2 + 4 | 0, $tab, 5944) | 0) | 0;
  $24 = $20 + (_lookup_int($2 + 8 | 0, $tab, 5592) | 0) | 0;
  return $24 + (_lookup_int($2 + 12 | 0, $tab, 5368) | 0) | 0;
}
function _a_param_init($par) {
  $par = $par | 0;
  var $3 = 0;
  HEAP32[$par >> 2] = 4256;
  $3 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](52) | 0;
  HEAP32[$par + 4 >> 2] = $3;
  ___gmpz_init($3 + 16 | 0);
  ___gmpz_init($3 + 28 | 0);
  ___gmpz_init($3 + 40 | 0);
  return;
}
function _a1_pairings_affine($out, $in1, $in2, $n_prod, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $n_prod = $n_prod | 0;
  $pairing = $pairing | 0;
  var $f = 0, $f0 = 0, $a = 0, $b = 0, $c = 0, $e0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i_072 = 0, $10 = 0, $11 = 0, $12 = 0, $exitcond78 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $m_0 = 0, $i_165 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $exitcond76 = 0, $43 = 0, $45 = 0, $46 = 0, $i_269 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $exitcond77 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $i_364 = 0, $73 = 0, $74 = 0, $exitcond = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $f = __stackBase__ | 0;
    $f0 = __stackBase__ + 8 | 0;
    $a = __stackBase__ + 16 | 0;
    $b = __stackBase__ + 24 | 0;
    $c = __stackBase__ + 32 | 0;
    $e0 = __stackBase__ + 40 | 0;
    $1 = $pairing + 504 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $n_prod << 3;
    $4 = _malloc($3) | 0;
    $5 = $4;
    $6 = ($n_prod | 0) > 0;
    if ($6) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $7 = $2 + 432 | 0;
    $8 = $7;
    $i_072 = 0;
    label = 3;
    break;
   case 3:
    $10 = $5 + ($i_072 << 3) | 0;
    _element_init352($10, $8);
    $11 = $in1 + ($i_072 << 3) | 0;
    _element_set353($10, $11);
    $12 = $i_072 + 1 | 0;
    $exitcond78 = ($12 | 0) == ($n_prod | 0);
    if ($exitcond78) {
      label = 4;
      break;
    } else {
      $i_072 = $12;
      label = 3;
      break;
    }
   case 4:
    $13 = $f | 0;
    $14 = $2 + 216 | 0;
    $15 = $14;
    _element_init352($13, $15);
    $16 = $f0 | 0;
    _element_init352($16, $15);
    _element_set1354($13);
    $17 = $a | 0;
    $18 = $2;
    _element_init352($17, $18);
    $19 = $b | 0;
    _element_init352($19, $18);
    $20 = $c | 0;
    _element_init352($20, $18);
    $21 = $e0 | 0;
    _element_init352($21, $18);
    $22 = $pairing | 0;
    $23 = ___gmpz_sizeinbase($22, 2) | 0;
    $24 = $23 - 2 | 0;
    $25 = ($n_prod | 0) > 0;
    $26 = $4;
    $27 = ($n_prod | 0) > 0;
    $28 = $in1;
    $m_0 = $24;
    label = 5;
    break;
   case 5:
    if ($25) {
      $i_165 = 0;
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $30 = $5 + ($i_165 << 3) | 0;
    $31 = $30;
    $32 = _curve_x_coord($31) | 0;
    $33 = $32;
    $34 = _curve_y_coord($31) | 0;
    $35 = $34;
    $36 = $in2 + ($i_165 << 3) | 0;
    $37 = $36;
    $38 = _curve_x_coord($37) | 0;
    $39 = $38;
    $40 = _curve_y_coord($37) | 0;
    $41 = $40;
    _compute_abc_tangent($17, $19, $20, $33, $35, $21);
    _a_miller_evalfn($16, $17, $19, $20, $39, $41);
    _element_mul356($13, $13, $16);
    $42 = $i_165 + 1 | 0;
    $exitcond76 = ($42 | 0) == ($n_prod | 0);
    if ($exitcond76) {
      label = 7;
      break;
    } else {
      $i_165 = $42;
      label = 6;
      break;
    }
   case 7:
    $43 = ($m_0 | 0) == 0;
    if ($43) {
      label = 13;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    _element_multi_double($26, $26, $n_prod);
    $45 = ___gmpz_tstbit($22, $m_0) | 0;
    $46 = ($45 | 0) == 0;
    if ($46) {
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    if ($27) {
      $i_269 = 0;
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $47 = $5 + ($i_269 << 3) | 0;
    $48 = $47;
    $49 = _curve_x_coord($48) | 0;
    $50 = $49;
    $51 = _curve_y_coord($48) | 0;
    $52 = $51;
    $53 = $in1 + ($i_269 << 3) | 0;
    $54 = $53;
    $55 = _curve_x_coord($54) | 0;
    $56 = $55;
    $57 = _curve_y_coord($54) | 0;
    $58 = $57;
    $59 = $in2 + ($i_269 << 3) | 0;
    $60 = $59;
    $61 = _curve_x_coord($60) | 0;
    $62 = $61;
    $63 = _curve_y_coord($60) | 0;
    $64 = $63;
    _compute_abc_line($17, $19, $20, $50, $52, $56, $58, $21);
    _a_miller_evalfn($16, $17, $19, $20, $62, $64);
    _element_mul356($13, $13, $16);
    $65 = $i_269 + 1 | 0;
    $exitcond77 = ($65 | 0) == ($n_prod | 0);
    if ($exitcond77) {
      label = 11;
      break;
    } else {
      $i_269 = $65;
      label = 10;
      break;
    }
   case 11:
    _element_multi_add($26, $26, $28, $n_prod);
    label = 12;
    break;
   case 12:
    $67 = $m_0 - 1 | 0;
    _element_square355($13, $13);
    $m_0 = $67;
    label = 5;
    break;
   case 13:
    _element_invert358($16, $13);
    $69 = _element_y($13) | 0;
    $70 = _element_y($13) | 0;
    _element_neg357($69, $70);
    _element_mul356($13, $13, $16);
    $71 = $pairing + 452 | 0;
    _element_pow_mpz362($out, $13, $71);
    _element_clear359($13);
    _element_clear359($16);
    $72 = ($n_prod | 0) > 0;
    if ($72) {
      $i_364 = 0;
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $73 = $5 + ($i_364 << 3) | 0;
    _element_clear359($73);
    $74 = $i_364 + 1 | 0;
    $exitcond = ($74 | 0) == ($n_prod | 0);
    if ($exitcond) {
      label = 15;
      break;
    } else {
      $i_364 = $74;
      label = 14;
      break;
    }
   case 15:
    _free($4);
    _element_clear359($17);
    _element_clear359($19);
    _element_clear359($20);
    _element_clear359($21);
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_y($a) {
  $a = $a | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$a >> 2] | 0) + 72 >> 2] & 1023]($a) | 0;
}
function _element_pow_mpz362($x, $a, $n) {
  $x = $x | 0;
  $a = $a | 0;
  $n = $n | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$x >> 2] | 0) + 116 >> 2] & 1023]($x, $a, $n);
  return;
}
function _pbc_param_init_a1($par, $tab) {
  $par = $par | 0;
  $tab = $tab | 0;
  var $2 = 0, $4 = 0, $8 = 0;
  _a1_init($par);
  $2 = HEAP32[$par + 4 >> 2] | 0;
  $4 = _lookup_mpz($2, $tab, 5112) | 0;
  $8 = (_lookup_mpz($2 + 12 | 0, $tab, 4528) | 0) + $4 | 0;
  return $8 + (_lookup_int($2 + 24 | 0, $tab, 4376) | 0) | 0;
}
function _a1_init($p) {
  $p = $p | 0;
  var $3 = 0;
  HEAP32[$p >> 2] = 4272;
  $3 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](28) | 0;
  HEAP32[$p + 4 >> 2] = $3;
  ___gmpz_init($3);
  ___gmpz_init($3 + 12 | 0);
  return;
}
function _a1_clear($data) {
  $data = $data | 0;
  ___gmpz_clear($data);
  ___gmpz_clear($data + 12 | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023]($data);
  return;
}
function _a1_init_pairing($pairing, $data) {
  $pairing = $pairing | 0;
  $data = $data | 0;
  var $a = 0, $b = 0, $1 = 0, $7 = 0, $9 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $a = __stackBase__ | 0;
  $b = __stackBase__ + 8 | 0;
  $1 = $pairing | 0;
  ___gmpz_init($1);
  ___gmpz_set($1, $data + 12 | 0);
  _field_init_fp($pairing + 12 | 0, $1);
  $7 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](648) | 0;
  HEAP32[$pairing + 504 >> 2] = $7;
  $9 = $pairing + 452 | 0;
  ___gmpz_init($9);
  ___gmpz_set_ui($9, HEAP32[$data + 24 >> 2] | 0);
  $13 = $7;
  _field_init_fp($7, $data);
  $16 = $a | 0;
  _element_init352($16, $13);
  $17 = $b | 0;
  _element_init352($17, $13);
  _element_set1354($16);
  _element_set0365($17);
  $18 = $7 + 432 | 0;
  $19 = $18;
  $20 = $18;
  _field_init_curve_ab($20, $a, $b, $1, $9);
  _field_curve_use_random_solvefory($20);
  _element_clear359($16);
  _element_clear359($17);
  $23 = $7 + 216 | 0;
  _field_init_fi($23, $7);
  HEAP32[$pairing + 496 >> 2] = 534;
  FUNCTION_TABLE_ii[HEAP32[230] & 1023](216);
  HEAP32[$pairing + 228 >> 2] = $19;
  HEAP32[$pairing + 232 >> 2] = $19;
  _pairing_GT_init($pairing, $23);
  HEAP32[$pairing + 468 >> 2] = 732;
  HEAP32[$pairing + 464 >> 2] = 582;
  HEAP32[$pairing + 472 >> 2] = 328;
  HEAP32[$pairing + 480 >> 2] = 780;
  HEAP32[$pairing + 484 >> 2] = 632;
  HEAP32[$pairing + 488 >> 2] = 424;
  HEAP32[$pairing + 492 >> 2] = 94;
  HEAP32[$pairing + 500 >> 2] = 542;
  STACKTOP = __stackBase__;
  return;
}
function _a1_out_str($stream, $data) {
  $stream = $stream | 0;
  $data = $data | 0;
  _param_out_type($stream, 9040);
  _param_out_mpz($stream, 5112, $data);
  _param_out_mpz($stream, 4528, $data + 12 | 0);
  _param_out_int($stream, 4376, HEAP32[$data + 24 >> 2] | 0);
  return;
}
function _element_set0365($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 24 >> 2] & 1023]($e);
  return;
}
function _a_finalpow($e) {
  $e = $e | 0;
  var $4 = 0, $5 = 0, $6 = 0, $9 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $4 = HEAP32[(HEAP32[$e >> 2] | 0) + 192 >> 2] | 0;
  $5 = __stackBase__ | 0;
  $6 = $e + 4 | 0;
  _element_init_same_as366($5, HEAP32[$6 >> 2] | 0);
  $9 = __stackBase__ + 8 | 0;
  _element_init_same_as366($9, HEAP32[$6 >> 2] | 0);
  _a_tateexp($5, HEAP32[$6 >> 2] | 0, $9, $4 + 452 | 0);
  _element_set353(HEAP32[$6 >> 2] | 0, $5);
  _element_clear359($5);
  _element_clear359($9);
  STACKTOP = __stackBase__;
  return;
}
function _a1_pairing_proj($out, $in1, $in2, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $pairing = $pairing | 0;
  var $V = 0, $z = 0, $z2 = 0, $f = 0, $f0 = 0, $a = 0, $b = 0, $c = 0, $e0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $m_0 = 0, $36 = 0, $38 = 0, $39 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 72 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $V = __stackBase__ | 0;
    $z = __stackBase__ + 8 | 0;
    $z2 = __stackBase__ + 16 | 0;
    $f = __stackBase__ + 24 | 0;
    $f0 = __stackBase__ + 32 | 0;
    $a = __stackBase__ + 40 | 0;
    $b = __stackBase__ + 48 | 0;
    $c = __stackBase__ + 56 | 0;
    $e0 = __stackBase__ + 64 | 0;
    $1 = $pairing + 504 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $a | 0;
    $4 = $b | 0;
    $5 = $c | 0;
    $6 = $in1;
    $7 = _curve_x_coord($6) | 0;
    $8 = $7;
    $9 = _curve_y_coord($6) | 0;
    $10 = $9;
    $11 = $in2;
    $12 = _curve_x_coord($11) | 0;
    $13 = $12;
    $14 = _curve_y_coord($11) | 0;
    $15 = $14;
    $16 = $V | 0;
    $17 = $2 + 432 | 0;
    $18 = $17;
    _element_init352($16, $18);
    _element_set353($16, $in1);
    $19 = $V;
    $20 = _curve_x_coord($19) | 0;
    $21 = $20;
    $22 = _curve_y_coord($19) | 0;
    $23 = $22;
    $24 = $f | 0;
    $25 = $2 + 216 | 0;
    $26 = $25;
    _element_init352($24, $26);
    $27 = $f0 | 0;
    _element_init352($27, $26);
    _element_set1354($24);
    $28 = $2;
    _element_init352($3, $28);
    _element_init352($4, $28);
    _element_init352($5, $28);
    $29 = $e0 | 0;
    _element_init352($29, $28);
    $30 = $z | 0;
    _element_init352($30, $28);
    $31 = $z2 | 0;
    _element_init352($31, $28);
    _element_set1354($30);
    _element_set1354($31);
    $32 = $pairing | 0;
    $33 = ___gmpz_sizeinbase($32, 2) | 0;
    $34 = $33 - 2 | 0;
    $m_0 = $34;
    label = 2;
    break;
   case 2:
    _compute_abc_tangent_proj($3, $4, $5, $21, $23, $30, $31, $29);
    _a_miller_evalfn($27, $3, $4, $5, $13, $15);
    _element_mul356($24, $24, $27);
    $36 = ($m_0 | 0) == 0;
    if ($36) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _element_square355($29, $21);
    _element_double368($3, $29);
    _element_add367($29, $3, $29);
    _element_square355($3, $31);
    _element_add367($29, $29, $3);
    _element_mul356($30, $23, $30);
    _element_double368($30, $30);
    _element_square355($31, $30);
    _element_square355($4, $23);
    _element_mul356($3, $21, $4);
    _element_double368($3, $3);
    _element_double368($3, $3);
    _element_double368($5, $3);
    _element_square355($21, $29);
    _element_sub369($21, $21, $5);
    _element_square355($4, $4);
    _element_double368($4, $4);
    _element_double368($4, $4);
    _element_double368($4, $4);
    _element_sub369($3, $3, $21);
    _element_mul356($29, $29, $3);
    _element_sub369($23, $29, $4);
    $38 = ___gmpz_tstbit($32, $m_0) | 0;
    $39 = ($38 | 0) == 0;
    if ($39) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _compute_abc_line_proj($3, $4, $5, $21, $23, $30, $31, $8, $10, $29);
    _a_miller_evalfn($27, $3, $4, $5, $13, $15);
    _element_mul356($24, $24, $27);
    _element_mul356($29, $8, $31);
    _element_sub369($29, $29, $21);
    _element_square355($3, $29);
    _element_mul356($4, $30, $31);
    _element_mul356($4, $4, $10);
    _element_sub369($4, $4, $23);
    _element_set353($31, $21);
    _element_square355($21, $4);
    _element_mul356($5, $29, $3);
    _element_sub369($21, $21, $5);
    _element_double368($5, $31);
    _element_mul356($5, $5, $3);
    _element_sub369($21, $21, $5);
    _element_mul356($5, $31, $3);
    _element_sub369($5, $5, $21);
    _element_mul356($5, $5, $4);
    _element_mul356($4, $29, $3);
    _element_mul356($4, $4, $23);
    _element_sub369($23, $5, $4);
    _element_mul356($30, $30, $29);
    _element_square355($31, $30);
    label = 5;
    break;
   case 5:
    $42 = $m_0 - 1 | 0;
    _element_square355($24, $24);
    $m_0 = $42;
    label = 2;
    break;
   case 6:
    _element_invert358($27, $24);
    $44 = _element_y($24) | 0;
    $45 = _element_y($24) | 0;
    _element_neg357($44, $45);
    _element_mul356($24, $24, $27);
    $46 = $pairing + 452 | 0;
    _element_pow_mpz362($out, $24, $46);
    _element_clear359($24);
    _element_clear359($27);
    _element_clear359($30);
    _element_clear359($31);
    _element_clear359($16);
    _element_clear359($3);
    _element_clear359($4);
    _element_clear359($5);
    _element_clear359($29);
    STACKTOP = __stackBase__;
    return;
  }
}
function _phi_identity($out, $in, $pairing) {
  $out = $out | 0;
  $in = $in | 0;
  $pairing = $pairing | 0;
  _element_set353($out, $in);
  return;
}
function _a1_pairing_clear($pairing) {
  $pairing = $pairing | 0;
  var $4 = 0;
  _field_clear($pairing + 236 | 0);
  $4 = HEAP32[$pairing + 504 >> 2] | 0;
  _field_clear($4 + 432 | 0);
  _field_clear($4 + 216 | 0);
  _field_clear($4);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023]($4);
  ___gmpz_clear($pairing + 452 | 0);
  ___gmpz_clear($pairing | 0);
  _field_clear($pairing + 12 | 0);
  return;
}
function _a1_pairing_pp_init($p, $in1, $pairing) {
  $p = $p | 0;
  $in1 = $in1 | 0;
  $pairing = $pairing | 0;
  var $V = 0, $a = 0, $b = 0, $c = 0, $a2 = 0, $b2 = 0, $c2 = 0, $e0 = 0, $e1 = 0, $e2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $scevgep = 0, $m_032 = 0, $pp_031 = 0, $39 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $scevgep33 = 0, $pp_0_lcssa = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $V = __stackBase__ | 0;
    $a = __stackBase__ + 8 | 0;
    $b = __stackBase__ + 16 | 0;
    $c = __stackBase__ + 24 | 0;
    $a2 = __stackBase__ + 32 | 0;
    $b2 = __stackBase__ + 40 | 0;
    $c2 = __stackBase__ + 48 | 0;
    $e0 = __stackBase__ + 56 | 0;
    $e1 = __stackBase__ + 64 | 0;
    $e2 = __stackBase__ + 72 | 0;
    $1 = $in1;
    $2 = _curve_x_coord($1) | 0;
    $3 = $2;
    $4 = _curve_y_coord($1) | 0;
    $5 = $4;
    $6 = $pairing + 504 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = HEAP32[230] | 0;
    $9 = $pairing | 0;
    $10 = ___gmpz_sizeinbase($9, 2) | 0;
    $11 = $10 << 2;
    $12 = FUNCTION_TABLE_ii[$8 & 1023]($11) | 0;
    $13 = $p + 4 | 0;
    HEAP32[$13 >> 2] = $12;
    $14 = $12;
    $15 = $V | 0;
    $16 = $7 + 432 | 0;
    $17 = $16;
    _element_init352($15, $17);
    _element_set353($15, $in1);
    $18 = $V;
    $19 = _curve_x_coord($18) | 0;
    $20 = $19;
    $21 = _curve_y_coord($18) | 0;
    $22 = $21;
    $23 = $a | 0;
    $24 = $7;
    _element_init352($23, $24);
    $25 = $b | 0;
    _element_init352($25, $24);
    $26 = $c | 0;
    _element_init352($26, $24);
    $27 = $e0 | 0;
    _element_init352($27, $24);
    $28 = $e1 | 0;
    _element_init352($28, $24);
    $29 = $e2 | 0;
    _element_init352($29, $24);
    $30 = $a2 | 0;
    _element_init352($30, $24);
    $31 = $b2 | 0;
    _element_init352($31, $24);
    $32 = $c2 | 0;
    _element_init352($32, $24);
    $33 = ___gmpz_sizeinbase($9, 2) | 0;
    $34 = $33 - 2 | 0;
    _compute_abc_tangent($23, $25, $26, $20, $22, $27);
    $35 = ($34 | 0) == 0;
    if ($35) {
      $pp_0_lcssa = $14;
      label = 8;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $36 = $33 << 2;
    $37 = $36 - 8 | 0;
    $scevgep = $12 + $37 | 0;
    $pp_031 = $14;
    $m_032 = $34;
    label = 3;
    break;
   case 3:
    _element_double368($15, $15);
    $39 = ___gmpz_tstbit($9, $m_032) | 0;
    $40 = ($39 | 0) == 0;
    if ($40) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _compute_abc_line($30, $31, $32, $20, $22, $3, $5, $27);
    _element_add367($15, $15, $in1);
    _element_mul356($27, $23, $32);
    _element_mul356($28, $30, $26);
    _element_add367($27, $27, $28);
    _element_mul356($28, $31, $26);
    _element_mul356($29, $25, $32);
    _element_add367($28, $28, $29);
    _element_mul356($26, $26, $32);
    _element_mul356($32, $23, $31);
    _element_mul356($29, $30, $25);
    _element_add367($32, $32, $29);
    _element_mul356($23, $23, $30);
    _element_mul356($25, $25, $31);
    $42 = HEAP32[230] | 0;
    $43 = FUNCTION_TABLE_ii[$42 & 1023](48) | 0;
    HEAP32[$pp_031 >> 2] = $43;
    $44 = $43;
    _pp2_coeff_set($44, $23, $25, $32, $27, $28, $26);
    label = 6;
    break;
   case 5:
    $46 = HEAP32[230] | 0;
    $47 = FUNCTION_TABLE_ii[$46 & 1023](24) | 0;
    HEAP32[$pp_031 >> 2] = $47;
    $48 = $47;
    _pp_coeff_set($48, $23, $25, $26);
    label = 6;
    break;
   case 6:
    $50 = $pp_031 + 4 | 0;
    $51 = $m_032 - 1 | 0;
    _compute_abc_tangent($23, $25, $26, $20, $22, $27);
    $52 = ($51 | 0) == 0;
    if ($52) {
      label = 7;
      break;
    } else {
      $pp_031 = $50;
      $m_032 = $51;
      label = 3;
      break;
    }
   case 7:
    $scevgep33 = $scevgep;
    $pp_0_lcssa = $scevgep33;
    label = 8;
    break;
   case 8:
    $54 = HEAP32[230] | 0;
    $55 = FUNCTION_TABLE_ii[$54 & 1023](24) | 0;
    HEAP32[$pp_0_lcssa >> 2] = $55;
    $56 = $55;
    _pp_coeff_set($56, $23, $25, $26);
    $57 = $pp_0_lcssa + 4 | 0;
    HEAP32[$57 >> 2] = 0;
    _element_clear359($30);
    _element_clear359($31);
    _element_clear359($32);
    _element_clear359($29);
    _element_clear359($28);
    _element_clear359($27);
    _element_clear359($23);
    _element_clear359($25);
    _element_clear359($26);
    _element_clear359($15);
    STACKTOP = __stackBase__;
    return;
  }
}
function _a1_pairing_pp_clear($p) {
  $p = $p | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $pp_04 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $_lcssa = 0, $13 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = ($4 | 0) == 0;
    $6 = HEAP32[232] | 0;
    if ($5) {
      $_lcssa = $6;
      label = 3;
      break;
    } else {
      $pp_04 = $3;
      $8 = $4;
      $7 = $6;
      label = 2;
      break;
    }
   case 2:
    FUNCTION_TABLE_vi[$7 & 1023]($8);
    $9 = $pp_04 + 4 | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = ($10 | 0) == 0;
    $12 = HEAP32[232] | 0;
    if ($11) {
      $_lcssa = $12;
      label = 3;
      break;
    } else {
      $pp_04 = $9;
      $8 = $10;
      $7 = $12;
      label = 2;
      break;
    }
   case 3:
    $13 = HEAP32[$1 >> 2] | 0;
    FUNCTION_TABLE_vi[$_lcssa & 1023]($13);
    return;
  }
}
function _a1_pairing_pp_apply($out, $in2, $p) {
  $out = $out | 0;
  $in2 = $in2 | 0;
  $p = $p | 0;
  var $f = 0, $f0 = 0, $e0 = 0, $e1 = 0, $Qx2 = 0, $Qy2 = 0, $Qxy = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $scevgep = 0, $pp_036 = 0, $m_035 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $scevgep37 = 0, $pp_0_lcssa = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $f = __stackBase__ | 0;
    $f0 = __stackBase__ + 8 | 0;
    $e0 = __stackBase__ + 16 | 0;
    $e1 = __stackBase__ + 24 | 0;
    $Qx2 = __stackBase__ + 32 | 0;
    $Qy2 = __stackBase__ + 40 | 0;
    $Qxy = __stackBase__ + 48 | 0;
    $1 = $p + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = $p | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $5 + 504 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $in2;
    $9 = _curve_x_coord($8) | 0;
    $10 = $9;
    $11 = _curve_y_coord($8) | 0;
    $12 = $11;
    $13 = $f | 0;
    $14 = $out | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    _element_init352($13, $15);
    $16 = $f0 | 0;
    $17 = HEAP32[$14 >> 2] | 0;
    _element_init352($16, $17);
    _element_set1354($13);
    $18 = $e0 | 0;
    $19 = $7;
    _element_init352($18, $19);
    $20 = $e1 | 0;
    _element_init352($20, $19);
    $21 = $Qx2 | 0;
    _element_init352($21, $19);
    $22 = $Qy2 | 0;
    _element_init352($22, $19);
    $23 = $Qxy | 0;
    _element_init352($23, $19);
    _element_square355($21, $10);
    _element_square355($22, $12);
    _element_mul356($23, $10, $12);
    $24 = HEAP32[$4 >> 2] | 0;
    $25 = $24 | 0;
    $26 = ___gmpz_sizeinbase($25, 2) | 0;
    $27 = $26 - 2 | 0;
    $28 = ($27 | 0) > 0;
    if ($28) {
      label = 2;
      break;
    } else {
      $pp_0_lcssa = $3;
      label = 8;
      break;
    }
   case 2:
    $29 = $26 << 2;
    $30 = $29 - 8 | 0;
    $scevgep = $2 + $30 | 0;
    $m_035 = $27;
    $pp_036 = $3;
    label = 3;
    break;
   case 3:
    $32 = HEAP32[$4 >> 2] | 0;
    $33 = $32 | 0;
    $34 = ___gmpz_tstbit($33, $m_035) | 0;
    $35 = ($34 | 0) == 0;
    $36 = HEAP32[$pp_036 >> 2] | 0;
    $37 = $36;
    if ($35) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _element_mul356($18, $37, $21);
    $39 = $36 + 8 | 0;
    $40 = $39;
    _element_mul356($20, $40, $22);
    _element_sub369($18, $18, $20);
    $41 = $36 + 24 | 0;
    $42 = $41;
    _element_mul356($20, $42, $10);
    _element_sub369($18, $18, $20);
    $43 = _element_x($16) | 0;
    $44 = $36 + 40 | 0;
    $45 = $44;
    _element_add367($43, $18, $45);
    $46 = $36 + 32 | 0;
    $47 = $46;
    _element_mul356($18, $47, $12);
    $48 = $36 + 16 | 0;
    $49 = $48;
    _element_mul356($20, $49, $23);
    $50 = _element_y($16) | 0;
    _element_sub369($50, $18, $20);
    label = 6;
    break;
   case 5:
    $52 = $36 + 8 | 0;
    $53 = $52;
    $54 = $36 + 16 | 0;
    $55 = $54;
    _a_miller_evalfn($16, $37, $53, $55, $10, $12);
    label = 6;
    break;
   case 6:
    _element_mul356($13, $13, $16);
    $57 = $pp_036 + 4 | 0;
    $58 = $m_035 - 1 | 0;
    _element_square355($13, $13);
    $59 = ($58 | 0) > 0;
    if ($59) {
      $m_035 = $58;
      $pp_036 = $57;
      label = 3;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $scevgep37 = $scevgep;
    $pp_0_lcssa = $scevgep37;
    label = 8;
    break;
   case 8:
    $61 = HEAP32[$pp_0_lcssa >> 2] | 0;
    $62 = $61;
    $63 = $61 + 8 | 0;
    $64 = $63;
    $65 = $61 + 16 | 0;
    $66 = $65;
    _a_miller_evalfn($16, $62, $64, $66, $10, $12);
    _element_mul356($13, $13, $16);
    _element_invert358($16, $13);
    $67 = _element_y($13) | 0;
    $68 = _element_y($13) | 0;
    _element_neg357($67, $68);
    _element_mul356($13, $13, $16);
    $69 = HEAP32[$4 >> 2] | 0;
    $70 = $69 + 452 | 0;
    _element_pow_mpz362($out, $13, $70);
    _element_clear359($21);
    _element_clear359($22);
    _element_clear359($23);
    _element_clear359($13);
    _element_clear359($16);
    _element_clear359($20);
    _element_clear359($18);
    STACKTOP = __stackBase__;
    return;
  }
}
function _a1_pairing_option_set($pairing, $key, $value) {
  $pairing = $pairing | 0;
  $key = $key | 0;
  $value = $value | 0;
  var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _strcmp($key | 0, 8856) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 8;
      break;
    }
   case 2:
    $4 = _strcmp($value | 0, 8440) | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $7 = $pairing + 468 | 0;
    HEAP32[$7 >> 2] = 732;
    $8 = $pairing + 484 | 0;
    HEAP32[$8 >> 2] = 632;
    $9 = $pairing + 488 | 0;
    HEAP32[$9 >> 2] = 424;
    $10 = $pairing + 492 | 0;
    HEAP32[$10 >> 2] = 94;
    label = 8;
    break;
   case 4:
    $12 = _strcmp($value | 0, 8304) | 0;
    $13 = ($12 | 0) == 0;
    if ($13) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $15 = $pairing + 468 | 0;
    HEAP32[$15 >> 2] = 384;
    $16 = $pairing + 484 | 0;
    HEAP32[$16 >> 2] = 632;
    $17 = $pairing + 488 | 0;
    HEAP32[$17 >> 2] = 424;
    $18 = $pairing + 492 | 0;
    HEAP32[$18 >> 2] = 94;
    label = 8;
    break;
   case 6:
    $20 = _strcmp($value | 0, 8096) | 0;
    $21 = ($20 | 0) == 0;
    if ($21) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $23 = $pairing + 468 | 0;
    HEAP32[$23 >> 2] = 574;
    $24 = $pairing + 484 | 0;
    HEAP32[$24 >> 2] = 122;
    $25 = $pairing + 488 | 0;
    HEAP32[$25 >> 2] = 676;
    $26 = $pairing + 492 | 0;
    HEAP32[$26 >> 2] = 360;
    label = 8;
    break;
   case 8:
    return;
  }
}
function _a1_pairing($out, $in1, $in2, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $pairing = $pairing | 0;
  var $V = 0, $f = 0, $f0 = 0, $a = 0, $b = 0, $c = 0, $e0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $m_0 = 0, $34 = 0, $36 = 0, $37 = 0, $40 = 0, $42 = 0, $43 = 0, $44 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $V = __stackBase__ | 0;
    $f = __stackBase__ + 8 | 0;
    $f0 = __stackBase__ + 16 | 0;
    $a = __stackBase__ + 24 | 0;
    $b = __stackBase__ + 32 | 0;
    $c = __stackBase__ + 40 | 0;
    $e0 = __stackBase__ + 48 | 0;
    $1 = $pairing + 504 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $in1;
    $4 = _curve_x_coord($3) | 0;
    $5 = $4;
    $6 = _curve_y_coord($3) | 0;
    $7 = $6;
    $8 = $in2;
    $9 = _curve_x_coord($8) | 0;
    $10 = $9;
    $11 = _curve_y_coord($8) | 0;
    $12 = $11;
    $13 = $V | 0;
    $14 = $2 + 432 | 0;
    $15 = $14;
    _element_init352($13, $15);
    _element_set353($13, $in1);
    $16 = $V;
    $17 = _curve_x_coord($16) | 0;
    $18 = $17;
    $19 = _curve_y_coord($16) | 0;
    $20 = $19;
    $21 = $f | 0;
    $22 = $2 + 216 | 0;
    $23 = $22;
    _element_init352($21, $23);
    $24 = $f0 | 0;
    _element_init352($24, $23);
    _element_set1354($21);
    $25 = $a | 0;
    $26 = $2;
    _element_init352($25, $26);
    $27 = $b | 0;
    _element_init352($27, $26);
    $28 = $c | 0;
    _element_init352($28, $26);
    $29 = $e0 | 0;
    _element_init352($29, $26);
    $30 = $pairing | 0;
    $31 = ___gmpz_sizeinbase($30, 2) | 0;
    $32 = $31 - 2 | 0;
    $m_0 = $32;
    label = 2;
    break;
   case 2:
    _compute_abc_tangent($25, $27, $28, $18, $20, $29);
    _a_miller_evalfn($24, $25, $27, $28, $10, $12);
    _element_mul356($21, $21, $24);
    $34 = ($m_0 | 0) == 0;
    if ($34) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _element_double368($13, $13);
    $36 = ___gmpz_tstbit($30, $m_0) | 0;
    $37 = ($36 | 0) == 0;
    if ($37) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _compute_abc_line($25, $27, $28, $18, $20, $5, $7, $29);
    _a_miller_evalfn($24, $25, $27, $28, $10, $12);
    _element_mul356($21, $21, $24);
    _element_add367($13, $13, $in1);
    label = 5;
    break;
   case 5:
    $40 = $m_0 - 1 | 0;
    _element_square355($21, $21);
    $m_0 = $40;
    label = 2;
    break;
   case 6:
    _element_invert358($24, $21);
    $42 = _element_y($21) | 0;
    $43 = _element_y($21) | 0;
    _element_neg357($42, $43);
    _element_mul356($21, $21, $24);
    $44 = $pairing + 452 | 0;
    _element_pow_mpz362($out, $21, $44);
    _element_clear359($21);
    _element_clear359($24);
    _element_clear359($13);
    _element_clear359($25);
    _element_clear359($27);
    _element_clear359($28);
    _element_clear359($29);
    STACKTOP = __stackBase__;
    return;
  }
}
function _a_pairing_ellnet($out, $in1, $in2, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $pairing = $pairing | 0;
  var $cm3 = 0, $cm2 = 0, $cm1 = 0, $c0 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $dm1 = 0, $d0 = 0, $d1 = 0, $A = 0, $B = 0, $C = 0, $sm2 = 0, $sm1 = 0, $s0 = 0, $s1 = 0, $s2 = 0, $s3 = 0, $tm2 = 0, $tm1 = 0, $t0 = 0, $t1 = 0, $t2 = 0, $t3 = 0, $e0 = 0, $e1 = 0, $u = 0, $v = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $m_0 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $119 = 0, $121 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 240 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $cm3 = __stackBase__ | 0;
    $cm2 = __stackBase__ + 8 | 0;
    $cm1 = __stackBase__ + 16 | 0;
    $c0 = __stackBase__ + 24 | 0;
    $c1 = __stackBase__ + 32 | 0;
    $c2 = __stackBase__ + 40 | 0;
    $c3 = __stackBase__ + 48 | 0;
    $c4 = __stackBase__ + 56 | 0;
    $dm1 = __stackBase__ + 64 | 0;
    $d0 = __stackBase__ + 72 | 0;
    $d1 = __stackBase__ + 80 | 0;
    $A = __stackBase__ + 88 | 0;
    $B = __stackBase__ + 96 | 0;
    $C = __stackBase__ + 104 | 0;
    $sm2 = __stackBase__ + 112 | 0;
    $sm1 = __stackBase__ + 120 | 0;
    $s0 = __stackBase__ + 128 | 0;
    $s1 = __stackBase__ + 136 | 0;
    $s2 = __stackBase__ + 144 | 0;
    $s3 = __stackBase__ + 152 | 0;
    $tm2 = __stackBase__ + 160 | 0;
    $tm1 = __stackBase__ + 168 | 0;
    $t0 = __stackBase__ + 176 | 0;
    $t1 = __stackBase__ + 184 | 0;
    $t2 = __stackBase__ + 192 | 0;
    $t3 = __stackBase__ + 200 | 0;
    $e0 = __stackBase__ + 208 | 0;
    $e1 = __stackBase__ + 216 | 0;
    $u = __stackBase__ + 224 | 0;
    $v = __stackBase__ + 232 | 0;
    $1 = $in1;
    $2 = _curve_x_coord($1) | 0;
    $3 = $2;
    $4 = _curve_y_coord($1) | 0;
    $5 = $4;
    $6 = $in2;
    $7 = _curve_x_coord($6) | 0;
    $8 = $7;
    $9 = _curve_y_coord($6) | 0;
    $10 = $9;
    $11 = $cm3 | 0;
    _element_init_same_as366($11, $3);
    $12 = $cm2 | 0;
    _element_init_same_as366($12, $3);
    $13 = $cm1 | 0;
    _element_init_same_as366($13, $3);
    $14 = $c0 | 0;
    _element_init_same_as366($14, $3);
    $15 = $c1 | 0;
    _element_init_same_as366($15, $3);
    $16 = $c2 | 0;
    _element_init_same_as366($16, $3);
    $17 = $c3 | 0;
    _element_init_same_as366($17, $3);
    $18 = $c4 | 0;
    _element_init_same_as366($18, $3);
    $19 = $C | 0;
    _element_init_same_as366($19, $3);
    $20 = $dm1 | 0;
    _element_init_same_as366($20, $out);
    $21 = $d0 | 0;
    _element_init_same_as366($21, $out);
    $22 = $d1 | 0;
    _element_init_same_as366($22, $out);
    $23 = $A | 0;
    _element_init_same_as366($23, $3);
    $24 = $B | 0;
    _element_init_same_as366($24, $out);
    _element_double368($15, $5);
    _element_set1354($14);
    _element_neg357($11, $15);
    _element_neg357($12, $14);
    _element_square355($13, $3);
    _element_square355($19, $13);
    _element_sub369($16, $19, $13);
    _element_double368($17, $16);
    _element_double368($17, $17);
    _element_add367($17, $17, $16);
    _element_mul356($16, $19, $13);
    _element_add367($17, $17, $16);
    _element_add367($17, $17, $12);
    _element_mul356($17, $17, $15);
    _element_double368($17, $17);
    _element_double368($13, $13);
    _element_add367($13, $13, $19);
    _element_double368($19, $13);
    _element_add367($19, $19, $13);
    _element_add367($16, $19, $12);
    _element_square355($19, $15);
    _element_mul356($18, $19, $15);
    _element_mul356($18, $18, $17);
    _element_square355($19, $16);
    _element_mul356($19, $19, $16);
    _element_sub369($18, $18, $19);
    _element_add367($23, $3, $8);
    _element_double368($19, $3);
    _element_sub369($19, $19, $8);
    _element_square355($13, $23);
    _element_mul356($13, $19, $13);
    $25 = _element_x($22) | 0;
    _element_set353($25, $5);
    $26 = _element_y($22) | 0;
    _element_set353($26, $10);
    _element_square355($22, $22);
    $27 = _element_x($22) | 0;
    $28 = _element_x($22) | 0;
    _element_sub369($27, $28, $13);
    _element_neg357($24, $22);
    _element_invert358($24, $24);
    _element_invert358($23, $23);
    $29 = _element_x($22) | 0;
    _element_mul356($29, $5, $23);
    $30 = _element_x($22) | 0;
    $31 = _element_x($22) | 0;
    _element_neg357($30, $31);
    $32 = _element_y($22) | 0;
    _element_mul356($32, $10, $23);
    _element_square355($22, $22);
    $33 = _element_x($22) | 0;
    $34 = _element_x($22) | 0;
    _element_sub369($33, $19, $34);
    $35 = _element_y($22) | 0;
    $36 = _element_y($22) | 0;
    _element_neg357($35, $36);
    _element_set0365($13);
    _element_invert358($19, $15);
    _element_set1354($20);
    _element_set1354($21);
    $37 = $sm2 | 0;
    _element_init_same_as366($37, $3);
    $38 = $sm1 | 0;
    _element_init_same_as366($38, $3);
    $39 = $s0 | 0;
    _element_init_same_as366($39, $3);
    $40 = $s1 | 0;
    _element_init_same_as366($40, $3);
    $41 = $s2 | 0;
    _element_init_same_as366($41, $3);
    $42 = $s3 | 0;
    _element_init_same_as366($42, $3);
    $43 = $tm2 | 0;
    _element_init_same_as366($43, $3);
    $44 = $tm1 | 0;
    _element_init_same_as366($44, $3);
    $45 = $t0 | 0;
    _element_init_same_as366($45, $3);
    $46 = $t1 | 0;
    _element_init_same_as366($46, $3);
    $47 = $t2 | 0;
    _element_init_same_as366($47, $3);
    $48 = $t3 | 0;
    _element_init_same_as366($48, $3);
    $49 = $e0 | 0;
    _element_init_same_as366($49, $3);
    $50 = $e1 | 0;
    _element_init_same_as366($50, $3);
    $51 = $u | 0;
    _element_init_same_as366($51, $21);
    $52 = $v | 0;
    _element_init_same_as366($52, $21);
    $53 = $pairing | 0;
    $54 = ___gmpz_sizeinbase($53, 2) | 0;
    $55 = $54 - 2 | 0;
    $m_0 = $55;
    label = 2;
    break;
   case 2:
    _element_square355($37, $12);
    _element_square355($38, $13);
    _element_square355($39, $14);
    _element_square355($40, $15);
    _element_square355($41, $16);
    _element_square355($42, $17);
    _element_mul356($43, $11, $13);
    _element_mul356($44, $12, $14);
    _element_mul356($45, $13, $15);
    _element_mul356($46, $14, $16);
    _element_mul356($47, $15, $17);
    _element_mul356($48, $16, $18);
    _element_square355($51, $21);
    _element_mul356($52, $20, $22);
    $57 = ___gmpz_tstbit($53, $m_0) | 0;
    $58 = ($57 | 0) == 0;
    if ($58) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _element_mul356($49, $45, $37);
    _element_mul356($50, $43, $39);
    _element_sub369($11, $49, $50);
    _element_mul356($11, $11, $19);
    _element_mul356($49, $45, $38);
    _element_mul356($50, $44, $39);
    _element_sub369($12, $49, $50);
    _element_mul356($49, $46, $38);
    _element_mul356($50, $44, $40);
    _element_sub369($13, $49, $50);
    _element_mul356($13, $13, $19);
    _element_mul356($49, $46, $39);
    _element_mul356($50, $45, $40);
    _element_sub369($14, $49, $50);
    _element_mul356($49, $47, $39);
    _element_mul356($50, $45, $41);
    _element_sub369($15, $49, $50);
    _element_mul356($15, $15, $19);
    _element_mul356($49, $47, $40);
    _element_mul356($50, $46, $41);
    _element_sub369($16, $49, $50);
    _element_mul356($49, $48, $40);
    _element_mul356($50, $46, $42);
    _element_sub369($17, $49, $50);
    _element_mul356($17, $17, $19);
    _element_mul356($49, $48, $41);
    _element_mul356($50, $47, $42);
    _element_sub369($18, $49, $50);
    $60 = _element_x($out) | 0;
    $61 = _element_x($51) | 0;
    _element_mul356($60, $61, $45);
    $62 = _element_y($out) | 0;
    $63 = _element_y($51) | 0;
    _element_mul356($62, $63, $45);
    $64 = _element_x($20) | 0;
    $65 = _element_x($52) | 0;
    _element_mul356($64, $65, $39);
    $66 = _element_y($20) | 0;
    $67 = _element_y($52) | 0;
    _element_mul356($66, $67, $39);
    _element_sub369($20, $20, $out);
    $68 = _element_x($out) | 0;
    $69 = _element_x($51) | 0;
    _element_mul356($68, $69, $46);
    $70 = _element_y($out) | 0;
    $71 = _element_y($51) | 0;
    _element_mul356($70, $71, $46);
    $72 = _element_x($21) | 0;
    $73 = _element_x($52) | 0;
    _element_mul356($72, $73, $40);
    $74 = _element_y($21) | 0;
    $75 = _element_y($52) | 0;
    _element_mul356($74, $75, $40);
    _element_sub369($21, $21, $out);
    $76 = _element_x($21) | 0;
    $77 = _element_x($21) | 0;
    _element_mul356($76, $77, $23);
    $78 = _element_y($21) | 0;
    $79 = _element_y($21) | 0;
    _element_mul356($78, $79, $23);
    $80 = _element_x($out) | 0;
    $81 = _element_x($51) | 0;
    _element_mul356($80, $81, $47);
    $82 = _element_y($out) | 0;
    $83 = _element_y($51) | 0;
    _element_mul356($82, $83, $47);
    $84 = _element_x($22) | 0;
    $85 = _element_x($52) | 0;
    _element_mul356($84, $85, $41);
    $86 = _element_y($22) | 0;
    $87 = _element_y($52) | 0;
    _element_mul356($86, $87, $41);
    _element_sub369($22, $22, $out);
    _element_mul356($22, $22, $24);
    label = 5;
    break;
   case 4:
    _element_mul356($49, $44, $37);
    _element_mul356($50, $43, $38);
    _element_sub369($11, $49, $50);
    _element_mul356($49, $45, $37);
    _element_mul356($50, $43, $39);
    _element_sub369($12, $49, $50);
    _element_mul356($12, $12, $19);
    _element_mul356($49, $45, $38);
    _element_mul356($50, $44, $39);
    _element_sub369($13, $49, $50);
    _element_mul356($49, $46, $38);
    _element_mul356($50, $44, $40);
    _element_sub369($14, $49, $50);
    _element_mul356($14, $14, $19);
    _element_mul356($49, $46, $39);
    _element_mul356($50, $45, $40);
    _element_sub369($15, $49, $50);
    _element_mul356($49, $47, $39);
    _element_mul356($50, $45, $41);
    _element_sub369($16, $49, $50);
    _element_mul356($16, $16, $19);
    _element_mul356($49, $47, $40);
    _element_mul356($50, $46, $41);
    _element_sub369($17, $49, $50);
    _element_mul356($49, $48, $40);
    _element_mul356($50, $46, $42);
    _element_sub369($18, $49, $50);
    _element_mul356($18, $18, $19);
    $89 = _element_x($out) | 0;
    $90 = _element_x($51) | 0;
    _element_mul356($89, $90, $44);
    $91 = _element_y($out) | 0;
    $92 = _element_y($51) | 0;
    _element_mul356($91, $92, $44);
    $93 = _element_x($20) | 0;
    $94 = _element_x($52) | 0;
    _element_mul356($93, $94, $38);
    $95 = _element_y($20) | 0;
    $96 = _element_y($52) | 0;
    _element_mul356($95, $96, $38);
    _element_sub369($20, $20, $out);
    $97 = _element_x($out) | 0;
    $98 = _element_x($51) | 0;
    _element_mul356($97, $98, $45);
    $99 = _element_y($out) | 0;
    $100 = _element_y($51) | 0;
    _element_mul356($99, $100, $45);
    $101 = _element_x($21) | 0;
    $102 = _element_x($52) | 0;
    _element_mul356($101, $102, $39);
    $103 = _element_y($21) | 0;
    $104 = _element_y($52) | 0;
    _element_mul356($103, $104, $39);
    _element_sub369($21, $21, $out);
    $105 = _element_x($out) | 0;
    $106 = _element_x($51) | 0;
    _element_mul356($105, $106, $46);
    $107 = _element_y($out) | 0;
    $108 = _element_y($51) | 0;
    _element_mul356($107, $108, $46);
    $109 = _element_x($22) | 0;
    $110 = _element_x($52) | 0;
    _element_mul356($109, $110, $40);
    $111 = _element_y($22) | 0;
    $112 = _element_y($52) | 0;
    _element_mul356($111, $112, $40);
    _element_sub369($22, $22, $out);
    $113 = _element_x($22) | 0;
    $114 = _element_x($22) | 0;
    _element_mul356($113, $114, $23);
    $115 = _element_y($22) | 0;
    $116 = _element_y($22) | 0;
    _element_mul356($115, $116, $23);
    label = 5;
    break;
   case 5:
    $118 = ($m_0 | 0) == 0;
    $119 = $m_0 - 1 | 0;
    if ($118) {
      label = 6;
      break;
    } else {
      $m_0 = $119;
      label = 2;
      break;
    }
   case 6:
    $121 = $pairing + 452 | 0;
    _a_tateexp($out, $22, $21, $121);
    _element_clear359($20);
    _element_clear359($21);
    _element_clear359($22);
    _element_clear359($11);
    _element_clear359($12);
    _element_clear359($13);
    _element_clear359($14);
    _element_clear359($15);
    _element_clear359($16);
    _element_clear359($17);
    _element_clear359($18);
    _element_clear359($37);
    _element_clear359($38);
    _element_clear359($39);
    _element_clear359($40);
    _element_clear359($41);
    _element_clear359($42);
    _element_clear359($43);
    _element_clear359($44);
    _element_clear359($45);
    _element_clear359($46);
    _element_clear359($47);
    _element_clear359($48);
    _element_clear359($49);
    _element_clear359($50);
    _element_clear359($23);
    _element_clear359($24);
    _element_clear359($19);
    _element_clear359($51);
    _element_clear359($52);
    STACKTOP = __stackBase__;
    return;
  }
}
function _a_pairing_ellnet_pp_init($p, $in1, $pairing) {
  $p = $p | 0;
  $in1 = $in1 | 0;
  $pairing = $pairing | 0;
  var $cm3 = 0, $cm2 = 0, $cm1 = 0, $c0 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $C = 0, $sm2 = 0, $s3 = 0, $tm2 = 0, $t3 = 0, $e0 = 0, $e1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $i_0111 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $exitcond = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $k_0 = 0, $m_0 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $61 = 0, $65 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 120 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $cm3 = __stackBase__ | 0;
    $cm2 = __stackBase__ + 8 | 0;
    $cm1 = __stackBase__ + 16 | 0;
    $c0 = __stackBase__ + 24 | 0;
    $c1 = __stackBase__ + 32 | 0;
    $c2 = __stackBase__ + 40 | 0;
    $c3 = __stackBase__ + 48 | 0;
    $c4 = __stackBase__ + 56 | 0;
    $C = __stackBase__ + 64 | 0;
    $sm2 = __stackBase__ + 72 | 0;
    $s3 = __stackBase__ + 80 | 0;
    $tm2 = __stackBase__ + 88 | 0;
    $t3 = __stackBase__ + 96 | 0;
    $e0 = __stackBase__ + 104 | 0;
    $e1 = __stackBase__ + 112 | 0;
    $1 = $in1;
    $2 = _curve_x_coord($1) | 0;
    $3 = $2;
    $4 = _curve_y_coord($1) | 0;
    $5 = $4;
    $6 = $pairing | 0;
    $7 = ___gmpz_sizeinbase($6, 2) | 0;
    $8 = HEAP32[230] | 0;
    $9 = FUNCTION_TABLE_ii[$8 & 1023](20) | 0;
    $10 = $p + 4 | 0;
    HEAP32[$10 >> 2] = $9;
    $11 = HEAP32[230] | 0;
    $12 = $7 << 6;
    $13 = FUNCTION_TABLE_ii[$11 & 1023]($12) | 0;
    $14 = $13;
    $15 = $9 + 16 | 0;
    $16 = $15;
    HEAP32[$16 >> 2] = $14;
    $17 = $9;
    _element_init_same_as366($17, $3);
    $18 = $9 + 8 | 0;
    $19 = $18;
    _element_init_same_as366($19, $5);
    _element_set353($17, $3);
    _element_set353($19, $5);
    $20 = ($7 | 0) > 0;
    if ($20) {
      $i_0111 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $21 = HEAP32[$16 >> 2] | 0;
    $22 = $21 + ($i_0111 << 6) | 0;
    _element_init_same_as366($22, $3);
    $23 = $21 + ($i_0111 << 6) + 8 | 0;
    _element_init_same_as366($23, $3);
    $24 = $21 + ($i_0111 << 6) + 16 | 0;
    _element_init_same_as366($24, $3);
    $25 = $21 + ($i_0111 << 6) + 24 | 0;
    _element_init_same_as366($25, $3);
    $26 = $21 + ($i_0111 << 6) + 32 | 0;
    _element_init_same_as366($26, $3);
    $27 = $21 + ($i_0111 << 6) + 40 | 0;
    _element_init_same_as366($27, $3);
    $28 = $21 + ($i_0111 << 6) + 48 | 0;
    _element_init_same_as366($28, $3);
    $29 = $21 + ($i_0111 << 6) + 56 | 0;
    _element_init_same_as366($29, $3);
    $30 = $i_0111 + 1 | 0;
    $exitcond = ($30 | 0) == ($7 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_0111 = $30;
      label = 2;
      break;
    }
   case 3:
    $31 = $cm3 | 0;
    _element_init_same_as366($31, $3);
    $32 = $cm2 | 0;
    _element_init_same_as366($32, $3);
    $33 = $cm1 | 0;
    _element_init_same_as366($33, $3);
    $34 = $c0 | 0;
    _element_init_same_as366($34, $3);
    $35 = $c1 | 0;
    _element_init_same_as366($35, $3);
    $36 = $c2 | 0;
    _element_init_same_as366($36, $3);
    $37 = $c3 | 0;
    _element_init_same_as366($37, $3);
    $38 = $c4 | 0;
    _element_init_same_as366($38, $3);
    $39 = $C | 0;
    _element_init_same_as366($39, $3);
    _element_double368($35, $5);
    _element_set1354($34);
    _element_neg357($31, $35);
    _element_neg357($32, $34);
    _element_square355($33, $3);
    _element_square355($39, $33);
    _element_sub369($36, $39, $33);
    _element_double368($37, $36);
    _element_double368($37, $37);
    _element_add367($37, $37, $36);
    _element_mul356($36, $39, $33);
    _element_add367($37, $37, $36);
    _element_add367($37, $37, $32);
    _element_mul356($37, $37, $35);
    _element_double368($37, $37);
    _element_double368($33, $33);
    _element_add367($33, $33, $39);
    _element_double368($39, $33);
    _element_add367($39, $39, $33);
    _element_add367($36, $39, $32);
    _element_square355($39, $35);
    _element_mul356($38, $39, $35);
    _element_mul356($38, $38, $37);
    _element_square355($39, $36);
    _element_mul356($39, $39, $36);
    _element_sub369($38, $38, $39);
    _element_set0365($33);
    _element_invert358($39, $35);
    $40 = $sm2 | 0;
    _element_init_same_as366($40, $3);
    $41 = $s3 | 0;
    _element_init_same_as366($41, $3);
    $42 = $tm2 | 0;
    _element_init_same_as366($42, $3);
    $43 = $t3 | 0;
    _element_init_same_as366($43, $3);
    $44 = $e0 | 0;
    _element_init_same_as366($44, $3);
    $45 = $e1 | 0;
    _element_init_same_as366($45, $3);
    $46 = $7 - 2 | 0;
    $m_0 = $46;
    $k_0 = 0;
    label = 4;
    break;
   case 4:
    $48 = HEAP32[$16 >> 2] | 0;
    $49 = $48 + ($k_0 << 6) | 0;
    $50 = $48 + ($k_0 << 6) + 8 | 0;
    $51 = $48 + ($k_0 << 6) + 16 | 0;
    $52 = $48 + ($k_0 << 6) + 24 | 0;
    $53 = $48 + ($k_0 << 6) + 32 | 0;
    $54 = $48 + ($k_0 << 6) + 40 | 0;
    $55 = $48 + ($k_0 << 6) + 48 | 0;
    $56 = $48 + ($k_0 << 6) + 56 | 0;
    _element_square355($40, $32);
    _element_square355($49, $33);
    _element_square355($50, $34);
    _element_square355($51, $35);
    _element_square355($52, $36);
    _element_square355($41, $37);
    _element_mul356($42, $31, $33);
    _element_mul356($53, $32, $34);
    _element_mul356($54, $33, $35);
    _element_mul356($55, $34, $36);
    _element_mul356($56, $35, $37);
    _element_mul356($43, $36, $38);
    $57 = ($m_0 | 0) == 0;
    if ($57) {
      label = 9;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $59 = $k_0 + 1 | 0;
    $60 = ___gmpz_tstbit($6, $m_0) | 0;
    $61 = ($60 | 0) == 0;
    if ($61) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _element_mul356($44, $54, $40);
    _element_mul356($45, $42, $50);
    _element_sub369($31, $44, $45);
    _element_mul356($31, $31, $39);
    _element_mul356($44, $54, $49);
    _element_mul356($45, $53, $50);
    _element_sub369($32, $44, $45);
    _element_mul356($44, $55, $49);
    _element_mul356($45, $53, $51);
    _element_sub369($33, $44, $45);
    _element_mul356($33, $33, $39);
    _element_mul356($44, $55, $50);
    _element_mul356($45, $54, $51);
    _element_sub369($34, $44, $45);
    _element_mul356($44, $56, $50);
    _element_mul356($45, $54, $52);
    _element_sub369($35, $44, $45);
    _element_mul356($35, $35, $39);
    _element_mul356($44, $56, $51);
    _element_mul356($45, $55, $52);
    _element_sub369($36, $44, $45);
    _element_mul356($44, $43, $51);
    _element_mul356($45, $55, $41);
    _element_sub369($37, $44, $45);
    _element_mul356($37, $37, $39);
    _element_mul356($44, $43, $52);
    _element_mul356($45, $56, $41);
    _element_sub369($38, $44, $45);
    label = 8;
    break;
   case 7:
    _element_mul356($44, $53, $40);
    _element_mul356($45, $42, $49);
    _element_sub369($31, $44, $45);
    _element_mul356($44, $54, $40);
    _element_mul356($45, $42, $50);
    _element_sub369($32, $44, $45);
    _element_mul356($32, $32, $39);
    _element_mul356($44, $54, $49);
    _element_mul356($45, $53, $50);
    _element_sub369($33, $44, $45);
    _element_mul356($44, $55, $49);
    _element_mul356($45, $53, $51);
    _element_sub369($34, $44, $45);
    _element_mul356($34, $34, $39);
    _element_mul356($44, $55, $50);
    _element_mul356($45, $54, $51);
    _element_sub369($35, $44, $45);
    _element_mul356($44, $56, $50);
    _element_mul356($45, $54, $52);
    _element_sub369($36, $44, $45);
    _element_mul356($36, $36, $39);
    _element_mul356($44, $56, $51);
    _element_mul356($45, $55, $52);
    _element_sub369($37, $44, $45);
    _element_mul356($44, $43, $51);
    _element_mul356($45, $55, $41);
    _element_sub369($38, $44, $45);
    _element_mul356($38, $38, $39);
    label = 8;
    break;
   case 8:
    $65 = $m_0 - 1 | 0;
    $m_0 = $65;
    $k_0 = $59;
    label = 4;
    break;
   case 9:
    _element_clear359($31);
    _element_clear359($32);
    _element_clear359($33);
    _element_clear359($34);
    _element_clear359($35);
    _element_clear359($36);
    _element_clear359($37);
    _element_clear359($38);
    _element_clear359($40);
    _element_clear359($41);
    _element_clear359($42);
    _element_clear359($43);
    _element_clear359($44);
    _element_clear359($45);
    _element_clear359($39);
    STACKTOP = __stackBase__;
    return;
  }
}
function _a_pairing_ellnet_pp_clear($p) {
  $p = $p | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i_015 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $exitcond = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $p | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 | 0;
    $6 = ___gmpz_sizeinbase($5, 2) | 0;
    $7 = ($6 | 0) > 0;
    if ($7) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $8 = $2 + 16 | 0;
    $9 = $8;
    $i_015 = 0;
    label = 3;
    break;
   case 3:
    $11 = HEAP32[$9 >> 2] | 0;
    $12 = $11 + ($i_015 << 6) | 0;
    _element_clear359($12);
    $13 = $11 + ($i_015 << 6) + 8 | 0;
    _element_clear359($13);
    $14 = $11 + ($i_015 << 6) + 16 | 0;
    _element_clear359($14);
    $15 = $11 + ($i_015 << 6) + 24 | 0;
    _element_clear359($15);
    $16 = $11 + ($i_015 << 6) + 32 | 0;
    _element_clear359($16);
    $17 = $11 + ($i_015 << 6) + 40 | 0;
    _element_clear359($17);
    $18 = $11 + ($i_015 << 6) + 48 | 0;
    _element_clear359($18);
    $19 = $11 + ($i_015 << 6) + 56 | 0;
    _element_clear359($19);
    $20 = $i_015 + 1 | 0;
    $exitcond = ($20 | 0) == ($6 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_015 = $20;
      label = 3;
      break;
    }
   case 4:
    $21 = $2;
    _element_clear359($21);
    $22 = $2 + 8 | 0;
    $23 = $22;
    _element_clear359($23);
    $24 = HEAP32[232] | 0;
    $25 = $2 + 16 | 0;
    $26 = $25;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = $27;
    FUNCTION_TABLE_vi[$24 & 1023]($28);
    $29 = HEAP32[232] | 0;
    $30 = HEAP32[$1 >> 2] | 0;
    FUNCTION_TABLE_vi[$29 & 1023]($30);
    return;
  }
}
function _a_pairing_ellnet_pp_apply($out, $in2, $p) {
  $out = $out | 0;
  $in2 = $in2 | 0;
  $p = $p | 0;
  var $A = 0, $B = 0, $e0 = 0, $e1 = 0, $dm1 = 0, $d0 = 0, $d1 = 0, $u = 0, $v = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $m_0 = 0, $k_0 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $111 = 0, $112 = 0, $114 = 0, $115 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 72 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $A = __stackBase__ | 0;
    $B = __stackBase__ + 8 | 0;
    $e0 = __stackBase__ + 16 | 0;
    $e1 = __stackBase__ + 24 | 0;
    $dm1 = __stackBase__ + 32 | 0;
    $d0 = __stackBase__ + 40 | 0;
    $d1 = __stackBase__ + 48 | 0;
    $u = __stackBase__ + 56 | 0;
    $v = __stackBase__ + 64 | 0;
    $1 = $in2;
    $2 = _curve_x_coord($1) | 0;
    $3 = $2;
    $4 = _curve_y_coord($1) | 0;
    $5 = $4;
    $6 = $p + 4 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $p | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9 | 0;
    $11 = ___gmpz_sizeinbase($10, 2) | 0;
    $12 = $11 - 2 | 0;
    $13 = $A | 0;
    _element_init_same_as366($13, $3);
    $14 = $B | 0;
    _element_init_same_as366($14, $out);
    $15 = $e0 | 0;
    _element_init_same_as366($15, $3);
    $16 = $e1 | 0;
    _element_init_same_as366($16, $3);
    $17 = $dm1 | 0;
    _element_init_same_as366($17, $out);
    $18 = $d0 | 0;
    _element_init_same_as366($18, $out);
    $19 = $d1 | 0;
    _element_init_same_as366($19, $out);
    $20 = $u | 0;
    _element_init_same_as366($20, $out);
    $21 = $v | 0;
    _element_init_same_as366($21, $out);
    $22 = $7;
    _element_add367($13, $22, $3);
    _element_double368($15, $22);
    _element_sub369($15, $15, $3);
    _element_square355($16, $13);
    _element_mul356($16, $15, $16);
    $23 = _element_x($19) | 0;
    $24 = $7 + 8 | 0;
    $25 = $24;
    _element_set353($23, $25);
    $26 = _element_y($19) | 0;
    _element_set353($26, $5);
    _element_square355($19, $19);
    $27 = _element_x($19) | 0;
    $28 = _element_x($19) | 0;
    _element_sub369($27, $28, $16);
    _element_neg357($14, $19);
    _element_invert358($14, $14);
    _element_invert358($13, $13);
    $29 = _element_x($19) | 0;
    _element_mul356($29, $25, $13);
    $30 = _element_x($19) | 0;
    $31 = _element_x($19) | 0;
    _element_neg357($30, $31);
    $32 = _element_y($19) | 0;
    _element_mul356($32, $5, $13);
    _element_square355($19, $19);
    $33 = _element_x($19) | 0;
    $34 = _element_x($19) | 0;
    _element_sub369($33, $15, $34);
    $35 = _element_y($19) | 0;
    $36 = _element_y($19) | 0;
    _element_neg357($35, $36);
    _element_set1354($17);
    _element_set1354($18);
    $37 = $7 + 16 | 0;
    $38 = $37;
    $k_0 = 0;
    $m_0 = $12;
    label = 2;
    break;
   case 2:
    $40 = HEAP32[$38 >> 2] | 0;
    $41 = $40 + ($k_0 << 6) | 0;
    $42 = $40 + ($k_0 << 6) + 8 | 0;
    $43 = $40 + ($k_0 << 6) + 16 | 0;
    $44 = $40 + ($k_0 << 6) + 24 | 0;
    $45 = $40 + ($k_0 << 6) + 32 | 0;
    $46 = $40 + ($k_0 << 6) + 40 | 0;
    $47 = $40 + ($k_0 << 6) + 48 | 0;
    $48 = $40 + ($k_0 << 6) + 56 | 0;
    $49 = $k_0 + 1 | 0;
    _element_square355($20, $18);
    _element_mul356($21, $17, $19);
    $50 = HEAP32[$8 >> 2] | 0;
    $51 = $50 | 0;
    $52 = ___gmpz_tstbit($51, $m_0) | 0;
    $53 = ($52 | 0) == 0;
    $54 = _element_x($out) | 0;
    $55 = _element_x($20) | 0;
    if ($53) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _element_mul356($54, $55, $46);
    $57 = _element_y($out) | 0;
    $58 = _element_y($20) | 0;
    _element_mul356($57, $58, $46);
    $59 = _element_x($17) | 0;
    $60 = _element_x($21) | 0;
    _element_mul356($59, $60, $42);
    $61 = _element_y($17) | 0;
    $62 = _element_y($21) | 0;
    _element_mul356($61, $62, $42);
    _element_sub369($17, $17, $out);
    $63 = _element_x($out) | 0;
    $64 = _element_x($20) | 0;
    _element_mul356($63, $64, $47);
    $65 = _element_y($out) | 0;
    $66 = _element_y($20) | 0;
    _element_mul356($65, $66, $47);
    $67 = _element_x($18) | 0;
    $68 = _element_x($21) | 0;
    _element_mul356($67, $68, $43);
    $69 = _element_y($18) | 0;
    $70 = _element_y($21) | 0;
    _element_mul356($69, $70, $43);
    _element_sub369($18, $18, $out);
    $71 = _element_x($18) | 0;
    $72 = _element_x($18) | 0;
    _element_mul356($71, $72, $13);
    $73 = _element_y($18) | 0;
    $74 = _element_y($18) | 0;
    _element_mul356($73, $74, $13);
    $75 = _element_x($out) | 0;
    $76 = _element_x($20) | 0;
    _element_mul356($75, $76, $48);
    $77 = _element_y($out) | 0;
    $78 = _element_y($20) | 0;
    _element_mul356($77, $78, $48);
    $79 = _element_x($19) | 0;
    $80 = _element_x($21) | 0;
    _element_mul356($79, $80, $44);
    $81 = _element_y($19) | 0;
    $82 = _element_y($21) | 0;
    _element_mul356($81, $82, $44);
    _element_sub369($19, $19, $out);
    _element_mul356($19, $19, $14);
    label = 5;
    break;
   case 4:
    _element_mul356($54, $55, $45);
    $84 = _element_y($out) | 0;
    $85 = _element_y($20) | 0;
    _element_mul356($84, $85, $45);
    $86 = _element_x($17) | 0;
    $87 = _element_x($21) | 0;
    _element_mul356($86, $87, $41);
    $88 = _element_y($17) | 0;
    $89 = _element_y($21) | 0;
    _element_mul356($88, $89, $41);
    _element_sub369($17, $17, $out);
    $90 = _element_x($out) | 0;
    $91 = _element_x($20) | 0;
    _element_mul356($90, $91, $46);
    $92 = _element_y($out) | 0;
    $93 = _element_y($20) | 0;
    _element_mul356($92, $93, $46);
    $94 = _element_x($18) | 0;
    $95 = _element_x($21) | 0;
    _element_mul356($94, $95, $42);
    $96 = _element_y($18) | 0;
    $97 = _element_y($21) | 0;
    _element_mul356($96, $97, $42);
    _element_sub369($18, $18, $out);
    $98 = _element_x($out) | 0;
    $99 = _element_x($20) | 0;
    _element_mul356($98, $99, $47);
    $100 = _element_y($out) | 0;
    $101 = _element_y($20) | 0;
    _element_mul356($100, $101, $47);
    $102 = _element_x($19) | 0;
    $103 = _element_x($21) | 0;
    _element_mul356($102, $103, $43);
    $104 = _element_y($19) | 0;
    $105 = _element_y($21) | 0;
    _element_mul356($104, $105, $43);
    _element_sub369($19, $19, $out);
    $106 = _element_x($19) | 0;
    $107 = _element_x($19) | 0;
    _element_mul356($106, $107, $13);
    $108 = _element_y($19) | 0;
    $109 = _element_y($19) | 0;
    _element_mul356($108, $109, $13);
    label = 5;
    break;
   case 5:
    $111 = ($m_0 | 0) == 0;
    $112 = $m_0 - 1 | 0;
    if ($111) {
      label = 6;
      break;
    } else {
      $k_0 = $49;
      $m_0 = $112;
      label = 2;
      break;
    }
   case 6:
    $114 = HEAP32[$8 >> 2] | 0;
    $115 = $114 + 452 | 0;
    _a_tateexp($out, $19, $18, $115);
    _element_clear359($13);
    _element_clear359($14);
    _element_clear359($15);
    _element_clear359($16);
    _element_clear359($17);
    _element_clear359($18);
    _element_clear359($19);
    _element_clear359($20);
    _element_clear359($21);
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_init_same_as366($e, $e2) {
  $e = $e | 0;
  $e2 = $e2 | 0;
  _element_init352($e, HEAP32[$e2 >> 2] | 0);
  return;
}
function _element_add367($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 40 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_double368($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 96 >> 2] & 1023]($n, $a);
  return;
}
function _element_sub369($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 44 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_x($a) {
  $a = $a | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$a >> 2] | 0) + 68 >> 2] & 1023]($a) | 0;
}
function _pp2_coeff_set($p, $cx2, $cy2, $cxy, $cx, $cy, $c) {
  $p = $p | 0;
  $cx2 = $cx2 | 0;
  $cy2 = $cy2 | 0;
  $cxy = $cxy | 0;
  $cx = $cx | 0;
  $cy = $cy | 0;
  $c = $c | 0;
  var $1 = 0, $4 = 0, $7 = 0, $10 = 0, $13 = 0, $16 = 0;
  $1 = $p | 0;
  _element_init352($1, HEAP32[$cx2 >> 2] | 0);
  $4 = $p + 8 | 0;
  _element_init352($4, HEAP32[$cy2 >> 2] | 0);
  $7 = $p + 16 | 0;
  _element_init352($7, HEAP32[$cxy >> 2] | 0);
  $10 = $p + 24 | 0;
  _element_init352($10, HEAP32[$cx >> 2] | 0);
  $13 = $p + 32 | 0;
  _element_init352($13, HEAP32[$cy >> 2] | 0);
  $16 = $p + 40 | 0;
  _element_init352($16, HEAP32[$c >> 2] | 0);
  _element_set353($1, $cx2);
  _element_set353($4, $cy2);
  _element_set353($7, $cxy);
  _element_set353($10, $cx);
  _element_set353($13, $cy);
  _element_set353($16, $c);
  return;
}
function _pp_coeff_set($p, $a, $b, $c) {
  $p = $p | 0;
  $a = $a | 0;
  $b = $b | 0;
  $c = $c | 0;
  var $1 = 0, $4 = 0, $7 = 0;
  $1 = $p | 0;
  _element_init352($1, HEAP32[$a >> 2] | 0);
  $4 = $p + 8 | 0;
  _element_init352($4, HEAP32[$b >> 2] | 0);
  $7 = $p + 16 | 0;
  _element_init352($7, HEAP32[$c >> 2] | 0);
  _element_set353($1, $a);
  _element_set353($4, $b);
  _element_set353($7, $c);
  return;
}
function _compute_abc_tangent_proj($a, $b, $c, $Vx, $Vy, $z, $z2, $e0) {
  $a = $a | 0;
  $b = $b | 0;
  $c = $c | 0;
  $Vx = $Vx | 0;
  $Vy = $Vy | 0;
  $z = $z | 0;
  $z2 = $z2 | 0;
  $e0 = $e0 | 0;
  _element_square355($a, $z2);
  _element_square355($b, $Vx);
  _element_double368($e0, $b);
  _element_add367($b, $e0, $b);
  _element_add367($a, $a, $b);
  _element_neg357($a, $a);
  _element_double368($e0, $Vy);
  _element_mul356($b, $e0, $z2);
  _element_mul356($b, $b, $z);
  _element_mul356($c, $Vx, $a);
  _element_mul356($a, $a, $z2);
  _element_mul356($e0, $e0, $Vy);
  _element_add367($c, $c, $e0);
  _element_neg357($c, $c);
  return;
}
function _compute_abc_line_proj($a, $b, $c, $Vx, $Vy, $z, $z2, $V1x, $V1y, $e0) {
  $a = $a | 0;
  $b = $b | 0;
  $c = $c | 0;
  $Vx = $Vx | 0;
  $Vy = $Vy | 0;
  $z = $z | 0;
  $z2 = $z2 | 0;
  $V1x = $V1x | 0;
  $V1y = $V1y | 0;
  $e0 = $e0 | 0;
  _element_mul356($c, $z, $z2);
  _element_mul356($e0, $V1y, $c);
  _element_sub369($a, $Vy, $e0);
  _element_mul356($b, $c, $V1x);
  _element_mul356($e0, $Vx, $z);
  _element_sub369($b, $b, $e0);
  _element_mul356($c, $b, $V1y);
  _element_mul356($e0, $a, $V1x);
  _element_add367($c, $c, $e0);
  _element_neg357($c, $c);
  return;
}
function _a_clear($data) {
  $data = $data | 0;
  ___gmpz_clear($data + 16 | 0);
  ___gmpz_clear($data + 28 | 0);
  ___gmpz_clear($data + 40 | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023]($data);
  return;
}
function _a_init_pairing($pairing, $data) {
  $pairing = $pairing | 0;
  $data = $data | 0;
  var $a = 0, $b = 0, $2 = 0, $18 = 0, $25 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $38 = 0, $41 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $a = __stackBase__ | 0;
  $b = __stackBase__ + 8 | 0;
  $2 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](660) | 0;
  HEAP32[$pairing + 504 >> 2] = $2;
  HEAP32[$2 + 648 >> 2] = HEAP32[$data >> 2] | 0;
  HEAP32[$2 + 652 >> 2] = HEAP32[$data + 4 >> 2] | 0;
  HEAP32[$2 + 656 >> 2] = HEAP32[$data + 8 >> 2] | 0;
  $18 = $pairing | 0;
  ___gmpz_init($18);
  ___gmpz_set($18, $data + 16 | 0);
  _field_init_fp($pairing + 12 | 0, $18);
  HEAP32[$pairing + 468 >> 2] = 206;
  HEAP32[$pairing + 472 >> 2] = 686;
  $25 = $2;
  _field_init_fp($2, $data + 28 | 0);
  $29 = $a | 0;
  _element_init352($29, $25);
  $30 = $b | 0;
  _element_init352($30, $25);
  _element_set1354($29);
  _element_set0365($30);
  $31 = $2 + 432 | 0;
  $32 = $31;
  $34 = $data + 40 | 0;
  _field_init_curve_ab($31, $a, $b, $18, $34);
  _element_clear359($29);
  _element_clear359($30);
  $38 = $2 + 216 | 0;
  _field_init_fi($38, $2);
  $41 = $pairing + 452 | 0;
  ___gmpz_init($41);
  ___gmpz_set($41, $34);
  HEAP32[$pairing + 228 >> 2] = $32;
  HEAP32[$pairing + 232 >> 2] = $32;
  HEAP32[$pairing + 464 >> 2] = 582;
  _pairing_GT_init($pairing, $38);
  HEAP32[$pairing + 496 >> 2] = 534;
  HEAP32[$pairing + 480 >> 2] = 262;
  HEAP32[$pairing + 500 >> 2] = 626;
  HEAP32[$pairing + 484 >> 2] = 448;
  HEAP32[$pairing + 488 >> 2] = 798;
  HEAP32[$pairing + 492 >> 2] = 672;
  STACKTOP = __stackBase__;
  return;
}
function _a_out_str($stream, $data) {
  $stream = $stream | 0;
  $data = $data | 0;
  _param_out_type($stream, 7880);
  _param_out_mpz($stream, 6352, $data + 28 | 0);
  _param_out_mpz($stream, 7032, $data + 40 | 0);
  _param_out_mpz($stream, 8296, $data + 16 | 0);
  _param_out_int($stream, 6360, HEAP32[$data >> 2] | 0);
  _param_out_int($stream, 5944, HEAP32[$data + 4 >> 2] | 0);
  _param_out_int($stream, 5592, HEAP32[$data + 8 >> 2] | 0);
  _param_out_int($stream, 5368, HEAP32[$data + 12 >> 2] | 0);
  return;
}
function _a_pairing_proj($out, $in1, $in2, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $pairing = $pairing | 0;
  var $V = 0, $V1 = 0, $z = 0, $z2 = 0, $f = 0, $f0 = 0, $f1 = 0, $a = 0, $b = 0, $c = 0, $e0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $i_0107 = 0, $38 = 0, $exitcond111 = 0, $i_0_lcssa = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $i_1106 = 0, $50 = 0, $exitcond = 0, $51 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 88 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $V = __stackBase__ | 0;
    $V1 = __stackBase__ + 8 | 0;
    $z = __stackBase__ + 16 | 0;
    $z2 = __stackBase__ + 24 | 0;
    $f = __stackBase__ + 32 | 0;
    $f0 = __stackBase__ + 40 | 0;
    $f1 = __stackBase__ + 48 | 0;
    $a = __stackBase__ + 56 | 0;
    $b = __stackBase__ + 64 | 0;
    $c = __stackBase__ + 72 | 0;
    $e0 = __stackBase__ + 80 | 0;
    $1 = $pairing + 504 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $a | 0;
    $4 = $b | 0;
    $5 = $c | 0;
    $6 = $in2;
    $7 = _curve_x_coord($6) | 0;
    $8 = $7;
    $9 = _curve_y_coord($6) | 0;
    $10 = $9;
    $11 = $V | 0;
    $12 = $2 + 432 | 0;
    $13 = $12;
    _element_init352($11, $13);
    $14 = $V1 | 0;
    _element_init352($14, $13);
    _element_set353($11, $in1);
    $15 = $V;
    $16 = _curve_x_coord($15) | 0;
    $17 = $16;
    $18 = _curve_y_coord($15) | 0;
    $19 = $18;
    $20 = $V1;
    $21 = _curve_x_coord($20) | 0;
    $22 = $21;
    $23 = _curve_y_coord($20) | 0;
    $24 = $23;
    $25 = $f | 0;
    $26 = $2 + 216 | 0;
    $27 = $26;
    _element_init352($25, $27);
    $28 = $f0 | 0;
    _element_init352($28, $27);
    $29 = $f1 | 0;
    _element_init352($29, $27);
    _element_set1354($25);
    $30 = $2;
    _element_init352($3, $30);
    _element_init352($4, $30);
    _element_init352($5, $30);
    $31 = $e0 | 0;
    _element_init352($31, $30);
    $32 = $z | 0;
    _element_init352($32, $30);
    $33 = $z2 | 0;
    _element_init352($33, $30);
    _element_set1354($32);
    _element_set1354($33);
    $34 = $2 + 652 | 0;
    $35 = $34;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = ($36 | 0) > 0;
    if ($37) {
      $i_0107 = 0;
      label = 2;
      break;
    } else {
      $i_0_lcssa = 0;
      label = 3;
      break;
    }
   case 2:
    _element_square355($25, $25);
    _compute_abc_tangent_proj($3, $4, $5, $17, $19, $32, $33, $31);
    _a_miller_evalfn($28, $3, $4, $5, $8, $10);
    _element_mul356($25, $25, $28);
    _element_square355($31, $17);
    _element_double368($3, $31);
    _element_add367($31, $3, $31);
    _element_square355($3, $33);
    _element_add367($31, $31, $3);
    _element_mul356($32, $19, $32);
    _element_double368($32, $32);
    _element_square355($33, $32);
    _element_square355($4, $19);
    _element_mul356($3, $17, $4);
    _element_double368($3, $3);
    _element_double368($3, $3);
    _element_double368($5, $3);
    _element_square355($17, $31);
    _element_sub369($17, $17, $5);
    _element_square355($4, $4);
    _element_double368($4, $4);
    _element_double368($4, $4);
    _element_double368($4, $4);
    _element_sub369($3, $3, $17);
    _element_mul356($31, $31, $3);
    _element_sub369($19, $31, $4);
    $38 = $i_0107 + 1 | 0;
    $exitcond111 = ($38 | 0) == ($36 | 0);
    if ($exitcond111) {
      $i_0_lcssa = $36;
      label = 3;
      break;
    } else {
      $i_0107 = $38;
      label = 2;
      break;
    }
   case 3:
    _element_invert358($32, $32);
    _element_square355($31, $32);
    _element_mul356($17, $17, $31);
    _element_mul356($31, $31, $32);
    _element_mul356($19, $19, $31);
    _element_set1354($32);
    _element_set1354($33);
    $39 = $2 + 656 | 0;
    $40 = $39;
    $41 = HEAP32[$40 >> 2] | 0;
    $42 = ($41 | 0) < 0;
    if ($42) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _element_neg357($14, $11);
    _element_invert358($29, $25);
    label = 6;
    break;
   case 5:
    _element_set353($14, $11);
    _element_set353($29, $25);
    label = 6;
    break;
   case 6:
    $46 = $2 + 648 | 0;
    $47 = $46;
    $48 = HEAP32[$47 >> 2] | 0;
    $49 = ($i_0_lcssa | 0) < ($48 | 0);
    if ($49) {
      $i_1106 = $i_0_lcssa;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _element_square355($25, $25);
    _compute_abc_tangent_proj($3, $4, $5, $17, $19, $32, $33, $31);
    _a_miller_evalfn($28, $3, $4, $5, $8, $10);
    _element_mul356($25, $25, $28);
    _element_square355($31, $17);
    _element_double368($3, $31);
    _element_add367($31, $3, $31);
    _element_square355($3, $33);
    _element_add367($31, $31, $3);
    _element_mul356($32, $19, $32);
    _element_double368($32, $32);
    _element_square355($33, $32);
    _element_square355($4, $19);
    _element_mul356($3, $17, $4);
    _element_double368($3, $3);
    _element_double368($3, $3);
    _element_double368($5, $3);
    _element_square355($17, $31);
    _element_sub369($17, $17, $5);
    _element_square355($4, $4);
    _element_double368($4, $4);
    _element_double368($4, $4);
    _element_double368($4, $4);
    _element_sub369($3, $3, $17);
    _element_mul356($31, $31, $3);
    _element_sub369($19, $31, $4);
    $50 = $i_1106 + 1 | 0;
    $exitcond = ($50 | 0) == ($48 | 0);
    if ($exitcond) {
      label = 8;
      break;
    } else {
      $i_1106 = $50;
      label = 7;
      break;
    }
   case 8:
    _element_mul356($25, $25, $29);
    _element_invert358($32, $32);
    _element_square355($31, $32);
    _element_mul356($17, $17, $31);
    _element_mul356($31, $31, $32);
    _element_mul356($19, $19, $31);
    _element_set1354($32);
    _element_set1354($33);
    _compute_abc_line($3, $4, $5, $17, $19, $22, $24, $31);
    _a_miller_evalfn($28, $3, $4, $5, $8, $10);
    _element_mul356($25, $25, $28);
    $51 = $pairing + 452 | 0;
    _a_tateexp($out, $25, $28, $51);
    _element_clear359($25);
    _element_clear359($28);
    _element_clear359($29);
    _element_clear359($32);
    _element_clear359($33);
    _element_clear359($11);
    _element_clear359($14);
    _element_clear359($3);
    _element_clear359($4);
    _element_clear359($5);
    _element_clear359($31);
    STACKTOP = __stackBase__;
    return;
  }
}
function _a_pairing_clear($pairing) {
  $pairing = $pairing | 0;
  var $4 = 0;
  _field_clear($pairing + 236 | 0);
  $4 = HEAP32[$pairing + 504 >> 2] | 0;
  _field_clear($4 + 432 | 0);
  _field_clear($4);
  _field_clear($4 + 216 | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023]($4);
  ___gmpz_clear($pairing | 0);
  ___gmpz_clear($pairing + 452 | 0);
  _field_clear($pairing + 12 | 0);
  return;
}
function _a_pairing_option_set($pairing, $key, $value) {
  $pairing = $pairing | 0;
  $key = $key | 0;
  $value = $value | 0;
  var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _strcmp($key | 0, 8856) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 8;
      break;
    }
   case 2:
    $4 = _strcmp($value | 0, 8440) | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $7 = $pairing + 468 | 0;
    HEAP32[$7 >> 2] = 206;
    $8 = $pairing + 484 | 0;
    HEAP32[$8 >> 2] = 448;
    $9 = $pairing + 488 | 0;
    HEAP32[$9 >> 2] = 798;
    $10 = $pairing + 492 | 0;
    HEAP32[$10 >> 2] = 672;
    label = 8;
    break;
   case 4:
    $12 = _strcmp($value | 0, 8304) | 0;
    $13 = ($12 | 0) == 0;
    if ($13) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $15 = $pairing + 468 | 0;
    HEAP32[$15 >> 2] = 318;
    $16 = $pairing + 484 | 0;
    HEAP32[$16 >> 2] = 448;
    $17 = $pairing + 488 | 0;
    HEAP32[$17 >> 2] = 798;
    $18 = $pairing + 492 | 0;
    HEAP32[$18 >> 2] = 672;
    label = 8;
    break;
   case 6:
    $20 = _strcmp($value | 0, 8096) | 0;
    $21 = ($20 | 0) == 0;
    if ($21) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $23 = $pairing + 468 | 0;
    HEAP32[$23 >> 2] = 574;
    $24 = $pairing + 484 | 0;
    HEAP32[$24 >> 2] = 122;
    $25 = $pairing + 488 | 0;
    HEAP32[$25 >> 2] = 676;
    $26 = $pairing + 492 | 0;
    HEAP32[$26 >> 2] = 360;
    label = 8;
    break;
   case 8:
    return;
  }
}
function _a_pairing_pp_init($p, $in1, $pairing) {
  $p = $p | 0;
  $in1 = $in1 | 0;
  $pairing = $pairing | 0;
  var $V = 0, $V1 = 0, $a = 0, $b = 0, $c = 0, $e0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $i_025 = 0, $35 = 0, $36 = 0, $exitcond30 = 0, $i_0_lcssa = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $44 = 0, $45 = 0, $i_124 = 0, $46 = 0, $47 = 0, $exitcond = 0, $i_1_lcssa = 0, $48 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $V = __stackBase__ | 0;
    $V1 = __stackBase__ + 8 | 0;
    $a = __stackBase__ + 16 | 0;
    $b = __stackBase__ + 24 | 0;
    $c = __stackBase__ + 32 | 0;
    $e0 = __stackBase__ + 40 | 0;
    $1 = $pairing + 504 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = HEAP32[230] | 0;
    $4 = $2 + 648 | 0;
    $5 = $4;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6 * 24 & -1;
    $8 = $7 + 24 | 0;
    $9 = FUNCTION_TABLE_ii[$3 & 1023]($8) | 0;
    $10 = $p + 4 | 0;
    HEAP32[$10 >> 2] = $9;
    $11 = $9;
    $12 = $V | 0;
    $13 = $2 + 432 | 0;
    $14 = $13;
    _element_init352($12, $14);
    $15 = $V1 | 0;
    _element_init352($15, $14);
    _element_set353($12, $in1);
    $16 = $V;
    $17 = _curve_x_coord($16) | 0;
    $18 = $17;
    $19 = _curve_y_coord($16) | 0;
    $20 = $19;
    $21 = $V1;
    $22 = _curve_x_coord($21) | 0;
    $23 = $22;
    $24 = _curve_y_coord($21) | 0;
    $25 = $24;
    $26 = $e0 | 0;
    $27 = $2;
    _element_init352($26, $27);
    $28 = $a | 0;
    _element_init352($28, $27);
    $29 = $b | 0;
    _element_init352($29, $27);
    $30 = $c | 0;
    _element_init352($30, $27);
    $31 = $2 + 652 | 0;
    $32 = $31;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = ($33 | 0) > 0;
    if ($34) {
      $i_025 = 0;
      label = 2;
      break;
    } else {
      $i_0_lcssa = 0;
      label = 3;
      break;
    }
   case 2:
    _compute_abc_tangent($28, $29, $30, $18, $20, $26);
    $35 = $11 + ($i_025 * 24 & -1) | 0;
    _pp_coeff_set($35, $28, $29, $30);
    _element_double368($12, $12);
    $36 = $i_025 + 1 | 0;
    $exitcond30 = ($36 | 0) == ($33 | 0);
    if ($exitcond30) {
      $i_0_lcssa = $33;
      label = 3;
      break;
    } else {
      $i_025 = $36;
      label = 2;
      break;
    }
   case 3:
    $37 = $2 + 656 | 0;
    $38 = $37;
    $39 = HEAP32[$38 >> 2] | 0;
    $40 = ($39 | 0) < 0;
    if ($40) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _element_neg357($15, $12);
    label = 6;
    break;
   case 5:
    _element_set353($15, $12);
    label = 6;
    break;
   case 6:
    $44 = HEAP32[$5 >> 2] | 0;
    $45 = ($i_0_lcssa | 0) < ($44 | 0);
    if ($45) {
      $i_124 = $i_0_lcssa;
      label = 7;
      break;
    } else {
      $i_1_lcssa = $i_0_lcssa;
      label = 8;
      break;
    }
   case 7:
    _compute_abc_tangent($28, $29, $30, $18, $20, $26);
    $46 = $11 + ($i_124 * 24 & -1) | 0;
    _pp_coeff_set($46, $28, $29, $30);
    _element_double368($12, $12);
    $47 = $i_124 + 1 | 0;
    $exitcond = ($47 | 0) == ($44 | 0);
    if ($exitcond) {
      $i_1_lcssa = $44;
      label = 8;
      break;
    } else {
      $i_124 = $47;
      label = 7;
      break;
    }
   case 8:
    _compute_abc_line($28, $29, $30, $18, $20, $23, $25, $26);
    $48 = $11 + ($i_1_lcssa * 24 & -1) | 0;
    _pp_coeff_set($48, $28, $29, $30);
    _element_clear359($26);
    _element_clear359($28);
    _element_clear359($29);
    _element_clear359($30);
    _element_clear359($12);
    _element_clear359($15);
    STACKTOP = __stackBase__;
    return;
  }
}
function _a_pairing_pp_clear($p) {
  $p = $p | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $i_07 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $exitcond = 0, $19 = 0, $20 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 504 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $p + 4 | 0;
    $6 = HEAP32[$5 >> 2] | 0;
    $7 = $6;
    $8 = $4 + 648 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $10 + 1 | 0;
    $12 = ($11 | 0) > 0;
    if ($12) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $13 = $10 + 1 | 0;
    $i_07 = 0;
    label = 3;
    break;
   case 3:
    $15 = $7 + ($i_07 * 24 & -1) | 0;
    _element_clear359($15);
    $16 = $7 + ($i_07 * 24 & -1) + 8 | 0;
    _element_clear359($16);
    $17 = $7 + ($i_07 * 24 & -1) + 16 | 0;
    _element_clear359($17);
    $18 = $i_07 + 1 | 0;
    $exitcond = ($18 | 0) == ($13 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_07 = $18;
      label = 3;
      break;
    }
   case 4:
    $19 = HEAP32[232] | 0;
    $20 = HEAP32[$5 >> 2] | 0;
    FUNCTION_TABLE_vi[$19 & 1023]($20);
    return;
  }
}
function _a_pairing_pp_apply($out, $in2, $p) {
  $out = $out | 0;
  $in2 = $in2 | 0;
  $p = $p | 0;
  var $f = 0, $f0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $i_032 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $exitcond37 = 0, $i_0_lcssa = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $i_131 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $exitcond = 0, $i_1_lcssa = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $f = __stackBase__ | 0;
    $f0 = __stackBase__ + 8 | 0;
    $1 = $in2;
    $2 = _curve_x_coord($1) | 0;
    $3 = $2;
    $4 = _curve_y_coord($1) | 0;
    $5 = $4;
    $6 = $p | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $7 + 504 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $p + 4 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $11;
    $13 = $f | 0;
    $14 = $9 + 216 | 0;
    $15 = $14;
    _element_init352($13, $15);
    $16 = $f0 | 0;
    _element_init352($16, $15);
    _element_set1354($13);
    $17 = $9 + 652 | 0;
    $18 = $17;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = ($19 | 0) > 0;
    if ($20) {
      $i_032 = 0;
      label = 2;
      break;
    } else {
      $i_0_lcssa = 0;
      label = 3;
      break;
    }
   case 2:
    _element_square355($13, $13);
    $21 = $12 + ($i_032 * 24 & -1) | 0;
    $22 = $12 + ($i_032 * 24 & -1) + 8 | 0;
    $23 = $12 + ($i_032 * 24 & -1) + 16 | 0;
    _a_miller_evalfn($16, $21, $22, $23, $3, $5);
    _element_mul356($13, $13, $16);
    $24 = $i_032 + 1 | 0;
    $exitcond37 = ($24 | 0) == ($19 | 0);
    if ($exitcond37) {
      $i_0_lcssa = $19;
      label = 3;
      break;
    } else {
      $i_032 = $24;
      label = 2;
      break;
    }
   case 3:
    $25 = $9 + 656 | 0;
    $26 = $25;
    $27 = HEAP32[$26 >> 2] | 0;
    $28 = ($27 | 0) < 0;
    if ($28) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _element_invert358($out, $13);
    label = 6;
    break;
   case 5:
    _element_set353($out, $13);
    label = 6;
    break;
   case 6:
    $32 = $9 + 648 | 0;
    $33 = $32;
    $34 = HEAP32[$33 >> 2] | 0;
    $35 = ($i_0_lcssa | 0) < ($34 | 0);
    if ($35) {
      $i_131 = $i_0_lcssa;
      label = 7;
      break;
    } else {
      $i_1_lcssa = $i_0_lcssa;
      label = 8;
      break;
    }
   case 7:
    _element_square355($13, $13);
    $36 = $12 + ($i_131 * 24 & -1) | 0;
    $37 = $12 + ($i_131 * 24 & -1) + 8 | 0;
    $38 = $12 + ($i_131 * 24 & -1) + 16 | 0;
    _a_miller_evalfn($16, $36, $37, $38, $3, $5);
    _element_mul356($13, $13, $16);
    $39 = $i_131 + 1 | 0;
    $exitcond = ($39 | 0) == ($34 | 0);
    if ($exitcond) {
      $i_1_lcssa = $34;
      label = 8;
      break;
    } else {
      $i_131 = $39;
      label = 7;
      break;
    }
   case 8:
    _element_mul356($13, $13, $out);
    $40 = $12 + ($i_1_lcssa * 24 & -1) | 0;
    $41 = $12 + ($i_1_lcssa * 24 & -1) + 8 | 0;
    $42 = $12 + ($i_1_lcssa * 24 & -1) + 16 | 0;
    _a_miller_evalfn($16, $40, $41, $42, $3, $5);
    _element_mul356($13, $13, $16);
    $43 = HEAP32[$6 >> 2] | 0;
    $44 = $43 + 452 | 0;
    _a_tateexp($out, $13, $16, $44);
    _element_clear359($13);
    _element_clear359($16);
    STACKTOP = __stackBase__;
    return;
  }
}
function _a_pairing_affine($out, $in1, $in2, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $pairing = $pairing | 0;
  var $V = 0, $V1 = 0, $f = 0, $f0 = 0, $f1 = 0, $a = 0, $b = 0, $c = 0, $e0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $i_030 = 0, $36 = 0, $exitcond34 = 0, $i_0_lcssa = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $i_129 = 0, $48 = 0, $exitcond = 0, $49 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 72 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $V = __stackBase__ | 0;
    $V1 = __stackBase__ + 8 | 0;
    $f = __stackBase__ + 16 | 0;
    $f0 = __stackBase__ + 24 | 0;
    $f1 = __stackBase__ + 32 | 0;
    $a = __stackBase__ + 40 | 0;
    $b = __stackBase__ + 48 | 0;
    $c = __stackBase__ + 56 | 0;
    $e0 = __stackBase__ + 64 | 0;
    $1 = $pairing + 504 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $in2;
    $4 = _curve_x_coord($3) | 0;
    $5 = $4;
    $6 = _curve_y_coord($3) | 0;
    $7 = $6;
    $8 = $V | 0;
    $9 = $2 + 432 | 0;
    $10 = $9;
    _element_init352($8, $10);
    $11 = $V1 | 0;
    _element_init352($11, $10);
    $12 = $V;
    $13 = _curve_x_coord($12) | 0;
    $14 = $13;
    $15 = _curve_y_coord($12) | 0;
    $16 = $15;
    $17 = $V1;
    $18 = _curve_x_coord($17) | 0;
    $19 = $18;
    $20 = _curve_y_coord($17) | 0;
    $21 = $20;
    _element_set353($8, $in1);
    $22 = $f | 0;
    $23 = $2 + 216 | 0;
    $24 = $23;
    _element_init352($22, $24);
    $25 = $f0 | 0;
    _element_init352($25, $24);
    $26 = $f1 | 0;
    _element_init352($26, $24);
    _element_set1354($22);
    $27 = $a | 0;
    $28 = $2;
    _element_init352($27, $28);
    $29 = $b | 0;
    _element_init352($29, $28);
    $30 = $c | 0;
    _element_init352($30, $28);
    $31 = $e0 | 0;
    _element_init352($31, $28);
    $32 = $2 + 652 | 0;
    $33 = $32;
    $34 = HEAP32[$33 >> 2] | 0;
    $35 = ($34 | 0) > 0;
    if ($35) {
      $i_030 = 0;
      label = 2;
      break;
    } else {
      $i_0_lcssa = 0;
      label = 3;
      break;
    }
   case 2:
    _element_square355($22, $22);
    _compute_abc_tangent($27, $29, $30, $14, $16, $31);
    _a_miller_evalfn($25, $27, $29, $30, $5, $7);
    _element_mul356($22, $22, $25);
    _element_double368($8, $8);
    $36 = $i_030 + 1 | 0;
    $exitcond34 = ($36 | 0) == ($34 | 0);
    if ($exitcond34) {
      $i_0_lcssa = $34;
      label = 3;
      break;
    } else {
      $i_030 = $36;
      label = 2;
      break;
    }
   case 3:
    $37 = $2 + 656 | 0;
    $38 = $37;
    $39 = HEAP32[$38 >> 2] | 0;
    $40 = ($39 | 0) < 0;
    if ($40) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _element_neg357($11, $8);
    _element_invert358($26, $22);
    label = 6;
    break;
   case 5:
    _element_set353($11, $8);
    _element_set353($26, $22);
    label = 6;
    break;
   case 6:
    $44 = $2 + 648 | 0;
    $45 = $44;
    $46 = HEAP32[$45 >> 2] | 0;
    $47 = ($i_0_lcssa | 0) < ($46 | 0);
    if ($47) {
      $i_129 = $i_0_lcssa;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _element_square355($22, $22);
    _compute_abc_tangent($27, $29, $30, $14, $16, $31);
    _a_miller_evalfn($25, $27, $29, $30, $5, $7);
    _element_mul356($22, $22, $25);
    _element_double368($8, $8);
    $48 = $i_129 + 1 | 0;
    $exitcond = ($48 | 0) == ($46 | 0);
    if ($exitcond) {
      label = 8;
      break;
    } else {
      $i_129 = $48;
      label = 7;
      break;
    }
   case 8:
    _element_mul356($22, $22, $26);
    _compute_abc_line($27, $29, $30, $14, $16, $19, $21, $31);
    _a_miller_evalfn($25, $27, $29, $30, $5, $7);
    _element_mul356($22, $22, $25);
    $49 = $pairing + 452 | 0;
    _a_tateexp($out, $22, $25, $49);
    _element_clear359($22);
    _element_clear359($25);
    _element_clear359($26);
    _element_clear359($8);
    _element_clear359($11);
    _element_clear359($27);
    _element_clear359($29);
    _element_clear359($30);
    _element_clear359($31);
    STACKTOP = __stackBase__;
    return;
  }
}
function _lucas_odd($out, $in, $temp, $cofactor) {
  $out = $out | 0;
  $in = $in | 0;
  $temp = $temp | 0;
  $cofactor = $cofactor | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $j_068 = 0, $8 = 0, $j_069 = 0, $9 = 0, $10 = 0, $j_0 = 0, $13 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _element_x($in) | 0;
    $2 = _element_y($in) | 0;
    $3 = _element_x($out) | 0;
    $4 = _element_y($out) | 0;
    $5 = _element_x($temp) | 0;
    $6 = _element_y($temp) | 0;
    _element_set_si370($5);
    _element_double368($6, $1);
    _element_set353($3, $5);
    _element_set353($4, $6);
    $7 = ___gmpz_sizeinbase($cofactor, 2) | 0;
    $j_068 = $7 - 1 | 0;
    $8 = ($j_068 | 0) == 0;
    if ($8) {
      label = 2;
      break;
    } else {
      $j_069 = $j_068;
      label = 3;
      break;
    }
   case 2:
    _element_mul356($4, $3, $4);
    _element_sub369($4, $4, $6);
    _element_square355($3, $3);
    _element_sub369($3, $3, $5);
    _element_mul356($1, $3, $6);
    _element_double368($4, $4);
    _element_sub369($4, $4, $1);
    _element_square355($6, $6);
    _element_sub369($6, $6, $5);
    _element_sub369($6, $6, $5);
    _element_div371($4, $4, $6);
    _element_halve($3, $3);
    _element_mul356($4, $4, $2);
    return;
   case 3:
    $9 = ___gmpz_tstbit($cofactor, $j_069) | 0;
    $10 = ($9 | 0) == 0;
    if ($10) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _element_mul356($3, $3, $4);
    _element_sub369($3, $3, $6);
    _element_square355($4, $4);
    _element_sub369($4, $4, $5);
    label = 6;
    break;
   case 5:
    _element_mul356($4, $3, $4);
    _element_sub369($4, $4, $6);
    _element_square355($3, $3);
    _element_sub369($3, $3, $5);
    label = 6;
    break;
   case 6:
    $j_0 = $j_069 - 1 | 0;
    $13 = ($j_0 | 0) == 0;
    if ($13) {
      label = 2;
      break;
    } else {
      $j_069 = $j_0;
      label = 3;
      break;
    }
  }
}
function _element_set_si370($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 76 >> 2] & 1023]($e, 2);
  return;
}
function _element_div371($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 92 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_halve($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 108 >> 2] & 1023]($n, $a);
  return;
}
function _cc_pairings_affine($out, $in1, $in2, $n_prod, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $n_prod = $n_prod | 0;
  $pairing = $pairing | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $i_036 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $exitcond40 = 0, $25 = 0, $26 = 0, $i_135 = 0, $27 = 0, $28 = 0, $29 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $n_prod << 3;
    $2 = _malloc($1) | 0;
    $3 = $2;
    $4 = _malloc($1) | 0;
    $5 = $4;
    $6 = $pairing + 504 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($n_prod | 0) > 0;
    if ($8) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $9 = $7 + 432 | 0;
    $10 = $9;
    $11 = $7 + 1296 | 0;
    $12 = $11;
    $13 = $7 + 1304 | 0;
    $14 = $13;
    $i_036 = 0;
    label = 3;
    break;
   case 3:
    $16 = $3 + ($i_036 << 3) | 0;
    _element_init388($16, $10);
    $17 = $5 + ($i_036 << 3) | 0;
    _element_init388($17, $10);
    $18 = $in2 + ($i_036 << 3) | 0;
    $19 = $18;
    $20 = _curve_x_coord($19) | 0;
    $21 = $20;
    _element_mul389($16, $21, $12);
    $22 = _curve_y_coord($19) | 0;
    $23 = $22;
    _element_mul389($17, $23, $14);
    $24 = $i_036 + 1 | 0;
    $exitcond40 = ($24 | 0) == ($n_prod | 0);
    if ($exitcond40) {
      label = 4;
      break;
    } else {
      $i_036 = $24;
      label = 3;
      break;
    }
   case 4:
    $25 = $pairing | 0;
    _cc_millers_no_denom_affine($out, $25, $in1, $3, $5, $n_prod);
    _cc_tatepower($out, $out, $pairing);
    $26 = ($n_prod | 0) > 0;
    if ($26) {
      $i_135 = 0;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $27 = $3 + ($i_135 << 3) | 0;
    _element_clear390($27);
    $28 = $5 + ($i_135 << 3) | 0;
    _element_clear390($28);
    $29 = $i_135 + 1 | 0;
    $exitcond = ($29 | 0) == ($n_prod | 0);
    if ($exitcond) {
      label = 6;
      break;
    } else {
      $i_135 = $29;
      label = 5;
      break;
    }
   case 6:
    _free($2);
    _free($4);
    return;
  }
}
function _element_init388($e, $f) {
  $e = $e | 0;
  $f = $f | 0;
  HEAP32[$e >> 2] = $f;
  FUNCTION_TABLE_vi[HEAP32[$f + 4 >> 2] & 1023]($e);
  return;
}
function _element_mul389($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 48 >> 2] & 1023]($n, $a, $b);
  return;
}
function _cc_millers_no_denom_affine($res, $q, $P, $Qx, $Qy, $n_prod) {
  $res = $res | 0;
  $q = $q | 0;
  $P = $P | 0;
  $Qx = $Qx | 0;
  $Qy = $Qy | 0;
  $n_prod = $n_prod | 0;
  var $v = 0, $a = 0, $b = 0, $c = 0, $t0 = 0, $e0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $i_078 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $exitcond84 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $m_0 = 0, $i_171 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $exitcond82 = 0, $45 = 0, $47 = 0, $48 = 0, $i_275 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $exitcond83 = 0, $65 = 0, $67 = 0, $i_370 = 0, $68 = 0, $69 = 0, $exitcond = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 48 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $v = __stackBase__ | 0;
    $a = __stackBase__ + 8 | 0;
    $b = __stackBase__ + 16 | 0;
    $c = __stackBase__ + 24 | 0;
    $t0 = __stackBase__ + 32 | 0;
    $e0 = __stackBase__ + 40 | 0;
    $1 = $P;
    $2 = _curve_a_coeff($1) | 0;
    $3 = $2;
    $4 = $n_prod << 3;
    $5 = _malloc($4) | 0;
    $6 = $5;
    $7 = _curve_x_coord($1) | 0;
    $8 = $a | 0;
    $9 = $7;
    $10 = HEAP32[$9 >> 2] | 0;
    _element_init388($8, $10);
    $11 = $b | 0;
    $12 = $a | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    _element_init388($11, $13);
    $14 = $c | 0;
    $15 = HEAP32[$12 >> 2] | 0;
    _element_init388($14, $15);
    $16 = $t0 | 0;
    $17 = HEAP32[$12 >> 2] | 0;
    _element_init388($16, $17);
    $18 = $e0 | 0;
    $19 = $res | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    _element_init388($18, $20);
    $21 = $v | 0;
    $22 = HEAP32[$19 >> 2] | 0;
    _element_init388($21, $22);
    $23 = ($n_prod | 0) > 0;
    if ($23) {
      $i_078 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $24 = $6 + ($i_078 << 3) | 0;
    $25 = $P + ($i_078 << 3) | 0;
    $26 = $25 | 0;
    $27 = HEAP32[$26 >> 2] | 0;
    _element_init388($24, $27);
    _element_set408($24, $25);
    $28 = $i_078 + 1 | 0;
    $exitcond84 = ($28 | 0) == ($n_prod | 0);
    if ($exitcond84) {
      label = 3;
      break;
    } else {
      $i_078 = $28;
      label = 2;
      break;
    }
   case 3:
    _element_set1400($21);
    $29 = ___gmpz_sizeinbase($q, 2) | 0;
    $30 = $29 - 2 | 0;
    $31 = ($n_prod | 0) > 0;
    $32 = $5;
    $33 = ($n_prod | 0) > 0;
    $34 = $P;
    $m_0 = $30;
    label = 4;
    break;
   case 4:
    if ($31) {
      $i_171 = 0;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $36 = $6 + ($i_171 << 3) | 0;
    $37 = $36;
    $38 = _curve_x_coord($37) | 0;
    $39 = $38;
    $40 = _curve_y_coord($37) | 0;
    $41 = $40;
    _element_square402($8, $39);
    _element_mul_si412($8, $8, 3);
    _element_add407($8, $8, $3);
    _element_neg410($8, $8);
    _element_add407($11, $41, $41);
    _element_mul389($16, $11, $41);
    _element_mul389($14, $8, $39);
    _element_add407($14, $14, $16);
    _element_neg410($14, $14);
    $42 = $Qx + ($i_171 << 3) | 0;
    $43 = $Qy + ($i_171 << 3) | 0;
    _d_miller_evalfn($18, $8, $11, $14, $42, $43);
    _element_mul389($21, $21, $18);
    $44 = $i_171 + 1 | 0;
    $exitcond82 = ($44 | 0) == ($n_prod | 0);
    if ($exitcond82) {
      label = 6;
      break;
    } else {
      $i_171 = $44;
      label = 5;
      break;
    }
   case 6:
    $45 = ($m_0 | 0) == 0;
    if ($45) {
      label = 12;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    _element_multi_double($32, $32, $n_prod);
    $47 = ___gmpz_tstbit($q, $m_0) | 0;
    $48 = ($47 | 0) == 0;
    if ($48) {
      label = 11;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    if ($33) {
      $i_275 = 0;
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    $49 = $P + ($i_275 << 3) | 0;
    $50 = $49;
    $51 = _curve_x_coord($50) | 0;
    $52 = $51;
    $53 = _curve_y_coord($50) | 0;
    $54 = $53;
    $55 = $6 + ($i_275 << 3) | 0;
    $56 = $55;
    $57 = _curve_x_coord($56) | 0;
    $58 = $57;
    $59 = _curve_y_coord($56) | 0;
    $60 = $59;
    _element_sub411($11, $52, $58);
    _element_sub411($8, $60, $54);
    _element_mul389($16, $11, $60);
    _element_mul389($14, $8, $58);
    _element_add407($14, $14, $16);
    _element_neg410($14, $14);
    $61 = $Qx + ($i_275 << 3) | 0;
    $62 = $Qy + ($i_275 << 3) | 0;
    _d_miller_evalfn($18, $8, $11, $14, $61, $62);
    _element_mul389($21, $21, $18);
    $63 = $i_275 + 1 | 0;
    $exitcond83 = ($63 | 0) == ($n_prod | 0);
    if ($exitcond83) {
      label = 10;
      break;
    } else {
      $i_275 = $63;
      label = 9;
      break;
    }
   case 10:
    _element_multi_add($32, $32, $34, $n_prod);
    label = 11;
    break;
   case 11:
    $65 = $m_0 - 1 | 0;
    _element_square402($21, $21);
    $m_0 = $65;
    label = 4;
    break;
   case 12:
    _element_set408($res, $21);
    _element_clear390($21);
    $67 = ($n_prod | 0) > 0;
    if ($67) {
      $i_370 = 0;
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $68 = $6 + ($i_370 << 3) | 0;
    _element_clear390($68);
    $69 = $i_370 + 1 | 0;
    $exitcond = ($69 | 0) == ($n_prod | 0);
    if ($exitcond) {
      label = 14;
      break;
    } else {
      $i_370 = $69;
      label = 13;
      break;
    }
   case 14:
    _free($5);
    _element_clear390($8);
    _element_clear390($11);
    _element_clear390($14);
    _element_clear390($16);
    _element_clear390($18);
    STACKTOP = __stackBase__;
    return;
  }
}
function _cc_tatepower($out, $in, $pairing) {
  $out = $out | 0;
  $in = $in | 0;
  $pairing = $pairing | 0;
  var $e0 = 0, $e2 = 0, $e3 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $e0 = __stackBase__ | 0;
    $e2 = __stackBase__ + 8 | 0;
    $e3 = __stackBase__ + 16 | 0;
    $1 = $pairing + 504 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 + 1324 | 0;
    $4 = $3;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ($5 | 0) == 6;
    if ($6) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $8 = $e0 | 0;
    $9 = $2 + 648 | 0;
    $10 = $9;
    _element_init388($8, $10);
    $11 = $e2 | 0;
    $12 = $2 + 432 | 0;
    $13 = $12;
    _element_init388($11, $13);
    $14 = $e3 | 0;
    _element_init388($14, $10);
    $15 = _element_x405($8) | 0;
    $16 = _element_y406($8) | 0;
    $17 = $15 + 4 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = $18;
    $20 = $16 + 4 | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = $21;
    $23 = _element_x405($in) | 0;
    $24 = $23 + 4 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    $26 = _element_y406($in) | 0;
    $27 = $26 + 4 | 0;
    $28 = HEAP32[$27 >> 2] | 0;
    $29 = $25 + 8 | 0;
    $30 = $2 + 1328 | 0;
    $31 = $e2;
    $32 = $29;
    $33 = $30;
    _polymod_const_mul($31, $32, $33);
    _element_set408($15, $11);
    $34 = $25 + 16 | 0;
    $35 = $2 + 1336 | 0;
    $36 = $34;
    $37 = $35;
    _polymod_const_mul($31, $36, $37);
    _element_add407($15, $15, $11);
    $38 = $25;
    _element_add407($19, $19, $38);
    $39 = $28 + 8 | 0;
    $40 = $39;
    _polymod_const_mul($31, $40, $33);
    _element_set408($16, $11);
    $41 = $28 + 16 | 0;
    $42 = $41;
    _polymod_const_mul($31, $42, $37);
    _element_add407($16, $16, $11);
    $43 = $28;
    _element_add407($22, $22, $43);
    _element_set408($14, $8);
    $44 = _element_x405($in) | 0;
    _element_set408($15, $44);
    $45 = _element_y406($in) | 0;
    _element_neg410($16, $45);
    _element_mul389($14, $14, $8);
    _polymod_const_mul($31, $32, $33);
    _element_set408($15, $11);
    _polymod_const_mul($31, $36, $37);
    _element_add407($15, $15, $11);
    _element_add407($19, $19, $38);
    _polymod_const_mul($31, $40, $33);
    _element_neg410($16, $11);
    _polymod_const_mul($31, $42, $37);
    _element_sub411($16, $16, $11);
    _element_sub411($22, $22, $43);
    _element_mul389($8, $8, $in);
    _element_invert403($8, $8);
    _element_mul389($in, $14, $8);
    _element_set408($8, $in);
    $46 = $pairing + 452 | 0;
    _lucas_even($out, $8, $46);
    _element_clear390($8);
    _element_clear390($11);
    _element_clear390($14);
    label = 4;
    break;
   case 3:
    $48 = $2 + 1312 | 0;
    $49 = $48;
    _element_pow_mpz401($out, $in, $49);
    label = 4;
    break;
   case 4:
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_clear390($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 8 >> 2] & 1023]($e);
  return;
}
function _pbc_param_init_d($par, $tab) {
  $par = $par | 0;
  $tab = $tab | 0;
  var $s = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $err_044 = 0, $i_043 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $err_0_lcssa = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $s = __stackBase__ | 0;
    _d_param_init($par);
    $1 = $par + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2;
    $4 = _lookup_mpz($3, $tab, 6160) | 0;
    $5 = $2 + 12 | 0;
    $6 = $5;
    $7 = _lookup_mpz($6, $tab, 8232) | 0;
    $8 = $7 + $4 | 0;
    $9 = $2 + 24 | 0;
    $10 = $9;
    $11 = _lookup_mpz($10, $tab, 7008) | 0;
    $12 = $8 + $11 | 0;
    $13 = $2 + 36 | 0;
    $14 = $13;
    $15 = _lookup_mpz($14, $tab, 6344) | 0;
    $16 = $12 + $15 | 0;
    $17 = $2 + 48 | 0;
    $18 = $17;
    $19 = _lookup_mpz($18, $tab, 5936) | 0;
    $20 = $16 + $19 | 0;
    $21 = $2 + 60 | 0;
    $22 = $21;
    $23 = _lookup_mpz($22, $tab, 5584) | 0;
    $24 = $20 + $23 | 0;
    $25 = $2 + 72 | 0;
    $26 = $25;
    $27 = _lookup_int($26, $tab, 5360) | 0;
    $28 = $24 + $27 | 0;
    $29 = $2 + 76 | 0;
    $30 = $29;
    $31 = _lookup_mpz($30, $tab, 5104) | 0;
    $32 = $28 + $31 | 0;
    $33 = $2 + 88 | 0;
    $34 = $33;
    $35 = _lookup_mpz($34, $tab, 4520) | 0;
    $36 = $32 + $35 | 0;
    $37 = $2 + 104 | 0;
    $38 = $37;
    $39 = _lookup_mpz($38, $tab, 4368) | 0;
    $40 = $36 + $39 | 0;
    $41 = HEAP32[$26 >> 2] | 0;
    $42 = ($41 | 0) / 2 & -1;
    $43 = HEAP32[226] | 0;
    $44 = $2 + 100 | 0;
    $45 = $44;
    $46 = HEAP32[$45 >> 2] | 0;
    $47 = $46;
    $48 = $42 * 12 & -1;
    $49 = FUNCTION_TABLE_iii[$43 & 1023]($47, $48) | 0;
    $50 = $49;
    HEAP32[$45 >> 2] = $50;
    $51 = ($41 | 0) > 1;
    if ($51) {
      label = 2;
      break;
    } else {
      $err_0_lcssa = $40;
      label = 4;
      break;
    }
   case 2:
    $52 = $s | 0;
    $i_043 = 0;
    $err_044 = $40;
    label = 3;
    break;
   case 3:
    $54 = _sprintf($52 | 0, 9032, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $i_043, tempInt) | 0) | 0;
    $55 = HEAP32[$45 >> 2] | 0;
    $56 = $55 + ($i_043 * 12 & -1) | 0;
    ___gmpz_init($56);
    $57 = HEAP32[$45 >> 2] | 0;
    $58 = $57 + ($i_043 * 12 & -1) | 0;
    $59 = _lookup_mpz($58, $tab, $52) | 0;
    $60 = $59 + $err_044 | 0;
    $61 = $i_043 + 1 | 0;
    $62 = ($61 | 0) < ($42 | 0);
    if ($62) {
      $i_043 = $61;
      $err_044 = $60;
      label = 3;
      break;
    } else {
      $err_0_lcssa = $60;
      label = 4;
      break;
    }
   case 4:
    STACKTOP = __stackBase__;
    return $err_0_lcssa | 0;
  }
  return 0;
}
function _d_param_init($p) {
  $p = $p | 0;
  var $3 = 0;
  HEAP32[$p >> 2] = 4e3;
  $3 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](116) | 0;
  HEAP32[$p + 4 >> 2] = $3;
  ___gmpz_init($3);
  ___gmpz_init($3 + 12 | 0);
  ___gmpz_init($3 + 24 | 0);
  ___gmpz_init($3 + 36 | 0);
  ___gmpz_init($3 + 48 | 0);
  ___gmpz_init($3 + 60 | 0);
  ___gmpz_init($3 + 76 | 0);
  ___gmpz_init($3 + 88 | 0);
  HEAP32[$3 + 72 >> 2] = 0;
  HEAP32[$3 + 100 >> 2] = 0;
  ___gmpz_init($3 + 104 | 0);
  return;
}
function _element_item396($e, $i) {
  $e = $e | 0;
  $i = $i | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$e >> 2] | 0) + 64 >> 2] & 1023]($e, $i) | 0;
}
function _element_set_mpz397($e, $z) {
  $e = $e | 0;
  $z = $z | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 12 >> 2] & 1023]($e, $z);
  return;
}
function _d_clear($data) {
  $data = $data | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $i_015 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $data + 72 | 0;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($3 | 0) / 2 & -1;
    $5 = $data;
    ___gmpz_clear($5);
    $6 = $data + 12 | 0;
    $7 = $6;
    ___gmpz_clear($7);
    $8 = $data + 24 | 0;
    $9 = $8;
    ___gmpz_clear($9);
    $10 = $data + 36 | 0;
    $11 = $10;
    ___gmpz_clear($11);
    $12 = $data + 48 | 0;
    $13 = $12;
    ___gmpz_clear($13);
    $14 = $data + 60 | 0;
    $15 = $14;
    ___gmpz_clear($15);
    $16 = $data + 76 | 0;
    $17 = $16;
    ___gmpz_clear($17);
    $18 = $data + 88 | 0;
    $19 = $18;
    ___gmpz_clear($19);
    $20 = $data + 104 | 0;
    $21 = $20;
    ___gmpz_clear($21);
    $22 = ($3 | 0) > 1;
    if ($22) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $23 = $data + 100 | 0;
    $24 = $23;
    $i_015 = 0;
    label = 3;
    break;
   case 3:
    $26 = HEAP32[$24 >> 2] | 0;
    $27 = $26 + ($i_015 * 12 & -1) | 0;
    ___gmpz_clear($27);
    $28 = $i_015 + 1 | 0;
    $29 = ($28 | 0) < ($4 | 0);
    if ($29) {
      $i_015 = $28;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $30 = HEAP32[232] | 0;
    $31 = $data + 100 | 0;
    $32 = $31;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = $33;
    FUNCTION_TABLE_vi[$30 & 1023]($34);
    $35 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$35 & 1023]($data);
    return;
  }
}
function _d_out_str($stream, $data) {
  $stream = $stream | 0;
  $data = $data | 0;
  var $s = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $i_027 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $s = __stackBase__ | 0;
    $1 = $data + 72 | 0;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($3 | 0) / 2 & -1;
    _param_out_type($stream, 8848);
    $5 = $data;
    _param_out_mpz($stream, 6160, $5);
    $6 = $data + 12 | 0;
    $7 = $6;
    _param_out_mpz($stream, 8232, $7);
    $8 = $data + 24 | 0;
    $9 = $8;
    _param_out_mpz($stream, 7008, $9);
    $10 = $data + 36 | 0;
    $11 = $10;
    _param_out_mpz($stream, 6344, $11);
    $12 = $data + 48 | 0;
    $13 = $12;
    _param_out_mpz($stream, 5936, $13);
    $14 = $data + 60 | 0;
    $15 = $14;
    _param_out_mpz($stream, 5584, $15);
    $16 = HEAP32[$2 >> 2] | 0;
    _param_out_int($stream, 5360, $16);
    $17 = $data + 76 | 0;
    $18 = $17;
    _param_out_mpz($stream, 5104, $18);
    $19 = $data + 88 | 0;
    $20 = $19;
    _param_out_mpz($stream, 4520, $20);
    $21 = ($3 | 0) > 1;
    if ($21) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $22 = $s | 0;
    $23 = $data + 100 | 0;
    $24 = $23;
    $i_027 = 0;
    label = 3;
    break;
   case 3:
    $26 = _sprintf($22 | 0, 9032, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = $i_027, tempInt) | 0) | 0;
    $27 = HEAP32[$24 >> 2] | 0;
    $28 = $27 + ($i_027 * 12 & -1) | 0;
    _param_out_mpz($stream, $22, $28);
    $29 = $i_027 + 1 | 0;
    $30 = ($29 | 0) < ($4 | 0);
    if ($30) {
      $i_027 = $29;
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $31 = $data + 104 | 0;
    $32 = $31;
    _param_out_mpz($stream, 4368, $32);
    STACKTOP = __stackBase__;
    return;
  }
}
function _cc_pairing($out, $in1, $in2, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $pairing = $pairing | 0;
  var $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $2 = HEAP32[$pairing + 504 >> 2] | 0;
  $3 = __stackBase__ | 0;
  $5 = $2 + 432 | 0;
  _element_init388($3, $5);
  $6 = __stackBase__ + 8 | 0;
  _element_init388($6, $5);
  $7 = $in2;
  _element_mul389($3, _curve_x_coord($7) | 0, $2 + 1296 | 0);
  _element_mul389($6, _curve_y_coord($7) | 0, $2 + 1304 | 0);
  FUNCTION_TABLE_viiiii[HEAP32[1014] & 1023]($out, $pairing | 0, $in1, $3, $6);
  _cc_tatepower($out, $out, $pairing);
  _element_clear390($3);
  _element_clear390($6);
  STACKTOP = __stackBase__;
  return;
}
function _cc_is_almost_coddh($a, $b, $c, $d, $pairing) {
  $a = $a | 0;
  $b = $b | 0;
  $c = $c | 0;
  $d = $d | 0;
  $pairing = $pairing | 0;
  var $t0 = 0, $t1 = 0, $t2 = 0, $cx = 0, $cy = 0, $dx = 0, $dy = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $not_ = 0, $_ = 0, $res_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $t0 = __stackBase__ | 0;
    $t1 = __stackBase__ + 8 | 0;
    $t2 = __stackBase__ + 16 | 0;
    $cx = __stackBase__ + 24 | 0;
    $cy = __stackBase__ + 32 | 0;
    $dx = __stackBase__ + 40 | 0;
    $dy = __stackBase__ + 48 | 0;
    $1 = $pairing + 504 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $cx | 0;
    $4 = $2 + 432 | 0;
    $5 = $4;
    _element_init388($3, $5);
    $6 = $cy | 0;
    _element_init388($6, $5);
    $7 = $dx | 0;
    _element_init388($7, $5);
    $8 = $dy | 0;
    _element_init388($8, $5);
    $9 = $t0 | 0;
    $10 = $2 + 648 | 0;
    $11 = $10;
    _element_init388($9, $11);
    $12 = $t1 | 0;
    _element_init388($12, $11);
    $13 = $t2 | 0;
    _element_init388($13, $11);
    $14 = $c;
    $15 = _curve_x_coord($14) | 0;
    $16 = $15;
    $17 = $2 + 1296 | 0;
    $18 = $17;
    _element_mul389($3, $16, $18);
    $19 = $d;
    $20 = _curve_x_coord($19) | 0;
    $21 = $20;
    _element_mul389($7, $21, $18);
    $22 = _curve_y_coord($14) | 0;
    $23 = $22;
    $24 = $2 + 1304 | 0;
    $25 = $24;
    _element_mul389($6, $23, $25);
    $26 = _curve_y_coord($19) | 0;
    $27 = $26;
    _element_mul389($8, $27, $25);
    $28 = HEAP32[1014] | 0;
    $29 = $pairing | 0;
    FUNCTION_TABLE_viiiii[$28 & 1023]($9, $29, $a, $7, $8);
    $30 = HEAP32[1014] | 0;
    FUNCTION_TABLE_viiiii[$30 & 1023]($12, $29, $b, $3, $6);
    _cc_tatepower($9, $9, $pairing);
    _cc_tatepower($12, $12, $pairing);
    _element_mul389($13, $9, $12);
    $31 = _element_is1414($13) | 0;
    $32 = ($31 | 0) == 0;
    if ($32) {
      label = 2;
      break;
    } else {
      $res_0 = 1;
      label = 3;
      break;
    }
   case 2:
    _element_invert403($12, $12);
    _element_mul389($13, $9, $12);
    $34 = _element_is1414($13) | 0;
    $not_ = ($34 | 0) != 0;
    $_ = $not_ & 1;
    $res_0 = $_;
    label = 3;
    break;
   case 3:
    _element_clear390($3);
    _element_clear390($6);
    _element_clear390($7);
    _element_clear390($8);
    _element_clear390($9);
    _element_clear390($12);
    _element_clear390($13);
    STACKTOP = __stackBase__;
    return $res_0 | 0;
  }
  return 0;
}
function _element_set1400($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 28 >> 2] & 1023]($e);
  return;
}
function _element_pow_mpz401($x, $a, $n) {
  $x = $x | 0;
  $a = $a | 0;
  $n = $n | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$x >> 2] | 0) + 116 >> 2] & 1023]($x, $a, $n);
  return;
}
function _element_square402($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 112 >> 2] & 1023]($n, $a);
  return;
}
function _element_invert403($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 120 >> 2] & 1023]($n, $a);
  return;
}
function _cc_finalpow($e) {
  $e = $e | 0;
  var $3 = 0;
  $3 = HEAP32[$e + 4 >> 2] | 0;
  _cc_tatepower($3, $3, HEAP32[(HEAP32[$e >> 2] | 0) + 192 >> 2] | 0);
  return;
}
function _cc_miller_no_denom_affine($res, $q, $P, $Qx, $Qy) {
  $res = $res | 0;
  $q = $q | 0;
  $P = $P | 0;
  $Qx = $Qx | 0;
  $Qy = $Qy | 0;
  var $v = 0, $Z = 0, $a = 0, $b = 0, $c = 0, $t0 = 0, $e0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $m_0 = 0, $34 = 0, $36 = 0, $37 = 0, $40 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $v = __stackBase__ | 0;
    $Z = __stackBase__ + 8 | 0;
    $a = __stackBase__ + 16 | 0;
    $b = __stackBase__ + 24 | 0;
    $c = __stackBase__ + 32 | 0;
    $t0 = __stackBase__ + 40 | 0;
    $e0 = __stackBase__ + 48 | 0;
    $1 = $P;
    $2 = _curve_a_coeff($1) | 0;
    $3 = $2;
    $4 = _curve_x_coord($1) | 0;
    $5 = $4;
    $6 = _curve_y_coord($1) | 0;
    $7 = $6;
    $8 = $a | 0;
    $9 = $4;
    $10 = HEAP32[$9 >> 2] | 0;
    _element_init388($8, $10);
    $11 = $b | 0;
    $12 = $a | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    _element_init388($11, $13);
    $14 = $c | 0;
    $15 = HEAP32[$12 >> 2] | 0;
    _element_init388($14, $15);
    $16 = $t0 | 0;
    $17 = HEAP32[$12 >> 2] | 0;
    _element_init388($16, $17);
    $18 = $e0 | 0;
    $19 = $res | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    _element_init388($18, $20);
    $21 = $v | 0;
    $22 = HEAP32[$19 >> 2] | 0;
    _element_init388($21, $22);
    $23 = $Z | 0;
    $24 = $P | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    _element_init388($23, $25);
    _element_set408($23, $P);
    $26 = $Z;
    $27 = _curve_x_coord($26) | 0;
    $28 = $27;
    $29 = _curve_y_coord($26) | 0;
    $30 = $29;
    _element_set1400($21);
    $31 = ___gmpz_sizeinbase($q, 2) | 0;
    $32 = $31 - 2 | 0;
    $m_0 = $32;
    label = 2;
    break;
   case 2:
    _element_square402($8, $28);
    _element_mul_si412($8, $8, 3);
    _element_add407($8, $8, $3);
    _element_neg410($8, $8);
    _element_add407($11, $30, $30);
    _element_mul389($16, $11, $30);
    _element_mul389($14, $8, $28);
    _element_add407($14, $14, $16);
    _element_neg410($14, $14);
    _d_miller_evalfn($18, $8, $11, $14, $Qx, $Qy);
    _element_mul389($21, $21, $18);
    $34 = ($m_0 | 0) == 0;
    if ($34) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _element_double409($23, $23);
    $36 = ___gmpz_tstbit($q, $m_0) | 0;
    $37 = ($36 | 0) == 0;
    if ($37) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _element_sub411($11, $5, $28);
    _element_sub411($8, $30, $7);
    _element_mul389($16, $11, $30);
    _element_mul389($14, $8, $28);
    _element_add407($14, $14, $16);
    _element_neg410($14, $14);
    _d_miller_evalfn($18, $8, $11, $14, $Qx, $Qy);
    _element_mul389($21, $21, $18);
    _element_add407($23, $23, $P);
    label = 5;
    break;
   case 5:
    $40 = $m_0 - 1 | 0;
    _element_square402($21, $21);
    $m_0 = $40;
    label = 2;
    break;
   case 6:
    _element_set408($res, $21);
    _element_clear390($21);
    _element_clear390($23);
    _element_clear390($8);
    _element_clear390($11);
    _element_clear390($14);
    _element_clear390($16);
    _element_clear390($18);
    STACKTOP = __stackBase__;
    return;
  }
}
function _d_pairing_option_set($pairing, $key, $value) {
  $pairing = $pairing | 0;
  $key = $key | 0;
  $value = $value | 0;
  var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _strcmp($key | 0, 8288) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 6;
      break;
    }
   case 2:
    $4 = _strcmp($value | 0, 8088) | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[1014] = 696;
    label = 6;
    break;
   case 4:
    $8 = _strcmp($value | 0, 7800) | 0;
    $9 = ($8 | 0) == 0;
    if ($9) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[1014] = 240;
    label = 6;
    break;
   case 6:
    return;
  }
}
function _d_init_pairing($pairing, $data) {
  $pairing = $pairing | 0;
  $data = $data | 0;
  var $a = 0, $b = 0, $irred = 0, $ndonr = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $i_097 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $a = __stackBase__ | 0;
    $b = __stackBase__ + 8 | 0;
    $irred = __stackBase__ + 16 | 0;
    $ndonr = __stackBase__ + 24 | 0;
    $1 = $data + 72 | 0;
    $2 = $1;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = ($3 | 0) / 2 & -1;
    $5 = $3 & 1;
    $6 = ($5 | 0) == 0;
    if ($6) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _pbc_die(8408, (tempInt = STACKTOP, STACKTOP = STACKTOP + 1 | 0, STACKTOP = STACKTOP + 7 >> 3 << 3, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
   case 3:
    $9 = $pairing | 0;
    ___gmpz_init($9);
    $10 = $data + 36 | 0;
    $11 = $10;
    ___gmpz_set($9, $11);
    $12 = $pairing + 12 | 0;
    $13 = $12;
    _field_init_fp($13, $9);
    $14 = $pairing + 468 | 0;
    HEAP32[$14 >> 2] = 228;
    $15 = $pairing + 472 | 0;
    HEAP32[$15 >> 2] = 826;
    $16 = $pairing + 476 | 0;
    HEAP32[$16 >> 2] = 388;
    $17 = HEAP32[230] | 0;
    $18 = FUNCTION_TABLE_ii[$17 & 1023](1344) | 0;
    $19 = $pairing + 504 | 0;
    HEAP32[$19 >> 2] = $18;
    $20 = $18;
    $21 = $data;
    $22 = $18;
    _field_init_fp($22, $21);
    $23 = $a | 0;
    _element_init388($23, $20);
    $24 = $b | 0;
    _element_init388($24, $20);
    $25 = $data + 48 | 0;
    $26 = $25;
    _element_set_mpz397($23, $26);
    $27 = $data + 60 | 0;
    $28 = $27;
    _element_set_mpz397($24, $28);
    $29 = $18 + 864 | 0;
    $30 = $29;
    $31 = $data + 24 | 0;
    $32 = $31;
    $33 = $29;
    $34 = $a;
    $35 = $b;
    _field_init_curve_ab($33, $34, $35, $9, $32);
    $36 = $18 + 216 | 0;
    $37 = $36;
    $38 = $36;
    _field_init_poly($38, $22);
    $39 = $irred | 0;
    _element_init388($39, $37);
    $40 = $irred;
    _poly_set_coeff1($40, $4);
    $41 = ($3 | 0) > 1;
    if ($41) {
      label = 4;
      break;
    } else {
      label = 6;
      break;
    }
   case 4:
    $42 = $data + 100 | 0;
    $43 = $42;
    $i_097 = 0;
    label = 5;
    break;
   case 5:
    $45 = _element_item396($39, $i_097) | 0;
    $46 = HEAP32[$43 >> 2] | 0;
    $47 = $46 + ($i_097 * 12 & -1) | 0;
    _element_set_mpz397($45, $47);
    $48 = $i_097 + 1 | 0;
    $49 = ($48 | 0) < ($4 | 0);
    if ($49) {
      $i_097 = $48;
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $50 = $18 + 432 | 0;
    $51 = $50;
    $52 = $50;
    _field_init_polymod($52, $40);
    _element_clear390($39);
    $53 = HEAP32[230] | 0;
    $54 = FUNCTION_TABLE_ii[$53 & 1023](8) | 0;
    $55 = $54;
    $56 = $18 + 640 | 0;
    $57 = $56;
    HEAP32[$57 >> 2] = $55;
    _element_init388($55, $51);
    $58 = HEAP32[$57 >> 2] | 0;
    $59 = $58 + 4 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    $61 = $60;
    $62 = $data + 104 | 0;
    $63 = $62;
    _element_set_mpz397($61, $63);
    $64 = $18 + 648 | 0;
    $65 = $64;
    $66 = $50;
    _field_init_quadratic($65, $66);
    $67 = HEAP32[$2 >> 2] | 0;
    $68 = ($67 | 0) == 6;
    if ($68) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $70 = $pairing + 452 | 0;
    ___gmpz_init($70);
    ___gmpz_mul($70, $21, $21);
    ___gmpz_sub($70, $70, $21);
    ___gmpz_add_ui($70, $70, 1);
    ___gmpz_divexact($70, $70, $9);
    $71 = $18 + 1328 | 0;
    $72 = $71;
    _element_init388($72, $51);
    $73 = $18 + 1332 | 0;
    $74 = $73;
    $75 = HEAP32[$74 >> 2] | 0;
    $76 = $75 + 8 | 0;
    $77 = $76;
    _element_set1400($77);
    _element_pow_mpz401($72, $72, $21);
    $78 = $18 + 1336 | 0;
    $79 = $78;
    _element_init388($79, $51);
    _element_square402($79, $72);
    label = 9;
    break;
   case 8:
    $81 = $18 + 1312 | 0;
    $82 = $81;
    ___gmpz_init($82);
    $83 = $18 + 844 | 0;
    $84 = $83;
    ___gmpz_sub_ui($82, $84, 1);
    ___gmpz_divexact($82, $82, $9);
    label = 9;
    break;
   case 9:
    $86 = $18 + 1080 | 0;
    $87 = $86;
    $88 = $86;
    $89 = $50;
    _field_init_curve_ab_map($88, $33, 660, $89, $9, 0);
    _field_reinit_curve_twist($88);
    $90 = $ndonr | 0;
    ___gmpz_init($90);
    $91 = $data + 12 | 0;
    $92 = $91;
    ___gmpz_sub($90, $21, $92);
    ___gmpz_add_ui($90, $90, 1);
    ___gmpz_neg($90, $90);
    _pbc_mpz_curve_order_extn($90, $21, $90, $4);
    ___gmpz_divexact($90, $90, $11);
    _field_curve_set_quotient_cmp($88, $90);
    ___gmpz_clear($90);
    $93 = $18 + 1296 | 0;
    $94 = $93;
    _element_init388($94, $51);
    $95 = _field_get_nqr($52) | 0;
    $96 = $95;
    _element_invert403($94, $96);
    $97 = $18 + 1304 | 0;
    $98 = $97;
    _element_init388($98, $51);
    _element_square402($98, $94);
    $99 = $pairing + 228 | 0;
    HEAP32[$99 >> 2] = $30;
    $100 = $pairing + 232 | 0;
    HEAP32[$100 >> 2] = $87;
    $101 = HEAP32[$2 >> 2] | 0;
    $102 = $18 + 1324 | 0;
    $103 = $102;
    HEAP32[$103 >> 2] = $101;
    $104 = $pairing;
    $105 = $64;
    _pairing_GT_init($104, $105);
    $106 = $pairing + 496 | 0;
    HEAP32[$106 >> 2] = 244;
    HEAP32[1014] = 240;
    $107 = $pairing + 500 | 0;
    HEAP32[$107 >> 2] = 16;
    $108 = $pairing + 484 | 0;
    HEAP32[$108 >> 2] = 766;
    $109 = $pairing + 488 | 0;
    HEAP32[$109 >> 2] = 546;
    $110 = $pairing + 492 | 0;
    HEAP32[$110 >> 2] = 232;
    $111 = $pairing + 480 | 0;
    HEAP32[$111 >> 2] = 814;
    _element_clear390($23);
    _element_clear390($24);
    STACKTOP = __stackBase__;
    return;
  }
}
function _d_pairing_pp_init($p, $in1, $pairing) {
  $p = $p | 0;
  $in1 = $in1 | 0;
  $pairing = $pairing | 0;
  var $Z = 0, $t0 = 0, $a = 0, $b = 0, $c = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $pp_0 = 0, $m_0 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $pp_1 = 0, $46 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $Z = __stackBase__ | 0;
    $t0 = __stackBase__ + 8 | 0;
    $a = __stackBase__ + 16 | 0;
    $b = __stackBase__ + 24 | 0;
    $c = __stackBase__ + 32 | 0;
    $1 = $in1;
    $2 = _curve_x_coord($1) | 0;
    $3 = $2;
    $4 = _curve_y_coord($1) | 0;
    $5 = $4;
    $6 = $pairing + 504 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $7;
    $9 = $pairing | 0;
    $10 = _curve_a_coeff($1) | 0;
    $11 = $10;
    $12 = $Z | 0;
    $13 = $in1 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    _element_init388($12, $14);
    _element_set408($12, $in1);
    $15 = $Z;
    $16 = _curve_x_coord($15) | 0;
    $17 = $16;
    $18 = _curve_y_coord($15) | 0;
    $19 = $18;
    $20 = $t0 | 0;
    _element_init388($20, $8);
    $21 = $a | 0;
    _element_init388($21, $8);
    $22 = $b | 0;
    _element_init388($22, $8);
    $23 = $c | 0;
    _element_init388($23, $8);
    $24 = ___gmpz_sizeinbase($9, 2) | 0;
    $25 = $24 - 2 | 0;
    $26 = HEAP32[230] | 0;
    $27 = $25 * 48 & -1;
    $28 = FUNCTION_TABLE_ii[$26 & 1023]($27) | 0;
    $29 = $p + 4 | 0;
    HEAP32[$29 >> 2] = $28;
    $30 = $28;
    $m_0 = $25;
    $pp_0 = $30;
    label = 2;
    break;
   case 2:
    _element_square402($21, $17);
    _element_double409($20, $21);
    _element_add407($21, $21, $20);
    _element_add407($21, $21, $11);
    _element_neg410($21, $21);
    _element_add407($22, $19, $19);
    _element_mul389($20, $22, $19);
    _element_mul389($23, $21, $17);
    _element_add407($23, $23, $20);
    _element_neg410($23, $23);
    $32 = $pp_0 | 0;
    _element_init388($32, $8);
    $33 = $pp_0 + 8 | 0;
    _element_init388($33, $8);
    $34 = $pp_0 + 16 | 0;
    _element_init388($34, $8);
    _element_set408($32, $21);
    _element_set408($33, $22);
    _element_set408($34, $23);
    $35 = $pp_0 + 24 | 0;
    $36 = ($m_0 | 0) == 0;
    if ($36) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _element_double409($12, $12);
    $38 = ___gmpz_tstbit($9, $m_0) | 0;
    $39 = ($38 | 0) == 0;
    if ($39) {
      $pp_1 = $35;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _element_sub411($22, $3, $17);
    _element_sub411($21, $19, $5);
    _element_mul389($20, $22, $19);
    _element_mul389($23, $21, $17);
    _element_add407($23, $23, $20);
    _element_neg410($23, $23);
    $41 = $35 | 0;
    _element_init388($41, $8);
    $42 = $pp_0 + 32 | 0;
    _element_init388($42, $8);
    $43 = $pp_0 + 40 | 0;
    _element_init388($43, $8);
    _element_set408($41, $21);
    _element_set408($42, $22);
    _element_set408($43, $23);
    $44 = $pp_0 + 48 | 0;
    _element_add407($12, $12, $in1);
    $pp_1 = $44;
    label = 5;
    break;
   case 5:
    $46 = $m_0 - 1 | 0;
    $m_0 = $46;
    $pp_0 = $pp_1;
    label = 2;
    break;
   case 6:
    _element_clear390($20);
    _element_clear390($21);
    _element_clear390($22);
    _element_clear390($23);
    _element_clear390($12);
    STACKTOP = __stackBase__;
    return;
  }
}
function _d_pairing_pp_clear($p) {
  $p = $p | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $i_08 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $exitcond = 0, $19 = 0, $20 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 | 0;
    $4 = ___gmpz_sizeinbase($3, 2) | 0;
    $5 = ___gmpz_popcount($3) | 0;
    $6 = $4 - 3 | 0;
    $7 = $6 + $5 | 0;
    $8 = $p + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9;
    $11 = ($7 | 0) > 0;
    if ($11) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $12 = $4 + $5 | 0;
    $13 = $12 - 3 | 0;
    $i_08 = 0;
    label = 3;
    break;
   case 3:
    $15 = $10 + ($i_08 * 24 & -1) | 0;
    _element_clear390($15);
    $16 = $10 + ($i_08 * 24 & -1) + 8 | 0;
    _element_clear390($16);
    $17 = $10 + ($i_08 * 24 & -1) + 16 | 0;
    _element_clear390($17);
    $18 = $i_08 + 1 | 0;
    $exitcond = ($18 | 0) == ($13 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_08 = $18;
      label = 3;
      break;
    }
   case 4:
    $19 = HEAP32[232] | 0;
    $20 = HEAP32[$8 >> 2] | 0;
    FUNCTION_TABLE_vi[$19 & 1023]($20);
    return;
  }
}
function _d_pairing_pp_apply($out, $in2, $p) {
  $out = $out | 0;
  $in2 = $in2 | 0;
  $p = $p | 0;
  var $e0 = 0, $Qx = 0, $Qy = 0, $v = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $m_031 = 0, $pp_030 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $pp_1 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $e0 = __stackBase__ | 0;
    $Qx = __stackBase__ + 8 | 0;
    $Qy = __stackBase__ + 16 | 0;
    $v = __stackBase__ + 24 | 0;
    $1 = $p | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 | 0;
    $4 = $2 + 504 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ___gmpz_sizeinbase($3, 2) | 0;
    $7 = $6 - 2 | 0;
    $8 = $p + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $e0 | 0;
    _element_init_same_as404($10, $out);
    $11 = $v | 0;
    _element_init_same_as404($11, $out);
    $12 = $Qx | 0;
    $13 = $5 + 432 | 0;
    $14 = $13;
    _element_init388($12, $14);
    $15 = $Qy | 0;
    _element_init388($15, $14);
    $16 = $in2;
    $17 = _curve_x_coord($16) | 0;
    $18 = $17;
    $19 = $5 + 1296 | 0;
    $20 = $19;
    _element_mul389($12, $18, $20);
    $21 = _curve_y_coord($16) | 0;
    $22 = $21;
    $23 = $5 + 1304 | 0;
    $24 = $23;
    _element_mul389($15, $22, $24);
    _element_set1400($out);
    $25 = $9;
    $26 = $9 + 8 | 0;
    $27 = $26;
    $28 = $9 + 16 | 0;
    $29 = $28;
    _d_miller_evalfn($10, $25, $27, $29, $12, $15);
    _element_mul389($out, $out, $10);
    $30 = ($7 | 0) == 0;
    if ($30) {
      label = 6;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $31 = $9;
    $32 = $9 + 24 | 0;
    $33 = $32;
    $pp_030 = $31;
    $m_031 = $7;
    $35 = $33;
    label = 3;
    break;
   case 3:
    $36 = ___gmpz_tstbit($3, $m_031) | 0;
    $37 = ($36 | 0) == 0;
    if ($37) {
      $pp_1 = $35;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $39 = $35 | 0;
    $40 = $pp_030 + 32 | 0;
    $41 = $pp_030 + 40 | 0;
    _d_miller_evalfn($10, $39, $40, $41, $12, $15);
    _element_mul389($out, $out, $10);
    $42 = $pp_030 + 48 | 0;
    $pp_1 = $42;
    label = 5;
    break;
   case 5:
    $44 = $m_031 - 1 | 0;
    _element_square402($out, $out);
    $45 = $pp_1 | 0;
    $46 = $pp_1 + 8 | 0;
    $47 = $pp_1 + 16 | 0;
    _d_miller_evalfn($10, $45, $46, $47, $12, $15);
    _element_mul389($out, $out, $10);
    $48 = $pp_1 + 24 | 0;
    $49 = ($44 | 0) == 0;
    if ($49) {
      label = 6;
      break;
    } else {
      $pp_030 = $pp_1;
      $m_031 = $44;
      $35 = $48;
      label = 3;
      break;
    }
   case 6:
    $50 = HEAP32[$1 >> 2] | 0;
    _cc_tatepower($out, $out, $50);
    _element_clear390($10);
    _element_clear390($12);
    _element_clear390($15);
    _element_clear390($11);
    STACKTOP = __stackBase__;
    return;
  }
}
function _d_pairing_clear($pairing) {
  $pairing = $pairing | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $pairing + 236 | 0;
    $2 = $1;
    _field_clear($2);
    $3 = $pairing + 504 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 + 1324 | 0;
    $6 = $5;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = ($7 | 0) == 6;
    if ($8) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $10 = $4 + 1328 | 0;
    $11 = $10;
    _element_clear390($11);
    $12 = $4 + 1336 | 0;
    $13 = $12;
    _element_clear390($13);
    $14 = $pairing + 452 | 0;
    ___gmpz_clear($14);
    label = 4;
    break;
   case 3:
    $16 = $4 + 1312 | 0;
    $17 = $16;
    ___gmpz_clear($17);
    label = 4;
    break;
   case 4:
    $19 = $4 + 1080 | 0;
    $20 = $19;
    _field_clear($20);
    $21 = $4 + 864 | 0;
    $22 = $21;
    _field_clear($22);
    $23 = $4 + 1296 | 0;
    $24 = $23;
    _element_clear390($24);
    $25 = $4 + 1304 | 0;
    $26 = $25;
    _element_clear390($26);
    $27 = $4 + 648 | 0;
    $28 = $27;
    _field_clear($28);
    $29 = $4 + 432 | 0;
    $30 = $29;
    _field_clear($30);
    $31 = $4 + 216 | 0;
    $32 = $31;
    _field_clear($32);
    $33 = $4;
    _field_clear($33);
    $34 = $pairing + 12 | 0;
    $35 = $34;
    _field_clear($35);
    $36 = $pairing | 0;
    ___gmpz_clear($36);
    $37 = HEAP32[232] | 0;
    FUNCTION_TABLE_vi[$37 & 1023]($4);
    return;
  }
}
function _element_init_same_as404($e, $e2) {
  $e = $e | 0;
  $e2 = $e2 | 0;
  _element_init388($e, HEAP32[$e2 >> 2] | 0);
  return;
}
function _d_miller_evalfn($e0, $a, $b, $c, $Qx, $Qy) {
  $e0 = $e0 | 0;
  $a = $a | 0;
  $b = $b | 0;
  $c = $c | 0;
  $Qx = $Qx | 0;
  $Qy = $Qy | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i_014 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $exitcond = 0, $13 = 0, $14 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _element_x405($e0) | 0;
    $2 = _element_y406($e0) | 0;
    $3 = $1 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4;
    $6 = _polymod_field_degree($5) | 0;
    $7 = ($6 | 0) > 0;
    if ($7) {
      $i_014 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $8 = _element_item396($1, $i_014) | 0;
    $9 = _element_item396($Qx, $i_014) | 0;
    _element_mul389($8, $9, $a);
    $10 = _element_item396($2, $i_014) | 0;
    $11 = _element_item396($Qy, $i_014) | 0;
    _element_mul389($10, $11, $b);
    $12 = $i_014 + 1 | 0;
    $exitcond = ($12 | 0) == ($6 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_014 = $12;
      label = 2;
      break;
    }
   case 3:
    $13 = _element_item396($1, 0) | 0;
    $14 = _element_item396($1, 0) | 0;
    _element_add407($13, $14, $c);
    return;
  }
}
function _element_x405($a) {
  $a = $a | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$a >> 2] | 0) + 68 >> 2] & 1023]($a) | 0;
}
function _element_y406($a) {
  $a = $a | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$a >> 2] | 0) + 72 >> 2] & 1023]($a) | 0;
}
function _element_add407($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 40 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_set408($e, $a) {
  $e = $e | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 20 >> 2] & 1023]($e, $a);
  return;
}
function _element_double409($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 96 >> 2] & 1023]($n, $a);
  return;
}
function _element_neg410($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 124 >> 2] & 1023]($n, $a);
  return;
}
function _element_sub411($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 44 >> 2] & 1023]($n, $a, $b);
  return;
}
function _cc_miller_no_denom_proj($res, $q, $P, $Qx, $Qy) {
  $res = $res | 0;
  $q = $q | 0;
  $P = $P | 0;
  $Qx = $Qx | 0;
  $Qy = $Qy | 0;
  var $v = 0, $Z = 0, $a = 0, $b = 0, $c = 0, $t0 = 0, $t1 = 0, $e0 = 0, $z = 0, $z2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $m_0 = 0, $38 = 0, $40 = 0, $41 = 0, $44 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $v = __stackBase__ | 0;
    $Z = __stackBase__ + 8 | 0;
    $a = __stackBase__ + 16 | 0;
    $b = __stackBase__ + 24 | 0;
    $c = __stackBase__ + 32 | 0;
    $t0 = __stackBase__ + 40 | 0;
    $t1 = __stackBase__ + 48 | 0;
    $e0 = __stackBase__ + 56 | 0;
    $z = __stackBase__ + 64 | 0;
    $z2 = __stackBase__ + 72 | 0;
    $1 = $a | 0;
    $2 = $b | 0;
    $3 = $c | 0;
    $4 = $P;
    $5 = _curve_a_coeff($4) | 0;
    $6 = $5;
    $7 = _curve_x_coord($4) | 0;
    $8 = $7;
    $9 = _curve_y_coord($4) | 0;
    $10 = $9;
    $11 = $7;
    $12 = HEAP32[$11 >> 2] | 0;
    _element_init388($1, $12);
    $13 = $a | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    _element_init388($2, $14);
    $15 = HEAP32[$13 >> 2] | 0;
    _element_init388($3, $15);
    $16 = $t0 | 0;
    $17 = HEAP32[$13 >> 2] | 0;
    _element_init388($16, $17);
    $18 = $t1 | 0;
    $19 = HEAP32[$13 >> 2] | 0;
    _element_init388($18, $19);
    $20 = $e0 | 0;
    $21 = $res | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    _element_init388($20, $22);
    $23 = $z | 0;
    $24 = HEAP32[$13 >> 2] | 0;
    _element_init388($23, $24);
    $25 = $z2 | 0;
    $26 = HEAP32[$13 >> 2] | 0;
    _element_init388($25, $26);
    _element_set1400($23);
    _element_set1400($25);
    $27 = $v | 0;
    $28 = HEAP32[$21 >> 2] | 0;
    _element_init388($27, $28);
    $29 = $Z | 0;
    $30 = $P | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    _element_init388($29, $31);
    _element_set408($29, $P);
    $32 = $Z;
    $33 = _curve_x_coord($32) | 0;
    $34 = $33;
    _element_set1400($27);
    $35 = ___gmpz_sizeinbase($q, 2) | 0;
    $36 = $35 - 2 | 0;
    $m_0 = $36;
    label = 2;
    break;
   case 2:
    _element_square402($1, $25);
    _element_mul389($1, $1, $6);
    _element_square402($2, $34);
    _element_double409($16, $2);
    _element_add407($2, $2, $16);
    _element_add407($1, $1, $2);
    _element_neg410($1, $1);
    _element_mul389($2, $23, $25);
    _element_mul389($2, $2, $34);
    _element_mul_si412($2, $2, 2);
    _element_mul389($3, $34, $1);
    _element_mul389($1, $1, $25);
    _element_square402($16, $34);
    _element_mul_si412($16, $16, 2);
    _element_add407($3, $3, $16);
    _element_neg410($3, $3);
    _d_miller_evalfn($20, $1, $2, $3, $Qx, $Qy);
    _element_mul389($27, $27, $20);
    $38 = ($m_0 | 0) == 0;
    if ($38) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _element_square402($16, $34);
    _element_double409($18, $16);
    _element_add407($16, $16, $18);
    _element_square402($18, $25);
    _element_mul389($18, $18, $6);
    _element_add407($16, $16, $18);
    _element_mul389($23, $34, $23);
    _element_double409($23, $23);
    _element_square402($25, $23);
    _element_square402($1, $34);
    _element_mul389($18, $34, $1);
    _element_double409($18, $18);
    _element_double409($18, $18);
    _element_double409($2, $18);
    _element_square402($34, $16);
    _element_sub411($34, $34, $2);
    _element_square402($1, $1);
    _element_double409($1, $1);
    _element_double409($1, $1);
    _element_double409($1, $1);
    _element_sub411($18, $18, $34);
    _element_mul389($16, $16, $18);
    _element_sub411($34, $16, $1);
    $40 = ___gmpz_tstbit($q, $m_0) | 0;
    $41 = ($40 | 0) == 0;
    if ($41) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _element_mul389($16, $34, $23);
    _element_mul389($18, $25, $23);
    _element_mul389($1, $10, $18);
    _element_sub411($1, $34, $1);
    _element_mul389($2, $8, $18);
    _element_sub411($2, $2, $16);
    _element_mul389($16, $16, $10);
    _element_mul389($3, $34, $8);
    _element_sub411($3, $16, $3);
    _d_miller_evalfn($20, $1, $2, $3, $Qx, $Qy);
    _element_mul389($27, $27, $20);
    _element_mul389($1, $25, $8);
    _element_sub411($2, $34, $1);
    _element_mul389($16, $25, $10);
    _element_mul389($16, $16, $23);
    _element_sub411($18, $34, $16);
    _element_add407($1, $34, $1);
    _element_add407($16, $34, $16);
    _element_mul389($23, $23, $2);
    _element_square402($25, $23);
    _element_square402($3, $2);
    _element_mul389($2, $3, $2);
    _element_square402($34, $18);
    _element_mul389($3, $1, $3);
    _element_sub411($34, $34, $3);
    _element_sub411($3, $3, $34);
    _element_sub411($3, $3, $34);
    _element_mul389($3, $3, $18);
    _element_mul389($16, $16, $2);
    _element_sub411($3, $3, $16);
    _element_halve413($34, $3);
    label = 5;
    break;
   case 5:
    $44 = $m_0 - 1 | 0;
    _element_square402($27, $27);
    $m_0 = $44;
    label = 2;
    break;
   case 6:
    _element_set408($res, $27);
    _element_clear390($27);
    _element_clear390($29);
    _element_clear390($1);
    _element_clear390($2);
    _element_clear390($3);
    _element_clear390($16);
    _element_clear390($18);
    _element_clear390($20);
    _element_clear390($23);
    _element_clear390($25);
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_mul_si412($n, $a, $z) {
  $n = $n | 0;
  $a = $a | 0;
  $z = $z | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 88 >> 2] & 1023]($n, $a, $z);
  return;
}
function _element_halve413($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 108 >> 2] & 1023]($n, $a);
  return;
}
function _element_is1414($n) {
  $n = $n | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$n >> 2] | 0) + 136 >> 2] & 1023]($n) | 0;
}
function _lucas_even($out, $in, $cofactor) {
  $out = $out | 0;
  $in = $in | 0;
  $cofactor = $cofactor | 0;
  var $temp = 0, $1 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $j_070 = 0, $13 = 0, $j_071 = 0, $14 = 0, $15 = 0, $j_0 = 0, $18 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $temp = __stackBase__ | 0;
    $1 = _element_is1414($in) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    _element_set408($out, $in);
    label = 9;
    break;
   case 3:
    $5 = $temp | 0;
    _element_init_same_as404($5, $out);
    $6 = _element_x405($in) | 0;
    $7 = _element_y406($in) | 0;
    $8 = _element_x405($out) | 0;
    $9 = _element_y406($out) | 0;
    $10 = _element_x405($5) | 0;
    $11 = _element_y406($5) | 0;
    _element_set_si415($10);
    _element_double409($11, $6);
    _element_set408($8, $10);
    _element_set408($9, $11);
    $12 = ___gmpz_sizeinbase($cofactor, 2) | 0;
    $j_070 = $12 - 1 | 0;
    $13 = ($j_070 | 0) == 0;
    if ($13) {
      label = 4;
      break;
    } else {
      $j_071 = $j_070;
      label = 5;
      break;
    }
   case 4:
    _element_mul389($9, $8, $9);
    _element_sub411($9, $9, $11);
    _element_square402($8, $8);
    _element_sub411($8, $8, $10);
    _element_double409($8, $8);
    _element_mul389($6, $11, $9);
    _element_sub411($6, $6, $8);
    _element_square402($11, $11);
    _element_sub411($11, $11, $10);
    _element_sub411($11, $11, $10);
    _element_halve413($8, $9);
    _element_div416($9, $6, $11);
    _element_mul389($9, $9, $7);
    _element_clear390($5);
    label = 9;
    break;
   case 5:
    $14 = ___gmpz_tstbit($cofactor, $j_071) | 0;
    $15 = ($14 | 0) == 0;
    if ($15) {
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    _element_mul389($8, $8, $9);
    _element_sub411($8, $8, $11);
    _element_square402($9, $9);
    _element_sub411($9, $9, $10);
    label = 8;
    break;
   case 7:
    _element_mul389($9, $8, $9);
    _element_sub411($9, $9, $11);
    _element_square402($8, $8);
    _element_sub411($8, $8, $10);
    label = 8;
    break;
   case 8:
    $j_0 = $j_071 - 1 | 0;
    $18 = ($j_0 | 0) == 0;
    if ($18) {
      label = 4;
      break;
    } else {
      $j_071 = $j_0;
      label = 5;
      break;
    }
   case 9:
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_set_si415($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 76 >> 2] & 1023]($e, 2);
  return;
}
function _element_div416($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 92 >> 2] & 1023]($n, $a, $b);
  return;
}
function _pbc_param_init_e($par, $tab) {
  $par = $par | 0;
  $tab = $tab | 0;
  var $2 = 0, $4 = 0, $8 = 0, $12 = 0, $16 = 0, $20 = 0, $24 = 0, $28 = 0, $32 = 0;
  _e_init($par);
  $2 = HEAP32[$par + 4 >> 2] | 0;
  $4 = _lookup_mpz($2, $tab, 6016) | 0;
  $8 = (_lookup_mpz($2 + 12 | 0, $tab, 8128) | 0) + $4 | 0;
  $12 = $8 + (_lookup_mpz($2 + 24 | 0, $tab, 6976) | 0) | 0;
  $16 = $12 + (_lookup_mpz($2 + 36 | 0, $tab, 6320) | 0) | 0;
  $20 = $16 + (_lookup_mpz($2 + 48 | 0, $tab, 5928) | 0) | 0;
  $24 = $20 + (_lookup_int($2 + 60 | 0, $tab, 5576) | 0) | 0;
  $28 = $24 + (_lookup_int($2 + 64 | 0, $tab, 5352) | 0) | 0;
  $32 = $28 + (_lookup_int($2 + 68 | 0, $tab, 5096) | 0) | 0;
  return $32 + (_lookup_int($2 + 72 | 0, $tab, 4512) | 0) | 0;
}
function _e_init($p) {
  $p = $p | 0;
  var $3 = 0;
  HEAP32[$p >> 2] = 1488;
  $3 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](76) | 0;
  HEAP32[$p + 4 >> 2] = $3;
  ___gmpz_init($3);
  ___gmpz_init($3 + 12 | 0);
  ___gmpz_init($3 + 24 | 0);
  ___gmpz_init($3 + 36 | 0);
  ___gmpz_init($3 + 48 | 0);
  return;
}
function _element_init433($e, $f) {
  $e = $e | 0;
  $f = $f | 0;
  HEAP32[$e >> 2] = $f;
  FUNCTION_TABLE_vi[HEAP32[$f + 4 >> 2] & 1023]($e);
  return;
}
function _element_clear435($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 8 >> 2] & 1023]($e);
  return;
}
function _e_clear($data) {
  $data = $data | 0;
  ___gmpz_clear($data);
  ___gmpz_clear($data + 12 | 0);
  ___gmpz_clear($data + 24 | 0);
  ___gmpz_clear($data + 36 | 0);
  ___gmpz_clear($data + 48 | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023]($data);
  return;
}
function _e_init_pairing($pairing, $data) {
  $pairing = $pairing | 0;
  $data = $data | 0;
  var $a = 0, $b = 0, $1 = 0, $7 = 0, $29 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $44 = 0, $53 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $a = __stackBase__ | 0;
  $b = __stackBase__ + 8 | 0;
  $1 = $pairing | 0;
  ___gmpz_init($1);
  ___gmpz_set($1, $data + 12 | 0);
  _field_init_fp($pairing + 12 | 0, $1);
  HEAP32[$pairing + 468 >> 2] = 514;
  HEAP32[370] = 640;
  $7 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](456) | 0;
  HEAP32[$pairing + 504 >> 2] = $7;
  HEAP32[$7 + 432 >> 2] = HEAP32[$data + 60 >> 2] | 0;
  HEAP32[$7 + 436 >> 2] = HEAP32[$data + 64 >> 2] | 0;
  HEAP32[$7 + 440 >> 2] = HEAP32[$data + 68 >> 2] | 0;
  HEAP32[$7 + 444 >> 2] = HEAP32[$data + 72 >> 2] | 0;
  $29 = $7;
  _field_init_fp($29, $data);
  $31 = $a | 0;
  _element_init433($31, $29);
  $32 = $b | 0;
  _element_init433($32, $29);
  _element_set_mpz440($31, $data + 36 | 0);
  _element_set_mpz440($32, $data + 48 | 0);
  $37 = $7 + 216 | 0;
  $38 = $37;
  _field_init_curve_ab($37, $a, $b, $1, $data + 24 | 0);
  $44 = $pairing + 452 | 0;
  ___gmpz_init($44);
  ___gmpz_sub_ui($44, $7 + 196 | 0, 1);
  ___gmpz_divexact($44, $44, $1);
  HEAP32[$pairing + 228 >> 2] = $38;
  HEAP32[$pairing + 232 >> 2] = $38;
  _pairing_GT_init($pairing, $29);
  HEAP32[$pairing + 496 >> 2] = 30;
  HEAP32[$pairing + 464 >> 2] = 162;
  HEAP32[$pairing + 500 >> 2] = 692;
  HEAP32[$pairing + 480 >> 2] = 150;
  $53 = $7 + 448 | 0;
  _element_init433($53, $38);
  _curve_set_gen_no_cofac($53);
  _element_clear435($31);
  _element_clear435($32);
  STACKTOP = __stackBase__;
  return;
}
function _e_out_str($stream, $data) {
  $stream = $stream | 0;
  $data = $data | 0;
  _param_out_type($stream, 4360);
  _param_out_mpz($stream, 6016, $data);
  _param_out_mpz($stream, 8128, $data + 12 | 0);
  _param_out_mpz($stream, 6976, $data + 24 | 0);
  _param_out_mpz($stream, 6320, $data + 36 | 0);
  _param_out_mpz($stream, 5928, $data + 48 | 0);
  _param_out_int($stream, 5576, HEAP32[$data + 60 >> 2] | 0);
  _param_out_int($stream, 5352, HEAP32[$data + 64 >> 2] | 0);
  _param_out_int($stream, 5096, HEAP32[$data + 68 >> 2] | 0);
  _param_out_int($stream, 4512, HEAP32[$data + 72 >> 2] | 0);
  return;
}
function _e_pairing($out, $in1, $in2, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $pairing = $pairing | 0;
  var $2 = 0, $4 = 0, $8 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $2 = HEAP32[$pairing + 504 >> 2] | 0;
  $4 = __stackBase__ | 0;
  _element_init433($4, $2 + 216 | 0);
  $8 = $2 + 448 | 0;
  _element_add447($4, $in2, $8);
  FUNCTION_TABLE_viiiii[HEAP32[370] & 1023]($out, $in1, $4, $8, $2);
  _element_pow_mpz452($out, $out, $pairing + 452 | 0);
  _element_clear435($4);
  STACKTOP = __stackBase__;
  return;
}
function _e_miller_proj($res, $P, $QR, $R, $p) {
  $res = $res | 0;
  $P = $P | 0;
  $QR = $QR | 0;
  $R = $R | 0;
  $p = $p | 0;
  var $v = 0, $vd = 0, $v1 = 0, $vd1 = 0, $Z = 0, $Z1 = 0, $a = 0, $b = 0, $c = 0, $e0 = 0, $e1 = 0, $z = 0, $z2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $i_0120 = 0, $52 = 0, $exitcond124 = 0, $i_0_lcssa = 0, $53 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $61 = 0, $i_1119 = 0, $62 = 0, $exitcond = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 104 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $v = __stackBase__ | 0;
    $vd = __stackBase__ + 8 | 0;
    $v1 = __stackBase__ + 16 | 0;
    $vd1 = __stackBase__ + 24 | 0;
    $Z = __stackBase__ + 32 | 0;
    $Z1 = __stackBase__ + 40 | 0;
    $a = __stackBase__ + 48 | 0;
    $b = __stackBase__ + 56 | 0;
    $c = __stackBase__ + 64 | 0;
    $e0 = __stackBase__ + 72 | 0;
    $e1 = __stackBase__ + 80 | 0;
    $z = __stackBase__ + 88 | 0;
    $z2 = __stackBase__ + 96 | 0;
    $1 = $P;
    $2 = _curve_a_coeff($1) | 0;
    $3 = $2;
    $4 = $a | 0;
    $5 = $b | 0;
    $6 = _curve_x_coord($1) | 0;
    $7 = $6;
    $8 = $QR;
    $9 = _curve_x_coord($8) | 0;
    $10 = $9;
    $11 = _curve_y_coord($8) | 0;
    $12 = $11;
    $13 = $R;
    $14 = _curve_x_coord($13) | 0;
    $15 = $14;
    $16 = _curve_y_coord($13) | 0;
    $17 = $16;
    $18 = $res | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    _element_init433($4, $19);
    $20 = HEAP32[$18 >> 2] | 0;
    _element_init433($5, $20);
    $21 = $c | 0;
    $22 = HEAP32[$18 >> 2] | 0;
    _element_init433($21, $22);
    $23 = $e0 | 0;
    $24 = HEAP32[$18 >> 2] | 0;
    _element_init433($23, $24);
    $25 = $e1 | 0;
    $26 = HEAP32[$18 >> 2] | 0;
    _element_init433($25, $26);
    $27 = $z | 0;
    $28 = HEAP32[$18 >> 2] | 0;
    _element_init433($27, $28);
    $29 = $z2 | 0;
    $30 = HEAP32[$18 >> 2] | 0;
    _element_init433($29, $30);
    _element_set1449($27);
    _element_set1449($29);
    $31 = $v | 0;
    $32 = HEAP32[$18 >> 2] | 0;
    _element_init433($31, $32);
    $33 = $vd | 0;
    $34 = HEAP32[$18 >> 2] | 0;
    _element_init433($33, $34);
    $35 = $v1 | 0;
    $36 = HEAP32[$18 >> 2] | 0;
    _element_init433($35, $36);
    $37 = $vd1 | 0;
    $38 = HEAP32[$18 >> 2] | 0;
    _element_init433($37, $38);
    $39 = $Z | 0;
    $40 = $P | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    _element_init433($39, $41);
    $42 = $Z1 | 0;
    $43 = HEAP32[$40 >> 2] | 0;
    _element_init433($42, $43);
    _element_set453($39, $P);
    $44 = $Z;
    $45 = _curve_x_coord($44) | 0;
    $46 = $45;
    $47 = _curve_y_coord($44) | 0;
    $48 = $47;
    _element_set1449($31);
    _element_set1449($33);
    _element_set1449($35);
    _element_set1449($37);
    $49 = $p + 436 | 0;
    $50 = HEAP32[$49 >> 2] | 0;
    $51 = ($50 | 0) > 0;
    if ($51) {
      $i_0120 = 0;
      label = 2;
      break;
    } else {
      $i_0_lcssa = 0;
      label = 3;
      break;
    }
   case 2:
    _element_square445($31, $31);
    _element_square445($33, $33);
    _element_square445($4, $29);
    _element_mul446($4, $4, $3);
    _element_square445($5, $46);
    _element_double443($23, $5);
    _element_add447($5, $5, $23);
    _element_add447($4, $4, $5);
    _element_neg444($4, $4);
    _element_double443($23, $48);
    _element_mul446($5, $23, $29);
    _element_mul446($5, $5, $27);
    _element_mul446($21, $46, $4);
    _element_mul446($4, $4, $29);
    _element_mul446($23, $23, $48);
    _element_add447($21, $21, $23);
    _element_neg444($21, $21);
    _element_mul446($23, $4, $10);
    _element_mul446($25, $5, $12);
    _element_add447($23, $23, $25);
    _element_add447($23, $23, $21);
    _element_mul446($31, $31, $23);
    _element_mul446($23, $4, $15);
    _element_mul446($25, $5, $17);
    _element_add447($23, $23, $25);
    _element_add447($23, $23, $21);
    _element_mul446($33, $33, $23);
    _element_square445($23, $46);
    _element_double443($25, $23);
    _element_add447($23, $23, $25);
    _element_square445($25, $29);
    _element_mul446($25, $25, $3);
    _element_add447($23, $23, $25);
    _element_mul446($27, $48, $27);
    _element_double443($27, $27);
    _element_square445($29, $27);
    _element_square445($4, $48);
    _element_mul446($25, $46, $4);
    _element_double443($25, $25);
    _element_double443($25, $25);
    _element_double443($5, $25);
    _element_square445($46, $23);
    _element_sub448($46, $46, $5);
    _element_square445($4, $4);
    _element_double443($4, $4);
    _element_double443($4, $4);
    _element_double443($4, $4);
    _element_sub448($25, $25, $46);
    _element_mul446($23, $23, $25);
    _element_sub448($48, $23, $4);
    _element_mul446($23, $10, $29);
    _element_sub448($23, $23, $46);
    _element_mul446($33, $33, $23);
    _element_mul446($23, $15, $29);
    _element_sub448($23, $23, $46);
    _element_mul446($31, $31, $23);
    $52 = $i_0120 + 1 | 0;
    $exitcond124 = ($52 | 0) == ($50 | 0);
    if ($exitcond124) {
      $i_0_lcssa = $50;
      label = 3;
      break;
    } else {
      $i_0120 = $52;
      label = 2;
      break;
    }
   case 3:
    _element_invert450($27, $27);
    _element_square445($23, $27);
    _element_mul446($46, $46, $23);
    _element_mul446($23, $23, $27);
    _element_mul446($48, $48, $23);
    _element_set1449($27);
    _element_set1449($29);
    $53 = $p + 440 | 0;
    $54 = HEAP32[$53 >> 2] | 0;
    $55 = ($54 | 0) < 0;
    if ($55) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _element_set453($35, $33);
    _element_set453($37, $31);
    _element_mul446($23, $10, $29);
    _element_sub448($23, $23, $46);
    _element_mul446($37, $37, $23);
    _element_mul446($23, $15, $29);
    _element_sub448($23, $23, $46);
    _element_mul446($35, $35, $23);
    _element_neg444($42, $39);
    label = 6;
    break;
   case 5:
    _element_set453($35, $31);
    _element_set453($37, $33);
    _element_set453($42, $39);
    label = 6;
    break;
   case 6:
    $59 = $p + 432 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    $61 = ($i_0_lcssa | 0) < ($60 | 0);
    if ($61) {
      $i_1119 = $i_0_lcssa;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _element_square445($31, $31);
    _element_square445($33, $33);
    _element_square445($4, $29);
    _element_mul446($4, $4, $3);
    _element_square445($5, $46);
    _element_double443($23, $5);
    _element_add447($5, $5, $23);
    _element_add447($4, $4, $5);
    _element_neg444($4, $4);
    _element_double443($23, $48);
    _element_mul446($5, $23, $29);
    _element_mul446($5, $5, $27);
    _element_mul446($21, $46, $4);
    _element_mul446($4, $4, $29);
    _element_mul446($23, $23, $48);
    _element_add447($21, $21, $23);
    _element_neg444($21, $21);
    _element_mul446($23, $4, $10);
    _element_mul446($25, $5, $12);
    _element_add447($23, $23, $25);
    _element_add447($23, $23, $21);
    _element_mul446($31, $31, $23);
    _element_mul446($23, $4, $15);
    _element_mul446($25, $5, $17);
    _element_add447($23, $23, $25);
    _element_add447($23, $23, $21);
    _element_mul446($33, $33, $23);
    _element_square445($23, $46);
    _element_double443($25, $23);
    _element_add447($23, $23, $25);
    _element_square445($25, $29);
    _element_mul446($25, $25, $3);
    _element_add447($23, $23, $25);
    _element_mul446($27, $48, $27);
    _element_double443($27, $27);
    _element_square445($29, $27);
    _element_square445($4, $48);
    _element_mul446($25, $46, $4);
    _element_double443($25, $25);
    _element_double443($25, $25);
    _element_double443($5, $25);
    _element_square445($46, $23);
    _element_sub448($46, $46, $5);
    _element_square445($4, $4);
    _element_double443($4, $4);
    _element_double443($4, $4);
    _element_double443($4, $4);
    _element_sub448($25, $25, $46);
    _element_mul446($23, $23, $25);
    _element_sub448($48, $23, $4);
    _element_mul446($23, $10, $29);
    _element_sub448($23, $23, $46);
    _element_mul446($33, $33, $23);
    _element_mul446($23, $15, $29);
    _element_sub448($23, $23, $46);
    _element_mul446($31, $31, $23);
    $62 = $i_1119 + 1 | 0;
    $exitcond = ($62 | 0) == ($60 | 0);
    if ($exitcond) {
      label = 8;
      break;
    } else {
      $i_1119 = $62;
      label = 7;
      break;
    }
   case 8:
    _element_invert450($27, $27);
    _element_square445($23, $27);
    _element_mul446($46, $46, $23);
    _element_mul446($23, $23, $27);
    _element_mul446($48, $48, $23);
    _element_set1449($27);
    _element_set1449($29);
    _element_mul446($31, $31, $35);
    _element_mul446($33, $33, $37);
    $63 = _curve_x_coord($44) | 0;
    $64 = $63;
    $65 = _curve_y_coord($44) | 0;
    $66 = $65;
    $67 = $Z1;
    $68 = _curve_x_coord($67) | 0;
    $69 = $68;
    $70 = _curve_y_coord($67) | 0;
    $71 = $70;
    _element_sub448($5, $69, $64);
    _element_sub448($4, $66, $71);
    _element_mul446($21, $64, $71);
    _element_mul446($23, $66, $69);
    _element_sub448($21, $21, $23);
    _element_mul446($23, $4, $10);
    _element_mul446($25, $5, $12);
    _element_add447($23, $23, $25);
    _element_add447($23, $23, $21);
    _element_mul446($31, $31, $23);
    _element_mul446($23, $4, $15);
    _element_mul446($25, $5, $17);
    _element_add447($23, $23, $25);
    _element_add447($23, $23, $21);
    _element_mul446($33, $33, $23);
    _element_add447($39, $39, $42);
    _element_mul446($23, $10, $29);
    _element_sub448($23, $23, $46);
    _element_mul446($33, $33, $23);
    _element_mul446($23, $15, $29);
    _element_sub448($23, $23, $46);
    _element_mul446($31, $31, $23);
    $72 = $p + 444 | 0;
    $73 = HEAP32[$72 >> 2] | 0;
    $74 = ($73 | 0) > 0;
    if ($74) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _element_mul446($23, $10, $29);
    _element_sub448($23, $23, $7);
    _element_mul446($31, $31, $23);
    _element_mul446($23, $15, $29);
    _element_sub448($23, $23, $7);
    _element_mul446($33, $33, $23);
    label = 10;
    break;
   case 10:
    _element_invert450($33, $33);
    _element_mul446($res, $31, $33);
    _element_clear435($31);
    _element_clear435($33);
    _element_clear435($35);
    _element_clear435($37);
    _element_clear435($27);
    _element_clear435($29);
    _element_clear435($39);
    _element_clear435($42);
    _element_clear435($4);
    _element_clear435($5);
    _element_clear435($21);
    _element_clear435($23);
    _element_clear435($25);
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_set_mpz440($e, $z) {
  $e = $e | 0;
  $z = $z | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 12 >> 2] & 1023]($e, $z);
  return;
}
function _e_finalpow($e) {
  $e = $e | 0;
  var $3 = 0;
  $3 = HEAP32[$e + 4 >> 2] | 0;
  _element_pow_mpz452($3, $3, (HEAP32[(HEAP32[$e >> 2] | 0) + 192 >> 2] | 0) + 452 | 0);
  return;
}
function _phi_identity441($out, $in, $pairing) {
  $out = $out | 0;
  $in = $in | 0;
  $pairing = $pairing | 0;
  _element_set453($out, $in);
  return;
}
function _e_pairing_option_set($pairing, $key, $value) {
  $pairing = $pairing | 0;
  $key = $key | 0;
  $value = $value | 0;
  var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $7 = 0, $9 = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _strcmp($key | 0, 9024) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 8;
      break;
    }
   case 2:
    $4 = _strcmp($value | 0, 8840) | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $7 = $pairing + 468 | 0;
    HEAP32[$7 >> 2] = 514;
    HEAP32[370] = 640;
    label = 8;
    break;
   case 4:
    $9 = _strcmp($value | 0, 8392) | 0;
    $10 = ($9 | 0) == 0;
    if ($10) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $12 = $pairing + 468 | 0;
    HEAP32[$12 >> 2] = 514;
    HEAP32[370] = 158;
    label = 8;
    break;
   case 6:
    $14 = _strcmp($value | 0, 8272) | 0;
    $15 = ($14 | 0) == 0;
    if ($15) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $17 = $pairing + 468 | 0;
    HEAP32[$17 >> 2] = 524;
    label = 8;
    break;
   case 8:
    return;
  }
}
function _e_pairing_clear($pairing) {
  $pairing = $pairing | 0;
  var $3 = 0;
  _field_clear($pairing + 236 | 0);
  $3 = HEAP32[$pairing + 504 >> 2] | 0;
  _field_clear($3);
  _field_clear($3 + 216 | 0);
  _element_clear435($3 + 448 | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023]($3);
  ___gmpz_clear($pairing + 452 | 0);
  ___gmpz_clear($pairing | 0);
  _field_clear($pairing + 12 | 0);
  return;
}
function _e_miller_affine($res, $P, $QR, $R, $p) {
  $res = $res | 0;
  $P = $P | 0;
  $QR = $QR | 0;
  $R = $R | 0;
  $p = $p | 0;
  var $v = 0, $vd = 0, $v1 = 0, $vd1 = 0, $Z = 0, $Z1 = 0, $a = 0, $b = 0, $c = 0, $e0 = 0, $e1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $i_068 = 0, $48 = 0, $exitcond72 = 0, $i_0_lcssa = 0, $49 = 0, $50 = 0, $51 = 0, $55 = 0, $56 = 0, $57 = 0, $i_167 = 0, $58 = 0, $exitcond = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 88 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $v = __stackBase__ | 0;
    $vd = __stackBase__ + 8 | 0;
    $v1 = __stackBase__ + 16 | 0;
    $vd1 = __stackBase__ + 24 | 0;
    $Z = __stackBase__ + 32 | 0;
    $Z1 = __stackBase__ + 40 | 0;
    $a = __stackBase__ + 48 | 0;
    $b = __stackBase__ + 56 | 0;
    $c = __stackBase__ + 64 | 0;
    $e0 = __stackBase__ + 72 | 0;
    $e1 = __stackBase__ + 80 | 0;
    $1 = $P;
    $2 = _curve_x_coord($1) | 0;
    $3 = $2;
    $4 = _curve_a_coeff($1) | 0;
    $5 = $4;
    $6 = $QR;
    $7 = _curve_x_coord($6) | 0;
    $8 = $7;
    $9 = _curve_y_coord($6) | 0;
    $10 = $9;
    $11 = $R;
    $12 = _curve_x_coord($11) | 0;
    $13 = $12;
    $14 = _curve_y_coord($11) | 0;
    $15 = $14;
    $16 = $a | 0;
    $17 = $res | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    _element_init433($16, $18);
    $19 = $b | 0;
    $20 = HEAP32[$17 >> 2] | 0;
    _element_init433($19, $20);
    $21 = $c | 0;
    $22 = HEAP32[$17 >> 2] | 0;
    _element_init433($21, $22);
    $23 = $e0 | 0;
    $24 = HEAP32[$17 >> 2] | 0;
    _element_init433($23, $24);
    $25 = $e1 | 0;
    $26 = HEAP32[$17 >> 2] | 0;
    _element_init433($25, $26);
    $27 = $v | 0;
    $28 = HEAP32[$17 >> 2] | 0;
    _element_init433($27, $28);
    $29 = $vd | 0;
    $30 = HEAP32[$17 >> 2] | 0;
    _element_init433($29, $30);
    $31 = $v1 | 0;
    $32 = HEAP32[$17 >> 2] | 0;
    _element_init433($31, $32);
    $33 = $vd1 | 0;
    $34 = HEAP32[$17 >> 2] | 0;
    _element_init433($33, $34);
    $35 = $Z | 0;
    $36 = $P | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    _element_init433($35, $37);
    $38 = $Z1 | 0;
    $39 = HEAP32[$36 >> 2] | 0;
    _element_init433($38, $39);
    _element_set453($35, $P);
    $40 = $Z;
    $41 = _curve_x_coord($40) | 0;
    $42 = $41;
    $43 = _curve_y_coord($40) | 0;
    $44 = $43;
    _element_set1449($27);
    _element_set1449($29);
    _element_set1449($31);
    _element_set1449($33);
    $45 = $p + 436 | 0;
    $46 = HEAP32[$45 >> 2] | 0;
    $47 = ($46 | 0) > 0;
    if ($47) {
      $i_068 = 0;
      label = 2;
      break;
    } else {
      $i_0_lcssa = 0;
      label = 3;
      break;
    }
   case 2:
    _element_square445($27, $27);
    _element_square445($29, $29);
    _element_square445($16, $42);
    _element_mul_si454($16, $16);
    _element_add447($16, $16, $5);
    _element_neg444($16, $16);
    _element_add447($19, $44, $44);
    _element_mul446($23, $19, $44);
    _element_mul446($21, $16, $42);
    _element_add447($21, $21, $23);
    _element_neg444($21, $21);
    _element_mul446($23, $16, $8);
    _element_mul446($25, $19, $10);
    _element_add447($23, $23, $25);
    _element_add447($23, $23, $21);
    _element_mul446($27, $27, $23);
    _element_mul446($23, $16, $13);
    _element_mul446($25, $19, $15);
    _element_add447($23, $23, $25);
    _element_add447($23, $23, $21);
    _element_mul446($29, $29, $23);
    _element_double443($35, $35);
    _element_sub448($23, $8, $42);
    _element_mul446($29, $29, $23);
    _element_sub448($23, $13, $42);
    _element_mul446($27, $27, $23);
    $48 = $i_068 + 1 | 0;
    $exitcond72 = ($48 | 0) == ($46 | 0);
    if ($exitcond72) {
      $i_0_lcssa = $46;
      label = 3;
      break;
    } else {
      $i_068 = $48;
      label = 2;
      break;
    }
   case 3:
    $49 = $p + 440 | 0;
    $50 = HEAP32[$49 >> 2] | 0;
    $51 = ($50 | 0) < 0;
    if ($51) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    _element_set453($31, $29);
    _element_set453($33, $27);
    _element_sub448($23, $8, $42);
    _element_mul446($33, $33, $23);
    _element_sub448($23, $13, $42);
    _element_mul446($31, $31, $23);
    _element_neg444($38, $35);
    label = 6;
    break;
   case 5:
    _element_set453($31, $27);
    _element_set453($33, $29);
    _element_set453($38, $35);
    label = 6;
    break;
   case 6:
    $55 = $p + 432 | 0;
    $56 = HEAP32[$55 >> 2] | 0;
    $57 = ($i_0_lcssa | 0) < ($56 | 0);
    if ($57) {
      $i_167 = $i_0_lcssa;
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    _element_square445($27, $27);
    _element_square445($29, $29);
    _element_square445($16, $42);
    _element_mul_si454($16, $16);
    _element_add447($16, $16, $5);
    _element_neg444($16, $16);
    _element_add447($19, $44, $44);
    _element_mul446($23, $19, $44);
    _element_mul446($21, $16, $42);
    _element_add447($21, $21, $23);
    _element_neg444($21, $21);
    _element_mul446($23, $16, $8);
    _element_mul446($25, $19, $10);
    _element_add447($23, $23, $25);
    _element_add447($23, $23, $21);
    _element_mul446($27, $27, $23);
    _element_mul446($23, $16, $13);
    _element_mul446($25, $19, $15);
    _element_add447($23, $23, $25);
    _element_add447($23, $23, $21);
    _element_mul446($29, $29, $23);
    _element_double443($35, $35);
    _element_sub448($23, $8, $42);
    _element_mul446($29, $29, $23);
    _element_sub448($23, $13, $42);
    _element_mul446($27, $27, $23);
    $58 = $i_167 + 1 | 0;
    $exitcond = ($58 | 0) == ($56 | 0);
    if ($exitcond) {
      label = 8;
      break;
    } else {
      $i_167 = $58;
      label = 7;
      break;
    }
   case 8:
    _element_mul446($27, $27, $31);
    _element_mul446($29, $29, $33);
    $59 = _curve_x_coord($40) | 0;
    $60 = $59;
    $61 = _curve_y_coord($40) | 0;
    $62 = $61;
    $63 = $Z1;
    $64 = _curve_x_coord($63) | 0;
    $65 = $64;
    $66 = _curve_y_coord($63) | 0;
    $67 = $66;
    _element_sub448($19, $65, $60);
    _element_sub448($16, $62, $67);
    _element_mul446($21, $60, $67);
    _element_mul446($23, $62, $65);
    _element_sub448($21, $21, $23);
    _element_mul446($23, $16, $8);
    _element_mul446($25, $19, $10);
    _element_add447($23, $23, $25);
    _element_add447($23, $23, $21);
    _element_mul446($27, $27, $23);
    _element_mul446($23, $16, $13);
    _element_mul446($25, $19, $15);
    _element_add447($23, $23, $25);
    _element_add447($23, $23, $21);
    _element_mul446($29, $29, $23);
    _element_add447($35, $35, $38);
    _element_sub448($23, $8, $42);
    _element_mul446($29, $29, $23);
    _element_sub448($23, $13, $42);
    _element_mul446($27, $27, $23);
    $68 = $p + 444 | 0;
    $69 = HEAP32[$68 >> 2] | 0;
    $70 = ($69 | 0) > 0;
    if ($70) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    _element_sub448($23, $8, $3);
    _element_mul446($27, $27, $23);
    _element_sub448($23, $13, $3);
    _element_mul446($29, $29, $23);
    label = 10;
    break;
   case 10:
    _element_invert450($29, $29);
    _element_mul446($res, $27, $29);
    _element_clear435($27);
    _element_clear435($29);
    _element_clear435($31);
    _element_clear435($33);
    _element_clear435($35);
    _element_clear435($38);
    _element_clear435($16);
    _element_clear435($19);
    _element_clear435($21);
    _element_clear435($23);
    _element_clear435($25);
    STACKTOP = __stackBase__;
    return;
  }
}
function _e_pairing_ellnet($out, $in1, $in2, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $pairing = $pairing | 0;
  var $cm3 = 0, $cm2 = 0, $cm1 = 0, $c0 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $dm1 = 0, $d0 = 0, $d1 = 0, $A = 0, $B = 0, $C = 0, $sm2 = 0, $sm1 = 0, $s0 = 0, $s1 = 0, $s2 = 0, $s3 = 0, $tm2 = 0, $tm1 = 0, $t0 = 0, $t1 = 0, $t2 = 0, $t3 = 0, $e0 = 0, $e1 = 0, $u = 0, $v = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $m_0 = 0, $49 = 0, $50 = 0, $54 = 0, $55 = 0, $57 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 240 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $cm3 = __stackBase__ | 0;
    $cm2 = __stackBase__ + 8 | 0;
    $cm1 = __stackBase__ + 16 | 0;
    $c0 = __stackBase__ + 24 | 0;
    $c1 = __stackBase__ + 32 | 0;
    $c2 = __stackBase__ + 40 | 0;
    $c3 = __stackBase__ + 48 | 0;
    $c4 = __stackBase__ + 56 | 0;
    $dm1 = __stackBase__ + 64 | 0;
    $d0 = __stackBase__ + 72 | 0;
    $d1 = __stackBase__ + 80 | 0;
    $A = __stackBase__ + 88 | 0;
    $B = __stackBase__ + 96 | 0;
    $C = __stackBase__ + 104 | 0;
    $sm2 = __stackBase__ + 112 | 0;
    $sm1 = __stackBase__ + 120 | 0;
    $s0 = __stackBase__ + 128 | 0;
    $s1 = __stackBase__ + 136 | 0;
    $s2 = __stackBase__ + 144 | 0;
    $s3 = __stackBase__ + 152 | 0;
    $tm2 = __stackBase__ + 160 | 0;
    $tm1 = __stackBase__ + 168 | 0;
    $t0 = __stackBase__ + 176 | 0;
    $t1 = __stackBase__ + 184 | 0;
    $t2 = __stackBase__ + 192 | 0;
    $t3 = __stackBase__ + 200 | 0;
    $e0 = __stackBase__ + 208 | 0;
    $e1 = __stackBase__ + 216 | 0;
    $u = __stackBase__ + 224 | 0;
    $v = __stackBase__ + 232 | 0;
    $1 = $in1;
    $2 = _curve_a_coeff($1) | 0;
    $3 = $2;
    $4 = _curve_b_coeff($1) | 0;
    $5 = $4;
    $6 = _curve_x_coord($1) | 0;
    $7 = $6;
    $8 = _curve_y_coord($1) | 0;
    $9 = $8;
    $10 = $in2;
    $11 = _curve_x_coord($10) | 0;
    $12 = $11;
    $13 = _curve_y_coord($10) | 0;
    $14 = $13;
    $15 = $cm3 | 0;
    _element_init_same_as442($15, $7);
    $16 = $cm2 | 0;
    _element_init_same_as442($16, $7);
    $17 = $cm1 | 0;
    _element_init_same_as442($17, $7);
    $18 = $c0 | 0;
    _element_init_same_as442($18, $7);
    $19 = $c1 | 0;
    _element_init_same_as442($19, $7);
    $20 = $c2 | 0;
    _element_init_same_as442($20, $7);
    $21 = $c3 | 0;
    _element_init_same_as442($21, $7);
    $22 = $c4 | 0;
    _element_init_same_as442($22, $7);
    $23 = $C | 0;
    _element_init_same_as442($23, $7);
    $24 = $dm1 | 0;
    _element_init_same_as442($24, $out);
    $25 = $d0 | 0;
    _element_init_same_as442($25, $out);
    $26 = $d1 | 0;
    _element_init_same_as442($26, $out);
    $27 = $A | 0;
    _element_init_same_as442($27, $7);
    $28 = $B | 0;
    _element_init_same_as442($28, $out);
    _element_double443($19, $9);
    _element_neg444($15, $19);
    _element_square445($16, $7);
    _element_square445($23, $16);
    _element_mul446($17, $5, $7);
    _element_double443($17, $17);
    _element_square445($22, $3);
    _element_mul446($20, $17, $16);
    _element_double443($20, $20);
    _element_mul446($18, $3, $23);
    _element_add447($20, $20, $18);
    _element_mul446($18, $22, $16);
    _element_sub448($20, $20, $18);
    _element_double443($18, $20);
    _element_double443($18, $18);
    _element_add447($20, $20, $18);
    _element_mul446($18, $17, $3);
    _element_square445($21, $5);
    _element_double443($21, $21);
    _element_double443($21, $21);
    _element_add447($18, $18, $21);
    _element_double443($18, $18);
    _element_mul446($21, $3, $22);
    _element_add447($18, $18, $21);
    _element_sub448($20, $20, $18);
    _element_mul446($18, $16, $23);
    _element_add447($21, $18, $20);
    _element_mul446($21, $21, $19);
    _element_double443($21, $21);
    _element_mul446($18, $3, $16);
    _element_add447($18, $18, $17);
    _element_double443($18, $18);
    _element_add447($18, $18, $23);
    _element_double443($20, $18);
    _element_add447($18, $18, $20);
    _element_sub448($20, $18, $22);
    _element_set1449($18);
    _element_neg444($16, $18);
    _element_square445($23, $19);
    _element_mul446($22, $23, $19);
    _element_mul446($22, $22, $21);
    _element_square445($23, $20);
    _element_mul446($23, $23, $20);
    _element_sub448($22, $22, $23);
    _element_sub448($27, $7, $12);
    _element_double443($23, $7);
    _element_add447($23, $23, $12);
    _element_square445($17, $27);
    _element_mul446($17, $23, $17);
    _element_add447($26, $9, $14);
    _element_square445($26, $26);
    _element_sub448($28, $17, $26);
    _element_invert450($28, $28);
    _element_invert450($27, $27);
    _element_sub448($26, $9, $14);
    _element_mul446($26, $26, $27);
    _element_square445($26, $26);
    _element_sub448($26, $23, $26);
    _element_set0451($17);
    _element_invert450($23, $19);
    _element_set1449($24);
    _element_set1449($25);
    $29 = $sm2 | 0;
    _element_init_same_as442($29, $7);
    $30 = $sm1 | 0;
    _element_init_same_as442($30, $7);
    $31 = $s0 | 0;
    _element_init_same_as442($31, $7);
    $32 = $s1 | 0;
    _element_init_same_as442($32, $7);
    $33 = $s2 | 0;
    _element_init_same_as442($33, $7);
    $34 = $s3 | 0;
    _element_init_same_as442($34, $7);
    $35 = $tm2 | 0;
    _element_init_same_as442($35, $7);
    $36 = $tm1 | 0;
    _element_init_same_as442($36, $7);
    $37 = $t0 | 0;
    _element_init_same_as442($37, $7);
    $38 = $t1 | 0;
    _element_init_same_as442($38, $7);
    $39 = $t2 | 0;
    _element_init_same_as442($39, $7);
    $40 = $t3 | 0;
    _element_init_same_as442($40, $7);
    $41 = $e0 | 0;
    _element_init_same_as442($41, $7);
    $42 = $e1 | 0;
    _element_init_same_as442($42, $7);
    $43 = $u | 0;
    _element_init_same_as442($43, $25);
    $44 = $v | 0;
    _element_init_same_as442($44, $25);
    $45 = $pairing | 0;
    $46 = ___gmpz_sizeinbase($45, 2) | 0;
    $47 = $46 - 2 | 0;
    $m_0 = $47;
    label = 2;
    break;
   case 2:
    _element_square445($29, $16);
    _element_square445($30, $17);
    _element_square445($31, $18);
    _element_square445($32, $19);
    _element_square445($33, $20);
    _element_square445($34, $21);
    _element_mul446($35, $15, $17);
    _element_mul446($36, $16, $18);
    _element_mul446($37, $17, $19);
    _element_mul446($38, $18, $20);
    _element_mul446($39, $19, $21);
    _element_mul446($40, $20, $22);
    _element_square445($43, $25);
    _element_mul446($44, $24, $26);
    $49 = ___gmpz_tstbit($45, $m_0) | 0;
    $50 = ($49 | 0) == 0;
    if ($50) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _element_mul446($41, $37, $29);
    _element_mul446($42, $35, $31);
    _element_sub448($15, $41, $42);
    _element_mul446($15, $15, $23);
    _element_mul446($41, $37, $30);
    _element_mul446($42, $36, $31);
    _element_sub448($16, $41, $42);
    _element_mul446($41, $38, $30);
    _element_mul446($42, $36, $32);
    _element_sub448($17, $41, $42);
    _element_mul446($17, $17, $23);
    _element_mul446($41, $38, $31);
    _element_mul446($42, $37, $32);
    _element_sub448($18, $41, $42);
    _element_mul446($41, $39, $31);
    _element_mul446($42, $37, $33);
    _element_sub448($19, $41, $42);
    _element_mul446($19, $19, $23);
    _element_mul446($41, $39, $32);
    _element_mul446($42, $38, $33);
    _element_sub448($20, $41, $42);
    _element_mul446($41, $40, $32);
    _element_mul446($42, $38, $34);
    _element_sub448($21, $41, $42);
    _element_mul446($21, $21, $23);
    _element_mul446($41, $40, $33);
    _element_mul446($42, $39, $34);
    _element_sub448($22, $41, $42);
    _element_mul446($out, $43, $37);
    _element_mul446($24, $44, $31);
    _element_sub448($24, $24, $out);
    _element_mul446($out, $43, $38);
    _element_mul446($25, $44, $32);
    _element_sub448($25, $25, $out);
    _element_mul446($25, $25, $27);
    _element_mul446($out, $43, $39);
    _element_mul446($26, $44, $33);
    _element_sub448($26, $26, $out);
    _element_mul446($26, $26, $28);
    label = 5;
    break;
   case 4:
    _element_mul446($41, $36, $29);
    _element_mul446($42, $35, $30);
    _element_sub448($15, $41, $42);
    _element_mul446($41, $37, $29);
    _element_mul446($42, $35, $31);
    _element_sub448($16, $41, $42);
    _element_mul446($16, $16, $23);
    _element_mul446($41, $37, $30);
    _element_mul446($42, $36, $31);
    _element_sub448($17, $41, $42);
    _element_mul446($41, $38, $30);
    _element_mul446($42, $36, $32);
    _element_sub448($18, $41, $42);
    _element_mul446($18, $18, $23);
    _element_mul446($41, $38, $31);
    _element_mul446($42, $37, $32);
    _element_sub448($19, $41, $42);
    _element_mul446($41, $39, $31);
    _element_mul446($42, $37, $33);
    _element_sub448($20, $41, $42);
    _element_mul446($20, $20, $23);
    _element_mul446($41, $39, $32);
    _element_mul446($42, $38, $33);
    _element_sub448($21, $41, $42);
    _element_mul446($41, $40, $32);
    _element_mul446($42, $38, $34);
    _element_sub448($22, $41, $42);
    _element_mul446($22, $22, $23);
    _element_mul446($out, $43, $36);
    _element_mul446($24, $44, $30);
    _element_sub448($24, $24, $out);
    _element_mul446($out, $43, $37);
    _element_mul446($25, $44, $31);
    _element_sub448($25, $25, $out);
    _element_mul446($out, $43, $38);
    _element_mul446($26, $44, $32);
    _element_sub448($26, $26, $out);
    _element_mul446($26, $26, $27);
    label = 5;
    break;
   case 5:
    $54 = ($m_0 | 0) == 0;
    $55 = $m_0 - 1 | 0;
    if ($54) {
      label = 6;
      break;
    } else {
      $m_0 = $55;
      label = 2;
      break;
    }
   case 6:
    _element_invert450($19, $19);
    _element_mul446($26, $26, $19);
    $57 = $pairing + 452 | 0;
    _element_pow_mpz452($out, $26, $57);
    _element_clear435($24);
    _element_clear435($25);
    _element_clear435($26);
    _element_clear435($15);
    _element_clear435($16);
    _element_clear435($17);
    _element_clear435($18);
    _element_clear435($19);
    _element_clear435($20);
    _element_clear435($21);
    _element_clear435($22);
    _element_clear435($29);
    _element_clear435($30);
    _element_clear435($31);
    _element_clear435($32);
    _element_clear435($33);
    _element_clear435($34);
    _element_clear435($35);
    _element_clear435($36);
    _element_clear435($37);
    _element_clear435($38);
    _element_clear435($39);
    _element_clear435($40);
    _element_clear435($41);
    _element_clear435($42);
    _element_clear435($27);
    _element_clear435($28);
    _element_clear435($23);
    _element_clear435($43);
    _element_clear435($44);
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_init_same_as442($e, $e2) {
  $e = $e | 0;
  $e2 = $e2 | 0;
  _element_init433($e, HEAP32[$e2 >> 2] | 0);
  return;
}
function _element_double443($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 96 >> 2] & 1023]($n, $a);
  return;
}
function _element_neg444($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 124 >> 2] & 1023]($n, $a);
  return;
}
function _element_square445($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 112 >> 2] & 1023]($n, $a);
  return;
}
function _element_mul446($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 48 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_add447($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 40 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_sub448($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 44 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_set1449($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 28 >> 2] & 1023]($e);
  return;
}
function _element_invert450($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 120 >> 2] & 1023]($n, $a);
  return;
}
function _element_set0451($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 24 >> 2] & 1023]($e);
  return;
}
function _element_pow_mpz452($x, $a, $n) {
  $x = $x | 0;
  $a = $a | 0;
  $n = $n | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$x >> 2] | 0) + 116 >> 2] & 1023]($x, $a, $n);
  return;
}
function _element_set453($e, $a) {
  $e = $e | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 20 >> 2] & 1023]($e, $a);
  return;
}
function _element_mul_si454($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 88 >> 2] & 1023]($n, $a, 3);
  return;
}
function _pbc_param_init_f($par, $tab) {
  $par = $par | 0;
  $tab = $tab | 0;
  var $2 = 0, $4 = 0, $8 = 0, $12 = 0, $16 = 0, $20 = 0;
  _f_init464($par);
  $2 = HEAP32[$par + 4 >> 2] | 0;
  $4 = _lookup_mpz($2, $tab, 5872) | 0;
  $8 = (_lookup_mpz($2 + 12 | 0, $tab, 8064) | 0) + $4 | 0;
  $12 = $8 + (_lookup_mpz($2 + 24 | 0, $tab, 6968) | 0) | 0;
  $16 = $12 + (_lookup_mpz($2 + 36 | 0, $tab, 6312) | 0) | 0;
  $20 = $16 + (_lookup_mpz($2 + 48 | 0, $tab, 5920) | 0) | 0;
  return $20 + (_lookup_mpz($2 + 60 | 0, $tab, 5568) | 0) | 0;
}
function _f_init464($p) {
  $p = $p | 0;
  var $3 = 0;
  HEAP32[$p >> 2] = 1464;
  $3 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](72) | 0;
  HEAP32[$p + 4 >> 2] = $3;
  ___gmpz_init($3);
  ___gmpz_init($3 + 12 | 0);
  ___gmpz_init($3 + 24 | 0);
  ___gmpz_init($3 + 36 | 0);
  ___gmpz_init($3 + 48 | 0);
  ___gmpz_init($3 + 60 | 0);
  return;
}
function _element_init465($e, $f) {
  $e = $e | 0;
  $f = $f | 0;
  HEAP32[$e >> 2] = $f;
  FUNCTION_TABLE_vi[HEAP32[$f + 4 >> 2] & 1023]($e);
  return;
}
function _element_clear469($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 8 >> 2] & 1023]($e);
  return;
}
function _element_item471($e, $i) {
  $e = $e | 0;
  $i = $i | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$e >> 2] | 0) + 64 >> 2] & 1023]($e, $i) | 0;
}
function _element_set_mpz472($e, $z) {
  $e = $e | 0;
  $z = $z | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 12 >> 2] & 1023]($e, $z);
  return;
}
function _element_mul473($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 48 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_neg474($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 124 >> 2] & 1023]($n, $a);
  return;
}
function _element_pow_mpz475($x, $a, $n) {
  $x = $x | 0;
  $a = $a | 0;
  $n = $n | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$x >> 2] | 0) + 116 >> 2] & 1023]($x, $a, $n);
  return;
}
function _element_x476($a) {
  $a = $a | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$a >> 2] | 0) + 68 >> 2] & 1023]($a) | 0;
}
function _element_y477($a) {
  $a = $a | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$a >> 2] | 0) + 72 >> 2] & 1023]($a) | 0;
}
function _f_clear478($data) {
  $data = $data | 0;
  ___gmpz_clear($data);
  ___gmpz_clear($data + 12 | 0);
  ___gmpz_clear($data + 24 | 0);
  ___gmpz_clear($data + 36 | 0);
  ___gmpz_clear($data + 48 | 0);
  ___gmpz_clear($data + 60 | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023]($data);
  return;
}
function _f_init_pairing($pairing, $data) {
  $pairing = $pairing | 0;
  $data = $data | 0;
  var $e0 = 0, $e1 = 0, $e2 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $23 = 0, $24 = 0, $26 = 0, $28 = 0, $31 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $46 = 0, $50 = 0, $52 = 0, $54 = 0, $61 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  $e0 = __stackBase__ + 8 | 0;
  $e1 = __stackBase__ + 16 | 0;
  $e2 = __stackBase__ + 24 | 0;
  $2 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](1348) | 0;
  HEAP32[$pairing + 504 >> 2] = $2;
  $4 = $pairing | 0;
  ___gmpz_init($4);
  $6 = $data + 12 | 0;
  ___gmpz_set($4, $6);
  _field_init_fp($pairing + 12 | 0, $4);
  $8 = $2;
  $9 = $data;
  _field_init_fp($8, $9);
  $12 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](8) | 0;
  $14 = $2 + 208 | 0;
  HEAP32[$14 >> 2] = $12;
  _element_init465($12, $8);
  _element_set_mpz472(HEAP32[$14 >> 2] | 0, $data + 36 | 0);
  $18 = $2 + 216 | 0;
  $19 = $18;
  _field_init_quadratic($18, $2);
  $23 = $2 + 432 | 0;
  _field_init_poly($23, $19);
  $24 = __stackBase__ | 0;
  _element_init465($24, $23);
  _poly_set_coeff1($24, 6);
  $26 = $2 + 1296 | 0;
  _element_init465($26, $19);
  $28 = $2 + 1304 | 0;
  _element_init465($28, $19);
  $31 = $data + 48 | 0;
  _element_set_mpz472(_element_x476($26) | 0, $31);
  $34 = $data + 60 | 0;
  _element_set_mpz472(_element_y477($26) | 0, $34);
  _element_set480(_element_item471($24, 0) | 0, $26);
  $37 = $2 + 648 | 0;
  _field_init_polymod($37, $24);
  _element_neg474($26, $26);
  _element_invert481($28, $26);
  _element_clear469($24);
  $38 = $e0 | 0;
  _element_init465($38, $8);
  $39 = $e1 | 0;
  _element_init465($39, $8);
  $40 = $e2 | 0;
  _element_init465($40, $19);
  _element_set_mpz472($39, $data + 24 | 0);
  $43 = $2 + 864 | 0;
  $46 = $e0;
  _field_init_curve_ab($43, $46, $e1, $4, 0);
  _element_set_mpz472($38, $31);
  _element_neg474($38, $38);
  _element_mul473(_element_x476($40) | 0, $38, $39);
  _element_set_mpz472($38, $34);
  _element_neg474($38, $38);
  _element_mul473(_element_y477($40) | 0, $38, $39);
  _element_clear469($38);
  _element_init465($38, $19);
  $50 = $2 + 1080 | 0;
  $52 = $50;
  _field_init_curve_ab($52, $46, $e2, $4, 0);
  _element_clear469($38);
  _element_clear469($39);
  _element_clear469($40);
  $54 = __stackBase__ + 32 | 0;
  ___gmpz_init($54);
  ___gmpz_sub($54, $9, $6);
  ___gmpz_add_ui($54, $54, 1);
  _pbc_mpz_curve_order_extn($54, $9, $54, 12);
  ___gmpz_divexact($54, $54, $6);
  ___gmpz_divexact($54, $54, $6);
  _field_curve_set_quotient_cmp($52, $54);
  ___gmpz_clear($54);
  HEAP32[$pairing + 228 >> 2] = $43;
  HEAP32[$pairing + 232 >> 2] = $50;
  _pairing_GT_init($pairing, $37);
  HEAP32[$pairing + 496 >> 2] = 268;
  HEAP32[$pairing + 468 >> 2] = 466;
  HEAP32[$pairing + 480 >> 2] = 694;
  $61 = $2 + 1312 | 0;
  ___gmpz_init($61);
  ___gmpz_mul($61, $9, $9);
  ___gmpz_sub_ui($61, $61, 1);
  ___gmpz_mul($61, $61, $9);
  ___gmpz_mul($61, $61, $9);
  ___gmpz_add_ui($61, $61, 1);
  ___gmpz_divexact($61, $61, $6);
  $63 = $2 + 1324 | 0;
  _element_init465($63, $19);
  $65 = $2 + 1332 | 0;
  _element_init465($65, $19);
  $67 = $2 + 1340 | 0;
  _element_init465($67, $19);
  $68 = __stackBase__ + 48 | 0;
  _element_init465($68, $37);
  _element_set1482(_element_item471($68, 1) | 0);
  _element_pow_mpz475($68, $68, $9);
  _element_pow_mpz475($68, $68, $9);
  _element_set480($63, _element_item471($68, 1) | 0);
  _element_pow_mpz475($68, $68, $9);
  _element_pow_mpz475($68, $68, $9);
  _element_pow_mpz475($68, $68, $9);
  _element_pow_mpz475($68, $68, $9);
  _element_set480($65, _element_item471($68, 1) | 0);
  _element_pow_mpz475($68, $68, $9);
  _element_pow_mpz475($68, $68, $9);
  _element_set480($67, _element_item471($68, 1) | 0);
  _element_clear469($68);
  STACKTOP = __stackBase__;
  return;
}
function _f_out_str479($stream, $data) {
  $stream = $stream | 0;
  $data = $data | 0;
  _param_out_type($stream, 5344);
  _param_out_mpz($stream, 5872, $data);
  _param_out_mpz($stream, 8064, $data + 12 | 0);
  _param_out_mpz($stream, 6968, $data + 24 | 0);
  _param_out_mpz($stream, 6312, $data + 36 | 0);
  _param_out_mpz($stream, 5920, $data + 48 | 0);
  _param_out_mpz($stream, 5568, $data + 60 | 0);
  return;
}
function _element_set480($e, $a) {
  $e = $e | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 20 >> 2] & 1023]($e, $a);
  return;
}
function _element_invert481($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 120 >> 2] & 1023]($n, $a);
  return;
}
function _f_finalpow($out) {
  $out = $out | 0;
  _f_tateexp(HEAP32[$out + 4 >> 2] | 0);
  return;
}
function _f_pairing($out, $in1, $in2, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $pairing = $pairing | 0;
  var $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $11 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $2 = HEAP32[$pairing + 504 >> 2] | 0;
  $3 = __stackBase__ | 0;
  $5 = $2 + 216 | 0;
  _element_init465($3, $5);
  $6 = __stackBase__ + 8 | 0;
  _element_init465($6, $5);
  $7 = $in2;
  $11 = $2 + 1304 | 0;
  _element_mul473($3, _curve_x_coord($7) | 0, $11);
  _element_mul473($6, _curve_y_coord($7) | 0, $11);
  _cc_miller_no_denom($out, $pairing | 0, $in1, $3, $6, $2 + 1296 | 0);
  _element_clear469($3);
  _element_clear469($6);
  _f_tateexp($out);
  STACKTOP = __stackBase__;
  return;
}
function _f_pairing_clear($pairing) {
  $pairing = $pairing | 0;
  var $3 = 0;
  _field_clear($pairing + 236 | 0);
  $3 = HEAP32[$pairing + 504 >> 2] | 0;
  _element_clear469($3 + 1296 | 0);
  _element_clear469($3 + 1304 | 0);
  ___gmpz_clear($3 + 1312 | 0);
  _element_clear469($3 + 1324 | 0);
  _element_clear469($3 + 1332 | 0);
  _element_clear469($3 + 1340 | 0);
  _field_clear($3 + 1080 | 0);
  _field_clear($3 + 864 | 0);
  _field_clear($3 + 648 | 0);
  _field_clear($3 + 432 | 0);
  _field_clear($3 + 216 | 0);
  _field_clear($3);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023]($3);
  ___gmpz_clear($pairing | 0);
  _field_clear($pairing + 12 | 0);
  return;
}
function _element_set1482($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 28 >> 2] & 1023]($e);
  return;
}
function _cc_miller_no_denom($res, $q, $P, $Qx, $Qy, $negalpha) {
  $res = $res | 0;
  $q = $q | 0;
  $P = $P | 0;
  $Qx = $Qx | 0;
  $Qy = $Qy | 0;
  $negalpha = $negalpha | 0;
  var $v = 0, $Z = 0, $a = 0, $b = 0, $c = 0, $t0 = 0, $e0 = 0, $e1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $m_0 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $140 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $245 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 64 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $v = __stackBase__ | 0;
    $Z = __stackBase__ + 8 | 0;
    $a = __stackBase__ + 16 | 0;
    $b = __stackBase__ + 24 | 0;
    $c = __stackBase__ + 32 | 0;
    $t0 = __stackBase__ + 40 | 0;
    $e0 = __stackBase__ + 48 | 0;
    $e1 = __stackBase__ + 56 | 0;
    $1 = $P;
    $2 = _curve_x_coord($1) | 0;
    $3 = $2;
    $4 = _curve_y_coord($1) | 0;
    $5 = $4;
    $6 = $a | 0;
    $7 = $2;
    $8 = HEAP32[$7 >> 2] | 0;
    _element_init465($6, $8);
    $9 = $b | 0;
    $10 = $a | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    _element_init465($9, $11);
    $12 = $c | 0;
    $13 = HEAP32[$10 >> 2] | 0;
    _element_init465($12, $13);
    $14 = $t0 | 0;
    $15 = HEAP32[$10 >> 2] | 0;
    _element_init465($14, $15);
    $16 = $e0 | 0;
    $17 = $res | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    _element_init465($16, $18);
    $19 = $e1 | 0;
    $20 = $Qx | 0;
    $21 = HEAP32[$20 >> 2] | 0;
    _element_init465($19, $21);
    $22 = $v | 0;
    $23 = HEAP32[$17 >> 2] | 0;
    _element_init465($22, $23);
    $24 = $Z | 0;
    $25 = $P | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    _element_init465($24, $26);
    _element_set480($24, $P);
    $27 = $Z;
    $28 = _curve_x_coord($27) | 0;
    $29 = $28;
    $30 = _curve_y_coord($27) | 0;
    $31 = $30;
    _element_set1482($22);
    $32 = ___gmpz_sizeinbase($q, 2) | 0;
    $33 = $32 - 2 | 0;
    $m_0 = $33;
    label = 2;
    break;
   case 2:
    _element_square483($6, $29);
    _element_mul_si484($6, $6);
    _element_neg474($6, $6);
    _element_add485($9, $31, $31);
    _element_mul473($14, $9, $31);
    _element_mul473($12, $6, $29);
    _element_add485($12, $12, $14);
    _element_neg474($12, $12);
    $35 = _element_item471($16, 0) | 0;
    $36 = _element_item471($22, 2) | 0;
    _element_mul473($19, $36, $Qx);
    $37 = _element_x476($19) | 0;
    $38 = _element_x476($19) | 0;
    _element_mul473($37, $38, $6);
    $39 = _element_y477($19) | 0;
    $40 = _element_y477($19) | 0;
    _element_mul473($39, $40, $6);
    $41 = _element_item471($22, 3) | 0;
    _element_mul473($35, $41, $Qy);
    $42 = _element_x476($35) | 0;
    $43 = _element_x476($35) | 0;
    _element_mul473($42, $43, $9);
    $44 = _element_y477($35) | 0;
    $45 = _element_y477($35) | 0;
    _element_mul473($44, $45, $9);
    _element_add485($35, $35, $19);
    _element_mul473($35, $35, $negalpha);
    $46 = _element_x476($19) | 0;
    $47 = _element_item471($22, 0) | 0;
    $48 = _element_x476($47) | 0;
    _element_mul473($46, $48, $12);
    $49 = _element_y477($19) | 0;
    $50 = _element_item471($22, 0) | 0;
    $51 = _element_y477($50) | 0;
    _element_mul473($49, $51, $12);
    _element_add485($35, $35, $19);
    $52 = _element_item471($16, 1) | 0;
    $53 = _element_item471($22, 3) | 0;
    _element_mul473($19, $53, $Qx);
    $54 = _element_x476($19) | 0;
    $55 = _element_x476($19) | 0;
    _element_mul473($54, $55, $6);
    $56 = _element_y477($19) | 0;
    $57 = _element_y477($19) | 0;
    _element_mul473($56, $57, $6);
    $58 = _element_item471($22, 4) | 0;
    _element_mul473($52, $58, $Qy);
    $59 = _element_x476($52) | 0;
    $60 = _element_x476($52) | 0;
    _element_mul473($59, $60, $9);
    $61 = _element_y477($52) | 0;
    $62 = _element_y477($52) | 0;
    _element_mul473($61, $62, $9);
    _element_add485($52, $52, $19);
    _element_mul473($52, $52, $negalpha);
    $63 = _element_x476($19) | 0;
    $64 = _element_item471($22, 1) | 0;
    $65 = _element_x476($64) | 0;
    _element_mul473($63, $65, $12);
    $66 = _element_y477($19) | 0;
    $67 = _element_item471($22, 1) | 0;
    $68 = _element_y477($67) | 0;
    _element_mul473($66, $68, $12);
    _element_add485($52, $52, $19);
    $69 = _element_item471($16, 2) | 0;
    $70 = _element_item471($22, 4) | 0;
    _element_mul473($19, $70, $Qx);
    $71 = _element_x476($19) | 0;
    $72 = _element_x476($19) | 0;
    _element_mul473($71, $72, $6);
    $73 = _element_y477($19) | 0;
    $74 = _element_y477($19) | 0;
    _element_mul473($73, $74, $6);
    $75 = _element_item471($22, 5) | 0;
    _element_mul473($69, $75, $Qy);
    $76 = _element_x476($69) | 0;
    $77 = _element_x476($69) | 0;
    _element_mul473($76, $77, $9);
    $78 = _element_y477($69) | 0;
    $79 = _element_y477($69) | 0;
    _element_mul473($78, $79, $9);
    _element_add485($69, $69, $19);
    _element_mul473($69, $69, $negalpha);
    $80 = _element_x476($19) | 0;
    $81 = _element_item471($22, 2) | 0;
    $82 = _element_x476($81) | 0;
    _element_mul473($80, $82, $12);
    $83 = _element_y477($19) | 0;
    $84 = _element_item471($22, 2) | 0;
    $85 = _element_y477($84) | 0;
    _element_mul473($83, $85, $12);
    _element_add485($69, $69, $19);
    $86 = _element_item471($16, 3) | 0;
    $87 = _element_item471($22, 5) | 0;
    _element_mul473($19, $87, $Qx);
    _element_mul473($19, $19, $negalpha);
    $88 = _element_x476($19) | 0;
    $89 = _element_x476($19) | 0;
    _element_mul473($88, $89, $6);
    $90 = _element_y477($19) | 0;
    $91 = _element_y477($19) | 0;
    _element_mul473($90, $91, $6);
    $92 = _element_item471($22, 0) | 0;
    _element_mul473($86, $92, $Qy);
    $93 = _element_x476($86) | 0;
    $94 = _element_x476($86) | 0;
    _element_mul473($93, $94, $9);
    $95 = _element_y477($86) | 0;
    $96 = _element_y477($86) | 0;
    _element_mul473($95, $96, $9);
    _element_add485($86, $86, $19);
    $97 = _element_x476($19) | 0;
    $98 = _element_item471($22, 3) | 0;
    $99 = _element_x476($98) | 0;
    _element_mul473($97, $99, $12);
    $100 = _element_y477($19) | 0;
    $101 = _element_item471($22, 3) | 0;
    $102 = _element_y477($101) | 0;
    _element_mul473($100, $102, $12);
    _element_add485($86, $86, $19);
    $103 = _element_item471($16, 4) | 0;
    $104 = _element_item471($22, 0) | 0;
    _element_mul473($19, $104, $Qx);
    $105 = _element_x476($19) | 0;
    $106 = _element_x476($19) | 0;
    _element_mul473($105, $106, $6);
    $107 = _element_y477($19) | 0;
    $108 = _element_y477($19) | 0;
    _element_mul473($107, $108, $6);
    $109 = _element_item471($22, 1) | 0;
    _element_mul473($103, $109, $Qy);
    $110 = _element_x476($103) | 0;
    $111 = _element_x476($103) | 0;
    _element_mul473($110, $111, $9);
    $112 = _element_y477($103) | 0;
    $113 = _element_y477($103) | 0;
    _element_mul473($112, $113, $9);
    _element_add485($103, $103, $19);
    $114 = _element_x476($19) | 0;
    $115 = _element_item471($22, 4) | 0;
    $116 = _element_x476($115) | 0;
    _element_mul473($114, $116, $12);
    $117 = _element_y477($19) | 0;
    $118 = _element_item471($22, 4) | 0;
    $119 = _element_y477($118) | 0;
    _element_mul473($117, $119, $12);
    _element_add485($103, $103, $19);
    $120 = _element_item471($16, 5) | 0;
    $121 = _element_item471($22, 1) | 0;
    _element_mul473($19, $121, $Qx);
    $122 = _element_x476($19) | 0;
    $123 = _element_x476($19) | 0;
    _element_mul473($122, $123, $6);
    $124 = _element_y477($19) | 0;
    $125 = _element_y477($19) | 0;
    _element_mul473($124, $125, $6);
    $126 = _element_item471($22, 2) | 0;
    _element_mul473($120, $126, $Qy);
    $127 = _element_x476($120) | 0;
    $128 = _element_x476($120) | 0;
    _element_mul473($127, $128, $9);
    $129 = _element_y477($120) | 0;
    $130 = _element_y477($120) | 0;
    _element_mul473($129, $130, $9);
    _element_add485($120, $120, $19);
    $131 = _element_x476($19) | 0;
    $132 = _element_item471($22, 5) | 0;
    $133 = _element_x476($132) | 0;
    _element_mul473($131, $133, $12);
    $134 = _element_y477($19) | 0;
    $135 = _element_item471($22, 5) | 0;
    $136 = _element_y477($135) | 0;
    _element_mul473($134, $136, $12);
    _element_add485($120, $120, $19);
    _element_set480($22, $16);
    $137 = ($m_0 | 0) == 0;
    if ($137) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _element_double486($24, $24);
    $139 = ___gmpz_tstbit($q, $m_0) | 0;
    $140 = ($139 | 0) == 0;
    if ($140) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _element_sub487($9, $3, $29);
    _element_sub487($6, $31, $5);
    _element_mul473($14, $9, $31);
    _element_mul473($12, $6, $29);
    _element_add485($12, $12, $14);
    _element_neg474($12, $12);
    $142 = _element_item471($16, 0) | 0;
    $143 = _element_item471($22, 2) | 0;
    _element_mul473($19, $143, $Qx);
    $144 = _element_x476($19) | 0;
    $145 = _element_x476($19) | 0;
    _element_mul473($144, $145, $6);
    $146 = _element_y477($19) | 0;
    $147 = _element_y477($19) | 0;
    _element_mul473($146, $147, $6);
    $148 = _element_item471($22, 3) | 0;
    _element_mul473($142, $148, $Qy);
    $149 = _element_x476($142) | 0;
    $150 = _element_x476($142) | 0;
    _element_mul473($149, $150, $9);
    $151 = _element_y477($142) | 0;
    $152 = _element_y477($142) | 0;
    _element_mul473($151, $152, $9);
    _element_add485($142, $142, $19);
    _element_mul473($142, $142, $negalpha);
    $153 = _element_x476($19) | 0;
    $154 = _element_item471($22, 0) | 0;
    $155 = _element_x476($154) | 0;
    _element_mul473($153, $155, $12);
    $156 = _element_y477($19) | 0;
    $157 = _element_item471($22, 0) | 0;
    $158 = _element_y477($157) | 0;
    _element_mul473($156, $158, $12);
    _element_add485($142, $142, $19);
    $159 = _element_item471($16, 1) | 0;
    $160 = _element_item471($22, 3) | 0;
    _element_mul473($19, $160, $Qx);
    $161 = _element_x476($19) | 0;
    $162 = _element_x476($19) | 0;
    _element_mul473($161, $162, $6);
    $163 = _element_y477($19) | 0;
    $164 = _element_y477($19) | 0;
    _element_mul473($163, $164, $6);
    $165 = _element_item471($22, 4) | 0;
    _element_mul473($159, $165, $Qy);
    $166 = _element_x476($159) | 0;
    $167 = _element_x476($159) | 0;
    _element_mul473($166, $167, $9);
    $168 = _element_y477($159) | 0;
    $169 = _element_y477($159) | 0;
    _element_mul473($168, $169, $9);
    _element_add485($159, $159, $19);
    _element_mul473($159, $159, $negalpha);
    $170 = _element_x476($19) | 0;
    $171 = _element_item471($22, 1) | 0;
    $172 = _element_x476($171) | 0;
    _element_mul473($170, $172, $12);
    $173 = _element_y477($19) | 0;
    $174 = _element_item471($22, 1) | 0;
    $175 = _element_y477($174) | 0;
    _element_mul473($173, $175, $12);
    _element_add485($159, $159, $19);
    $176 = _element_item471($16, 2) | 0;
    $177 = _element_item471($22, 4) | 0;
    _element_mul473($19, $177, $Qx);
    $178 = _element_x476($19) | 0;
    $179 = _element_x476($19) | 0;
    _element_mul473($178, $179, $6);
    $180 = _element_y477($19) | 0;
    $181 = _element_y477($19) | 0;
    _element_mul473($180, $181, $6);
    $182 = _element_item471($22, 5) | 0;
    _element_mul473($176, $182, $Qy);
    $183 = _element_x476($176) | 0;
    $184 = _element_x476($176) | 0;
    _element_mul473($183, $184, $9);
    $185 = _element_y477($176) | 0;
    $186 = _element_y477($176) | 0;
    _element_mul473($185, $186, $9);
    _element_add485($176, $176, $19);
    _element_mul473($176, $176, $negalpha);
    $187 = _element_x476($19) | 0;
    $188 = _element_item471($22, 2) | 0;
    $189 = _element_x476($188) | 0;
    _element_mul473($187, $189, $12);
    $190 = _element_y477($19) | 0;
    $191 = _element_item471($22, 2) | 0;
    $192 = _element_y477($191) | 0;
    _element_mul473($190, $192, $12);
    _element_add485($176, $176, $19);
    $193 = _element_item471($16, 3) | 0;
    $194 = _element_item471($22, 5) | 0;
    _element_mul473($19, $194, $Qx);
    _element_mul473($19, $19, $negalpha);
    $195 = _element_x476($19) | 0;
    $196 = _element_x476($19) | 0;
    _element_mul473($195, $196, $6);
    $197 = _element_y477($19) | 0;
    $198 = _element_y477($19) | 0;
    _element_mul473($197, $198, $6);
    $199 = _element_item471($22, 0) | 0;
    _element_mul473($193, $199, $Qy);
    $200 = _element_x476($193) | 0;
    $201 = _element_x476($193) | 0;
    _element_mul473($200, $201, $9);
    $202 = _element_y477($193) | 0;
    $203 = _element_y477($193) | 0;
    _element_mul473($202, $203, $9);
    _element_add485($193, $193, $19);
    $204 = _element_x476($19) | 0;
    $205 = _element_item471($22, 3) | 0;
    $206 = _element_x476($205) | 0;
    _element_mul473($204, $206, $12);
    $207 = _element_y477($19) | 0;
    $208 = _element_item471($22, 3) | 0;
    $209 = _element_y477($208) | 0;
    _element_mul473($207, $209, $12);
    _element_add485($193, $193, $19);
    $210 = _element_item471($16, 4) | 0;
    $211 = _element_item471($22, 0) | 0;
    _element_mul473($19, $211, $Qx);
    $212 = _element_x476($19) | 0;
    $213 = _element_x476($19) | 0;
    _element_mul473($212, $213, $6);
    $214 = _element_y477($19) | 0;
    $215 = _element_y477($19) | 0;
    _element_mul473($214, $215, $6);
    $216 = _element_item471($22, 1) | 0;
    _element_mul473($210, $216, $Qy);
    $217 = _element_x476($210) | 0;
    $218 = _element_x476($210) | 0;
    _element_mul473($217, $218, $9);
    $219 = _element_y477($210) | 0;
    $220 = _element_y477($210) | 0;
    _element_mul473($219, $220, $9);
    _element_add485($210, $210, $19);
    $221 = _element_x476($19) | 0;
    $222 = _element_item471($22, 4) | 0;
    $223 = _element_x476($222) | 0;
    _element_mul473($221, $223, $12);
    $224 = _element_y477($19) | 0;
    $225 = _element_item471($22, 4) | 0;
    $226 = _element_y477($225) | 0;
    _element_mul473($224, $226, $12);
    _element_add485($210, $210, $19);
    $227 = _element_item471($16, 5) | 0;
    $228 = _element_item471($22, 1) | 0;
    _element_mul473($19, $228, $Qx);
    $229 = _element_x476($19) | 0;
    $230 = _element_x476($19) | 0;
    _element_mul473($229, $230, $6);
    $231 = _element_y477($19) | 0;
    $232 = _element_y477($19) | 0;
    _element_mul473($231, $232, $6);
    $233 = _element_item471($22, 2) | 0;
    _element_mul473($227, $233, $Qy);
    $234 = _element_x476($227) | 0;
    $235 = _element_x476($227) | 0;
    _element_mul473($234, $235, $9);
    $236 = _element_y477($227) | 0;
    $237 = _element_y477($227) | 0;
    _element_mul473($236, $237, $9);
    _element_add485($227, $227, $19);
    $238 = _element_x476($19) | 0;
    $239 = _element_item471($22, 5) | 0;
    $240 = _element_x476($239) | 0;
    _element_mul473($238, $240, $12);
    $241 = _element_y477($19) | 0;
    $242 = _element_item471($22, 5) | 0;
    $243 = _element_y477($242) | 0;
    _element_mul473($241, $243, $12);
    _element_add485($227, $227, $19);
    _element_set480($22, $16);
    _element_add485($24, $24, $P);
    label = 5;
    break;
   case 5:
    $245 = $m_0 - 1 | 0;
    _element_square483($22, $22);
    $m_0 = $245;
    label = 2;
    break;
   case 6:
    _element_set480($res, $22);
    _element_clear469($22);
    _element_clear469($24);
    _element_clear469($6);
    _element_clear469($9);
    _element_clear469($12);
    _element_clear469($14);
    _element_clear469($16);
    _element_clear469($19);
    STACKTOP = __stackBase__;
    return;
  }
}
function _f_tateexp($out) {
  $out = $out | 0;
  var $6 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $33 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 24 | 0;
  $6 = HEAP32[(HEAP32[(HEAP32[$out >> 2] | 0) + 192 >> 2] | 0) + 504 >> 2] | 0;
  $7 = __stackBase__ | 0;
  $9 = $6 + 648 | 0;
  _element_init465($7, $9);
  $10 = __stackBase__ + 8 | 0;
  _element_init465($10, $9);
  $11 = __stackBase__ + 16 | 0;
  _element_init465($11, $6 + 216 | 0);
  $14 = _element_item471($10, 0) | 0;
  _element_set480($14, _element_item471($out, 0) | 0);
  $16 = _element_item471($10, 1) | 0;
  $19 = $6 + 1340 | 0;
  _element_mul473($16, _element_item471($out, 1) | 0, $19);
  _element_square483($11, $19);
  $20 = _element_item471($10, 2) | 0;
  _element_mul473($20, _element_item471($out, 2) | 0, $11);
  _element_mul473($11, $11, $19);
  $22 = _element_item471($10, 3) | 0;
  _element_mul473($22, _element_item471($out, 3) | 0, $11);
  _element_mul473($11, $11, $19);
  $24 = _element_item471($10, 4) | 0;
  _element_mul473($24, _element_item471($out, 4) | 0, $11);
  _element_mul473($11, $11, $19);
  $26 = _element_item471($10, 5) | 0;
  _element_mul473($26, _element_item471($out, 5) | 0, $11);
  $28 = _element_item471($7, 0) | 0;
  _element_set480($28, _element_item471($out, 0) | 0);
  $30 = _element_item471($7, 1) | 0;
  $33 = $6 + 1332 | 0;
  _element_mul473($30, _element_item471($out, 1) | 0, $33);
  _element_square483($11, $33);
  $34 = _element_item471($7, 2) | 0;
  _element_mul473($34, _element_item471($out, 2) | 0, $11);
  _element_mul473($11, $11, $33);
  $36 = _element_item471($7, 3) | 0;
  _element_mul473($36, _element_item471($out, 3) | 0, $11);
  _element_mul473($11, $11, $33);
  $38 = _element_item471($7, 4) | 0;
  _element_mul473($38, _element_item471($out, 4) | 0, $11);
  _element_mul473($11, $11, $33);
  $40 = _element_item471($7, 5) | 0;
  _element_mul473($40, _element_item471($out, 5) | 0, $11);
  _element_mul473($10, $10, $7);
  $42 = _element_item471($7, 0) | 0;
  _element_set480($42, _element_item471($out, 0) | 0);
  $44 = _element_item471($7, 1) | 0;
  $47 = $6 + 1324 | 0;
  _element_mul473($44, _element_item471($out, 1) | 0, $47);
  _element_square483($11, $47);
  $48 = _element_item471($7, 2) | 0;
  _element_mul473($48, _element_item471($out, 2) | 0, $11);
  _element_mul473($11, $11, $47);
  $50 = _element_item471($7, 3) | 0;
  _element_mul473($50, _element_item471($out, 3) | 0, $11);
  _element_mul473($11, $11, $47);
  $52 = _element_item471($7, 4) | 0;
  _element_mul473($52, _element_item471($out, 4) | 0, $11);
  _element_mul473($11, $11, $47);
  $54 = _element_item471($7, 5) | 0;
  _element_mul473($54, _element_item471($out, 5) | 0, $11);
  _element_mul473($7, $7, $out);
  _element_invert481($7, $7);
  _element_mul473($out, $10, $7);
  _element_clear469($11);
  _element_clear469($7);
  _element_clear469($10);
  _element_pow_mpz475($out, $out, $6 + 1312 | 0);
  STACKTOP = __stackBase__;
  return;
}
function _element_square483($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 112 >> 2] & 1023]($n, $a);
  return;
}
function _element_mul_si484($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 88 >> 2] & 1023]($n, $a, 3);
  return;
}
function _element_add485($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 40 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_double486($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 96 >> 2] & 1023]($n, $a);
  return;
}
function _element_sub487($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 44 >> 2] & 1023]($n, $a, $b);
  return;
}
function _pbc_param_init_g($par, $tab) {
  $par = $par | 0;
  $tab = $tab | 0;
  var $2 = 0, $4 = 0, $7 = 0, $10 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $25 = 0, $28 = 0, $31 = 0, $36 = 0, $51 = 0, $58 = 0, $65 = 0, $72 = 0, $79 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  _g_init($par);
  $2 = HEAP32[$par + 4 >> 2] | 0;
  $4 = _lookup_mpz($2, $tab, 5704) | 0;
  $7 = _lookup_mpz($2 + 12 | 0, $tab, 7992) | 0;
  $10 = _lookup_mpz($2 + 24 | 0, $tab, 6936) | 0;
  $13 = _lookup_mpz($2 + 36 | 0, $tab, 6280) | 0;
  $16 = _lookup_mpz($2 + 48 | 0, $tab, 5880) | 0;
  $19 = _lookup_mpz($2 + 60 | 0, $tab, 5536) | 0;
  $22 = _lookup_mpz($2 + 72 | 0, $tab, 5336) | 0;
  $25 = _lookup_mpz($2 + 84 | 0, $tab, 5088) | 0;
  $28 = _lookup_mpz($2 + 100 | 0, $tab, 4504) | 0;
  $31 = $2 + 96 | 0;
  HEAP32[$31 >> 2] = FUNCTION_TABLE_iii[HEAP32[226] & 1023](HEAP32[$31 >> 2] | 0, 60) | 0;
  $36 = __stackBase__ | 0;
  _sprintf($36 | 0, 4352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
  ___gmpz_init(HEAP32[$31 >> 2] | 0);
  $51 = (_lookup_mpz(HEAP32[$31 >> 2] | 0, $tab, $36) | 0) + (((((((($7 + $4 | 0) + $10 | 0) + $13 | 0) + $16 | 0) + $19 | 0) + $22 | 0) + $25 | 0) + $28 | 0) | 0;
  _sprintf($36 | 0, 4352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = 1, tempInt) | 0);
  ___gmpz_init((HEAP32[$31 >> 2] | 0) + 12 | 0);
  $58 = (_lookup_mpz((HEAP32[$31 >> 2] | 0) + 12 | 0, $tab, $36) | 0) + $51 | 0;
  _sprintf($36 | 0, 4352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = 2, tempInt) | 0);
  ___gmpz_init((HEAP32[$31 >> 2] | 0) + 24 | 0);
  $65 = (_lookup_mpz((HEAP32[$31 >> 2] | 0) + 24 | 0, $tab, $36) | 0) + $58 | 0;
  _sprintf($36 | 0, 4352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = 3, tempInt) | 0);
  ___gmpz_init((HEAP32[$31 >> 2] | 0) + 36 | 0);
  $72 = (_lookup_mpz((HEAP32[$31 >> 2] | 0) + 36 | 0, $tab, $36) | 0) + $65 | 0;
  _sprintf($36 | 0, 4352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = 4, tempInt) | 0);
  ___gmpz_init((HEAP32[$31 >> 2] | 0) + 48 | 0);
  $79 = (_lookup_mpz((HEAP32[$31 >> 2] | 0) + 48 | 0, $tab, $36) | 0) + $72 | 0;
  STACKTOP = __stackBase__;
  return $79 | 0;
}
function _g_init($p) {
  $p = $p | 0;
  var $3 = 0;
  HEAP32[$p >> 2] = 1440;
  $3 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](112) | 0;
  HEAP32[$p + 4 >> 2] = $3;
  ___gmpz_init($3);
  ___gmpz_init($3 + 12 | 0);
  ___gmpz_init($3 + 24 | 0);
  ___gmpz_init($3 + 36 | 0);
  ___gmpz_init($3 + 48 | 0);
  ___gmpz_init($3 + 60 | 0);
  ___gmpz_init($3 + 72 | 0);
  ___gmpz_init($3 + 84 | 0);
  HEAP32[$3 + 96 >> 2] = 0;
  ___gmpz_init($3 + 100 | 0);
  return;
}
function _element_init507($e, $f) {
  $e = $e | 0;
  $f = $f | 0;
  HEAP32[$e >> 2] = $f;
  FUNCTION_TABLE_vi[HEAP32[$f + 4 >> 2] & 1023]($e);
  return;
}
function _element_item511($e, $i) {
  $e = $e | 0;
  $i = $i | 0;
  return FUNCTION_TABLE_iii[HEAP32[(HEAP32[$e >> 2] | 0) + 64 >> 2] & 1023]($e, $i) | 0;
}
function _element_clear512($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 8 >> 2] & 1023]($e);
  return;
}
function _element_set_mpz513($e, $z) {
  $e = $e | 0;
  $z = $z | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 12 >> 2] & 1023]($e, $z);
  return;
}
function _g_clear($data) {
  $data = $data | 0;
  var $19 = 0;
  ___gmpz_clear($data);
  ___gmpz_clear($data + 12 | 0);
  ___gmpz_clear($data + 24 | 0);
  ___gmpz_clear($data + 36 | 0);
  ___gmpz_clear($data + 48 | 0);
  ___gmpz_clear($data + 60 | 0);
  ___gmpz_clear($data + 72 | 0);
  ___gmpz_clear($data + 84 | 0);
  ___gmpz_clear($data + 100 | 0);
  $19 = $data + 96 | 0;
  ___gmpz_clear(HEAP32[$19 >> 2] | 0);
  ___gmpz_clear((HEAP32[$19 >> 2] | 0) + 12 | 0);
  ___gmpz_clear((HEAP32[$19 >> 2] | 0) + 24 | 0);
  ___gmpz_clear((HEAP32[$19 >> 2] | 0) + 36 | 0);
  ___gmpz_clear((HEAP32[$19 >> 2] | 0) + 48 | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023](HEAP32[$data + 96 >> 2] | 0);
  _free($data);
  return;
}
function _g_init_pairing($pairing, $data) {
  $pairing = $pairing | 0;
  $data = $data | 0;
  var $a = 0, $b = 0, $1 = 0, $3 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $18 = 0, $21 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $32 = 0, $35 = 0, $38 = 0, $41 = 0, $45 = 0, $46 = 0, $49 = 0, $51 = 0, $58 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $69 = 0, $71 = 0, $77 = 0, $79 = 0, $82 = 0, $85 = 0, $86 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  $a = __stackBase__ | 0;
  $b = __stackBase__ + 8 | 0;
  $1 = $pairing | 0;
  ___gmpz_init($1);
  $3 = $data + 36 | 0;
  ___gmpz_set($1, $3);
  _field_init_fp($pairing + 12 | 0, $1);
  HEAP32[$pairing + 468 >> 2] = 120;
  HEAP32[$pairing + 476 >> 2] = 790;
  $8 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](1344) | 0;
  HEAP32[$pairing + 504 >> 2] = $8;
  $10 = $8;
  $11 = $data;
  _field_init_fp($10, $11);
  $12 = $a | 0;
  _element_init507($12, $10);
  $13 = $b | 0;
  _element_init507($13, $10);
  _element_set_mpz513($12, $data + 48 | 0);
  _element_set_mpz513($13, $data + 60 | 0);
  $18 = $8 + 864 | 0;
  $21 = $18;
  _field_init_curve_ab($21, $a, $b, $1, $data + 24 | 0);
  $25 = $8 + 216 | 0;
  _field_init_poly($25, $10);
  $26 = __stackBase__ + 16 | 0;
  _element_init507($26, $25);
  _poly_set_coeff1($26, 5);
  $28 = $data + 96 | 0;
  $29 = _element_item511($26, 0) | 0;
  _element_set_mpz513($29, HEAP32[$28 >> 2] | 0);
  $32 = _element_item511($26, 1) | 0;
  _element_set_mpz513($32, (HEAP32[$28 >> 2] | 0) + 12 | 0);
  $35 = _element_item511($26, 2) | 0;
  _element_set_mpz513($35, (HEAP32[$28 >> 2] | 0) + 24 | 0);
  $38 = _element_item511($26, 3) | 0;
  _element_set_mpz513($38, (HEAP32[$28 >> 2] | 0) + 36 | 0);
  $41 = _element_item511($26, 4) | 0;
  _element_set_mpz513($41, (HEAP32[$28 >> 2] | 0) + 48 | 0);
  $45 = $8 + 432 | 0;
  $46 = $45;
  _field_init_polymod($46, $26);
  _element_clear512($26);
  $49 = FUNCTION_TABLE_ii[HEAP32[230] & 1023](8) | 0;
  $51 = $8 + 640 | 0;
  HEAP32[$51 >> 2] = $49;
  _element_init507($49, $46);
  _element_set_mpz513(HEAP32[(HEAP32[$51 >> 2] | 0) + 4 >> 2] | 0, $data + 100 | 0);
  $58 = $8 + 648 | 0;
  _field_init_quadratic($58, $45);
  $63 = $8 + 1312 | 0;
  $64 = $pairing + 452 | 0;
  ___gmpz_init($64);
  $65 = __stackBase__ + 24 | 0;
  ___gmpz_init($65);
  ___gmpz_set_ui($64, 1);
  ___gmpz_sub($64, $64, $11);
  ___gmpz_mul($65, $11, $11);
  ___gmpz_add($64, $64, $65);
  ___gmpz_mul($65, $65, $11);
  ___gmpz_sub($64, $64, $65);
  ___gmpz_mul($65, $65, $11);
  ___gmpz_add($64, $64, $65);
  ___gmpz_clear($65);
  ___gmpz_divexact($64, $64, $1);
  _element_init507($63, $46);
  $67 = $8 + 1320 | 0;
  _element_init507($67, $46);
  $69 = $8 + 1328 | 0;
  _element_init507($69, $46);
  $71 = $8 + 1336 | 0;
  _element_init507($71, $46);
  _element_set1518((HEAP32[$8 + 1316 >> 2] | 0) + 8 | 0);
  _element_pow_mpz519($63, $63, $11);
  _element_square520($67, $63);
  _element_square520($71, $67);
  _element_mul521($69, $67, $63);
  $77 = $8 + 1080 | 0;
  $79 = $77;
  _field_init_curve_ab_map($79, $21, 660, $45, $1, 0);
  _field_reinit_curve_twist($79);
  $82 = $8 + 1296 | 0;
  _element_init507($82, $46);
  _element_invert522($82, _field_get_nqr($46) | 0);
  $85 = $8 + 1304 | 0;
  _element_init507($85, $46);
  _element_square520($85, $82);
  $86 = __stackBase__ + 40 | 0;
  ___gmpz_init($86);
  ___gmpz_sub($86, $11, $data + 12 | 0);
  ___gmpz_add_ui($86, $86, 1);
  ___gmpz_neg($86, $86);
  _pbc_mpz_curve_order_extn($86, $11, $86, 5);
  ___gmpz_divexact($86, $86, $3);
  _field_curve_set_quotient_cmp($79, $86);
  ___gmpz_clear($86);
  HEAP32[$pairing + 228 >> 2] = $18;
  HEAP32[$pairing + 232 >> 2] = $77;
  _pairing_GT_init($pairing, $58);
  HEAP32[$pairing + 496 >> 2] = 306;
  HEAP32[1012] = 58;
  HEAP32[$pairing + 500 >> 2] = 822;
  HEAP32[$pairing + 484 >> 2] = 36;
  HEAP32[$pairing + 488 >> 2] = 684;
  HEAP32[$pairing + 492 >> 2] = 372;
  HEAP32[$pairing + 480 >> 2] = 596;
  _element_clear512($12);
  _element_clear512($13);
  STACKTOP = __stackBase__;
  return;
}
function _g_out_str($stream, $data) {
  $stream = $stream | 0;
  $data = $data | 0;
  var $16 = 0, $18 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  _param_out_type($stream, 9016);
  _param_out_mpz($stream, 5704, $data);
  _param_out_mpz($stream, 7992, $data + 12 | 0);
  _param_out_mpz($stream, 6936, $data + 24 | 0);
  _param_out_mpz($stream, 6280, $data + 36 | 0);
  _param_out_mpz($stream, 5880, $data + 48 | 0);
  _param_out_mpz($stream, 5536, $data + 60 | 0);
  _param_out_mpz($stream, 5336, $data + 72 | 0);
  _param_out_mpz($stream, 5088, $data + 84 | 0);
  $16 = __stackBase__ | 0;
  $18 = $data + 96 | 0;
  _sprintf($16 | 0, 4352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = 0, tempInt) | 0);
  _param_out_mpz($stream, $16, HEAP32[$18 >> 2] | 0);
  _sprintf($16 | 0, 4352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = 1, tempInt) | 0);
  _param_out_mpz($stream, $16, (HEAP32[$18 >> 2] | 0) + 12 | 0);
  _sprintf($16 | 0, 4352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = 2, tempInt) | 0);
  _param_out_mpz($stream, $16, (HEAP32[$18 >> 2] | 0) + 24 | 0);
  _sprintf($16 | 0, 4352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = 3, tempInt) | 0);
  _param_out_mpz($stream, $16, (HEAP32[$18 >> 2] | 0) + 36 | 0);
  _sprintf($16 | 0, 4352, (tempInt = STACKTOP, STACKTOP = STACKTOP + 8 | 0, HEAP32[tempInt >> 2] = 4, tempInt) | 0);
  _param_out_mpz($stream, $16, (HEAP32[$18 >> 2] | 0) + 48 | 0);
  _param_out_mpz($stream, 4504, $data + 100 | 0);
  STACKTOP = __stackBase__;
  return;
}
function _cc_pairing516($out, $in1, $in2, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $pairing = $pairing | 0;
  var $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $2 = HEAP32[$pairing + 504 >> 2] | 0;
  $3 = __stackBase__ | 0;
  $5 = $2 + 432 | 0;
  _element_init507($3, $5);
  $6 = __stackBase__ + 8 | 0;
  _element_init507($6, $5);
  $7 = $in2;
  _element_mul521($3, _curve_x_coord($7) | 0, $2 + 1296 | 0);
  _element_mul521($6, _curve_y_coord($7) | 0, $2 + 1304 | 0);
  FUNCTION_TABLE_viiiii[HEAP32[1012] & 1023]($out, $pairing | 0, $in1, $3, $6);
  _tatepower10($out, $out, $pairing);
  _element_clear512($3);
  _element_clear512($6);
  STACKTOP = __stackBase__;
  return;
}
function _cc_is_almost_coddh517($a, $b, $c, $d, $pairing) {
  $a = $a | 0;
  $b = $b | 0;
  $c = $c | 0;
  $d = $d | 0;
  $pairing = $pairing | 0;
  var $t0 = 0, $t1 = 0, $t2 = 0, $cx = 0, $cy = 0, $dx = 0, $dy = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $not_ = 0, $_ = 0, $res_0 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $t0 = __stackBase__ | 0;
    $t1 = __stackBase__ + 8 | 0;
    $t2 = __stackBase__ + 16 | 0;
    $cx = __stackBase__ + 24 | 0;
    $cy = __stackBase__ + 32 | 0;
    $dx = __stackBase__ + 40 | 0;
    $dy = __stackBase__ + 48 | 0;
    $1 = $pairing + 504 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $cx | 0;
    $4 = $2 + 432 | 0;
    $5 = $4;
    _element_init507($3, $5);
    $6 = $cy | 0;
    _element_init507($6, $5);
    $7 = $dx | 0;
    _element_init507($7, $5);
    $8 = $dy | 0;
    _element_init507($8, $5);
    $9 = $t0 | 0;
    $10 = $2 + 648 | 0;
    $11 = $10;
    _element_init507($9, $11);
    $12 = $t1 | 0;
    _element_init507($12, $11);
    $13 = $t2 | 0;
    _element_init507($13, $11);
    $14 = $c;
    $15 = _curve_x_coord($14) | 0;
    $16 = $15;
    $17 = $2 + 1296 | 0;
    $18 = $17;
    _element_mul521($3, $16, $18);
    $19 = $d;
    $20 = _curve_x_coord($19) | 0;
    $21 = $20;
    _element_mul521($7, $21, $18);
    $22 = _curve_y_coord($14) | 0;
    $23 = $22;
    $24 = $2 + 1304 | 0;
    $25 = $24;
    _element_mul521($6, $23, $25);
    $26 = _curve_y_coord($19) | 0;
    $27 = $26;
    _element_mul521($8, $27, $25);
    $28 = HEAP32[1012] | 0;
    $29 = $pairing | 0;
    FUNCTION_TABLE_viiiii[$28 & 1023]($9, $29, $a, $7, $8);
    $30 = HEAP32[1012] | 0;
    FUNCTION_TABLE_viiiii[$30 & 1023]($12, $29, $b, $3, $6);
    _tatepower10($9, $9, $pairing);
    _tatepower10($12, $12, $pairing);
    _element_mul521($13, $9, $12);
    $31 = _element_is1540($13) | 0;
    $32 = ($31 | 0) == 0;
    if ($32) {
      label = 2;
      break;
    } else {
      $res_0 = 1;
      label = 3;
      break;
    }
   case 2:
    _element_invert522($12, $12);
    _element_mul521($13, $9, $12);
    $34 = _element_is1540($13) | 0;
    $not_ = ($34 | 0) != 0;
    $_ = $not_ & 1;
    $res_0 = $_;
    label = 3;
    break;
   case 3:
    _element_clear512($3);
    _element_clear512($6);
    _element_clear512($7);
    _element_clear512($8);
    _element_clear512($9);
    _element_clear512($12);
    _element_clear512($13);
    STACKTOP = __stackBase__;
    return $res_0 | 0;
  }
  return 0;
}
function _element_set1518($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 28 >> 2] & 1023]($e);
  return;
}
function _element_pow_mpz519($x, $a, $n) {
  $x = $x | 0;
  $a = $a | 0;
  $n = $n | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$x >> 2] | 0) + 116 >> 2] & 1023]($x, $a, $n);
  return;
}
function _element_square520($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 112 >> 2] & 1023]($n, $a);
  return;
}
function _element_mul521($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 48 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_invert522($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 120 >> 2] & 1023]($n, $a);
  return;
}
function _g_finalpow($e) {
  $e = $e | 0;
  var $1 = 0, $2 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $1 = __stackBase__ | 0;
  $2 = $e + 4 | 0;
  _element_init_same_as524($1, HEAP32[$2 >> 2] | 0);
  _tatepower10($1, HEAP32[$2 >> 2] | 0, HEAP32[(HEAP32[$e >> 2] | 0) + 192 >> 2] | 0);
  _element_set528(HEAP32[$2 >> 2] | 0, $1);
  _element_clear512($1);
  STACKTOP = __stackBase__;
  return;
}
function _cc_miller_no_denom_affine523($res, $q, $P, $Qx, $Qy) {
  $res = $res | 0;
  $q = $q | 0;
  $P = $P | 0;
  $Qx = $Qx | 0;
  $Qy = $Qy | 0;
  var $v = 0, $Z = 0, $a = 0, $b = 0, $c = 0, $t0 = 0, $e0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $m_0 = 0, $34 = 0, $36 = 0, $37 = 0, $40 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 56 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $v = __stackBase__ | 0;
    $Z = __stackBase__ + 8 | 0;
    $a = __stackBase__ + 16 | 0;
    $b = __stackBase__ + 24 | 0;
    $c = __stackBase__ + 32 | 0;
    $t0 = __stackBase__ + 40 | 0;
    $e0 = __stackBase__ + 48 | 0;
    $1 = $P;
    $2 = _curve_a_coeff($1) | 0;
    $3 = $2;
    $4 = _curve_x_coord($1) | 0;
    $5 = $4;
    $6 = _curve_y_coord($1) | 0;
    $7 = $6;
    $8 = $a | 0;
    $9 = $4;
    $10 = HEAP32[$9 >> 2] | 0;
    _element_init507($8, $10);
    $11 = $b | 0;
    $12 = $a | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    _element_init507($11, $13);
    $14 = $c | 0;
    $15 = HEAP32[$12 >> 2] | 0;
    _element_init507($14, $15);
    $16 = $t0 | 0;
    $17 = HEAP32[$12 >> 2] | 0;
    _element_init507($16, $17);
    $18 = $e0 | 0;
    $19 = $res | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    _element_init507($18, $20);
    $21 = $v | 0;
    $22 = HEAP32[$19 >> 2] | 0;
    _element_init507($21, $22);
    $23 = $Z | 0;
    $24 = $P | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    _element_init507($23, $25);
    _element_set528($23, $P);
    $26 = $Z;
    $27 = _curve_x_coord($26) | 0;
    $28 = $27;
    $29 = _curve_y_coord($26) | 0;
    $30 = $29;
    _element_set1518($21);
    $31 = ___gmpz_sizeinbase($q, 2) | 0;
    $32 = $31 - 2 | 0;
    $m_0 = $32;
    label = 2;
    break;
   case 2:
    _element_square520($8, $28);
    _element_mul_si539($8, $8, 3);
    _element_add529($8, $8, $3);
    _element_neg530($8, $8);
    _element_add529($11, $30, $30);
    _element_mul521($16, $11, $30);
    _element_mul521($14, $8, $28);
    _element_add529($14, $14, $16);
    _element_neg530($14, $14);
    _d_miller_evalfn525($18, $8, $11, $14, $Qx, $Qy);
    _element_mul521($21, $21, $18);
    $34 = ($m_0 | 0) == 0;
    if ($34) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _element_double534($23, $23);
    $36 = ___gmpz_tstbit($q, $m_0) | 0;
    $37 = ($36 | 0) == 0;
    if ($37) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _element_sub531($11, $5, $28);
    _element_sub531($8, $30, $7);
    _element_mul521($16, $11, $30);
    _element_mul521($14, $8, $28);
    _element_add529($14, $14, $16);
    _element_neg530($14, $14);
    _d_miller_evalfn525($18, $8, $11, $14, $Qx, $Qy);
    _element_mul521($21, $21, $18);
    _element_add529($23, $23, $P);
    label = 5;
    break;
   case 5:
    $40 = $m_0 - 1 | 0;
    _element_square520($21, $21);
    $m_0 = $40;
    label = 2;
    break;
   case 6:
    _element_set528($res, $21);
    _element_clear512($21);
    _element_clear512($23);
    _element_clear512($8);
    _element_clear512($11);
    _element_clear512($14);
    _element_clear512($16);
    _element_clear512($18);
    STACKTOP = __stackBase__;
    return;
  }
}
function _g_pairing_option_set($pairing, $key, $value) {
  $pairing = $pairing | 0;
  $key = $key | 0;
  $value = $value | 0;
  var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $12 = 0, $13 = 0, $15 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _strcmp($key | 0, 8800) | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 8;
      break;
    }
   case 2:
    $4 = _strcmp($value | 0, 8384) | 0;
    $5 = ($4 | 0) == 0;
    if ($5) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    HEAP32[1012] = 314;
    label = 8;
    break;
   case 4:
    $8 = _strcmp($value | 0, 8256) | 0;
    $9 = ($8 | 0) == 0;
    if ($9) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    HEAP32[1012] = 58;
    label = 8;
    break;
   case 6:
    $12 = _strcmp($value | 0, 8072) | 0;
    $13 = ($12 | 0) == 0;
    if ($13) {
      label = 7;
      break;
    } else {
      label = 8;
      break;
    }
   case 7:
    $15 = $pairing + 468 | 0;
    HEAP32[$15 >> 2] = 376;
    label = 8;
    break;
   case 8:
    return;
  }
}
function _g_pairing_pp_init($p, $in1, $pairing) {
  $p = $p | 0;
  $in1 = $in1 | 0;
  $pairing = $pairing | 0;
  var $Z = 0, $t0 = 0, $a = 0, $b = 0, $c = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $pp_0 = 0, $m_0 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $pp_1 = 0, $46 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 40 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $Z = __stackBase__ | 0;
    $t0 = __stackBase__ + 8 | 0;
    $a = __stackBase__ + 16 | 0;
    $b = __stackBase__ + 24 | 0;
    $c = __stackBase__ + 32 | 0;
    $1 = $in1;
    $2 = _curve_x_coord($1) | 0;
    $3 = $2;
    $4 = _curve_y_coord($1) | 0;
    $5 = $4;
    $6 = $pairing + 504 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $7;
    $9 = $pairing | 0;
    $10 = _curve_a_coeff($1) | 0;
    $11 = $10;
    $12 = $Z | 0;
    $13 = $in1 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    _element_init507($12, $14);
    _element_set528($12, $in1);
    $15 = $Z;
    $16 = _curve_x_coord($15) | 0;
    $17 = $16;
    $18 = _curve_y_coord($15) | 0;
    $19 = $18;
    $20 = $t0 | 0;
    _element_init507($20, $8);
    $21 = $a | 0;
    _element_init507($21, $8);
    $22 = $b | 0;
    _element_init507($22, $8);
    $23 = $c | 0;
    _element_init507($23, $8);
    $24 = ___gmpz_sizeinbase($9, 2) | 0;
    $25 = $24 - 2 | 0;
    $26 = HEAP32[230] | 0;
    $27 = $25 * 48 & -1;
    $28 = FUNCTION_TABLE_ii[$26 & 1023]($27) | 0;
    $29 = $p + 4 | 0;
    HEAP32[$29 >> 2] = $28;
    $30 = $28;
    $m_0 = $25;
    $pp_0 = $30;
    label = 2;
    break;
   case 2:
    _element_square520($21, $17);
    _element_double534($20, $21);
    _element_add529($21, $21, $20);
    _element_add529($21, $21, $11);
    _element_neg530($21, $21);
    _element_add529($22, $19, $19);
    _element_mul521($20, $22, $19);
    _element_mul521($23, $21, $17);
    _element_add529($23, $23, $20);
    _element_neg530($23, $23);
    $32 = $pp_0 | 0;
    _element_init507($32, $8);
    $33 = $pp_0 + 8 | 0;
    _element_init507($33, $8);
    $34 = $pp_0 + 16 | 0;
    _element_init507($34, $8);
    _element_set528($32, $21);
    _element_set528($33, $22);
    _element_set528($34, $23);
    $35 = $pp_0 + 24 | 0;
    $36 = ($m_0 | 0) == 0;
    if ($36) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _element_double534($12, $12);
    $38 = ___gmpz_tstbit($9, $m_0) | 0;
    $39 = ($38 | 0) == 0;
    if ($39) {
      $pp_1 = $35;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _element_sub531($22, $3, $17);
    _element_sub531($21, $19, $5);
    _element_mul521($20, $22, $19);
    _element_mul521($23, $21, $17);
    _element_add529($23, $23, $20);
    _element_neg530($23, $23);
    $41 = $35 | 0;
    _element_init507($41, $8);
    $42 = $pp_0 + 32 | 0;
    _element_init507($42, $8);
    $43 = $pp_0 + 40 | 0;
    _element_init507($43, $8);
    _element_set528($41, $21);
    _element_set528($42, $22);
    _element_set528($43, $23);
    $44 = $pp_0 + 48 | 0;
    _element_add529($12, $12, $in1);
    $pp_1 = $44;
    label = 5;
    break;
   case 5:
    $46 = $m_0 - 1 | 0;
    $m_0 = $46;
    $pp_0 = $pp_1;
    label = 2;
    break;
   case 6:
    _element_clear512($20);
    _element_clear512($21);
    _element_clear512($22);
    _element_clear512($23);
    _element_clear512($12);
    STACKTOP = __stackBase__;
    return;
  }
}
function _g_pairing_pp_clear($p) {
  $p = $p | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $i_08 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $exitcond = 0, $19 = 0, $20 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 | 0;
    $4 = ___gmpz_sizeinbase($3, 2) | 0;
    $5 = ___gmpz_popcount($3) | 0;
    $6 = $4 - 3 | 0;
    $7 = $6 + $5 | 0;
    $8 = $p + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $9;
    $11 = ($7 | 0) > 0;
    if ($11) {
      label = 2;
      break;
    } else {
      label = 4;
      break;
    }
   case 2:
    $12 = $4 + $5 | 0;
    $13 = $12 - 3 | 0;
    $i_08 = 0;
    label = 3;
    break;
   case 3:
    $15 = $10 + ($i_08 * 24 & -1) | 0;
    _element_clear512($15);
    $16 = $10 + ($i_08 * 24 & -1) + 8 | 0;
    _element_clear512($16);
    $17 = $10 + ($i_08 * 24 & -1) + 16 | 0;
    _element_clear512($17);
    $18 = $i_08 + 1 | 0;
    $exitcond = ($18 | 0) == ($13 | 0);
    if ($exitcond) {
      label = 4;
      break;
    } else {
      $i_08 = $18;
      label = 3;
      break;
    }
   case 4:
    $19 = HEAP32[232] | 0;
    $20 = HEAP32[$8 >> 2] | 0;
    FUNCTION_TABLE_vi[$19 & 1023]($20);
    return;
  }
}
function _g_pairing_pp_apply($out, $in2, $p) {
  $out = $out | 0;
  $in2 = $in2 | 0;
  $p = $p | 0;
  var $e0 = 0, $Qx = 0, $Qy = 0, $v = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $m_031 = 0, $pp_030 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $pp_1 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $e0 = __stackBase__ | 0;
    $Qx = __stackBase__ + 8 | 0;
    $Qy = __stackBase__ + 16 | 0;
    $v = __stackBase__ + 24 | 0;
    $1 = $p | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 | 0;
    $4 = $2 + 504 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = ___gmpz_sizeinbase($3, 2) | 0;
    $7 = $6 - 2 | 0;
    $8 = $p + 4 | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $10 = $e0 | 0;
    _element_init_same_as524($10, $out);
    $11 = $v | 0;
    _element_init_same_as524($11, $out);
    $12 = $Qx | 0;
    $13 = $5 + 432 | 0;
    $14 = $13;
    _element_init507($12, $14);
    $15 = $Qy | 0;
    _element_init507($15, $14);
    $16 = $in2;
    $17 = _curve_x_coord($16) | 0;
    $18 = $17;
    $19 = $5 + 1296 | 0;
    $20 = $19;
    _element_mul521($12, $18, $20);
    $21 = _curve_y_coord($16) | 0;
    $22 = $21;
    $23 = $5 + 1304 | 0;
    $24 = $23;
    _element_mul521($15, $22, $24);
    _element_set1518($out);
    $25 = $9;
    $26 = $9 + 8 | 0;
    $27 = $26;
    $28 = $9 + 16 | 0;
    $29 = $28;
    _d_miller_evalfn525($10, $25, $27, $29, $12, $15);
    _element_mul521($out, $out, $10);
    $30 = ($7 | 0) == 0;
    if ($30) {
      label = 6;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $31 = $9;
    $32 = $9 + 24 | 0;
    $33 = $32;
    $pp_030 = $31;
    $m_031 = $7;
    $35 = $33;
    label = 3;
    break;
   case 3:
    $36 = ___gmpz_tstbit($3, $m_031) | 0;
    $37 = ($36 | 0) == 0;
    if ($37) {
      $pp_1 = $35;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $39 = $35 | 0;
    $40 = $pp_030 + 32 | 0;
    $41 = $pp_030 + 40 | 0;
    _d_miller_evalfn525($10, $39, $40, $41, $12, $15);
    _element_mul521($out, $out, $10);
    $42 = $pp_030 + 48 | 0;
    $pp_1 = $42;
    label = 5;
    break;
   case 5:
    $44 = $m_031 - 1 | 0;
    _element_square520($out, $out);
    $45 = $pp_1 | 0;
    $46 = $pp_1 + 8 | 0;
    $47 = $pp_1 + 16 | 0;
    _d_miller_evalfn525($10, $45, $46, $47, $12, $15);
    _element_mul521($out, $out, $10);
    $48 = $pp_1 + 24 | 0;
    $49 = ($44 | 0) == 0;
    if ($49) {
      label = 6;
      break;
    } else {
      $pp_030 = $pp_1;
      $m_031 = $44;
      $35 = $48;
      label = 3;
      break;
    }
   case 6:
    $50 = HEAP32[$1 >> 2] | 0;
    _tatepower10($out, $out, $50);
    _element_clear512($10);
    _element_clear512($12);
    _element_clear512($15);
    _element_clear512($11);
    STACKTOP = __stackBase__;
    return;
  }
}
function _g_pairing_clear($pairing) {
  $pairing = $pairing | 0;
  var $3 = 0;
  _field_clear($pairing + 236 | 0);
  $3 = HEAP32[$pairing + 504 >> 2] | 0;
  _element_clear512($3 + 1312 | 0);
  _element_clear512($3 + 1320 | 0);
  _element_clear512($3 + 1328 | 0);
  _element_clear512($3 + 1336 | 0);
  ___gmpz_clear($pairing + 452 | 0);
  _field_clear($3 + 1080 | 0);
  _field_clear($3 + 864 | 0);
  _element_clear512($3 + 1296 | 0);
  _element_clear512($3 + 1304 | 0);
  _field_clear($3 + 648 | 0);
  _field_clear($3 + 432 | 0);
  _field_clear($3 + 216 | 0);
  _field_clear($3);
  _field_clear($pairing + 12 | 0);
  ___gmpz_clear($pairing | 0);
  FUNCTION_TABLE_vi[HEAP32[232] & 1023]($3);
  return;
}
function _element_init_same_as524($e, $e2) {
  $e = $e | 0;
  $e2 = $e2 | 0;
  _element_init507($e, HEAP32[$e2 >> 2] | 0);
  return;
}
function _d_miller_evalfn525($e0, $a, $b, $c, $Qx, $Qy) {
  $e0 = $e0 | 0;
  $a = $a | 0;
  $b = $b | 0;
  $c = $c | 0;
  $Qx = $Qx | 0;
  $Qy = $Qy | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $i_014 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $exitcond = 0, $12 = 0, $13 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = _element_x526($e0) | 0;
    $2 = _element_y527($e0) | 0;
    $3 = $1 | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = _polymod_field_degree($4) | 0;
    $6 = ($5 | 0) > 0;
    if ($6) {
      $i_014 = 0;
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $7 = _element_item511($1, $i_014) | 0;
    $8 = _element_item511($Qx, $i_014) | 0;
    _element_mul521($7, $8, $a);
    $9 = _element_item511($2, $i_014) | 0;
    $10 = _element_item511($Qy, $i_014) | 0;
    _element_mul521($9, $10, $b);
    $11 = $i_014 + 1 | 0;
    $exitcond = ($11 | 0) == ($5 | 0);
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_014 = $11;
      label = 2;
      break;
    }
   case 3:
    $12 = _element_item511($1, 0) | 0;
    $13 = _element_item511($1, 0) | 0;
    _element_add529($12, $13, $c);
    return;
  }
}
function _tatepower10($out, $in, $pairing) {
  $out = $out | 0;
  $in = $in | 0;
  $pairing = $pairing | 0;
  var $2 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $18 = 0, $21 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $50 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 32 | 0;
  $2 = HEAP32[$pairing + 504 >> 2] | 0;
  $3 = __stackBase__ | 0;
  $5 = $2 + 648 | 0;
  _element_init507($3, $5);
  $6 = __stackBase__ + 8 | 0;
  $8 = $2 + 432 | 0;
  _element_init507($6, $8);
  $9 = __stackBase__ + 16 | 0;
  _element_init507($9, $8);
  $10 = __stackBase__ + 24 | 0;
  _element_init507($10, $5);
  $11 = _element_x526($3) | 0;
  $12 = _element_y527($3) | 0;
  $15 = HEAP32[$11 + 4 >> 2] | 0;
  $18 = HEAP32[$12 + 4 >> 2] | 0;
  $21 = HEAP32[(_element_x526($in) | 0) + 4 >> 2] | 0;
  $24 = HEAP32[(_element_y527($in) | 0) + 4 >> 2] | 0;
  $26 = $21 + 8 | 0;
  $28 = $2 + 1312 | 0;
  _polymod_const_mul($9, $26, $28);
  _element_set528($11, $9);
  $30 = $21 + 16 | 0;
  $32 = $2 + 1320 | 0;
  _polymod_const_mul($9, $30, $32);
  _element_add529($11, $11, $9);
  $34 = $21 + 24 | 0;
  $36 = $2 + 1328 | 0;
  _polymod_const_mul($9, $34, $36);
  _element_add529($11, $11, $9);
  $38 = $21 + 32 | 0;
  $40 = $2 + 1336 | 0;
  _polymod_const_mul($9, $38, $40);
  _element_add529($11, $11, $9);
  $41 = $21;
  _element_add529($15, $15, $41);
  $43 = $24 + 8 | 0;
  _polymod_const_mul($9, $43, $28);
  _element_set528($12, $9);
  $45 = $24 + 16 | 0;
  _polymod_const_mul($9, $45, $32);
  _element_add529($12, $12, $9);
  $47 = $24 + 24 | 0;
  _polymod_const_mul($9, $47, $36);
  _element_add529($12, $12, $9);
  $49 = $24 + 32 | 0;
  _polymod_const_mul($9, $49, $40);
  _element_add529($12, $12, $9);
  $50 = $24;
  _element_add529($18, $18, $50);
  _element_set528($10, $3);
  _element_set528($11, _element_x526($in) | 0);
  _element_neg530($12, _element_y527($in) | 0);
  _element_mul521($10, $10, $3);
  _polymod_const_mul($9, $26, $28);
  _element_set528($11, $9);
  _polymod_const_mul($9, $30, $32);
  _element_add529($11, $11, $9);
  _polymod_const_mul($9, $34, $36);
  _element_add529($11, $11, $9);
  _polymod_const_mul($9, $38, $40);
  _element_add529($11, $11, $9);
  _element_add529($15, $15, $41);
  _polymod_const_mul($9, $43, $28);
  _element_neg530($12, $9);
  _polymod_const_mul($9, $45, $32);
  _element_sub531($12, $12, $9);
  _polymod_const_mul($9, $47, $36);
  _element_sub531($12, $12, $9);
  _polymod_const_mul($9, $49, $40);
  _element_sub531($12, $12, $9);
  _element_sub531($18, $18, $50);
  _element_mul521($3, $3, $in);
  _element_invert522($3, $3);
  _element_mul521($in, $10, $3);
  _element_set528($3, $in);
  _lucas_even532($out, $3, $pairing + 452 | 0);
  _element_clear512($3);
  _element_clear512($6);
  _element_clear512($9);
  _element_clear512($10);
  STACKTOP = __stackBase__;
  return;
}
function _element_x526($a) {
  $a = $a | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$a >> 2] | 0) + 68 >> 2] & 1023]($a) | 0;
}
function _element_y527($a) {
  $a = $a | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$a >> 2] | 0) + 72 >> 2] & 1023]($a) | 0;
}
function _element_set528($e, $a) {
  $e = $e | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 20 >> 2] & 1023]($e, $a);
  return;
}
function _element_add529($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 40 >> 2] & 1023]($n, $a, $b);
  return;
}
function _element_neg530($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 124 >> 2] & 1023]($n, $a);
  return;
}
function _element_sub531($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 44 >> 2] & 1023]($n, $a, $b);
  return;
}
function _lucas_even532($out, $in, $cofactor) {
  $out = $out | 0;
  $in = $in | 0;
  $cofactor = $cofactor | 0;
  var $temp = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $j_067 = 0, $9 = 0, $j_068 = 0, $10 = 0, $11 = 0, $j_0 = 0, $14 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $temp = __stackBase__ | 0;
    $1 = $temp | 0;
    _element_init_same_as524($1, $out);
    $2 = _element_x526($in) | 0;
    $3 = _element_y527($in) | 0;
    $4 = _element_x526($out) | 0;
    $5 = _element_y527($out) | 0;
    $6 = _element_x526($1) | 0;
    $7 = _element_y527($1) | 0;
    _element_set_si533($6);
    _element_double534($7, $2);
    _element_set528($4, $6);
    _element_set528($5, $7);
    $8 = ___gmpz_sizeinbase($cofactor, 2) | 0;
    $j_067 = $8 - 1 | 0;
    $9 = ($j_067 | 0) == 0;
    if ($9) {
      label = 2;
      break;
    } else {
      $j_068 = $j_067;
      label = 3;
      break;
    }
   case 2:
    _element_mul521($5, $4, $5);
    _element_sub531($5, $5, $7);
    _element_square520($4, $4);
    _element_sub531($4, $4, $6);
    _element_double534($4, $4);
    _element_mul521($2, $7, $5);
    _element_sub531($2, $2, $4);
    _element_square520($7, $7);
    _element_sub531($7, $7, $6);
    _element_sub531($7, $7, $6);
    _element_halve535($4, $5);
    _element_div536($5, $2, $7);
    _element_mul521($5, $5, $3);
    _element_clear512($1);
    STACKTOP = __stackBase__;
    return;
   case 3:
    $10 = ___gmpz_tstbit($cofactor, $j_068) | 0;
    $11 = ($10 | 0) == 0;
    if ($11) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _element_mul521($4, $4, $5);
    _element_sub531($4, $4, $7);
    _element_square520($5, $5);
    _element_sub531($5, $5, $6);
    label = 6;
    break;
   case 5:
    _element_mul521($5, $4, $5);
    _element_sub531($5, $5, $7);
    _element_square520($4, $4);
    _element_sub531($4, $4, $6);
    label = 6;
    break;
   case 6:
    $j_0 = $j_068 - 1 | 0;
    $14 = ($j_0 | 0) == 0;
    if ($14) {
      label = 2;
      break;
    } else {
      $j_068 = $j_0;
      label = 3;
      break;
    }
  }
}
function _element_set_si533($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$e >> 2] | 0) + 76 >> 2] & 1023]($e, 2);
  return;
}
function _element_double534($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 96 >> 2] & 1023]($n, $a);
  return;
}
function _element_halve535($n, $a) {
  $n = $n | 0;
  $a = $a | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$n >> 2] | 0) + 108 >> 2] & 1023]($n, $a);
  return;
}
function _element_div536($n, $a, $b) {
  $n = $n | 0;
  $a = $a | 0;
  $b = $b | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 92 >> 2] & 1023]($n, $a, $b);
  return;
}
function _cc_miller_no_denom_proj537($res, $q, $P, $Qx, $Qy) {
  $res = $res | 0;
  $q = $q | 0;
  $P = $P | 0;
  $Qx = $Qx | 0;
  $Qy = $Qy | 0;
  var $v = 0, $Z = 0, $a = 0, $b = 0, $c = 0, $t0 = 0, $t1 = 0, $e0 = 0, $z = 0, $z2 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $m_0 = 0, $38 = 0, $40 = 0, $41 = 0, $44 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 80 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $v = __stackBase__ | 0;
    $Z = __stackBase__ + 8 | 0;
    $a = __stackBase__ + 16 | 0;
    $b = __stackBase__ + 24 | 0;
    $c = __stackBase__ + 32 | 0;
    $t0 = __stackBase__ + 40 | 0;
    $t1 = __stackBase__ + 48 | 0;
    $e0 = __stackBase__ + 56 | 0;
    $z = __stackBase__ + 64 | 0;
    $z2 = __stackBase__ + 72 | 0;
    $1 = $a | 0;
    $2 = $b | 0;
    $3 = $c | 0;
    $4 = $P;
    $5 = _curve_a_coeff($4) | 0;
    $6 = $5;
    $7 = _curve_x_coord($4) | 0;
    $8 = $7;
    $9 = _curve_y_coord($4) | 0;
    $10 = $9;
    $11 = $7;
    $12 = HEAP32[$11 >> 2] | 0;
    _element_init507($1, $12);
    $13 = $a | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    _element_init507($2, $14);
    $15 = HEAP32[$13 >> 2] | 0;
    _element_init507($3, $15);
    $16 = $t0 | 0;
    $17 = HEAP32[$13 >> 2] | 0;
    _element_init507($16, $17);
    $18 = $t1 | 0;
    $19 = HEAP32[$13 >> 2] | 0;
    _element_init507($18, $19);
    $20 = $e0 | 0;
    $21 = $res | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    _element_init507($20, $22);
    $23 = $z | 0;
    $24 = HEAP32[$13 >> 2] | 0;
    _element_init507($23, $24);
    $25 = $z2 | 0;
    $26 = HEAP32[$13 >> 2] | 0;
    _element_init507($25, $26);
    _element_set1518($23);
    _element_set1518($25);
    $27 = $v | 0;
    $28 = HEAP32[$21 >> 2] | 0;
    _element_init507($27, $28);
    $29 = $Z | 0;
    $30 = $P | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    _element_init507($29, $31);
    _element_set528($29, $P);
    $32 = $Z;
    $33 = _curve_x_coord($32) | 0;
    $34 = $33;
    _element_set1518($27);
    $35 = ___gmpz_sizeinbase($q, 2) | 0;
    $36 = $35 - 2 | 0;
    $m_0 = $36;
    label = 2;
    break;
   case 2:
    _element_square520($1, $25);
    _element_mul521($1, $1, $6);
    _element_square520($2, $34);
    _element_double534($16, $2);
    _element_add529($2, $2, $16);
    _element_add529($1, $1, $2);
    _element_neg530($1, $1);
    _element_mul521($2, $23, $25);
    _element_mul521($2, $2, $34);
    _element_mul_si539($2, $2, 2);
    _element_mul521($3, $34, $1);
    _element_mul521($1, $1, $25);
    _element_square520($16, $34);
    _element_mul_si539($16, $16, 2);
    _element_add529($3, $3, $16);
    _element_neg530($3, $3);
    _d_miller_evalfn525($20, $1, $2, $3, $Qx, $Qy);
    _element_mul521($27, $27, $20);
    $38 = ($m_0 | 0) == 0;
    if ($38) {
      label = 6;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _element_square520($16, $34);
    _element_double534($18, $16);
    _element_add529($16, $16, $18);
    _element_square520($18, $25);
    _element_mul521($18, $18, $6);
    _element_add529($16, $16, $18);
    _element_mul521($23, $34, $23);
    _element_double534($23, $23);
    _element_square520($25, $23);
    _element_square520($1, $34);
    _element_mul521($18, $34, $1);
    _element_double534($18, $18);
    _element_double534($18, $18);
    _element_double534($2, $18);
    _element_square520($34, $16);
    _element_sub531($34, $34, $2);
    _element_square520($1, $1);
    _element_double534($1, $1);
    _element_double534($1, $1);
    _element_double534($1, $1);
    _element_sub531($18, $18, $34);
    _element_mul521($16, $16, $18);
    _element_sub531($34, $16, $1);
    $40 = ___gmpz_tstbit($q, $m_0) | 0;
    $41 = ($40 | 0) == 0;
    if ($41) {
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    _element_mul521($16, $34, $23);
    _element_mul521($18, $25, $23);
    _element_mul521($1, $10, $18);
    _element_sub531($1, $34, $1);
    _element_mul521($2, $8, $18);
    _element_sub531($2, $2, $16);
    _element_mul521($16, $16, $10);
    _element_mul521($3, $34, $8);
    _element_sub531($3, $16, $3);
    _d_miller_evalfn525($20, $1, $2, $3, $Qx, $Qy);
    _element_mul521($27, $27, $20);
    _element_mul521($1, $25, $8);
    _element_sub531($2, $34, $1);
    _element_mul521($16, $25, $10);
    _element_mul521($16, $16, $23);
    _element_sub531($18, $34, $16);
    _element_add529($1, $34, $1);
    _element_add529($16, $34, $16);
    _element_mul521($23, $23, $2);
    _element_square520($25, $23);
    _element_square520($3, $2);
    _element_mul521($2, $3, $2);
    _element_square520($34, $18);
    _element_mul521($3, $1, $3);
    _element_sub531($34, $34, $3);
    _element_sub531($3, $3, $34);
    _element_sub531($3, $3, $34);
    _element_mul521($3, $3, $18);
    _element_mul521($16, $16, $2);
    _element_sub531($3, $3, $16);
    _element_halve535($34, $3);
    label = 5;
    break;
   case 5:
    $44 = $m_0 - 1 | 0;
    _element_square520($27, $27);
    $m_0 = $44;
    label = 2;
    break;
   case 6:
    _element_set528($res, $27);
    _element_clear512($27);
    _element_clear512($29);
    _element_clear512($1);
    _element_clear512($2);
    _element_clear512($3);
    _element_clear512($16);
    _element_clear512($18);
    _element_clear512($20);
    _element_clear512($23);
    _element_clear512($25);
    STACKTOP = __stackBase__;
    return;
  }
}
function _sha1_starts($ctx) {
  $ctx = $ctx | 0;
  HEAP32[$ctx >> 2] = 0;
  HEAP32[$ctx + 4 >> 2] = 0;
  HEAP32[$ctx + 8 >> 2] = 1732584193;
  HEAP32[$ctx + 12 >> 2] = -271733879;
  HEAP32[$ctx + 16 >> 2] = -1732584194;
  HEAP32[$ctx + 20 >> 2] = 271733878;
  HEAP32[$ctx + 24 >> 2] = -1009589776;
  return;
}
function _g_pairing_ellnet($out, $in1, $in2, $pairing) {
  $out = $out | 0;
  $in1 = $in1 | 0;
  $in2 = $in2 | 0;
  $pairing = $pairing | 0;
  var $cm3 = 0, $cm2 = 0, $cm1 = 0, $c0 = 0, $c1 = 0, $c2 = 0, $c3 = 0, $c4 = 0, $dm1 = 0, $d0 = 0, $d1 = 0, $A = 0, $B = 0, $C = 0, $sm2 = 0, $sm1 = 0, $s0 = 0, $s1 = 0, $s2 = 0, $s3 = 0, $tm2 = 0, $tm1 = 0, $t0 = 0, $t1 = 0, $t2 = 0, $t3 = 0, $e0 = 0, $e1 = 0, $u = 0, $v = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $m_0 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, label = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 240 | 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $cm3 = __stackBase__ | 0;
    $cm2 = __stackBase__ + 8 | 0;
    $cm1 = __stackBase__ + 16 | 0;
    $c0 = __stackBase__ + 24 | 0;
    $c1 = __stackBase__ + 32 | 0;
    $c2 = __stackBase__ + 40 | 0;
    $c3 = __stackBase__ + 48 | 0;
    $c4 = __stackBase__ + 56 | 0;
    $dm1 = __stackBase__ + 64 | 0;
    $d0 = __stackBase__ + 72 | 0;
    $d1 = __stackBase__ + 80 | 0;
    $A = __stackBase__ + 88 | 0;
    $B = __stackBase__ + 96 | 0;
    $C = __stackBase__ + 104 | 0;
    $sm2 = __stackBase__ + 112 | 0;
    $sm1 = __stackBase__ + 120 | 0;
    $s0 = __stackBase__ + 128 | 0;
    $s1 = __stackBase__ + 136 | 0;
    $s2 = __stackBase__ + 144 | 0;
    $s3 = __stackBase__ + 152 | 0;
    $tm2 = __stackBase__ + 160 | 0;
    $tm1 = __stackBase__ + 168 | 0;
    $t0 = __stackBase__ + 176 | 0;
    $t1 = __stackBase__ + 184 | 0;
    $t2 = __stackBase__ + 192 | 0;
    $t3 = __stackBase__ + 200 | 0;
    $e0 = __stackBase__ + 208 | 0;
    $e1 = __stackBase__ + 216 | 0;
    $u = __stackBase__ + 224 | 0;
    $v = __stackBase__ + 232 | 0;
    $1 = $pairing + 504 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $in1;
    $4 = _curve_a_coeff($3) | 0;
    $5 = $4;
    $6 = _curve_b_coeff($3) | 0;
    $7 = $6;
    $8 = _curve_x_coord($3) | 0;
    $9 = $8;
    $10 = _curve_y_coord($3) | 0;
    $11 = $10;
    $12 = $in2;
    $13 = _curve_x_coord($12) | 0;
    $14 = $13;
    $15 = _curve_y_coord($12) | 0;
    $16 = $15;
    $17 = $cm3 | 0;
    _element_init_same_as524($17, $9);
    $18 = $cm2 | 0;
    _element_init_same_as524($18, $9);
    $19 = $cm1 | 0;
    _element_init_same_as524($19, $9);
    $20 = $c0 | 0;
    _element_init_same_as524($20, $9);
    $21 = $c1 | 0;
    _element_init_same_as524($21, $9);
    $22 = $c2 | 0;
    _element_init_same_as524($22, $9);
    $23 = $c3 | 0;
    _element_init_same_as524($23, $9);
    $24 = $c4 | 0;
    _element_init_same_as524($24, $9);
    $25 = $C | 0;
    _element_init_same_as524($25, $9);
    $26 = $dm1 | 0;
    _element_init_same_as524($26, $out);
    $27 = $d0 | 0;
    _element_init_same_as524($27, $out);
    $28 = $d1 | 0;
    _element_init_same_as524($28, $out);
    $29 = $A | 0;
    _element_init_same_as524($29, $out);
    $30 = $B | 0;
    _element_init_same_as524($30, $out);
    _element_double534($21, $11);
    _element_neg530($17, $21);
    _element_square520($18, $9);
    _element_square520($25, $18);
    _element_mul521($19, $7, $9);
    _element_double534($19, $19);
    _element_square520($24, $5);
    _element_mul521($22, $19, $18);
    _element_double534($22, $22);
    _element_mul521($20, $5, $25);
    _element_add529($22, $22, $20);
    _element_mul521($20, $24, $18);
    _element_sub531($22, $22, $20);
    _element_double534($20, $22);
    _element_double534($20, $20);
    _element_add529($22, $22, $20);
    _element_mul521($20, $19, $5);
    _element_square520($23, $7);
    _element_double534($23, $23);
    _element_double534($23, $23);
    _element_add529($20, $20, $23);
    _element_double534($20, $20);
    _element_mul521($23, $5, $24);
    _element_add529($20, $20, $23);
    _element_sub531($22, $22, $20);
    _element_mul521($20, $18, $25);
    _element_add529($23, $20, $22);
    _element_mul521($23, $23, $21);
    _element_double534($23, $23);
    _element_mul521($20, $5, $18);
    _element_add529($20, $20, $19);
    _element_double534($20, $20);
    _element_add529($20, $20, $25);
    _element_double534($22, $20);
    _element_add529($20, $20, $22);
    _element_sub531($22, $20, $24);
    _element_set1518($20);
    _element_neg530($18, $20);
    _element_square520($25, $21);
    _element_mul521($24, $25, $21);
    _element_mul521($24, $24, $23);
    _element_square520($25, $22);
    _element_mul521($25, $25, $22);
    _element_sub531($24, $24, $25);
    $31 = _element_x526($27) | 0;
    $32 = $2 + 1296 | 0;
    $33 = $32;
    _element_mul521($31, $14, $33);
    _element_neg530($29, $27);
    $34 = _element_x526($29) | 0;
    $35 = _element_item511($34, 0) | 0;
    $36 = _element_x526($29) | 0;
    $37 = _element_item511($36, 0) | 0;
    _element_add529($35, $37, $9);
    _element_double534($25, $9);
    $38 = _element_x526($27) | 0;
    $39 = _element_item511($38, 0) | 0;
    $40 = _element_x526($27) | 0;
    $41 = _element_item511($40, 0) | 0;
    _element_add529($39, $41, $25);
    _element_square520($26, $29);
    _element_mul521($26, $27, $26);
    $42 = _element_y527($28) | 0;
    $43 = $2 + 1304 | 0;
    $44 = $43;
    _element_mul521($42, $16, $44);
    $45 = _element_x526($28) | 0;
    $46 = _element_item511($45, 0) | 0;
    _element_set528($46, $11);
    _element_square520($28, $28);
    _element_sub531($28, $26, $28);
    _element_invert522($30, $28);
    _element_invert522($29, $29);
    $47 = _element_y527($28) | 0;
    _element_mul521($47, $16, $44);
    $48 = _element_x526($28) | 0;
    _element_set0538($48);
    $49 = _element_x526($28) | 0;
    $50 = _element_item511($49, 0) | 0;
    _element_neg530($50, $11);
    _element_mul521($28, $28, $29);
    _element_square520($28, $28);
    _element_sub531($28, $27, $28);
    _element_set0538($19);
    _element_invert522($25, $21);
    _element_set1518($26);
    _element_set1518($27);
    $51 = $sm2 | 0;
    _element_init_same_as524($51, $9);
    $52 = $sm1 | 0;
    _element_init_same_as524($52, $9);
    $53 = $s0 | 0;
    _element_init_same_as524($53, $9);
    $54 = $s1 | 0;
    _element_init_same_as524($54, $9);
    $55 = $s2 | 0;
    _element_init_same_as524($55, $9);
    $56 = $s3 | 0;
    _element_init_same_as524($56, $9);
    $57 = $tm2 | 0;
    _element_init_same_as524($57, $9);
    $58 = $tm1 | 0;
    _element_init_same_as524($58, $9);
    $59 = $t0 | 0;
    _element_init_same_as524($59, $9);
    $60 = $t1 | 0;
    _element_init_same_as524($60, $9);
    $61 = $t2 | 0;
    _element_init_same_as524($61, $9);
    $62 = $t3 | 0;
    _element_init_same_as524($62, $9);
    $63 = $e0 | 0;
    _element_init_same_as524($63, $9);
    $64 = $e1 | 0;
    _element_init_same_as524($64, $9);
    $65 = $u | 0;
    _element_init_same_as524($65, $27);
    $66 = $v | 0;
    _element_init_same_as524($66, $27);
    $67 = $pairing | 0;
    $68 = ___gmpz_sizeinbase($67, 2) | 0;
    $69 = $68 - 2 | 0;
    $m_0 = $69;
    label = 2;
    break;
   case 2:
    _element_square520($51, $18);
    _element_square520($52, $19);
    _element_square520($53, $20);
    _element_square520($54, $21);
    _element_square520($55, $22);
    _element_square520($56, $23);
    _element_mul521($57, $17, $19);
    _element_mul521($58, $18, $20);
    _element_mul521($59, $19, $21);
    _element_mul521($60, $20, $22);
    _element_mul521($61, $21, $23);
    _element_mul521($62, $22, $24);
    _element_square520($65, $27);
    _element_mul521($66, $26, $28);
    $71 = ___gmpz_tstbit($67, $m_0) | 0;
    $72 = ($71 | 0) == 0;
    if ($72) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _element_mul521($63, $59, $51);
    _element_mul521($64, $57, $53);
    _element_sub531($17, $63, $64);
    _element_mul521($17, $17, $25);
    _element_mul521($63, $59, $52);
    _element_mul521($64, $58, $53);
    _element_sub531($18, $63, $64);
    _element_mul521($63, $60, $52);
    _element_mul521($64, $58, $54);
    _element_sub531($19, $63, $64);
    _element_mul521($19, $19, $25);
    _element_mul521($63, $60, $53);
    _element_mul521($64, $59, $54);
    _element_sub531($20, $63, $64);
    _element_mul521($63, $61, $53);
    _element_mul521($64, $59, $55);
    _element_sub531($21, $63, $64);
    _element_mul521($21, $21, $25);
    _element_mul521($63, $61, $54);
    _element_mul521($64, $60, $55);
    _element_sub531($22, $63, $64);
    _element_mul521($63, $62, $54);
    _element_mul521($64, $60, $56);
    _element_sub531($23, $63, $64);
    _element_mul521($23, $23, $25);
    _element_mul521($63, $62, $55);
    _element_mul521($64, $61, $56);
    _element_sub531($24, $63, $64);
    $74 = _element_x526($out) | 0;
    $75 = _element_x526($65) | 0;
    _polymod_const_mul($74, $59, $75);
    $76 = _element_y527($out) | 0;
    $77 = _element_y527($65) | 0;
    _polymod_const_mul($76, $59, $77);
    $78 = _element_x526($26) | 0;
    $79 = _element_x526($66) | 0;
    _polymod_const_mul($78, $53, $79);
    $80 = _element_y527($26) | 0;
    $81 = _element_y527($66) | 0;
    _polymod_const_mul($80, $53, $81);
    _element_sub531($26, $26, $out);
    $82 = _element_x526($out) | 0;
    $83 = _element_x526($65) | 0;
    _polymod_const_mul($82, $60, $83);
    $84 = _element_y527($out) | 0;
    $85 = _element_y527($65) | 0;
    _polymod_const_mul($84, $60, $85);
    $86 = _element_x526($27) | 0;
    $87 = _element_x526($66) | 0;
    _polymod_const_mul($86, $54, $87);
    $88 = _element_y527($27) | 0;
    $89 = _element_y527($66) | 0;
    _polymod_const_mul($88, $54, $89);
    _element_sub531($27, $27, $out);
    _element_mul521($27, $27, $29);
    $90 = _element_x526($out) | 0;
    $91 = _element_x526($65) | 0;
    _polymod_const_mul($90, $61, $91);
    $92 = _element_y527($out) | 0;
    $93 = _element_y527($65) | 0;
    _polymod_const_mul($92, $61, $93);
    $94 = _element_x526($28) | 0;
    $95 = _element_x526($66) | 0;
    _polymod_const_mul($94, $55, $95);
    $96 = _element_y527($28) | 0;
    $97 = _element_y527($66) | 0;
    _polymod_const_mul($96, $55, $97);
    _element_sub531($28, $28, $out);
    _element_mul521($28, $28, $30);
    label = 5;
    break;
   case 4:
    _element_mul521($63, $58, $51);
    _element_mul521($64, $57, $52);
    _element_sub531($17, $63, $64);
    _element_mul521($63, $59, $51);
    _element_mul521($64, $57, $53);
    _element_sub531($18, $63, $64);
    _element_mul521($18, $18, $25);
    _element_mul521($63, $59, $52);
    _element_mul521($64, $58, $53);
    _element_sub531($19, $63, $64);
    _element_mul521($63, $60, $52);
    _element_mul521($64, $58, $54);
    _element_sub531($20, $63, $64);
    _element_mul521($20, $20, $25);
    _element_mul521($63, $60, $53);
    _element_mul521($64, $59, $54);
    _element_sub531($21, $63, $64);
    _element_mul521($63, $61, $53);
    _element_mul521($64, $59, $55);
    _element_sub531($22, $63, $64);
    _element_mul521($22, $22, $25);
    _element_mul521($63, $61, $54);
    _element_mul521($64, $60, $55);
    _element_sub531($23, $63, $64);
    _element_mul521($63, $62, $54);
    _element_mul521($64, $60, $56);
    _element_sub531($24, $63, $64);
    _element_mul521($24, $24, $25);
    $99 = _element_x526($out) | 0;
    $100 = _element_x526($65) | 0;
    _polymod_const_mul($99, $58, $100);
    $101 = _element_y527($out) | 0;
    $102 = _element_y527($65) | 0;
    _polymod_const_mul($101, $58, $102);
    $103 = _element_x526($26) | 0;
    $104 = _element_x526($66) | 0;
    _polymod_const_mul($103, $52, $104);
    $105 = _element_y527($26) | 0;
    $106 = _element_y527($66) | 0;
    _polymod_const_mul($105, $52, $106);
    _element_sub531($26, $26, $out);
    $107 = _element_x526($out) | 0;
    $108 = _element_x526($65) | 0;
    _polymod_const_mul($107, $59, $108);
    $109 = _element_y527($out) | 0;
    $110 = _element_y527($65) | 0;
    _polymod_const_mul($109, $59, $110);
    $111 = _element_x526($27) | 0;
    $112 = _element_x526($66) | 0;
    _polymod_const_mul($111, $53, $112);
    $113 = _element_y527($27) | 0;
    $114 = _element_y527($66) | 0;
    _polymod_const_mul($113, $53, $114);
    _element_sub531($27, $27, $out);
    $115 = _element_x526($out) | 0;
    $116 = _element_x526($65) | 0;
    _polymod_const_mul($115, $60, $116);
    $117 = _element_y527($out) | 0;
    $118 = _element_y527($65) | 0;
    _polymod_const_mul($117, $60, $118);
    $119 = _element_x526($28) | 0;
    $120 = _element_x526($66) | 0;
    _polymod_const_mul($119, $54, $120);
    $121 = _element_y527($28) | 0;
    $122 = _element_y527($66) | 0;
    _polymod_const_mul($121, $54, $122);
    _element_sub531($28, $28, $out);
    _element_mul521($28, $28, $29);
    label = 5;
    break;
   case 5:
    $124 = ($m_0 | 0) == 0;
    $125 = $m_0 - 1 | 0;
    if ($124) {
      label = 6;
      break;
    } else {
      $m_0 = $125;
      label = 2;
      break;
    }
   case 6:
    _tatepower10($out, $28, $pairing);
    _element_clear512($26);
    _element_clear512($27);
    _element_clear512($28);
    _element_clear512($17);
    _element_clear512($18);
    _element_clear512($19);
    _element_clear512($20);
    _element_clear512($21);
    _element_clear512($22);
    _element_clear512($23);
    _element_clear512($24);
    _element_clear512($51);
    _element_clear512($52);
    _element_clear512($53);
    _element_clear512($54);
    _element_clear512($55);
    _element_clear512($56);
    _element_clear512($57);
    _element_clear512($58);
    _element_clear512($59);
    _element_clear512($60);
    _element_clear512($61);
    _element_clear512($62);
    _element_clear512($63);
    _element_clear512($64);
    _element_clear512($29);
    _element_clear512($30);
    _element_clear512($25);
    _element_clear512($65);
    _element_clear512($66);
    STACKTOP = __stackBase__;
    return;
  }
}
function _element_set0538($e) {
  $e = $e | 0;
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$e >> 2] | 0) + 24 >> 2] & 1023]($e);
  return;
}
function _element_mul_si539($n, $a, $z) {
  $n = $n | 0;
  $a = $a | 0;
  $z = $z | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$n >> 2] | 0) + 88 >> 2] & 1023]($n, $a, $z);
  return;
}
function _element_is1540($n) {
  $n = $n | 0;
  return FUNCTION_TABLE_ii[HEAP32[(HEAP32[$n >> 2] | 0) + 136 >> 2] & 1023]($n) | 0;
}
function _sha1_process($ctx, $data) {
  $ctx = $ctx | 0;
  $data = $data | 0;
  var $17 = 0, $35 = 0, $53 = 0, $71 = 0, $89 = 0, $107 = 0, $125 = 0, $143 = 0, $161 = 0, $179 = 0, $197 = 0, $215 = 0, $233 = 0, $251 = 0, $269 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $307 = 0, $310 = 0, $320 = 0, $323 = 0, $333 = 0, $336 = 0, $346 = 0, $349 = 0, $359 = 0, $362 = 0, $372 = 0, $375 = 0, $385 = 0, $388 = 0, $398 = 0, $401 = 0, $411 = 0, $414 = 0, $424 = 0, $427 = 0, $437 = 0, $440 = 0, $450 = 0, $453 = 0, $463 = 0, $466 = 0, $476 = 0, $479 = 0, $489 = 0, $492 = 0, $502 = 0, $505 = 0, $514 = 0, $517 = 0, $521 = 0, $524 = 0, $533 = 0, $536 = 0, $540 = 0, $543 = 0, $552 = 0, $555 = 0, $559 = 0, $562 = 0, $571 = 0, $574 = 0, $578 = 0, $581 = 0, $589 = 0, $592 = 0, $596 = 0, $599 = 0, $607 = 0, $610 = 0, $614 = 0, $617 = 0, $625 = 0, $628 = 0, $632 = 0, $635 = 0, $643 = 0, $646 = 0, $650 = 0, $653 = 0, $661 = 0, $664 = 0, $668 = 0, $671 = 0, $679 = 0, $682 = 0, $686 = 0, $689 = 0, $697 = 0, $700 = 0, $704 = 0, $707 = 0, $715 = 0, $718 = 0, $722 = 0, $725 = 0, $733 = 0, $736 = 0, $740 = 0, $743 = 0, $751 = 0, $754 = 0, $758 = 0, $761 = 0, $769 = 0, $772 = 0, $776 = 0, $779 = 0, $787 = 0, $790 = 0, $794 = 0, $797 = 0, $805 = 0, $808 = 0, $812 = 0, $815 = 0, $823 = 0, $826 = 0, $830 = 0, $833 = 0, $841 = 0, $844 = 0, $848 = 0, $851 = 0, $859 = 0, $862 = 0, $866 = 0, $869 = 0, $877 = 0, $880 = 0, $884 = 0, $887 = 0, $895 = 0, $898 = 0, $902 = 0, $905 = 0, $913 = 0, $916 = 0, $920 = 0, $923 = 0, $931 = 0, $934 = 0, $938 = 0, $941 = 0, $951 = 0, $954 = 0, $958 = 0, $961 = 0, $971 = 0, $974 = 0, $978 = 0, $981 = 0, $991 = 0, $994 = 0, $998 = 0, $1001 = 0, $1011 = 0, $1014 = 0, $1018 = 0, $1021 = 0, $1031 = 0, $1034 = 0, $1038 = 0, $1041 = 0, $1051 = 0, $1054 = 0, $1058 = 0, $1061 = 0, $1071 = 0, $1074 = 0, $1078 = 0, $1081 = 0, $1091 = 0, $1094 = 0, $1098 = 0, $1101 = 0, $1111 = 0, $1114 = 0, $1118 = 0, $1121 = 0, $1131 = 0, $1134 = 0, $1138 = 0, $1141 = 0, $1151 = 0, $1154 = 0, $1158 = 0, $1161 = 0, $1171 = 0, $1174 = 0, $1178 = 0, $1181 = 0, $1191 = 0, $1194 = 0, $1198 = 0, $1201 = 0, $1211 = 0, $1214 = 0, $1218 = 0, $1221 = 0, $1231 = 0, $1234 = 0, $1238 = 0, $1241 = 0, $1251 = 0, $1254 = 0, $1258 = 0, $1261 = 0, $1271 = 0, $1274 = 0, $1278 = 0, $1281 = 0, $1291 = 0, $1294 = 0, $1298 = 0, $1301 = 0, $1311 = 0, $1314 = 0, $1318 = 0, $1321 = 0, $1331 = 0, $1334 = 0, $1338 = 0, $1341 = 0, $1349 = 0, $1352 = 0, $1356 = 0, $1359 = 0, $1367 = 0, $1370 = 0, $1374 = 0, $1377 = 0, $1385 = 0, $1388 = 0, $1392 = 0, $1395 = 0, $1403 = 0, $1406 = 0, $1410 = 0, $1413 = 0, $1421 = 0, $1424 = 0, $1428 = 0, $1431 = 0, $1439 = 0, $1442 = 0, $1446 = 0, $1449 = 0, $1457 = 0, $1460 = 0, $1464 = 0, $1467 = 0, $1475 = 0, $1478 = 0, $1482 = 0, $1485 = 0, $1493 = 0, $1496 = 0, $1500 = 0, $1503 = 0, $1511 = 0, $1514 = 0, $1518 = 0, $1521 = 0, $1529 = 0, $1532 = 0, $1536 = 0, $1539 = 0, $1547 = 0, $1550 = 0, $1554 = 0, $1557 = 0, $1565 = 0, $1568 = 0, $1572 = 0, $1575 = 0, $1583 = 0, $1586 = 0, $1590 = 0, $1593 = 0, $1601 = 0, $1604 = 0, $1608 = 0, $1611 = 0, $1619 = 0, $1622 = 0, $1626 = 0, $1629 = 0, $1637 = 0, $1640 = 0, $1644 = 0, $1647 = 0, $1655 = 0, $1662 = 0, $1665 = 0, $1673 = 0, $1680 = 0, $1683 = 0, $1691 = 0;
  $17 = (HEAPU8[$data + 1 | 0] | 0) << 16 | (HEAPU8[$data] | 0) << 24 | (HEAPU8[$data + 2 | 0] | 0) << 8 | (HEAPU8[$data + 3 | 0] | 0);
  $35 = (HEAPU8[$data + 5 | 0] | 0) << 16 | (HEAPU8[$data + 4 | 0] | 0) << 24 | (HEAPU8[$data + 6 | 0] | 0) << 8 | (HEAPU8[$data + 7 | 0] | 0);
  $53 = (HEAPU8[$data + 9 | 0] | 0) << 16 | (HEAPU8[$data + 8 | 0] | 0) << 24 | (HEAPU8[$data + 10 | 0] | 0) << 8 | (HEAPU8[$data + 11 | 0] | 0);
  $71 = (HEAPU8[$data + 13 | 0] | 0) << 16 | (HEAPU8[$data + 12 | 0] | 0) << 24 | (HEAPU8[$data + 14 | 0] | 0) << 8 | (HEAPU8[$data + 15 | 0] | 0);
  $89 = (HEAPU8[$data + 17 | 0] | 0) << 16 | (HEAPU8[$data + 16 | 0] | 0) << 24 | (HEAPU8[$data + 18 | 0] | 0) << 8 | (HEAPU8[$data + 19 | 0] | 0);
  $107 = (HEAPU8[$data + 21 | 0] | 0) << 16 | (HEAPU8[$data + 20 | 0] | 0) << 24 | (HEAPU8[$data + 22 | 0] | 0) << 8 | (HEAPU8[$data + 23 | 0] | 0);
  $125 = (HEAPU8[$data + 25 | 0] | 0) << 16 | (HEAPU8[$data + 24 | 0] | 0) << 24 | (HEAPU8[$data + 26 | 0] | 0) << 8 | (HEAPU8[$data + 27 | 0] | 0);
  $143 = (HEAPU8[$data + 29 | 0] | 0) << 16 | (HEAPU8[$data + 28 | 0] | 0) << 24 | (HEAPU8[$data + 30 | 0] | 0) << 8 | (HEAPU8[$data + 31 | 0] | 0);
  $161 = (HEAPU8[$data + 33 | 0] | 0) << 16 | (HEAPU8[$data + 32 | 0] | 0) << 24 | (HEAPU8[$data + 34 | 0] | 0) << 8 | (HEAPU8[$data + 35 | 0] | 0);
  $179 = (HEAPU8[$data + 37 | 0] | 0) << 16 | (HEAPU8[$data + 36 | 0] | 0) << 24 | (HEAPU8[$data + 38 | 0] | 0) << 8 | (HEAPU8[$data + 39 | 0] | 0);
  $197 = (HEAPU8[$data + 41 | 0] | 0) << 16 | (HEAPU8[$data + 40 | 0] | 0) << 24 | (HEAPU8[$data + 42 | 0] | 0) << 8 | (HEAPU8[$data + 43 | 0] | 0);
  $215 = (HEAPU8[$data + 45 | 0] | 0) << 16 | (HEAPU8[$data + 44 | 0] | 0) << 24 | (HEAPU8[$data + 46 | 0] | 0) << 8 | (HEAPU8[$data + 47 | 0] | 0);
  $233 = (HEAPU8[$data + 49 | 0] | 0) << 16 | (HEAPU8[$data + 48 | 0] | 0) << 24 | (HEAPU8[$data + 50 | 0] | 0) << 8 | (HEAPU8[$data + 51 | 0] | 0);
  $251 = (HEAPU8[$data + 53 | 0] | 0) << 16 | (HEAPU8[$data + 52 | 0] | 0) << 24 | (HEAPU8[$data + 54 | 0] | 0) << 8 | (HEAPU8[$data + 55 | 0] | 0);
  $269 = (HEAPU8[$data + 57 | 0] | 0) << 16 | (HEAPU8[$data + 56 | 0] | 0) << 24 | (HEAPU8[$data + 58 | 0] | 0) << 8 | (HEAPU8[$data + 59 | 0] | 0);
  $287 = (HEAPU8[$data + 61 | 0] | 0) << 16 | (HEAPU8[$data + 60 | 0] | 0) << 24 | (HEAPU8[$data + 62 | 0] | 0) << 8 | (HEAPU8[$data + 63 | 0] | 0);
  $288 = $ctx + 8 | 0;
  $289 = HEAP32[$288 >> 2] | 0;
  $290 = $ctx + 12 | 0;
  $291 = HEAP32[$290 >> 2] | 0;
  $292 = $ctx + 16 | 0;
  $293 = HEAP32[$292 >> 2] | 0;
  $294 = $ctx + 20 | 0;
  $295 = HEAP32[$294 >> 2] | 0;
  $296 = $ctx + 24 | 0;
  $307 = ((($17 + 1518500249 | 0) + ($289 << 5 | $289 >>> 27) | 0) + (HEAP32[$296 >> 2] | 0) | 0) + (($295 ^ $293) & $291 ^ $295) | 0;
  $310 = $291 << 30 | $291 >>> 2;
  $320 = ((($35 + 1518500249 | 0) + $295 | 0) + (($310 ^ $293) & $289 ^ $293) | 0) + ($307 << 5 | $307 >>> 27) | 0;
  $323 = $289 << 30 | $289 >>> 2;
  $333 = ((($53 + 1518500249 | 0) + $293 | 0) + ($307 & ($310 ^ $323) ^ $310) | 0) + ($320 << 5 | $320 >>> 27) | 0;
  $336 = $307 << 30 | $307 >>> 2;
  $346 = ((($71 + 1518500249 | 0) + $310 | 0) + ($320 & ($336 ^ $323) ^ $323) | 0) + ($333 << 5 | $333 >>> 27) | 0;
  $349 = $320 << 30 | $320 >>> 2;
  $359 = ((($89 + 1518500249 | 0) + $323 | 0) + ($333 & ($349 ^ $336) ^ $336) | 0) + ($346 << 5 | $346 >>> 27) | 0;
  $362 = $333 << 30 | $333 >>> 2;
  $372 = ((($107 + 1518500249 | 0) + $336 | 0) + ($346 & ($362 ^ $349) ^ $349) | 0) + ($359 << 5 | $359 >>> 27) | 0;
  $375 = $346 << 30 | $346 >>> 2;
  $385 = ((($125 + 1518500249 | 0) + $349 | 0) + ($359 & ($375 ^ $362) ^ $362) | 0) + ($372 << 5 | $372 >>> 27) | 0;
  $388 = $359 << 30 | $359 >>> 2;
  $398 = ((($143 + 1518500249 | 0) + $362 | 0) + ($372 & ($388 ^ $375) ^ $375) | 0) + ($385 << 5 | $385 >>> 27) | 0;
  $401 = $372 << 30 | $372 >>> 2;
  $411 = ((($161 + 1518500249 | 0) + $375 | 0) + ($385 & ($401 ^ $388) ^ $388) | 0) + ($398 << 5 | $398 >>> 27) | 0;
  $414 = $385 << 30 | $385 >>> 2;
  $424 = ((($179 + 1518500249 | 0) + $388 | 0) + ($398 & ($414 ^ $401) ^ $401) | 0) + ($411 << 5 | $411 >>> 27) | 0;
  $427 = $398 << 30 | $398 >>> 2;
  $437 = ((($197 + 1518500249 | 0) + $401 | 0) + ($411 & ($427 ^ $414) ^ $414) | 0) + ($424 << 5 | $424 >>> 27) | 0;
  $440 = $411 << 30 | $411 >>> 2;
  $450 = ((($215 + 1518500249 | 0) + $414 | 0) + ($424 & ($440 ^ $427) ^ $427) | 0) + ($437 << 5 | $437 >>> 27) | 0;
  $453 = $424 << 30 | $424 >>> 2;
  $463 = ((($233 + 1518500249 | 0) + $427 | 0) + ($437 & ($453 ^ $440) ^ $440) | 0) + ($450 << 5 | $450 >>> 27) | 0;
  $466 = $437 << 30 | $437 >>> 2;
  $476 = ((($251 + 1518500249 | 0) + $440 | 0) + ($450 & ($466 ^ $453) ^ $453) | 0) + ($463 << 5 | $463 >>> 27) | 0;
  $479 = $450 << 30 | $450 >>> 2;
  $489 = ((($269 + 1518500249 | 0) + $453 | 0) + ($463 & ($479 ^ $466) ^ $466) | 0) + ($476 << 5 | $476 >>> 27) | 0;
  $492 = $463 << 30 | $463 >>> 2;
  $502 = ((($287 + 1518500249 | 0) + $466 | 0) + ($476 & ($492 ^ $479) ^ $479) | 0) + ($489 << 5 | $489 >>> 27) | 0;
  $505 = $476 << 30 | $476 >>> 2;
  $514 = $53 ^ $17 ^ $161 ^ $251;
  $517 = $514 << 1 | $514 >>> 31;
  $521 = ((($517 + 1518500249 | 0) + $479 | 0) + ($489 & ($505 ^ $492) ^ $492) | 0) + ($502 << 5 | $502 >>> 27) | 0;
  $524 = $489 << 30 | $489 >>> 2;
  $533 = $71 ^ $35 ^ $179 ^ $269;
  $536 = $533 << 1 | $533 >>> 31;
  $540 = ((($536 + 1518500249 | 0) + $492 | 0) + ($502 & ($524 ^ $505) ^ $505) | 0) + ($521 << 5 | $521 >>> 27) | 0;
  $543 = $502 << 30 | $502 >>> 2;
  $552 = $89 ^ $53 ^ $197 ^ $287;
  $555 = $552 << 1 | $552 >>> 31;
  $559 = ((($555 + 1518500249 | 0) + $505 | 0) + ($521 & ($543 ^ $524) ^ $524) | 0) + ($540 << 5 | $540 >>> 27) | 0;
  $562 = $521 << 30 | $521 >>> 2;
  $571 = $107 ^ $71 ^ $215 ^ $517;
  $574 = $571 << 1 | $571 >>> 31;
  $578 = ((($574 + 1518500249 | 0) + $524 | 0) + ($540 & ($562 ^ $543) ^ $543) | 0) + ($559 << 5 | $559 >>> 27) | 0;
  $581 = $540 << 30 | $540 >>> 2;
  $589 = $125 ^ $89 ^ $233 ^ $536;
  $592 = $589 << 1 | $589 >>> 31;
  $596 = ((($592 + 1859775393 | 0) + $543 | 0) + ($581 ^ $562 ^ $559) | 0) + ($578 << 5 | $578 >>> 27) | 0;
  $599 = $559 << 30 | $559 >>> 2;
  $607 = $143 ^ $107 ^ $251 ^ $555;
  $610 = $607 << 1 | $607 >>> 31;
  $614 = ((($610 + 1859775393 | 0) + $562 | 0) + ($599 ^ $581 ^ $578) | 0) + ($596 << 5 | $596 >>> 27) | 0;
  $617 = $578 << 30 | $578 >>> 2;
  $625 = $161 ^ $125 ^ $269 ^ $574;
  $628 = $625 << 1 | $625 >>> 31;
  $632 = ((($628 + 1859775393 | 0) + $581 | 0) + ($617 ^ $599 ^ $596) | 0) + ($614 << 5 | $614 >>> 27) | 0;
  $635 = $596 << 30 | $596 >>> 2;
  $643 = $179 ^ $143 ^ $287 ^ $592;
  $646 = $643 << 1 | $643 >>> 31;
  $650 = ((($646 + 1859775393 | 0) + $599 | 0) + ($635 ^ $617 ^ $614) | 0) + ($632 << 5 | $632 >>> 27) | 0;
  $653 = $614 << 30 | $614 >>> 2;
  $661 = $197 ^ $161 ^ $517 ^ $610;
  $664 = $661 << 1 | $661 >>> 31;
  $668 = ((($664 + 1859775393 | 0) + $617 | 0) + ($653 ^ $635 ^ $632) | 0) + ($650 << 5 | $650 >>> 27) | 0;
  $671 = $632 << 30 | $632 >>> 2;
  $679 = $215 ^ $179 ^ $536 ^ $628;
  $682 = $679 << 1 | $679 >>> 31;
  $686 = ((($682 + 1859775393 | 0) + $635 | 0) + ($671 ^ $653 ^ $650) | 0) + ($668 << 5 | $668 >>> 27) | 0;
  $689 = $650 << 30 | $650 >>> 2;
  $697 = $233 ^ $197 ^ $555 ^ $646;
  $700 = $697 << 1 | $697 >>> 31;
  $704 = ((($700 + 1859775393 | 0) + $653 | 0) + ($689 ^ $671 ^ $668) | 0) + ($686 << 5 | $686 >>> 27) | 0;
  $707 = $668 << 30 | $668 >>> 2;
  $715 = $251 ^ $215 ^ $574 ^ $664;
  $718 = $715 << 1 | $715 >>> 31;
  $722 = ((($718 + 1859775393 | 0) + $671 | 0) + ($707 ^ $689 ^ $686) | 0) + ($704 << 5 | $704 >>> 27) | 0;
  $725 = $686 << 30 | $686 >>> 2;
  $733 = $269 ^ $233 ^ $592 ^ $682;
  $736 = $733 << 1 | $733 >>> 31;
  $740 = ((($736 + 1859775393 | 0) + $689 | 0) + ($725 ^ $707 ^ $704) | 0) + ($722 << 5 | $722 >>> 27) | 0;
  $743 = $704 << 30 | $704 >>> 2;
  $751 = $287 ^ $251 ^ $610 ^ $700;
  $754 = $751 << 1 | $751 >>> 31;
  $758 = ((($754 + 1859775393 | 0) + $707 | 0) + ($743 ^ $725 ^ $722) | 0) + ($740 << 5 | $740 >>> 27) | 0;
  $761 = $722 << 30 | $722 >>> 2;
  $769 = $269 ^ $517 ^ $628 ^ $718;
  $772 = $769 << 1 | $769 >>> 31;
  $776 = ((($772 + 1859775393 | 0) + $725 | 0) + ($761 ^ $743 ^ $740) | 0) + ($758 << 5 | $758 >>> 27) | 0;
  $779 = $740 << 30 | $740 >>> 2;
  $787 = $287 ^ $536 ^ $646 ^ $736;
  $790 = $787 << 1 | $787 >>> 31;
  $794 = ((($790 + 1859775393 | 0) + $743 | 0) + ($779 ^ $761 ^ $758) | 0) + ($776 << 5 | $776 >>> 27) | 0;
  $797 = $758 << 30 | $758 >>> 2;
  $805 = $555 ^ $517 ^ $664 ^ $754;
  $808 = $805 << 1 | $805 >>> 31;
  $812 = ((($808 + 1859775393 | 0) + $761 | 0) + ($797 ^ $779 ^ $776) | 0) + ($794 << 5 | $794 >>> 27) | 0;
  $815 = $776 << 30 | $776 >>> 2;
  $823 = $536 ^ $574 ^ $682 ^ $772;
  $826 = $823 << 1 | $823 >>> 31;
  $830 = ((($826 + 1859775393 | 0) + $779 | 0) + ($815 ^ $797 ^ $794) | 0) + ($812 << 5 | $812 >>> 27) | 0;
  $833 = $794 << 30 | $794 >>> 2;
  $841 = $555 ^ $592 ^ $700 ^ $790;
  $844 = $841 << 1 | $841 >>> 31;
  $848 = ((($844 + 1859775393 | 0) + $797 | 0) + ($833 ^ $815 ^ $812) | 0) + ($830 << 5 | $830 >>> 27) | 0;
  $851 = $812 << 30 | $812 >>> 2;
  $859 = $610 ^ $574 ^ $718 ^ $808;
  $862 = $859 << 1 | $859 >>> 31;
  $866 = ((($862 + 1859775393 | 0) + $815 | 0) + ($851 ^ $833 ^ $830) | 0) + ($848 << 5 | $848 >>> 27) | 0;
  $869 = $830 << 30 | $830 >>> 2;
  $877 = $592 ^ $628 ^ $736 ^ $826;
  $880 = $877 << 1 | $877 >>> 31;
  $884 = ((($880 + 1859775393 | 0) + $833 | 0) + ($869 ^ $851 ^ $848) | 0) + ($866 << 5 | $866 >>> 27) | 0;
  $887 = $848 << 30 | $848 >>> 2;
  $895 = $610 ^ $646 ^ $754 ^ $844;
  $898 = $895 << 1 | $895 >>> 31;
  $902 = ((($898 + 1859775393 | 0) + $851 | 0) + ($887 ^ $869 ^ $866) | 0) + ($884 << 5 | $884 >>> 27) | 0;
  $905 = $866 << 30 | $866 >>> 2;
  $913 = $664 ^ $628 ^ $772 ^ $862;
  $916 = $913 << 1 | $913 >>> 31;
  $920 = ((($916 + 1859775393 | 0) + $869 | 0) + ($905 ^ $887 ^ $884) | 0) + ($902 << 5 | $902 >>> 27) | 0;
  $923 = $884 << 30 | $884 >>> 2;
  $931 = $646 ^ $682 ^ $790 ^ $880;
  $934 = $931 << 1 | $931 >>> 31;
  $938 = ((($934 + 1859775393 | 0) + $887 | 0) + ($923 ^ $905 ^ $902) | 0) + ($920 << 5 | $920 >>> 27) | 0;
  $941 = $902 << 30 | $902 >>> 2;
  $951 = $664 ^ $700 ^ $808 ^ $898;
  $954 = $951 << 1 | $951 >>> 31;
  $958 = ((($954 - 1894007588 | 0) + $905 | 0) + (($920 | $941) & $923 | $920 & $941) | 0) + ($938 << 5 | $938 >>> 27) | 0;
  $961 = $920 << 30 | $920 >>> 2;
  $971 = $718 ^ $682 ^ $826 ^ $916;
  $974 = $971 << 1 | $971 >>> 31;
  $978 = ((($974 - 1894007588 | 0) + $923 | 0) + (($938 | $961) & $941 | $938 & $961) | 0) + ($958 << 5 | $958 >>> 27) | 0;
  $981 = $938 << 30 | $938 >>> 2;
  $991 = $700 ^ $736 ^ $844 ^ $934;
  $994 = $991 << 1 | $991 >>> 31;
  $998 = ((($994 - 1894007588 | 0) + $941 | 0) + (($958 | $981) & $961 | $958 & $981) | 0) + ($978 << 5 | $978 >>> 27) | 0;
  $1001 = $958 << 30 | $958 >>> 2;
  $1011 = $718 ^ $754 ^ $862 ^ $954;
  $1014 = $1011 << 1 | $1011 >>> 31;
  $1018 = ((($1014 - 1894007588 | 0) + $961 | 0) + (($978 | $1001) & $981 | $978 & $1001) | 0) + ($998 << 5 | $998 >>> 27) | 0;
  $1021 = $978 << 30 | $978 >>> 2;
  $1031 = $772 ^ $736 ^ $880 ^ $974;
  $1034 = $1031 << 1 | $1031 >>> 31;
  $1038 = ((($1034 - 1894007588 | 0) + $981 | 0) + (($998 | $1021) & $1001 | $998 & $1021) | 0) + ($1018 << 5 | $1018 >>> 27) | 0;
  $1041 = $998 << 30 | $998 >>> 2;
  $1051 = $754 ^ $790 ^ $898 ^ $994;
  $1054 = $1051 << 1 | $1051 >>> 31;
  $1058 = ((($1054 - 1894007588 | 0) + $1001 | 0) + (($1018 | $1041) & $1021 | $1018 & $1041) | 0) + ($1038 << 5 | $1038 >>> 27) | 0;
  $1061 = $1018 << 30 | $1018 >>> 2;
  $1071 = $772 ^ $808 ^ $916 ^ $1014;
  $1074 = $1071 << 1 | $1071 >>> 31;
  $1078 = ((($1074 - 1894007588 | 0) + $1021 | 0) + (($1038 | $1061) & $1041 | $1038 & $1061) | 0) + ($1058 << 5 | $1058 >>> 27) | 0;
  $1081 = $1038 << 30 | $1038 >>> 2;
  $1091 = $826 ^ $790 ^ $934 ^ $1034;
  $1094 = $1091 << 1 | $1091 >>> 31;
  $1098 = ((($1094 - 1894007588 | 0) + $1041 | 0) + (($1058 | $1081) & $1061 | $1058 & $1081) | 0) + ($1078 << 5 | $1078 >>> 27) | 0;
  $1101 = $1058 << 30 | $1058 >>> 2;
  $1111 = $808 ^ $844 ^ $954 ^ $1054;
  $1114 = $1111 << 1 | $1111 >>> 31;
  $1118 = ((($1114 - 1894007588 | 0) + $1061 | 0) + (($1078 | $1101) & $1081 | $1078 & $1101) | 0) + ($1098 << 5 | $1098 >>> 27) | 0;
  $1121 = $1078 << 30 | $1078 >>> 2;
  $1131 = $826 ^ $862 ^ $974 ^ $1074;
  $1134 = $1131 << 1 | $1131 >>> 31;
  $1138 = ((($1134 - 1894007588 | 0) + $1081 | 0) + (($1098 | $1121) & $1101 | $1098 & $1121) | 0) + ($1118 << 5 | $1118 >>> 27) | 0;
  $1141 = $1098 << 30 | $1098 >>> 2;
  $1151 = $880 ^ $844 ^ $994 ^ $1094;
  $1154 = $1151 << 1 | $1151 >>> 31;
  $1158 = ((($1154 - 1894007588 | 0) + $1101 | 0) + (($1118 | $1141) & $1121 | $1118 & $1141) | 0) + ($1138 << 5 | $1138 >>> 27) | 0;
  $1161 = $1118 << 30 | $1118 >>> 2;
  $1171 = $862 ^ $898 ^ $1014 ^ $1114;
  $1174 = $1171 << 1 | $1171 >>> 31;
  $1178 = ((($1174 - 1894007588 | 0) + $1121 | 0) + (($1138 | $1161) & $1141 | $1138 & $1161) | 0) + ($1158 << 5 | $1158 >>> 27) | 0;
  $1181 = $1138 << 30 | $1138 >>> 2;
  $1191 = $880 ^ $916 ^ $1034 ^ $1134;
  $1194 = $1191 << 1 | $1191 >>> 31;
  $1198 = ((($1194 - 1894007588 | 0) + $1141 | 0) + (($1158 | $1181) & $1161 | $1158 & $1181) | 0) + ($1178 << 5 | $1178 >>> 27) | 0;
  $1201 = $1158 << 30 | $1158 >>> 2;
  $1211 = $934 ^ $898 ^ $1054 ^ $1154;
  $1214 = $1211 << 1 | $1211 >>> 31;
  $1218 = ((($1214 - 1894007588 | 0) + $1161 | 0) + (($1178 | $1201) & $1181 | $1178 & $1201) | 0) + ($1198 << 5 | $1198 >>> 27) | 0;
  $1221 = $1178 << 30 | $1178 >>> 2;
  $1231 = $916 ^ $954 ^ $1074 ^ $1174;
  $1234 = $1231 << 1 | $1231 >>> 31;
  $1238 = ((($1234 - 1894007588 | 0) + $1181 | 0) + (($1198 | $1221) & $1201 | $1198 & $1221) | 0) + ($1218 << 5 | $1218 >>> 27) | 0;
  $1241 = $1198 << 30 | $1198 >>> 2;
  $1251 = $934 ^ $974 ^ $1094 ^ $1194;
  $1254 = $1251 << 1 | $1251 >>> 31;
  $1258 = ((($1254 - 1894007588 | 0) + $1201 | 0) + (($1218 | $1241) & $1221 | $1218 & $1241) | 0) + ($1238 << 5 | $1238 >>> 27) | 0;
  $1261 = $1218 << 30 | $1218 >>> 2;
  $1271 = $994 ^ $954 ^ $1114 ^ $1214;
  $1274 = $1271 << 1 | $1271 >>> 31;
  $1278 = ((($1274 - 1894007588 | 0) + $1221 | 0) + (($1238 | $1261) & $1241 | $1238 & $1261) | 0) + ($1258 << 5 | $1258 >>> 27) | 0;
  $1281 = $1238 << 30 | $1238 >>> 2;
  $1291 = $974 ^ $1014 ^ $1134 ^ $1234;
  $1294 = $1291 << 1 | $1291 >>> 31;
  $1298 = ((($1294 - 1894007588 | 0) + $1241 | 0) + (($1258 | $1281) & $1261 | $1258 & $1281) | 0) + ($1278 << 5 | $1278 >>> 27) | 0;
  $1301 = $1258 << 30 | $1258 >>> 2;
  $1311 = $994 ^ $1034 ^ $1154 ^ $1254;
  $1314 = $1311 << 1 | $1311 >>> 31;
  $1318 = ((($1314 - 1894007588 | 0) + $1261 | 0) + (($1278 | $1301) & $1281 | $1278 & $1301) | 0) + ($1298 << 5 | $1298 >>> 27) | 0;
  $1321 = $1278 << 30 | $1278 >>> 2;
  $1331 = $1054 ^ $1014 ^ $1174 ^ $1274;
  $1334 = $1331 << 1 | $1331 >>> 31;
  $1338 = ((($1334 - 1894007588 | 0) + $1281 | 0) + (($1298 | $1321) & $1301 | $1298 & $1321) | 0) + ($1318 << 5 | $1318 >>> 27) | 0;
  $1341 = $1298 << 30 | $1298 >>> 2;
  $1349 = $1034 ^ $1074 ^ $1194 ^ $1294;
  $1352 = $1349 << 1 | $1349 >>> 31;
  $1356 = ((($1352 - 899497514 | 0) + $1301 | 0) + ($1341 ^ $1321 ^ $1318) | 0) + ($1338 << 5 | $1338 >>> 27) | 0;
  $1359 = $1318 << 30 | $1318 >>> 2;
  $1367 = $1054 ^ $1094 ^ $1214 ^ $1314;
  $1370 = $1367 << 1 | $1367 >>> 31;
  $1374 = ((($1370 - 899497514 | 0) + $1321 | 0) + ($1359 ^ $1341 ^ $1338) | 0) + ($1356 << 5 | $1356 >>> 27) | 0;
  $1377 = $1338 << 30 | $1338 >>> 2;
  $1385 = $1114 ^ $1074 ^ $1234 ^ $1334;
  $1388 = $1385 << 1 | $1385 >>> 31;
  $1392 = ((($1388 - 899497514 | 0) + $1341 | 0) + ($1377 ^ $1359 ^ $1356) | 0) + ($1374 << 5 | $1374 >>> 27) | 0;
  $1395 = $1356 << 30 | $1356 >>> 2;
  $1403 = $1094 ^ $1134 ^ $1254 ^ $1352;
  $1406 = $1403 << 1 | $1403 >>> 31;
  $1410 = ((($1406 - 899497514 | 0) + $1359 | 0) + ($1395 ^ $1377 ^ $1374) | 0) + ($1392 << 5 | $1392 >>> 27) | 0;
  $1413 = $1374 << 30 | $1374 >>> 2;
  $1421 = $1114 ^ $1154 ^ $1274 ^ $1370;
  $1424 = $1421 << 1 | $1421 >>> 31;
  $1428 = ((($1424 - 899497514 | 0) + $1377 | 0) + ($1413 ^ $1395 ^ $1392) | 0) + ($1410 << 5 | $1410 >>> 27) | 0;
  $1431 = $1392 << 30 | $1392 >>> 2;
  $1439 = $1174 ^ $1134 ^ $1294 ^ $1388;
  $1442 = $1439 << 1 | $1439 >>> 31;
  $1446 = ((($1442 - 899497514 | 0) + $1395 | 0) + ($1431 ^ $1413 ^ $1410) | 0) + ($1428 << 5 | $1428 >>> 27) | 0;
  $1449 = $1410 << 30 | $1410 >>> 2;
  $1457 = $1154 ^ $1194 ^ $1314 ^ $1406;
  $1460 = $1457 << 1 | $1457 >>> 31;
  $1464 = ((($1460 - 899497514 | 0) + $1413 | 0) + ($1449 ^ $1431 ^ $1428) | 0) + ($1446 << 5 | $1446 >>> 27) | 0;
  $1467 = $1428 << 30 | $1428 >>> 2;
  $1475 = $1174 ^ $1214 ^ $1334 ^ $1424;
  $1478 = $1475 << 1 | $1475 >>> 31;
  $1482 = ((($1478 - 899497514 | 0) + $1431 | 0) + ($1467 ^ $1449 ^ $1446) | 0) + ($1464 << 5 | $1464 >>> 27) | 0;
  $1485 = $1446 << 30 | $1446 >>> 2;
  $1493 = $1234 ^ $1194 ^ $1352 ^ $1442;
  $1496 = $1493 << 1 | $1493 >>> 31;
  $1500 = ((($1496 - 899497514 | 0) + $1449 | 0) + ($1485 ^ $1467 ^ $1464) | 0) + ($1482 << 5 | $1482 >>> 27) | 0;
  $1503 = $1464 << 30 | $1464 >>> 2;
  $1511 = $1214 ^ $1254 ^ $1370 ^ $1460;
  $1514 = $1511 << 1 | $1511 >>> 31;
  $1518 = ((($1514 - 899497514 | 0) + $1467 | 0) + ($1503 ^ $1485 ^ $1482) | 0) + ($1500 << 5 | $1500 >>> 27) | 0;
  $1521 = $1482 << 30 | $1482 >>> 2;
  $1529 = $1234 ^ $1274 ^ $1388 ^ $1478;
  $1532 = $1529 << 1 | $1529 >>> 31;
  $1536 = ((($1532 - 899497514 | 0) + $1485 | 0) + ($1521 ^ $1503 ^ $1500) | 0) + ($1518 << 5 | $1518 >>> 27) | 0;
  $1539 = $1500 << 30 | $1500 >>> 2;
  $1547 = $1294 ^ $1254 ^ $1406 ^ $1496;
  $1550 = $1547 << 1 | $1547 >>> 31;
  $1554 = ((($1550 - 899497514 | 0) + $1503 | 0) + ($1539 ^ $1521 ^ $1518) | 0) + ($1536 << 5 | $1536 >>> 27) | 0;
  $1557 = $1518 << 30 | $1518 >>> 2;
  $1565 = $1274 ^ $1314 ^ $1424 ^ $1514;
  $1568 = $1565 << 1 | $1565 >>> 31;
  $1572 = ((($1568 - 899497514 | 0) + $1521 | 0) + ($1557 ^ $1539 ^ $1536) | 0) + ($1554 << 5 | $1554 >>> 27) | 0;
  $1575 = $1536 << 30 | $1536 >>> 2;
  $1583 = $1294 ^ $1334 ^ $1442 ^ $1532;
  $1586 = $1583 << 1 | $1583 >>> 31;
  $1590 = ((($1586 - 899497514 | 0) + $1539 | 0) + ($1575 ^ $1557 ^ $1554) | 0) + ($1572 << 5 | $1572 >>> 27) | 0;
  $1593 = $1554 << 30 | $1554 >>> 2;
  $1601 = $1352 ^ $1314 ^ $1460 ^ $1550;
  $1604 = $1601 << 1 | $1601 >>> 31;
  $1608 = ((($1604 - 899497514 | 0) + $1557 | 0) + ($1593 ^ $1575 ^ $1572) | 0) + ($1590 << 5 | $1590 >>> 27) | 0;
  $1611 = $1572 << 30 | $1572 >>> 2;
  $1619 = $1334 ^ $1370 ^ $1478 ^ $1568;
  $1622 = $1619 << 1 | $1619 >>> 31;
  $1626 = ((($1622 - 899497514 | 0) + $1575 | 0) + ($1611 ^ $1593 ^ $1590) | 0) + ($1608 << 5 | $1608 >>> 27) | 0;
  $1629 = $1590 << 30 | $1590 >>> 2;
  $1637 = $1352 ^ $1388 ^ $1496 ^ $1586;
  $1640 = $1637 << 1 | $1637 >>> 31;
  $1644 = ((($1640 - 899497514 | 0) + $1593 | 0) + ($1629 ^ $1611 ^ $1608) | 0) + ($1626 << 5 | $1626 >>> 27) | 0;
  $1647 = $1608 << 30 | $1608 >>> 2;
  $1655 = $1406 ^ $1370 ^ $1514 ^ $1604;
  $1662 = (((($1655 << 1 | $1655 >>> 31) - 899497514 | 0) + $1611 | 0) + ($1647 ^ $1629 ^ $1626) | 0) + ($1644 << 5 | $1644 >>> 27) | 0;
  $1665 = $1626 << 30 | $1626 >>> 2;
  $1673 = $1388 ^ $1424 ^ $1532 ^ $1622;
  $1680 = (((($1673 << 1 | $1673 >>> 31) - 899497514 | 0) + $1629 | 0) + ($1665 ^ $1647 ^ $1644) | 0) + ($1662 << 5 | $1662 >>> 27) | 0;
  $1683 = $1644 << 30 | $1644 >>> 2;
  $1691 = $1406 ^ $1442 ^ $1550 ^ $1640;
  HEAP32[$288 >> 2] = (((($289 - 899497514 | 0) + ($1691 << 1 | $1691 >>> 31) | 0) + $1647 | 0) + ($1683 ^ $1665 ^ $1662) | 0) + ($1680 << 5 | $1680 >>> 27) | 0;
  HEAP32[$290 >> 2] = $1680 + (HEAP32[$290 >> 2] | 0) | 0;
  HEAP32[$292 >> 2] = ($1662 << 30 | $1662 >>> 2) + (HEAP32[$292 >> 2] | 0) | 0;
  HEAP32[$294 >> 2] = $1683 + (HEAP32[$294 >> 2] | 0) | 0;
  HEAP32[$296 >> 2] = $1665 + (HEAP32[$296 >> 2] | 0) | 0;
  return;
}
function _base64_encode($dst, $dlen, $src, $slen) {
  $dst = $dst | 0;
  $dlen = $dlen | 0;
  $src = $src | 0;
  $slen = $slen | 0;
  var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $10 = 0, $n_0 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $p_049 = 0, $i_048 = 0, $_04447 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $_masked45 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $_masked46 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $p_0_lcssa = 0, $i_0_lcssa = 0, $_044_lcssa = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $_masked = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $storemerge = 0, $p_1 = 0, $79 = 0, $p_2 = 0, $81 = 0, $82 = 0, $83 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($slen | 0) == 0;
    if ($1) {
      $_0 = 0;
      label = 16;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = $slen << 3;
    $4 = ($3 >>> 0) / 6 >>> 0;
    $5 = $4 * -6 & -1;
    $6 = $5 + $3 | 0;
    if (($6 | 0) == 2) {
      label = 3;
      break;
    } else if (($6 | 0) == 4) {
      label = 4;
      break;
    } else {
      $n_0 = $4;
      label = 5;
      break;
    }
   case 3:
    $8 = $4 + 3 | 0;
    $n_0 = $8;
    label = 5;
    break;
   case 4:
    $10 = $4 + 2 | 0;
    $n_0 = $10;
    label = 5;
    break;
   case 5:
    $12 = HEAP32[$dlen >> 2] | 0;
    $13 = $n_0 + 1 | 0;
    $14 = $12 >>> 0 < $13 >>> 0;
    if ($14) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    HEAP32[$dlen >> 2] = $13;
    $_0 = -42;
    label = 16;
    break;
   case 7:
    $17 = ($slen >>> 0) % 3;
    $18 = $slen - $17 | 0;
    $19 = ($17 | 0) == ($slen | 0);
    if ($19) {
      $_044_lcssa = $src;
      $i_0_lcssa = 0;
      $p_0_lcssa = $dst;
      label = 9;
      break;
    } else {
      $_04447 = $src;
      $i_048 = 0;
      $p_049 = $dst;
      label = 8;
      break;
    }
   case 8:
    $20 = $_04447 + 1 | 0;
    $21 = HEAP8[$_04447] | 0;
    $22 = $21 & 255;
    $23 = $_04447 + 2 | 0;
    $24 = HEAP8[$20] | 0;
    $25 = $24 & 255;
    $26 = $_04447 + 3 | 0;
    $27 = HEAP8[$23] | 0;
    $28 = $27 & 255;
    $29 = $22 >>> 2;
    $30 = $29 + 4064 | 0;
    $31 = HEAP8[$30] | 0;
    $32 = $p_049 + 1 | 0;
    HEAP8[$p_049] = $31;
    $33 = $22 << 4;
    $34 = $25 >>> 4;
    $_masked45 = $33 & 48;
    $35 = $_masked45 | $34;
    $36 = $35 + 4064 | 0;
    $37 = HEAP8[$36] | 0;
    $38 = $p_049 + 2 | 0;
    HEAP8[$32] = $37;
    $39 = $25 << 2;
    $40 = $28 >>> 6;
    $_masked46 = $39 & 60;
    $41 = $_masked46 | $40;
    $42 = $41 + 4064 | 0;
    $43 = HEAP8[$42] | 0;
    $44 = $p_049 + 3 | 0;
    HEAP8[$38] = $43;
    $45 = $28 & 63;
    $46 = $45 + 4064 | 0;
    $47 = HEAP8[$46] | 0;
    $48 = $p_049 + 4 | 0;
    HEAP8[$44] = $47;
    $49 = $i_048 + 3 | 0;
    $50 = $49 >>> 0 < $18 >>> 0;
    if ($50) {
      $_04447 = $26;
      $i_048 = $49;
      $p_049 = $48;
      label = 8;
      break;
    } else {
      $_044_lcssa = $26;
      $i_0_lcssa = $49;
      $p_0_lcssa = $48;
      label = 9;
      break;
    }
   case 9:
    $51 = $i_0_lcssa >>> 0 < $slen >>> 0;
    if ($51) {
      label = 10;
      break;
    } else {
      $p_2 = $p_0_lcssa;
      label = 15;
      break;
    }
   case 10:
    $53 = HEAP8[$_044_lcssa] | 0;
    $54 = $53 & 255;
    $55 = $i_0_lcssa + 1 | 0;
    $56 = $55 >>> 0 < $slen >>> 0;
    if ($56) {
      label = 11;
      break;
    } else {
      $62 = 0;
      label = 12;
      break;
    }
   case 11:
    $58 = $_044_lcssa + 1 | 0;
    $59 = HEAP8[$58] | 0;
    $60 = $59 & 255;
    $62 = $60;
    label = 12;
    break;
   case 12:
    $63 = $54 >>> 2;
    $64 = $63 + 4064 | 0;
    $65 = HEAP8[$64] | 0;
    $66 = $p_0_lcssa + 1 | 0;
    HEAP8[$p_0_lcssa] = $65;
    $67 = $54 << 4;
    $68 = $62 >>> 4;
    $_masked = $67 & 48;
    $69 = $68 | $_masked;
    $70 = $69 + 4064 | 0;
    $71 = HEAP8[$70] | 0;
    $72 = $p_0_lcssa + 2 | 0;
    HEAP8[$66] = $71;
    if ($56) {
      label = 13;
      break;
    } else {
      $storemerge = 61;
      label = 14;
      break;
    }
   case 13:
    $74 = $62 << 2;
    $75 = $74 & 60;
    $76 = $75 + 4064 | 0;
    $77 = HEAP8[$76] | 0;
    $storemerge = $77;
    label = 14;
    break;
   case 14:
    $p_1 = $p_0_lcssa + 3 | 0;
    HEAP8[$72] = $storemerge;
    $79 = $p_0_lcssa + 4 | 0;
    HEAP8[$p_1] = 61;
    $p_2 = $79;
    label = 15;
    break;
   case 15:
    $81 = $p_2;
    $82 = $dst;
    $83 = $81 - $82 | 0;
    HEAP32[$dlen >> 2] = $83;
    HEAP8[$p_2] = 0;
    $_0 = 0;
    label = 16;
    break;
   case 16:
    return $_0 | 0;
  }
  return 0;
}
function _base64_decode($dst, $dlen, $src, $slen) {
  $dst = $dst | 0;
  $dlen = $dlen | 0;
  $src = $src | 0;
  $slen = $slen | 0;
  var $1 = 0, $j_059 = 0, $n_058 = 0, $i_056 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $_pr = 0, $20 = 0, $j_1 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $or_cond = 0, $31 = 0, $n_1 = 0, $j_2 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $p_053 = 0, $x_052 = 0, $j_351 = 0, $n_250 = 0, $i_149 = 0, $_04748 = 0, $44 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $p_1 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $n_3 = 0, $j_4 = 0, $x_1 = 0, $p_3 = 0, $74 = 0, $75 = 0, $76 = 0, $p_0_lcssa = 0, $77 = 0, $78 = 0, $79 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($slen | 0) == 0;
    if ($1) {
      $_0 = 0;
      label = 26;
      break;
    } else {
      $i_056 = 0;
      $n_058 = 0;
      $j_059 = 0;
      label = 2;
      break;
    }
   case 2:
    $2 = $slen - $i_056 | 0;
    $3 = $2 >>> 0 > 1;
    if ($3) {
      label = 3;
      break;
    } else {
      label = 5;
      break;
    }
   case 3:
    $5 = $src + $i_056 | 0;
    $6 = HEAP8[$5] | 0;
    $7 = $6 << 24 >> 24 == 13;
    if ($7) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $9 = $i_056 + 1 | 0;
    $10 = $src + $9 | 0;
    $11 = HEAP8[$10] | 0;
    $12 = $11 << 24 >> 24 == 10;
    if ($12) {
      $j_2 = $j_059;
      $n_1 = $n_058;
      label = 12;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $14 = $src + $i_056 | 0;
    $15 = HEAP8[$14] | 0;
    if (($15 << 24 >> 24 | 0) == 61) {
      label = 6;
      break;
    } else if (($15 << 24 >> 24 | 0) == 10) {
      $j_2 = $j_059;
      $n_1 = $n_058;
      label = 12;
      break;
    } else {
      $j_1 = $j_059;
      $20 = $15;
      label = 8;
      break;
    }
   case 6:
    $17 = $j_059 + 1 | 0;
    $18 = $17 >>> 0 > 2;
    if ($18) {
      $_0 = -44;
      label = 26;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $_pr = HEAP8[$14] | 0;
    $j_1 = $17;
    $20 = $_pr;
    label = 8;
    break;
   case 8:
    $21 = $20 << 24 >> 24 < 0;
    if ($21) {
      $_0 = -44;
      label = 26;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $23 = $20 & 255;
    $24 = $23 + 4128 | 0;
    $25 = HEAP8[$24] | 0;
    $26 = $25 << 24 >> 24 == 127;
    if ($26) {
      $_0 = -44;
      label = 26;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $28 = ($25 & 255) > 63;
    $29 = ($j_1 | 0) == 0;
    $or_cond = $28 | $29;
    if ($or_cond) {
      label = 11;
      break;
    } else {
      $_0 = -44;
      label = 26;
      break;
    }
   case 11:
    $31 = $n_058 + 1 | 0;
    $j_2 = $j_1;
    $n_1 = $31;
    label = 12;
    break;
   case 12:
    $33 = $i_056 + 1 | 0;
    $34 = $33 >>> 0 < $slen >>> 0;
    if ($34) {
      $i_056 = $33;
      $n_058 = $n_1;
      $j_059 = $j_2;
      label = 2;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $35 = ($n_1 | 0) == 0;
    if ($35) {
      $_0 = 0;
      label = 26;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $37 = $n_1 * 6 & -1;
    $38 = $37 + 7 | 0;
    $39 = $38 >>> 3;
    $40 = HEAP32[$dlen >> 2] | 0;
    $41 = $40 >>> 0 < $39 >>> 0;
    if ($41) {
      label = 16;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $42 = ($33 | 0) == 0;
    if ($42) {
      $p_0_lcssa = $dst;
      label = 25;
      break;
    } else {
      $_04748 = $src;
      $i_149 = $33;
      $n_250 = 0;
      $j_351 = 3;
      $x_052 = 0;
      $p_053 = $dst;
      label = 17;
      break;
    }
   case 16:
    HEAP32[$dlen >> 2] = $39;
    $_0 = -42;
    label = 26;
    break;
   case 17:
    $44 = HEAP8[$_04748] | 0;
    if (($44 << 24 >> 24 | 0) == 13 | ($44 << 24 >> 24 | 0) == 10) {
      $p_3 = $p_053;
      $x_1 = $x_052;
      $j_4 = $j_351;
      $n_3 = $n_250;
      label = 24;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $46 = $44 & 255;
    $47 = $46 + 4128 | 0;
    $48 = HEAP8[$47] | 0;
    $49 = $48 & 255;
    $50 = $44 << 24 >> 24 == 61;
    $51 = $50 & 1;
    $52 = $j_351 - $51 | 0;
    $53 = $x_052 << 6;
    $54 = $49 & 63;
    $55 = $54 | $53;
    $56 = $n_250 + 1 | 0;
    $57 = ($56 | 0) == 4;
    if ($57) {
      label = 19;
      break;
    } else {
      $p_3 = $p_053;
      $x_1 = $55;
      $j_4 = $52;
      $n_3 = $56;
      label = 24;
      break;
    }
   case 19:
    $59 = ($j_351 | 0) == ($51 | 0);
    if ($59) {
      $p_1 = $p_053;
      label = 21;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $61 = $x_052 >>> 10;
    $62 = $61 & 255;
    $63 = $p_053 + 1 | 0;
    HEAP8[$p_053] = $62;
    $p_1 = $63;
    label = 21;
    break;
   case 21:
    $65 = $52 >>> 0 > 1;
    if ($65) {
      label = 22;
      break;
    } else {
      $p_3 = $p_1;
      $x_1 = $55;
      $j_4 = $52;
      $n_3 = 0;
      label = 24;
      break;
    }
   case 22:
    $67 = $x_052 >>> 2;
    $68 = $67 & 255;
    $69 = $p_1 + 1 | 0;
    HEAP8[$p_1] = $68;
    $70 = $52 >>> 0 > 2;
    if ($70) {
      label = 23;
      break;
    } else {
      $p_3 = $69;
      $x_1 = $55;
      $j_4 = 2;
      $n_3 = 0;
      label = 24;
      break;
    }
   case 23:
    $72 = $55 & 255;
    $73 = $p_1 + 2 | 0;
    HEAP8[$69] = $72;
    $p_3 = $73;
    $x_1 = $55;
    $j_4 = $52;
    $n_3 = 0;
    label = 24;
    break;
   case 24:
    $74 = $i_149 - 1 | 0;
    $75 = $_04748 + 1 | 0;
    $76 = ($74 | 0) == 0;
    if ($76) {
      $p_0_lcssa = $p_3;
      label = 25;
      break;
    } else {
      $_04748 = $75;
      $i_149 = $74;
      $n_250 = $n_3;
      $j_351 = $j_4;
      $x_052 = $x_1;
      $p_053 = $p_3;
      label = 17;
      break;
    }
   case 25:
    $77 = $p_0_lcssa;
    $78 = $dst;
    $79 = $77 - $78 | 0;
    HEAP32[$dlen >> 2] = $79;
    $_0 = 0;
    label = 26;
    break;
   case 26:
    return $_0 | 0;
  }
  return 0;
}
function _sha1_update($ctx, $input, $ilen) {
  $ctx = $ctx | 0;
  $input = $input | 0;
  $ilen = $ilen | 0;
  var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $uadd$0 = 0, $uadd$1 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $or_cond = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $_030_ph = 0, $_0_ph = 0, $left_0_ph = 0, $21 = 0, $_032 = 0, $_03031 = 0, $22 = 0, $23 = 0, $24 = 0, $_0_lcssa = 0, $_030_lcssa = 0, $25 = 0, $27 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($ilen | 0) == 0;
    if ($1) {
      label = 10;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = $ctx | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    $5 = $4 & 63;
    $6 = 64 - $5 | 0;
    $uadd$0 = _llvm_uadd_with_overflow_i32($4 | 0, $ilen | 0) | 0;
    $uadd$1 = tempRet0;
    $7 = $uadd$0;
    HEAP32[$3 >> 2] = $7;
    $8 = $uadd$1;
    if ($8) {
      label = 3;
      break;
    } else {
      label = 4;
      break;
    }
   case 3:
    $10 = $ctx + 4 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    $12 = $11 + 1 | 0;
    HEAP32[$10 >> 2] = $12;
    label = 4;
    break;
   case 4:
    $14 = ($5 | 0) == 0;
    $15 = $6 >>> 0 > $ilen >>> 0;
    $or_cond = $14 | $15;
    if ($or_cond) {
      $left_0_ph = $5;
      $_0_ph = $input;
      $_030_ph = $ilen;
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $17 = $ctx + 28 | 0;
    $18 = $5 + ($ctx + 28) | 0;
    _memcpy($18 | 0, $input | 0, $6);
    _sha1_process($ctx, $17);
    $19 = $input + $6 | 0;
    $20 = $ilen - $6 | 0;
    $left_0_ph = 0;
    $_0_ph = $19;
    $_030_ph = $20;
    label = 6;
    break;
   case 6:
    $21 = $_030_ph >>> 0 > 63;
    if ($21) {
      $_03031 = $_030_ph;
      $_032 = $_0_ph;
      label = 7;
      break;
    } else {
      $_030_lcssa = $_030_ph;
      $_0_lcssa = $_0_ph;
      label = 8;
      break;
    }
   case 7:
    _sha1_process($ctx, $_032);
    $22 = $_032 + 64 | 0;
    $23 = $_03031 - 64 | 0;
    $24 = $23 >>> 0 > 63;
    if ($24) {
      $_03031 = $23;
      $_032 = $22;
      label = 7;
      break;
    } else {
      $_030_lcssa = $23;
      $_0_lcssa = $22;
      label = 8;
      break;
    }
   case 8:
    $25 = ($_030_lcssa | 0) == 0;
    if ($25) {
      label = 10;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $27 = $left_0_ph + ($ctx + 28) | 0;
    _memcpy($27 | 0, $_0_lcssa | 0, $_030_lcssa);
    label = 10;
    break;
   case 10:
    return;
  }
}
function _sha1_finish($ctx, $output) {
  $ctx = $ctx | 0;
  $output = $output | 0;
  var $msglen = 0, $1 = 0, $2 = 0, $5 = 0, $11 = 0, $32 = 0, $35 = 0, $50 = 0, $66 = 0, $82 = 0, $98 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $msglen = __stackBase__ | 0;
  $1 = $ctx | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  $5 = HEAP32[$ctx + 4 >> 2] | 0;
  $11 = $msglen | 0;
  HEAP8[$11] = $5 >>> 21 & 255;
  HEAP8[$msglen + 1 | 0] = $5 >>> 13 & 255;
  HEAP8[$msglen + 2 | 0] = $5 >>> 5 & 255;
  HEAP8[$msglen + 3 | 0] = ($5 << 3 | $2 >>> 29) & 255;
  HEAP8[$msglen + 4 | 0] = $2 >>> 21 & 255;
  HEAP8[$msglen + 5 | 0] = $2 >>> 13 & 255;
  HEAP8[$msglen + 6 | 0] = $2 >>> 5 & 255;
  HEAP8[$msglen + 7 | 0] = $2 << 3 & 255;
  $32 = HEAP32[$1 >> 2] & 63;
  _sha1_update($ctx, 832, ($32 >>> 0 < 56 ? 56 : 120) - $32 | 0);
  _sha1_update($ctx, $11, 8);
  $35 = $ctx + 8 | 0;
  HEAP8[$output] = (HEAP32[$35 >> 2] | 0) >>> 24 & 255;
  HEAP8[$output + 1 | 0] = (HEAP32[$35 >> 2] | 0) >>> 16 & 255;
  HEAP8[$output + 2 | 0] = (HEAP32[$35 >> 2] | 0) >>> 8 & 255;
  HEAP8[$output + 3 | 0] = HEAP32[$35 >> 2] & 255;
  $50 = $ctx + 12 | 0;
  HEAP8[$output + 4 | 0] = (HEAP32[$50 >> 2] | 0) >>> 24 & 255;
  HEAP8[$output + 5 | 0] = (HEAP32[$50 >> 2] | 0) >>> 16 & 255;
  HEAP8[$output + 6 | 0] = (HEAP32[$50 >> 2] | 0) >>> 8 & 255;
  HEAP8[$output + 7 | 0] = HEAP32[$50 >> 2] & 255;
  $66 = $ctx + 16 | 0;
  HEAP8[$output + 8 | 0] = (HEAP32[$66 >> 2] | 0) >>> 24 & 255;
  HEAP8[$output + 9 | 0] = (HEAP32[$66 >> 2] | 0) >>> 16 & 255;
  HEAP8[$output + 10 | 0] = (HEAP32[$66 >> 2] | 0) >>> 8 & 255;
  HEAP8[$output + 11 | 0] = HEAP32[$66 >> 2] & 255;
  $82 = $ctx + 20 | 0;
  HEAP8[$output + 12 | 0] = (HEAP32[$82 >> 2] | 0) >>> 24 & 255;
  HEAP8[$output + 13 | 0] = (HEAP32[$82 >> 2] | 0) >>> 16 & 255;
  HEAP8[$output + 14 | 0] = (HEAP32[$82 >> 2] | 0) >>> 8 & 255;
  HEAP8[$output + 15 | 0] = HEAP32[$82 >> 2] & 255;
  $98 = $ctx + 24 | 0;
  HEAP8[$output + 16 | 0] = (HEAP32[$98 >> 2] | 0) >>> 24 & 255;
  HEAP8[$output + 17 | 0] = (HEAP32[$98 >> 2] | 0) >>> 16 & 255;
  HEAP8[$output + 18 | 0] = (HEAP32[$98 >> 2] | 0) >>> 8 & 255;
  HEAP8[$output + 19 | 0] = HEAP32[$98 >> 2] & 255;
  STACKTOP = __stackBase__;
  return;
}
function _sha1($input, $ilen, $output) {
  $input = $input | 0;
  $ilen = $ilen | 0;
  $output = $output | 0;
  var $ctx = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 224 | 0;
  $ctx = __stackBase__ | 0;
  _sha1_starts($ctx);
  _sha1_update($ctx, $input, $ilen);
  _sha1_finish($ctx, $output);
  STACKTOP = __stackBase__;
  return;
}
function _malloc($bytes) {
  $bytes = $bytes | 0;
  var $1 = 0, $3 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $_sum110 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $_sum111112 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $_sum104 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $100 = 0, $101 = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $_sum105106 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $_sum109 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $F4_0 = 0, $_sum108 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $144 = 0, $146 = 0, $147 = 0, $149 = 0, $150 = 0, $152 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $nb_0 = 0, $162 = 0, $163 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $_sum102 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $180 = 0, $181 = 0, $182 = 0, $_sum101 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $191 = 0, $192 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $_sum = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $207 = 0, $mem_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $bytes >>> 0 < 245;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 29;
      break;
    }
   case 2:
    $3 = $bytes >>> 0 < 11;
    if ($3) {
      $8 = 16;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $5 = $bytes + 11 | 0;
    $6 = $5 & -8;
    $8 = $6;
    label = 4;
    break;
   case 4:
    $9 = $8 >>> 3;
    $10 = HEAP32[2304] | 0;
    $11 = $10 >>> ($9 >>> 0);
    $12 = $11 & 3;
    $13 = ($12 | 0) == 0;
    if ($13) {
      label = 12;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $15 = $11 & 1;
    $16 = $15 ^ 1;
    $17 = $16 + $9 | 0;
    $18 = $17 << 1;
    $19 = 9256 + ($18 << 2) | 0;
    $20 = $19;
    $_sum110 = $18 + 2 | 0;
    $21 = 9256 + ($_sum110 << 2) | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $23 = $22 + 8 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = ($20 | 0) == ($24 | 0);
    if ($25) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $27 = 1 << $17;
    $28 = $27 ^ -1;
    $29 = $10 & $28;
    HEAP32[2304] = $29;
    label = 11;
    break;
   case 7:
    $31 = $24;
    $32 = HEAP32[2308] | 0;
    $33 = $31 >>> 0 < $32 >>> 0;
    if ($33) {
      label = 10;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $35 = $24 + 12 | 0;
    $36 = HEAP32[$35 >> 2] | 0;
    $37 = ($36 | 0) == ($22 | 0);
    if ($37) {
      label = 9;
      break;
    } else {
      label = 10;
      break;
    }
   case 9:
    HEAP32[$35 >> 2] = $20;
    HEAP32[$21 >> 2] = $24;
    label = 11;
    break;
   case 10:
    _abort();
    return 0;
    return 0;
   case 11:
    $40 = $17 << 3;
    $41 = $40 | 3;
    $42 = $22 + 4 | 0;
    HEAP32[$42 >> 2] = $41;
    $43 = $22;
    $_sum111112 = $40 | 4;
    $44 = $43 + $_sum111112 | 0;
    $45 = $44;
    $46 = HEAP32[$45 >> 2] | 0;
    $47 = $46 | 1;
    HEAP32[$45 >> 2] = $47;
    $48 = $23;
    $mem_0 = $48;
    label = 40;
    break;
   case 12:
    $50 = HEAP32[2306] | 0;
    $51 = $8 >>> 0 > $50 >>> 0;
    if ($51) {
      label = 13;
      break;
    } else {
      $nb_0 = $8;
      label = 32;
      break;
    }
   case 13:
    $53 = ($11 | 0) == 0;
    if ($53) {
      label = 27;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $55 = $11 << $9;
    $56 = 2 << $9;
    $57 = -$56 | 0;
    $58 = $56 | $57;
    $59 = $55 & $58;
    $60 = -$59 | 0;
    $61 = $59 & $60;
    $62 = $61 - 1 | 0;
    $63 = $62 >>> 12;
    $64 = $63 & 16;
    $65 = $62 >>> ($64 >>> 0);
    $66 = $65 >>> 5;
    $67 = $66 & 8;
    $68 = $67 | $64;
    $69 = $65 >>> ($67 >>> 0);
    $70 = $69 >>> 2;
    $71 = $70 & 4;
    $72 = $68 | $71;
    $73 = $69 >>> ($71 >>> 0);
    $74 = $73 >>> 1;
    $75 = $74 & 2;
    $76 = $72 | $75;
    $77 = $73 >>> ($75 >>> 0);
    $78 = $77 >>> 1;
    $79 = $78 & 1;
    $80 = $76 | $79;
    $81 = $77 >>> ($79 >>> 0);
    $82 = $80 + $81 | 0;
    $83 = $82 << 1;
    $84 = 9256 + ($83 << 2) | 0;
    $85 = $84;
    $_sum104 = $83 + 2 | 0;
    $86 = 9256 + ($_sum104 << 2) | 0;
    $87 = HEAP32[$86 >> 2] | 0;
    $88 = $87 + 8 | 0;
    $89 = HEAP32[$88 >> 2] | 0;
    $90 = ($85 | 0) == ($89 | 0);
    if ($90) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $92 = 1 << $82;
    $93 = $92 ^ -1;
    $94 = $10 & $93;
    HEAP32[2304] = $94;
    label = 20;
    break;
   case 16:
    $96 = $89;
    $97 = HEAP32[2308] | 0;
    $98 = $96 >>> 0 < $97 >>> 0;
    if ($98) {
      label = 19;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $100 = $89 + 12 | 0;
    $101 = HEAP32[$100 >> 2] | 0;
    $102 = ($101 | 0) == ($87 | 0);
    if ($102) {
      label = 18;
      break;
    } else {
      label = 19;
      break;
    }
   case 18:
    HEAP32[$100 >> 2] = $85;
    HEAP32[$86 >> 2] = $89;
    label = 20;
    break;
   case 19:
    _abort();
    return 0;
    return 0;
   case 20:
    $105 = $82 << 3;
    $106 = $105 - $8 | 0;
    $107 = $8 | 3;
    $108 = $87 + 4 | 0;
    HEAP32[$108 >> 2] = $107;
    $109 = $87;
    $110 = $109 + $8 | 0;
    $111 = $110;
    $112 = $106 | 1;
    $_sum105106 = $8 | 4;
    $113 = $109 + $_sum105106 | 0;
    $114 = $113;
    HEAP32[$114 >> 2] = $112;
    $115 = $109 + $105 | 0;
    $116 = $115;
    HEAP32[$116 >> 2] = $106;
    $117 = HEAP32[2306] | 0;
    $118 = ($117 | 0) == 0;
    if ($118) {
      label = 26;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $120 = HEAP32[2309] | 0;
    $121 = $117 >>> 3;
    $122 = $121 << 1;
    $123 = 9256 + ($122 << 2) | 0;
    $124 = $123;
    $125 = HEAP32[2304] | 0;
    $126 = 1 << $121;
    $127 = $125 & $126;
    $128 = ($127 | 0) == 0;
    if ($128) {
      label = 22;
      break;
    } else {
      label = 23;
      break;
    }
   case 22:
    $130 = $125 | $126;
    HEAP32[2304] = $130;
    $F4_0 = $124;
    label = 25;
    break;
   case 23:
    $_sum109 = $122 + 2 | 0;
    $132 = 9256 + ($_sum109 << 2) | 0;
    $133 = HEAP32[$132 >> 2] | 0;
    $134 = $133;
    $135 = HEAP32[2308] | 0;
    $136 = $134 >>> 0 < $135 >>> 0;
    if ($136) {
      label = 24;
      break;
    } else {
      $F4_0 = $133;
      label = 25;
      break;
    }
   case 24:
    _abort();
    return 0;
    return 0;
   case 25:
    $_sum108 = $122 + 2 | 0;
    $139 = 9256 + ($_sum108 << 2) | 0;
    HEAP32[$139 >> 2] = $120;
    $140 = $F4_0 + 12 | 0;
    HEAP32[$140 >> 2] = $120;
    $141 = $120 + 8 | 0;
    HEAP32[$141 >> 2] = $F4_0;
    $142 = $120 + 12 | 0;
    HEAP32[$142 >> 2] = $124;
    label = 26;
    break;
   case 26:
    HEAP32[2306] = $106;
    HEAP32[2309] = $111;
    $144 = $88;
    $mem_0 = $144;
    label = 40;
    break;
   case 27:
    $146 = HEAP32[2305] | 0;
    $147 = ($146 | 0) == 0;
    if ($147) {
      $nb_0 = $8;
      label = 32;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $149 = _tmalloc_small($8) | 0;
    $150 = ($149 | 0) == 0;
    if ($150) {
      $nb_0 = $8;
      label = 32;
      break;
    } else {
      $mem_0 = $149;
      label = 40;
      break;
    }
   case 29:
    $152 = $bytes >>> 0 > 4294967231;
    if ($152) {
      $nb_0 = -1;
      label = 32;
      break;
    } else {
      label = 30;
      break;
    }
   case 30:
    $154 = $bytes + 11 | 0;
    $155 = $154 & -8;
    $156 = HEAP32[2305] | 0;
    $157 = ($156 | 0) == 0;
    if ($157) {
      $nb_0 = $155;
      label = 32;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    $159 = _tmalloc_large($155) | 0;
    $160 = ($159 | 0) == 0;
    if ($160) {
      $nb_0 = $155;
      label = 32;
      break;
    } else {
      $mem_0 = $159;
      label = 40;
      break;
    }
   case 32:
    $162 = HEAP32[2306] | 0;
    $163 = $nb_0 >>> 0 > $162 >>> 0;
    if ($163) {
      label = 37;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $165 = $162 - $nb_0 | 0;
    $166 = HEAP32[2309] | 0;
    $167 = $165 >>> 0 > 15;
    if ($167) {
      label = 34;
      break;
    } else {
      label = 35;
      break;
    }
   case 34:
    $169 = $166;
    $170 = $169 + $nb_0 | 0;
    $171 = $170;
    HEAP32[2309] = $171;
    HEAP32[2306] = $165;
    $172 = $165 | 1;
    $_sum102 = $nb_0 + 4 | 0;
    $173 = $169 + $_sum102 | 0;
    $174 = $173;
    HEAP32[$174 >> 2] = $172;
    $175 = $169 + $162 | 0;
    $176 = $175;
    HEAP32[$176 >> 2] = $165;
    $177 = $nb_0 | 3;
    $178 = $166 + 4 | 0;
    HEAP32[$178 >> 2] = $177;
    label = 36;
    break;
   case 35:
    HEAP32[2306] = 0;
    HEAP32[2309] = 0;
    $180 = $162 | 3;
    $181 = $166 + 4 | 0;
    HEAP32[$181 >> 2] = $180;
    $182 = $166;
    $_sum101 = $162 + 4 | 0;
    $183 = $182 + $_sum101 | 0;
    $184 = $183;
    $185 = HEAP32[$184 >> 2] | 0;
    $186 = $185 | 1;
    HEAP32[$184 >> 2] = $186;
    label = 36;
    break;
   case 36:
    $188 = $166 + 8 | 0;
    $189 = $188;
    $mem_0 = $189;
    label = 40;
    break;
   case 37:
    $191 = HEAP32[2307] | 0;
    $192 = $nb_0 >>> 0 < $191 >>> 0;
    if ($192) {
      label = 38;
      break;
    } else {
      label = 39;
      break;
    }
   case 38:
    $194 = $191 - $nb_0 | 0;
    HEAP32[2307] = $194;
    $195 = HEAP32[2310] | 0;
    $196 = $195;
    $197 = $196 + $nb_0 | 0;
    $198 = $197;
    HEAP32[2310] = $198;
    $199 = $194 | 1;
    $_sum = $nb_0 + 4 | 0;
    $200 = $196 + $_sum | 0;
    $201 = $200;
    HEAP32[$201 >> 2] = $199;
    $202 = $nb_0 | 3;
    $203 = $195 + 4 | 0;
    HEAP32[$203 >> 2] = $202;
    $204 = $195 + 8 | 0;
    $205 = $204;
    $mem_0 = $205;
    label = 40;
    break;
   case 39:
    $207 = _sys_alloc($nb_0) | 0;
    $mem_0 = $207;
    label = 40;
    break;
   case 40:
    return $mem_0 | 0;
  }
  return 0;
}
function _tmalloc_small($nb) {
  $nb = $nb | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $rsize_0 = 0, $v_0 = 0, $t_0 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $_rsize_0 = 0, $_v_0 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $80 = 0, $RP_0 = 0, $R_0 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $CP_0 = 0, $88 = 0, $90 = 0, $91 = 0, $92 = 0, $R_1 = 0, $96 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $cond = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $115 = 0, $116 = 0, $119 = 0, $122 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $138 = 0, $141 = 0, $142 = 0, $143 = 0, $145 = 0, $146 = 0, $147 = 0, $149 = 0, $150 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $_sum4 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $165 = 0, $166 = 0, $_sum = 0, $167 = 0, $168 = 0, $_sum1 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $182 = 0, $184 = 0, $_sum3 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $F1_0 = 0, $_sum2 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $199 = 0, $200 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP32[2305] | 0;
    $2 = -$1 | 0;
    $3 = $1 & $2;
    $4 = $3 - 1 | 0;
    $5 = $4 >>> 12;
    $6 = $5 & 16;
    $7 = $4 >>> ($6 >>> 0);
    $8 = $7 >>> 5;
    $9 = $8 & 8;
    $10 = $9 | $6;
    $11 = $7 >>> ($9 >>> 0);
    $12 = $11 >>> 2;
    $13 = $12 & 4;
    $14 = $10 | $13;
    $15 = $11 >>> ($13 >>> 0);
    $16 = $15 >>> 1;
    $17 = $16 & 2;
    $18 = $14 | $17;
    $19 = $15 >>> ($17 >>> 0);
    $20 = $19 >>> 1;
    $21 = $20 & 1;
    $22 = $18 | $21;
    $23 = $19 >>> ($21 >>> 0);
    $24 = $22 + $23 | 0;
    $25 = 9520 + ($24 << 2) | 0;
    $26 = HEAP32[$25 >> 2] | 0;
    $27 = $26 + 4 | 0;
    $28 = HEAP32[$27 >> 2] | 0;
    $29 = $28 & -8;
    $30 = $29 - $nb | 0;
    $t_0 = $26;
    $v_0 = $26;
    $rsize_0 = $30;
    label = 2;
    break;
   case 2:
    $32 = $t_0 + 16 | 0;
    $33 = HEAP32[$32 >> 2] | 0;
    $34 = ($33 | 0) == 0;
    if ($34) {
      label = 3;
      break;
    } else {
      $39 = $33;
      label = 4;
      break;
    }
   case 3:
    $36 = $t_0 + 20 | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    $38 = ($37 | 0) == 0;
    if ($38) {
      label = 5;
      break;
    } else {
      $39 = $37;
      label = 4;
      break;
    }
   case 4:
    $40 = $39 + 4 | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    $42 = $41 & -8;
    $43 = $42 - $nb | 0;
    $44 = $43 >>> 0 < $rsize_0 >>> 0;
    $_rsize_0 = $44 ? $43 : $rsize_0;
    $_v_0 = $44 ? $39 : $v_0;
    $t_0 = $39;
    $v_0 = $_v_0;
    $rsize_0 = $_rsize_0;
    label = 2;
    break;
   case 5:
    $46 = $v_0;
    $47 = HEAP32[2308] | 0;
    $48 = $46 >>> 0 < $47 >>> 0;
    if ($48) {
      label = 51;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $50 = $46 + $nb | 0;
    $51 = $50;
    $52 = $46 >>> 0 < $50 >>> 0;
    if ($52) {
      label = 7;
      break;
    } else {
      label = 51;
      break;
    }
   case 7:
    $54 = $v_0 + 24 | 0;
    $55 = HEAP32[$54 >> 2] | 0;
    $56 = $v_0 + 12 | 0;
    $57 = HEAP32[$56 >> 2] | 0;
    $58 = ($57 | 0) == ($v_0 | 0);
    if ($58) {
      label = 13;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $60 = $v_0 + 8 | 0;
    $61 = HEAP32[$60 >> 2] | 0;
    $62 = $61;
    $63 = $62 >>> 0 < $47 >>> 0;
    if ($63) {
      label = 12;
      break;
    } else {
      label = 9;
      break;
    }
   case 9:
    $65 = $61 + 12 | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    $67 = ($66 | 0) == ($v_0 | 0);
    if ($67) {
      label = 10;
      break;
    } else {
      label = 12;
      break;
    }
   case 10:
    $69 = $57 + 8 | 0;
    $70 = HEAP32[$69 >> 2] | 0;
    $71 = ($70 | 0) == ($v_0 | 0);
    if ($71) {
      label = 11;
      break;
    } else {
      label = 12;
      break;
    }
   case 11:
    HEAP32[$65 >> 2] = $57;
    HEAP32[$69 >> 2] = $61;
    $R_1 = $57;
    label = 21;
    break;
   case 12:
    _abort();
    return 0;
    return 0;
   case 13:
    $74 = $v_0 + 20 | 0;
    $75 = HEAP32[$74 >> 2] | 0;
    $76 = ($75 | 0) == 0;
    if ($76) {
      label = 14;
      break;
    } else {
      $R_0 = $75;
      $RP_0 = $74;
      label = 15;
      break;
    }
   case 14:
    $78 = $v_0 + 16 | 0;
    $79 = HEAP32[$78 >> 2] | 0;
    $80 = ($79 | 0) == 0;
    if ($80) {
      $R_1 = 0;
      label = 21;
      break;
    } else {
      $R_0 = $79;
      $RP_0 = $78;
      label = 15;
      break;
    }
   case 15:
    $81 = $R_0 + 20 | 0;
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = ($82 | 0) == 0;
    if ($83) {
      label = 16;
      break;
    } else {
      $CP_0 = $81;
      label = 17;
      break;
    }
   case 16:
    $85 = $R_0 + 16 | 0;
    $86 = HEAP32[$85 >> 2] | 0;
    $87 = ($86 | 0) == 0;
    if ($87) {
      label = 18;
      break;
    } else {
      $CP_0 = $85;
      label = 17;
      break;
    }
   case 17:
    $88 = HEAP32[$CP_0 >> 2] | 0;
    $R_0 = $88;
    $RP_0 = $CP_0;
    label = 15;
    break;
   case 18:
    $90 = $RP_0;
    $91 = HEAP32[2308] | 0;
    $92 = $90 >>> 0 < $91 >>> 0;
    if ($92) {
      label = 20;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    HEAP32[$RP_0 >> 2] = 0;
    $R_1 = $R_0;
    label = 21;
    break;
   case 20:
    _abort();
    return 0;
    return 0;
   case 21:
    $96 = ($55 | 0) == 0;
    if ($96) {
      label = 41;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $98 = $v_0 + 28 | 0;
    $99 = HEAP32[$98 >> 2] | 0;
    $100 = 9520 + ($99 << 2) | 0;
    $101 = HEAP32[$100 >> 2] | 0;
    $102 = ($v_0 | 0) == ($101 | 0);
    if ($102) {
      label = 23;
      break;
    } else {
      label = 25;
      break;
    }
   case 23:
    HEAP32[$100 >> 2] = $R_1;
    $cond = ($R_1 | 0) == 0;
    if ($cond) {
      label = 24;
      break;
    } else {
      label = 31;
      break;
    }
   case 24:
    $104 = HEAP32[$98 >> 2] | 0;
    $105 = 1 << $104;
    $106 = $105 ^ -1;
    $107 = HEAP32[2305] | 0;
    $108 = $107 & $106;
    HEAP32[2305] = $108;
    label = 41;
    break;
   case 25:
    $110 = $55;
    $111 = HEAP32[2308] | 0;
    $112 = $110 >>> 0 < $111 >>> 0;
    if ($112) {
      label = 29;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    $114 = $55 + 16 | 0;
    $115 = HEAP32[$114 >> 2] | 0;
    $116 = ($115 | 0) == ($v_0 | 0);
    if ($116) {
      label = 27;
      break;
    } else {
      label = 28;
      break;
    }
   case 27:
    HEAP32[$114 >> 2] = $R_1;
    label = 30;
    break;
   case 28:
    $119 = $55 + 20 | 0;
    HEAP32[$119 >> 2] = $R_1;
    label = 30;
    break;
   case 29:
    _abort();
    return 0;
    return 0;
   case 30:
    $122 = ($R_1 | 0) == 0;
    if ($122) {
      label = 41;
      break;
    } else {
      label = 31;
      break;
    }
   case 31:
    $124 = $R_1;
    $125 = HEAP32[2308] | 0;
    $126 = $124 >>> 0 < $125 >>> 0;
    if ($126) {
      label = 40;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $128 = $R_1 + 24 | 0;
    HEAP32[$128 >> 2] = $55;
    $129 = $v_0 + 16 | 0;
    $130 = HEAP32[$129 >> 2] | 0;
    $131 = ($130 | 0) == 0;
    if ($131) {
      label = 36;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $133 = $130;
    $134 = HEAP32[2308] | 0;
    $135 = $133 >>> 0 < $134 >>> 0;
    if ($135) {
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    $137 = $R_1 + 16 | 0;
    HEAP32[$137 >> 2] = $130;
    $138 = $130 + 24 | 0;
    HEAP32[$138 >> 2] = $R_1;
    label = 36;
    break;
   case 35:
    _abort();
    return 0;
    return 0;
   case 36:
    $141 = $v_0 + 20 | 0;
    $142 = HEAP32[$141 >> 2] | 0;
    $143 = ($142 | 0) == 0;
    if ($143) {
      label = 41;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    $145 = $142;
    $146 = HEAP32[2308] | 0;
    $147 = $145 >>> 0 < $146 >>> 0;
    if ($147) {
      label = 39;
      break;
    } else {
      label = 38;
      break;
    }
   case 38:
    $149 = $R_1 + 20 | 0;
    HEAP32[$149 >> 2] = $142;
    $150 = $142 + 24 | 0;
    HEAP32[$150 >> 2] = $R_1;
    label = 41;
    break;
   case 39:
    _abort();
    return 0;
    return 0;
   case 40:
    _abort();
    return 0;
    return 0;
   case 41:
    $154 = $rsize_0 >>> 0 < 16;
    if ($154) {
      label = 42;
      break;
    } else {
      label = 43;
      break;
    }
   case 42:
    $156 = $rsize_0 + $nb | 0;
    $157 = $156 | 3;
    $158 = $v_0 + 4 | 0;
    HEAP32[$158 >> 2] = $157;
    $_sum4 = $156 + 4 | 0;
    $159 = $46 + $_sum4 | 0;
    $160 = $159;
    $161 = HEAP32[$160 >> 2] | 0;
    $162 = $161 | 1;
    HEAP32[$160 >> 2] = $162;
    label = 50;
    break;
   case 43:
    $164 = $nb | 3;
    $165 = $v_0 + 4 | 0;
    HEAP32[$165 >> 2] = $164;
    $166 = $rsize_0 | 1;
    $_sum = $nb + 4 | 0;
    $167 = $46 + $_sum | 0;
    $168 = $167;
    HEAP32[$168 >> 2] = $166;
    $_sum1 = $rsize_0 + $nb | 0;
    $169 = $46 + $_sum1 | 0;
    $170 = $169;
    HEAP32[$170 >> 2] = $rsize_0;
    $171 = HEAP32[2306] | 0;
    $172 = ($171 | 0) == 0;
    if ($172) {
      label = 49;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    $174 = HEAP32[2309] | 0;
    $175 = $171 >>> 3;
    $176 = $175 << 1;
    $177 = 9256 + ($176 << 2) | 0;
    $178 = $177;
    $179 = HEAP32[2304] | 0;
    $180 = 1 << $175;
    $181 = $179 & $180;
    $182 = ($181 | 0) == 0;
    if ($182) {
      label = 45;
      break;
    } else {
      label = 46;
      break;
    }
   case 45:
    $184 = $179 | $180;
    HEAP32[2304] = $184;
    $F1_0 = $178;
    label = 48;
    break;
   case 46:
    $_sum3 = $176 + 2 | 0;
    $186 = 9256 + ($_sum3 << 2) | 0;
    $187 = HEAP32[$186 >> 2] | 0;
    $188 = $187;
    $189 = HEAP32[2308] | 0;
    $190 = $188 >>> 0 < $189 >>> 0;
    if ($190) {
      label = 47;
      break;
    } else {
      $F1_0 = $187;
      label = 48;
      break;
    }
   case 47:
    _abort();
    return 0;
    return 0;
   case 48:
    $_sum2 = $176 + 2 | 0;
    $193 = 9256 + ($_sum2 << 2) | 0;
    HEAP32[$193 >> 2] = $174;
    $194 = $F1_0 + 12 | 0;
    HEAP32[$194 >> 2] = $174;
    $195 = $174 + 8 | 0;
    HEAP32[$195 >> 2] = $F1_0;
    $196 = $174 + 12 | 0;
    HEAP32[$196 >> 2] = $178;
    label = 49;
    break;
   case 49:
    HEAP32[2306] = $rsize_0;
    HEAP32[2309] = $51;
    label = 50;
    break;
   case 50:
    $199 = $v_0 + 8 | 0;
    $200 = $199;
    return $200 | 0;
   case 51:
    _abort();
    return 0;
    return 0;
  }
  return 0;
}
function _tmalloc_large($nb) {
  $nb = $nb | 0;
  var $1 = 0, $2 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $idx_0 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $rst_0 = 0, $sizebits_0 = 0, $t_0 = 0, $rsize_0 = 0, $v_0 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $rsize_1 = 0, $v_1 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $or_cond = 0, $rst_1 = 0, $57 = 0, $58 = 0, $t_1 = 0, $rsize_2 = 0, $v_2 = 0, $59 = 0, $60 = 0, $or_cond19 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $t_2_ph = 0, $94 = 0, $v_328 = 0, $rsize_327 = 0, $t_226 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_rsize_3 = 0, $t_2_v_3 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $v_3_lcssa = 0, $rsize_3_lcssa = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $117 = 0, $118 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $133 = 0, $135 = 0, $136 = 0, $137 = 0, $140 = 0, $141 = 0, $142 = 0, $144 = 0, $145 = 0, $146 = 0, $RP_0 = 0, $R_0 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $CP_0 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $R_1 = 0, $162 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $cond = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $180 = 0, $181 = 0, $182 = 0, $185 = 0, $188 = 0, $190 = 0, $191 = 0, $192 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $199 = 0, $200 = 0, $201 = 0, $203 = 0, $204 = 0, $207 = 0, $208 = 0, $209 = 0, $211 = 0, $212 = 0, $213 = 0, $215 = 0, $216 = 0, $220 = 0, $222 = 0, $223 = 0, $224 = 0, $_sum18 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $230 = 0, $231 = 0, $232 = 0, $_sum = 0, $233 = 0, $234 = 0, $_sum1 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $248 = 0, $_sum17 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $F5_0 = 0, $_sum14 = 0, $257 = 0, $258 = 0, $_sum15 = 0, $259 = 0, $260 = 0, $_sum16 = 0, $261 = 0, $262 = 0, $264 = 0, $265 = 0, $266 = 0, $268 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $I7_0 = 0, $293 = 0, $_sum2 = 0, $294 = 0, $295 = 0, $_sum3 = 0, $296 = 0, $_sum4 = 0, $297 = 0, $298 = 0, $299 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $305 = 0, $306 = 0, $_sum5 = 0, $307 = 0, $308 = 0, $_sum6 = 0, $309 = 0, $310 = 0, $_sum7 = 0, $311 = 0, $312 = 0, $314 = 0, $315 = 0, $317 = 0, $318 = 0, $320 = 0, $321 = 0, $T_0 = 0, $K12_0 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $334 = 0, $335 = 0, $336 = 0, $_sum11 = 0, $338 = 0, $339 = 0, $_sum12 = 0, $340 = 0, $341 = 0, $_sum13 = 0, $342 = 0, $343 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $352 = 0, $353 = 0, $355 = 0, $_sum8 = 0, $356 = 0, $357 = 0, $_sum9 = 0, $358 = 0, $359 = 0, $_sum10 = 0, $360 = 0, $361 = 0, $363 = 0, $364 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = -$nb | 0;
    $2 = $nb >>> 8;
    $3 = ($2 | 0) == 0;
    if ($3) {
      $idx_0 = 0;
      label = 4;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $5 = $nb >>> 0 > 16777215;
    if ($5) {
      $idx_0 = 31;
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $7 = $2 + 1048320 | 0;
    $8 = $7 >>> 16;
    $9 = $8 & 8;
    $10 = $2 << $9;
    $11 = $10 + 520192 | 0;
    $12 = $11 >>> 16;
    $13 = $12 & 4;
    $14 = $13 | $9;
    $15 = $10 << $13;
    $16 = $15 + 245760 | 0;
    $17 = $16 >>> 16;
    $18 = $17 & 2;
    $19 = $14 | $18;
    $20 = 14 - $19 | 0;
    $21 = $15 << $18;
    $22 = $21 >>> 15;
    $23 = $20 + $22 | 0;
    $24 = $23 << 1;
    $25 = $23 + 7 | 0;
    $26 = $nb >>> ($25 >>> 0);
    $27 = $26 & 1;
    $28 = $27 | $24;
    $idx_0 = $28;
    label = 4;
    break;
   case 4:
    $30 = 9520 + ($idx_0 << 2) | 0;
    $31 = HEAP32[$30 >> 2] | 0;
    $32 = ($31 | 0) == 0;
    if ($32) {
      $v_2 = 0;
      $rsize_2 = $1;
      $t_1 = 0;
      label = 11;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $34 = ($idx_0 | 0) == 31;
    if ($34) {
      $39 = 0;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $36 = $idx_0 >>> 1;
    $37 = 25 - $36 | 0;
    $39 = $37;
    label = 7;
    break;
   case 7:
    $40 = $nb << $39;
    $v_0 = 0;
    $rsize_0 = $1;
    $t_0 = $31;
    $sizebits_0 = $40;
    $rst_0 = 0;
    label = 8;
    break;
   case 8:
    $42 = $t_0 + 4 | 0;
    $43 = HEAP32[$42 >> 2] | 0;
    $44 = $43 & -8;
    $45 = $44 - $nb | 0;
    $46 = $45 >>> 0 < $rsize_0 >>> 0;
    if ($46) {
      label = 9;
      break;
    } else {
      $v_1 = $v_0;
      $rsize_1 = $rsize_0;
      label = 10;
      break;
    }
   case 9:
    $48 = ($44 | 0) == ($nb | 0);
    if ($48) {
      $v_2 = $t_0;
      $rsize_2 = $45;
      $t_1 = $t_0;
      label = 11;
      break;
    } else {
      $v_1 = $t_0;
      $rsize_1 = $45;
      label = 10;
      break;
    }
   case 10:
    $50 = $t_0 + 20 | 0;
    $51 = HEAP32[$50 >> 2] | 0;
    $52 = $sizebits_0 >>> 31;
    $53 = $t_0 + 16 + ($52 << 2) | 0;
    $54 = HEAP32[$53 >> 2] | 0;
    $55 = ($51 | 0) == 0;
    $56 = ($51 | 0) == ($54 | 0);
    $or_cond = $55 | $56;
    $rst_1 = $or_cond ? $rst_0 : $51;
    $57 = ($54 | 0) == 0;
    $58 = $sizebits_0 << 1;
    if ($57) {
      $v_2 = $v_1;
      $rsize_2 = $rsize_1;
      $t_1 = $rst_1;
      label = 11;
      break;
    } else {
      $v_0 = $v_1;
      $rsize_0 = $rsize_1;
      $t_0 = $54;
      $sizebits_0 = $58;
      $rst_0 = $rst_1;
      label = 8;
      break;
    }
   case 11:
    $59 = ($t_1 | 0) == 0;
    $60 = ($v_2 | 0) == 0;
    $or_cond19 = $59 & $60;
    if ($or_cond19) {
      label = 12;
      break;
    } else {
      $t_2_ph = $t_1;
      label = 14;
      break;
    }
   case 12:
    $62 = 2 << $idx_0;
    $63 = -$62 | 0;
    $64 = $62 | $63;
    $65 = HEAP32[2305] | 0;
    $66 = $65 & $64;
    $67 = ($66 | 0) == 0;
    if ($67) {
      $t_2_ph = $t_1;
      label = 14;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $69 = -$66 | 0;
    $70 = $66 & $69;
    $71 = $70 - 1 | 0;
    $72 = $71 >>> 12;
    $73 = $72 & 16;
    $74 = $71 >>> ($73 >>> 0);
    $75 = $74 >>> 5;
    $76 = $75 & 8;
    $77 = $76 | $73;
    $78 = $74 >>> ($76 >>> 0);
    $79 = $78 >>> 2;
    $80 = $79 & 4;
    $81 = $77 | $80;
    $82 = $78 >>> ($80 >>> 0);
    $83 = $82 >>> 1;
    $84 = $83 & 2;
    $85 = $81 | $84;
    $86 = $82 >>> ($84 >>> 0);
    $87 = $86 >>> 1;
    $88 = $87 & 1;
    $89 = $85 | $88;
    $90 = $86 >>> ($88 >>> 0);
    $91 = $89 + $90 | 0;
    $92 = 9520 + ($91 << 2) | 0;
    $93 = HEAP32[$92 >> 2] | 0;
    $t_2_ph = $93;
    label = 14;
    break;
   case 14:
    $94 = ($t_2_ph | 0) == 0;
    if ($94) {
      $rsize_3_lcssa = $rsize_2;
      $v_3_lcssa = $v_2;
      label = 17;
      break;
    } else {
      $t_226 = $t_2_ph;
      $rsize_327 = $rsize_2;
      $v_328 = $v_2;
      label = 15;
      break;
    }
   case 15:
    $95 = $t_226 + 4 | 0;
    $96 = HEAP32[$95 >> 2] | 0;
    $97 = $96 & -8;
    $98 = $97 - $nb | 0;
    $99 = $98 >>> 0 < $rsize_327 >>> 0;
    $_rsize_3 = $99 ? $98 : $rsize_327;
    $t_2_v_3 = $99 ? $t_226 : $v_328;
    $100 = $t_226 + 16 | 0;
    $101 = HEAP32[$100 >> 2] | 0;
    $102 = ($101 | 0) == 0;
    if ($102) {
      label = 16;
      break;
    } else {
      $t_226 = $101;
      $rsize_327 = $_rsize_3;
      $v_328 = $t_2_v_3;
      label = 15;
      break;
    }
   case 16:
    $103 = $t_226 + 20 | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    $105 = ($104 | 0) == 0;
    if ($105) {
      $rsize_3_lcssa = $_rsize_3;
      $v_3_lcssa = $t_2_v_3;
      label = 17;
      break;
    } else {
      $t_226 = $104;
      $rsize_327 = $_rsize_3;
      $v_328 = $t_2_v_3;
      label = 15;
      break;
    }
   case 17:
    $106 = ($v_3_lcssa | 0) == 0;
    if ($106) {
      $_0 = 0;
      label = 82;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $108 = HEAP32[2306] | 0;
    $109 = $108 - $nb | 0;
    $110 = $rsize_3_lcssa >>> 0 < $109 >>> 0;
    if ($110) {
      label = 19;
      break;
    } else {
      $_0 = 0;
      label = 82;
      break;
    }
   case 19:
    $112 = $v_3_lcssa;
    $113 = HEAP32[2308] | 0;
    $114 = $112 >>> 0 < $113 >>> 0;
    if ($114) {
      label = 81;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $116 = $112 + $nb | 0;
    $117 = $116;
    $118 = $112 >>> 0 < $116 >>> 0;
    if ($118) {
      label = 21;
      break;
    } else {
      label = 81;
      break;
    }
   case 21:
    $120 = $v_3_lcssa + 24 | 0;
    $121 = HEAP32[$120 >> 2] | 0;
    $122 = $v_3_lcssa + 12 | 0;
    $123 = HEAP32[$122 >> 2] | 0;
    $124 = ($123 | 0) == ($v_3_lcssa | 0);
    if ($124) {
      label = 27;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $126 = $v_3_lcssa + 8 | 0;
    $127 = HEAP32[$126 >> 2] | 0;
    $128 = $127;
    $129 = $128 >>> 0 < $113 >>> 0;
    if ($129) {
      label = 26;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $131 = $127 + 12 | 0;
    $132 = HEAP32[$131 >> 2] | 0;
    $133 = ($132 | 0) == ($v_3_lcssa | 0);
    if ($133) {
      label = 24;
      break;
    } else {
      label = 26;
      break;
    }
   case 24:
    $135 = $123 + 8 | 0;
    $136 = HEAP32[$135 >> 2] | 0;
    $137 = ($136 | 0) == ($v_3_lcssa | 0);
    if ($137) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    HEAP32[$131 >> 2] = $123;
    HEAP32[$135 >> 2] = $127;
    $R_1 = $123;
    label = 35;
    break;
   case 26:
    _abort();
    return 0;
    return 0;
   case 27:
    $140 = $v_3_lcssa + 20 | 0;
    $141 = HEAP32[$140 >> 2] | 0;
    $142 = ($141 | 0) == 0;
    if ($142) {
      label = 28;
      break;
    } else {
      $R_0 = $141;
      $RP_0 = $140;
      label = 29;
      break;
    }
   case 28:
    $144 = $v_3_lcssa + 16 | 0;
    $145 = HEAP32[$144 >> 2] | 0;
    $146 = ($145 | 0) == 0;
    if ($146) {
      $R_1 = 0;
      label = 35;
      break;
    } else {
      $R_0 = $145;
      $RP_0 = $144;
      label = 29;
      break;
    }
   case 29:
    $147 = $R_0 + 20 | 0;
    $148 = HEAP32[$147 >> 2] | 0;
    $149 = ($148 | 0) == 0;
    if ($149) {
      label = 30;
      break;
    } else {
      $CP_0 = $147;
      label = 31;
      break;
    }
   case 30:
    $151 = $R_0 + 16 | 0;
    $152 = HEAP32[$151 >> 2] | 0;
    $153 = ($152 | 0) == 0;
    if ($153) {
      label = 32;
      break;
    } else {
      $CP_0 = $151;
      label = 31;
      break;
    }
   case 31:
    $154 = HEAP32[$CP_0 >> 2] | 0;
    $R_0 = $154;
    $RP_0 = $CP_0;
    label = 29;
    break;
   case 32:
    $156 = $RP_0;
    $157 = HEAP32[2308] | 0;
    $158 = $156 >>> 0 < $157 >>> 0;
    if ($158) {
      label = 34;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    HEAP32[$RP_0 >> 2] = 0;
    $R_1 = $R_0;
    label = 35;
    break;
   case 34:
    _abort();
    return 0;
    return 0;
   case 35:
    $162 = ($121 | 0) == 0;
    if ($162) {
      label = 55;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    $164 = $v_3_lcssa + 28 | 0;
    $165 = HEAP32[$164 >> 2] | 0;
    $166 = 9520 + ($165 << 2) | 0;
    $167 = HEAP32[$166 >> 2] | 0;
    $168 = ($v_3_lcssa | 0) == ($167 | 0);
    if ($168) {
      label = 37;
      break;
    } else {
      label = 39;
      break;
    }
   case 37:
    HEAP32[$166 >> 2] = $R_1;
    $cond = ($R_1 | 0) == 0;
    if ($cond) {
      label = 38;
      break;
    } else {
      label = 45;
      break;
    }
   case 38:
    $170 = HEAP32[$164 >> 2] | 0;
    $171 = 1 << $170;
    $172 = $171 ^ -1;
    $173 = HEAP32[2305] | 0;
    $174 = $173 & $172;
    HEAP32[2305] = $174;
    label = 55;
    break;
   case 39:
    $176 = $121;
    $177 = HEAP32[2308] | 0;
    $178 = $176 >>> 0 < $177 >>> 0;
    if ($178) {
      label = 43;
      break;
    } else {
      label = 40;
      break;
    }
   case 40:
    $180 = $121 + 16 | 0;
    $181 = HEAP32[$180 >> 2] | 0;
    $182 = ($181 | 0) == ($v_3_lcssa | 0);
    if ($182) {
      label = 41;
      break;
    } else {
      label = 42;
      break;
    }
   case 41:
    HEAP32[$180 >> 2] = $R_1;
    label = 44;
    break;
   case 42:
    $185 = $121 + 20 | 0;
    HEAP32[$185 >> 2] = $R_1;
    label = 44;
    break;
   case 43:
    _abort();
    return 0;
    return 0;
   case 44:
    $188 = ($R_1 | 0) == 0;
    if ($188) {
      label = 55;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    $190 = $R_1;
    $191 = HEAP32[2308] | 0;
    $192 = $190 >>> 0 < $191 >>> 0;
    if ($192) {
      label = 54;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    $194 = $R_1 + 24 | 0;
    HEAP32[$194 >> 2] = $121;
    $195 = $v_3_lcssa + 16 | 0;
    $196 = HEAP32[$195 >> 2] | 0;
    $197 = ($196 | 0) == 0;
    if ($197) {
      label = 50;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    $199 = $196;
    $200 = HEAP32[2308] | 0;
    $201 = $199 >>> 0 < $200 >>> 0;
    if ($201) {
      label = 49;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    $203 = $R_1 + 16 | 0;
    HEAP32[$203 >> 2] = $196;
    $204 = $196 + 24 | 0;
    HEAP32[$204 >> 2] = $R_1;
    label = 50;
    break;
   case 49:
    _abort();
    return 0;
    return 0;
   case 50:
    $207 = $v_3_lcssa + 20 | 0;
    $208 = HEAP32[$207 >> 2] | 0;
    $209 = ($208 | 0) == 0;
    if ($209) {
      label = 55;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    $211 = $208;
    $212 = HEAP32[2308] | 0;
    $213 = $211 >>> 0 < $212 >>> 0;
    if ($213) {
      label = 53;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    $215 = $R_1 + 20 | 0;
    HEAP32[$215 >> 2] = $208;
    $216 = $208 + 24 | 0;
    HEAP32[$216 >> 2] = $R_1;
    label = 55;
    break;
   case 53:
    _abort();
    return 0;
    return 0;
   case 54:
    _abort();
    return 0;
    return 0;
   case 55:
    $220 = $rsize_3_lcssa >>> 0 < 16;
    if ($220) {
      label = 56;
      break;
    } else {
      label = 57;
      break;
    }
   case 56:
    $222 = $rsize_3_lcssa + $nb | 0;
    $223 = $222 | 3;
    $224 = $v_3_lcssa + 4 | 0;
    HEAP32[$224 >> 2] = $223;
    $_sum18 = $222 + 4 | 0;
    $225 = $112 + $_sum18 | 0;
    $226 = $225;
    $227 = HEAP32[$226 >> 2] | 0;
    $228 = $227 | 1;
    HEAP32[$226 >> 2] = $228;
    label = 80;
    break;
   case 57:
    $230 = $nb | 3;
    $231 = $v_3_lcssa + 4 | 0;
    HEAP32[$231 >> 2] = $230;
    $232 = $rsize_3_lcssa | 1;
    $_sum = $nb + 4 | 0;
    $233 = $112 + $_sum | 0;
    $234 = $233;
    HEAP32[$234 >> 2] = $232;
    $_sum1 = $rsize_3_lcssa + $nb | 0;
    $235 = $112 + $_sum1 | 0;
    $236 = $235;
    HEAP32[$236 >> 2] = $rsize_3_lcssa;
    $237 = $rsize_3_lcssa >>> 3;
    $238 = $rsize_3_lcssa >>> 0 < 256;
    if ($238) {
      label = 58;
      break;
    } else {
      label = 63;
      break;
    }
   case 58:
    $240 = $237 << 1;
    $241 = 9256 + ($240 << 2) | 0;
    $242 = $241;
    $243 = HEAP32[2304] | 0;
    $244 = 1 << $237;
    $245 = $243 & $244;
    $246 = ($245 | 0) == 0;
    if ($246) {
      label = 59;
      break;
    } else {
      label = 60;
      break;
    }
   case 59:
    $248 = $243 | $244;
    HEAP32[2304] = $248;
    $F5_0 = $242;
    label = 62;
    break;
   case 60:
    $_sum17 = $240 + 2 | 0;
    $250 = 9256 + ($_sum17 << 2) | 0;
    $251 = HEAP32[$250 >> 2] | 0;
    $252 = $251;
    $253 = HEAP32[2308] | 0;
    $254 = $252 >>> 0 < $253 >>> 0;
    if ($254) {
      label = 61;
      break;
    } else {
      $F5_0 = $251;
      label = 62;
      break;
    }
   case 61:
    _abort();
    return 0;
    return 0;
   case 62:
    $_sum14 = $240 + 2 | 0;
    $257 = 9256 + ($_sum14 << 2) | 0;
    HEAP32[$257 >> 2] = $117;
    $258 = $F5_0 + 12 | 0;
    HEAP32[$258 >> 2] = $117;
    $_sum15 = $nb + 8 | 0;
    $259 = $112 + $_sum15 | 0;
    $260 = $259;
    HEAP32[$260 >> 2] = $F5_0;
    $_sum16 = $nb + 12 | 0;
    $261 = $112 + $_sum16 | 0;
    $262 = $261;
    HEAP32[$262 >> 2] = $242;
    label = 80;
    break;
   case 63:
    $264 = $116;
    $265 = $rsize_3_lcssa >>> 8;
    $266 = ($265 | 0) == 0;
    if ($266) {
      $I7_0 = 0;
      label = 66;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    $268 = $rsize_3_lcssa >>> 0 > 16777215;
    if ($268) {
      $I7_0 = 31;
      label = 66;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    $270 = $265 + 1048320 | 0;
    $271 = $270 >>> 16;
    $272 = $271 & 8;
    $273 = $265 << $272;
    $274 = $273 + 520192 | 0;
    $275 = $274 >>> 16;
    $276 = $275 & 4;
    $277 = $276 | $272;
    $278 = $273 << $276;
    $279 = $278 + 245760 | 0;
    $280 = $279 >>> 16;
    $281 = $280 & 2;
    $282 = $277 | $281;
    $283 = 14 - $282 | 0;
    $284 = $278 << $281;
    $285 = $284 >>> 15;
    $286 = $283 + $285 | 0;
    $287 = $286 << 1;
    $288 = $286 + 7 | 0;
    $289 = $rsize_3_lcssa >>> ($288 >>> 0);
    $290 = $289 & 1;
    $291 = $290 | $287;
    $I7_0 = $291;
    label = 66;
    break;
   case 66:
    $293 = 9520 + ($I7_0 << 2) | 0;
    $_sum2 = $nb + 28 | 0;
    $294 = $112 + $_sum2 | 0;
    $295 = $294;
    HEAP32[$295 >> 2] = $I7_0;
    $_sum3 = $nb + 16 | 0;
    $296 = $112 + $_sum3 | 0;
    $_sum4 = $nb + 20 | 0;
    $297 = $112 + $_sum4 | 0;
    $298 = $297;
    HEAP32[$298 >> 2] = 0;
    $299 = $296;
    HEAP32[$299 >> 2] = 0;
    $300 = HEAP32[2305] | 0;
    $301 = 1 << $I7_0;
    $302 = $300 & $301;
    $303 = ($302 | 0) == 0;
    if ($303) {
      label = 67;
      break;
    } else {
      label = 68;
      break;
    }
   case 67:
    $305 = $300 | $301;
    HEAP32[2305] = $305;
    HEAP32[$293 >> 2] = $264;
    $306 = $293;
    $_sum5 = $nb + 24 | 0;
    $307 = $112 + $_sum5 | 0;
    $308 = $307;
    HEAP32[$308 >> 2] = $306;
    $_sum6 = $nb + 12 | 0;
    $309 = $112 + $_sum6 | 0;
    $310 = $309;
    HEAP32[$310 >> 2] = $264;
    $_sum7 = $nb + 8 | 0;
    $311 = $112 + $_sum7 | 0;
    $312 = $311;
    HEAP32[$312 >> 2] = $264;
    label = 80;
    break;
   case 68:
    $314 = HEAP32[$293 >> 2] | 0;
    $315 = ($I7_0 | 0) == 31;
    if ($315) {
      $320 = 0;
      label = 70;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    $317 = $I7_0 >>> 1;
    $318 = 25 - $317 | 0;
    $320 = $318;
    label = 70;
    break;
   case 70:
    $321 = $rsize_3_lcssa << $320;
    $K12_0 = $321;
    $T_0 = $314;
    label = 71;
    break;
   case 71:
    $323 = $T_0 + 4 | 0;
    $324 = HEAP32[$323 >> 2] | 0;
    $325 = $324 & -8;
    $326 = ($325 | 0) == ($rsize_3_lcssa | 0);
    if ($326) {
      label = 76;
      break;
    } else {
      label = 72;
      break;
    }
   case 72:
    $328 = $K12_0 >>> 31;
    $329 = $T_0 + 16 + ($328 << 2) | 0;
    $330 = HEAP32[$329 >> 2] | 0;
    $331 = ($330 | 0) == 0;
    $332 = $K12_0 << 1;
    if ($331) {
      label = 73;
      break;
    } else {
      $K12_0 = $332;
      $T_0 = $330;
      label = 71;
      break;
    }
   case 73:
    $334 = $329;
    $335 = HEAP32[2308] | 0;
    $336 = $334 >>> 0 < $335 >>> 0;
    if ($336) {
      label = 75;
      break;
    } else {
      label = 74;
      break;
    }
   case 74:
    HEAP32[$329 >> 2] = $264;
    $_sum11 = $nb + 24 | 0;
    $338 = $112 + $_sum11 | 0;
    $339 = $338;
    HEAP32[$339 >> 2] = $T_0;
    $_sum12 = $nb + 12 | 0;
    $340 = $112 + $_sum12 | 0;
    $341 = $340;
    HEAP32[$341 >> 2] = $264;
    $_sum13 = $nb + 8 | 0;
    $342 = $112 + $_sum13 | 0;
    $343 = $342;
    HEAP32[$343 >> 2] = $264;
    label = 80;
    break;
   case 75:
    _abort();
    return 0;
    return 0;
   case 76:
    $346 = $T_0 + 8 | 0;
    $347 = HEAP32[$346 >> 2] | 0;
    $348 = $T_0;
    $349 = HEAP32[2308] | 0;
    $350 = $348 >>> 0 < $349 >>> 0;
    if ($350) {
      label = 79;
      break;
    } else {
      label = 77;
      break;
    }
   case 77:
    $352 = $347;
    $353 = $352 >>> 0 < $349 >>> 0;
    if ($353) {
      label = 79;
      break;
    } else {
      label = 78;
      break;
    }
   case 78:
    $355 = $347 + 12 | 0;
    HEAP32[$355 >> 2] = $264;
    HEAP32[$346 >> 2] = $264;
    $_sum8 = $nb + 8 | 0;
    $356 = $112 + $_sum8 | 0;
    $357 = $356;
    HEAP32[$357 >> 2] = $347;
    $_sum9 = $nb + 12 | 0;
    $358 = $112 + $_sum9 | 0;
    $359 = $358;
    HEAP32[$359 >> 2] = $T_0;
    $_sum10 = $nb + 24 | 0;
    $360 = $112 + $_sum10 | 0;
    $361 = $360;
    HEAP32[$361 >> 2] = 0;
    label = 80;
    break;
   case 79:
    _abort();
    return 0;
    return 0;
   case 80:
    $363 = $v_3_lcssa + 8 | 0;
    $364 = $363;
    $_0 = $364;
    label = 82;
    break;
   case 81:
    _abort();
    return 0;
    return 0;
   case 82:
    return $_0 | 0;
  }
  return 0;
}
function _sys_alloc($nb) {
  $nb = $nb | 0;
  var $1 = 0, $2 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $or_cond1 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $ssize_0 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $or_cond = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $or_cond2 = 0, $57 = 0, $58 = 0, $ssize_0_ = 0, $_ = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $_3 = 0, $_4 = 0, $ssize_1 = 0, $br_0 = 0, $tsize_0 = 0, $tbase_0 = 0, $77 = 0, $78 = 0, $80 = 0, $81 = 0, $or_cond5 = 0, $82 = 0, $or_cond6 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $93 = 0, $95 = 0, $97 = 0, $ssize_2 = 0, $99 = 0, $tsize_0172326 = 0, $100 = 0, $101 = 0, $tsize_1 = 0, $103 = 0, $105 = 0, $106 = 0, $notlhs = 0, $notrhs = 0, $or_cond8_not = 0, $107 = 0, $or_cond9 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $_tsize_1 = 0, $_tbase_1 = 0, $113 = 0, $tbase_232 = 0, $tsize_231 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $or_cond10 = 0, $128 = 0, $129 = 0, $130 = 0, $sp_044 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $or_cond33 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $158 = 0, $sp_137 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $177 = 0, $178 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $_sum = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP32[280] | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _init_mparams();
    label = 3;
    break;
   case 3:
    $5 = $nb + 48 | 0;
    $6 = HEAP32[282] | 0;
    $7 = $nb + 47 | 0;
    $8 = $7 + $6 | 0;
    $9 = -$6 | 0;
    $10 = $8 & $9;
    $11 = $10 >>> 0 > $nb >>> 0;
    if ($11) {
      label = 4;
      break;
    } else {
      $_0 = 0;
      label = 51;
      break;
    }
   case 4:
    $13 = HEAP32[2414] | 0;
    $14 = ($13 | 0) == 0;
    if ($14) {
      label = 6;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $16 = HEAP32[2412] | 0;
    $17 = $16 + $10 | 0;
    $18 = $17 >>> 0 <= $16 >>> 0;
    $19 = $17 >>> 0 > $13 >>> 0;
    $or_cond1 = $18 | $19;
    if ($or_cond1) {
      $_0 = 0;
      label = 51;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $21 = HEAP32[2415] | 0;
    $22 = $21 & 4;
    $23 = ($22 | 0) == 0;
    if ($23) {
      label = 7;
      break;
    } else {
      $tsize_1 = 0;
      label = 26;
      break;
    }
   case 7:
    $25 = HEAP32[2310] | 0;
    $26 = ($25 | 0) == 0;
    if ($26) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $28 = $25;
    $29 = _segment_holding($28) | 0;
    $30 = ($29 | 0) == 0;
    if ($30) {
      label = 9;
      break;
    } else {
      label = 16;
      break;
    }
   case 9:
    $31 = _sbrk(0) | 0;
    $32 = ($31 | 0) == -1;
    if ($32) {
      $tsize_0172326 = 0;
      label = 25;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $34 = $31;
    $35 = HEAP32[281] | 0;
    $36 = $35 - 1 | 0;
    $37 = $36 & $34;
    $38 = ($37 | 0) == 0;
    if ($38) {
      $ssize_0 = $10;
      label = 12;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $40 = $36 + $34 | 0;
    $41 = -$35 | 0;
    $42 = $40 & $41;
    $43 = $10 - $34 | 0;
    $44 = $43 + $42 | 0;
    $ssize_0 = $44;
    label = 12;
    break;
   case 12:
    $46 = HEAP32[2412] | 0;
    $47 = $46 + $ssize_0 | 0;
    $48 = $ssize_0 >>> 0 > $nb >>> 0;
    $49 = $ssize_0 >>> 0 < 2147483647;
    $or_cond = $48 & $49;
    if ($or_cond) {
      label = 13;
      break;
    } else {
      $tsize_0172326 = 0;
      label = 25;
      break;
    }
   case 13:
    $51 = HEAP32[2414] | 0;
    $52 = ($51 | 0) == 0;
    if ($52) {
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $54 = $47 >>> 0 <= $46 >>> 0;
    $55 = $47 >>> 0 > $51 >>> 0;
    $or_cond2 = $54 | $55;
    if ($or_cond2) {
      $tsize_0172326 = 0;
      label = 25;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $57 = _sbrk($ssize_0 | 0) | 0;
    $58 = ($57 | 0) == ($31 | 0);
    $ssize_0_ = $58 ? $ssize_0 : 0;
    $_ = $58 ? $31 : -1;
    $tbase_0 = $_;
    $tsize_0 = $ssize_0_;
    $br_0 = $57;
    $ssize_1 = $ssize_0;
    label = 18;
    break;
   case 16:
    $60 = HEAP32[2307] | 0;
    $61 = HEAP32[282] | 0;
    $62 = $nb + 47 | 0;
    $63 = $62 - $60 | 0;
    $64 = $63 + $61 | 0;
    $65 = -$61 | 0;
    $66 = $64 & $65;
    $67 = $66 >>> 0 < 2147483647;
    if ($67) {
      label = 17;
      break;
    } else {
      $tsize_0172326 = 0;
      label = 25;
      break;
    }
   case 17:
    $69 = _sbrk($66 | 0) | 0;
    $70 = $29 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    $72 = $29 + 4 | 0;
    $73 = HEAP32[$72 >> 2] | 0;
    $74 = $71 + $73 | 0;
    $75 = ($69 | 0) == ($74 | 0);
    $_3 = $75 ? $66 : 0;
    $_4 = $75 ? $69 : -1;
    $tbase_0 = $_4;
    $tsize_0 = $_3;
    $br_0 = $69;
    $ssize_1 = $66;
    label = 18;
    break;
   case 18:
    $77 = -$ssize_1 | 0;
    $78 = ($tbase_0 | 0) == -1;
    if ($78) {
      label = 19;
      break;
    } else {
      $tsize_231 = $tsize_0;
      $tbase_232 = $tbase_0;
      label = 29;
      break;
    }
   case 19:
    $80 = ($br_0 | 0) != -1;
    $81 = $ssize_1 >>> 0 < 2147483647;
    $or_cond5 = $80 & $81;
    $82 = $ssize_1 >>> 0 < $5 >>> 0;
    $or_cond6 = $or_cond5 & $82;
    if ($or_cond6) {
      label = 20;
      break;
    } else {
      $ssize_2 = $ssize_1;
      label = 24;
      break;
    }
   case 20:
    $84 = HEAP32[282] | 0;
    $85 = $nb + 47 | 0;
    $86 = $85 - $ssize_1 | 0;
    $87 = $86 + $84 | 0;
    $88 = -$84 | 0;
    $89 = $87 & $88;
    $90 = $89 >>> 0 < 2147483647;
    if ($90) {
      label = 21;
      break;
    } else {
      $ssize_2 = $ssize_1;
      label = 24;
      break;
    }
   case 21:
    $92 = _sbrk($89 | 0) | 0;
    $93 = ($92 | 0) == -1;
    if ($93) {
      label = 23;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $95 = $89 + $ssize_1 | 0;
    $ssize_2 = $95;
    label = 24;
    break;
   case 23:
    $97 = _sbrk($77 | 0) | 0;
    $tsize_0172326 = $tsize_0;
    label = 25;
    break;
   case 24:
    $99 = ($br_0 | 0) == -1;
    if ($99) {
      $tsize_0172326 = $tsize_0;
      label = 25;
      break;
    } else {
      $tsize_231 = $ssize_2;
      $tbase_232 = $br_0;
      label = 29;
      break;
    }
   case 25:
    $100 = HEAP32[2415] | 0;
    $101 = $100 | 4;
    HEAP32[2415] = $101;
    $tsize_1 = $tsize_0172326;
    label = 26;
    break;
   case 26:
    $103 = $10 >>> 0 < 2147483647;
    if ($103) {
      label = 27;
      break;
    } else {
      label = 50;
      break;
    }
   case 27:
    $105 = _sbrk($10 | 0) | 0;
    $106 = _sbrk(0) | 0;
    $notlhs = ($105 | 0) != -1;
    $notrhs = ($106 | 0) != -1;
    $or_cond8_not = $notrhs & $notlhs;
    $107 = $105 >>> 0 < $106 >>> 0;
    $or_cond9 = $or_cond8_not & $107;
    if ($or_cond9) {
      label = 28;
      break;
    } else {
      label = 50;
      break;
    }
   case 28:
    $108 = $106;
    $109 = $105;
    $110 = $108 - $109 | 0;
    $111 = $nb + 40 | 0;
    $112 = $110 >>> 0 > $111 >>> 0;
    $_tsize_1 = $112 ? $110 : $tsize_1;
    $_tbase_1 = $112 ? $105 : -1;
    $113 = ($_tbase_1 | 0) == -1;
    if ($113) {
      label = 50;
      break;
    } else {
      $tsize_231 = $_tsize_1;
      $tbase_232 = $_tbase_1;
      label = 29;
      break;
    }
   case 29:
    $114 = HEAP32[2412] | 0;
    $115 = $114 + $tsize_231 | 0;
    HEAP32[2412] = $115;
    $116 = HEAP32[2413] | 0;
    $117 = $115 >>> 0 > $116 >>> 0;
    if ($117) {
      label = 30;
      break;
    } else {
      label = 31;
      break;
    }
   case 30:
    HEAP32[2413] = $115;
    label = 31;
    break;
   case 31:
    $120 = HEAP32[2310] | 0;
    $121 = ($120 | 0) == 0;
    if ($121) {
      label = 32;
      break;
    } else {
      $sp_044 = 9664;
      label = 35;
      break;
    }
   case 32:
    $123 = HEAP32[2308] | 0;
    $124 = ($123 | 0) == 0;
    $125 = $tbase_232 >>> 0 < $123 >>> 0;
    $or_cond10 = $124 | $125;
    if ($or_cond10) {
      label = 33;
      break;
    } else {
      label = 34;
      break;
    }
   case 33:
    HEAP32[2308] = $tbase_232;
    label = 34;
    break;
   case 34:
    HEAP32[2416] = $tbase_232;
    HEAP32[2417] = $tsize_231;
    HEAP32[2419] = 0;
    $128 = HEAP32[280] | 0;
    HEAP32[2313] = $128;
    HEAP32[2312] = -1;
    _init_bins();
    $129 = $tbase_232;
    $130 = $tsize_231 - 40 | 0;
    _init_top($129, $130);
    label = 48;
    break;
   case 35:
    $131 = $sp_044 | 0;
    $132 = HEAP32[$131 >> 2] | 0;
    $133 = $sp_044 + 4 | 0;
    $134 = HEAP32[$133 >> 2] | 0;
    $135 = $132 + $134 | 0;
    $136 = ($tbase_232 | 0) == ($135 | 0);
    if ($136) {
      label = 37;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    $138 = $sp_044 + 8 | 0;
    $139 = HEAP32[$138 >> 2] | 0;
    $140 = ($139 | 0) == 0;
    if ($140) {
      label = 40;
      break;
    } else {
      $sp_044 = $139;
      label = 35;
      break;
    }
   case 37:
    $141 = $sp_044 + 12 | 0;
    $142 = HEAP32[$141 >> 2] | 0;
    $143 = $142 & 8;
    $144 = ($143 | 0) == 0;
    if ($144) {
      label = 38;
      break;
    } else {
      label = 40;
      break;
    }
   case 38:
    $146 = HEAP32[2310] | 0;
    $147 = $146;
    $148 = $147 >>> 0 >= $132 >>> 0;
    $149 = $147 >>> 0 < $135 >>> 0;
    $or_cond33 = $148 & $149;
    if ($or_cond33) {
      label = 39;
      break;
    } else {
      label = 40;
      break;
    }
   case 39:
    $151 = $134 + $tsize_231 | 0;
    HEAP32[$133 >> 2] = $151;
    $152 = HEAP32[2310] | 0;
    $153 = HEAP32[2307] | 0;
    $154 = $153 + $tsize_231 | 0;
    _init_top($152, $154);
    label = 48;
    break;
   case 40:
    $155 = HEAP32[2308] | 0;
    $156 = $tbase_232 >>> 0 < $155 >>> 0;
    if ($156) {
      label = 41;
      break;
    } else {
      label = 42;
      break;
    }
   case 41:
    HEAP32[2308] = $tbase_232;
    label = 42;
    break;
   case 42:
    $158 = $tbase_232 + $tsize_231 | 0;
    $sp_137 = 9664;
    label = 43;
    break;
   case 43:
    $160 = $sp_137 | 0;
    $161 = HEAP32[$160 >> 2] | 0;
    $162 = ($161 | 0) == ($158 | 0);
    if ($162) {
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    $164 = $sp_137 + 8 | 0;
    $165 = HEAP32[$164 >> 2] | 0;
    $166 = ($165 | 0) == 0;
    if ($166) {
      label = 47;
      break;
    } else {
      $sp_137 = $165;
      label = 43;
      break;
    }
   case 45:
    $167 = $sp_137 + 12 | 0;
    $168 = HEAP32[$167 >> 2] | 0;
    $169 = $168 & 8;
    $170 = ($169 | 0) == 0;
    if ($170) {
      label = 46;
      break;
    } else {
      label = 47;
      break;
    }
   case 46:
    HEAP32[$160 >> 2] = $tbase_232;
    $172 = $sp_137 + 4 | 0;
    $173 = HEAP32[$172 >> 2] | 0;
    $174 = $173 + $tsize_231 | 0;
    HEAP32[$172 >> 2] = $174;
    $175 = _prepend_alloc($tbase_232, $161, $nb) | 0;
    $_0 = $175;
    label = 51;
    break;
   case 47:
    _add_segment($tbase_232, $tsize_231);
    label = 48;
    break;
   case 48:
    $177 = HEAP32[2307] | 0;
    $178 = $177 >>> 0 > $nb >>> 0;
    if ($178) {
      label = 49;
      break;
    } else {
      label = 50;
      break;
    }
   case 49:
    $180 = $177 - $nb | 0;
    HEAP32[2307] = $180;
    $181 = HEAP32[2310] | 0;
    $182 = $181;
    $183 = $182 + $nb | 0;
    $184 = $183;
    HEAP32[2310] = $184;
    $185 = $180 | 1;
    $_sum = $nb + 4 | 0;
    $186 = $182 + $_sum | 0;
    $187 = $186;
    HEAP32[$187 >> 2] = $185;
    $188 = $nb | 3;
    $189 = $181 + 4 | 0;
    HEAP32[$189 >> 2] = $188;
    $190 = $181 + 8 | 0;
    $191 = $190;
    $_0 = $191;
    label = 51;
    break;
   case 50:
    $192 = ___errno_location() | 0;
    HEAP32[$192 >> 2] = 12;
    $_0 = 0;
    label = 51;
    break;
   case 51:
    return $_0 | 0;
  }
  return 0;
}
function _free($mem) {
  $mem = $mem | 0;
  var $1 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $_sum = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $_sum232 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $_sum266 = 0, $35 = 0, $36 = 0, $37 = 0, $_sum267 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $_sum258 = 0, $72 = 0, $73 = 0, $74 = 0, $_sum259 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $_sum265 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $91 = 0, $92 = 0, $_sum261 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $_sum260 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $RP_0 = 0, $R_0 = 0, $104 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $110 = 0, $CP_0 = 0, $111 = 0, $113 = 0, $114 = 0, $115 = 0, $R_1 = 0, $119 = 0, $_sum262 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $cond = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $138 = 0, $139 = 0, $140 = 0, $143 = 0, $146 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $_sum263 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $160 = 0, $162 = 0, $163 = 0, $_sum264 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $171 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $_sum233 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $188 = 0, $_sum256 = 0, $189 = 0, $190 = 0, $191 = 0, $psize_0 = 0, $p_0 = 0, $193 = 0, $194 = 0, $_sum255 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $200 = 0, $202 = 0, $203 = 0, $205 = 0, $206 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $216 = 0, $217 = 0, $219 = 0, $221 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $236 = 0, $237 = 0, $238 = 0, $_sum253254 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $247 = 0, $248 = 0, $249 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $273 = 0, $_sum235 = 0, $274 = 0, $275 = 0, $276 = 0, $_sum236237 = 0, $277 = 0, $278 = 0, $279 = 0, $280 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $289 = 0, $290 = 0, $291 = 0, $293 = 0, $294 = 0, $295 = 0, $_sum239 = 0, $298 = 0, $299 = 0, $300 = 0, $301 = 0, $_sum238 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $RP9_0 = 0, $R7_0 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $312 = 0, $313 = 0, $CP10_0 = 0, $314 = 0, $316 = 0, $317 = 0, $318 = 0, $R7_1 = 0, $322 = 0, $_sum248 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $cond284 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $337 = 0, $338 = 0, $339 = 0, $341 = 0, $342 = 0, $343 = 0, $346 = 0, $349 = 0, $351 = 0, $352 = 0, $353 = 0, $355 = 0, $_sum249 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $361 = 0, $362 = 0, $363 = 0, $365 = 0, $366 = 0, $_sum250 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $374 = 0, $375 = 0, $376 = 0, $378 = 0, $379 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $psize_1 = 0, $397 = 0, $398 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $408 = 0, $_sum247 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $F16_0 = 0, $_sum246 = 0, $417 = 0, $418 = 0, $419 = 0, $420 = 0, $422 = 0, $423 = 0, $424 = 0, $426 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $I18_0 = 0, $451 = 0, $452 = 0, $I18_0_c = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $460 = 0, $461 = 0, $_c = 0, $462 = 0, $463 = 0, $465 = 0, $466 = 0, $468 = 0, $469 = 0, $471 = 0, $472 = 0, $T_0 = 0, $K19_0 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $479 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $485 = 0, $486 = 0, $487 = 0, $489 = 0, $T_0_c243 = 0, $490 = 0, $491 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $500 = 0, $501 = 0, $503 = 0, $504 = 0, $_c242 = 0, $505 = 0, $T_0_c = 0, $506 = 0, $508 = 0, $509 = 0, $510 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($mem | 0) == 0;
    if ($1) {
      label = 141;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $3 = $mem - 8 | 0;
    $4 = $3;
    $5 = HEAP32[2308] | 0;
    $6 = $3 >>> 0 < $5 >>> 0;
    if ($6) {
      label = 140;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $8 = $mem - 4 | 0;
    $9 = $8;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $10 & 3;
    $12 = ($11 | 0) == 1;
    if ($12) {
      label = 140;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $14 = $10 & -8;
    $_sum = $14 - 8 | 0;
    $15 = $mem + $_sum | 0;
    $16 = $15;
    $17 = $10 & 1;
    $18 = ($17 | 0) == 0;
    if ($18) {
      label = 5;
      break;
    } else {
      $p_0 = $4;
      $psize_0 = $14;
      label = 56;
      break;
    }
   case 5:
    $20 = $3;
    $21 = HEAP32[$20 >> 2] | 0;
    $22 = ($11 | 0) == 0;
    if ($22) {
      label = 141;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $_sum232 = -8 - $21 | 0;
    $24 = $mem + $_sum232 | 0;
    $25 = $24;
    $26 = $21 + $14 | 0;
    $27 = $24 >>> 0 < $5 >>> 0;
    if ($27) {
      label = 140;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $29 = HEAP32[2309] | 0;
    $30 = ($25 | 0) == ($29 | 0);
    if ($30) {
      label = 54;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $32 = $21 >>> 3;
    $33 = $21 >>> 0 < 256;
    if ($33) {
      label = 9;
      break;
    } else {
      label = 20;
      break;
    }
   case 9:
    $_sum266 = $_sum232 + 8 | 0;
    $35 = $mem + $_sum266 | 0;
    $36 = $35;
    $37 = HEAP32[$36 >> 2] | 0;
    $_sum267 = $_sum232 + 12 | 0;
    $38 = $mem + $_sum267 | 0;
    $39 = $38;
    $40 = HEAP32[$39 >> 2] | 0;
    $41 = $32 << 1;
    $42 = 9256 + ($41 << 2) | 0;
    $43 = $42;
    $44 = ($37 | 0) == ($43 | 0);
    if ($44) {
      label = 12;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $46 = $37;
    $47 = $46 >>> 0 < $5 >>> 0;
    if ($47) {
      label = 19;
      break;
    } else {
      label = 11;
      break;
    }
   case 11:
    $49 = $37 + 12 | 0;
    $50 = HEAP32[$49 >> 2] | 0;
    $51 = ($50 | 0) == ($25 | 0);
    if ($51) {
      label = 12;
      break;
    } else {
      label = 19;
      break;
    }
   case 12:
    $52 = ($40 | 0) == ($37 | 0);
    if ($52) {
      label = 13;
      break;
    } else {
      label = 14;
      break;
    }
   case 13:
    $54 = 1 << $32;
    $55 = $54 ^ -1;
    $56 = HEAP32[2304] | 0;
    $57 = $56 & $55;
    HEAP32[2304] = $57;
    $p_0 = $25;
    $psize_0 = $26;
    label = 56;
    break;
   case 14:
    $59 = ($40 | 0) == ($43 | 0);
    if ($59) {
      label = 17;
      break;
    } else {
      label = 15;
      break;
    }
   case 15:
    $61 = $40;
    $62 = HEAP32[2308] | 0;
    $63 = $61 >>> 0 < $62 >>> 0;
    if ($63) {
      label = 18;
      break;
    } else {
      label = 16;
      break;
    }
   case 16:
    $65 = $40 + 8 | 0;
    $66 = HEAP32[$65 >> 2] | 0;
    $67 = ($66 | 0) == ($25 | 0);
    if ($67) {
      label = 17;
      break;
    } else {
      label = 18;
      break;
    }
   case 17:
    $68 = $37 + 12 | 0;
    HEAP32[$68 >> 2] = $40;
    $69 = $40 + 8 | 0;
    HEAP32[$69 >> 2] = $37;
    $p_0 = $25;
    $psize_0 = $26;
    label = 56;
    break;
   case 18:
    _abort();
   case 19:
    _abort();
   case 20:
    $71 = $24;
    $_sum258 = $_sum232 + 24 | 0;
    $72 = $mem + $_sum258 | 0;
    $73 = $72;
    $74 = HEAP32[$73 >> 2] | 0;
    $_sum259 = $_sum232 + 12 | 0;
    $75 = $mem + $_sum259 | 0;
    $76 = $75;
    $77 = HEAP32[$76 >> 2] | 0;
    $78 = ($77 | 0) == ($71 | 0);
    if ($78) {
      label = 26;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $_sum265 = $_sum232 + 8 | 0;
    $80 = $mem + $_sum265 | 0;
    $81 = $80;
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = $82;
    $84 = $83 >>> 0 < $5 >>> 0;
    if ($84) {
      label = 25;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $86 = $82 + 12 | 0;
    $87 = HEAP32[$86 >> 2] | 0;
    $88 = ($87 | 0) == ($71 | 0);
    if ($88) {
      label = 23;
      break;
    } else {
      label = 25;
      break;
    }
   case 23:
    $90 = $77 + 8 | 0;
    $91 = HEAP32[$90 >> 2] | 0;
    $92 = ($91 | 0) == ($71 | 0);
    if ($92) {
      label = 24;
      break;
    } else {
      label = 25;
      break;
    }
   case 24:
    HEAP32[$86 >> 2] = $77;
    HEAP32[$90 >> 2] = $82;
    $R_1 = $77;
    label = 34;
    break;
   case 25:
    _abort();
   case 26:
    $_sum261 = $_sum232 + 20 | 0;
    $95 = $mem + $_sum261 | 0;
    $96 = $95;
    $97 = HEAP32[$96 >> 2] | 0;
    $98 = ($97 | 0) == 0;
    if ($98) {
      label = 27;
      break;
    } else {
      $R_0 = $97;
      $RP_0 = $96;
      label = 28;
      break;
    }
   case 27:
    $_sum260 = $_sum232 + 16 | 0;
    $100 = $mem + $_sum260 | 0;
    $101 = $100;
    $102 = HEAP32[$101 >> 2] | 0;
    $103 = ($102 | 0) == 0;
    if ($103) {
      $R_1 = 0;
      label = 34;
      break;
    } else {
      $R_0 = $102;
      $RP_0 = $101;
      label = 28;
      break;
    }
   case 28:
    $104 = $R_0 + 20 | 0;
    $105 = HEAP32[$104 >> 2] | 0;
    $106 = ($105 | 0) == 0;
    if ($106) {
      label = 29;
      break;
    } else {
      $CP_0 = $104;
      label = 30;
      break;
    }
   case 29:
    $108 = $R_0 + 16 | 0;
    $109 = HEAP32[$108 >> 2] | 0;
    $110 = ($109 | 0) == 0;
    if ($110) {
      label = 31;
      break;
    } else {
      $CP_0 = $108;
      label = 30;
      break;
    }
   case 30:
    $111 = HEAP32[$CP_0 >> 2] | 0;
    $R_0 = $111;
    $RP_0 = $CP_0;
    label = 28;
    break;
   case 31:
    $113 = $RP_0;
    $114 = HEAP32[2308] | 0;
    $115 = $113 >>> 0 < $114 >>> 0;
    if ($115) {
      label = 33;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    HEAP32[$RP_0 >> 2] = 0;
    $R_1 = $R_0;
    label = 34;
    break;
   case 33:
    _abort();
   case 34:
    $119 = ($74 | 0) == 0;
    if ($119) {
      $p_0 = $25;
      $psize_0 = $26;
      label = 56;
      break;
    } else {
      label = 35;
      break;
    }
   case 35:
    $_sum262 = $_sum232 + 28 | 0;
    $121 = $mem + $_sum262 | 0;
    $122 = $121;
    $123 = HEAP32[$122 >> 2] | 0;
    $124 = 9520 + ($123 << 2) | 0;
    $125 = HEAP32[$124 >> 2] | 0;
    $126 = ($71 | 0) == ($125 | 0);
    if ($126) {
      label = 36;
      break;
    } else {
      label = 38;
      break;
    }
   case 36:
    HEAP32[$124 >> 2] = $R_1;
    $cond = ($R_1 | 0) == 0;
    if ($cond) {
      label = 37;
      break;
    } else {
      label = 44;
      break;
    }
   case 37:
    $128 = HEAP32[$122 >> 2] | 0;
    $129 = 1 << $128;
    $130 = $129 ^ -1;
    $131 = HEAP32[2305] | 0;
    $132 = $131 & $130;
    HEAP32[2305] = $132;
    $p_0 = $25;
    $psize_0 = $26;
    label = 56;
    break;
   case 38:
    $134 = $74;
    $135 = HEAP32[2308] | 0;
    $136 = $134 >>> 0 < $135 >>> 0;
    if ($136) {
      label = 42;
      break;
    } else {
      label = 39;
      break;
    }
   case 39:
    $138 = $74 + 16 | 0;
    $139 = HEAP32[$138 >> 2] | 0;
    $140 = ($139 | 0) == ($71 | 0);
    if ($140) {
      label = 40;
      break;
    } else {
      label = 41;
      break;
    }
   case 40:
    HEAP32[$138 >> 2] = $R_1;
    label = 43;
    break;
   case 41:
    $143 = $74 + 20 | 0;
    HEAP32[$143 >> 2] = $R_1;
    label = 43;
    break;
   case 42:
    _abort();
   case 43:
    $146 = ($R_1 | 0) == 0;
    if ($146) {
      $p_0 = $25;
      $psize_0 = $26;
      label = 56;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    $148 = $R_1;
    $149 = HEAP32[2308] | 0;
    $150 = $148 >>> 0 < $149 >>> 0;
    if ($150) {
      label = 53;
      break;
    } else {
      label = 45;
      break;
    }
   case 45:
    $152 = $R_1 + 24 | 0;
    HEAP32[$152 >> 2] = $74;
    $_sum263 = $_sum232 + 16 | 0;
    $153 = $mem + $_sum263 | 0;
    $154 = $153;
    $155 = HEAP32[$154 >> 2] | 0;
    $156 = ($155 | 0) == 0;
    if ($156) {
      label = 49;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    $158 = $155;
    $159 = HEAP32[2308] | 0;
    $160 = $158 >>> 0 < $159 >>> 0;
    if ($160) {
      label = 48;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    $162 = $R_1 + 16 | 0;
    HEAP32[$162 >> 2] = $155;
    $163 = $155 + 24 | 0;
    HEAP32[$163 >> 2] = $R_1;
    label = 49;
    break;
   case 48:
    _abort();
   case 49:
    $_sum264 = $_sum232 + 20 | 0;
    $166 = $mem + $_sum264 | 0;
    $167 = $166;
    $168 = HEAP32[$167 >> 2] | 0;
    $169 = ($168 | 0) == 0;
    if ($169) {
      $p_0 = $25;
      $psize_0 = $26;
      label = 56;
      break;
    } else {
      label = 50;
      break;
    }
   case 50:
    $171 = $168;
    $172 = HEAP32[2308] | 0;
    $173 = $171 >>> 0 < $172 >>> 0;
    if ($173) {
      label = 52;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    $175 = $R_1 + 20 | 0;
    HEAP32[$175 >> 2] = $168;
    $176 = $168 + 24 | 0;
    HEAP32[$176 >> 2] = $R_1;
    $p_0 = $25;
    $psize_0 = $26;
    label = 56;
    break;
   case 52:
    _abort();
   case 53:
    _abort();
   case 54:
    $_sum233 = $14 - 4 | 0;
    $180 = $mem + $_sum233 | 0;
    $181 = $180;
    $182 = HEAP32[$181 >> 2] | 0;
    $183 = $182 & 3;
    $184 = ($183 | 0) == 3;
    if ($184) {
      label = 55;
      break;
    } else {
      $p_0 = $25;
      $psize_0 = $26;
      label = 56;
      break;
    }
   case 55:
    HEAP32[2306] = $26;
    $186 = HEAP32[$181 >> 2] | 0;
    $187 = $186 & -2;
    HEAP32[$181 >> 2] = $187;
    $188 = $26 | 1;
    $_sum256 = $_sum232 + 4 | 0;
    $189 = $mem + $_sum256 | 0;
    $190 = $189;
    HEAP32[$190 >> 2] = $188;
    $191 = $15;
    HEAP32[$191 >> 2] = $26;
    label = 141;
    break;
   case 56:
    $193 = $p_0;
    $194 = $193 >>> 0 < $15 >>> 0;
    if ($194) {
      label = 57;
      break;
    } else {
      label = 140;
      break;
    }
   case 57:
    $_sum255 = $14 - 4 | 0;
    $196 = $mem + $_sum255 | 0;
    $197 = $196;
    $198 = HEAP32[$197 >> 2] | 0;
    $199 = $198 & 1;
    $200 = ($199 | 0) == 0;
    if ($200) {
      label = 140;
      break;
    } else {
      label = 58;
      break;
    }
   case 58:
    $202 = $198 & 2;
    $203 = ($202 | 0) == 0;
    if ($203) {
      label = 59;
      break;
    } else {
      label = 114;
      break;
    }
   case 59:
    $205 = HEAP32[2310] | 0;
    $206 = ($16 | 0) == ($205 | 0);
    if ($206) {
      label = 60;
      break;
    } else {
      label = 64;
      break;
    }
   case 60:
    $208 = HEAP32[2307] | 0;
    $209 = $208 + $psize_0 | 0;
    HEAP32[2307] = $209;
    HEAP32[2310] = $p_0;
    $210 = $209 | 1;
    $211 = $p_0 + 4 | 0;
    HEAP32[$211 >> 2] = $210;
    $212 = HEAP32[2309] | 0;
    $213 = ($p_0 | 0) == ($212 | 0);
    if ($213) {
      label = 61;
      break;
    } else {
      label = 62;
      break;
    }
   case 61:
    HEAP32[2309] = 0;
    HEAP32[2306] = 0;
    label = 62;
    break;
   case 62:
    $216 = HEAP32[2311] | 0;
    $217 = $209 >>> 0 > $216 >>> 0;
    if ($217) {
      label = 63;
      break;
    } else {
      label = 141;
      break;
    }
   case 63:
    $219 = _sys_trim(0) | 0;
    label = 141;
    break;
   case 64:
    $221 = HEAP32[2309] | 0;
    $222 = ($16 | 0) == ($221 | 0);
    if ($222) {
      label = 65;
      break;
    } else {
      label = 66;
      break;
    }
   case 65:
    $224 = HEAP32[2306] | 0;
    $225 = $224 + $psize_0 | 0;
    HEAP32[2306] = $225;
    HEAP32[2309] = $p_0;
    $226 = $225 | 1;
    $227 = $p_0 + 4 | 0;
    HEAP32[$227 >> 2] = $226;
    $228 = $193 + $225 | 0;
    $229 = $228;
    HEAP32[$229 >> 2] = $225;
    label = 141;
    break;
   case 66:
    $231 = $198 & -8;
    $232 = $231 + $psize_0 | 0;
    $233 = $198 >>> 3;
    $234 = $198 >>> 0 < 256;
    if ($234) {
      label = 67;
      break;
    } else {
      label = 78;
      break;
    }
   case 67:
    $236 = $mem + $14 | 0;
    $237 = $236;
    $238 = HEAP32[$237 >> 2] | 0;
    $_sum253254 = $14 | 4;
    $239 = $mem + $_sum253254 | 0;
    $240 = $239;
    $241 = HEAP32[$240 >> 2] | 0;
    $242 = $233 << 1;
    $243 = 9256 + ($242 << 2) | 0;
    $244 = $243;
    $245 = ($238 | 0) == ($244 | 0);
    if ($245) {
      label = 70;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    $247 = $238;
    $248 = HEAP32[2308] | 0;
    $249 = $247 >>> 0 < $248 >>> 0;
    if ($249) {
      label = 77;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    $251 = $238 + 12 | 0;
    $252 = HEAP32[$251 >> 2] | 0;
    $253 = ($252 | 0) == ($16 | 0);
    if ($253) {
      label = 70;
      break;
    } else {
      label = 77;
      break;
    }
   case 70:
    $254 = ($241 | 0) == ($238 | 0);
    if ($254) {
      label = 71;
      break;
    } else {
      label = 72;
      break;
    }
   case 71:
    $256 = 1 << $233;
    $257 = $256 ^ -1;
    $258 = HEAP32[2304] | 0;
    $259 = $258 & $257;
    HEAP32[2304] = $259;
    label = 112;
    break;
   case 72:
    $261 = ($241 | 0) == ($244 | 0);
    if ($261) {
      label = 75;
      break;
    } else {
      label = 73;
      break;
    }
   case 73:
    $263 = $241;
    $264 = HEAP32[2308] | 0;
    $265 = $263 >>> 0 < $264 >>> 0;
    if ($265) {
      label = 76;
      break;
    } else {
      label = 74;
      break;
    }
   case 74:
    $267 = $241 + 8 | 0;
    $268 = HEAP32[$267 >> 2] | 0;
    $269 = ($268 | 0) == ($16 | 0);
    if ($269) {
      label = 75;
      break;
    } else {
      label = 76;
      break;
    }
   case 75:
    $270 = $238 + 12 | 0;
    HEAP32[$270 >> 2] = $241;
    $271 = $241 + 8 | 0;
    HEAP32[$271 >> 2] = $238;
    label = 112;
    break;
   case 76:
    _abort();
   case 77:
    _abort();
   case 78:
    $273 = $15;
    $_sum235 = $14 + 16 | 0;
    $274 = $mem + $_sum235 | 0;
    $275 = $274;
    $276 = HEAP32[$275 >> 2] | 0;
    $_sum236237 = $14 | 4;
    $277 = $mem + $_sum236237 | 0;
    $278 = $277;
    $279 = HEAP32[$278 >> 2] | 0;
    $280 = ($279 | 0) == ($273 | 0);
    if ($280) {
      label = 84;
      break;
    } else {
      label = 79;
      break;
    }
   case 79:
    $282 = $mem + $14 | 0;
    $283 = $282;
    $284 = HEAP32[$283 >> 2] | 0;
    $285 = $284;
    $286 = HEAP32[2308] | 0;
    $287 = $285 >>> 0 < $286 >>> 0;
    if ($287) {
      label = 83;
      break;
    } else {
      label = 80;
      break;
    }
   case 80:
    $289 = $284 + 12 | 0;
    $290 = HEAP32[$289 >> 2] | 0;
    $291 = ($290 | 0) == ($273 | 0);
    if ($291) {
      label = 81;
      break;
    } else {
      label = 83;
      break;
    }
   case 81:
    $293 = $279 + 8 | 0;
    $294 = HEAP32[$293 >> 2] | 0;
    $295 = ($294 | 0) == ($273 | 0);
    if ($295) {
      label = 82;
      break;
    } else {
      label = 83;
      break;
    }
   case 82:
    HEAP32[$289 >> 2] = $279;
    HEAP32[$293 >> 2] = $284;
    $R7_1 = $279;
    label = 92;
    break;
   case 83:
    _abort();
   case 84:
    $_sum239 = $14 + 12 | 0;
    $298 = $mem + $_sum239 | 0;
    $299 = $298;
    $300 = HEAP32[$299 >> 2] | 0;
    $301 = ($300 | 0) == 0;
    if ($301) {
      label = 85;
      break;
    } else {
      $R7_0 = $300;
      $RP9_0 = $299;
      label = 86;
      break;
    }
   case 85:
    $_sum238 = $14 + 8 | 0;
    $303 = $mem + $_sum238 | 0;
    $304 = $303;
    $305 = HEAP32[$304 >> 2] | 0;
    $306 = ($305 | 0) == 0;
    if ($306) {
      $R7_1 = 0;
      label = 92;
      break;
    } else {
      $R7_0 = $305;
      $RP9_0 = $304;
      label = 86;
      break;
    }
   case 86:
    $307 = $R7_0 + 20 | 0;
    $308 = HEAP32[$307 >> 2] | 0;
    $309 = ($308 | 0) == 0;
    if ($309) {
      label = 87;
      break;
    } else {
      $CP10_0 = $307;
      label = 88;
      break;
    }
   case 87:
    $311 = $R7_0 + 16 | 0;
    $312 = HEAP32[$311 >> 2] | 0;
    $313 = ($312 | 0) == 0;
    if ($313) {
      label = 89;
      break;
    } else {
      $CP10_0 = $311;
      label = 88;
      break;
    }
   case 88:
    $314 = HEAP32[$CP10_0 >> 2] | 0;
    $R7_0 = $314;
    $RP9_0 = $CP10_0;
    label = 86;
    break;
   case 89:
    $316 = $RP9_0;
    $317 = HEAP32[2308] | 0;
    $318 = $316 >>> 0 < $317 >>> 0;
    if ($318) {
      label = 91;
      break;
    } else {
      label = 90;
      break;
    }
   case 90:
    HEAP32[$RP9_0 >> 2] = 0;
    $R7_1 = $R7_0;
    label = 92;
    break;
   case 91:
    _abort();
   case 92:
    $322 = ($276 | 0) == 0;
    if ($322) {
      label = 112;
      break;
    } else {
      label = 93;
      break;
    }
   case 93:
    $_sum248 = $14 + 20 | 0;
    $324 = $mem + $_sum248 | 0;
    $325 = $324;
    $326 = HEAP32[$325 >> 2] | 0;
    $327 = 9520 + ($326 << 2) | 0;
    $328 = HEAP32[$327 >> 2] | 0;
    $329 = ($273 | 0) == ($328 | 0);
    if ($329) {
      label = 94;
      break;
    } else {
      label = 96;
      break;
    }
   case 94:
    HEAP32[$327 >> 2] = $R7_1;
    $cond284 = ($R7_1 | 0) == 0;
    if ($cond284) {
      label = 95;
      break;
    } else {
      label = 102;
      break;
    }
   case 95:
    $331 = HEAP32[$325 >> 2] | 0;
    $332 = 1 << $331;
    $333 = $332 ^ -1;
    $334 = HEAP32[2305] | 0;
    $335 = $334 & $333;
    HEAP32[2305] = $335;
    label = 112;
    break;
   case 96:
    $337 = $276;
    $338 = HEAP32[2308] | 0;
    $339 = $337 >>> 0 < $338 >>> 0;
    if ($339) {
      label = 100;
      break;
    } else {
      label = 97;
      break;
    }
   case 97:
    $341 = $276 + 16 | 0;
    $342 = HEAP32[$341 >> 2] | 0;
    $343 = ($342 | 0) == ($273 | 0);
    if ($343) {
      label = 98;
      break;
    } else {
      label = 99;
      break;
    }
   case 98:
    HEAP32[$341 >> 2] = $R7_1;
    label = 101;
    break;
   case 99:
    $346 = $276 + 20 | 0;
    HEAP32[$346 >> 2] = $R7_1;
    label = 101;
    break;
   case 100:
    _abort();
   case 101:
    $349 = ($R7_1 | 0) == 0;
    if ($349) {
      label = 112;
      break;
    } else {
      label = 102;
      break;
    }
   case 102:
    $351 = $R7_1;
    $352 = HEAP32[2308] | 0;
    $353 = $351 >>> 0 < $352 >>> 0;
    if ($353) {
      label = 111;
      break;
    } else {
      label = 103;
      break;
    }
   case 103:
    $355 = $R7_1 + 24 | 0;
    HEAP32[$355 >> 2] = $276;
    $_sum249 = $14 + 8 | 0;
    $356 = $mem + $_sum249 | 0;
    $357 = $356;
    $358 = HEAP32[$357 >> 2] | 0;
    $359 = ($358 | 0) == 0;
    if ($359) {
      label = 107;
      break;
    } else {
      label = 104;
      break;
    }
   case 104:
    $361 = $358;
    $362 = HEAP32[2308] | 0;
    $363 = $361 >>> 0 < $362 >>> 0;
    if ($363) {
      label = 106;
      break;
    } else {
      label = 105;
      break;
    }
   case 105:
    $365 = $R7_1 + 16 | 0;
    HEAP32[$365 >> 2] = $358;
    $366 = $358 + 24 | 0;
    HEAP32[$366 >> 2] = $R7_1;
    label = 107;
    break;
   case 106:
    _abort();
   case 107:
    $_sum250 = $14 + 12 | 0;
    $369 = $mem + $_sum250 | 0;
    $370 = $369;
    $371 = HEAP32[$370 >> 2] | 0;
    $372 = ($371 | 0) == 0;
    if ($372) {
      label = 112;
      break;
    } else {
      label = 108;
      break;
    }
   case 108:
    $374 = $371;
    $375 = HEAP32[2308] | 0;
    $376 = $374 >>> 0 < $375 >>> 0;
    if ($376) {
      label = 110;
      break;
    } else {
      label = 109;
      break;
    }
   case 109:
    $378 = $R7_1 + 20 | 0;
    HEAP32[$378 >> 2] = $371;
    $379 = $371 + 24 | 0;
    HEAP32[$379 >> 2] = $R7_1;
    label = 112;
    break;
   case 110:
    _abort();
   case 111:
    _abort();
   case 112:
    $383 = $232 | 1;
    $384 = $p_0 + 4 | 0;
    HEAP32[$384 >> 2] = $383;
    $385 = $193 + $232 | 0;
    $386 = $385;
    HEAP32[$386 >> 2] = $232;
    $387 = HEAP32[2309] | 0;
    $388 = ($p_0 | 0) == ($387 | 0);
    if ($388) {
      label = 113;
      break;
    } else {
      $psize_1 = $232;
      label = 115;
      break;
    }
   case 113:
    HEAP32[2306] = $232;
    label = 141;
    break;
   case 114:
    $391 = $198 & -2;
    HEAP32[$197 >> 2] = $391;
    $392 = $psize_0 | 1;
    $393 = $p_0 + 4 | 0;
    HEAP32[$393 >> 2] = $392;
    $394 = $193 + $psize_0 | 0;
    $395 = $394;
    HEAP32[$395 >> 2] = $psize_0;
    $psize_1 = $psize_0;
    label = 115;
    break;
   case 115:
    $397 = $psize_1 >>> 3;
    $398 = $psize_1 >>> 0 < 256;
    if ($398) {
      label = 116;
      break;
    } else {
      label = 121;
      break;
    }
   case 116:
    $400 = $397 << 1;
    $401 = 9256 + ($400 << 2) | 0;
    $402 = $401;
    $403 = HEAP32[2304] | 0;
    $404 = 1 << $397;
    $405 = $403 & $404;
    $406 = ($405 | 0) == 0;
    if ($406) {
      label = 117;
      break;
    } else {
      label = 118;
      break;
    }
   case 117:
    $408 = $403 | $404;
    HEAP32[2304] = $408;
    $F16_0 = $402;
    label = 120;
    break;
   case 118:
    $_sum247 = $400 + 2 | 0;
    $410 = 9256 + ($_sum247 << 2) | 0;
    $411 = HEAP32[$410 >> 2] | 0;
    $412 = $411;
    $413 = HEAP32[2308] | 0;
    $414 = $412 >>> 0 < $413 >>> 0;
    if ($414) {
      label = 119;
      break;
    } else {
      $F16_0 = $411;
      label = 120;
      break;
    }
   case 119:
    _abort();
   case 120:
    $_sum246 = $400 + 2 | 0;
    $417 = 9256 + ($_sum246 << 2) | 0;
    HEAP32[$417 >> 2] = $p_0;
    $418 = $F16_0 + 12 | 0;
    HEAP32[$418 >> 2] = $p_0;
    $419 = $p_0 + 8 | 0;
    HEAP32[$419 >> 2] = $F16_0;
    $420 = $p_0 + 12 | 0;
    HEAP32[$420 >> 2] = $402;
    label = 141;
    break;
   case 121:
    $422 = $p_0;
    $423 = $psize_1 >>> 8;
    $424 = ($423 | 0) == 0;
    if ($424) {
      $I18_0 = 0;
      label = 124;
      break;
    } else {
      label = 122;
      break;
    }
   case 122:
    $426 = $psize_1 >>> 0 > 16777215;
    if ($426) {
      $I18_0 = 31;
      label = 124;
      break;
    } else {
      label = 123;
      break;
    }
   case 123:
    $428 = $423 + 1048320 | 0;
    $429 = $428 >>> 16;
    $430 = $429 & 8;
    $431 = $423 << $430;
    $432 = $431 + 520192 | 0;
    $433 = $432 >>> 16;
    $434 = $433 & 4;
    $435 = $434 | $430;
    $436 = $431 << $434;
    $437 = $436 + 245760 | 0;
    $438 = $437 >>> 16;
    $439 = $438 & 2;
    $440 = $435 | $439;
    $441 = 14 - $440 | 0;
    $442 = $436 << $439;
    $443 = $442 >>> 15;
    $444 = $441 + $443 | 0;
    $445 = $444 << 1;
    $446 = $444 + 7 | 0;
    $447 = $psize_1 >>> ($446 >>> 0);
    $448 = $447 & 1;
    $449 = $448 | $445;
    $I18_0 = $449;
    label = 124;
    break;
   case 124:
    $451 = 9520 + ($I18_0 << 2) | 0;
    $452 = $p_0 + 28 | 0;
    $I18_0_c = $I18_0;
    HEAP32[$452 >> 2] = $I18_0_c;
    $453 = $p_0 + 20 | 0;
    HEAP32[$453 >> 2] = 0;
    $454 = $p_0 + 16 | 0;
    HEAP32[$454 >> 2] = 0;
    $455 = HEAP32[2305] | 0;
    $456 = 1 << $I18_0;
    $457 = $455 & $456;
    $458 = ($457 | 0) == 0;
    if ($458) {
      label = 125;
      break;
    } else {
      label = 126;
      break;
    }
   case 125:
    $460 = $455 | $456;
    HEAP32[2305] = $460;
    HEAP32[$451 >> 2] = $422;
    $461 = $p_0 + 24 | 0;
    $_c = $451;
    HEAP32[$461 >> 2] = $_c;
    $462 = $p_0 + 12 | 0;
    HEAP32[$462 >> 2] = $p_0;
    $463 = $p_0 + 8 | 0;
    HEAP32[$463 >> 2] = $p_0;
    label = 138;
    break;
   case 126:
    $465 = HEAP32[$451 >> 2] | 0;
    $466 = ($I18_0 | 0) == 31;
    if ($466) {
      $471 = 0;
      label = 128;
      break;
    } else {
      label = 127;
      break;
    }
   case 127:
    $468 = $I18_0 >>> 1;
    $469 = 25 - $468 | 0;
    $471 = $469;
    label = 128;
    break;
   case 128:
    $472 = $psize_1 << $471;
    $K19_0 = $472;
    $T_0 = $465;
    label = 129;
    break;
   case 129:
    $474 = $T_0 + 4 | 0;
    $475 = HEAP32[$474 >> 2] | 0;
    $476 = $475 & -8;
    $477 = ($476 | 0) == ($psize_1 | 0);
    if ($477) {
      label = 134;
      break;
    } else {
      label = 130;
      break;
    }
   case 130:
    $479 = $K19_0 >>> 31;
    $480 = $T_0 + 16 + ($479 << 2) | 0;
    $481 = HEAP32[$480 >> 2] | 0;
    $482 = ($481 | 0) == 0;
    $483 = $K19_0 << 1;
    if ($482) {
      label = 131;
      break;
    } else {
      $K19_0 = $483;
      $T_0 = $481;
      label = 129;
      break;
    }
   case 131:
    $485 = $480;
    $486 = HEAP32[2308] | 0;
    $487 = $485 >>> 0 < $486 >>> 0;
    if ($487) {
      label = 133;
      break;
    } else {
      label = 132;
      break;
    }
   case 132:
    HEAP32[$480 >> 2] = $422;
    $489 = $p_0 + 24 | 0;
    $T_0_c243 = $T_0;
    HEAP32[$489 >> 2] = $T_0_c243;
    $490 = $p_0 + 12 | 0;
    HEAP32[$490 >> 2] = $p_0;
    $491 = $p_0 + 8 | 0;
    HEAP32[$491 >> 2] = $p_0;
    label = 138;
    break;
   case 133:
    _abort();
   case 134:
    $494 = $T_0 + 8 | 0;
    $495 = HEAP32[$494 >> 2] | 0;
    $496 = $T_0;
    $497 = HEAP32[2308] | 0;
    $498 = $496 >>> 0 < $497 >>> 0;
    if ($498) {
      label = 137;
      break;
    } else {
      label = 135;
      break;
    }
   case 135:
    $500 = $495;
    $501 = $500 >>> 0 < $497 >>> 0;
    if ($501) {
      label = 137;
      break;
    } else {
      label = 136;
      break;
    }
   case 136:
    $503 = $495 + 12 | 0;
    HEAP32[$503 >> 2] = $422;
    HEAP32[$494 >> 2] = $422;
    $504 = $p_0 + 8 | 0;
    $_c242 = $495;
    HEAP32[$504 >> 2] = $_c242;
    $505 = $p_0 + 12 | 0;
    $T_0_c = $T_0;
    HEAP32[$505 >> 2] = $T_0_c;
    $506 = $p_0 + 24 | 0;
    HEAP32[$506 >> 2] = 0;
    label = 138;
    break;
   case 137:
    _abort();
   case 138:
    $508 = HEAP32[2312] | 0;
    $509 = $508 - 1 | 0;
    HEAP32[2312] = $509;
    $510 = ($509 | 0) == 0;
    if ($510) {
      label = 139;
      break;
    } else {
      label = 141;
      break;
    }
   case 139:
    _release_unused_segments();
    label = 141;
    break;
   case 140:
    _abort();
   case 141:
    return;
  }
}
function _release_unused_segments() {
  var $sp_0_in = 0, $sp_0 = 0, $2 = 0, $3 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $sp_0_in = 9672;
    label = 2;
    break;
   case 2:
    $sp_0 = HEAP32[$sp_0_in >> 2] | 0;
    $2 = ($sp_0 | 0) == 0;
    $3 = $sp_0 + 8 | 0;
    if ($2) {
      label = 3;
      break;
    } else {
      $sp_0_in = $3;
      label = 2;
      break;
    }
   case 3:
    HEAP32[2312] = -1;
    return;
  }
}
function _sys_trim($pad) {
  $pad = $pad | 0;
  var $1 = 0, $2 = 0, $5 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $_neg = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $_ = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $or_cond = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $phitmp = 0, $57 = 0, $58 = 0, $59 = 0, $released_2 = 0, $62 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP32[280] | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    _init_mparams();
    label = 3;
    break;
   case 3:
    $5 = $pad >>> 0 < 4294967232;
    if ($5) {
      label = 4;
      break;
    } else {
      $released_2 = 0;
      label = 13;
      break;
    }
   case 4:
    $7 = HEAP32[2310] | 0;
    $8 = ($7 | 0) == 0;
    if ($8) {
      $released_2 = 0;
      label = 13;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $10 = $pad + 40 | 0;
    $11 = HEAP32[2307] | 0;
    $12 = $11 >>> 0 > $10 >>> 0;
    if ($12) {
      label = 6;
      break;
    } else {
      label = 11;
      break;
    }
   case 6:
    $14 = HEAP32[282] | 0;
    $_neg = -40 - $pad | 0;
    $15 = $_neg - 1 | 0;
    $16 = $15 + $11 | 0;
    $17 = $16 + $14 | 0;
    $18 = ($17 >>> 0) / ($14 >>> 0) >>> 0;
    $19 = $18 - 1 | 0;
    $20 = Math_imul($19, $14);
    $21 = $7;
    $22 = _segment_holding($21) | 0;
    $23 = $22 + 12 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $24 & 8;
    $26 = ($25 | 0) == 0;
    if ($26) {
      label = 7;
      break;
    } else {
      label = 11;
      break;
    }
   case 7:
    $28 = _sbrk(0) | 0;
    $29 = $22 | 0;
    $30 = HEAP32[$29 >> 2] | 0;
    $31 = $22 + 4 | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    $33 = $30 + $32 | 0;
    $34 = ($28 | 0) == ($33 | 0);
    if ($34) {
      label = 8;
      break;
    } else {
      label = 11;
      break;
    }
   case 8:
    $36 = -2147483648 - $14 | 0;
    $37 = $20 >>> 0 > 2147483646;
    $_ = $37 ? $36 : $20;
    $38 = -$_ | 0;
    $39 = _sbrk($38 | 0) | 0;
    $40 = _sbrk(0) | 0;
    $41 = ($39 | 0) != -1;
    $42 = $40 >>> 0 < $28 >>> 0;
    $or_cond = $41 & $42;
    if ($or_cond) {
      label = 9;
      break;
    } else {
      label = 11;
      break;
    }
   case 9:
    $44 = $28;
    $45 = $40;
    $46 = $44 - $45 | 0;
    $47 = ($28 | 0) == ($40 | 0);
    if ($47) {
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $49 = $22 + 4 | 0;
    $50 = HEAP32[$49 >> 2] | 0;
    $51 = $50 - $46 | 0;
    HEAP32[$49 >> 2] = $51;
    $52 = HEAP32[2412] | 0;
    $53 = $52 - $46 | 0;
    HEAP32[2412] = $53;
    $54 = HEAP32[2310] | 0;
    $55 = HEAP32[2307] | 0;
    $56 = $55 - $46 | 0;
    _init_top($54, $56);
    $phitmp = ($28 | 0) != ($40 | 0);
    $released_2 = $phitmp;
    label = 13;
    break;
   case 11:
    $57 = HEAP32[2307] | 0;
    $58 = HEAP32[2311] | 0;
    $59 = $57 >>> 0 > $58 >>> 0;
    if ($59) {
      label = 12;
      break;
    } else {
      $released_2 = 0;
      label = 13;
      break;
    }
   case 12:
    HEAP32[2311] = -1;
    $released_2 = 0;
    label = 13;
    break;
   case 13:
    $62 = $released_2 & 1;
    return $62 | 0;
  }
  return 0;
}
function _realloc($oldmem, $bytes) {
  $oldmem = $oldmem | 0;
  $bytes = $bytes | 0;
  var $1 = 0, $3 = 0, $5 = 0, $7 = 0, $9 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $mem_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = ($oldmem | 0) == 0;
    if ($1) {
      label = 2;
      break;
    } else {
      label = 3;
      break;
    }
   case 2:
    $3 = _malloc($bytes) | 0;
    $mem_0 = $3;
    label = 11;
    break;
   case 3:
    $5 = $bytes >>> 0 > 4294967231;
    if ($5) {
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $7 = ___errno_location() | 0;
    HEAP32[$7 >> 2] = 12;
    $mem_0 = 0;
    label = 11;
    break;
   case 5:
    $9 = $bytes >>> 0 < 11;
    if ($9) {
      $14 = 16;
      label = 7;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $11 = $bytes + 11 | 0;
    $12 = $11 & -8;
    $14 = $12;
    label = 7;
    break;
   case 7:
    $15 = $oldmem - 8 | 0;
    $16 = $15;
    $17 = _try_realloc_chunk($16, $14) | 0;
    $18 = ($17 | 0) == 0;
    if ($18) {
      label = 9;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $20 = $17 + 8 | 0;
    $21 = $20;
    $mem_0 = $21;
    label = 11;
    break;
   case 9:
    $23 = _malloc($bytes) | 0;
    $24 = ($23 | 0) == 0;
    if ($24) {
      $mem_0 = 0;
      label = 11;
      break;
    } else {
      label = 10;
      break;
    }
   case 10:
    $26 = $oldmem - 4 | 0;
    $27 = $26;
    $28 = HEAP32[$27 >> 2] | 0;
    $29 = $28 & -8;
    $30 = $28 & 3;
    $31 = ($30 | 0) == 0;
    $32 = $31 ? 8 : 4;
    $33 = $29 - $32 | 0;
    $34 = $33 >>> 0 < $bytes >>> 0;
    $35 = $34 ? $33 : $bytes;
    _memcpy($23 | 0, $oldmem | 0, $35);
    _free($oldmem);
    $mem_0 = $23;
    label = 11;
    break;
   case 11:
    return $mem_0 | 0;
  }
  return 0;
}
function _try_realloc_chunk($p, $nb) {
  $p = $p | 0;
  $nb = $nb | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $or_cond = 0, $_sum2728 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $_sum23 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $_sum22 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $_sum19 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $_sum20 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $_sum17 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $storemerge21 = 0, $storemerge = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $96 = 0, $98 = 0, $99 = 0, $100 = 0, $_sum15 = 0, $102 = 0, $103 = 0, $104 = 0, $_sum16 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $114 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $138 = 0, $_sum = 0, $139 = 0, $140 = 0, $141 = 0, $_sum2 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $_sum14 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $153 = 0, $154 = 0, $155 = 0, $157 = 0, $158 = 0, $159 = 0, $_sum4 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $_sum3 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $RP_0 = 0, $R_0 = 0, $171 = 0, $172 = 0, $173 = 0, $175 = 0, $176 = 0, $177 = 0, $CP_0 = 0, $178 = 0, $180 = 0, $181 = 0, $182 = 0, $R_1 = 0, $186 = 0, $_sum11 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $cond = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $201 = 0, $202 = 0, $203 = 0, $205 = 0, $206 = 0, $207 = 0, $210 = 0, $213 = 0, $215 = 0, $216 = 0, $217 = 0, $219 = 0, $_sum12 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $225 = 0, $226 = 0, $227 = 0, $229 = 0, $230 = 0, $_sum13 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $238 = 0, $239 = 0, $240 = 0, $242 = 0, $243 = 0, $247 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $_sum910 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $_sum5 = 0, $264 = 0, $265 = 0, $266 = 0, $_sum78 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $newp_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 & -8;
    $4 = $p;
    $5 = $4 + $3 | 0;
    $6 = $5;
    $7 = HEAP32[2308] | 0;
    $8 = $4 >>> 0 < $7 >>> 0;
    if ($8) {
      label = 69;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $10 = $2 & 3;
    $11 = ($10 | 0) != 1;
    $12 = $4 >>> 0 < $5 >>> 0;
    $or_cond = $11 & $12;
    if ($or_cond) {
      label = 3;
      break;
    } else {
      label = 69;
      break;
    }
   case 3:
    $_sum2728 = $3 | 4;
    $14 = $4 + $_sum2728 | 0;
    $15 = $14;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $16 & 1;
    $18 = ($17 | 0) == 0;
    if ($18) {
      label = 69;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $20 = ($10 | 0) == 0;
    if ($20) {
      label = 5;
      break;
    } else {
      label = 6;
      break;
    }
   case 5:
    $22 = _mmap_resize($p, $nb) | 0;
    $newp_0 = $22;
    label = 70;
    break;
   case 6:
    $24 = $3 >>> 0 < $nb >>> 0;
    if ($24) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $26 = $3 - $nb | 0;
    $27 = $26 >>> 0 > 15;
    if ($27) {
      label = 8;
      break;
    } else {
      $newp_0 = $p;
      label = 70;
      break;
    }
   case 8:
    $29 = $4 + $nb | 0;
    $30 = $29;
    $31 = $2 & 1;
    $32 = $31 | $nb;
    $33 = $32 | 2;
    HEAP32[$1 >> 2] = $33;
    $_sum23 = $nb + 4 | 0;
    $34 = $4 + $_sum23 | 0;
    $35 = $34;
    $36 = $26 | 3;
    HEAP32[$35 >> 2] = $36;
    $37 = HEAP32[$15 >> 2] | 0;
    $38 = $37 | 1;
    HEAP32[$15 >> 2] = $38;
    _dispose_chunk($30, $26);
    $newp_0 = $p;
    label = 70;
    break;
   case 9:
    $40 = HEAP32[2310] | 0;
    $41 = ($6 | 0) == ($40 | 0);
    if ($41) {
      label = 10;
      break;
    } else {
      label = 12;
      break;
    }
   case 10:
    $43 = HEAP32[2307] | 0;
    $44 = $43 + $3 | 0;
    $45 = $44 >>> 0 > $nb >>> 0;
    if ($45) {
      label = 11;
      break;
    } else {
      $newp_0 = 0;
      label = 70;
      break;
    }
   case 11:
    $47 = $44 - $nb | 0;
    $48 = $4 + $nb | 0;
    $49 = $48;
    $50 = $2 & 1;
    $51 = $50 | $nb;
    $52 = $51 | 2;
    HEAP32[$1 >> 2] = $52;
    $_sum22 = $nb + 4 | 0;
    $53 = $4 + $_sum22 | 0;
    $54 = $53;
    $55 = $47 | 1;
    HEAP32[$54 >> 2] = $55;
    HEAP32[2310] = $49;
    HEAP32[2307] = $47;
    $newp_0 = $p;
    label = 70;
    break;
   case 12:
    $57 = HEAP32[2309] | 0;
    $58 = ($6 | 0) == ($57 | 0);
    if ($58) {
      label = 13;
      break;
    } else {
      label = 18;
      break;
    }
   case 13:
    $60 = HEAP32[2306] | 0;
    $61 = $60 + $3 | 0;
    $62 = $61 >>> 0 < $nb >>> 0;
    if ($62) {
      $newp_0 = 0;
      label = 70;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $64 = $61 - $nb | 0;
    $65 = $64 >>> 0 > 15;
    if ($65) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $67 = $4 + $nb | 0;
    $68 = $67;
    $69 = $4 + $61 | 0;
    $70 = $2 & 1;
    $71 = $70 | $nb;
    $72 = $71 | 2;
    HEAP32[$1 >> 2] = $72;
    $_sum19 = $nb + 4 | 0;
    $73 = $4 + $_sum19 | 0;
    $74 = $73;
    $75 = $64 | 1;
    HEAP32[$74 >> 2] = $75;
    $76 = $69;
    HEAP32[$76 >> 2] = $64;
    $_sum20 = $61 + 4 | 0;
    $77 = $4 + $_sum20 | 0;
    $78 = $77;
    $79 = HEAP32[$78 >> 2] | 0;
    $80 = $79 & -2;
    HEAP32[$78 >> 2] = $80;
    $storemerge = $68;
    $storemerge21 = $64;
    label = 17;
    break;
   case 16:
    $82 = $2 & 1;
    $83 = $82 | $61;
    $84 = $83 | 2;
    HEAP32[$1 >> 2] = $84;
    $_sum17 = $61 + 4 | 0;
    $85 = $4 + $_sum17 | 0;
    $86 = $85;
    $87 = HEAP32[$86 >> 2] | 0;
    $88 = $87 | 1;
    HEAP32[$86 >> 2] = $88;
    $storemerge = 0;
    $storemerge21 = 0;
    label = 17;
    break;
   case 17:
    HEAP32[2306] = $storemerge21;
    HEAP32[2309] = $storemerge;
    $newp_0 = $p;
    label = 70;
    break;
   case 18:
    $91 = $16 & 2;
    $92 = ($91 | 0) == 0;
    if ($92) {
      label = 19;
      break;
    } else {
      $newp_0 = 0;
      label = 70;
      break;
    }
   case 19:
    $94 = $16 & -8;
    $95 = $94 + $3 | 0;
    $96 = $95 >>> 0 < $nb >>> 0;
    if ($96) {
      $newp_0 = 0;
      label = 70;
      break;
    } else {
      label = 20;
      break;
    }
   case 20:
    $98 = $95 - $nb | 0;
    $99 = $16 >>> 3;
    $100 = $16 >>> 0 < 256;
    if ($100) {
      label = 21;
      break;
    } else {
      label = 32;
      break;
    }
   case 21:
    $_sum15 = $3 + 8 | 0;
    $102 = $4 + $_sum15 | 0;
    $103 = $102;
    $104 = HEAP32[$103 >> 2] | 0;
    $_sum16 = $3 + 12 | 0;
    $105 = $4 + $_sum16 | 0;
    $106 = $105;
    $107 = HEAP32[$106 >> 2] | 0;
    $108 = $99 << 1;
    $109 = 9256 + ($108 << 2) | 0;
    $110 = $109;
    $111 = ($104 | 0) == ($110 | 0);
    if ($111) {
      label = 24;
      break;
    } else {
      label = 22;
      break;
    }
   case 22:
    $113 = $104;
    $114 = $113 >>> 0 < $7 >>> 0;
    if ($114) {
      label = 31;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $116 = $104 + 12 | 0;
    $117 = HEAP32[$116 >> 2] | 0;
    $118 = ($117 | 0) == ($6 | 0);
    if ($118) {
      label = 24;
      break;
    } else {
      label = 31;
      break;
    }
   case 24:
    $119 = ($107 | 0) == ($104 | 0);
    if ($119) {
      label = 25;
      break;
    } else {
      label = 26;
      break;
    }
   case 25:
    $121 = 1 << $99;
    $122 = $121 ^ -1;
    $123 = HEAP32[2304] | 0;
    $124 = $123 & $122;
    HEAP32[2304] = $124;
    label = 66;
    break;
   case 26:
    $126 = ($107 | 0) == ($110 | 0);
    if ($126) {
      label = 29;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $128 = $107;
    $129 = HEAP32[2308] | 0;
    $130 = $128 >>> 0 < $129 >>> 0;
    if ($130) {
      label = 30;
      break;
    } else {
      label = 28;
      break;
    }
   case 28:
    $132 = $107 + 8 | 0;
    $133 = HEAP32[$132 >> 2] | 0;
    $134 = ($133 | 0) == ($6 | 0);
    if ($134) {
      label = 29;
      break;
    } else {
      label = 30;
      break;
    }
   case 29:
    $135 = $104 + 12 | 0;
    HEAP32[$135 >> 2] = $107;
    $136 = $107 + 8 | 0;
    HEAP32[$136 >> 2] = $104;
    label = 66;
    break;
   case 30:
    _abort();
    return 0;
    return 0;
   case 31:
    _abort();
    return 0;
    return 0;
   case 32:
    $138 = $5;
    $_sum = $3 + 24 | 0;
    $139 = $4 + $_sum | 0;
    $140 = $139;
    $141 = HEAP32[$140 >> 2] | 0;
    $_sum2 = $3 + 12 | 0;
    $142 = $4 + $_sum2 | 0;
    $143 = $142;
    $144 = HEAP32[$143 >> 2] | 0;
    $145 = ($144 | 0) == ($138 | 0);
    if ($145) {
      label = 38;
      break;
    } else {
      label = 33;
      break;
    }
   case 33:
    $_sum14 = $3 + 8 | 0;
    $147 = $4 + $_sum14 | 0;
    $148 = $147;
    $149 = HEAP32[$148 >> 2] | 0;
    $150 = $149;
    $151 = $150 >>> 0 < $7 >>> 0;
    if ($151) {
      label = 37;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    $153 = $149 + 12 | 0;
    $154 = HEAP32[$153 >> 2] | 0;
    $155 = ($154 | 0) == ($138 | 0);
    if ($155) {
      label = 35;
      break;
    } else {
      label = 37;
      break;
    }
   case 35:
    $157 = $144 + 8 | 0;
    $158 = HEAP32[$157 >> 2] | 0;
    $159 = ($158 | 0) == ($138 | 0);
    if ($159) {
      label = 36;
      break;
    } else {
      label = 37;
      break;
    }
   case 36:
    HEAP32[$153 >> 2] = $144;
    HEAP32[$157 >> 2] = $149;
    $R_1 = $144;
    label = 46;
    break;
   case 37:
    _abort();
    return 0;
    return 0;
   case 38:
    $_sum4 = $3 + 20 | 0;
    $162 = $4 + $_sum4 | 0;
    $163 = $162;
    $164 = HEAP32[$163 >> 2] | 0;
    $165 = ($164 | 0) == 0;
    if ($165) {
      label = 39;
      break;
    } else {
      $R_0 = $164;
      $RP_0 = $163;
      label = 40;
      break;
    }
   case 39:
    $_sum3 = $3 + 16 | 0;
    $167 = $4 + $_sum3 | 0;
    $168 = $167;
    $169 = HEAP32[$168 >> 2] | 0;
    $170 = ($169 | 0) == 0;
    if ($170) {
      $R_1 = 0;
      label = 46;
      break;
    } else {
      $R_0 = $169;
      $RP_0 = $168;
      label = 40;
      break;
    }
   case 40:
    $171 = $R_0 + 20 | 0;
    $172 = HEAP32[$171 >> 2] | 0;
    $173 = ($172 | 0) == 0;
    if ($173) {
      label = 41;
      break;
    } else {
      $CP_0 = $171;
      label = 42;
      break;
    }
   case 41:
    $175 = $R_0 + 16 | 0;
    $176 = HEAP32[$175 >> 2] | 0;
    $177 = ($176 | 0) == 0;
    if ($177) {
      label = 43;
      break;
    } else {
      $CP_0 = $175;
      label = 42;
      break;
    }
   case 42:
    $178 = HEAP32[$CP_0 >> 2] | 0;
    $R_0 = $178;
    $RP_0 = $CP_0;
    label = 40;
    break;
   case 43:
    $180 = $RP_0;
    $181 = HEAP32[2308] | 0;
    $182 = $180 >>> 0 < $181 >>> 0;
    if ($182) {
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    HEAP32[$RP_0 >> 2] = 0;
    $R_1 = $R_0;
    label = 46;
    break;
   case 45:
    _abort();
    return 0;
    return 0;
   case 46:
    $186 = ($141 | 0) == 0;
    if ($186) {
      label = 66;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    $_sum11 = $3 + 28 | 0;
    $188 = $4 + $_sum11 | 0;
    $189 = $188;
    $190 = HEAP32[$189 >> 2] | 0;
    $191 = 9520 + ($190 << 2) | 0;
    $192 = HEAP32[$191 >> 2] | 0;
    $193 = ($138 | 0) == ($192 | 0);
    if ($193) {
      label = 48;
      break;
    } else {
      label = 50;
      break;
    }
   case 48:
    HEAP32[$191 >> 2] = $R_1;
    $cond = ($R_1 | 0) == 0;
    if ($cond) {
      label = 49;
      break;
    } else {
      label = 56;
      break;
    }
   case 49:
    $195 = HEAP32[$189 >> 2] | 0;
    $196 = 1 << $195;
    $197 = $196 ^ -1;
    $198 = HEAP32[2305] | 0;
    $199 = $198 & $197;
    HEAP32[2305] = $199;
    label = 66;
    break;
   case 50:
    $201 = $141;
    $202 = HEAP32[2308] | 0;
    $203 = $201 >>> 0 < $202 >>> 0;
    if ($203) {
      label = 54;
      break;
    } else {
      label = 51;
      break;
    }
   case 51:
    $205 = $141 + 16 | 0;
    $206 = HEAP32[$205 >> 2] | 0;
    $207 = ($206 | 0) == ($138 | 0);
    if ($207) {
      label = 52;
      break;
    } else {
      label = 53;
      break;
    }
   case 52:
    HEAP32[$205 >> 2] = $R_1;
    label = 55;
    break;
   case 53:
    $210 = $141 + 20 | 0;
    HEAP32[$210 >> 2] = $R_1;
    label = 55;
    break;
   case 54:
    _abort();
    return 0;
    return 0;
   case 55:
    $213 = ($R_1 | 0) == 0;
    if ($213) {
      label = 66;
      break;
    } else {
      label = 56;
      break;
    }
   case 56:
    $215 = $R_1;
    $216 = HEAP32[2308] | 0;
    $217 = $215 >>> 0 < $216 >>> 0;
    if ($217) {
      label = 65;
      break;
    } else {
      label = 57;
      break;
    }
   case 57:
    $219 = $R_1 + 24 | 0;
    HEAP32[$219 >> 2] = $141;
    $_sum12 = $3 + 16 | 0;
    $220 = $4 + $_sum12 | 0;
    $221 = $220;
    $222 = HEAP32[$221 >> 2] | 0;
    $223 = ($222 | 0) == 0;
    if ($223) {
      label = 61;
      break;
    } else {
      label = 58;
      break;
    }
   case 58:
    $225 = $222;
    $226 = HEAP32[2308] | 0;
    $227 = $225 >>> 0 < $226 >>> 0;
    if ($227) {
      label = 60;
      break;
    } else {
      label = 59;
      break;
    }
   case 59:
    $229 = $R_1 + 16 | 0;
    HEAP32[$229 >> 2] = $222;
    $230 = $222 + 24 | 0;
    HEAP32[$230 >> 2] = $R_1;
    label = 61;
    break;
   case 60:
    _abort();
    return 0;
    return 0;
   case 61:
    $_sum13 = $3 + 20 | 0;
    $233 = $4 + $_sum13 | 0;
    $234 = $233;
    $235 = HEAP32[$234 >> 2] | 0;
    $236 = ($235 | 0) == 0;
    if ($236) {
      label = 66;
      break;
    } else {
      label = 62;
      break;
    }
   case 62:
    $238 = $235;
    $239 = HEAP32[2308] | 0;
    $240 = $238 >>> 0 < $239 >>> 0;
    if ($240) {
      label = 64;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    $242 = $R_1 + 20 | 0;
    HEAP32[$242 >> 2] = $235;
    $243 = $235 + 24 | 0;
    HEAP32[$243 >> 2] = $R_1;
    label = 66;
    break;
   case 64:
    _abort();
    return 0;
    return 0;
   case 65:
    _abort();
    return 0;
    return 0;
   case 66:
    $247 = $98 >>> 0 < 16;
    if ($247) {
      label = 67;
      break;
    } else {
      label = 68;
      break;
    }
   case 67:
    $249 = HEAP32[$1 >> 2] | 0;
    $250 = $249 & 1;
    $251 = $95 | $250;
    $252 = $251 | 2;
    HEAP32[$1 >> 2] = $252;
    $_sum910 = $95 | 4;
    $253 = $4 + $_sum910 | 0;
    $254 = $253;
    $255 = HEAP32[$254 >> 2] | 0;
    $256 = $255 | 1;
    HEAP32[$254 >> 2] = $256;
    $newp_0 = $p;
    label = 70;
    break;
   case 68:
    $258 = $4 + $nb | 0;
    $259 = $258;
    $260 = HEAP32[$1 >> 2] | 0;
    $261 = $260 & 1;
    $262 = $261 | $nb;
    $263 = $262 | 2;
    HEAP32[$1 >> 2] = $263;
    $_sum5 = $nb + 4 | 0;
    $264 = $4 + $_sum5 | 0;
    $265 = $264;
    $266 = $98 | 3;
    HEAP32[$265 >> 2] = $266;
    $_sum78 = $95 | 4;
    $267 = $4 + $_sum78 | 0;
    $268 = $267;
    $269 = HEAP32[$268 >> 2] | 0;
    $270 = $269 | 1;
    HEAP32[$268 >> 2] = $270;
    _dispose_chunk($259, $98);
    $newp_0 = $p;
    label = 70;
    break;
   case 69:
    _abort();
    return 0;
    return 0;
   case 70:
    return $newp_0 | 0;
  }
  return 0;
}
function _init_mparams() {
  var $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $10 = 0, $11 = 0, $12 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP32[280] | 0;
    $2 = ($1 | 0) == 0;
    if ($2) {
      label = 2;
      break;
    } else {
      label = 5;
      break;
    }
   case 2:
    $4 = _sysconf(8) | 0;
    $5 = $4 - 1 | 0;
    $6 = $5 & $4;
    $7 = ($6 | 0) == 0;
    if ($7) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    _abort();
   case 4:
    HEAP32[282] = $4;
    HEAP32[281] = $4;
    HEAP32[283] = -1;
    HEAP32[284] = 2097152;
    HEAP32[285] = 0;
    HEAP32[2415] = 0;
    $10 = _time(0) | 0;
    $11 = $10 & -16;
    $12 = $11 ^ 1431655768;
    HEAP32[280] = $12;
    label = 5;
    break;
   case 5:
    return;
  }
}
function _mmap_resize($oldp, $nb) {
  $oldp = $oldp | 0;
  $nb = $nb | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $oldp + 4 | 0;
    $2 = HEAP32[$1 >> 2] | 0;
    $3 = $2 & -8;
    $4 = $nb >>> 0 < 256;
    if ($4) {
      $_0 = 0;
      label = 5;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $6 = $nb + 4 | 0;
    $7 = $3 >>> 0 < $6 >>> 0;
    if ($7) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $9 = $3 - $nb | 0;
    $10 = HEAP32[282] | 0;
    $11 = $10 << 1;
    $12 = $9 >>> 0 > $11 >>> 0;
    if ($12) {
      label = 4;
      break;
    } else {
      $_0 = $oldp;
      label = 5;
      break;
    }
   case 4:
    $_0 = 0;
    label = 5;
    break;
   case 5:
    return $_0 | 0;
  }
  return 0;
}
function _segment_holding($addr) {
  $addr = $addr | 0;
  var $sp_0 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $11 = 0, $12 = 0, $13 = 0, $_0 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $sp_0 = 9664;
    label = 2;
    break;
   case 2:
    $2 = $sp_0 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    $4 = $3 >>> 0 > $addr >>> 0;
    if ($4) {
      label = 4;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $6 = $sp_0 + 4 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $3 + $7 | 0;
    $9 = $8 >>> 0 > $addr >>> 0;
    if ($9) {
      $_0 = $sp_0;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $11 = $sp_0 + 8 | 0;
    $12 = HEAP32[$11 >> 2] | 0;
    $13 = ($12 | 0) == 0;
    if ($13) {
      $_0 = 0;
      label = 5;
      break;
    } else {
      $sp_0 = $12;
      label = 2;
      break;
    }
   case 5:
    return $_0 | 0;
  }
  return 0;
}
function _dispose_chunk($p, $psize) {
  $p = $p | 0;
  $psize = $psize | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $_sum30 = 0, $27 = 0, $28 = 0, $29 = 0, $_sum31 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $_sum22 = 0, $64 = 0, $65 = 0, $66 = 0, $_sum23 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $_sum29 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $_sum24 = 0, $_sum25 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $RP_0 = 0, $R_0 = 0, $96 = 0, $97 = 0, $98 = 0, $100 = 0, $101 = 0, $102 = 0, $CP_0 = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $R_1 = 0, $111 = 0, $_sum26 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $cond = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $135 = 0, $138 = 0, $140 = 0, $141 = 0, $142 = 0, $144 = 0, $_sum27 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $155 = 0, $_sum28 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $165 = 0, $167 = 0, $168 = 0, $_sum = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $180 = 0, $_sum20 = 0, $181 = 0, $182 = 0, $183 = 0, $_0277 = 0, $_0 = 0, $186 = 0, $187 = 0, $_sum1 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $195 = 0, $196 = 0, $198 = 0, $199 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $206 = 0, $207 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $217 = 0, $218 = 0, $219 = 0, $220 = 0, $_sum18 = 0, $222 = 0, $223 = 0, $224 = 0, $_sum19 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $233 = 0, $234 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $246 = 0, $248 = 0, $249 = 0, $250 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $258 = 0, $_sum2 = 0, $259 = 0, $260 = 0, $261 = 0, $_sum3 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $_sum17 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $273 = 0, $274 = 0, $275 = 0, $277 = 0, $278 = 0, $279 = 0, $_sum5 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $_sum4 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $RP9_0 = 0, $R7_0 = 0, $291 = 0, $292 = 0, $293 = 0, $295 = 0, $296 = 0, $297 = 0, $CP10_0 = 0, $298 = 0, $300 = 0, $301 = 0, $302 = 0, $R7_1 = 0, $306 = 0, $_sum14 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $cond46 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $321 = 0, $322 = 0, $323 = 0, $325 = 0, $326 = 0, $327 = 0, $330 = 0, $333 = 0, $335 = 0, $336 = 0, $337 = 0, $339 = 0, $_sum15 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $345 = 0, $346 = 0, $347 = 0, $349 = 0, $350 = 0, $_sum16 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $358 = 0, $359 = 0, $360 = 0, $362 = 0, $363 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $_1 = 0, $383 = 0, $384 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $394 = 0, $_sum13 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $400 = 0, $F16_0 = 0, $_sum12 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $408 = 0, $409 = 0, $410 = 0, $412 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $I19_0 = 0, $437 = 0, $438 = 0, $I19_0_c = 0, $439 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $446 = 0, $447 = 0, $_c = 0, $448 = 0, $449 = 0, $451 = 0, $452 = 0, $454 = 0, $455 = 0, $457 = 0, $458 = 0, $T_0 = 0, $K20_0 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $471 = 0, $472 = 0, $473 = 0, $475 = 0, $T_0_c9 = 0, $476 = 0, $477 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $486 = 0, $487 = 0, $489 = 0, $490 = 0, $_c8 = 0, $491 = 0, $T_0_c = 0, $492 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p;
    $2 = $1 + $psize | 0;
    $3 = $2;
    $4 = $p + 4 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $5 & 1;
    $7 = ($6 | 0) == 0;
    if ($7) {
      label = 2;
      break;
    } else {
      $_0 = $p;
      $_0277 = $psize;
      label = 54;
      break;
    }
   case 2:
    $9 = $p | 0;
    $10 = HEAP32[$9 >> 2] | 0;
    $11 = $5 & 3;
    $12 = ($11 | 0) == 0;
    if ($12) {
      label = 134;
      break;
    } else {
      label = 3;
      break;
    }
   case 3:
    $14 = -$10 | 0;
    $15 = $1 + $14 | 0;
    $16 = $15;
    $17 = $10 + $psize | 0;
    $18 = HEAP32[2308] | 0;
    $19 = $15 >>> 0 < $18 >>> 0;
    if ($19) {
      label = 53;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $21 = HEAP32[2309] | 0;
    $22 = ($16 | 0) == ($21 | 0);
    if ($22) {
      label = 51;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $24 = $10 >>> 3;
    $25 = $10 >>> 0 < 256;
    if ($25) {
      label = 6;
      break;
    } else {
      label = 17;
      break;
    }
   case 6:
    $_sum30 = 8 - $10 | 0;
    $27 = $1 + $_sum30 | 0;
    $28 = $27;
    $29 = HEAP32[$28 >> 2] | 0;
    $_sum31 = 12 - $10 | 0;
    $30 = $1 + $_sum31 | 0;
    $31 = $30;
    $32 = HEAP32[$31 >> 2] | 0;
    $33 = $24 << 1;
    $34 = 9256 + ($33 << 2) | 0;
    $35 = $34;
    $36 = ($29 | 0) == ($35 | 0);
    if ($36) {
      label = 9;
      break;
    } else {
      label = 7;
      break;
    }
   case 7:
    $38 = $29;
    $39 = $38 >>> 0 < $18 >>> 0;
    if ($39) {
      label = 16;
      break;
    } else {
      label = 8;
      break;
    }
   case 8:
    $41 = $29 + 12 | 0;
    $42 = HEAP32[$41 >> 2] | 0;
    $43 = ($42 | 0) == ($16 | 0);
    if ($43) {
      label = 9;
      break;
    } else {
      label = 16;
      break;
    }
   case 9:
    $44 = ($32 | 0) == ($29 | 0);
    if ($44) {
      label = 10;
      break;
    } else {
      label = 11;
      break;
    }
   case 10:
    $46 = 1 << $24;
    $47 = $46 ^ -1;
    $48 = HEAP32[2304] | 0;
    $49 = $48 & $47;
    HEAP32[2304] = $49;
    $_0 = $16;
    $_0277 = $17;
    label = 54;
    break;
   case 11:
    $51 = ($32 | 0) == ($35 | 0);
    if ($51) {
      label = 14;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $53 = $32;
    $54 = HEAP32[2308] | 0;
    $55 = $53 >>> 0 < $54 >>> 0;
    if ($55) {
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $57 = $32 + 8 | 0;
    $58 = HEAP32[$57 >> 2] | 0;
    $59 = ($58 | 0) == ($16 | 0);
    if ($59) {
      label = 14;
      break;
    } else {
      label = 15;
      break;
    }
   case 14:
    $60 = $29 + 12 | 0;
    HEAP32[$60 >> 2] = $32;
    $61 = $32 + 8 | 0;
    HEAP32[$61 >> 2] = $29;
    $_0 = $16;
    $_0277 = $17;
    label = 54;
    break;
   case 15:
    _abort();
   case 16:
    _abort();
   case 17:
    $63 = $15;
    $_sum22 = 24 - $10 | 0;
    $64 = $1 + $_sum22 | 0;
    $65 = $64;
    $66 = HEAP32[$65 >> 2] | 0;
    $_sum23 = 12 - $10 | 0;
    $67 = $1 + $_sum23 | 0;
    $68 = $67;
    $69 = HEAP32[$68 >> 2] | 0;
    $70 = ($69 | 0) == ($63 | 0);
    if ($70) {
      label = 23;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $_sum29 = 8 - $10 | 0;
    $72 = $1 + $_sum29 | 0;
    $73 = $72;
    $74 = HEAP32[$73 >> 2] | 0;
    $75 = $74;
    $76 = $75 >>> 0 < $18 >>> 0;
    if ($76) {
      label = 22;
      break;
    } else {
      label = 19;
      break;
    }
   case 19:
    $78 = $74 + 12 | 0;
    $79 = HEAP32[$78 >> 2] | 0;
    $80 = ($79 | 0) == ($63 | 0);
    if ($80) {
      label = 20;
      break;
    } else {
      label = 22;
      break;
    }
   case 20:
    $82 = $69 + 8 | 0;
    $83 = HEAP32[$82 >> 2] | 0;
    $84 = ($83 | 0) == ($63 | 0);
    if ($84) {
      label = 21;
      break;
    } else {
      label = 22;
      break;
    }
   case 21:
    HEAP32[$78 >> 2] = $69;
    HEAP32[$82 >> 2] = $74;
    $R_1 = $69;
    label = 31;
    break;
   case 22:
    _abort();
   case 23:
    $_sum24 = 16 - $10 | 0;
    $_sum25 = $_sum24 + 4 | 0;
    $87 = $1 + $_sum25 | 0;
    $88 = $87;
    $89 = HEAP32[$88 >> 2] | 0;
    $90 = ($89 | 0) == 0;
    if ($90) {
      label = 24;
      break;
    } else {
      $R_0 = $89;
      $RP_0 = $88;
      label = 25;
      break;
    }
   case 24:
    $92 = $1 + $_sum24 | 0;
    $93 = $92;
    $94 = HEAP32[$93 >> 2] | 0;
    $95 = ($94 | 0) == 0;
    if ($95) {
      $R_1 = 0;
      label = 31;
      break;
    } else {
      $R_0 = $94;
      $RP_0 = $93;
      label = 25;
      break;
    }
   case 25:
    $96 = $R_0 + 20 | 0;
    $97 = HEAP32[$96 >> 2] | 0;
    $98 = ($97 | 0) == 0;
    if ($98) {
      label = 26;
      break;
    } else {
      $CP_0 = $96;
      label = 27;
      break;
    }
   case 26:
    $100 = $R_0 + 16 | 0;
    $101 = HEAP32[$100 >> 2] | 0;
    $102 = ($101 | 0) == 0;
    if ($102) {
      label = 28;
      break;
    } else {
      $CP_0 = $100;
      label = 27;
      break;
    }
   case 27:
    $103 = HEAP32[$CP_0 >> 2] | 0;
    $R_0 = $103;
    $RP_0 = $CP_0;
    label = 25;
    break;
   case 28:
    $105 = $RP_0;
    $106 = HEAP32[2308] | 0;
    $107 = $105 >>> 0 < $106 >>> 0;
    if ($107) {
      label = 30;
      break;
    } else {
      label = 29;
      break;
    }
   case 29:
    HEAP32[$RP_0 >> 2] = 0;
    $R_1 = $R_0;
    label = 31;
    break;
   case 30:
    _abort();
   case 31:
    $111 = ($66 | 0) == 0;
    if ($111) {
      $_0 = $16;
      $_0277 = $17;
      label = 54;
      break;
    } else {
      label = 32;
      break;
    }
   case 32:
    $_sum26 = 28 - $10 | 0;
    $113 = $1 + $_sum26 | 0;
    $114 = $113;
    $115 = HEAP32[$114 >> 2] | 0;
    $116 = 9520 + ($115 << 2) | 0;
    $117 = HEAP32[$116 >> 2] | 0;
    $118 = ($63 | 0) == ($117 | 0);
    if ($118) {
      label = 33;
      break;
    } else {
      label = 35;
      break;
    }
   case 33:
    HEAP32[$116 >> 2] = $R_1;
    $cond = ($R_1 | 0) == 0;
    if ($cond) {
      label = 34;
      break;
    } else {
      label = 41;
      break;
    }
   case 34:
    $120 = HEAP32[$114 >> 2] | 0;
    $121 = 1 << $120;
    $122 = $121 ^ -1;
    $123 = HEAP32[2305] | 0;
    $124 = $123 & $122;
    HEAP32[2305] = $124;
    $_0 = $16;
    $_0277 = $17;
    label = 54;
    break;
   case 35:
    $126 = $66;
    $127 = HEAP32[2308] | 0;
    $128 = $126 >>> 0 < $127 >>> 0;
    if ($128) {
      label = 39;
      break;
    } else {
      label = 36;
      break;
    }
   case 36:
    $130 = $66 + 16 | 0;
    $131 = HEAP32[$130 >> 2] | 0;
    $132 = ($131 | 0) == ($63 | 0);
    if ($132) {
      label = 37;
      break;
    } else {
      label = 38;
      break;
    }
   case 37:
    HEAP32[$130 >> 2] = $R_1;
    label = 40;
    break;
   case 38:
    $135 = $66 + 20 | 0;
    HEAP32[$135 >> 2] = $R_1;
    label = 40;
    break;
   case 39:
    _abort();
   case 40:
    $138 = ($R_1 | 0) == 0;
    if ($138) {
      $_0 = $16;
      $_0277 = $17;
      label = 54;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $140 = $R_1;
    $141 = HEAP32[2308] | 0;
    $142 = $140 >>> 0 < $141 >>> 0;
    if ($142) {
      label = 50;
      break;
    } else {
      label = 42;
      break;
    }
   case 42:
    $144 = $R_1 + 24 | 0;
    HEAP32[$144 >> 2] = $66;
    $_sum27 = 16 - $10 | 0;
    $145 = $1 + $_sum27 | 0;
    $146 = $145;
    $147 = HEAP32[$146 >> 2] | 0;
    $148 = ($147 | 0) == 0;
    if ($148) {
      label = 46;
      break;
    } else {
      label = 43;
      break;
    }
   case 43:
    $150 = $147;
    $151 = HEAP32[2308] | 0;
    $152 = $150 >>> 0 < $151 >>> 0;
    if ($152) {
      label = 45;
      break;
    } else {
      label = 44;
      break;
    }
   case 44:
    $154 = $R_1 + 16 | 0;
    HEAP32[$154 >> 2] = $147;
    $155 = $147 + 24 | 0;
    HEAP32[$155 >> 2] = $R_1;
    label = 46;
    break;
   case 45:
    _abort();
   case 46:
    $_sum28 = $_sum27 + 4 | 0;
    $158 = $1 + $_sum28 | 0;
    $159 = $158;
    $160 = HEAP32[$159 >> 2] | 0;
    $161 = ($160 | 0) == 0;
    if ($161) {
      $_0 = $16;
      $_0277 = $17;
      label = 54;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    $163 = $160;
    $164 = HEAP32[2308] | 0;
    $165 = $163 >>> 0 < $164 >>> 0;
    if ($165) {
      label = 49;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    $167 = $R_1 + 20 | 0;
    HEAP32[$167 >> 2] = $160;
    $168 = $160 + 24 | 0;
    HEAP32[$168 >> 2] = $R_1;
    $_0 = $16;
    $_0277 = $17;
    label = 54;
    break;
   case 49:
    _abort();
   case 50:
    _abort();
   case 51:
    $_sum = $psize + 4 | 0;
    $172 = $1 + $_sum | 0;
    $173 = $172;
    $174 = HEAP32[$173 >> 2] | 0;
    $175 = $174 & 3;
    $176 = ($175 | 0) == 3;
    if ($176) {
      label = 52;
      break;
    } else {
      $_0 = $16;
      $_0277 = $17;
      label = 54;
      break;
    }
   case 52:
    HEAP32[2306] = $17;
    $178 = HEAP32[$173 >> 2] | 0;
    $179 = $178 & -2;
    HEAP32[$173 >> 2] = $179;
    $180 = $17 | 1;
    $_sum20 = 4 - $10 | 0;
    $181 = $1 + $_sum20 | 0;
    $182 = $181;
    HEAP32[$182 >> 2] = $180;
    $183 = $2;
    HEAP32[$183 >> 2] = $17;
    label = 134;
    break;
   case 53:
    _abort();
   case 54:
    $186 = HEAP32[2308] | 0;
    $187 = $2 >>> 0 < $186 >>> 0;
    if ($187) {
      label = 133;
      break;
    } else {
      label = 55;
      break;
    }
   case 55:
    $_sum1 = $psize + 4 | 0;
    $189 = $1 + $_sum1 | 0;
    $190 = $189;
    $191 = HEAP32[$190 >> 2] | 0;
    $192 = $191 & 2;
    $193 = ($192 | 0) == 0;
    if ($193) {
      label = 56;
      break;
    } else {
      label = 109;
      break;
    }
   case 56:
    $195 = HEAP32[2310] | 0;
    $196 = ($3 | 0) == ($195 | 0);
    if ($196) {
      label = 57;
      break;
    } else {
      label = 59;
      break;
    }
   case 57:
    $198 = HEAP32[2307] | 0;
    $199 = $198 + $_0277 | 0;
    HEAP32[2307] = $199;
    HEAP32[2310] = $_0;
    $200 = $199 | 1;
    $201 = $_0 + 4 | 0;
    HEAP32[$201 >> 2] = $200;
    $202 = HEAP32[2309] | 0;
    $203 = ($_0 | 0) == ($202 | 0);
    if ($203) {
      label = 58;
      break;
    } else {
      label = 134;
      break;
    }
   case 58:
    HEAP32[2309] = 0;
    HEAP32[2306] = 0;
    label = 134;
    break;
   case 59:
    $206 = HEAP32[2309] | 0;
    $207 = ($3 | 0) == ($206 | 0);
    if ($207) {
      label = 60;
      break;
    } else {
      label = 61;
      break;
    }
   case 60:
    $209 = HEAP32[2306] | 0;
    $210 = $209 + $_0277 | 0;
    HEAP32[2306] = $210;
    HEAP32[2309] = $_0;
    $211 = $210 | 1;
    $212 = $_0 + 4 | 0;
    HEAP32[$212 >> 2] = $211;
    $213 = $_0;
    $214 = $213 + $210 | 0;
    $215 = $214;
    HEAP32[$215 >> 2] = $210;
    label = 134;
    break;
   case 61:
    $217 = $191 & -8;
    $218 = $217 + $_0277 | 0;
    $219 = $191 >>> 3;
    $220 = $191 >>> 0 < 256;
    if ($220) {
      label = 62;
      break;
    } else {
      label = 73;
      break;
    }
   case 62:
    $_sum18 = $psize + 8 | 0;
    $222 = $1 + $_sum18 | 0;
    $223 = $222;
    $224 = HEAP32[$223 >> 2] | 0;
    $_sum19 = $psize + 12 | 0;
    $225 = $1 + $_sum19 | 0;
    $226 = $225;
    $227 = HEAP32[$226 >> 2] | 0;
    $228 = $219 << 1;
    $229 = 9256 + ($228 << 2) | 0;
    $230 = $229;
    $231 = ($224 | 0) == ($230 | 0);
    if ($231) {
      label = 65;
      break;
    } else {
      label = 63;
      break;
    }
   case 63:
    $233 = $224;
    $234 = $233 >>> 0 < $186 >>> 0;
    if ($234) {
      label = 72;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    $236 = $224 + 12 | 0;
    $237 = HEAP32[$236 >> 2] | 0;
    $238 = ($237 | 0) == ($3 | 0);
    if ($238) {
      label = 65;
      break;
    } else {
      label = 72;
      break;
    }
   case 65:
    $239 = ($227 | 0) == ($224 | 0);
    if ($239) {
      label = 66;
      break;
    } else {
      label = 67;
      break;
    }
   case 66:
    $241 = 1 << $219;
    $242 = $241 ^ -1;
    $243 = HEAP32[2304] | 0;
    $244 = $243 & $242;
    HEAP32[2304] = $244;
    label = 107;
    break;
   case 67:
    $246 = ($227 | 0) == ($230 | 0);
    if ($246) {
      label = 70;
      break;
    } else {
      label = 68;
      break;
    }
   case 68:
    $248 = $227;
    $249 = HEAP32[2308] | 0;
    $250 = $248 >>> 0 < $249 >>> 0;
    if ($250) {
      label = 71;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    $252 = $227 + 8 | 0;
    $253 = HEAP32[$252 >> 2] | 0;
    $254 = ($253 | 0) == ($3 | 0);
    if ($254) {
      label = 70;
      break;
    } else {
      label = 71;
      break;
    }
   case 70:
    $255 = $224 + 12 | 0;
    HEAP32[$255 >> 2] = $227;
    $256 = $227 + 8 | 0;
    HEAP32[$256 >> 2] = $224;
    label = 107;
    break;
   case 71:
    _abort();
   case 72:
    _abort();
   case 73:
    $258 = $2;
    $_sum2 = $psize + 24 | 0;
    $259 = $1 + $_sum2 | 0;
    $260 = $259;
    $261 = HEAP32[$260 >> 2] | 0;
    $_sum3 = $psize + 12 | 0;
    $262 = $1 + $_sum3 | 0;
    $263 = $262;
    $264 = HEAP32[$263 >> 2] | 0;
    $265 = ($264 | 0) == ($258 | 0);
    if ($265) {
      label = 79;
      break;
    } else {
      label = 74;
      break;
    }
   case 74:
    $_sum17 = $psize + 8 | 0;
    $267 = $1 + $_sum17 | 0;
    $268 = $267;
    $269 = HEAP32[$268 >> 2] | 0;
    $270 = $269;
    $271 = $270 >>> 0 < $186 >>> 0;
    if ($271) {
      label = 78;
      break;
    } else {
      label = 75;
      break;
    }
   case 75:
    $273 = $269 + 12 | 0;
    $274 = HEAP32[$273 >> 2] | 0;
    $275 = ($274 | 0) == ($258 | 0);
    if ($275) {
      label = 76;
      break;
    } else {
      label = 78;
      break;
    }
   case 76:
    $277 = $264 + 8 | 0;
    $278 = HEAP32[$277 >> 2] | 0;
    $279 = ($278 | 0) == ($258 | 0);
    if ($279) {
      label = 77;
      break;
    } else {
      label = 78;
      break;
    }
   case 77:
    HEAP32[$273 >> 2] = $264;
    HEAP32[$277 >> 2] = $269;
    $R7_1 = $264;
    label = 87;
    break;
   case 78:
    _abort();
   case 79:
    $_sum5 = $psize + 20 | 0;
    $282 = $1 + $_sum5 | 0;
    $283 = $282;
    $284 = HEAP32[$283 >> 2] | 0;
    $285 = ($284 | 0) == 0;
    if ($285) {
      label = 80;
      break;
    } else {
      $R7_0 = $284;
      $RP9_0 = $283;
      label = 81;
      break;
    }
   case 80:
    $_sum4 = $psize + 16 | 0;
    $287 = $1 + $_sum4 | 0;
    $288 = $287;
    $289 = HEAP32[$288 >> 2] | 0;
    $290 = ($289 | 0) == 0;
    if ($290) {
      $R7_1 = 0;
      label = 87;
      break;
    } else {
      $R7_0 = $289;
      $RP9_0 = $288;
      label = 81;
      break;
    }
   case 81:
    $291 = $R7_0 + 20 | 0;
    $292 = HEAP32[$291 >> 2] | 0;
    $293 = ($292 | 0) == 0;
    if ($293) {
      label = 82;
      break;
    } else {
      $CP10_0 = $291;
      label = 83;
      break;
    }
   case 82:
    $295 = $R7_0 + 16 | 0;
    $296 = HEAP32[$295 >> 2] | 0;
    $297 = ($296 | 0) == 0;
    if ($297) {
      label = 84;
      break;
    } else {
      $CP10_0 = $295;
      label = 83;
      break;
    }
   case 83:
    $298 = HEAP32[$CP10_0 >> 2] | 0;
    $R7_0 = $298;
    $RP9_0 = $CP10_0;
    label = 81;
    break;
   case 84:
    $300 = $RP9_0;
    $301 = HEAP32[2308] | 0;
    $302 = $300 >>> 0 < $301 >>> 0;
    if ($302) {
      label = 86;
      break;
    } else {
      label = 85;
      break;
    }
   case 85:
    HEAP32[$RP9_0 >> 2] = 0;
    $R7_1 = $R7_0;
    label = 87;
    break;
   case 86:
    _abort();
   case 87:
    $306 = ($261 | 0) == 0;
    if ($306) {
      label = 107;
      break;
    } else {
      label = 88;
      break;
    }
   case 88:
    $_sum14 = $psize + 28 | 0;
    $308 = $1 + $_sum14 | 0;
    $309 = $308;
    $310 = HEAP32[$309 >> 2] | 0;
    $311 = 9520 + ($310 << 2) | 0;
    $312 = HEAP32[$311 >> 2] | 0;
    $313 = ($258 | 0) == ($312 | 0);
    if ($313) {
      label = 89;
      break;
    } else {
      label = 91;
      break;
    }
   case 89:
    HEAP32[$311 >> 2] = $R7_1;
    $cond46 = ($R7_1 | 0) == 0;
    if ($cond46) {
      label = 90;
      break;
    } else {
      label = 97;
      break;
    }
   case 90:
    $315 = HEAP32[$309 >> 2] | 0;
    $316 = 1 << $315;
    $317 = $316 ^ -1;
    $318 = HEAP32[2305] | 0;
    $319 = $318 & $317;
    HEAP32[2305] = $319;
    label = 107;
    break;
   case 91:
    $321 = $261;
    $322 = HEAP32[2308] | 0;
    $323 = $321 >>> 0 < $322 >>> 0;
    if ($323) {
      label = 95;
      break;
    } else {
      label = 92;
      break;
    }
   case 92:
    $325 = $261 + 16 | 0;
    $326 = HEAP32[$325 >> 2] | 0;
    $327 = ($326 | 0) == ($258 | 0);
    if ($327) {
      label = 93;
      break;
    } else {
      label = 94;
      break;
    }
   case 93:
    HEAP32[$325 >> 2] = $R7_1;
    label = 96;
    break;
   case 94:
    $330 = $261 + 20 | 0;
    HEAP32[$330 >> 2] = $R7_1;
    label = 96;
    break;
   case 95:
    _abort();
   case 96:
    $333 = ($R7_1 | 0) == 0;
    if ($333) {
      label = 107;
      break;
    } else {
      label = 97;
      break;
    }
   case 97:
    $335 = $R7_1;
    $336 = HEAP32[2308] | 0;
    $337 = $335 >>> 0 < $336 >>> 0;
    if ($337) {
      label = 106;
      break;
    } else {
      label = 98;
      break;
    }
   case 98:
    $339 = $R7_1 + 24 | 0;
    HEAP32[$339 >> 2] = $261;
    $_sum15 = $psize + 16 | 0;
    $340 = $1 + $_sum15 | 0;
    $341 = $340;
    $342 = HEAP32[$341 >> 2] | 0;
    $343 = ($342 | 0) == 0;
    if ($343) {
      label = 102;
      break;
    } else {
      label = 99;
      break;
    }
   case 99:
    $345 = $342;
    $346 = HEAP32[2308] | 0;
    $347 = $345 >>> 0 < $346 >>> 0;
    if ($347) {
      label = 101;
      break;
    } else {
      label = 100;
      break;
    }
   case 100:
    $349 = $R7_1 + 16 | 0;
    HEAP32[$349 >> 2] = $342;
    $350 = $342 + 24 | 0;
    HEAP32[$350 >> 2] = $R7_1;
    label = 102;
    break;
   case 101:
    _abort();
   case 102:
    $_sum16 = $psize + 20 | 0;
    $353 = $1 + $_sum16 | 0;
    $354 = $353;
    $355 = HEAP32[$354 >> 2] | 0;
    $356 = ($355 | 0) == 0;
    if ($356) {
      label = 107;
      break;
    } else {
      label = 103;
      break;
    }
   case 103:
    $358 = $355;
    $359 = HEAP32[2308] | 0;
    $360 = $358 >>> 0 < $359 >>> 0;
    if ($360) {
      label = 105;
      break;
    } else {
      label = 104;
      break;
    }
   case 104:
    $362 = $R7_1 + 20 | 0;
    HEAP32[$362 >> 2] = $355;
    $363 = $355 + 24 | 0;
    HEAP32[$363 >> 2] = $R7_1;
    label = 107;
    break;
   case 105:
    _abort();
   case 106:
    _abort();
   case 107:
    $367 = $218 | 1;
    $368 = $_0 + 4 | 0;
    HEAP32[$368 >> 2] = $367;
    $369 = $_0;
    $370 = $369 + $218 | 0;
    $371 = $370;
    HEAP32[$371 >> 2] = $218;
    $372 = HEAP32[2309] | 0;
    $373 = ($_0 | 0) == ($372 | 0);
    if ($373) {
      label = 108;
      break;
    } else {
      $_1 = $218;
      label = 110;
      break;
    }
   case 108:
    HEAP32[2306] = $218;
    label = 134;
    break;
   case 109:
    $376 = $191 & -2;
    HEAP32[$190 >> 2] = $376;
    $377 = $_0277 | 1;
    $378 = $_0 + 4 | 0;
    HEAP32[$378 >> 2] = $377;
    $379 = $_0;
    $380 = $379 + $_0277 | 0;
    $381 = $380;
    HEAP32[$381 >> 2] = $_0277;
    $_1 = $_0277;
    label = 110;
    break;
   case 110:
    $383 = $_1 >>> 3;
    $384 = $_1 >>> 0 < 256;
    if ($384) {
      label = 111;
      break;
    } else {
      label = 116;
      break;
    }
   case 111:
    $386 = $383 << 1;
    $387 = 9256 + ($386 << 2) | 0;
    $388 = $387;
    $389 = HEAP32[2304] | 0;
    $390 = 1 << $383;
    $391 = $389 & $390;
    $392 = ($391 | 0) == 0;
    if ($392) {
      label = 112;
      break;
    } else {
      label = 113;
      break;
    }
   case 112:
    $394 = $389 | $390;
    HEAP32[2304] = $394;
    $F16_0 = $388;
    label = 115;
    break;
   case 113:
    $_sum13 = $386 + 2 | 0;
    $396 = 9256 + ($_sum13 << 2) | 0;
    $397 = HEAP32[$396 >> 2] | 0;
    $398 = $397;
    $399 = HEAP32[2308] | 0;
    $400 = $398 >>> 0 < $399 >>> 0;
    if ($400) {
      label = 114;
      break;
    } else {
      $F16_0 = $397;
      label = 115;
      break;
    }
   case 114:
    _abort();
   case 115:
    $_sum12 = $386 + 2 | 0;
    $403 = 9256 + ($_sum12 << 2) | 0;
    HEAP32[$403 >> 2] = $_0;
    $404 = $F16_0 + 12 | 0;
    HEAP32[$404 >> 2] = $_0;
    $405 = $_0 + 8 | 0;
    HEAP32[$405 >> 2] = $F16_0;
    $406 = $_0 + 12 | 0;
    HEAP32[$406 >> 2] = $388;
    label = 134;
    break;
   case 116:
    $408 = $_0;
    $409 = $_1 >>> 8;
    $410 = ($409 | 0) == 0;
    if ($410) {
      $I19_0 = 0;
      label = 119;
      break;
    } else {
      label = 117;
      break;
    }
   case 117:
    $412 = $_1 >>> 0 > 16777215;
    if ($412) {
      $I19_0 = 31;
      label = 119;
      break;
    } else {
      label = 118;
      break;
    }
   case 118:
    $414 = $409 + 1048320 | 0;
    $415 = $414 >>> 16;
    $416 = $415 & 8;
    $417 = $409 << $416;
    $418 = $417 + 520192 | 0;
    $419 = $418 >>> 16;
    $420 = $419 & 4;
    $421 = $420 | $416;
    $422 = $417 << $420;
    $423 = $422 + 245760 | 0;
    $424 = $423 >>> 16;
    $425 = $424 & 2;
    $426 = $421 | $425;
    $427 = 14 - $426 | 0;
    $428 = $422 << $425;
    $429 = $428 >>> 15;
    $430 = $427 + $429 | 0;
    $431 = $430 << 1;
    $432 = $430 + 7 | 0;
    $433 = $_1 >>> ($432 >>> 0);
    $434 = $433 & 1;
    $435 = $434 | $431;
    $I19_0 = $435;
    label = 119;
    break;
   case 119:
    $437 = 9520 + ($I19_0 << 2) | 0;
    $438 = $_0 + 28 | 0;
    $I19_0_c = $I19_0;
    HEAP32[$438 >> 2] = $I19_0_c;
    $439 = $_0 + 20 | 0;
    HEAP32[$439 >> 2] = 0;
    $440 = $_0 + 16 | 0;
    HEAP32[$440 >> 2] = 0;
    $441 = HEAP32[2305] | 0;
    $442 = 1 << $I19_0;
    $443 = $441 & $442;
    $444 = ($443 | 0) == 0;
    if ($444) {
      label = 120;
      break;
    } else {
      label = 121;
      break;
    }
   case 120:
    $446 = $441 | $442;
    HEAP32[2305] = $446;
    HEAP32[$437 >> 2] = $408;
    $447 = $_0 + 24 | 0;
    $_c = $437;
    HEAP32[$447 >> 2] = $_c;
    $448 = $_0 + 12 | 0;
    HEAP32[$448 >> 2] = $_0;
    $449 = $_0 + 8 | 0;
    HEAP32[$449 >> 2] = $_0;
    label = 134;
    break;
   case 121:
    $451 = HEAP32[$437 >> 2] | 0;
    $452 = ($I19_0 | 0) == 31;
    if ($452) {
      $457 = 0;
      label = 123;
      break;
    } else {
      label = 122;
      break;
    }
   case 122:
    $454 = $I19_0 >>> 1;
    $455 = 25 - $454 | 0;
    $457 = $455;
    label = 123;
    break;
   case 123:
    $458 = $_1 << $457;
    $K20_0 = $458;
    $T_0 = $451;
    label = 124;
    break;
   case 124:
    $460 = $T_0 + 4 | 0;
    $461 = HEAP32[$460 >> 2] | 0;
    $462 = $461 & -8;
    $463 = ($462 | 0) == ($_1 | 0);
    if ($463) {
      label = 129;
      break;
    } else {
      label = 125;
      break;
    }
   case 125:
    $465 = $K20_0 >>> 31;
    $466 = $T_0 + 16 + ($465 << 2) | 0;
    $467 = HEAP32[$466 >> 2] | 0;
    $468 = ($467 | 0) == 0;
    $469 = $K20_0 << 1;
    if ($468) {
      label = 126;
      break;
    } else {
      $K20_0 = $469;
      $T_0 = $467;
      label = 124;
      break;
    }
   case 126:
    $471 = $466;
    $472 = HEAP32[2308] | 0;
    $473 = $471 >>> 0 < $472 >>> 0;
    if ($473) {
      label = 128;
      break;
    } else {
      label = 127;
      break;
    }
   case 127:
    HEAP32[$466 >> 2] = $408;
    $475 = $_0 + 24 | 0;
    $T_0_c9 = $T_0;
    HEAP32[$475 >> 2] = $T_0_c9;
    $476 = $_0 + 12 | 0;
    HEAP32[$476 >> 2] = $_0;
    $477 = $_0 + 8 | 0;
    HEAP32[$477 >> 2] = $_0;
    label = 134;
    break;
   case 128:
    _abort();
   case 129:
    $480 = $T_0 + 8 | 0;
    $481 = HEAP32[$480 >> 2] | 0;
    $482 = $T_0;
    $483 = HEAP32[2308] | 0;
    $484 = $482 >>> 0 < $483 >>> 0;
    if ($484) {
      label = 132;
      break;
    } else {
      label = 130;
      break;
    }
   case 130:
    $486 = $481;
    $487 = $486 >>> 0 < $483 >>> 0;
    if ($487) {
      label = 132;
      break;
    } else {
      label = 131;
      break;
    }
   case 131:
    $489 = $481 + 12 | 0;
    HEAP32[$489 >> 2] = $408;
    HEAP32[$480 >> 2] = $408;
    $490 = $_0 + 8 | 0;
    $_c8 = $481;
    HEAP32[$490 >> 2] = $_c8;
    $491 = $_0 + 12 | 0;
    $T_0_c = $T_0;
    HEAP32[$491 >> 2] = $T_0_c;
    $492 = $_0 + 24 | 0;
    HEAP32[$492 >> 2] = 0;
    label = 134;
    break;
   case 132:
    _abort();
   case 133:
    _abort();
   case 134:
    return;
  }
}
function _init_top($p, $psize) {
  $p = $p | 0;
  $psize = $psize | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $_sum = 0, $15 = 0, $16 = 0, $_sum2 = 0, $17 = 0, $18 = 0, $19 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $p;
    $2 = $p + 8 | 0;
    $3 = $2;
    $4 = $3 & 7;
    $5 = ($4 | 0) == 0;
    if ($5) {
      $10 = 0;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $7 = -$3 | 0;
    $8 = $7 & 7;
    $10 = $8;
    label = 3;
    break;
   case 3:
    $11 = $1 + $10 | 0;
    $12 = $11;
    $13 = $psize - $10 | 0;
    HEAP32[2310] = $12;
    HEAP32[2307] = $13;
    $14 = $13 | 1;
    $_sum = $10 + 4 | 0;
    $15 = $1 + $_sum | 0;
    $16 = $15;
    HEAP32[$16 >> 2] = $14;
    $_sum2 = $psize + 4 | 0;
    $17 = $1 + $_sum2 | 0;
    $18 = $17;
    HEAP32[$18 >> 2] = 40;
    $19 = HEAP32[284] | 0;
    HEAP32[2311] = $19;
    return;
  }
}
function _init_bins() {
  var $i_02 = 0, $2 = 0, $3 = 0, $4 = 0, $_sum = 0, $5 = 0, $_sum1 = 0, $6 = 0, $7 = 0, $exitcond = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $i_02 = 0;
    label = 2;
    break;
   case 2:
    $2 = $i_02 << 1;
    $3 = 9256 + ($2 << 2) | 0;
    $4 = $3;
    $_sum = $2 + 3 | 0;
    $5 = 9256 + ($_sum << 2) | 0;
    HEAP32[$5 >> 2] = $4;
    $_sum1 = $2 + 2 | 0;
    $6 = 9256 + ($_sum1 << 2) | 0;
    HEAP32[$6 >> 2] = $4;
    $7 = $i_02 + 1 | 0;
    $exitcond = ($7 | 0) == 32;
    if ($exitcond) {
      label = 3;
      break;
    } else {
      $i_02 = $7;
      label = 2;
      break;
    }
   case 3:
    return;
  }
}
function _prepend_alloc($newbase, $oldbase, $nb) {
  $newbase = $newbase | 0;
  $oldbase = $oldbase | 0;
  $nb = $nb | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $_sum = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $_sum1 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $_sum42 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $_sum40 = 0, $46 = 0, $47 = 0, $_sum41 = 0, $48 = 0, $49 = 0, $_sum2 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $_sum3738 = 0, $61 = 0, $62 = 0, $63 = 0, $_sum39 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $86 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $98 = 0, $_sum34 = 0, $99 = 0, $100 = 0, $101 = 0, $_sum5 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $_sum3536 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $119 = 0, $120 = 0, $_sum67 = 0, $_sum8 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $RP_0 = 0, $R_0 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $CP_0 = 0, $139 = 0, $141 = 0, $142 = 0, $143 = 0, $R_1 = 0, $147 = 0, $_sum30 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $cond = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $162 = 0, $163 = 0, $164 = 0, $166 = 0, $167 = 0, $168 = 0, $171 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $180 = 0, $_sum3132 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $191 = 0, $_sum33 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $199 = 0, $200 = 0, $201 = 0, $203 = 0, $204 = 0, $_sum9 = 0, $208 = 0, $209 = 0, $210 = 0, $qsize_0 = 0, $oldfirst_0 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $_sum10 = 0, $216 = 0, $217 = 0, $_sum11 = 0, $218 = 0, $219 = 0, $220 = 0, $221 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $231 = 0, $_sum29 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $F4_0 = 0, $_sum26 = 0, $240 = 0, $241 = 0, $_sum27 = 0, $242 = 0, $243 = 0, $_sum28 = 0, $244 = 0, $245 = 0, $247 = 0, $248 = 0, $249 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $I7_0 = 0, $276 = 0, $_sum12 = 0, $277 = 0, $278 = 0, $_sum13 = 0, $279 = 0, $_sum14 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $288 = 0, $289 = 0, $_sum15 = 0, $290 = 0, $291 = 0, $_sum16 = 0, $292 = 0, $293 = 0, $_sum17 = 0, $294 = 0, $295 = 0, $297 = 0, $298 = 0, $300 = 0, $301 = 0, $303 = 0, $304 = 0, $T_0 = 0, $K8_0 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $317 = 0, $318 = 0, $319 = 0, $_sum23 = 0, $321 = 0, $322 = 0, $_sum24 = 0, $323 = 0, $324 = 0, $_sum25 = 0, $325 = 0, $326 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $335 = 0, $336 = 0, $338 = 0, $_sum20 = 0, $339 = 0, $340 = 0, $_sum21 = 0, $341 = 0, $342 = 0, $_sum22 = 0, $343 = 0, $344 = 0, $_sum1819 = 0, $346 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = $newbase + 8 | 0;
    $2 = $1;
    $3 = $2 & 7;
    $4 = ($3 | 0) == 0;
    if ($4) {
      $9 = 0;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $6 = -$2 | 0;
    $7 = $6 & 7;
    $9 = $7;
    label = 3;
    break;
   case 3:
    $10 = $newbase + $9 | 0;
    $11 = $oldbase + 8 | 0;
    $12 = $11;
    $13 = $12 & 7;
    $14 = ($13 | 0) == 0;
    if ($14) {
      $19 = 0;
      label = 5;
      break;
    } else {
      label = 4;
      break;
    }
   case 4:
    $16 = -$12 | 0;
    $17 = $16 & 7;
    $19 = $17;
    label = 5;
    break;
   case 5:
    $20 = $oldbase + $19 | 0;
    $21 = $20;
    $22 = $20;
    $23 = $10;
    $24 = $22 - $23 | 0;
    $_sum = $9 + $nb | 0;
    $25 = $newbase + $_sum | 0;
    $26 = $25;
    $27 = $24 - $nb | 0;
    $28 = $nb | 3;
    $_sum1 = $9 + 4 | 0;
    $29 = $newbase + $_sum1 | 0;
    $30 = $29;
    HEAP32[$30 >> 2] = $28;
    $31 = HEAP32[2310] | 0;
    $32 = ($21 | 0) == ($31 | 0);
    if ($32) {
      label = 6;
      break;
    } else {
      label = 7;
      break;
    }
   case 6:
    $34 = HEAP32[2307] | 0;
    $35 = $34 + $27 | 0;
    HEAP32[2307] = $35;
    HEAP32[2310] = $26;
    $36 = $35 | 1;
    $_sum42 = $_sum + 4 | 0;
    $37 = $newbase + $_sum42 | 0;
    $38 = $37;
    HEAP32[$38 >> 2] = $36;
    label = 80;
    break;
   case 7:
    $40 = HEAP32[2309] | 0;
    $41 = ($21 | 0) == ($40 | 0);
    if ($41) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $43 = HEAP32[2306] | 0;
    $44 = $43 + $27 | 0;
    HEAP32[2306] = $44;
    HEAP32[2309] = $26;
    $45 = $44 | 1;
    $_sum40 = $_sum + 4 | 0;
    $46 = $newbase + $_sum40 | 0;
    $47 = $46;
    HEAP32[$47 >> 2] = $45;
    $_sum41 = $44 + $_sum | 0;
    $48 = $newbase + $_sum41 | 0;
    $49 = $48;
    HEAP32[$49 >> 2] = $44;
    label = 80;
    break;
   case 9:
    $_sum2 = $19 + 4 | 0;
    $51 = $oldbase + $_sum2 | 0;
    $52 = $51;
    $53 = HEAP32[$52 >> 2] | 0;
    $54 = $53 & 3;
    $55 = ($54 | 0) == 1;
    if ($55) {
      label = 10;
      break;
    } else {
      $oldfirst_0 = $21;
      $qsize_0 = $27;
      label = 57;
      break;
    }
   case 10:
    $57 = $53 & -8;
    $58 = $53 >>> 3;
    $59 = $53 >>> 0 < 256;
    if ($59) {
      label = 11;
      break;
    } else {
      label = 22;
      break;
    }
   case 11:
    $_sum3738 = $19 | 8;
    $61 = $oldbase + $_sum3738 | 0;
    $62 = $61;
    $63 = HEAP32[$62 >> 2] | 0;
    $_sum39 = $19 + 12 | 0;
    $64 = $oldbase + $_sum39 | 0;
    $65 = $64;
    $66 = HEAP32[$65 >> 2] | 0;
    $67 = $58 << 1;
    $68 = 9256 + ($67 << 2) | 0;
    $69 = $68;
    $70 = ($63 | 0) == ($69 | 0);
    if ($70) {
      label = 14;
      break;
    } else {
      label = 12;
      break;
    }
   case 12:
    $72 = $63;
    $73 = HEAP32[2308] | 0;
    $74 = $72 >>> 0 < $73 >>> 0;
    if ($74) {
      label = 21;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $76 = $63 + 12 | 0;
    $77 = HEAP32[$76 >> 2] | 0;
    $78 = ($77 | 0) == ($21 | 0);
    if ($78) {
      label = 14;
      break;
    } else {
      label = 21;
      break;
    }
   case 14:
    $79 = ($66 | 0) == ($63 | 0);
    if ($79) {
      label = 15;
      break;
    } else {
      label = 16;
      break;
    }
   case 15:
    $81 = 1 << $58;
    $82 = $81 ^ -1;
    $83 = HEAP32[2304] | 0;
    $84 = $83 & $82;
    HEAP32[2304] = $84;
    label = 56;
    break;
   case 16:
    $86 = ($66 | 0) == ($69 | 0);
    if ($86) {
      label = 19;
      break;
    } else {
      label = 17;
      break;
    }
   case 17:
    $88 = $66;
    $89 = HEAP32[2308] | 0;
    $90 = $88 >>> 0 < $89 >>> 0;
    if ($90) {
      label = 20;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $92 = $66 + 8 | 0;
    $93 = HEAP32[$92 >> 2] | 0;
    $94 = ($93 | 0) == ($21 | 0);
    if ($94) {
      label = 19;
      break;
    } else {
      label = 20;
      break;
    }
   case 19:
    $95 = $63 + 12 | 0;
    HEAP32[$95 >> 2] = $66;
    $96 = $66 + 8 | 0;
    HEAP32[$96 >> 2] = $63;
    label = 56;
    break;
   case 20:
    _abort();
    return 0;
    return 0;
   case 21:
    _abort();
    return 0;
    return 0;
   case 22:
    $98 = $20;
    $_sum34 = $19 | 24;
    $99 = $oldbase + $_sum34 | 0;
    $100 = $99;
    $101 = HEAP32[$100 >> 2] | 0;
    $_sum5 = $19 + 12 | 0;
    $102 = $oldbase + $_sum5 | 0;
    $103 = $102;
    $104 = HEAP32[$103 >> 2] | 0;
    $105 = ($104 | 0) == ($98 | 0);
    if ($105) {
      label = 28;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    $_sum3536 = $19 | 8;
    $107 = $oldbase + $_sum3536 | 0;
    $108 = $107;
    $109 = HEAP32[$108 >> 2] | 0;
    $110 = $109;
    $111 = HEAP32[2308] | 0;
    $112 = $110 >>> 0 < $111 >>> 0;
    if ($112) {
      label = 27;
      break;
    } else {
      label = 24;
      break;
    }
   case 24:
    $114 = $109 + 12 | 0;
    $115 = HEAP32[$114 >> 2] | 0;
    $116 = ($115 | 0) == ($98 | 0);
    if ($116) {
      label = 25;
      break;
    } else {
      label = 27;
      break;
    }
   case 25:
    $118 = $104 + 8 | 0;
    $119 = HEAP32[$118 >> 2] | 0;
    $120 = ($119 | 0) == ($98 | 0);
    if ($120) {
      label = 26;
      break;
    } else {
      label = 27;
      break;
    }
   case 26:
    HEAP32[$114 >> 2] = $104;
    HEAP32[$118 >> 2] = $109;
    $R_1 = $104;
    label = 36;
    break;
   case 27:
    _abort();
    return 0;
    return 0;
   case 28:
    $_sum67 = $19 | 16;
    $_sum8 = $_sum67 + 4 | 0;
    $123 = $oldbase + $_sum8 | 0;
    $124 = $123;
    $125 = HEAP32[$124 >> 2] | 0;
    $126 = ($125 | 0) == 0;
    if ($126) {
      label = 29;
      break;
    } else {
      $R_0 = $125;
      $RP_0 = $124;
      label = 30;
      break;
    }
   case 29:
    $128 = $oldbase + $_sum67 | 0;
    $129 = $128;
    $130 = HEAP32[$129 >> 2] | 0;
    $131 = ($130 | 0) == 0;
    if ($131) {
      $R_1 = 0;
      label = 36;
      break;
    } else {
      $R_0 = $130;
      $RP_0 = $129;
      label = 30;
      break;
    }
   case 30:
    $132 = $R_0 + 20 | 0;
    $133 = HEAP32[$132 >> 2] | 0;
    $134 = ($133 | 0) == 0;
    if ($134) {
      label = 31;
      break;
    } else {
      $CP_0 = $132;
      label = 32;
      break;
    }
   case 31:
    $136 = $R_0 + 16 | 0;
    $137 = HEAP32[$136 >> 2] | 0;
    $138 = ($137 | 0) == 0;
    if ($138) {
      label = 33;
      break;
    } else {
      $CP_0 = $136;
      label = 32;
      break;
    }
   case 32:
    $139 = HEAP32[$CP_0 >> 2] | 0;
    $R_0 = $139;
    $RP_0 = $CP_0;
    label = 30;
    break;
   case 33:
    $141 = $RP_0;
    $142 = HEAP32[2308] | 0;
    $143 = $141 >>> 0 < $142 >>> 0;
    if ($143) {
      label = 35;
      break;
    } else {
      label = 34;
      break;
    }
   case 34:
    HEAP32[$RP_0 >> 2] = 0;
    $R_1 = $R_0;
    label = 36;
    break;
   case 35:
    _abort();
    return 0;
    return 0;
   case 36:
    $147 = ($101 | 0) == 0;
    if ($147) {
      label = 56;
      break;
    } else {
      label = 37;
      break;
    }
   case 37:
    $_sum30 = $19 + 28 | 0;
    $149 = $oldbase + $_sum30 | 0;
    $150 = $149;
    $151 = HEAP32[$150 >> 2] | 0;
    $152 = 9520 + ($151 << 2) | 0;
    $153 = HEAP32[$152 >> 2] | 0;
    $154 = ($98 | 0) == ($153 | 0);
    if ($154) {
      label = 38;
      break;
    } else {
      label = 40;
      break;
    }
   case 38:
    HEAP32[$152 >> 2] = $R_1;
    $cond = ($R_1 | 0) == 0;
    if ($cond) {
      label = 39;
      break;
    } else {
      label = 46;
      break;
    }
   case 39:
    $156 = HEAP32[$150 >> 2] | 0;
    $157 = 1 << $156;
    $158 = $157 ^ -1;
    $159 = HEAP32[2305] | 0;
    $160 = $159 & $158;
    HEAP32[2305] = $160;
    label = 56;
    break;
   case 40:
    $162 = $101;
    $163 = HEAP32[2308] | 0;
    $164 = $162 >>> 0 < $163 >>> 0;
    if ($164) {
      label = 44;
      break;
    } else {
      label = 41;
      break;
    }
   case 41:
    $166 = $101 + 16 | 0;
    $167 = HEAP32[$166 >> 2] | 0;
    $168 = ($167 | 0) == ($98 | 0);
    if ($168) {
      label = 42;
      break;
    } else {
      label = 43;
      break;
    }
   case 42:
    HEAP32[$166 >> 2] = $R_1;
    label = 45;
    break;
   case 43:
    $171 = $101 + 20 | 0;
    HEAP32[$171 >> 2] = $R_1;
    label = 45;
    break;
   case 44:
    _abort();
    return 0;
    return 0;
   case 45:
    $174 = ($R_1 | 0) == 0;
    if ($174) {
      label = 56;
      break;
    } else {
      label = 46;
      break;
    }
   case 46:
    $176 = $R_1;
    $177 = HEAP32[2308] | 0;
    $178 = $176 >>> 0 < $177 >>> 0;
    if ($178) {
      label = 55;
      break;
    } else {
      label = 47;
      break;
    }
   case 47:
    $180 = $R_1 + 24 | 0;
    HEAP32[$180 >> 2] = $101;
    $_sum3132 = $19 | 16;
    $181 = $oldbase + $_sum3132 | 0;
    $182 = $181;
    $183 = HEAP32[$182 >> 2] | 0;
    $184 = ($183 | 0) == 0;
    if ($184) {
      label = 51;
      break;
    } else {
      label = 48;
      break;
    }
   case 48:
    $186 = $183;
    $187 = HEAP32[2308] | 0;
    $188 = $186 >>> 0 < $187 >>> 0;
    if ($188) {
      label = 50;
      break;
    } else {
      label = 49;
      break;
    }
   case 49:
    $190 = $R_1 + 16 | 0;
    HEAP32[$190 >> 2] = $183;
    $191 = $183 + 24 | 0;
    HEAP32[$191 >> 2] = $R_1;
    label = 51;
    break;
   case 50:
    _abort();
    return 0;
    return 0;
   case 51:
    $_sum33 = $_sum3132 + 4 | 0;
    $194 = $oldbase + $_sum33 | 0;
    $195 = $194;
    $196 = HEAP32[$195 >> 2] | 0;
    $197 = ($196 | 0) == 0;
    if ($197) {
      label = 56;
      break;
    } else {
      label = 52;
      break;
    }
   case 52:
    $199 = $196;
    $200 = HEAP32[2308] | 0;
    $201 = $199 >>> 0 < $200 >>> 0;
    if ($201) {
      label = 54;
      break;
    } else {
      label = 53;
      break;
    }
   case 53:
    $203 = $R_1 + 20 | 0;
    HEAP32[$203 >> 2] = $196;
    $204 = $196 + 24 | 0;
    HEAP32[$204 >> 2] = $R_1;
    label = 56;
    break;
   case 54:
    _abort();
    return 0;
    return 0;
   case 55:
    _abort();
    return 0;
    return 0;
   case 56:
    $_sum9 = $57 | $19;
    $208 = $oldbase + $_sum9 | 0;
    $209 = $208;
    $210 = $57 + $27 | 0;
    $oldfirst_0 = $209;
    $qsize_0 = $210;
    label = 57;
    break;
   case 57:
    $212 = $oldfirst_0 + 4 | 0;
    $213 = HEAP32[$212 >> 2] | 0;
    $214 = $213 & -2;
    HEAP32[$212 >> 2] = $214;
    $215 = $qsize_0 | 1;
    $_sum10 = $_sum + 4 | 0;
    $216 = $newbase + $_sum10 | 0;
    $217 = $216;
    HEAP32[$217 >> 2] = $215;
    $_sum11 = $qsize_0 + $_sum | 0;
    $218 = $newbase + $_sum11 | 0;
    $219 = $218;
    HEAP32[$219 >> 2] = $qsize_0;
    $220 = $qsize_0 >>> 3;
    $221 = $qsize_0 >>> 0 < 256;
    if ($221) {
      label = 58;
      break;
    } else {
      label = 63;
      break;
    }
   case 58:
    $223 = $220 << 1;
    $224 = 9256 + ($223 << 2) | 0;
    $225 = $224;
    $226 = HEAP32[2304] | 0;
    $227 = 1 << $220;
    $228 = $226 & $227;
    $229 = ($228 | 0) == 0;
    if ($229) {
      label = 59;
      break;
    } else {
      label = 60;
      break;
    }
   case 59:
    $231 = $226 | $227;
    HEAP32[2304] = $231;
    $F4_0 = $225;
    label = 62;
    break;
   case 60:
    $_sum29 = $223 + 2 | 0;
    $233 = 9256 + ($_sum29 << 2) | 0;
    $234 = HEAP32[$233 >> 2] | 0;
    $235 = $234;
    $236 = HEAP32[2308] | 0;
    $237 = $235 >>> 0 < $236 >>> 0;
    if ($237) {
      label = 61;
      break;
    } else {
      $F4_0 = $234;
      label = 62;
      break;
    }
   case 61:
    _abort();
    return 0;
    return 0;
   case 62:
    $_sum26 = $223 + 2 | 0;
    $240 = 9256 + ($_sum26 << 2) | 0;
    HEAP32[$240 >> 2] = $26;
    $241 = $F4_0 + 12 | 0;
    HEAP32[$241 >> 2] = $26;
    $_sum27 = $_sum + 8 | 0;
    $242 = $newbase + $_sum27 | 0;
    $243 = $242;
    HEAP32[$243 >> 2] = $F4_0;
    $_sum28 = $_sum + 12 | 0;
    $244 = $newbase + $_sum28 | 0;
    $245 = $244;
    HEAP32[$245 >> 2] = $225;
    label = 80;
    break;
   case 63:
    $247 = $25;
    $248 = $qsize_0 >>> 8;
    $249 = ($248 | 0) == 0;
    if ($249) {
      $I7_0 = 0;
      label = 66;
      break;
    } else {
      label = 64;
      break;
    }
   case 64:
    $251 = $qsize_0 >>> 0 > 16777215;
    if ($251) {
      $I7_0 = 31;
      label = 66;
      break;
    } else {
      label = 65;
      break;
    }
   case 65:
    $253 = $248 + 1048320 | 0;
    $254 = $253 >>> 16;
    $255 = $254 & 8;
    $256 = $248 << $255;
    $257 = $256 + 520192 | 0;
    $258 = $257 >>> 16;
    $259 = $258 & 4;
    $260 = $259 | $255;
    $261 = $256 << $259;
    $262 = $261 + 245760 | 0;
    $263 = $262 >>> 16;
    $264 = $263 & 2;
    $265 = $260 | $264;
    $266 = 14 - $265 | 0;
    $267 = $261 << $264;
    $268 = $267 >>> 15;
    $269 = $266 + $268 | 0;
    $270 = $269 << 1;
    $271 = $269 + 7 | 0;
    $272 = $qsize_0 >>> ($271 >>> 0);
    $273 = $272 & 1;
    $274 = $273 | $270;
    $I7_0 = $274;
    label = 66;
    break;
   case 66:
    $276 = 9520 + ($I7_0 << 2) | 0;
    $_sum12 = $_sum + 28 | 0;
    $277 = $newbase + $_sum12 | 0;
    $278 = $277;
    HEAP32[$278 >> 2] = $I7_0;
    $_sum13 = $_sum + 16 | 0;
    $279 = $newbase + $_sum13 | 0;
    $_sum14 = $_sum + 20 | 0;
    $280 = $newbase + $_sum14 | 0;
    $281 = $280;
    HEAP32[$281 >> 2] = 0;
    $282 = $279;
    HEAP32[$282 >> 2] = 0;
    $283 = HEAP32[2305] | 0;
    $284 = 1 << $I7_0;
    $285 = $283 & $284;
    $286 = ($285 | 0) == 0;
    if ($286) {
      label = 67;
      break;
    } else {
      label = 68;
      break;
    }
   case 67:
    $288 = $283 | $284;
    HEAP32[2305] = $288;
    HEAP32[$276 >> 2] = $247;
    $289 = $276;
    $_sum15 = $_sum + 24 | 0;
    $290 = $newbase + $_sum15 | 0;
    $291 = $290;
    HEAP32[$291 >> 2] = $289;
    $_sum16 = $_sum + 12 | 0;
    $292 = $newbase + $_sum16 | 0;
    $293 = $292;
    HEAP32[$293 >> 2] = $247;
    $_sum17 = $_sum + 8 | 0;
    $294 = $newbase + $_sum17 | 0;
    $295 = $294;
    HEAP32[$295 >> 2] = $247;
    label = 80;
    break;
   case 68:
    $297 = HEAP32[$276 >> 2] | 0;
    $298 = ($I7_0 | 0) == 31;
    if ($298) {
      $303 = 0;
      label = 70;
      break;
    } else {
      label = 69;
      break;
    }
   case 69:
    $300 = $I7_0 >>> 1;
    $301 = 25 - $300 | 0;
    $303 = $301;
    label = 70;
    break;
   case 70:
    $304 = $qsize_0 << $303;
    $K8_0 = $304;
    $T_0 = $297;
    label = 71;
    break;
   case 71:
    $306 = $T_0 + 4 | 0;
    $307 = HEAP32[$306 >> 2] | 0;
    $308 = $307 & -8;
    $309 = ($308 | 0) == ($qsize_0 | 0);
    if ($309) {
      label = 76;
      break;
    } else {
      label = 72;
      break;
    }
   case 72:
    $311 = $K8_0 >>> 31;
    $312 = $T_0 + 16 + ($311 << 2) | 0;
    $313 = HEAP32[$312 >> 2] | 0;
    $314 = ($313 | 0) == 0;
    $315 = $K8_0 << 1;
    if ($314) {
      label = 73;
      break;
    } else {
      $K8_0 = $315;
      $T_0 = $313;
      label = 71;
      break;
    }
   case 73:
    $317 = $312;
    $318 = HEAP32[2308] | 0;
    $319 = $317 >>> 0 < $318 >>> 0;
    if ($319) {
      label = 75;
      break;
    } else {
      label = 74;
      break;
    }
   case 74:
    HEAP32[$312 >> 2] = $247;
    $_sum23 = $_sum + 24 | 0;
    $321 = $newbase + $_sum23 | 0;
    $322 = $321;
    HEAP32[$322 >> 2] = $T_0;
    $_sum24 = $_sum + 12 | 0;
    $323 = $newbase + $_sum24 | 0;
    $324 = $323;
    HEAP32[$324 >> 2] = $247;
    $_sum25 = $_sum + 8 | 0;
    $325 = $newbase + $_sum25 | 0;
    $326 = $325;
    HEAP32[$326 >> 2] = $247;
    label = 80;
    break;
   case 75:
    _abort();
    return 0;
    return 0;
   case 76:
    $329 = $T_0 + 8 | 0;
    $330 = HEAP32[$329 >> 2] | 0;
    $331 = $T_0;
    $332 = HEAP32[2308] | 0;
    $333 = $331 >>> 0 < $332 >>> 0;
    if ($333) {
      label = 79;
      break;
    } else {
      label = 77;
      break;
    }
   case 77:
    $335 = $330;
    $336 = $335 >>> 0 < $332 >>> 0;
    if ($336) {
      label = 79;
      break;
    } else {
      label = 78;
      break;
    }
   case 78:
    $338 = $330 + 12 | 0;
    HEAP32[$338 >> 2] = $247;
    HEAP32[$329 >> 2] = $247;
    $_sum20 = $_sum + 8 | 0;
    $339 = $newbase + $_sum20 | 0;
    $340 = $339;
    HEAP32[$340 >> 2] = $330;
    $_sum21 = $_sum + 12 | 0;
    $341 = $newbase + $_sum21 | 0;
    $342 = $341;
    HEAP32[$342 >> 2] = $T_0;
    $_sum22 = $_sum + 24 | 0;
    $343 = $newbase + $_sum22 | 0;
    $344 = $343;
    HEAP32[$344 >> 2] = 0;
    label = 80;
    break;
   case 79:
    _abort();
    return 0;
    return 0;
   case 80:
    $_sum1819 = $9 | 8;
    $346 = $newbase + $_sum1819 | 0;
    return $346 | 0;
  }
  return 0;
}
function _add_segment($tbase, $tsize) {
  $tbase = $tbase | 0;
  $tsize = $tsize | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_sum = 0, $_sum1 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $_sum2 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $_sum3 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $62 = 0, $_sum11 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $F_0 = 0, $_sum10 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $80 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $I1_0 = 0, $105 = 0, $106 = 0, $I1_0_c = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $115 = 0, $_c = 0, $116 = 0, $117 = 0, $119 = 0, $120 = 0, $122 = 0, $123 = 0, $125 = 0, $126 = 0, $T_0 = 0, $K2_0 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $140 = 0, $141 = 0, $143 = 0, $T_0_c7 = 0, $144 = 0, $145 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $155 = 0, $157 = 0, $158 = 0, $_c6 = 0, $159 = 0, $T_0_c = 0, $160 = 0, label = 0;
  label = 1;
  while (1) switch (label | 0) {
   case 1:
    $1 = HEAP32[2310] | 0;
    $2 = $1;
    $3 = _segment_holding($2) | 0;
    $4 = $3 | 0;
    $5 = HEAP32[$4 >> 2] | 0;
    $6 = $3 + 4 | 0;
    $7 = HEAP32[$6 >> 2] | 0;
    $8 = $5 + $7 | 0;
    $_sum = $7 - 47 | 0;
    $_sum1 = $7 - 39 | 0;
    $9 = $5 + $_sum1 | 0;
    $10 = $9;
    $11 = $10 & 7;
    $12 = ($11 | 0) == 0;
    if ($12) {
      $17 = 0;
      label = 3;
      break;
    } else {
      label = 2;
      break;
    }
   case 2:
    $14 = -$10 | 0;
    $15 = $14 & 7;
    $17 = $15;
    label = 3;
    break;
   case 3:
    $_sum2 = $_sum + $17 | 0;
    $18 = $5 + $_sum2 | 0;
    $19 = $1 + 16 | 0;
    $20 = $19;
    $21 = $18 >>> 0 < $20 >>> 0;
    $22 = $21 ? $2 : $18;
    $23 = $22 + 8 | 0;
    $24 = $23;
    $25 = $tbase;
    $26 = $tsize - 40 | 0;
    _init_top($25, $26);
    $27 = $22 + 4 | 0;
    $28 = $27;
    HEAP32[$28 >> 2] = 27;
    HEAP32[$23 >> 2] = HEAP32[2416] | 0;
    HEAP32[$23 + 4 >> 2] = HEAP32[9668 >> 2] | 0;
    HEAP32[$23 + 8 >> 2] = HEAP32[9672 >> 2] | 0;
    HEAP32[$23 + 12 >> 2] = HEAP32[9676 >> 2] | 0;
    HEAP32[2416] = $tbase;
    HEAP32[2417] = $tsize;
    HEAP32[2419] = 0;
    HEAP32[2418] = $24;
    $29 = $22 + 28 | 0;
    $30 = $29;
    HEAP32[$30 >> 2] = 7;
    $31 = $22 + 32 | 0;
    $32 = $31 >>> 0 < $8 >>> 0;
    if ($32) {
      $33 = $30;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 4:
    $34 = $33 + 4 | 0;
    HEAP32[$34 >> 2] = 7;
    $35 = $33 + 8 | 0;
    $36 = $35;
    $37 = $36 >>> 0 < $8 >>> 0;
    if ($37) {
      $33 = $34;
      label = 4;
      break;
    } else {
      label = 5;
      break;
    }
   case 5:
    $38 = ($22 | 0) == ($2 | 0);
    if ($38) {
      label = 29;
      break;
    } else {
      label = 6;
      break;
    }
   case 6:
    $40 = $22;
    $41 = $1;
    $42 = $40 - $41 | 0;
    $43 = $2 + $42 | 0;
    $_sum3 = $42 + 4 | 0;
    $44 = $2 + $_sum3 | 0;
    $45 = $44;
    $46 = HEAP32[$45 >> 2] | 0;
    $47 = $46 & -2;
    HEAP32[$45 >> 2] = $47;
    $48 = $42 | 1;
    $49 = $1 + 4 | 0;
    HEAP32[$49 >> 2] = $48;
    $50 = $43;
    HEAP32[$50 >> 2] = $42;
    $51 = $42 >>> 3;
    $52 = $42 >>> 0 < 256;
    if ($52) {
      label = 7;
      break;
    } else {
      label = 12;
      break;
    }
   case 7:
    $54 = $51 << 1;
    $55 = 9256 + ($54 << 2) | 0;
    $56 = $55;
    $57 = HEAP32[2304] | 0;
    $58 = 1 << $51;
    $59 = $57 & $58;
    $60 = ($59 | 0) == 0;
    if ($60) {
      label = 8;
      break;
    } else {
      label = 9;
      break;
    }
   case 8:
    $62 = $57 | $58;
    HEAP32[2304] = $62;
    $F_0 = $56;
    label = 11;
    break;
   case 9:
    $_sum11 = $54 + 2 | 0;
    $64 = 9256 + ($_sum11 << 2) | 0;
    $65 = HEAP32[$64 >> 2] | 0;
    $66 = $65;
    $67 = HEAP32[2308] | 0;
    $68 = $66 >>> 0 < $67 >>> 0;
    if ($68) {
      label = 10;
      break;
    } else {
      $F_0 = $65;
      label = 11;
      break;
    }
   case 10:
    _abort();
   case 11:
    $_sum10 = $54 + 2 | 0;
    $71 = 9256 + ($_sum10 << 2) | 0;
    HEAP32[$71 >> 2] = $1;
    $72 = $F_0 + 12 | 0;
    HEAP32[$72 >> 2] = $1;
    $73 = $1 + 8 | 0;
    HEAP32[$73 >> 2] = $F_0;
    $74 = $1 + 12 | 0;
    HEAP32[$74 >> 2] = $56;
    label = 29;
    break;
   case 12:
    $76 = $1;
    $77 = $42 >>> 8;
    $78 = ($77 | 0) == 0;
    if ($78) {
      $I1_0 = 0;
      label = 15;
      break;
    } else {
      label = 13;
      break;
    }
   case 13:
    $80 = $42 >>> 0 > 16777215;
    if ($80) {
      $I1_0 = 31;
      label = 15;
      break;
    } else {
      label = 14;
      break;
    }
   case 14:
    $82 = $77 + 1048320 | 0;
    $83 = $82 >>> 16;
    $84 = $83 & 8;
    $85 = $77 << $84;
    $86 = $85 + 520192 | 0;
    $87 = $86 >>> 16;
    $88 = $87 & 4;
    $89 = $88 | $84;
    $90 = $85 << $88;
    $91 = $90 + 245760 | 0;
    $92 = $91 >>> 16;
    $93 = $92 & 2;
    $94 = $89 | $93;
    $95 = 14 - $94 | 0;
    $96 = $90 << $93;
    $97 = $96 >>> 15;
    $98 = $95 + $97 | 0;
    $99 = $98 << 1;
    $100 = $98 + 7 | 0;
    $101 = $42 >>> ($100 >>> 0);
    $102 = $101 & 1;
    $103 = $102 | $99;
    $I1_0 = $103;
    label = 15;
    break;
   case 15:
    $105 = 9520 + ($I1_0 << 2) | 0;
    $106 = $1 + 28 | 0;
    $I1_0_c = $I1_0;
    HEAP32[$106 >> 2] = $I1_0_c;
    $107 = $1 + 20 | 0;
    HEAP32[$107 >> 2] = 0;
    $108 = $1 + 16 | 0;
    HEAP32[$108 >> 2] = 0;
    $109 = HEAP32[2305] | 0;
    $110 = 1 << $I1_0;
    $111 = $109 & $110;
    $112 = ($111 | 0) == 0;
    if ($112) {
      label = 16;
      break;
    } else {
      label = 17;
      break;
    }
   case 16:
    $114 = $109 | $110;
    HEAP32[2305] = $114;
    HEAP32[$105 >> 2] = $76;
    $115 = $1 + 24 | 0;
    $_c = $105;
    HEAP32[$115 >> 2] = $_c;
    $116 = $1 + 12 | 0;
    HEAP32[$116 >> 2] = $1;
    $117 = $1 + 8 | 0;
    HEAP32[$117 >> 2] = $1;
    label = 29;
    break;
   case 17:
    $119 = HEAP32[$105 >> 2] | 0;
    $120 = ($I1_0 | 0) == 31;
    if ($120) {
      $125 = 0;
      label = 19;
      break;
    } else {
      label = 18;
      break;
    }
   case 18:
    $122 = $I1_0 >>> 1;
    $123 = 25 - $122 | 0;
    $125 = $123;
    label = 19;
    break;
   case 19:
    $126 = $42 << $125;
    $K2_0 = $126;
    $T_0 = $119;
    label = 20;
    break;
   case 20:
    $128 = $T_0 + 4 | 0;
    $129 = HEAP32[$128 >> 2] | 0;
    $130 = $129 & -8;
    $131 = ($130 | 0) == ($42 | 0);
    if ($131) {
      label = 25;
      break;
    } else {
      label = 21;
      break;
    }
   case 21:
    $133 = $K2_0 >>> 31;
    $134 = $T_0 + 16 + ($133 << 2) | 0;
    $135 = HEAP32[$134 >> 2] | 0;
    $136 = ($135 | 0) == 0;
    $137 = $K2_0 << 1;
    if ($136) {
      label = 22;
      break;
    } else {
      $K2_0 = $137;
      $T_0 = $135;
      label = 20;
      break;
    }
   case 22:
    $139 = $134;
    $140 = HEAP32[2308] | 0;
    $141 = $139 >>> 0 < $140 >>> 0;
    if ($141) {
      label = 24;
      break;
    } else {
      label = 23;
      break;
    }
   case 23:
    HEAP32[$134 >> 2] = $76;
    $143 = $1 + 24 | 0;
    $T_0_c7 = $T_0;
    HEAP32[$143 >> 2] = $T_0_c7;
    $144 = $1 + 12 | 0;
    HEAP32[$144 >> 2] = $1;
    $145 = $1 + 8 | 0;
    HEAP32[$145 >> 2] = $1;
    label = 29;
    break;
   case 24:
    _abort();
   case 25:
    $148 = $T_0 + 8 | 0;
    $149 = HEAP32[$148 >> 2] | 0;
    $150 = $T_0;
    $151 = HEAP32[2308] | 0;
    $152 = $150 >>> 0 < $151 >>> 0;
    if ($152) {
      label = 28;
      break;
    } else {
      label = 26;
      break;
    }
   case 26:
    $154 = $149;
    $155 = $154 >>> 0 < $151 >>> 0;
    if ($155) {
      label = 28;
      break;
    } else {
      label = 27;
      break;
    }
   case 27:
    $157 = $149 + 12 | 0;
    HEAP32[$157 >> 2] = $76;
    HEAP32[$148 >> 2] = $76;
    $158 = $1 + 8 | 0;
    $_c6 = $149;
    HEAP32[$158 >> 2] = $_c6;
    $159 = $1 + 12 | 0;
    $T_0_c = $T_0;
    HEAP32[$159 >> 2] = $T_0_c;
    $160 = $1 + 24 | 0;
    HEAP32[$160 >> 2] = 0;
    label = 29;
    break;
   case 28:
    _abort();
   case 29:
    return;
  }
}
function _memset(ptr, value, num) {
  ptr = ptr | 0;
  value = value | 0;
  num = num | 0;
  var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
  stop = ptr + num | 0;
  if ((num | 0) >= 20) {
    value = value & 255;
    unaligned = ptr & 3;
    value4 = value | value << 8 | value << 16 | value << 24;
    stop4 = stop & ~3;
    if (unaligned) {
      unaligned = ptr + 4 - unaligned | 0;
      while ((ptr | 0) < (unaligned | 0)) {
        HEAP8[ptr] = value;
        ptr = ptr + 1 | 0;
      }
    }
    while ((ptr | 0) < (stop4 | 0)) {
      HEAP32[ptr >> 2] = value4;
      ptr = ptr + 4 | 0;
    }
  }
  while ((ptr | 0) < (stop | 0)) {
    HEAP8[ptr] = value;
    ptr = ptr + 1 | 0;
  }
}
function _strlen(ptr) {
  ptr = ptr | 0;
  var curr = 0;
  curr = ptr;
  while (HEAP8[curr] | 0) {
    curr = curr + 1 | 0;
  }
  return curr - ptr | 0;
}
function _memcpy(dest, src, num) {
  dest = dest | 0;
  src = src | 0;
  num = num | 0;
  var ret = 0;
  ret = dest | 0;
  if ((dest & 3) == (src & 3)) {
    while (dest & 3) {
      if ((num | 0) == 0) return ret | 0;
      HEAP8[dest] = HEAP8[src] | 0;
      dest = dest + 1 | 0;
      src = src + 1 | 0;
      num = num - 1 | 0;
    }
    while ((num | 0) >= 4) {
      HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
      dest = dest + 4 | 0;
      src = src + 4 | 0;
      num = num - 4 | 0;
    }
  }
  while ((num | 0) > 0) {
    HEAP8[dest] = HEAP8[src] | 0;
    dest = dest + 1 | 0;
    src = src + 1 | 0;
    num = num - 1 | 0;
  }
  return ret | 0;
}
function _memmove(dest, src, num) {
  dest = dest | 0;
  src = src | 0;
  num = num | 0;
  if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
    src = src + num | 0;
    dest = dest + num | 0;
    while ((num | 0) > 0) {
      dest = dest - 1 | 0;
      src = src - 1 | 0;
      num = num - 1 | 0;
      HEAP8[dest] = HEAP8[src] | 0;
    }
  } else {
    _memcpy(dest, src, num);
  }
}
function _strcpy(pdest, psrc) {
  pdest = pdest | 0;
  psrc = psrc | 0;
  var i = 0;
  do {
    HEAP8[pdest + i | 0] = HEAP8[psrc + i | 0];
    i = i + 1 | 0;
  } while (HEAP8[psrc + (i - 1) | 0] | 0);
  return pdest | 0;
}
function _memcmp(p1, p2, num) {
  p1 = p1 | 0;
  p2 = p2 | 0;
  num = num | 0;
  var i = 0, v1 = 0, v2 = 0;
  while ((i | 0) < (num | 0)) {
    v1 = HEAPU8[p1 + i | 0] | 0;
    v2 = HEAPU8[p2 + i | 0] | 0;
    if ((v1 | 0) != (v2 | 0)) return ((v1 | 0) > (v2 | 0) ? 1 : -1) | 0;
    i = i + 1 | 0;
  }
  return 0;
}
function _i64Add(a, b, c, d) {
  a = a | 0;
  b = b | 0;
  c = c | 0;
  d = d | 0;
  var l = 0;
  l = a + c >>> 0;
  return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}
function _i64Subtract(a, b, c, d) {
  a = a | 0;
  b = b | 0;
  c = c | 0;
  d = d | 0;
  var h = 0;
  h = b - d >>> 0;
  h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
  return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}
function _bitshift64Shl(low, high, bits) {
  low = low | 0;
  high = high | 0;
  bits = bits | 0;
  if ((bits | 0) < 32) {
    tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
    return low << bits;
  }
  tempRet0 = low << bits - 32;
  return 0;
}
function _bitshift64Lshr(low, high, bits) {
  low = low | 0;
  high = high | 0;
  bits = bits | 0;
  if ((bits | 0) < 32) {
    tempRet0 = high >>> bits;
    return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
  }
  tempRet0 = 0;
  return high >>> bits - 32 | 0;
}
function _bitshift64Ashr(low, high, bits) {
  low = low | 0;
  high = high | 0;
  bits = bits | 0;
  if ((bits | 0) < 32) {
    tempRet0 = high >> bits;
    return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
  }
  tempRet0 = (high | 0) < 0 ? -1 : 0;
  return high >> bits - 32 | 0;
}
function _llvm_ctlz_i32(x) {
  x = x | 0;
  var ret = 0;
  ret = HEAP8[ctlz_i8 + (x >>> 24) | 0] | 0;
  if ((ret | 0) < 8) return ret | 0;
  ret = HEAP8[ctlz_i8 + (x >> 16 & 255) | 0] | 0;
  if ((ret | 0) < 8) return ret + 8 | 0;
  ret = HEAP8[ctlz_i8 + (x >> 8 & 255) | 0] | 0;
  if ((ret | 0) < 8) return ret + 16 | 0;
  return (HEAP8[ctlz_i8 + (x & 255) | 0] | 0) + 24 | 0;
}
function _llvm_cttz_i32(x) {
  x = x | 0;
  var ret = 0;
  ret = HEAP8[cttz_i8 + (x & 255) | 0] | 0;
  if ((ret | 0) < 8) return ret | 0;
  ret = HEAP8[cttz_i8 + (x >> 8 & 255) | 0] | 0;
  if ((ret | 0) < 8) return ret + 8 | 0;
  ret = HEAP8[cttz_i8 + (x >> 16 & 255) | 0] | 0;
  if ((ret | 0) < 8) return ret + 16 | 0;
  return (HEAP8[cttz_i8 + (x >>> 24) | 0] | 0) + 24 | 0;
}
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1);
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + Math_imul($2, $6) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1);
  return (tempRet0 = (($8 >>> 16) + Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $10$0 = _i64Subtract(___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, 0) ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, $rem);
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) + Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem);
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $51 = (_llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0) - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $119 = (_llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0) - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $88 = ((_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0) - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1);
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $r_sroa_0_0_extract_trunc = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
function _vfprintf__wrapper(a1, a2, a3) {
  a1 = a1 | 0;
  a2 = a2 | 0;
  a3 = a3 | 0;
  return _vfprintf(a1 | 0, a2 | 0, a3 | 0) | 0;
}
function dynCall_iiii(index, a1, a2, a3) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  a3 = a3 | 0;
  return FUNCTION_TABLE_iiii[index & 1023](a1 | 0, a2 | 0, a3 | 0) | 0;
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  a3 = a3 | 0;
  a4 = a4 | 0;
  a5 = a5 | 0;
  FUNCTION_TABLE_viiiii[index & 1023](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}
function dynCall_vi(index, a1) {
  index = index | 0;
  a1 = a1 | 0;
  FUNCTION_TABLE_vi[index & 1023](a1 | 0);
}
function dynCall_vii(index, a1, a2) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  FUNCTION_TABLE_vii[index & 1023](a1 | 0, a2 | 0);
}
function dynCall_ii(index, a1) {
  index = index | 0;
  a1 = a1 | 0;
  return FUNCTION_TABLE_ii[index & 1023](a1 | 0) | 0;
}
function dynCall_viii(index, a1, a2, a3) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  a3 = a3 | 0;
  FUNCTION_TABLE_viii[index & 1023](a1 | 0, a2 | 0, a3 | 0);
}
function dynCall_v(index) {
  index = index | 0;
  FUNCTION_TABLE_v[index & 1023]();
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  a3 = a3 | 0;
  a4 = a4 | 0;
  a5 = a5 | 0;
  a6 = a6 | 0;
  FUNCTION_TABLE_viiiiii[index & 1023](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}
function dynCall_iii(index, a1, a2) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  return FUNCTION_TABLE_iii[index & 1023](a1 | 0, a2 | 0) | 0;
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  a3 = a3 | 0;
  a4 = a4 | 0;
  a5 = a5 | 0;
  return FUNCTION_TABLE_iiiiii[index & 1023](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}
function dynCall_viiii(index, a1, a2, a3, a4) {
  index = index | 0;
  a1 = a1 | 0;
  a2 = a2 | 0;
  a3 = a3 | 0;
  a4 = a4 | 0;
  FUNCTION_TABLE_viiii[index & 1023](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}
function b0(p0, p1, p2) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  p2 = p2 | 0;
  abort(0);
  return 0;
}
function b1(p0, p1, p2, p3, p4) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  p2 = p2 | 0;
  p3 = p3 | 0;
  p4 = p4 | 0;
  abort(1);
}
function b2(p0) {
  p0 = p0 | 0;
  abort(2);
}
function b3(p0, p1) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  abort(3);
}
function b4(p0) {
  p0 = p0 | 0;
  abort(4);
  return 0;
}
function b5(p0, p1, p2) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  p2 = p2 | 0;
  abort(5);
}
function b6() {
  abort(6);
}
function b7(p0, p1, p2, p3, p4, p5) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  p2 = p2 | 0;
  p3 = p3 | 0;
  p4 = p4 | 0;
  p5 = p5 | 0;
  abort(7);
}
function b8(p0, p1) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  abort(8);
  return 0;
}
function b9(p0, p1, p2, p3, p4) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  p2 = p2 | 0;
  p3 = p3 | 0;
  p4 = p4 | 0;
  abort(9);
  return 0;
}
function b10(p0, p1, p2, p3) {
  p0 = p0 | 0;
  p1 = p1 | 0;
  p2 = p2 | 0;
  p3 = p3 | 0;
  abort(10);
}
// EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,b0,_polymod_out_str,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,_default_element_set_str,b0,b0,b0,b0,b0,_curve_out_str
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,_fq_snprint
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,_poly_snprint
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,_zp_set_str,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,_gmp_snprintf_format,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,___gmp_default_reallocate,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,_mulg_set_str
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,_fq_out_str
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,_mulg_snprint
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,_default_element_snprint,b0,_zp_out_str,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,_fp_set_str,b0,_vfprintf__wrapper,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,_gmp_fprintf_memory,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,_mulg_out_str,b0,_gmp_fprintf_reps,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,_fp_snprint,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,_zp_snprint,b0,b0,b0,b0,b0,b0
  ,b0,_fp_out_str19,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,_curve_set_str,b0,b0
  ,b0,b0,b0,b0,b0,_format_cb,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,_fp_out_str54,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,_polymod_set_str,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,_fq_set_str
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,_curve_snprint,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,_gmp_snprintf_memory
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,_format_cbv,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,_poly_out_str,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,_polymod_snprint,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,_gmp_snprintf_reps,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,_cc_miller_no_denom_affine523,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,_e_miller_affine,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,_cc_miller_no_denom_affine
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,_cc_miller_no_denom_proj537,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,_a1_pairings_affine,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,_e_miller_proj
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,_a_pairings_affine,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,_cc_miller_no_denom_proj,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,_generic_prod_pairings,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,_cc_pairings_affine,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_vi = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,_field_clear_fq,b2,b2,b2,b2,b2,_e_finalpow
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,_polymod_set1,b2,_polymod_set0,b2,b2,b2,_polymod_init,b2,b2
  ,b2,_fp_set038,b2,b2,b2,b2,b2,b2,b2,_fp_clear16
  ,b2,b2,b2,b2,b2,b2,b2,_fp_field_clear73,b2,b2
  ,b2,_fp_set139,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,_zp_random
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,_a_clear,b2,b2,b2,b2,b2,b2,b2,_e_pairing_clear
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,_default_pbc_free,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,_gt_random,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,_zp_set0,b2,_zp_set1,b2,_fp_clear51,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,_field_clear_curve,b2,b2
  ,b2,_fp_random34,b2,_cc_finalpow,b2,_curve_random_solvefory,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,_a_pairing_clear,b2,b2,b2,b2,b2,_f_finalpow,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,_zp_clear,b2,b2
  ,b2,b2,b2,b2,b2,_default_pp_clear,b2,_fq_clear,b2,b2
  ,b2,_curve_set1,b2,b2,b2,_g_finalpow,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,_a1_clear,b2,b2,b2,b2
  ,b2,_fp_field_clear41,b2,b2,b2,b2,b2,b2,b2,_g_clear
  ,b2,_fq_set1,b2,_fq_set0,b2,___gmp_randclear_mt,b2,_curve_random_pointmul,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,_poly_clear,b2,b2
  ,b2,_mulg_init,b2,b2,b2,b2,b2,_clear,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,_poly_init,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,_e_clear,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,_a1_pairing_pp_clear,b2,_d_clear,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,_fp_init15,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,_polymod_clear,b2,b2,b2,b2,b2,_fq_init,b2,b2
  ,b2,b2,b2,b2,b2,_curve_clear,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,_fp_init50,b2,b2,b2,_mulg_set1,b2,b2,b2,_zp_field_clear
  ,b2,_mulg_clear,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,_a_finalpow,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,_d_pairing_pp_clear,b2,b2,b2,b2
  ,b2,_field_clear_fi,b2,_default_element_pp_clear,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,_field_clear_poly
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,_curve_init,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,_g_pairing_clear,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,_mulg_field_clear,b2,b2,b2,_mulg_pp_clear,b2,b2,b2,_zp_init
  ,b2,b2,b2,_fp_random66,b2,b2,b2,_fq_random,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,_f_clear478
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,_a_pairing_ellnet_pp_clear,b2,b2,b2,b2
  ,b2,_polymod_random,b2,_g_pairing_pp_clear,b2,b2,b2,b2,b2,_zero_random
  ,b2,b2,b2,_f_pairing_clear,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,_warn_field_clear,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,_field_clear_polymod
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,_fp_set070,b2,b2
  ,b2,_poly_set0,b2,_poly_set1,b2,b2,b2,b2,b2,_a1_pairing_clear
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,_a_pairing_pp_clear,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,_d_pairing_clear,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,_fp_set171,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_vii = [b3,b3,b3,b3,_polymod_set_si,b3,b3,b3,_element_tonelli,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_fp_double26,b3,b3
  ,b3,b3,b3,b3,b3,_generic_set_si,b3,_default_element_pp_init,b3,b3
  ,b3,_a1_init_pairing,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,_mulg_pp_init,b3,_fp_invert33,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,_polymod_sqrt,b3,b3,b3,b3,b3,_fq_to_mpz,b3,_curve_set_multiz
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,_generic_out_info,b3,b3,b3,b3,b3,b3
  ,b3,_mulg_invert,b3,b3,b3,b3,b3,b3,b3,_fq_set
  ,b3,b3,b3,b3,b3,b3,b3,_zero_set_mpz,b3,b3
  ,b3,b3,b3,_poly_set_multiz,b3,b3,b3,_generic_set_multiz,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_polymod_double,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,_curve_double,b3,_zero_to_mpz,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_fp_neg29,b3,_generic_double
  ,b3,b3,b3,_fi_sqrt,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,_zp_halve,b3,b3,b3,b3
  ,b3,b3,b3,_mulg_to_mpz,b3,_fq_double,b3,_fp_out_info,b3,b3
  ,b3,_fq_set_mpz,b3,b3,b3,b3,b3,_a_init_pairing,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_zp_set,b3,b3
  ,b3,_e_out_str,b3,b3,b3,_fq_out_info,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,_poly_out_info,b3,b3,b3,_fp_double59,b3,b3,b3,b3
  ,b3,b3,b3,_fq_sqrt,b3,_polymod_square,b3,b3,b3,_polymod_invert
  ,b3,_fp_halve27,b3,b3,b3,b3,b3,_fp_neg62,b3,b3
  ,b3,_zp_to_mpz,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,_generic_halve,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,_fi_square,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,_g_init_pairing
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,_zp_neg,b3,_zp_set_mpz,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,_e_init_pairing,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,___gmp_default_free
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,_zp_double,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_element_field_to_poly,b3,b3
  ,b3,_polymod_out_info,b3,_polymod_set_mpz,b3,b3,b3,b3,b3,b3
  ,b3,_curve_out_info,b3,b3,b3,b3,b3,_fp_halve60,b3,b3
  ,b3,_polymod_square_degree3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,_poly_to_mpz,b3,b3,b3,b3,b3,_fq_square,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,_fp_set57
  ,b3,_d_init_pairing,b3,b3,b3,b3,b3,b3,b3,_fi_invert
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,_polymod_neg
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,_fp_set_si52,b3,_g_out_str,b3,_zp_invert,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_zp_out_info,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,_fq_invert,b3,b3,b3,_polymod_set_multiz
  ,b3,_poly_double,b3,b3,b3,_fp_to_mpz44,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_a_out_str,b3,b3
  ,b3,b3,b3,b3,b3,_fp_set_mpz18,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,_field_init_mont_fp,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,_zp_set_si
  ,b3,_mulg_set,b3,b3,b3,b3,b3,_fp_set_si17,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_zp_square,b3,b3
  ,b3,_randseed_mt,b3,b3,b3,b3,b3,_f_out_str479,b3,b3
  ,b3,b3,b3,_fi_out_info,b3,_fp_square25,b3,_fq_neg,b3,_element_field_to_polymod
  ,b3,_fp_to_mpz76,b3,b3,b3,_fp_set_mpz53,b3,_poly_set,b3,___gmp_randiset_mt
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,_curve_invert
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_fq_set_multiz,b3,b3
  ,b3,b3,b3,_fp_invert65,b3,_fq_set_si,b3,_generic_square,b3,b3
  ,b3,_d_out_str,b3,b3,b3,_fp_out_info77,b3,_polymod_to_mpz,b3,b3
  ,b3,_poly_set_si,b3,b3,b3,b3,b3,b3,b3,_f_init_pairing
  ,b3,b3,b3,b3,b3,b3,b3,_a1_out_str,b3,b3
  ,b3,b3,b3,_polymod_set,b3,_fp_set22,b3,_poly_neg,b3,b3
  ,b3,b3,b3,_poly_set_mpz,b3,b3,b3,b3,b3,b3
  ,b3,_mulg_set_multiz,b3,b3,b3,b3,b3,_gt_out_info,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,_curve_set,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_ii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,_polymod_length_in_bytes,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,_gmp_snprintf_final,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,_mulg_is1,b4,b4,b4,b4,b4,b4
  ,b4,_even_curve_is_sqr,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,_fp_is168,b4,b4,b4,b4,b4,b4
  ,b4,_fq_is0,b4,_fq_is1,b4,_fq_is_sqr,b4,_curve_sign,b4,b4
  ,b4,b4,b4,b4,b4,_fq_get_y,b4,_fq_get_x,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,_fi_is_sqr,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,_fp_sgn_odd63,b4,b4
  ,b4,b4,b4,_polymod_is_sqr,b4,b4,b4,b4,b4,_generic_get_x
  ,b4,_generic_get_y,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,_fp_sgn_even32,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,_fp_is_sqr40
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,_generic_is1,b4,_generic_is0
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,_polymod_sgn,b4,_poly_sgn
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,_curve_length_in_bytes,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,_fq_item_count
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,_zp_is1,b4,_zp_is0,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,_generic_item_count,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,_default_pbc_malloc
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,_polymod_coeff_count,b4,b4,b4,b4,b4,_curve_is1,b4,b4
  ,b4,b4,b4,_fp_is_sqr72,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,_zp_is_sqr,b4,b4,b4,b4,b4,_fp_is069
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,_fp_sgn_odd31,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,_poly_coeff_count
  ,b4,b4,b4,b4,b4,b4,b4,_zp_sgn_even,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,_poly_length_in_bytes
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,_mulg_length_in_bytes
  ,b4,b4,b4,b4,b4,_curve_get_x,b4,_curve_get_y,b4,b4
  ,b4,_mulg_item_count,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,_curve_item_count,b4,_zp_sgn_odd
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,_odd_curve_is_sqr,b4,b4
  ,b4,b4,b4,___gmp_default_allocate,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,_polymod_is1,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,_fq_length_in_bytes,b4,_fq_sign
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,_polymod_is0,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,_poly_is1
  ,b4,_poly_is0,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,_fp_is037,b4,b4,b4,b4,b4,_fp_is136
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_viii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_generic_mul_mpz
  ,b5,_polymod_sub,b5,b5,b5,_d_pairing_option_set,b5,b5,b5,b5
  ,b5,_fq_from_hash,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,_fi_mul,b5,_g_pairing_pp_init,b5,_mulg_div,b5,b5
  ,b5,b5,b5,b5,b5,_generic_mul_si,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,_fq_add,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,_zp_add
  ,b5,b5,b5,b5,b5,_default_pp_init,b5,b5,b5,b5
  ,b5,b5,b5,_a1_pairing_pp_apply,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,_fp_sub56,b5,b5,b5,b5
  ,b5,_a_pairing_ellnet_pp_init,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,_element_pow_mpz244,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,_mulg_pow_mpz,b5,b5,b5,_file_mpz_random
  ,b5,_phi_identity441,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,_zp_pow_mpz
  ,b5,_generic_add_ui,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,_default_pp_apply,b5,b5,b5,b5,b5,b5
  ,b5,_d_pairing_pp_apply,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,_poly_sub,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,_fp_add20
  ,b5,b5,b5,_mulg_mul,b5,_fq_mul_si,b5,b5,b5,_curve_from_hash
  ,b5,_polymod_from_hash,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,_polymod_mul_degree6,b5,b5,b5,_polymod_mul_degree3
  ,b5,b5,b5,_mulg_pp_pow,b5,b5,b5,b5,b5,_a_pairing_ellnet_pp_apply
  ,b5,b5,b5,_fp_pow_mpz28,b5,b5,b5,b5,b5,b5
  ,b5,_g_pairing_pp_apply,b5,b5,b5,b5,b5,_zp_mul_si,b5,_fq_mul_mpz
  ,b5,b5,b5,b5,b5,_poly_mul_mpz,b5,b5,b5,_deterministic_mpz_random
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,_fp_add55,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,_polymod_mul_mpz
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,_multi_double,b5,_fp_pow_mpz61,b5,_a_pairing_pp_init,b5,_fp_from_hash35
  ,b5,b5,b5,b5,b5,_gt_from_hash,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,_default_element_pp_pow,b5,b5,b5,b5,b5,b5
  ,b5,_curve_mul,b5,b5,b5,b5,b5,_poly_mul,b5,b5
  ,b5,_zp_mul,b5,b5,b5,b5,b5,b5,b5,_fq_sub
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,_poly_mul_si,b5,b5
  ,b5,_polymod_add,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,_a1_pairing_option_set,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,_default_option_set,b5,b5,b5,b5
  ,b5,_poly_add,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,_phi_identity,b5,b5,b5,b5,b5,_fp_from_hash67,b5,b5
  ,b5,b5,b5,_polymod_mul,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,_zp_sub,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,_a_pairing_option_set,b5,b5,b5,b5
  ,b5,_a1_pairing_pp_init,b5,b5,b5,_polymod_mul_si,b5,b5,b5,b5
  ,b5,b5,b5,_fp_mul_si24,b5,b5,b5,b5,b5,b5
  ,b5,___gmp_randget_mt,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,_a_pairing_pp_apply,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,_e_pairing_option_set,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,_generic_sub,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,_generic_pow_mpz,b5,_phi_warning,b5,_generic_div
  ,b5,b5,b5,_fq_mul,b5,_fp_mul23,b5,b5,b5,_zp_mul_mpz
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,_fp_mul58,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,_d_pairing_pp_init,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,_zp_from_hash,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,_fp_sub21,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,_g_pairing_option_set,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_v = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_viiiiii = [b7,b7,b7,b7,b7,b7,_jacobi_hook,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,_hgcd_hook,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,_hgcd_jacobi_hook,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,___gmpn_gcdext_hook
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_iii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,_mulg_from_bytes
  ,b8,b8,b8,b8,b8,b8,b8,_cmp_tidy,b8,b8
  ,b8,_pbc_param_init_a1,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,_mulg_item,b8,_mulg_to_bytes,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,_generic_cmp,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,_fp_to_bytes74
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,_poly_from_bytes,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,_string_cbv
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,_poly_to_bytes,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,_string_cb,b8,_element_cb
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,_mulg_cmp
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,_cmp_int,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,_fp_from_bytes43
  ,b8,b8,b8,b8,b8,_poly_cmp,b8,b8,b8,_poly_coeff
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,_zp_to_bytes,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,_element_cbv,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,_curve_from_bytes,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,_fq_item,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,_polymod_cmp
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,_polymod_coeff,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,_polymod_from_bytes
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,_curve_item,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,_fq_to_bytes,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,_fq_cmp,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,_fq_from_bytes,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,_fp_cmp64,b8,b8,b8,b8,b8,_fp_from_bytes75
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,_curve_to_bytes,b8,b8,b8,b8,b8,_fp_to_bytes42,b8,_pbc_param_init_g
  ,b8,_pbc_param_init_f,b8,_pbc_param_init_e,b8,_pbc_param_init_d,b8,_pbc_param_init_a,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,_generic_item
  ,b8,b8,b8,_zp_cmp,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,_polymod_to_bytes,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,_zp_from_bytes,b8,b8,b8,_curve_cmp
  ,b8,b8,b8,b8,b8,_default_pbc_realloc,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,_fp_cmp30,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_iiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,_cc_is_almost_coddh,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,_generic_is_almost_coddh
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,_cc_is_almost_coddh517
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_viiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,_cc_pairing516
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,_a_pairing_proj,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,_cc_pairing,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,_a_pairing_affine,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,_g_pairing_ellnet,b10,b10,b10,b10
  ,b10,b10,b10,_a1_pairing,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,_f_pairing,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,_e_pairing,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,_e_pairing_ellnet,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,_a_pairing_ellnet,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,_a1_pairing_proj,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,_multi_add,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10];
  return { _memcmp: _memcmp, _strlen: _strlen, _cpabe_enc: _cpabe_enc, _free: _free, _realloc: _realloc, _memmove: _memmove, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _cpabe_get_private_key: _cpabe_get_private_key, _cpabe_random_init: _cpabe_random_init, _cpabe_dec: _cpabe_dec, _strcpy: _strcpy, _cpabe_setup: _cpabe_setup, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
({ Math: Math, Int8Array: Int8Array, Int16Array: Int16Array, Int32Array: Int32Array, Uint8Array: Uint8Array, Uint16Array: Uint16Array, Uint32Array: Uint32Array, Float32Array: Float32Array, Float64Array: Float64Array }, { abort: abort, assert: assert, asmPrintInt: asmPrintInt, asmPrintFloat: asmPrintFloat, copyTempDouble: copyTempDouble, copyTempFloat: copyTempFloat, min: Math_min, invoke_iiii: invoke_iiii, invoke_viiiii: invoke_viiiii, invoke_vi: invoke_vi, invoke_vii: invoke_vii, invoke_ii: invoke_ii, invoke_viii: invoke_viii, invoke_v: invoke_v, invoke_viiiiii: invoke_viiiiii, invoke_iii: invoke_iii, invoke_iiiiii: invoke_iiiiii, invoke_viiii: invoke_viiii, _llvm_va_end: _llvm_va_end, _strncmp: _strncmp, _sscanf: _sscanf, _llvm_uadd_with_overflow_i32: _llvm_uadd_with_overflow_i32, _snprintf: _snprintf, _vsnprintf: _vsnprintf, __scanString: __scanString, _fclose: _fclose, _strtok_r: _strtok_r, _abort: _abort, _fprintf: _fprintf, _pread: _pread, __isFloat: __isFloat, _close: _close, _fopen: _fopen, __reallyNegative: __reallyNegative, _nl_langinfo: _nl_langinfo, _strchr: _strchr, _fputc: _fputc, _puts: _puts, _llvm_stackrestore: _llvm_stackrestore, _open: _open, _strtok: _strtok, ___setErrNo: ___setErrNo, _fwrite: _fwrite, _llvm_va_copy: _llvm_va_copy, _qsort: _qsort, _write: _write, _fputs: _fputs, _isalpha: _isalpha, _exit: _exit, _sprintf: _sprintf, _strdup: _strdup, _isspace: _isspace, _sysconf: _sysconf, _fread: _fread, _read: _read, _asprintf: _asprintf, _ferror: _ferror, __formatString: __formatString, _vfprintf: _vfprintf, _pwrite: _pwrite, _isalnum: _isalnum, _fsync: _fsync, _llvm_stacksave: _llvm_stacksave, ___errno_location: ___errno_location, _llvm_bswap_i32: _llvm_bswap_i32, _sbrk: _sbrk, _time: _time, _islower: _islower, __exit: __exit, _strcmp: _strcmp, _memchr: _memchr, STACKTOP: STACKTOP, STACK_MAX: STACK_MAX, tempDoublePtr: tempDoublePtr, ABORT: ABORT, cttz_i8: cttz_i8, ctlz_i8: ctlz_i8, NaN: NaN, Infinity: Infinity, _stdout: _stdout, _stderr: _stderr }, buffer);
var _memcmp = Module["_memcmp"] = asm._memcmp;
var _strlen = Module["_strlen"] = asm._strlen;
var _cpabe_enc = Module["_cpabe_enc"] = asm._cpabe_enc;
var _free = Module["_free"] = asm._free;
var _realloc = Module["_realloc"] = asm._realloc;
var _memmove = Module["_memmove"] = asm._memmove;
var _memset = Module["_memset"] = asm._memset;
var _malloc = Module["_malloc"] = asm._malloc;
var _memcpy = Module["_memcpy"] = asm._memcpy;
var _cpabe_get_private_key = Module["_cpabe_get_private_key"] = asm._cpabe_get_private_key;
var _cpabe_random_init = Module["_cpabe_random_init"] = asm._cpabe_random_init;
var _cpabe_dec = Module["_cpabe_dec"] = asm._cpabe_dec;
var _strcpy = Module["_strcpy"] = asm._strcpy;
var _cpabe_setup = Module["_cpabe_setup"] = asm._cpabe_setup;
var dynCall_iiii = Module["dynCall_iiii"] = asm.dynCall_iiii;
var dynCall_viiiii = Module["dynCall_viiiii"] = asm.dynCall_viiiii;
var dynCall_vi = Module["dynCall_vi"] = asm.dynCall_vi;
var dynCall_vii = Module["dynCall_vii"] = asm.dynCall_vii;
var dynCall_ii = Module["dynCall_ii"] = asm.dynCall_ii;
var dynCall_viii = Module["dynCall_viii"] = asm.dynCall_viii;
var dynCall_v = Module["dynCall_v"] = asm.dynCall_v;
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm.dynCall_viiiiii;
var dynCall_iii = Module["dynCall_iii"] = asm.dynCall_iii;
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm.dynCall_iiiiii;
var dynCall_viiii = Module["dynCall_viiii"] = asm.dynCall_viiii;
Runtime.stackAlloc = function(size) { return asm.stackAlloc(size) };
Runtime.stackSave = function() { return asm.stackSave() };
Runtime.stackRestore = function(top) { asm.stackRestore(top) };
// TODO: strip out parts of this we do not need
//======= begin closure i64 code =======
// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */
var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };
  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.
    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };
  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.
  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};
  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }
    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };
  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };
  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };
  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };
  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.
  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;
  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);
  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);
  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);
  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };
  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };
  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }
    if (this.isZero()) {
      return '0';
    }
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }
    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };
  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };
  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };
  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };
  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };
  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };
  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };
  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };
  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };
  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }
    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }
    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };
  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };
  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };
  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }
    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.
    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;
    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;
    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };
  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);
      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }
      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }
      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };
  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };
  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };
  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };
  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };
  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };
  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };
  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };
  //======= begin jsbn =======
  var navigator = { appName: 'Modern Browser' }; // polyfill a little
  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/
  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */
  // Basic JavaScript BN library - subset useful for RSA encryption.
  // Bits per digit
  var dbits;
  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);
  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }
  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }
  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.
  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }
  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);
  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;
  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }
  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }
  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }
  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }
  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }
  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }
  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }
  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }
  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }
  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }
  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }
  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }
  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }
  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }
  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }
  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }
  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }
  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }
  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }
  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }
  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;
  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }
  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }
  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }
  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }
  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }
  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }
  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;
  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }
  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }
  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }
  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;
  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;
  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);
  // jsbn2 stuff
  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }
  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }
  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }
  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }
  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }
  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }
  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }
  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }
  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;
  //======= end jsbn =======
  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();
//======= end closure i64 code =======
// === Auto-generated postamble setup entry stuff ===
Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(!Module['preRun'] || Module['preRun'].length == 0, 'cannot call main when preRun functions remain to be called');
  args = args || [];
  ensureInitRuntime();
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);
  var ret;
  var initialStackTop = STACKTOP;
  try {
    ret = Module['_main'](argc, argv, 0);
  }
  catch(e) {
    if (e.name == 'ExitStatus') {
      return e.status;
    } else if (e == 'SimulateInfiniteLoop') {
      Module['noExitRuntime'] = true;
    } else {
      throw e;
    }
  } finally {
    STACKTOP = initialStackTop;
  }
  return ret;
}
function run(args) {
  args = args || Module['arguments'];
  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }
  function doRun() {
    ensureInitRuntime();
    preMain();
    var ret = 0;
    calledRun = true;
    if (Module['_main'] && shouldRunNow) {
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }
  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = Module.run = run;
// {{PRE_RUN_ADDITIONS}}
if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}
run();
// {{POST_RUN_ADDITIONS}}
  // {{MODULE_ADDITIONS}}
